
STM32L4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001d730  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000d7980  0801d8c0  0801d8c0  0002d8c0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  080f5240  080f5240  00105240  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  080f5248  080f5248  00105248  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  080f524c  080f524c  0010524c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         0000239c  20000000  080f5250  00110000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          0000a4b4  2000239c  080f75ec  0011239c  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  2000c850  080f75ec  0011c850  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  0011239c  2**0
                  CONTENTS, READONLY
 10 .debug_info   000fc398  00000000  00000000  001123cc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 0001a4e6  00000000  00000000  0020e764  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00037c0c  00000000  00000000  00228c4a  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_aranges 00003f28  00000000  00000000  00260858  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00006100  00000000  00000000  00264780  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   00035cb3  00000000  00000000  0026a880  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    00013ae0  00000000  00000000  002a0533  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .comment      0000007c  00000000  00000000  002b4013  2**0
                  CONTENTS, READONLY
 18 .debug_frame  0000b894  00000000  00000000  002b4090  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000239c 	.word	0x2000239c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0801d8a8 	.word	0x0801d8a8

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200023a0 	.word	0x200023a0
 80001cc:	0801d8a8 	.word	0x0801d8a8

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003be:	f1a4 0401 	sub.w	r4, r4, #1
 80003c2:	d1e9      	bne.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f092 0f00 	teq	r2, #0
 800056a:	bf14      	ite	ne
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	4770      	bxeq	lr
 8000572:	b530      	push	{r4, r5, lr}
 8000574:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000578:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800057c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000580:	e720      	b.n	80003c4 <__adddf3+0x138>
 8000582:	bf00      	nop

08000584 <__aeabi_ul2d>:
 8000584:	ea50 0201 	orrs.w	r2, r0, r1
 8000588:	bf08      	it	eq
 800058a:	4770      	bxeq	lr
 800058c:	b530      	push	{r4, r5, lr}
 800058e:	f04f 0500 	mov.w	r5, #0
 8000592:	e00a      	b.n	80005aa <__aeabi_l2d+0x16>

08000594 <__aeabi_l2d>:
 8000594:	ea50 0201 	orrs.w	r2, r0, r1
 8000598:	bf08      	it	eq
 800059a:	4770      	bxeq	lr
 800059c:	b530      	push	{r4, r5, lr}
 800059e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005a2:	d502      	bpl.n	80005aa <__aeabi_l2d+0x16>
 80005a4:	4240      	negs	r0, r0
 80005a6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005aa:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005ae:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005b2:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005b6:	f43f aedc 	beq.w	8000372 <__adddf3+0xe6>
 80005ba:	f04f 0203 	mov.w	r2, #3
 80005be:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005c2:	bf18      	it	ne
 80005c4:	3203      	addne	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005d2:	f1c2 0320 	rsb	r3, r2, #32
 80005d6:	fa00 fc03 	lsl.w	ip, r0, r3
 80005da:	fa20 f002 	lsr.w	r0, r0, r2
 80005de:	fa01 fe03 	lsl.w	lr, r1, r3
 80005e2:	ea40 000e 	orr.w	r0, r0, lr
 80005e6:	fa21 f102 	lsr.w	r1, r1, r2
 80005ea:	4414      	add	r4, r2
 80005ec:	e6c1      	b.n	8000372 <__adddf3+0xe6>
 80005ee:	bf00      	nop

080005f0 <__aeabi_dmul>:
 80005f0:	b570      	push	{r4, r5, r6, lr}
 80005f2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005f6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005fa:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005fe:	bf1d      	ittte	ne
 8000600:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000604:	ea94 0f0c 	teqne	r4, ip
 8000608:	ea95 0f0c 	teqne	r5, ip
 800060c:	f000 f8de 	bleq	80007cc <__aeabi_dmul+0x1dc>
 8000610:	442c      	add	r4, r5
 8000612:	ea81 0603 	eor.w	r6, r1, r3
 8000616:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800061a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800061e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000622:	bf18      	it	ne
 8000624:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000628:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800062c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000630:	d038      	beq.n	80006a4 <__aeabi_dmul+0xb4>
 8000632:	fba0 ce02 	umull	ip, lr, r0, r2
 8000636:	f04f 0500 	mov.w	r5, #0
 800063a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800063e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000642:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000646:	f04f 0600 	mov.w	r6, #0
 800064a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800064e:	f09c 0f00 	teq	ip, #0
 8000652:	bf18      	it	ne
 8000654:	f04e 0e01 	orrne.w	lr, lr, #1
 8000658:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800065c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000660:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000664:	d204      	bcs.n	8000670 <__aeabi_dmul+0x80>
 8000666:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800066a:	416d      	adcs	r5, r5
 800066c:	eb46 0606 	adc.w	r6, r6, r6
 8000670:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000674:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000678:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800067c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000680:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000684:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000688:	bf88      	it	hi
 800068a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800068e:	d81e      	bhi.n	80006ce <__aeabi_dmul+0xde>
 8000690:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000694:	bf08      	it	eq
 8000696:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800069a:	f150 0000 	adcs.w	r0, r0, #0
 800069e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006a2:	bd70      	pop	{r4, r5, r6, pc}
 80006a4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006a8:	ea46 0101 	orr.w	r1, r6, r1
 80006ac:	ea40 0002 	orr.w	r0, r0, r2
 80006b0:	ea81 0103 	eor.w	r1, r1, r3
 80006b4:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006b8:	bfc2      	ittt	gt
 80006ba:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006be:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006c2:	bd70      	popgt	{r4, r5, r6, pc}
 80006c4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006c8:	f04f 0e00 	mov.w	lr, #0
 80006cc:	3c01      	subs	r4, #1
 80006ce:	f300 80ab 	bgt.w	8000828 <__aeabi_dmul+0x238>
 80006d2:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006d6:	bfde      	ittt	le
 80006d8:	2000      	movle	r0, #0
 80006da:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006de:	bd70      	pople	{r4, r5, r6, pc}
 80006e0:	f1c4 0400 	rsb	r4, r4, #0
 80006e4:	3c20      	subs	r4, #32
 80006e6:	da35      	bge.n	8000754 <__aeabi_dmul+0x164>
 80006e8:	340c      	adds	r4, #12
 80006ea:	dc1b      	bgt.n	8000724 <__aeabi_dmul+0x134>
 80006ec:	f104 0414 	add.w	r4, r4, #20
 80006f0:	f1c4 0520 	rsb	r5, r4, #32
 80006f4:	fa00 f305 	lsl.w	r3, r0, r5
 80006f8:	fa20 f004 	lsr.w	r0, r0, r4
 80006fc:	fa01 f205 	lsl.w	r2, r1, r5
 8000700:	ea40 0002 	orr.w	r0, r0, r2
 8000704:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000708:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800070c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000710:	fa21 f604 	lsr.w	r6, r1, r4
 8000714:	eb42 0106 	adc.w	r1, r2, r6
 8000718:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800071c:	bf08      	it	eq
 800071e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000722:	bd70      	pop	{r4, r5, r6, pc}
 8000724:	f1c4 040c 	rsb	r4, r4, #12
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f304 	lsl.w	r3, r0, r4
 8000730:	fa20 f005 	lsr.w	r0, r0, r5
 8000734:	fa01 f204 	lsl.w	r2, r1, r4
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000740:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000744:	f141 0100 	adc.w	r1, r1, #0
 8000748:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800074c:	bf08      	it	eq
 800074e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000752:	bd70      	pop	{r4, r5, r6, pc}
 8000754:	f1c4 0520 	rsb	r5, r4, #32
 8000758:	fa00 f205 	lsl.w	r2, r0, r5
 800075c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000760:	fa20 f304 	lsr.w	r3, r0, r4
 8000764:	fa01 f205 	lsl.w	r2, r1, r5
 8000768:	ea43 0302 	orr.w	r3, r3, r2
 800076c:	fa21 f004 	lsr.w	r0, r1, r4
 8000770:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000774:	fa21 f204 	lsr.w	r2, r1, r4
 8000778:	ea20 0002 	bic.w	r0, r0, r2
 800077c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f094 0f00 	teq	r4, #0
 8000790:	d10f      	bne.n	80007b2 <__aeabi_dmul+0x1c2>
 8000792:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000796:	0040      	lsls	r0, r0, #1
 8000798:	eb41 0101 	adc.w	r1, r1, r1
 800079c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a0:	bf08      	it	eq
 80007a2:	3c01      	subeq	r4, #1
 80007a4:	d0f7      	beq.n	8000796 <__aeabi_dmul+0x1a6>
 80007a6:	ea41 0106 	orr.w	r1, r1, r6
 80007aa:	f095 0f00 	teq	r5, #0
 80007ae:	bf18      	it	ne
 80007b0:	4770      	bxne	lr
 80007b2:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007b6:	0052      	lsls	r2, r2, #1
 80007b8:	eb43 0303 	adc.w	r3, r3, r3
 80007bc:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c0:	bf08      	it	eq
 80007c2:	3d01      	subeq	r5, #1
 80007c4:	d0f7      	beq.n	80007b6 <__aeabi_dmul+0x1c6>
 80007c6:	ea43 0306 	orr.w	r3, r3, r6
 80007ca:	4770      	bx	lr
 80007cc:	ea94 0f0c 	teq	r4, ip
 80007d0:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007d4:	bf18      	it	ne
 80007d6:	ea95 0f0c 	teqne	r5, ip
 80007da:	d00c      	beq.n	80007f6 <__aeabi_dmul+0x206>
 80007dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e0:	bf18      	it	ne
 80007e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007e6:	d1d1      	bne.n	800078c <__aeabi_dmul+0x19c>
 80007e8:	ea81 0103 	eor.w	r1, r1, r3
 80007ec:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f0:	f04f 0000 	mov.w	r0, #0
 80007f4:	bd70      	pop	{r4, r5, r6, pc}
 80007f6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007fa:	bf06      	itte	eq
 80007fc:	4610      	moveq	r0, r2
 80007fe:	4619      	moveq	r1, r3
 8000800:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000804:	d019      	beq.n	800083a <__aeabi_dmul+0x24a>
 8000806:	ea94 0f0c 	teq	r4, ip
 800080a:	d102      	bne.n	8000812 <__aeabi_dmul+0x222>
 800080c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000810:	d113      	bne.n	800083a <__aeabi_dmul+0x24a>
 8000812:	ea95 0f0c 	teq	r5, ip
 8000816:	d105      	bne.n	8000824 <__aeabi_dmul+0x234>
 8000818:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800081c:	bf1c      	itt	ne
 800081e:	4610      	movne	r0, r2
 8000820:	4619      	movne	r1, r3
 8000822:	d10a      	bne.n	800083a <__aeabi_dmul+0x24a>
 8000824:	ea81 0103 	eor.w	r1, r1, r3
 8000828:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800082c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000830:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000834:	f04f 0000 	mov.w	r0, #0
 8000838:	bd70      	pop	{r4, r5, r6, pc}
 800083a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800083e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000842:	bd70      	pop	{r4, r5, r6, pc}

08000844 <__aeabi_ddiv>:
 8000844:	b570      	push	{r4, r5, r6, lr}
 8000846:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800084a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800084e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000852:	bf1d      	ittte	ne
 8000854:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000858:	ea94 0f0c 	teqne	r4, ip
 800085c:	ea95 0f0c 	teqne	r5, ip
 8000860:	f000 f8a7 	bleq	80009b2 <__aeabi_ddiv+0x16e>
 8000864:	eba4 0405 	sub.w	r4, r4, r5
 8000868:	ea81 0e03 	eor.w	lr, r1, r3
 800086c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000870:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000874:	f000 8088 	beq.w	8000988 <__aeabi_ddiv+0x144>
 8000878:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800087c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000880:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000884:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000888:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800088c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000890:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000894:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000898:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800089c:	429d      	cmp	r5, r3
 800089e:	bf08      	it	eq
 80008a0:	4296      	cmpeq	r6, r2
 80008a2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008a6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008aa:	d202      	bcs.n	80008b2 <__aeabi_ddiv+0x6e>
 80008ac:	085b      	lsrs	r3, r3, #1
 80008ae:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b2:	1ab6      	subs	r6, r6, r2
 80008b4:	eb65 0503 	sbc.w	r5, r5, r3
 80008b8:	085b      	lsrs	r3, r3, #1
 80008ba:	ea4f 0232 	mov.w	r2, r2, rrx
 80008be:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008c2:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ce:	bf22      	ittt	cs
 80008d0:	1ab6      	subcs	r6, r6, r2
 80008d2:	4675      	movcs	r5, lr
 80008d4:	ea40 000c 	orrcs.w	r0, r0, ip
 80008d8:	085b      	lsrs	r3, r3, #1
 80008da:	ea4f 0232 	mov.w	r2, r2, rrx
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000920:	ea55 0e06 	orrs.w	lr, r5, r6
 8000924:	d018      	beq.n	8000958 <__aeabi_ddiv+0x114>
 8000926:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800092a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800092e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000932:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000936:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800093a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800093e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000942:	d1c0      	bne.n	80008c6 <__aeabi_ddiv+0x82>
 8000944:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000948:	d10b      	bne.n	8000962 <__aeabi_ddiv+0x11e>
 800094a:	ea41 0100 	orr.w	r1, r1, r0
 800094e:	f04f 0000 	mov.w	r0, #0
 8000952:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000956:	e7b6      	b.n	80008c6 <__aeabi_ddiv+0x82>
 8000958:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800095c:	bf04      	itt	eq
 800095e:	4301      	orreq	r1, r0
 8000960:	2000      	moveq	r0, #0
 8000962:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000966:	bf88      	it	hi
 8000968:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800096c:	f63f aeaf 	bhi.w	80006ce <__aeabi_dmul+0xde>
 8000970:	ebb5 0c03 	subs.w	ip, r5, r3
 8000974:	bf04      	itt	eq
 8000976:	ebb6 0c02 	subseq.w	ip, r6, r2
 800097a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800097e:	f150 0000 	adcs.w	r0, r0, #0
 8000982:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000986:	bd70      	pop	{r4, r5, r6, pc}
 8000988:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800098c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000990:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000994:	bfc2      	ittt	gt
 8000996:	ebd4 050c 	rsbsgt	r5, r4, ip
 800099a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800099e:	bd70      	popgt	{r4, r5, r6, pc}
 80009a0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009a4:	f04f 0e00 	mov.w	lr, #0
 80009a8:	3c01      	subs	r4, #1
 80009aa:	e690      	b.n	80006ce <__aeabi_dmul+0xde>
 80009ac:	ea45 0e06 	orr.w	lr, r5, r6
 80009b0:	e68d      	b.n	80006ce <__aeabi_dmul+0xde>
 80009b2:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009b6:	ea94 0f0c 	teq	r4, ip
 80009ba:	bf08      	it	eq
 80009bc:	ea95 0f0c 	teqeq	r5, ip
 80009c0:	f43f af3b 	beq.w	800083a <__aeabi_dmul+0x24a>
 80009c4:	ea94 0f0c 	teq	r4, ip
 80009c8:	d10a      	bne.n	80009e0 <__aeabi_ddiv+0x19c>
 80009ca:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009ce:	f47f af34 	bne.w	800083a <__aeabi_dmul+0x24a>
 80009d2:	ea95 0f0c 	teq	r5, ip
 80009d6:	f47f af25 	bne.w	8000824 <__aeabi_dmul+0x234>
 80009da:	4610      	mov	r0, r2
 80009dc:	4619      	mov	r1, r3
 80009de:	e72c      	b.n	800083a <__aeabi_dmul+0x24a>
 80009e0:	ea95 0f0c 	teq	r5, ip
 80009e4:	d106      	bne.n	80009f4 <__aeabi_ddiv+0x1b0>
 80009e6:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009ea:	f43f aefd 	beq.w	80007e8 <__aeabi_dmul+0x1f8>
 80009ee:	4610      	mov	r0, r2
 80009f0:	4619      	mov	r1, r3
 80009f2:	e722      	b.n	800083a <__aeabi_dmul+0x24a>
 80009f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009f8:	bf18      	it	ne
 80009fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009fe:	f47f aec5 	bne.w	800078c <__aeabi_dmul+0x19c>
 8000a02:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a06:	f47f af0d 	bne.w	8000824 <__aeabi_dmul+0x234>
 8000a0a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a0e:	f47f aeeb 	bne.w	80007e8 <__aeabi_dmul+0x1f8>
 8000a12:	e712      	b.n	800083a <__aeabi_dmul+0x24a>

08000a14 <__gedf2>:
 8000a14:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a18:	e006      	b.n	8000a28 <__cmpdf2+0x4>
 8000a1a:	bf00      	nop

08000a1c <__ledf2>:
 8000a1c:	f04f 0c01 	mov.w	ip, #1
 8000a20:	e002      	b.n	8000a28 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__cmpdf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a34:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a38:	bf18      	it	ne
 8000a3a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a3e:	d01b      	beq.n	8000a78 <__cmpdf2+0x54>
 8000a40:	b001      	add	sp, #4
 8000a42:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a46:	bf0c      	ite	eq
 8000a48:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a4c:	ea91 0f03 	teqne	r1, r3
 8000a50:	bf02      	ittt	eq
 8000a52:	ea90 0f02 	teqeq	r0, r2
 8000a56:	2000      	moveq	r0, #0
 8000a58:	4770      	bxeq	lr
 8000a5a:	f110 0f00 	cmn.w	r0, #0
 8000a5e:	ea91 0f03 	teq	r1, r3
 8000a62:	bf58      	it	pl
 8000a64:	4299      	cmppl	r1, r3
 8000a66:	bf08      	it	eq
 8000a68:	4290      	cmpeq	r0, r2
 8000a6a:	bf2c      	ite	cs
 8000a6c:	17d8      	asrcs	r0, r3, #31
 8000a6e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a72:	f040 0001 	orr.w	r0, r0, #1
 8000a76:	4770      	bx	lr
 8000a78:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a7c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a80:	d102      	bne.n	8000a88 <__cmpdf2+0x64>
 8000a82:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a86:	d107      	bne.n	8000a98 <__cmpdf2+0x74>
 8000a88:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a8c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a90:	d1d6      	bne.n	8000a40 <__cmpdf2+0x1c>
 8000a92:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a96:	d0d3      	beq.n	8000a40 <__cmpdf2+0x1c>
 8000a98:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a9c:	4770      	bx	lr
 8000a9e:	bf00      	nop

08000aa0 <__aeabi_cdrcmple>:
 8000aa0:	4684      	mov	ip, r0
 8000aa2:	4610      	mov	r0, r2
 8000aa4:	4662      	mov	r2, ip
 8000aa6:	468c      	mov	ip, r1
 8000aa8:	4619      	mov	r1, r3
 8000aaa:	4663      	mov	r3, ip
 8000aac:	e000      	b.n	8000ab0 <__aeabi_cdcmpeq>
 8000aae:	bf00      	nop

08000ab0 <__aeabi_cdcmpeq>:
 8000ab0:	b501      	push	{r0, lr}
 8000ab2:	f7ff ffb7 	bl	8000a24 <__cmpdf2>
 8000ab6:	2800      	cmp	r0, #0
 8000ab8:	bf48      	it	mi
 8000aba:	f110 0f00 	cmnmi.w	r0, #0
 8000abe:	bd01      	pop	{r0, pc}

08000ac0 <__aeabi_dcmpeq>:
 8000ac0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ac4:	f7ff fff4 	bl	8000ab0 <__aeabi_cdcmpeq>
 8000ac8:	bf0c      	ite	eq
 8000aca:	2001      	moveq	r0, #1
 8000acc:	2000      	movne	r0, #0
 8000ace:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ad2:	bf00      	nop

08000ad4 <__aeabi_dcmplt>:
 8000ad4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ad8:	f7ff ffea 	bl	8000ab0 <__aeabi_cdcmpeq>
 8000adc:	bf34      	ite	cc
 8000ade:	2001      	movcc	r0, #1
 8000ae0:	2000      	movcs	r0, #0
 8000ae2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_dcmple>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff ffe0 	bl	8000ab0 <__aeabi_cdcmpeq>
 8000af0:	bf94      	ite	ls
 8000af2:	2001      	movls	r0, #1
 8000af4:	2000      	movhi	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmpge>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffce 	bl	8000aa0 <__aeabi_cdrcmple>
 8000b04:	bf94      	ite	ls
 8000b06:	2001      	movls	r0, #1
 8000b08:	2000      	movhi	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmpgt>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffc4 	bl	8000aa0 <__aeabi_cdrcmple>
 8000b18:	bf34      	ite	cc
 8000b1a:	2001      	movcc	r0, #1
 8000b1c:	2000      	movcs	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpun>:
 8000b24:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b28:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b2c:	d102      	bne.n	8000b34 <__aeabi_dcmpun+0x10>
 8000b2e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b32:	d10a      	bne.n	8000b4a <__aeabi_dcmpun+0x26>
 8000b34:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b3c:	d102      	bne.n	8000b44 <__aeabi_dcmpun+0x20>
 8000b3e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b42:	d102      	bne.n	8000b4a <__aeabi_dcmpun+0x26>
 8000b44:	f04f 0000 	mov.w	r0, #0
 8000b48:	4770      	bx	lr
 8000b4a:	f04f 0001 	mov.w	r0, #1
 8000b4e:	4770      	bx	lr

08000b50 <__aeabi_d2iz>:
 8000b50:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b54:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b58:	d215      	bcs.n	8000b86 <__aeabi_d2iz+0x36>
 8000b5a:	d511      	bpl.n	8000b80 <__aeabi_d2iz+0x30>
 8000b5c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b60:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b64:	d912      	bls.n	8000b8c <__aeabi_d2iz+0x3c>
 8000b66:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b6a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b6e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b72:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b76:	fa23 f002 	lsr.w	r0, r3, r2
 8000b7a:	bf18      	it	ne
 8000b7c:	4240      	negne	r0, r0
 8000b7e:	4770      	bx	lr
 8000b80:	f04f 0000 	mov.w	r0, #0
 8000b84:	4770      	bx	lr
 8000b86:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b8a:	d105      	bne.n	8000b98 <__aeabi_d2iz+0x48>
 8000b8c:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b90:	bf08      	it	eq
 8000b92:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	bf00      	nop

08000ba0 <__aeabi_uldivmod>:
 8000ba0:	b953      	cbnz	r3, 8000bb8 <__aeabi_uldivmod+0x18>
 8000ba2:	b94a      	cbnz	r2, 8000bb8 <__aeabi_uldivmod+0x18>
 8000ba4:	2900      	cmp	r1, #0
 8000ba6:	bf08      	it	eq
 8000ba8:	2800      	cmpeq	r0, #0
 8000baa:	bf1c      	itt	ne
 8000bac:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000bb0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000bb4:	f000 b97a 	b.w	8000eac <__aeabi_idiv0>
 8000bb8:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bbc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bc0:	f000 f806 	bl	8000bd0 <__udivmoddi4>
 8000bc4:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bc8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bcc:	b004      	add	sp, #16
 8000bce:	4770      	bx	lr

08000bd0 <__udivmoddi4>:
 8000bd0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bd4:	468c      	mov	ip, r1
 8000bd6:	460d      	mov	r5, r1
 8000bd8:	4604      	mov	r4, r0
 8000bda:	9e08      	ldr	r6, [sp, #32]
 8000bdc:	2b00      	cmp	r3, #0
 8000bde:	d151      	bne.n	8000c84 <__udivmoddi4+0xb4>
 8000be0:	428a      	cmp	r2, r1
 8000be2:	4617      	mov	r7, r2
 8000be4:	d96d      	bls.n	8000cc2 <__udivmoddi4+0xf2>
 8000be6:	fab2 fe82 	clz	lr, r2
 8000bea:	f1be 0f00 	cmp.w	lr, #0
 8000bee:	d00b      	beq.n	8000c08 <__udivmoddi4+0x38>
 8000bf0:	f1ce 0c20 	rsb	ip, lr, #32
 8000bf4:	fa01 f50e 	lsl.w	r5, r1, lr
 8000bf8:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000bfc:	fa02 f70e 	lsl.w	r7, r2, lr
 8000c00:	ea4c 0c05 	orr.w	ip, ip, r5
 8000c04:	fa00 f40e 	lsl.w	r4, r0, lr
 8000c08:	ea4f 4a17 	mov.w	sl, r7, lsr #16
 8000c0c:	0c25      	lsrs	r5, r4, #16
 8000c0e:	fbbc f8fa 	udiv	r8, ip, sl
 8000c12:	fa1f f987 	uxth.w	r9, r7
 8000c16:	fb0a cc18 	mls	ip, sl, r8, ip
 8000c1a:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 8000c1e:	fb08 f309 	mul.w	r3, r8, r9
 8000c22:	42ab      	cmp	r3, r5
 8000c24:	d90a      	bls.n	8000c3c <__udivmoddi4+0x6c>
 8000c26:	19ed      	adds	r5, r5, r7
 8000c28:	f108 32ff 	add.w	r2, r8, #4294967295	; 0xffffffff
 8000c2c:	f080 8123 	bcs.w	8000e76 <__udivmoddi4+0x2a6>
 8000c30:	42ab      	cmp	r3, r5
 8000c32:	f240 8120 	bls.w	8000e76 <__udivmoddi4+0x2a6>
 8000c36:	f1a8 0802 	sub.w	r8, r8, #2
 8000c3a:	443d      	add	r5, r7
 8000c3c:	1aed      	subs	r5, r5, r3
 8000c3e:	b2a4      	uxth	r4, r4
 8000c40:	fbb5 f0fa 	udiv	r0, r5, sl
 8000c44:	fb0a 5510 	mls	r5, sl, r0, r5
 8000c48:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000c4c:	fb00 f909 	mul.w	r9, r0, r9
 8000c50:	45a1      	cmp	r9, r4
 8000c52:	d909      	bls.n	8000c68 <__udivmoddi4+0x98>
 8000c54:	19e4      	adds	r4, r4, r7
 8000c56:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000c5a:	f080 810a 	bcs.w	8000e72 <__udivmoddi4+0x2a2>
 8000c5e:	45a1      	cmp	r9, r4
 8000c60:	f240 8107 	bls.w	8000e72 <__udivmoddi4+0x2a2>
 8000c64:	3802      	subs	r0, #2
 8000c66:	443c      	add	r4, r7
 8000c68:	eba4 0409 	sub.w	r4, r4, r9
 8000c6c:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000c70:	2100      	movs	r1, #0
 8000c72:	2e00      	cmp	r6, #0
 8000c74:	d061      	beq.n	8000d3a <__udivmoddi4+0x16a>
 8000c76:	fa24 f40e 	lsr.w	r4, r4, lr
 8000c7a:	2300      	movs	r3, #0
 8000c7c:	6034      	str	r4, [r6, #0]
 8000c7e:	6073      	str	r3, [r6, #4]
 8000c80:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c84:	428b      	cmp	r3, r1
 8000c86:	d907      	bls.n	8000c98 <__udivmoddi4+0xc8>
 8000c88:	2e00      	cmp	r6, #0
 8000c8a:	d054      	beq.n	8000d36 <__udivmoddi4+0x166>
 8000c8c:	2100      	movs	r1, #0
 8000c8e:	e886 0021 	stmia.w	r6, {r0, r5}
 8000c92:	4608      	mov	r0, r1
 8000c94:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c98:	fab3 f183 	clz	r1, r3
 8000c9c:	2900      	cmp	r1, #0
 8000c9e:	f040 808e 	bne.w	8000dbe <__udivmoddi4+0x1ee>
 8000ca2:	42ab      	cmp	r3, r5
 8000ca4:	d302      	bcc.n	8000cac <__udivmoddi4+0xdc>
 8000ca6:	4282      	cmp	r2, r0
 8000ca8:	f200 80fa 	bhi.w	8000ea0 <__udivmoddi4+0x2d0>
 8000cac:	1a84      	subs	r4, r0, r2
 8000cae:	eb65 0503 	sbc.w	r5, r5, r3
 8000cb2:	2001      	movs	r0, #1
 8000cb4:	46ac      	mov	ip, r5
 8000cb6:	2e00      	cmp	r6, #0
 8000cb8:	d03f      	beq.n	8000d3a <__udivmoddi4+0x16a>
 8000cba:	e886 1010 	stmia.w	r6, {r4, ip}
 8000cbe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cc2:	b912      	cbnz	r2, 8000cca <__udivmoddi4+0xfa>
 8000cc4:	2701      	movs	r7, #1
 8000cc6:	fbb7 f7f2 	udiv	r7, r7, r2
 8000cca:	fab7 fe87 	clz	lr, r7
 8000cce:	f1be 0f00 	cmp.w	lr, #0
 8000cd2:	d134      	bne.n	8000d3e <__udivmoddi4+0x16e>
 8000cd4:	1beb      	subs	r3, r5, r7
 8000cd6:	0c3a      	lsrs	r2, r7, #16
 8000cd8:	fa1f fc87 	uxth.w	ip, r7
 8000cdc:	2101      	movs	r1, #1
 8000cde:	fbb3 f8f2 	udiv	r8, r3, r2
 8000ce2:	0c25      	lsrs	r5, r4, #16
 8000ce4:	fb02 3318 	mls	r3, r2, r8, r3
 8000ce8:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000cec:	fb0c f308 	mul.w	r3, ip, r8
 8000cf0:	42ab      	cmp	r3, r5
 8000cf2:	d907      	bls.n	8000d04 <__udivmoddi4+0x134>
 8000cf4:	19ed      	adds	r5, r5, r7
 8000cf6:	f108 30ff 	add.w	r0, r8, #4294967295	; 0xffffffff
 8000cfa:	d202      	bcs.n	8000d02 <__udivmoddi4+0x132>
 8000cfc:	42ab      	cmp	r3, r5
 8000cfe:	f200 80d1 	bhi.w	8000ea4 <__udivmoddi4+0x2d4>
 8000d02:	4680      	mov	r8, r0
 8000d04:	1aed      	subs	r5, r5, r3
 8000d06:	b2a3      	uxth	r3, r4
 8000d08:	fbb5 f0f2 	udiv	r0, r5, r2
 8000d0c:	fb02 5510 	mls	r5, r2, r0, r5
 8000d10:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 8000d14:	fb0c fc00 	mul.w	ip, ip, r0
 8000d18:	45a4      	cmp	ip, r4
 8000d1a:	d907      	bls.n	8000d2c <__udivmoddi4+0x15c>
 8000d1c:	19e4      	adds	r4, r4, r7
 8000d1e:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000d22:	d202      	bcs.n	8000d2a <__udivmoddi4+0x15a>
 8000d24:	45a4      	cmp	ip, r4
 8000d26:	f200 80b8 	bhi.w	8000e9a <__udivmoddi4+0x2ca>
 8000d2a:	4618      	mov	r0, r3
 8000d2c:	eba4 040c 	sub.w	r4, r4, ip
 8000d30:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000d34:	e79d      	b.n	8000c72 <__udivmoddi4+0xa2>
 8000d36:	4631      	mov	r1, r6
 8000d38:	4630      	mov	r0, r6
 8000d3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d3e:	f1ce 0420 	rsb	r4, lr, #32
 8000d42:	fa05 f30e 	lsl.w	r3, r5, lr
 8000d46:	fa07 f70e 	lsl.w	r7, r7, lr
 8000d4a:	fa20 f804 	lsr.w	r8, r0, r4
 8000d4e:	0c3a      	lsrs	r2, r7, #16
 8000d50:	fa25 f404 	lsr.w	r4, r5, r4
 8000d54:	ea48 0803 	orr.w	r8, r8, r3
 8000d58:	fbb4 f1f2 	udiv	r1, r4, r2
 8000d5c:	ea4f 4518 	mov.w	r5, r8, lsr #16
 8000d60:	fb02 4411 	mls	r4, r2, r1, r4
 8000d64:	fa1f fc87 	uxth.w	ip, r7
 8000d68:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
 8000d6c:	fb01 f30c 	mul.w	r3, r1, ip
 8000d70:	42ab      	cmp	r3, r5
 8000d72:	fa00 f40e 	lsl.w	r4, r0, lr
 8000d76:	d909      	bls.n	8000d8c <__udivmoddi4+0x1bc>
 8000d78:	19ed      	adds	r5, r5, r7
 8000d7a:	f101 30ff 	add.w	r0, r1, #4294967295	; 0xffffffff
 8000d7e:	f080 808a 	bcs.w	8000e96 <__udivmoddi4+0x2c6>
 8000d82:	42ab      	cmp	r3, r5
 8000d84:	f240 8087 	bls.w	8000e96 <__udivmoddi4+0x2c6>
 8000d88:	3902      	subs	r1, #2
 8000d8a:	443d      	add	r5, r7
 8000d8c:	1aeb      	subs	r3, r5, r3
 8000d8e:	fa1f f588 	uxth.w	r5, r8
 8000d92:	fbb3 f0f2 	udiv	r0, r3, r2
 8000d96:	fb02 3310 	mls	r3, r2, r0, r3
 8000d9a:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000d9e:	fb00 f30c 	mul.w	r3, r0, ip
 8000da2:	42ab      	cmp	r3, r5
 8000da4:	d907      	bls.n	8000db6 <__udivmoddi4+0x1e6>
 8000da6:	19ed      	adds	r5, r5, r7
 8000da8:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000dac:	d26f      	bcs.n	8000e8e <__udivmoddi4+0x2be>
 8000dae:	42ab      	cmp	r3, r5
 8000db0:	d96d      	bls.n	8000e8e <__udivmoddi4+0x2be>
 8000db2:	3802      	subs	r0, #2
 8000db4:	443d      	add	r5, r7
 8000db6:	1aeb      	subs	r3, r5, r3
 8000db8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000dbc:	e78f      	b.n	8000cde <__udivmoddi4+0x10e>
 8000dbe:	f1c1 0720 	rsb	r7, r1, #32
 8000dc2:	fa22 f807 	lsr.w	r8, r2, r7
 8000dc6:	408b      	lsls	r3, r1
 8000dc8:	fa05 f401 	lsl.w	r4, r5, r1
 8000dcc:	ea48 0303 	orr.w	r3, r8, r3
 8000dd0:	fa20 fe07 	lsr.w	lr, r0, r7
 8000dd4:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 8000dd8:	40fd      	lsrs	r5, r7
 8000dda:	ea4e 0e04 	orr.w	lr, lr, r4
 8000dde:	fbb5 f9fc 	udiv	r9, r5, ip
 8000de2:	ea4f 441e 	mov.w	r4, lr, lsr #16
 8000de6:	fb0c 5519 	mls	r5, ip, r9, r5
 8000dea:	fa1f f883 	uxth.w	r8, r3
 8000dee:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 8000df2:	fb09 f408 	mul.w	r4, r9, r8
 8000df6:	42ac      	cmp	r4, r5
 8000df8:	fa02 f201 	lsl.w	r2, r2, r1
 8000dfc:	fa00 fa01 	lsl.w	sl, r0, r1
 8000e00:	d908      	bls.n	8000e14 <__udivmoddi4+0x244>
 8000e02:	18ed      	adds	r5, r5, r3
 8000e04:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000e08:	d243      	bcs.n	8000e92 <__udivmoddi4+0x2c2>
 8000e0a:	42ac      	cmp	r4, r5
 8000e0c:	d941      	bls.n	8000e92 <__udivmoddi4+0x2c2>
 8000e0e:	f1a9 0902 	sub.w	r9, r9, #2
 8000e12:	441d      	add	r5, r3
 8000e14:	1b2d      	subs	r5, r5, r4
 8000e16:	fa1f fe8e 	uxth.w	lr, lr
 8000e1a:	fbb5 f0fc 	udiv	r0, r5, ip
 8000e1e:	fb0c 5510 	mls	r5, ip, r0, r5
 8000e22:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
 8000e26:	fb00 f808 	mul.w	r8, r0, r8
 8000e2a:	45a0      	cmp	r8, r4
 8000e2c:	d907      	bls.n	8000e3e <__udivmoddi4+0x26e>
 8000e2e:	18e4      	adds	r4, r4, r3
 8000e30:	f100 35ff 	add.w	r5, r0, #4294967295	; 0xffffffff
 8000e34:	d229      	bcs.n	8000e8a <__udivmoddi4+0x2ba>
 8000e36:	45a0      	cmp	r8, r4
 8000e38:	d927      	bls.n	8000e8a <__udivmoddi4+0x2ba>
 8000e3a:	3802      	subs	r0, #2
 8000e3c:	441c      	add	r4, r3
 8000e3e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e42:	eba4 0408 	sub.w	r4, r4, r8
 8000e46:	fba0 8902 	umull	r8, r9, r0, r2
 8000e4a:	454c      	cmp	r4, r9
 8000e4c:	46c6      	mov	lr, r8
 8000e4e:	464d      	mov	r5, r9
 8000e50:	d315      	bcc.n	8000e7e <__udivmoddi4+0x2ae>
 8000e52:	d012      	beq.n	8000e7a <__udivmoddi4+0x2aa>
 8000e54:	b156      	cbz	r6, 8000e6c <__udivmoddi4+0x29c>
 8000e56:	ebba 030e 	subs.w	r3, sl, lr
 8000e5a:	eb64 0405 	sbc.w	r4, r4, r5
 8000e5e:	fa04 f707 	lsl.w	r7, r4, r7
 8000e62:	40cb      	lsrs	r3, r1
 8000e64:	431f      	orrs	r7, r3
 8000e66:	40cc      	lsrs	r4, r1
 8000e68:	6037      	str	r7, [r6, #0]
 8000e6a:	6074      	str	r4, [r6, #4]
 8000e6c:	2100      	movs	r1, #0
 8000e6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e72:	4618      	mov	r0, r3
 8000e74:	e6f8      	b.n	8000c68 <__udivmoddi4+0x98>
 8000e76:	4690      	mov	r8, r2
 8000e78:	e6e0      	b.n	8000c3c <__udivmoddi4+0x6c>
 8000e7a:	45c2      	cmp	sl, r8
 8000e7c:	d2ea      	bcs.n	8000e54 <__udivmoddi4+0x284>
 8000e7e:	ebb8 0e02 	subs.w	lr, r8, r2
 8000e82:	eb69 0503 	sbc.w	r5, r9, r3
 8000e86:	3801      	subs	r0, #1
 8000e88:	e7e4      	b.n	8000e54 <__udivmoddi4+0x284>
 8000e8a:	4628      	mov	r0, r5
 8000e8c:	e7d7      	b.n	8000e3e <__udivmoddi4+0x26e>
 8000e8e:	4640      	mov	r0, r8
 8000e90:	e791      	b.n	8000db6 <__udivmoddi4+0x1e6>
 8000e92:	4681      	mov	r9, r0
 8000e94:	e7be      	b.n	8000e14 <__udivmoddi4+0x244>
 8000e96:	4601      	mov	r1, r0
 8000e98:	e778      	b.n	8000d8c <__udivmoddi4+0x1bc>
 8000e9a:	3802      	subs	r0, #2
 8000e9c:	443c      	add	r4, r7
 8000e9e:	e745      	b.n	8000d2c <__udivmoddi4+0x15c>
 8000ea0:	4608      	mov	r0, r1
 8000ea2:	e708      	b.n	8000cb6 <__udivmoddi4+0xe6>
 8000ea4:	f1a8 0802 	sub.w	r8, r8, #2
 8000ea8:	443d      	add	r5, r7
 8000eaa:	e72b      	b.n	8000d04 <__udivmoddi4+0x134>

08000eac <__aeabi_idiv0>:
 8000eac:	4770      	bx	lr
 8000eae:	bf00      	nop

08000eb0 <ST7735_write>:
uint16_t scr_width;
uint16_t scr_height;
uint8_t buf_tft[4096] = {0};

void ST7735_write(uint8_t data)
{
 8000eb0:	b507      	push	{r0, r1, r2, lr}
 8000eb2:	a902      	add	r1, sp, #8
	HAL_SPI_Transmit(&_SPI_PORT, (uint8_t *)&data, 1, HAL_MAX_DELAY);
 8000eb4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
{
 8000eb8:	f801 0d01 	strb.w	r0, [r1, #-1]!
	HAL_SPI_Transmit(&_SPI_PORT, (uint8_t *)&data, 1, HAL_MAX_DELAY);
 8000ebc:	2201      	movs	r2, #1
 8000ebe:	4803      	ldr	r0, [pc, #12]	; (8000ecc <ST7735_write+0x1c>)
 8000ec0:	f003 ff69 	bl	8004d96 <HAL_SPI_Transmit>
}
 8000ec4:	b003      	add	sp, #12
 8000ec6:	f85d fb04 	ldr.w	pc, [sp], #4
 8000eca:	bf00      	nop
 8000ecc:	2000b598 	.word	0x2000b598

08000ed0 <ST7735_cmd>:
	tmp[0] = color >> 8;
	tmp[1] = color;
	HAL_SPI_Transmit(&_SPI_PORT, (uint8_t *)&tmp[0], 2, HAL_MAX_DELAY);
}

void ST7735_cmd(uint8_t cmd) {
 8000ed0:	b510      	push	{r4, lr}
	A0_L();
 8000ed2:	2200      	movs	r2, #0
void ST7735_cmd(uint8_t cmd) {
 8000ed4:	4604      	mov	r4, r0
	A0_L();
 8000ed6:	2180      	movs	r1, #128	; 0x80
 8000ed8:	4803      	ldr	r0, [pc, #12]	; (8000ee8 <ST7735_cmd+0x18>)
 8000eda:	f002 f87d 	bl	8002fd8 <HAL_GPIO_WritePin>
	ST7735_write(cmd);
 8000ede:	4620      	mov	r0, r4
}
 8000ee0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	ST7735_write(cmd);
 8000ee4:	f7ff bfe4 	b.w	8000eb0 <ST7735_write>
 8000ee8:	48000400 	.word	0x48000400

08000eec <ST7735_data>:

void ST7735_data(uint8_t data) {
 8000eec:	b510      	push	{r4, lr}
	A0_H();
 8000eee:	2201      	movs	r2, #1
void ST7735_data(uint8_t data) {
 8000ef0:	4604      	mov	r4, r0
	A0_H();
 8000ef2:	2180      	movs	r1, #128	; 0x80
 8000ef4:	4803      	ldr	r0, [pc, #12]	; (8000f04 <ST7735_data+0x18>)
 8000ef6:	f002 f86f 	bl	8002fd8 <HAL_GPIO_WritePin>
	ST7735_write(data);
 8000efa:	4620      	mov	r0, r4
}
 8000efc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	ST7735_write(data);
 8000f00:	f7ff bfd6 	b.w	8000eb0 <ST7735_write>
 8000f04:	48000400 	.word	0x48000400

08000f08 <ST7735_Orientation>:
	CS_H();

	ST7735_Orientation(scr_CCW);
}

void ST7735_Orientation(ScrOrientation_TypeDef orientation) {
 8000f08:	b510      	push	{r4, lr}
	CS_L();
 8000f0a:	2200      	movs	r2, #0
void ST7735_Orientation(ScrOrientation_TypeDef orientation) {
 8000f0c:	4604      	mov	r4, r0
	CS_L();
 8000f0e:	2120      	movs	r1, #32
 8000f10:	4815      	ldr	r0, [pc, #84]	; (8000f68 <ST7735_Orientation+0x60>)
 8000f12:	f002 f861 	bl	8002fd8 <HAL_GPIO_WritePin>
	ST7735_cmd(0x36); // Memory data access control:
 8000f16:	2036      	movs	r0, #54	; 0x36
 8000f18:	f7ff ffda 	bl	8000ed0 <ST7735_cmd>
	switch(orientation) {
 8000f1c:	2c02      	cmp	r4, #2
 8000f1e:	4a13      	ldr	r2, [pc, #76]	; (8000f6c <ST7735_Orientation+0x64>)
 8000f20:	4b13      	ldr	r3, [pc, #76]	; (8000f70 <ST7735_Orientation+0x68>)
 8000f22:	d011      	beq.n	8000f48 <ST7735_Orientation+0x40>
 8000f24:	2c03      	cmp	r4, #3
 8000f26:	f04f 0180 	mov.w	r1, #128	; 0x80
 8000f2a:	d013      	beq.n	8000f54 <ST7735_Orientation+0x4c>
 8000f2c:	2c01      	cmp	r4, #1
 8000f2e:	d116      	bne.n	8000f5e <ST7735_Orientation+0x56>
	case scr_CW:
		scr_width  = TFT_H;
 8000f30:	20a0      	movs	r0, #160	; 0xa0
 8000f32:	8010      	strh	r0, [r2, #0]
		scr_height = TFT_W;
 8000f34:	8019      	strh	r1, [r3, #0]
		ST7735_data(0xc0); // X-Mirror,Y-Mirror: Bottom to top; Right to left; RGB
		break;
	default:
		scr_width  = TFT_W;
		scr_height = TFT_H;
		ST7735_data(0x00); // Normal: Top to Bottom; Left to Right; RGB
 8000f36:	f7ff ffd9 	bl	8000eec <ST7735_data>
		break;
	}
	CS_H();
 8000f3a:	2201      	movs	r2, #1
 8000f3c:	2120      	movs	r1, #32
 8000f3e:	480a      	ldr	r0, [pc, #40]	; (8000f68 <ST7735_Orientation+0x60>)
}
 8000f40:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	CS_H();
 8000f44:	f002 b848 	b.w	8002fd8 <HAL_GPIO_WritePin>
		scr_width  = TFT_H;
 8000f48:	21a0      	movs	r1, #160	; 0xa0
 8000f4a:	8011      	strh	r1, [r2, #0]
		scr_height = TFT_W;
 8000f4c:	2280      	movs	r2, #128	; 0x80
 8000f4e:	801a      	strh	r2, [r3, #0]
		ST7735_data(0x60); // X-Y Exchange,X-Mirror
 8000f50:	2060      	movs	r0, #96	; 0x60
 8000f52:	e7f0      	b.n	8000f36 <ST7735_Orientation+0x2e>
		scr_width  = TFT_W;
 8000f54:	8011      	strh	r1, [r2, #0]
		scr_height = TFT_H;
 8000f56:	22a0      	movs	r2, #160	; 0xa0
 8000f58:	801a      	strh	r2, [r3, #0]
		ST7735_data(0xc0); // X-Mirror,Y-Mirror: Bottom to top; Right to left; RGB
 8000f5a:	20c0      	movs	r0, #192	; 0xc0
 8000f5c:	e7eb      	b.n	8000f36 <ST7735_Orientation+0x2e>
		scr_width  = TFT_W;
 8000f5e:	8011      	strh	r1, [r2, #0]
		scr_height = TFT_H;
 8000f60:	22a0      	movs	r2, #160	; 0xa0
 8000f62:	801a      	strh	r2, [r3, #0]
		ST7735_data(0x00); // Normal: Top to Bottom; Left to Right; RGB
 8000f64:	2000      	movs	r0, #0
 8000f66:	e7e6      	b.n	8000f36 <ST7735_Orientation+0x2e>
 8000f68:	48000400 	.word	0x48000400
 8000f6c:	2000b29c 	.word	0x2000b29c
 8000f70:	2000b29e 	.word	0x2000b29e

08000f74 <ST7735_Init>:
void ST7735_Init(void) {
 8000f74:	b510      	push	{r4, lr}
	CS_H();
 8000f76:	4c45      	ldr	r4, [pc, #276]	; (800108c <ST7735_Init+0x118>)
 8000f78:	2201      	movs	r2, #1
 8000f7a:	4620      	mov	r0, r4
 8000f7c:	2120      	movs	r1, #32
 8000f7e:	f002 f82b 	bl	8002fd8 <HAL_GPIO_WritePin>
	RST_H();
 8000f82:	2201      	movs	r2, #1
 8000f84:	2140      	movs	r1, #64	; 0x40
 8000f86:	4620      	mov	r0, r4
 8000f88:	f002 f826 	bl	8002fd8 <HAL_GPIO_WritePin>
	HAL_Delay(5);
 8000f8c:	2005      	movs	r0, #5
 8000f8e:	f001 fab9 	bl	8002504 <HAL_Delay>
	RST_L();
 8000f92:	2200      	movs	r2, #0
 8000f94:	2140      	movs	r1, #64	; 0x40
 8000f96:	4620      	mov	r0, r4
 8000f98:	f002 f81e 	bl	8002fd8 <HAL_GPIO_WritePin>
	HAL_Delay(5);
 8000f9c:	2005      	movs	r0, #5
 8000f9e:	f001 fab1 	bl	8002504 <HAL_Delay>
	RST_H();
 8000fa2:	2201      	movs	r2, #1
 8000fa4:	2140      	movs	r1, #64	; 0x40
 8000fa6:	4620      	mov	r0, r4
 8000fa8:	f002 f816 	bl	8002fd8 <HAL_GPIO_WritePin>
	HAL_Delay(5);
 8000fac:	2005      	movs	r0, #5
 8000fae:	f001 faa9 	bl	8002504 <HAL_Delay>
	CS_L();
 8000fb2:	2200      	movs	r2, #0
 8000fb4:	2120      	movs	r1, #32
 8000fb6:	4620      	mov	r0, r4
 8000fb8:	f002 f80e 	bl	8002fd8 <HAL_GPIO_WritePin>
	ST7735_cmd(0x11); 	// Sleep out & booster on
 8000fbc:	2011      	movs	r0, #17
 8000fbe:	f7ff ff87 	bl	8000ed0 <ST7735_cmd>
	HAL_Delay(25); 		// Datasheet says what display wakes about 120ms (may be much faster actually)
 8000fc2:	2019      	movs	r0, #25
 8000fc4:	f001 fa9e 	bl	8002504 <HAL_Delay>
	ST7735_cmd(0xb1);   // In normal mode (full colors):
 8000fc8:	20b1      	movs	r0, #177	; 0xb1
 8000fca:	f7ff ff81 	bl	8000ed0 <ST7735_cmd>
	A0_H();
 8000fce:	2201      	movs	r2, #1
 8000fd0:	2180      	movs	r1, #128	; 0x80
 8000fd2:	4620      	mov	r0, r4
 8000fd4:	f002 f800 	bl	8002fd8 <HAL_GPIO_WritePin>
	ST7735_write(0x05); //   RTNA set 1-line period: RTNA2, RTNA0
 8000fd8:	2005      	movs	r0, #5
 8000fda:	f7ff ff69 	bl	8000eb0 <ST7735_write>
	ST7735_write(0x3c); //   Front porch: FPA5,FPA4,FPA3,FPA2
 8000fde:	203c      	movs	r0, #60	; 0x3c
 8000fe0:	f7ff ff66 	bl	8000eb0 <ST7735_write>
	ST7735_write(0x3c); //   Back porch: BPA5,BPA4,BPA3,BPA2
 8000fe4:	203c      	movs	r0, #60	; 0x3c
 8000fe6:	f7ff ff63 	bl	8000eb0 <ST7735_write>
	ST7735_cmd(0xb2);   // In idle mode (8-colors):
 8000fea:	20b2      	movs	r0, #178	; 0xb2
 8000fec:	f7ff ff70 	bl	8000ed0 <ST7735_cmd>
	A0_H();
 8000ff0:	2201      	movs	r2, #1
 8000ff2:	2180      	movs	r1, #128	; 0x80
 8000ff4:	4620      	mov	r0, r4
 8000ff6:	f001 ffef 	bl	8002fd8 <HAL_GPIO_WritePin>
	ST7735_write(0x05); //   RTNB set 1-line period: RTNAB, RTNB0
 8000ffa:	2005      	movs	r0, #5
 8000ffc:	f7ff ff58 	bl	8000eb0 <ST7735_write>
	ST7735_write(0x3c); //   Front porch: FPB5,FPB4,FPB3,FPB2
 8001000:	203c      	movs	r0, #60	; 0x3c
 8001002:	f7ff ff55 	bl	8000eb0 <ST7735_write>
	ST7735_write(0x3c); //   Back porch: BPB5,BPB4,BPB3,BPB2
 8001006:	203c      	movs	r0, #60	; 0x3c
 8001008:	f7ff ff52 	bl	8000eb0 <ST7735_write>
	ST7735_cmd(0xb3);   // In partial mode + full colors:
 800100c:	20b3      	movs	r0, #179	; 0xb3
 800100e:	f7ff ff5f 	bl	8000ed0 <ST7735_cmd>
	A0_H();
 8001012:	2201      	movs	r2, #1
 8001014:	2180      	movs	r1, #128	; 0x80
 8001016:	4620      	mov	r0, r4
 8001018:	f001 ffde 	bl	8002fd8 <HAL_GPIO_WritePin>
	ST7735_write(0x05); //   RTNC set 1-line period: RTNC2, RTNC0
 800101c:	2005      	movs	r0, #5
 800101e:	f7ff ff47 	bl	8000eb0 <ST7735_write>
	ST7735_write(0x3c); //   Front porch: FPC5,FPC4,FPC3,FPC2
 8001022:	203c      	movs	r0, #60	; 0x3c
 8001024:	f7ff ff44 	bl	8000eb0 <ST7735_write>
	ST7735_write(0x3c); //   Back porch: BPC5,BPC4,BPC3,BPC2
 8001028:	203c      	movs	r0, #60	; 0x3c
 800102a:	f7ff ff41 	bl	8000eb0 <ST7735_write>
	ST7735_write(0x05); //   RTND set 1-line period: RTND2, RTND0
 800102e:	2005      	movs	r0, #5
 8001030:	f7ff ff3e 	bl	8000eb0 <ST7735_write>
	ST7735_write(0x3c); //   Front porch: FPD5,FPD4,FPD3,FPD2
 8001034:	203c      	movs	r0, #60	; 0x3c
 8001036:	f7ff ff3b 	bl	8000eb0 <ST7735_write>
	ST7735_write(0x3c); //   Back porch: BPD5,BPD4,BPD3,BPD2
 800103a:	203c      	movs	r0, #60	; 0x3c
 800103c:	f7ff ff38 	bl	8000eb0 <ST7735_write>
	ST7735_cmd(0xB4);   // Display dot inversion control:
 8001040:	20b4      	movs	r0, #180	; 0xb4
 8001042:	f7ff ff45 	bl	8000ed0 <ST7735_cmd>
	ST7735_data(0x03);  //   NLB,NLC
 8001046:	2003      	movs	r0, #3
 8001048:	f7ff ff50 	bl	8000eec <ST7735_data>
	ST7735_cmd(0x3a);   // Interface pixel format
 800104c:	203a      	movs	r0, #58	; 0x3a
 800104e:	f7ff ff3f 	bl	8000ed0 <ST7735_cmd>
	ST7735_data(0x05);  // 16-bit/pixel RGB 5-6-5 (65k colors)
 8001052:	2005      	movs	r0, #5
 8001054:	f7ff ff4a 	bl	8000eec <ST7735_data>
	ST7735_cmd(0x20);   // Display inversion off
 8001058:	2020      	movs	r0, #32
 800105a:	f7ff ff39 	bl	8000ed0 <ST7735_cmd>
	ST7735_cmd(0x13);   // Partial mode off
 800105e:	2013      	movs	r0, #19
 8001060:	f7ff ff36 	bl	8000ed0 <ST7735_cmd>
	ST7735_cmd(0x26);   // Gamma curve set:
 8001064:	2026      	movs	r0, #38	; 0x26
 8001066:	f7ff ff33 	bl	8000ed0 <ST7735_cmd>
	ST7735_data(0x01);  //   Gamma curve 1 (G2.2) or (G1.0)
 800106a:	2001      	movs	r0, #1
 800106c:	f7ff ff3e 	bl	8000eec <ST7735_data>
	ST7735_cmd(0x29);   // Display on
 8001070:	2029      	movs	r0, #41	; 0x29
 8001072:	f7ff ff2d 	bl	8000ed0 <ST7735_cmd>
	CS_H();
 8001076:	4620      	mov	r0, r4
 8001078:	2201      	movs	r2, #1
 800107a:	2120      	movs	r1, #32
 800107c:	f001 ffac 	bl	8002fd8 <HAL_GPIO_WritePin>
	ST7735_Orientation(scr_CCW);
 8001080:	2002      	movs	r0, #2
}
 8001082:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	ST7735_Orientation(scr_CCW);
 8001086:	f7ff bf3f 	b.w	8000f08 <ST7735_Orientation>
 800108a:	bf00      	nop
 800108c:	48000400 	.word	0x48000400

08001090 <ST7735_AddrSet>:

void ST7735_AddrSet(uint16_t XS, uint16_t YS, uint16_t XE, uint16_t YE) {
 8001090:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	ST7735_cmd(0x2a); // Column address set
	A0_H();
 8001094:	4e19      	ldr	r6, [pc, #100]	; (80010fc <ST7735_AddrSet+0x6c>)
void ST7735_AddrSet(uint16_t XS, uint16_t YS, uint16_t XE, uint16_t YE) {
 8001096:	4680      	mov	r8, r0
	ST7735_cmd(0x2a); // Column address set
 8001098:	202a      	movs	r0, #42	; 0x2a
void ST7735_AddrSet(uint16_t XS, uint16_t YS, uint16_t XE, uint16_t YE) {
 800109a:	461c      	mov	r4, r3
 800109c:	460d      	mov	r5, r1
 800109e:	4617      	mov	r7, r2
	ST7735_cmd(0x2a); // Column address set
 80010a0:	f7ff ff16 	bl	8000ed0 <ST7735_cmd>
	A0_H();
 80010a4:	2201      	movs	r2, #1
 80010a6:	2180      	movs	r1, #128	; 0x80
 80010a8:	4630      	mov	r0, r6
 80010aa:	f001 ff95 	bl	8002fd8 <HAL_GPIO_WritePin>
	ST7735_write(XS >> 8);
 80010ae:	ea4f 2018 	mov.w	r0, r8, lsr #8
 80010b2:	f7ff fefd 	bl	8000eb0 <ST7735_write>
	ST7735_write(XS);
 80010b6:	fa5f f088 	uxtb.w	r0, r8
 80010ba:	f7ff fef9 	bl	8000eb0 <ST7735_write>
	ST7735_write(XE >> 8);
 80010be:	0a38      	lsrs	r0, r7, #8
 80010c0:	f7ff fef6 	bl	8000eb0 <ST7735_write>
	ST7735_write(XE);
 80010c4:	b2f8      	uxtb	r0, r7
 80010c6:	f7ff fef3 	bl	8000eb0 <ST7735_write>

	ST7735_cmd(0x2b); // Row address set
 80010ca:	202b      	movs	r0, #43	; 0x2b
 80010cc:	f7ff ff00 	bl	8000ed0 <ST7735_cmd>
	A0_H();
 80010d0:	2201      	movs	r2, #1
 80010d2:	2180      	movs	r1, #128	; 0x80
 80010d4:	4630      	mov	r0, r6
 80010d6:	f001 ff7f 	bl	8002fd8 <HAL_GPIO_WritePin>
	ST7735_write(YS >> 8);
 80010da:	0a28      	lsrs	r0, r5, #8
 80010dc:	f7ff fee8 	bl	8000eb0 <ST7735_write>
	ST7735_write(YS);
 80010e0:	b2e8      	uxtb	r0, r5
 80010e2:	f7ff fee5 	bl	8000eb0 <ST7735_write>
	ST7735_write(YE >> 8);
 80010e6:	0a20      	lsrs	r0, r4, #8
 80010e8:	f7ff fee2 	bl	8000eb0 <ST7735_write>
	ST7735_write(YE);
 80010ec:	b2e0      	uxtb	r0, r4
 80010ee:	f7ff fedf 	bl	8000eb0 <ST7735_write>

	ST7735_cmd(0x2c); // Memory write
 80010f2:	202c      	movs	r0, #44	; 0x2c
}
 80010f4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	ST7735_cmd(0x2c); // Memory write
 80010f8:	f7ff beea 	b.w	8000ed0 <ST7735_cmd>
 80010fc:	48000400 	.word	0x48000400

08001100 <ST7735_Clear>:

void ST7735_Clear(uint16_t color) {
 8001100:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

	CH = color >> 8;
	CL = (uint8_t)color;

	CS_L();
	ST7735_AddrSet(0, 0, scr_width - 1, scr_height - 1);
 8001104:	4c17      	ldr	r4, [pc, #92]	; (8001164 <ST7735_Clear+0x64>)
 8001106:	4d18      	ldr	r5, [pc, #96]	; (8001168 <ST7735_Clear+0x68>)
	CS_L();
 8001108:	2200      	movs	r2, #0
 800110a:	2120      	movs	r1, #32
	CH = color >> 8;
 800110c:	ea4f 2810 	mov.w	r8, r0, lsr #8
	CL = (uint8_t)color;
 8001110:	b2c6      	uxtb	r6, r0
	CS_L();
 8001112:	4816      	ldr	r0, [pc, #88]	; (800116c <ST7735_Clear+0x6c>)
 8001114:	f001 ff60 	bl	8002fd8 <HAL_GPIO_WritePin>
	ST7735_AddrSet(0, 0, scr_width - 1, scr_height - 1);
 8001118:	8823      	ldrh	r3, [r4, #0]
 800111a:	882a      	ldrh	r2, [r5, #0]
 800111c:	2100      	movs	r1, #0
 800111e:	3b01      	subs	r3, #1
 8001120:	3a01      	subs	r2, #1
 8001122:	4608      	mov	r0, r1
 8001124:	b29b      	uxth	r3, r3
 8001126:	b292      	uxth	r2, r2
 8001128:	f7ff ffb2 	bl	8001090 <ST7735_AddrSet>
	A0_H();
 800112c:	2201      	movs	r2, #1
 800112e:	2180      	movs	r1, #128	; 0x80
 8001130:	480e      	ldr	r0, [pc, #56]	; (800116c <ST7735_Clear+0x6c>)
 8001132:	f001 ff51 	bl	8002fd8 <HAL_GPIO_WritePin>
	for (i = 0; i < scr_width * scr_height; i++) {
 8001136:	2700      	movs	r7, #0
 8001138:	8829      	ldrh	r1, [r5, #0]
 800113a:	8823      	ldrh	r3, [r4, #0]
 800113c:	b2ba      	uxth	r2, r7
 800113e:	434b      	muls	r3, r1
 8001140:	429a      	cmp	r2, r3
 8001142:	f107 0701 	add.w	r7, r7, #1
 8001146:	db06      	blt.n	8001156 <ST7735_Clear+0x56>
		ST7735_write(CH);
		ST7735_write(CL);
	}
	CS_H();
 8001148:	2201      	movs	r2, #1
 800114a:	2120      	movs	r1, #32
 800114c:	4807      	ldr	r0, [pc, #28]	; (800116c <ST7735_Clear+0x6c>)
}
 800114e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	CS_H();
 8001152:	f001 bf41 	b.w	8002fd8 <HAL_GPIO_WritePin>
		ST7735_write(CH);
 8001156:	4640      	mov	r0, r8
 8001158:	f7ff feaa 	bl	8000eb0 <ST7735_write>
		ST7735_write(CL);
 800115c:	4630      	mov	r0, r6
 800115e:	f7ff fea7 	bl	8000eb0 <ST7735_write>
 8001162:	e7e9      	b.n	8001138 <ST7735_Clear+0x38>
 8001164:	2000b29e 	.word	0x2000b29e
 8001168:	2000b29c 	.word	0x2000b29c
 800116c:	48000400 	.word	0x48000400

08001170 <ST7735_Flush_3>:

void ST7735_Flush_3(lv_disp_drv_t * disp_drv, const lv_area_t * area, lv_color_t * color_p)
{
 8001170:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint16_t size;
	uint16_t teste = 0;

    size = ( ((area->x2 - area->x1) + 1)  * ((area->y2 - area->y1) + 1) );
 8001172:	f9b1 3000 	ldrsh.w	r3, [r1]
 8001176:	f9b1 4004 	ldrsh.w	r4, [r1, #4]
{
 800117a:	4617      	mov	r7, r2
    size = ( ((area->x2 - area->x1) + 1)  * ((area->y2 - area->y1) + 1) );
 800117c:	1ae4      	subs	r4, r4, r3
 800117e:	f9b1 2002 	ldrsh.w	r2, [r1, #2]
 8001182:	f9b1 3006 	ldrsh.w	r3, [r1, #6]
 8001186:	1a9b      	subs	r3, r3, r2
 8001188:	3301      	adds	r3, #1
{
 800118a:	460e      	mov	r6, r1

	CS_L();
 800118c:	2200      	movs	r2, #0
 800118e:	2120      	movs	r1, #32
{
 8001190:	4605      	mov	r5, r0
    size = ( ((area->x2 - area->x1) + 1)  * ((area->y2 - area->y1) + 1) );
 8001192:	3401      	adds	r4, #1
	CS_L();
 8001194:	482c      	ldr	r0, [pc, #176]	; (8001248 <ST7735_Flush_3+0xd8>)
    size = ( ((area->x2 - area->x1) + 1)  * ((area->y2 - area->y1) + 1) );
 8001196:	fb14 f403 	smulbb	r4, r4, r3
	CS_L();
 800119a:	f001 ff1d 	bl	8002fd8 <HAL_GPIO_WritePin>
    ST7735_cmd(0x2a); // Column address set
 800119e:	202a      	movs	r0, #42	; 0x2a
 80011a0:	f7ff fe96 	bl	8000ed0 <ST7735_cmd>
	A0_H();
 80011a4:	2201      	movs	r2, #1
 80011a6:	2180      	movs	r1, #128	; 0x80
 80011a8:	4827      	ldr	r0, [pc, #156]	; (8001248 <ST7735_Flush_3+0xd8>)
 80011aa:	f001 ff15 	bl	8002fd8 <HAL_GPIO_WritePin>
	ST7735_write(area->x1 >> 8);
 80011ae:	7870      	ldrb	r0, [r6, #1]
 80011b0:	f7ff fe7e 	bl	8000eb0 <ST7735_write>
	ST7735_write(area->x1);
 80011b4:	7830      	ldrb	r0, [r6, #0]
 80011b6:	f7ff fe7b 	bl	8000eb0 <ST7735_write>
	ST7735_write(area->x2 >> 8);
 80011ba:	7970      	ldrb	r0, [r6, #5]
 80011bc:	f7ff fe78 	bl	8000eb0 <ST7735_write>
	ST7735_write(area->x2);
 80011c0:	7930      	ldrb	r0, [r6, #4]
 80011c2:	f7ff fe75 	bl	8000eb0 <ST7735_write>

	ST7735_cmd(0x2b); // Row address set
 80011c6:	202b      	movs	r0, #43	; 0x2b
 80011c8:	f7ff fe82 	bl	8000ed0 <ST7735_cmd>
	A0_H();
 80011cc:	2201      	movs	r2, #1
 80011ce:	2180      	movs	r1, #128	; 0x80
 80011d0:	481d      	ldr	r0, [pc, #116]	; (8001248 <ST7735_Flush_3+0xd8>)
 80011d2:	f001 ff01 	bl	8002fd8 <HAL_GPIO_WritePin>
	ST7735_write(area->y1 >> 8);
 80011d6:	78f0      	ldrb	r0, [r6, #3]
 80011d8:	f7ff fe6a 	bl	8000eb0 <ST7735_write>
	ST7735_write(area->y1);
 80011dc:	78b0      	ldrb	r0, [r6, #2]
 80011de:	f7ff fe67 	bl	8000eb0 <ST7735_write>
	ST7735_write(area->y2 >> 8);
 80011e2:	79f0      	ldrb	r0, [r6, #7]
 80011e4:	f7ff fe64 	bl	8000eb0 <ST7735_write>
	ST7735_write(area->y2);
 80011e8:	79b0      	ldrb	r0, [r6, #6]
 80011ea:	f7ff fe61 	bl	8000eb0 <ST7735_write>

	ST7735_cmd(0x2c); // Memory write
 80011ee:	202c      	movs	r0, #44	; 0x2c
 80011f0:	f7ff fe6e 	bl	8000ed0 <ST7735_cmd>
	A0_H();
 80011f4:	2201      	movs	r2, #1
 80011f6:	4814      	ldr	r0, [pc, #80]	; (8001248 <ST7735_Flush_3+0xd8>)
 80011f8:	2180      	movs	r1, #128	; 0x80
 80011fa:	f001 feed 	bl	8002fd8 <HAL_GPIO_WritePin>
//		HAL_SPI_Transmit(&_SPI_PORT, (uint8_t *)&tmp[0], 2, HAL_MAX_DELAY);
//		color_p++;
//		teste++;
//	}
	for(uint16_t x = 0; x <= size-1; x++) {
		buf_tft[(x*2) + 0] = color_p->full >> 8;
 80011fe:	4813      	ldr	r0, [pc, #76]	; (800124c <ST7735_Flush_3+0xdc>)
    size = ( ((area->x2 - area->x1) + 1)  * ((area->y2 - area->y1) + 1) );
 8001200:	b2a4      	uxth	r4, r4
	for(uint16_t x = 0; x <= size-1; x++) {
 8001202:	2200      	movs	r2, #0
 8001204:	b293      	uxth	r3, r2
 8001206:	429c      	cmp	r4, r3
 8001208:	f102 0201 	add.w	r2, r2, #1
 800120c:	dc12      	bgt.n	8001234 <ST7735_Flush_3+0xc4>
		buf_tft[(x*2) + 1] = color_p->full;
		color_p++;
		teste++;
	}
	HAL_SPI_Transmit(&_SPI_PORT, (uint8_t *)&buf_tft[0], (size-1)*2, HAL_MAX_DELAY);
 800120e:	1e62      	subs	r2, r4, #1
 8001210:	0052      	lsls	r2, r2, #1
 8001212:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001216:	b292      	uxth	r2, r2
 8001218:	490c      	ldr	r1, [pc, #48]	; (800124c <ST7735_Flush_3+0xdc>)
 800121a:	480d      	ldr	r0, [pc, #52]	; (8001250 <ST7735_Flush_3+0xe0>)
 800121c:	f003 fdbb 	bl	8004d96 <HAL_SPI_Transmit>

	CS_H();
 8001220:	4809      	ldr	r0, [pc, #36]	; (8001248 <ST7735_Flush_3+0xd8>)
 8001222:	2201      	movs	r2, #1
 8001224:	2120      	movs	r1, #32
 8001226:	f001 fed7 	bl	8002fd8 <HAL_GPIO_WritePin>

//	sprintf(buffer, "ST7735-Flush3 X1: %d X2: %d Y1: %d Y2: %d Size: %d Teste: %d\n", area->x1, area->x2, area->y1, area->y2, size, teste);
//    LV_LOG_ERROR(buffer);
//    logI(buffer);

	lv_disp_flush_ready(disp_drv);                  /* Tell you are ready with the flushing*/
 800122a:	4628      	mov	r0, r5
}
 800122c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	lv_disp_flush_ready(disp_drv);                  /* Tell you are ready with the flushing*/
 8001230:	f013 bea0 	b.w	8014f74 <lv_disp_flush_ready>
		buf_tft[(x*2) + 0] = color_p->full >> 8;
 8001234:	8839      	ldrh	r1, [r7, #0]
 8001236:	0a09      	lsrs	r1, r1, #8
 8001238:	f800 1013 	strb.w	r1, [r0, r3, lsl #1]
		buf_tft[(x*2) + 1] = color_p->full;
 800123c:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8001240:	f837 1b02 	ldrh.w	r1, [r7], #2
 8001244:	7059      	strb	r1, [r3, #1]
 8001246:	e7dd      	b.n	8001204 <ST7735_Flush_3+0x94>
 8001248:	48000400 	.word	0x48000400
 800124c:	200023b8 	.word	0x200023b8
 8001250:	2000b598 	.word	0x2000b598

08001254 <ClearLog>:

/** Clear the duration parameter and the click count parameter of the button.
 */
void ClearLog(uint8_t key, uint8_t index)
{
	if(index < 8)
 8001254:	2907      	cmp	r1, #7
 8001256:	d807      	bhi.n	8001268 <ClearLog+0x14>
	{
		bt[key]->click[index] = bt[key]->duration[index] = 0;
 8001258:	4b04      	ldr	r3, [pc, #16]	; (800126c <ClearLog+0x18>)
 800125a:	2260      	movs	r2, #96	; 0x60
 800125c:	fb02 3000 	mla	r0, r2, r0, r3
 8001260:	4401      	add	r1, r0
 8001262:	2300      	movs	r3, #0
 8001264:	728b      	strb	r3, [r1, #10]
 8001266:	708b      	strb	r3, [r1, #2]
 8001268:	4770      	bx	lr
 800126a:	bf00      	nop
 800126c:	2000b2b8 	.word	0x2000b2b8

08001270 <KeyboardInit>:
{
 8001270:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001274:	2500      	movs	r5, #0
 8001276:	4c0d      	ldr	r4, [pc, #52]	; (80012ac <KeyboardInit+0x3c>)
 8001278:	4680      	mov	r8, r0
		bt[x]->old_state = bt[x]->new_state = 0;
 800127a:	462e      	mov	r6, r5
 800127c:	fa5f f985 	uxtb.w	r9, r5
 8001280:	7066      	strb	r6, [r4, #1]
 8001282:	7026      	strb	r6, [r4, #0]
		bt[x]->mask = mask;
 8001284:	f884 8012 	strb.w	r8, [r4, #18]
		bt[x]->mode = 0;
 8001288:	74e6      	strb	r6, [r4, #19]
		bt[x]->flag = 0;
 800128a:	6166      	str	r6, [r4, #20]
		for(i = 0; i < 8; i++) {
 800128c:	2700      	movs	r7, #0
			ClearLog(x, i);
 800128e:	b2f9      	uxtb	r1, r7
 8001290:	4648      	mov	r0, r9
		for(i = 0; i < 8; i++) {
 8001292:	3701      	adds	r7, #1
			ClearLog(x, i);
 8001294:	f7ff ffde 	bl	8001254 <ClearLog>
		for(i = 0; i < 8; i++) {
 8001298:	2f08      	cmp	r7, #8
 800129a:	d1f8      	bne.n	800128e <KeyboardInit+0x1e>
 800129c:	3501      	adds	r5, #1
	for(x = 0; x < 6; x++) {
 800129e:	2d06      	cmp	r5, #6
 80012a0:	f104 0460 	add.w	r4, r4, #96	; 0x60
 80012a4:	d1ea      	bne.n	800127c <KeyboardInit+0xc>
}
 80012a6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80012aa:	bf00      	nop
 80012ac:	2000b2b8 	.word	0x2000b2b8

080012b0 <KeyboardSetMode>:
	}
}

void KeyboardSetMode(uint8_t key, uint8_t mode, bool flag)
{
 80012b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	int i;

	// clear data
	bt[key]->old_state = bt[key]->new_state = 0;
 80012b2:	4e0c      	ldr	r6, [pc, #48]	; (80012e4 <KeyboardSetMode+0x34>)
{
 80012b4:	460f      	mov	r7, r1
	bt[key]->old_state = bt[key]->new_state = 0;
 80012b6:	2160      	movs	r1, #96	; 0x60
 80012b8:	4341      	muls	r1, r0
 80012ba:	2400      	movs	r4, #0
{
 80012bc:	4605      	mov	r5, r0
	bt[key]->old_state = bt[key]->new_state = 0;
 80012be:	1870      	adds	r0, r6, r1
	// this looks weird but correct
	bt[key]->flag = !flag;
 80012c0:	f082 0201 	eor.w	r2, r2, #1
	bt[key]->old_state = bt[key]->new_state = 0;
 80012c4:	5474      	strb	r4, [r6, r1]
 80012c6:	7044      	strb	r4, [r0, #1]
	bt[key]->flag = !flag;
 80012c8:	6142      	str	r2, [r0, #20]

	// clear log
	for(i = 0; i < 8; i++)
	{
		ClearLog(key, i);
 80012ca:	b2e1      	uxtb	r1, r4
 80012cc:	4628      	mov	r0, r5
	for(i = 0; i < 8; i++)
 80012ce:	3401      	adds	r4, #1
		ClearLog(key, i);
 80012d0:	f7ff ffc0 	bl	8001254 <ClearLog>
	for(i = 0; i < 8; i++)
 80012d4:	2c08      	cmp	r4, #8
 80012d6:	d1f8      	bne.n	80012ca <KeyboardSetMode+0x1a>
	}

	// change mode
	bt[key]->mode = mode;
 80012d8:	2360      	movs	r3, #96	; 0x60
 80012da:	fb03 6505 	mla	r5, r3, r5, r6
 80012de:	74ef      	strb	r7, [r5, #19]
 80012e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80012e2:	bf00      	nop
 80012e4:	2000b2b8 	.word	0x2000b2b8

080012e8 <PushButton_Read>:
	bt[key]->old_state = bt[key]->new_state;
}


uint8_t PushButton_Read(uint8_t key)
{
 80012e8:	b508      	push	{r3, lr}
	uint8_t ret = 0x00;

	switch(key) {
 80012ea:	2804      	cmp	r0, #4
 80012ec:	d819      	bhi.n	8001322 <PushButton_Read+0x3a>
 80012ee:	e8df f000 	tbb	[pc, r0]
 80012f2:	0c03      	.short	0x0c03
 80012f4:	120f      	.short	0x120f
 80012f6:	15          	.byte	0x15
 80012f7:	00          	.byte	0x00
		case 0:			// Down
			ret = !(HAL_GPIO_ReadPin(KEY_DN_GPIO_Port, KEY_DN_Pin));
 80012f8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
			break;
		case 2:			// Enter
			ret = !(HAL_GPIO_ReadPin(KEY_ENTER_GPIO_Port, KEY_ENTER_Pin));
			break;
		case 3:			// Esc
			ret = !(HAL_GPIO_ReadPin(KEY_ESC_GPIO_Port, KEY_ESC_Pin));
 80012fc:	480a      	ldr	r0, [pc, #40]	; (8001328 <PushButton_Read+0x40>)
			break;
		case 4:			// SW Rotary Encoder
			ret = !(HAL_GPIO_ReadPin(SW_ENC_GPIO_Port, SW_ENC_Pin));
 80012fe:	f001 fe65 	bl	8002fcc <HAL_GPIO_ReadPin>
 8001302:	fab0 f080 	clz	r0, r0
 8001306:	0940      	lsrs	r0, r0, #5
			break;
 8001308:	bd08      	pop	{r3, pc}
			ret = !(HAL_GPIO_ReadPin(KEY_UP_GPIO_Port, KEY_UP_Pin));
 800130a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800130e:	e7f5      	b.n	80012fc <PushButton_Read+0x14>
			ret = !(HAL_GPIO_ReadPin(KEY_ENTER_GPIO_Port, KEY_ENTER_Pin));
 8001310:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001314:	e7f2      	b.n	80012fc <PushButton_Read+0x14>
			ret = !(HAL_GPIO_ReadPin(KEY_ESC_GPIO_Port, KEY_ESC_Pin));
 8001316:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800131a:	e7ef      	b.n	80012fc <PushButton_Read+0x14>
			ret = !(HAL_GPIO_ReadPin(SW_ENC_GPIO_Port, SW_ENC_Pin));
 800131c:	2110      	movs	r1, #16
 800131e:	4803      	ldr	r0, [pc, #12]	; (800132c <PushButton_Read+0x44>)
 8001320:	e7ed      	b.n	80012fe <PushButton_Read+0x16>
	uint8_t ret = 0x00;
 8001322:	2000      	movs	r0, #0
		default:
			break;
	}
	return ret;
}
 8001324:	bd08      	pop	{r3, pc}
 8001326:	bf00      	nop
 8001328:	48000400 	.word	0x48000400
 800132c:	48000800 	.word	0x48000800

08001330 <Evt_EnQueue>:
 *
 * \param  event data in an array of uint8_t
 * \return false if the queue is full
 */
bool Evt_EnQueue(uint8_t *event)
{
 8001330:	b530      	push	{r4, r5, lr}
	unsigned i;
	uint8_t next = ADVANCE_QPTR(evt_queue.head);
 8001332:	4b0c      	ldr	r3, [pc, #48]	; (8001364 <Evt_EnQueue+0x34>)
 8001334:	f893 2080 	ldrb.w	r2, [r3, #128]	; 0x80

	// queue is full
	if(next == evt_queue.tail)
 8001338:	f893 4081 	ldrb.w	r4, [r3, #129]	; 0x81
	uint8_t next = ADVANCE_QPTR(evt_queue.head);
 800133c:	1c51      	adds	r1, r2, #1
 800133e:	f001 0107 	and.w	r1, r1, #7
	if(next == evt_queue.tail)
 8001342:	428c      	cmp	r4, r1
 8001344:	d00b      	beq.n	800135e <Evt_EnQueue+0x2e>
 8001346:	eb03 1402 	add.w	r4, r3, r2, lsl #4
 800134a:	2200      	movs	r2, #0
	}

	// copy event bytes into the buffer
	for(i = 0; i < EVT_QWIDTH; i++)
	{
		evt_queue.buff[evt_queue.head][i] = event[i];
 800134c:	5c85      	ldrb	r5, [r0, r2]
 800134e:	54a5      	strb	r5, [r4, r2]
	for(i = 0; i < EVT_QWIDTH; i++)
 8001350:	3201      	adds	r2, #1
 8001352:	2a10      	cmp	r2, #16
 8001354:	d1fa      	bne.n	800134c <Evt_EnQueue+0x1c>
	}
	// move to the next positition
	evt_queue.head = next;
 8001356:	f883 1080 	strb.w	r1, [r3, #128]	; 0x80

	//logI("I - Evt_EnQueue OK\n\r");
	return true;
 800135a:	2001      	movs	r0, #1
 800135c:	bd30      	pop	{r4, r5, pc}
		return false;
 800135e:	2000      	movs	r0, #0
}
 8001360:	bd30      	pop	{r4, r5, pc}
 8001362:	bf00      	nop
 8001364:	200033b8 	.word	0x200033b8

08001368 <KeyboardRead>:
{
 8001368:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 800136a:	4604      	mov	r4, r0
	bt[key]->new_state = PushButton_Read(key);
 800136c:	4e42      	ldr	r6, [pc, #264]	; (8001478 <KeyboardRead+0x110>)
 800136e:	f7ff ffbb 	bl	80012e8 <PushButton_Read>
 8001372:	2260      	movs	r2, #96	; 0x60
 8001374:	4362      	muls	r2, r4
 8001376:	18b3      	adds	r3, r6, r2
	diff_state = bt[key]->old_state ^ bt[key]->new_state;
 8001378:	5cb2      	ldrb	r2, [r6, r2]
	if(((bt[key]->mode >> i) & 0x01)  == PUSHBTN_MODE_UDOWN) {
 800137a:	7cd9      	ldrb	r1, [r3, #19]
	bt[key]->new_state = PushButton_Read(key);
 800137c:	7058      	strb	r0, [r3, #1]
	if(((bt[key]->mode >> i) & 0x01)  == PUSHBTN_MODE_UDOWN) {
 800137e:	07c9      	lsls	r1, r1, #31
 8001380:	d521      	bpl.n	80013c6 <KeyboardRead+0x5e>
		if(((bt[key]->new_state >> i) & 0x01) == 0x01) {
 8001382:	f010 0101 	ands.w	r1, r0, #1
 8001386:	d011      	beq.n	80013ac <KeyboardRead+0x44>
			event[0] = EVT_PBTN_INPUT;
 8001388:	2310      	movs	r3, #16
 800138a:	f88d 3000 	strb.w	r3, [sp]
			event[1] = (uint8_t)key;
 800138e:	f88d 4001 	strb.w	r4, [sp, #1]
			event[2] = PBTN_DOWN;
 8001392:	2305      	movs	r3, #5
				Evt_EnQueue(event);
 8001394:	4668      	mov	r0, sp
				event[2] = PBTN_ENDN;
 8001396:	f88d 3002 	strb.w	r3, [sp, #2]
				Evt_EnQueue(event);
 800139a:	f7ff ffc9 	bl	8001330 <Evt_EnQueue>
	bt[key]->old_state = bt[key]->new_state;
 800139e:	2360      	movs	r3, #96	; 0x60
 80013a0:	435c      	muls	r4, r3
 80013a2:	1933      	adds	r3, r6, r4
 80013a4:	785b      	ldrb	r3, [r3, #1]
 80013a6:	5533      	strb	r3, [r6, r4]
}
 80013a8:	b004      	add	sp, #16
 80013aa:	bd70      	pop	{r4, r5, r6, pc}
			if(((bt[key]->old_state >> i) & 0x01) == 0x01) {
 80013ac:	07d3      	lsls	r3, r2, #31
 80013ae:	d5f6      	bpl.n	800139e <KeyboardRead+0x36>
				KeyboardSetMode(key, PUSHBTN_MODE_CLICK, true);
 80013b0:	2201      	movs	r2, #1
 80013b2:	4620      	mov	r0, r4
 80013b4:	f7ff ff7c 	bl	80012b0 <KeyboardSetMode>
				event[0] = EVT_PBTN_INPUT;
 80013b8:	2310      	movs	r3, #16
 80013ba:	f88d 3000 	strb.w	r3, [sp]
				event[1] = (uint8_t)key;
 80013be:	f88d 4001 	strb.w	r4, [sp, #1]
				event[2] = PBTN_ENDN;
 80013c2:	2306      	movs	r3, #6
 80013c4:	e7e6      	b.n	8001394 <KeyboardRead+0x2c>
	diff_state = bt[key]->old_state ^ bt[key]->new_state;
 80013c6:	4042      	eors	r2, r0
		if((diff_state >> i) & 0x01) {
 80013c8:	07d5      	lsls	r5, r2, #31
 80013ca:	d520      	bpl.n	800140e <KeyboardRead+0xa6>
			bt[key]->duration[i] = 1;
 80013cc:	2201      	movs	r2, #1
 80013ce:	729a      	strb	r2, [r3, #10]
			if(((bt[key]->new_state >> i) & 0x01) == 0x00) {
 80013d0:	4002      	ands	r2, r0
 80013d2:	d107      	bne.n	80013e4 <KeyboardRead+0x7c>
				if(bt[key]->flag) {
 80013d4:	6959      	ldr	r1, [r3, #20]
 80013d6:	b111      	cbz	r1, 80013de <KeyboardRead+0x76>
					bt[key]->flag = false;
 80013d8:	615a      	str	r2, [r3, #20]
				bt[key]->duration[i]++;
 80013da:	729a      	strb	r2, [r3, #10]
 80013dc:	e002      	b.n	80013e4 <KeyboardRead+0x7c>
					bt[key]->click[i]++;
 80013de:	789a      	ldrb	r2, [r3, #2]
 80013e0:	3201      	adds	r2, #1
 80013e2:	709a      	strb	r2, [r3, #2]
		if(bt[key]->click[i] >= 3) {
 80013e4:	2560      	movs	r5, #96	; 0x60
 80013e6:	fb05 6504 	mla	r5, r5, r4, r6
 80013ea:	78aa      	ldrb	r2, [r5, #2]
 80013ec:	2a02      	cmp	r2, #2
 80013ee:	d915      	bls.n	800141c <KeyboardRead+0xb4>
			event[0] = EVT_PBTN_INPUT;
 80013f0:	2310      	movs	r3, #16
 80013f2:	f88d 3000 	strb.w	r3, [sp]
			Evt_EnQueue(event);
 80013f6:	4668      	mov	r0, sp
			event[2] = PBTN_TCLK;
 80013f8:	2304      	movs	r3, #4
 80013fa:	f88d 3002 	strb.w	r3, [sp, #2]
			event[1] = (uint8_t)key;
 80013fe:	f88d 4001 	strb.w	r4, [sp, #1]
			Evt_EnQueue(event);
 8001402:	f7ff ff95 	bl	8001330 <Evt_EnQueue>
			bt[key]->click[i] = 0;
 8001406:	2300      	movs	r3, #0
 8001408:	70ab      	strb	r3, [r5, #2]
			bt[key]->duration[i] = 0;
 800140a:	72ab      	strb	r3, [r5, #10]
 800140c:	e7c7      	b.n	800139e <KeyboardRead+0x36>
			if((bt[key]->duration[i] > 0) && (bt[key]->duration[i] < PUSHBTN_TO_MAX)) {
 800140e:	7a9a      	ldrb	r2, [r3, #10]
 8001410:	1e51      	subs	r1, r2, #1
 8001412:	b2c9      	uxtb	r1, r1
 8001414:	29fd      	cmp	r1, #253	; 0xfd
 8001416:	d8e5      	bhi.n	80013e4 <KeyboardRead+0x7c>
				bt[key]->duration[i]++;
 8001418:	3201      	adds	r2, #1
 800141a:	e7de      	b.n	80013da <KeyboardRead+0x72>
		else if((bt[key]->duration[i] > PUSHBTN_TO_SHORT) &&	(((bt[key]->new_state >> i) & 0x01) == 0x00)) {
 800141c:	7aab      	ldrb	r3, [r5, #10]
 800141e:	2b03      	cmp	r3, #3
 8001420:	d9bd      	bls.n	800139e <KeyboardRead+0x36>
 8001422:	07c1      	lsls	r1, r0, #31
 8001424:	d414      	bmi.n	8001450 <KeyboardRead+0xe8>
 8001426:	2310      	movs	r3, #16
			if(bt[key]->click[i] == 2) {
 8001428:	2a02      	cmp	r2, #2
				event[0] = EVT_PBTN_INPUT;
 800142a:	f88d 3000 	strb.w	r3, [sp]
				Evt_EnQueue(event);
 800142e:	4668      	mov	r0, sp
				event[2] = PBTN_DCLK;
 8001430:	bf0c      	ite	eq
 8001432:	2303      	moveq	r3, #3
				event[2] = PBTN_SCLK;
 8001434:	2301      	movne	r3, #1
 8001436:	f88d 3002 	strb.w	r3, [sp, #2]
				event[1] = (uint8_t)key;
 800143a:	f88d 4001 	strb.w	r4, [sp, #1]
				Evt_EnQueue(event);
 800143e:	f7ff ff77 	bl	8001330 <Evt_EnQueue>
			bt[key]->click[i] = 0;
 8001442:	2360      	movs	r3, #96	; 0x60
 8001444:	fb03 6304 	mla	r3, r3, r4, r6
 8001448:	2200      	movs	r2, #0
 800144a:	709a      	strb	r2, [r3, #2]
			bt[key]->duration[i] = 0;
 800144c:	729a      	strb	r2, [r3, #10]
 800144e:	e7a6      	b.n	800139e <KeyboardRead+0x36>
		else if((bt[key]->duration[i] > PUSHBTN_TO_LONG) && (((bt[key]->new_state >> i) & 0x01) == 0x01)) {
 8001450:	2b0a      	cmp	r3, #10
 8001452:	d9a4      	bls.n	800139e <KeyboardRead+0x36>
			event[0] = EVT_PBTN_INPUT;
 8001454:	2310      	movs	r3, #16
 8001456:	f88d 3000 	strb.w	r3, [sp]
			Evt_EnQueue(event);
 800145a:	4668      	mov	r0, sp
			event[2] = PBTN_LCLK;
 800145c:	2302      	movs	r3, #2
 800145e:	f88d 3002 	strb.w	r3, [sp, #2]
			event[1] = (uint8_t)key;
 8001462:	f88d 4001 	strb.w	r4, [sp, #1]
			Evt_EnQueue(event);
 8001466:	f7ff ff63 	bl	8001330 <Evt_EnQueue>
			bt[key]->click[i] = 0;
 800146a:	2300      	movs	r3, #0
 800146c:	70ab      	strb	r3, [r5, #2]
			bt[key]->duration[i] = 0;
 800146e:	72ab      	strb	r3, [r5, #10]
			bt[key]->flag = true;
 8001470:	2301      	movs	r3, #1
 8001472:	616b      	str	r3, [r5, #20]
 8001474:	e793      	b.n	800139e <KeyboardRead+0x36>
 8001476:	bf00      	nop
 8001478:	2000b2b8 	.word	0x2000b2b8

0800147c <Key_Read>:
{
 800147c:	b510      	push	{r4, lr}
 800147e:	2400      	movs	r4, #0
		KeyboardRead(x);
 8001480:	b2e0      	uxtb	r0, r4
 8001482:	3401      	adds	r4, #1
 8001484:	f7ff ff70 	bl	8001368 <KeyboardRead>
	for(x = 0; x < 6; x++) {
 8001488:	2c06      	cmp	r4, #6
 800148a:	d1f9      	bne.n	8001480 <Key_Read+0x4>
}
 800148c:	bd10      	pop	{r4, pc}
	...

08001490 <Evt_DeQueue>:

	// disable all timers
	//UsrTimer_Enable(false);

	// queue is not empty
	if(evt_queue.tail != evt_queue.head)
 8001490:	4b0d      	ldr	r3, [pc, #52]	; (80014c8 <Evt_DeQueue+0x38>)
 8001492:	f893 1081 	ldrb.w	r1, [r3, #129]	; 0x81
 8001496:	f893 2080 	ldrb.w	r2, [r3, #128]	; 0x80
 800149a:	4291      	cmp	r1, r2
 800149c:	d012      	beq.n	80014c4 <Evt_DeQueue+0x34>
 800149e:	2200      	movs	r2, #0
	{
		// copy event bytes into the buffer
		for(i = 0; i < EVT_QWIDTH; i++)
		{
			event[i] = evt_queue.buff[evt_queue.tail][i];
 80014a0:	f893 1081 	ldrb.w	r1, [r3, #129]	; 0x81
 80014a4:	eb03 1101 	add.w	r1, r3, r1, lsl #4
 80014a8:	5c89      	ldrb	r1, [r1, r2]
 80014aa:	5481      	strb	r1, [r0, r2]
 80014ac:	3201      	adds	r2, #1
		for(i = 0; i < EVT_QWIDTH; i++)
 80014ae:	2a10      	cmp	r2, #16
 80014b0:	d1f6      	bne.n	80014a0 <Evt_DeQueue+0x10>
		}
		// move to the next position
		evt_queue.tail = ADVANCE_QPTR(evt_queue.tail);
 80014b2:	f893 2081 	ldrb.w	r2, [r3, #129]	; 0x81
 80014b6:	3201      	adds	r2, #1
 80014b8:	f002 0207 	and.w	r2, r2, #7
 80014bc:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
		// set flag
		flag = true;
 80014c0:	2001      	movs	r0, #1
 80014c2:	4770      	bx	lr
	bool flag = false;
 80014c4:	2000      	movs	r0, #0
	// enable all timers
	//UsrTimer_Enable(true);

	// return with the flag
	return flag;
}
 80014c6:	4770      	bx	lr
 80014c8:	200033b8 	.word	0x200033b8

080014cc <Evt_InitQueue>:
 * the data in the queue.
 */
void Evt_InitQueue(void)
{
	// clear queue by resetting the pointers
	evt_queue.head = evt_queue.tail = 0;
 80014cc:	4b03      	ldr	r3, [pc, #12]	; (80014dc <Evt_InitQueue+0x10>)
 80014ce:	2200      	movs	r2, #0
 80014d0:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
 80014d4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
 80014d8:	4770      	bx	lr
 80014da:	bf00      	nop
 80014dc:	200033b8 	.word	0x200033b8

080014e0 <ButtonEvent>:
}

void ButtonEvent(void)
{
 80014e0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	uint8_t event[EVT_QWIDTH];
	// check event queue
	if(Evt_DeQueue(event)) {
 80014e2:	4668      	mov	r0, sp
 80014e4:	f7ff ffd4 	bl	8001490 <Evt_DeQueue>
 80014e8:	b1c8      	cbz	r0, 800151e <ButtonEvent+0x3e>
		timer_gui = HAL_GetTick();
 80014ea:	f001 f805 	bl	80024f8 <HAL_GetTick>
 80014ee:	4b4c      	ldr	r3, [pc, #304]	; (8001620 <ButtonEvent+0x140>)
 80014f0:	6018      	str	r0, [r3, #0]
		switch(TelaAtiva) {
 80014f2:	4b4c      	ldr	r3, [pc, #304]	; (8001624 <ButtonEvent+0x144>)
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	2b0e      	cmp	r3, #14
 80014f8:	d811      	bhi.n	800151e <ButtonEvent+0x3e>
 80014fa:	e8df f003 	tbb	[pc, r3]
 80014fe:	1308      	.short	0x1308
 8001500:	372e251c 	.word	0x372e251c
 8001504:	5b524940 	.word	0x5b524940
 8001508:	7f766d64 	.word	0x7f766d64
 800150c:	88          	.byte	0x88
 800150d:	00          	.byte	0x00
			case TelaPrincipal:
				ButtonEventTelaPrincipal(event[0], event[2], event[1]);
 800150e:	f89d 2001 	ldrb.w	r2, [sp, #1]
 8001512:	f89d 1002 	ldrb.w	r1, [sp, #2]
 8001516:	f89d 0000 	ldrb.w	r0, [sp]
 800151a:	f006 ff2b 	bl	8008374 <ButtonEventTelaPrincipal>
			case TelaReading_Status:
				ButtonEventTelaReading_Status(event[0], event[2], event[1]);
				break;
		}
	}
}
 800151e:	b005      	add	sp, #20
 8001520:	f85d fb04 	ldr.w	pc, [sp], #4
				ButtonEventTelaSelecao(event[0], event[2], event[1]);
 8001524:	f89d 2001 	ldrb.w	r2, [sp, #1]
 8001528:	f89d 1002 	ldrb.w	r1, [sp, #2]
 800152c:	f89d 0000 	ldrb.w	r0, [sp]
 8001530:	f00d fb76 	bl	800ec20 <ButtonEventTelaSelecao>
				break;
 8001534:	e7f3      	b.n	800151e <ButtonEvent+0x3e>
				ButtonEventTelaFrequencia(event[0], event[2], event[1]);
 8001536:	f89d 2001 	ldrb.w	r2, [sp, #1]
 800153a:	f89d 1002 	ldrb.w	r1, [sp, #2]
 800153e:	f89d 0000 	ldrb.w	r0, [sp]
 8001542:	f00a f8bd 	bl	800b6c0 <ButtonEventTelaFrequencia>
				break;
 8001546:	e7ea      	b.n	800151e <ButtonEvent+0x3e>
				ButtonEventTelaAudio(event[0], event[2], event[1]);
 8001548:	f89d 2001 	ldrb.w	r2, [sp, #1]
 800154c:	f89d 1002 	ldrb.w	r1, [sp, #2]
 8001550:	f89d 0000 	ldrb.w	r0, [sp]
 8001554:	f009 fb02 	bl	800ab5c <ButtonEventTelaAudio>
				break;
 8001558:	e7e1      	b.n	800151e <ButtonEvent+0x3e>
				ButtonEventTelaAudio_1(event[0], event[2], event[1]);
 800155a:	f89d 2001 	ldrb.w	r2, [sp, #1]
 800155e:	f89d 1002 	ldrb.w	r1, [sp, #2]
 8001562:	f89d 0000 	ldrb.w	r0, [sp]
 8001566:	f009 fb57 	bl	800ac18 <ButtonEventTelaAudio_1>
				break;
 800156a:	e7d8      	b.n	800151e <ButtonEvent+0x3e>
				ButtonEventTelaAudio_2(event[0], event[2], event[1]);
 800156c:	f89d 2001 	ldrb.w	r2, [sp, #1]
 8001570:	f89d 1002 	ldrb.w	r1, [sp, #2]
 8001574:	f89d 0000 	ldrb.w	r0, [sp]
 8001578:	f009 fbb0 	bl	800acdc <ButtonEventTelaAudio_2>
				break;
 800157c:	e7cf      	b.n	800151e <ButtonEvent+0x3e>
				ButtonEventTelaRF(event[0], event[2], event[1]);
 800157e:	f89d 2001 	ldrb.w	r2, [sp, #1]
 8001582:	f89d 1002 	ldrb.w	r1, [sp, #2]
 8001586:	f89d 0000 	ldrb.w	r0, [sp]
 800158a:	f00c ff07 	bl	800e39c <ButtonEventTelaRF>
				break;
 800158e:	e7c6      	b.n	800151e <ButtonEvent+0x3e>
				ButtonEventTelaRF_1(event[0], event[2], event[1]);
 8001590:	f89d 2001 	ldrb.w	r2, [sp, #1]
 8001594:	f89d 1002 	ldrb.w	r1, [sp, #2]
 8001598:	f89d 0000 	ldrb.w	r0, [sp]
 800159c:	f00d f81a 	bl	800e5d4 <ButtonEventTelaRF_1>
				break;
 80015a0:	e7bd      	b.n	800151e <ButtonEvent+0x3e>
				ButtonEventTelaRF_2(event[0], event[2], event[1]);
 80015a2:	f89d 2001 	ldrb.w	r2, [sp, #1]
 80015a6:	f89d 1002 	ldrb.w	r1, [sp, #2]
 80015aa:	f89d 0000 	ldrb.w	r0, [sp]
 80015ae:	f00d f92d 	bl	800e80c <ButtonEventTelaRF_2>
				break;
 80015b2:	e7b4      	b.n	800151e <ButtonEvent+0x3e>
				ButtonEventTelaReadings(event[0], event[2], event[1]);
 80015b4:	f89d 2001 	ldrb.w	r2, [sp, #1]
 80015b8:	f89d 1002 	ldrb.w	r1, [sp, #2]
 80015bc:	f89d 0000 	ldrb.w	r0, [sp]
 80015c0:	f00b feb4 	bl	800d32c <ButtonEventTelaReadings>
				break;
 80015c4:	e7ab      	b.n	800151e <ButtonEvent+0x3e>
				ButtonEventTelaMpx(event[0], event[2], event[1]);
 80015c6:	f89d 2001 	ldrb.w	r2, [sp, #1]
 80015ca:	f89d 1002 	ldrb.w	r1, [sp, #2]
 80015ce:	f89d 0000 	ldrb.w	r0, [sp]
 80015d2:	f00a fb11 	bl	800bbf8 <ButtonEventTelaMpx>
				break;
 80015d6:	e7a2      	b.n	800151e <ButtonEvent+0x3e>
				ButtonEventTelaReading_Temp(event[0], event[2], event[1]);
 80015d8:	f89d 2001 	ldrb.w	r2, [sp, #1]
 80015dc:	f89d 1002 	ldrb.w	r1, [sp, #2]
 80015e0:	f89d 0000 	ldrb.w	r0, [sp]
 80015e4:	f00b f8c4 	bl	800c770 <ButtonEventTelaReading_Temp>
				break;
 80015e8:	e799      	b.n	800151e <ButtonEvent+0x3e>
				ButtonEventTelaReading_Vpa(event[0], event[2], event[1]);
 80015ea:	f89d 2001 	ldrb.w	r2, [sp, #1]
 80015ee:	f89d 1002 	ldrb.w	r1, [sp, #2]
 80015f2:	f89d 0000 	ldrb.w	r0, [sp]
 80015f6:	f00b fbb7 	bl	800cd68 <ButtonEventTelaReading_Vpa>
				break;
 80015fa:	e790      	b.n	800151e <ButtonEvent+0x3e>
				ButtonEventTelaReading_Efic(event[0], event[2], event[1]);
 80015fc:	f89d 2001 	ldrb.w	r2, [sp, #1]
 8001600:	f89d 1002 	ldrb.w	r1, [sp, #2]
 8001604:	f89d 0000 	ldrb.w	r0, [sp]
 8001608:	f00a fcea 	bl	800bfe0 <ButtonEventTelaReading_Efic>
				break;
 800160c:	e787      	b.n	800151e <ButtonEvent+0x3e>
				ButtonEventTelaReading_Status(event[0], event[2], event[1]);
 800160e:	f89d 2001 	ldrb.w	r2, [sp, #1]
 8001612:	f89d 1002 	ldrb.w	r1, [sp, #2]
 8001616:	f89d 0000 	ldrb.w	r0, [sp]
 800161a:	f00a feb9 	bl	800c390 <ButtonEventTelaReading_Status>
}
 800161e:	e77e      	b.n	800151e <ButtonEvent+0x3e>
 8001620:	20004e44 	.word	0x20004e44
 8001624:	20003444 	.word	0x20003444

08001628 <HAL_printf_valist>:
/** Custom printf function in order to use HAL_UART_Transmit()
 * @param *fmt String to print
 * @param argp Parameters list
 */
void HAL_printf_valist(const char *fmt, va_list argp)
{
 8001628:	b500      	push	{lr}
 800162a:	b0c1      	sub	sp, #260	; 0x104
  char string[PRINT_BUFFER_SIZE];

  if (vsprintf(string, fmt, argp) > 0) {
 800162c:	460a      	mov	r2, r1
 800162e:	4601      	mov	r1, r0
 8001630:	4668      	mov	r0, sp
 8001632:	f01a fca1 	bl	801bf78 <vsprintf>
 8001636:	2800      	cmp	r0, #0
 8001638:	dd0f      	ble.n	800165a <HAL_printf_valist+0x32>
    HAL_UART_Transmit(&huart2, (uint8_t*)string, strlen(string), HAL_MAX_DELAY); // send message via UART
 800163a:	4668      	mov	r0, sp
 800163c:	f7fe fdc8 	bl	80001d0 <strlen>
 8001640:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001644:	b282      	uxth	r2, r0
 8001646:	4669      	mov	r1, sp
  } else {
	HAL_UART_Transmit(&huart2, (uint8_t*)"E - Print\n", 14, HAL_MAX_DELAY);
 8001648:	4806      	ldr	r0, [pc, #24]	; (8001664 <HAL_printf_valist+0x3c>)
 800164a:	f004 fc0e 	bl	8005e6a <HAL_UART_Transmit>
  }
  HAL_Delay(10);
 800164e:	200a      	movs	r0, #10
 8001650:	f000 ff58 	bl	8002504 <HAL_Delay>
}
 8001654:	b041      	add	sp, #260	; 0x104
 8001656:	f85d fb04 	ldr.w	pc, [sp], #4
	HAL_UART_Transmit(&huart2, (uint8_t*)"E - Print\n", 14, HAL_MAX_DELAY);
 800165a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800165e:	220e      	movs	r2, #14
 8001660:	4901      	ldr	r1, [pc, #4]	; (8001668 <HAL_printf_valist+0x40>)
 8001662:	e7f1      	b.n	8001648 <HAL_printf_valist+0x20>
 8001664:	2000b684 	.word	0x2000b684
 8001668:	0801d900 	.word	0x0801d900

0800166c <logI>:
/** LOG procedure - Info
 * @param *fmt String to print
 * @param ... Parameters list
 */
void logI(const char* fmt, ...)
{
 800166c:	b40f      	push	{r0, r1, r2, r3}
 800166e:	b507      	push	{r0, r1, r2, lr}
 8001670:	a904      	add	r1, sp, #16
 8001672:	f851 0b04 	ldr.w	r0, [r1], #4
	va_list argp;

	va_start(argp, fmt);
 8001676:	9101      	str	r1, [sp, #4]
	HAL_printf_valist(fmt, argp);
 8001678:	f7ff ffd6 	bl	8001628 <HAL_printf_valist>
	logUSB(fmt, argp);
	va_end(argp);
}
 800167c:	b003      	add	sp, #12
 800167e:	f85d eb04 	ldr.w	lr, [sp], #4
 8001682:	b004      	add	sp, #16
 8001684:	4770      	bx	lr
	...

08001688 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001688:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800168c:	b0b8      	sub	sp, #224	; 0xe0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800168e:	2514      	movs	r5, #20
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001690:	2244      	movs	r2, #68	; 0x44
 8001692:	2100      	movs	r1, #0
 8001694:	a805      	add	r0, sp, #20
 8001696:	f019 fb9a 	bl	801adce <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800169a:	462a      	mov	r2, r5
 800169c:	2100      	movs	r1, #0
 800169e:	4668      	mov	r0, sp
 80016a0:	f019 fb95 	bl	801adce <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80016a4:	2100      	movs	r1, #0
 80016a6:	2288      	movs	r2, #136	; 0x88
 80016a8:	a816      	add	r0, sp, #88	; 0x58
 80016aa:	f019 fb90 	bl	801adce <memset>

  /** Configure LSE Drive Capability 
  */
  HAL_PWR_EnableBkUpAccess();
 80016ae:	f002 f9bd 	bl	8003a2c <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 80016b2:	4a25      	ldr	r2, [pc, #148]	; (8001748 <SystemClock_Config+0xc0>)
 80016b4:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 80016b8:	f023 0318 	bic.w	r3, r3, #24
 80016bc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE;
 80016c0:	2305      	movs	r3, #5
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80016c2:	2402      	movs	r4, #2
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80016c4:	2601      	movs	r6, #1
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80016c6:	2703      	movs	r7, #3
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE;
 80016c8:	9305      	str	r3, [sp, #20]
  RCC_OscInitStruct.PLL.PLLM = 1;
  RCC_OscInitStruct.PLL.PLLN = 20;
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80016ca:	f04f 0807 	mov.w	r8, #7
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80016ce:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80016d2:	eb0d 0005 	add.w	r0, sp, r5
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80016d6:	9306      	str	r3, [sp, #24]
  RCC_OscInitStruct.PLL.PLLN = 20;
 80016d8:	9512      	str	r5, [sp, #72]	; 0x48
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80016da:	9607      	str	r6, [sp, #28]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80016dc:	2500      	movs	r5, #0
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80016de:	940f      	str	r4, [sp, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80016e0:	9710      	str	r7, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80016e2:	9611      	str	r6, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80016e4:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80016e8:	9414      	str	r4, [sp, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80016ea:	9415      	str	r4, [sp, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80016ec:	f002 fafa 	bl	8003ce4 <HAL_RCC_OscConfig>
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80016f0:	2104      	movs	r1, #4
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80016f2:	230f      	movs	r3, #15
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80016f4:	4668      	mov	r0, sp
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80016f6:	e88d 0088 	stmia.w	sp, {r3, r7}
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80016fa:	9502      	str	r5, [sp, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80016fc:	9503      	str	r5, [sp, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80016fe:	9504      	str	r5, [sp, #16]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001700:	f002 fd52 	bl	80041a8 <HAL_RCC_ClockConfig>
  {
    Error_Handler();
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC|RCC_PERIPHCLK_USART2
 8001704:	4b11      	ldr	r3, [pc, #68]	; (800174c <SystemClock_Config+0xc4>)
 8001706:	9316      	str	r3, [sp, #88]	; 0x58
                              |RCC_PERIPHCLK_I2C1|RCC_PERIPHCLK_USB
                              |RCC_PERIPHCLK_ADC;
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
  PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8001708:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800170c:	9334      	str	r3, [sp, #208]	; 0xd0
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 800170e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001712:	9337      	str	r3, [sp, #220]	; 0xdc
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 8001714:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8001718:	9331      	str	r3, [sp, #196]	; 0xc4
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSE;
  PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
  PeriphClkInit.PLLSAI1.PLLSAI1N = 12;
 800171a:	230c      	movs	r3, #12
 800171c:	9319      	str	r3, [sp, #100]	; 0x64
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_48M2CLK|RCC_PLLSAI1_ADC1CLK;
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800171e:	a816      	add	r0, sp, #88	; 0x58
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_48M2CLK|RCC_PLLSAI1_ADC1CLK;
 8001720:	f04f 7388 	mov.w	r3, #17825792	; 0x1100000
 8001724:	931d      	str	r3, [sp, #116]	; 0x74
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001726:	9525      	str	r5, [sp, #148]	; 0x94
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001728:	952a      	str	r5, [sp, #168]	; 0xa8
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSE;
 800172a:	9717      	str	r7, [sp, #92]	; 0x5c
  PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 800172c:	9618      	str	r6, [sp, #96]	; 0x60
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 800172e:	f8cd 8068 	str.w	r8, [sp, #104]	; 0x68
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8001732:	941b      	str	r4, [sp, #108]	; 0x6c
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8001734:	941c      	str	r4, [sp, #112]	; 0x70
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001736:	f002 ff21 	bl	800457c <HAL_RCCEx_PeriphCLKConfig>
  {
    Error_Handler();
  }
  /** Configure the main internal regulator output voltage 
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800173a:	f44f 7000 	mov.w	r0, #512	; 0x200
 800173e:	f002 f985 	bl	8003a4c <HAL_PWREx_ControlVoltageScaling>
  {
    Error_Handler();
  }
}
 8001742:	b038      	add	sp, #224	; 0xe0
 8001744:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001748:	40021000 	.word	0x40021000
 800174c:	00026042 	.word	0x00026042

08001750 <main>:
{
 8001750:	e92d 4880 	stmdb	sp!, {r7, fp, lr}
 8001754:	b099      	sub	sp, #100	; 0x64
  HAL_Init();
 8001756:	f000 fead 	bl	80024b4 <HAL_Init>
  SystemClock_Config();
 800175a:	f7ff ff95 	bl	8001688 <SystemClock_Config>
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800175e:	2214      	movs	r2, #20
 8001760:	2100      	movs	r1, #0
 8001762:	a80f      	add	r0, sp, #60	; 0x3c
 8001764:	f019 fb33 	bl	801adce <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001768:	4bb9      	ldr	r3, [pc, #740]	; (8001a50 <main+0x300>)
  huart2.Instance = USART2;
 800176a:	4fba      	ldr	r7, [pc, #744]	; (8001a54 <main+0x304>)
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800176c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
  hi2c1.Instance = I2C1;
 800176e:	4eba      	ldr	r6, [pc, #744]	; (8001a58 <main+0x308>)
  hrtc.Instance = RTC;
 8001770:	f8df a324 	ldr.w	sl, [pc, #804]	; 8001a98 <main+0x348>
  hadc1.Instance = ADC1;
 8001774:	f8df b324 	ldr.w	fp, [pc, #804]	; 8001a9c <main+0x34c>
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001778:	f042 0204 	orr.w	r2, r2, #4
 800177c:	64da      	str	r2, [r3, #76]	; 0x4c
 800177e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001780:	f002 0204 	and.w	r2, r2, #4
 8001784:	9203      	str	r2, [sp, #12]
 8001786:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001788:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800178a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800178e:	64da      	str	r2, [r3, #76]	; 0x4c
 8001790:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001792:	f002 0280 	and.w	r2, r2, #128	; 0x80
 8001796:	9204      	str	r2, [sp, #16]
 8001798:	9a04      	ldr	r2, [sp, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800179a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800179c:	f042 0201 	orr.w	r2, r2, #1
 80017a0:	64da      	str	r2, [r3, #76]	; 0x4c
 80017a2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80017a4:	f002 0201 	and.w	r2, r2, #1
 80017a8:	9205      	str	r2, [sp, #20]
 80017aa:	9a05      	ldr	r2, [sp, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80017ac:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80017ae:	f042 0202 	orr.w	r2, r2, #2
 80017b2:	64da      	str	r2, [r3, #76]	; 0x4c
 80017b4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80017b6:	f002 0202 	and.w	r2, r2, #2
 80017ba:	9206      	str	r2, [sp, #24]
 80017bc:	9a06      	ldr	r2, [sp, #24]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80017be:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80017c0:	f042 0208 	orr.w	r2, r2, #8
 80017c4:	64da      	str	r2, [r3, #76]	; 0x4c
 80017c6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017c8:	f003 0308 	and.w	r3, r3, #8
 80017cc:	9307      	str	r3, [sp, #28]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80017ce:	2200      	movs	r2, #0
 80017d0:	2120      	movs	r1, #32
 80017d2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80017d6:	9b07      	ldr	r3, [sp, #28]
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80017d8:	f001 fbfe 	bl	8002fd8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_FLASH_GPIO_Port, CS_FLASH_Pin, GPIO_PIN_SET);
 80017dc:	2201      	movs	r2, #1
 80017de:	2104      	movs	r1, #4
 80017e0:	489e      	ldr	r0, [pc, #632]	; (8001a5c <main+0x30c>)
 80017e2:	f001 fbf9 	bl	8002fd8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, TFT_CS_Pin|TFT_RST_Pin|TFT_DC_Pin, GPIO_PIN_SET);
 80017e6:	2201      	movs	r2, #1
 80017e8:	21e0      	movs	r1, #224	; 0xe0
 80017ea:	489d      	ldr	r0, [pc, #628]	; (8001a60 <main+0x310>)
 80017ec:	f001 fbf4 	bl	8002fd8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80017f0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80017f4:	2501      	movs	r5, #1
  GPIO_InitStruct.Pin = B1_Pin;
 80017f6:	930f      	str	r3, [sp, #60]	; 0x3c
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80017f8:	a90f      	add	r1, sp, #60	; 0x3c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80017fa:	4b9a      	ldr	r3, [pc, #616]	; (8001a64 <main+0x314>)
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80017fc:	489a      	ldr	r0, [pc, #616]	; (8001a68 <main+0x318>)
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80017fe:	9310      	str	r3, [sp, #64]	; 0x40

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001800:	2400      	movs	r4, #0
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001802:	9511      	str	r5, [sp, #68]	; 0x44
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001804:	f001 fb06 	bl	8002e14 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = LD2_Pin;
 8001808:	2320      	movs	r3, #32
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800180a:	a90f      	add	r1, sp, #60	; 0x3c
 800180c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000

  /*Configure GPIO pin : SW_ENC_Pin */
  GPIO_InitStruct.Pin = SW_ENC_Pin;
 8001810:	f04f 0910 	mov.w	r9, #16
  GPIO_InitStruct.Pin = LD2_Pin;
 8001814:	930f      	str	r3, [sp, #60]	; 0x3c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001816:	9510      	str	r5, [sp, #64]	; 0x40
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001818:	9411      	str	r4, [sp, #68]	; 0x44
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800181a:	9412      	str	r4, [sp, #72]	; 0x48
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800181c:	f001 fafa 	bl	8002e14 <HAL_GPIO_Init>
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_PULLUP;
  HAL_GPIO_Init(SW_ENC_GPIO_Port, &GPIO_InitStruct);
 8001820:	a90f      	add	r1, sp, #60	; 0x3c
 8001822:	4891      	ldr	r0, [pc, #580]	; (8001a68 <main+0x318>)
  GPIO_InitStruct.Pin = SW_ENC_Pin;
 8001824:	f8cd 903c 	str.w	r9, [sp, #60]	; 0x3c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001828:	9410      	str	r4, [sp, #64]	; 0x40
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800182a:	9511      	str	r5, [sp, #68]	; 0x44
  HAL_GPIO_Init(SW_ENC_GPIO_Port, &GPIO_InitStruct);
 800182c:	f001 faf2 	bl	8002e14 <HAL_GPIO_Init>

  /*Configure GPIO pins : ENC_A_Pin KEY_DN_Pin KEY_UP_Pin KEY_ENTER_Pin 
                           KEY_ESC_Pin ENC_B_Pin */
  GPIO_InitStruct.Pin = ENC_A_Pin|KEY_DN_Pin|KEY_UP_Pin|KEY_ENTER_Pin 
 8001830:	f24f 0314 	movw	r3, #61460	; 0xf014
                          |KEY_ESC_Pin|ENC_B_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_PULLUP;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001834:	a90f      	add	r1, sp, #60	; 0x3c
 8001836:	488a      	ldr	r0, [pc, #552]	; (8001a60 <main+0x310>)
  GPIO_InitStruct.Pin = ENC_A_Pin|KEY_DN_Pin|KEY_UP_Pin|KEY_ENTER_Pin 
 8001838:	930f      	str	r3, [sp, #60]	; 0x3c

  /*Configure GPIO pin : CS_FLASH_Pin */
  GPIO_InitStruct.Pin = CS_FLASH_Pin;
 800183a:	f04f 0804 	mov.w	r8, #4
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800183e:	9410      	str	r4, [sp, #64]	; 0x40
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001840:	9511      	str	r5, [sp, #68]	; 0x44
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001842:	f001 fae7 	bl	8002e14 <HAL_GPIO_Init>
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(CS_FLASH_GPIO_Port, &GPIO_InitStruct);
 8001846:	a90f      	add	r1, sp, #60	; 0x3c
 8001848:	4884      	ldr	r0, [pc, #528]	; (8001a5c <main+0x30c>)
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800184a:	9510      	str	r5, [sp, #64]	; 0x40
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800184c:	9411      	str	r4, [sp, #68]	; 0x44
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800184e:	9412      	str	r4, [sp, #72]	; 0x48
  GPIO_InitStruct.Pin = CS_FLASH_Pin;
 8001850:	f8cd 803c 	str.w	r8, [sp, #60]	; 0x3c
  HAL_GPIO_Init(CS_FLASH_GPIO_Port, &GPIO_InitStruct);
 8001854:	f001 fade 	bl	8002e14 <HAL_GPIO_Init>

  /*Configure GPIO pins : TFT_CS_Pin TFT_RST_Pin TFT_DC_Pin */
  GPIO_InitStruct.Pin = TFT_CS_Pin|TFT_RST_Pin|TFT_DC_Pin;
 8001858:	23e0      	movs	r3, #224	; 0xe0
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800185a:	a90f      	add	r1, sp, #60	; 0x3c
 800185c:	4880      	ldr	r0, [pc, #512]	; (8001a60 <main+0x310>)
  GPIO_InitStruct.Pin = TFT_CS_Pin|TFT_RST_Pin|TFT_DC_Pin;
 800185e:	930f      	str	r3, [sp, #60]	; 0x3c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001860:	9510      	str	r5, [sp, #64]	; 0x40
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001862:	9411      	str	r4, [sp, #68]	; 0x44
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001864:	9412      	str	r4, [sp, #72]	; 0x48
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001866:	f001 fad5 	bl	8002e14 <HAL_GPIO_Init>
  huart2.Init.BaudRate = 115200;
 800186a:	4a80      	ldr	r2, [pc, #512]	; (8001a6c <main+0x31c>)
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800186c:	60bc      	str	r4, [r7, #8]
  huart2.Init.BaudRate = 115200;
 800186e:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8001872:	e887 000c 	stmia.w	r7, {r2, r3}
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001876:	4638      	mov	r0, r7
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001878:	230c      	movs	r3, #12
  huart2.Init.StopBits = UART_STOPBITS_1;
 800187a:	60fc      	str	r4, [r7, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800187c:	613c      	str	r4, [r7, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800187e:	617b      	str	r3, [r7, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001880:	61bc      	str	r4, [r7, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001882:	61fc      	str	r4, [r7, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001884:	623c      	str	r4, [r7, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001886:	627c      	str	r4, [r7, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001888:	f004 fb76 	bl	8005f78 <HAL_UART_Init>
  hi2c1.Init.Timing = 0x00702890;
 800188c:	4b78      	ldr	r3, [pc, #480]	; (8001a70 <main+0x320>)
 800188e:	4979      	ldr	r1, [pc, #484]	; (8001a74 <main+0x324>)
  hi2c1.Init.OwnAddress1 = 0;
 8001890:	60b4      	str	r4, [r6, #8]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001892:	4630      	mov	r0, r6
  hi2c1.Init.Timing = 0x00702890;
 8001894:	e886 000a 	stmia.w	r6, {r1, r3}
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001898:	60f5      	str	r5, [r6, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800189a:	6134      	str	r4, [r6, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800189c:	6174      	str	r4, [r6, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800189e:	61b4      	str	r4, [r6, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80018a0:	61f4      	str	r4, [r6, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80018a2:	6234      	str	r4, [r6, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80018a4:	f001 fba3 	bl	8002fee <HAL_I2C_Init>
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80018a8:	4621      	mov	r1, r4
 80018aa:	4630      	mov	r0, r6
 80018ac:	f001 fbf0 	bl	8003090 <HAL_I2CEx_ConfigAnalogFilter>
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 1) != HAL_OK)
 80018b0:	4629      	mov	r1, r5
 80018b2:	4630      	mov	r0, r6
 80018b4:	f001 fc12 	bl	80030dc <HAL_I2CEx_ConfigDigitalFilter>
  hqspi.Instance = QUADSPI;
 80018b8:	486f      	ldr	r0, [pc, #444]	; (8001a78 <main+0x328>)
 80018ba:	4b70      	ldr	r3, [pc, #448]	; (8001a7c <main+0x32c>)
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 80018bc:	6184      	str	r4, [r0, #24]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_HALFCYCLE;
 80018be:	e880 0318 	stmia.w	r0, {r3, r4, r8, r9}
  hqspi.Init.FlashSize = 23;
 80018c2:	2317      	movs	r3, #23
 80018c4:	6103      	str	r3, [r0, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_2_CYCLE;
 80018c6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80018ca:	6143      	str	r3, [r0, #20]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 80018cc:	f002 f922 	bl	8003b14 <HAL_QSPI_Init>
  hspi3.Instance = SPI3;
 80018d0:	486b      	ldr	r0, [pc, #428]	; (8001a80 <main+0x330>)
  hspi3.Init.Mode = SPI_MODE_MASTER;
 80018d2:	4b6c      	ldr	r3, [pc, #432]	; (8001a84 <main+0x334>)
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 80018d4:	6084      	str	r4, [r0, #8]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 80018d6:	f44f 7682 	mov.w	r6, #260	; 0x104
 80018da:	e880 0048 	stmia.w	r0, {r3, r6}
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 80018de:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 80018e2:	60c3      	str	r3, [r0, #12]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 80018e4:	f44f 7300 	mov.w	r3, #512	; 0x200
  hspi3.Init.CRCPolynomial = 7;
 80018e8:	2207      	movs	r2, #7
  hspi3.Init.NSS = SPI_NSS_SOFT;
 80018ea:	6183      	str	r3, [r0, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 80018ec:	2308      	movs	r3, #8
 80018ee:	61c3      	str	r3, [r0, #28]
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80018f0:	6343      	str	r3, [r0, #52]	; 0x34
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 80018f2:	6104      	str	r4, [r0, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 80018f4:	6144      	str	r4, [r0, #20]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80018f6:	6204      	str	r4, [r0, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 80018f8:	6244      	str	r4, [r0, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80018fa:	6284      	str	r4, [r0, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 7;
 80018fc:	62c2      	str	r2, [r0, #44]	; 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80018fe:	6304      	str	r4, [r0, #48]	; 0x30
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8001900:	f003 f9f8 	bl	8004cf4 <HAL_SPI_Init>
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001904:	464a      	mov	r2, r9
 8001906:	4621      	mov	r1, r4
 8001908:	a80b      	add	r0, sp, #44	; 0x2c
  htim3.Instance = TIM3;
 800190a:	4e5f      	ldr	r6, [pc, #380]	; (8001a88 <main+0x338>)
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800190c:	f019 fa5f 	bl	801adce <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001910:	221c      	movs	r2, #28
 8001912:	4621      	mov	r1, r4
 8001914:	a80f      	add	r0, sp, #60	; 0x3c
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001916:	9408      	str	r4, [sp, #32]
 8001918:	9409      	str	r4, [sp, #36]	; 0x24
 800191a:	940a      	str	r4, [sp, #40]	; 0x28
  TIM_OC_InitTypeDef sConfigOC = {0};
 800191c:	f019 fa57 	bl	801adce <memset>
  htim3.Instance = TIM3;
 8001920:	4b5a      	ldr	r3, [pc, #360]	; (8001a8c <main+0x33c>)
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001922:	60b4      	str	r4, [r6, #8]
  htim3.Init.Period = 4095;
 8001924:	f640 79ff 	movw	r9, #4095	; 0xfff
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001928:	4630      	mov	r0, r6
  htim3.Init.Prescaler = 1;
 800192a:	e886 0028 	stmia.w	r6, {r3, r5}
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800192e:	6134      	str	r4, [r6, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001930:	61b4      	str	r4, [r6, #24]
  htim3.Init.Period = 4095;
 8001932:	f8c6 900c 	str.w	r9, [r6, #12]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001936:	f003 fe6f 	bl	8005618 <HAL_TIM_Base_Init>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800193a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800193e:	a90b      	add	r1, sp, #44	; 0x2c
 8001940:	4630      	mov	r0, r6
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001942:	930b      	str	r3, [sp, #44]	; 0x2c
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001944:	f003 ff72 	bl	800582c <HAL_TIM_ConfigClockSource>
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001948:	4630      	mov	r0, r6
 800194a:	f003 fe7f 	bl	800564c <HAL_TIM_PWM_Init>
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800194e:	a908      	add	r1, sp, #32
 8001950:	4630      	mov	r0, r6
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001952:	9408      	str	r4, [sp, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001954:	940a      	str	r4, [sp, #40]	; 0x28
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001956:	f004 f83d 	bl	80059d4 <HAL_TIMEx_MasterConfigSynchronization>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800195a:	2360      	movs	r3, #96	; 0x60
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800195c:	4622      	mov	r2, r4
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800195e:	930f      	str	r3, [sp, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001960:	a90f      	add	r1, sp, #60	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_LOW;
 8001962:	2302      	movs	r3, #2
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001964:	4630      	mov	r0, r6
  sConfigOC.OCPolarity = TIM_OCPOLARITY_LOW;
 8001966:	9311      	str	r3, [sp, #68]	; 0x44
  sConfigOC.Pulse = 0;
 8001968:	9410      	str	r4, [sp, #64]	; 0x40
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800196a:	9413      	str	r4, [sp, #76]	; 0x4c
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800196c:	f003 fece 	bl	800570c <HAL_TIM_PWM_ConfigChannel>
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001970:	4642      	mov	r2, r8
 8001972:	a90f      	add	r1, sp, #60	; 0x3c
 8001974:	4630      	mov	r0, r6
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001976:	9411      	str	r4, [sp, #68]	; 0x44
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001978:	f003 fec8 	bl	800570c <HAL_TIM_PWM_ConfigChannel>
  HAL_TIM_MspPostInit(&htim3);
 800197c:	4630      	mov	r0, r6
 800197e:	f000 fb3d 	bl	8001ffc <HAL_TIM_MspPostInit>
  RTC_TimeTypeDef sTime = {0};
 8001982:	4621      	mov	r1, r4
 8001984:	2214      	movs	r2, #20
 8001986:	a80f      	add	r0, sp, #60	; 0x3c
 8001988:	f019 fa21 	bl	801adce <memset>
  hrtc.Instance = RTC;
 800198c:	4b40      	ldr	r3, [pc, #256]	; (8001a90 <main+0x340>)
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 800198e:	f8ca 4010 	str.w	r4, [sl, #16]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8001992:	e88a 0018 	stmia.w	sl, {r3, r4}
  hrtc.Init.SynchPrediv = 255;
 8001996:	22ff      	movs	r2, #255	; 0xff
  hrtc.Init.AsynchPrediv = 127;
 8001998:	237f      	movs	r3, #127	; 0x7f
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800199a:	4650      	mov	r0, sl
  hrtc.Init.AsynchPrediv = 127;
 800199c:	f8ca 3008 	str.w	r3, [sl, #8]
 80019a0:	9301      	str	r3, [sp, #4]
  hrtc.Init.SynchPrediv = 255;
 80019a2:	f8ca 200c 	str.w	r2, [sl, #12]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 80019a6:	f8ca 4014 	str.w	r4, [sl, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80019aa:	f8ca 4018 	str.w	r4, [sl, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80019ae:	f8ca 401c 	str.w	r4, [sl, #28]
  RTC_DateTypeDef sDate = {0};
 80019b2:	940b      	str	r4, [sp, #44]	; 0x2c
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80019b4:	f003 f826 	bl	8004a04 <HAL_RTC_Init>
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 80019b8:	462a      	mov	r2, r5
 80019ba:	a90f      	add	r1, sp, #60	; 0x3c
 80019bc:	4650      	mov	r0, sl
  sTime.Hours = 0x0;
 80019be:	f88d 403c 	strb.w	r4, [sp, #60]	; 0x3c
  sTime.Minutes = 0x0;
 80019c2:	f88d 403d 	strb.w	r4, [sp, #61]	; 0x3d
  sTime.Seconds = 0x0;
 80019c6:	f88d 403e 	strb.w	r4, [sp, #62]	; 0x3e
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80019ca:	9412      	str	r4, [sp, #72]	; 0x48
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80019cc:	9413      	str	r4, [sp, #76]	; 0x4c
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 80019ce:	f003 f86b 	bl	8004aa8 <HAL_RTC_SetTime>
  sDate.Year = 0x19;
 80019d2:	2219      	movs	r2, #25
  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 80019d4:	a90b      	add	r1, sp, #44	; 0x2c
  sDate.Year = 0x19;
 80019d6:	f88d 202f 	strb.w	r2, [sp, #47]	; 0x2f
  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 80019da:	4650      	mov	r0, sl
 80019dc:	462a      	mov	r2, r5
  ADC_ChannelConfTypeDef sConfig = {0};
 80019de:	f04f 0a18 	mov.w	sl, #24
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 80019e2:	f88d 502c 	strb.w	r5, [sp, #44]	; 0x2c
  sDate.Month = RTC_MONTH_JANUARY;
 80019e6:	f88d 502d 	strb.w	r5, [sp, #45]	; 0x2d
  sDate.Date = 0x1;
 80019ea:	f88d 502e 	strb.w	r5, [sp, #46]	; 0x2e
  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 80019ee:	f003 f8ba 	bl	8004b66 <HAL_RTC_SetDate>
  MX_FATFS_Init();
 80019f2:	f004 ff5f 	bl	80068b4 <MX_FATFS_Init>
  ADC_ChannelConfTypeDef sConfig = {0};
 80019f6:	4652      	mov	r2, sl
 80019f8:	4621      	mov	r1, r4
 80019fa:	a80f      	add	r0, sp, #60	; 0x3c
  ADC_MultiModeTypeDef multimode = {0};
 80019fc:	940b      	str	r4, [sp, #44]	; 0x2c
 80019fe:	940c      	str	r4, [sp, #48]	; 0x30
 8001a00:	940d      	str	r4, [sp, #52]	; 0x34
  ADC_ChannelConfTypeDef sConfig = {0};
 8001a02:	f019 f9e4 	bl	801adce <memset>
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV2;
 8001a06:	4923      	ldr	r1, [pc, #140]	; (8001a94 <main+0x344>)
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001a08:	f8cb 4008 	str.w	r4, [fp, #8]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV2;
 8001a0c:	f44f 2e80 	mov.w	lr, #262144	; 0x40000
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001a10:	4658      	mov	r0, fp
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV2;
 8001a12:	e88b 4002 	stmia.w	fp, {r1, lr}
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001a16:	f8cb 400c 	str.w	r4, [fp, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8001a1a:	f8cb 5010 	str.w	r5, [fp, #16]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8001a1e:	f88b 4018 	strb.w	r4, [fp, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001a22:	f88b 4019 	strb.w	r4, [fp, #25]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001a26:	f88b 4020 	strb.w	r4, [fp, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001a2a:	f8cb 4028 	str.w	r4, [fp, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001a2e:	f8cb 402c 	str.w	r4, [fp, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001a32:	f88b 4030 	strb.w	r4, [fp, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001a36:	f8cb 4034 	str.w	r4, [fp, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8001a3a:	f88b 4038 	strb.w	r4, [fp, #56]	; 0x38
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001a3e:	f8cb 8014 	str.w	r8, [fp, #20]
  hadc1.Init.NbrOfConversion = 4;
 8001a42:	f8cb 801c 	str.w	r8, [fp, #28]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001a46:	f000 fd8b 	bl	8002560 <HAL_ADC_Init>
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8001a4a:	a90b      	add	r1, sp, #44	; 0x2c
 8001a4c:	4658      	mov	r0, fp
 8001a4e:	e027      	b.n	8001aa0 <main+0x350>
 8001a50:	40021000 	.word	0x40021000
 8001a54:	2000b684 	.word	0x2000b684
 8001a58:	2000b50c 	.word	0x2000b50c
 8001a5c:	48000c00 	.word	0x48000c00
 8001a60:	48000400 	.word	0x48000400
 8001a64:	10210000 	.word	0x10210000
 8001a68:	48000800 	.word	0x48000800
 8001a6c:	40004400 	.word	0x40004400
 8001a70:	00702890 	.word	0x00702890
 8001a74:	40005400 	.word	0x40005400
 8001a78:	2000b704 	.word	0x2000b704
 8001a7c:	a0001000 	.word	0xa0001000
 8001a80:	2000b598 	.word	0x2000b598
 8001a84:	40003c00 	.word	0x40003c00
 8001a88:	2000b558 	.word	0x2000b558
 8001a8c:	40000400 	.word	0x40000400
 8001a90:	40002800 	.word	0x40002800
 8001a94:	50040000 	.word	0x50040000
 8001a98:	2000b660 	.word	0x2000b660
 8001a9c:	2000b5fc 	.word	0x2000b5fc
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8001aa0:	940b      	str	r4, [sp, #44]	; 0x2c
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8001aa2:	f001 f81b 	bl	8002adc <HAL_ADCEx_MultiModeConfigChannel>
  sConfig.Channel = ADC_CHANNEL_1;
 8001aa6:	4956      	ldr	r1, [pc, #344]	; (8001c00 <main+0x4b0>)
 8001aa8:	910f      	str	r1, [sp, #60]	; 0x3c
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001aaa:	2106      	movs	r1, #6
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001aac:	9b01      	ldr	r3, [sp, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001aae:	9110      	str	r1, [sp, #64]	; 0x40
  sConfig.SamplingTime = ADC_SAMPLETIME_247CYCLES_5;
 8001ab0:	9111      	str	r1, [sp, #68]	; 0x44
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001ab2:	4658      	mov	r0, fp
 8001ab4:	a90f      	add	r1, sp, #60	; 0x3c
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001ab6:	9312      	str	r3, [sp, #72]	; 0x48
  sConfig.Offset = 0;
 8001ab8:	9414      	str	r4, [sp, #80]	; 0x50
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001aba:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001abe:	f000 fe2f 	bl	8002720 <HAL_ADC_ConfigChannel>
  sConfig.Channel = ADC_CHANNEL_2;
 8001ac2:	4b50      	ldr	r3, [pc, #320]	; (8001c04 <main+0x4b4>)
 8001ac4:	930f      	str	r3, [sp, #60]	; 0x3c
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001ac6:	a90f      	add	r1, sp, #60	; 0x3c
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8001ac8:	230c      	movs	r3, #12
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001aca:	4658      	mov	r0, fp
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8001acc:	9310      	str	r3, [sp, #64]	; 0x40
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001ace:	f000 fe27 	bl	8002720 <HAL_ADC_ConfigChannel>
  sConfig.Channel = ADC_CHANNEL_3;
 8001ad2:	4b4d      	ldr	r3, [pc, #308]	; (8001c08 <main+0x4b8>)
 8001ad4:	930f      	str	r3, [sp, #60]	; 0x3c
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001ad6:	a90f      	add	r1, sp, #60	; 0x3c
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8001ad8:	2312      	movs	r3, #18
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001ada:	4658      	mov	r0, fp
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8001adc:	9310      	str	r3, [sp, #64]	; 0x40
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001ade:	f000 fe1f 	bl	8002720 <HAL_ADC_ConfigChannel>
  sConfig.Channel = ADC_CHANNEL_4;
 8001ae2:	4b4a      	ldr	r3, [pc, #296]	; (8001c0c <main+0x4bc>)
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8001ae4:	f8cd a040 	str.w	sl, [sp, #64]	; 0x40
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001ae8:	a90f      	add	r1, sp, #60	; 0x3c
  hdac1.Instance = DAC1;
 8001aea:	f8df a150 	ldr.w	sl, [pc, #336]	; 8001c3c <main+0x4ec>
  sConfig.Channel = ADC_CHANNEL_4;
 8001aee:	930f      	str	r3, [sp, #60]	; 0x3c
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001af0:	4658      	mov	r0, fp
 8001af2:	f000 fe15 	bl	8002720 <HAL_ADC_ConfigChannel>
  DAC_ChannelConfTypeDef sConfig = {0};
 8001af6:	4621      	mov	r1, r4
 8001af8:	2224      	movs	r2, #36	; 0x24
 8001afa:	a80f      	add	r0, sp, #60	; 0x3c
 8001afc:	f019 f967 	bl	801adce <memset>
  hdac1.Instance = DAC1;
 8001b00:	4b43      	ldr	r3, [pc, #268]	; (8001c10 <main+0x4c0>)
 8001b02:	f8ca 3000 	str.w	r3, [sl]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8001b06:	4650      	mov	r0, sl
 8001b08:	f001 f8b4 	bl	8002c74 <HAL_DAC_Init>
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8001b0c:	4622      	mov	r2, r4
 8001b0e:	a90f      	add	r1, sp, #60	; 0x3c
 8001b10:	4650      	mov	r0, sl
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8001b12:	940f      	str	r4, [sp, #60]	; 0x3c
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8001b14:	9410      	str	r4, [sp, #64]	; 0x40
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8001b16:	9411      	str	r4, [sp, #68]	; 0x44
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 8001b18:	9412      	str	r4, [sp, #72]	; 0x48
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8001b1a:	9413      	str	r4, [sp, #76]	; 0x4c
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8001b1c:	f001 f8f0 	bl	8002d00 <HAL_DAC_ConfigChannel>
  MX_USB_DEVICE_Init();
 8001b20:	f00d f8c8 	bl	800ecb4 <MX_USB_DEVICE_Init>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8001b24:	4621      	mov	r1, r4
 8001b26:	4630      	mov	r0, r6
 8001b28:	f003 ff22 	bl	8005970 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 8001b2c:	4641      	mov	r1, r8
 8001b2e:	4630      	mov	r0, r6
 8001b30:	f003 ff1e 	bl	8005970 <HAL_TIM_PWM_Start>
  __HAL_TIM_SetCompare(&htim3, TIM_CHANNEL_1, 4095);			// PWM_CH1 = 4095 100% brilho
 8001b34:	6833      	ldr	r3, [r6, #0]
 8001b36:	f8c3 9034 	str.w	r9, [r3, #52]	; 0x34
  __HAL_TIM_SetCompare(&htim3, TIM_CHANNEL_2, 4095);		    // PWM_CH2 = 4095
 8001b3a:	f8c3 9038 	str.w	r9, [r3, #56]	; 0x38
  ST7735_Init();
 8001b3e:	f7ff fa19 	bl	8000f74 <ST7735_Init>
  ST7735_Clear(0x0000);
 8001b42:	4620      	mov	r0, r4
 8001b44:	f7ff fadc 	bl	8001100 <ST7735_Clear>
  tft_backlight(100);
 8001b48:	2064      	movs	r0, #100	; 0x64
 8001b4a:	f000 f8eb 	bl	8001d24 <tft_backlight>
  Evt_InitQueue();
 8001b4e:	f7ff fcbd 	bl	80014cc <Evt_InitQueue>
  KeyboardInit(0x01);
 8001b52:	4628      	mov	r0, r5
 8001b54:	f7ff fb8c 	bl	8001270 <KeyboardInit>
  W25qxx_Init();
 8001b58:	f000 fbd4 	bl	8002304 <W25qxx_Init>
  temperatura = (float)(2000 *(3.30/4095.0));
 8001b5c:	4b2d      	ldr	r3, [pc, #180]	; (8001c14 <main+0x4c4>)
 8001b5e:	4a2e      	ldr	r2, [pc, #184]	; (8001c18 <main+0x4c8>)
  sprintf(buffer, "Temperatura: %0.1f°C\n", temperatura);
 8001b60:	492e      	ldr	r1, [pc, #184]	; (8001c1c <main+0x4cc>)
  temperatura = (float)(2000 *(3.30/4095.0));
 8001b62:	601a      	str	r2, [r3, #0]
  sprintf(buffer, "Temperatura: %0.1f°C\n", temperatura);
 8001b64:	482e      	ldr	r0, [pc, #184]	; (8001c20 <main+0x4d0>)
  lv_disp_buf_init(&disp_buf, buf, buf2, LV_HOR_RES_MAX * 10);    //Initialize the display buffer
 8001b66:	4c2f      	ldr	r4, [pc, #188]	; (8001c24 <main+0x4d4>)
	  if(TelaAtiva != TelaPrincipal &&  ( (HAL_GetTick() - timer_gui) > 60000) ) {
 8001b68:	4d2f      	ldr	r5, [pc, #188]	; (8001c28 <main+0x4d8>)
  sprintf(buffer, "Temperatura: %0.1f°C\n", temperatura);
 8001b6a:	a323      	add	r3, pc, #140	; (adr r3, 8001bf8 <main+0x4a8>)
 8001b6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b70:	f019 f952 	bl	801ae18 <sprintf>
  HAL_UART_Transmit(&huart2, (uint8_t*)buffer, strlen(buffer), HAL_MAX_DELAY); // send message via UART
 8001b74:	482a      	ldr	r0, [pc, #168]	; (8001c20 <main+0x4d0>)
 8001b76:	f7fe fb2b 	bl	80001d0 <strlen>
 8001b7a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001b7e:	b282      	uxth	r2, r0
 8001b80:	4927      	ldr	r1, [pc, #156]	; (8001c20 <main+0x4d0>)
 8001b82:	4638      	mov	r0, r7
 8001b84:	f004 f971 	bl	8005e6a <HAL_UART_Transmit>
  lv_disp_buf_init(&disp_buf, buf, buf2, LV_HOR_RES_MAX * 10);    //Initialize the display buffer
 8001b88:	4a28      	ldr	r2, [pc, #160]	; (8001c2c <main+0x4dc>)
 8001b8a:	4929      	ldr	r1, [pc, #164]	; (8001c30 <main+0x4e0>)
 8001b8c:	f44f 63c8 	mov.w	r3, #1600	; 0x640
 8001b90:	4620      	mov	r0, r4
 8001b92:	f013 f950 	bl	8014e36 <lv_disp_buf_init>
  lv_init();
 8001b96:	f00d fd09 	bl	800f5ac <lv_init>
  lv_disp_drv_init(&disp_drv);          //Basic initialization
 8001b9a:	a80f      	add	r0, sp, #60	; 0x3c
 8001b9c:	f013 f92e 	bl	8014dfc <lv_disp_drv_init>
  disp_drv.hor_res = 160;               //Set the horizontal resolution
 8001ba0:	23a0      	movs	r3, #160	; 0xa0
 8001ba2:	f8ad 303c 	strh.w	r3, [sp, #60]	; 0x3c
  disp_drv.ver_res = 128;               //Set the vertical resolution
 8001ba6:	2380      	movs	r3, #128	; 0x80
 8001ba8:	f8ad 303e 	strh.w	r3, [sp, #62]	; 0x3e
  lv_disp_drv_register(&disp_drv);      //Finally register the driver
 8001bac:	a80f      	add	r0, sp, #60	; 0x3c
  disp_drv.flush_cb = ST7735_Flush_3;	//Set your driver function
 8001bae:	4b21      	ldr	r3, [pc, #132]	; (8001c34 <main+0x4e4>)
 8001bb0:	9312      	str	r3, [sp, #72]	; 0x48
  disp_drv.buffer = &disp_buf;          //Assign the buffer to teh display
 8001bb2:	9410      	str	r4, [sp, #64]	; 0x40
  lv_disp_drv_register(&disp_drv);      //Finally register the driver
 8001bb4:	f013 f94e 	bl	8014e54 <lv_disp_drv_register>
  main_screen();
 8001bb8:	f006 fb78 	bl	80082ac <main_screen>
	  if(HAL_GetTick() - timer_loop >= 500) {
 8001bbc:	4c1e      	ldr	r4, [pc, #120]	; (8001c38 <main+0x4e8>)
 8001bbe:	f000 fc9b 	bl	80024f8 <HAL_GetTick>
 8001bc2:	6823      	ldr	r3, [r4, #0]
 8001bc4:	1ac0      	subs	r0, r0, r3
 8001bc6:	f5b0 7ffa 	cmp.w	r0, #500	; 0x1f4
 8001bca:	d307      	bcc.n	8001bdc <main+0x48c>
		  timer_loop = HAL_GetTick();
 8001bcc:	f000 fc94 	bl	80024f8 <HAL_GetTick>
		  HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8001bd0:	2120      	movs	r1, #32
		  timer_loop = HAL_GetTick();
 8001bd2:	6020      	str	r0, [r4, #0]
		  HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8001bd4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001bd8:	f001 fa03 	bl	8002fe2 <HAL_GPIO_TogglePin>
	  ButtonEvent();
 8001bdc:	f7ff fc80 	bl	80014e0 <ButtonEvent>
	  Read_Encoder();
 8001be0:	f000 f854 	bl	8001c8c <Read_Encoder>
	  lv_task_handler();
 8001be4:	f013 fee0 	bl	80159a8 <lv_task_handler>
	  if(TelaAtiva != TelaPrincipal &&  ( (HAL_GetTick() - timer_gui) > 60000) ) {
 8001be8:	682b      	ldr	r3, [r5, #0]
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d0e7      	beq.n	8001bbe <main+0x46e>
 8001bee:	f000 fc83 	bl	80024f8 <HAL_GetTick>
 8001bf2:	e7e4      	b.n	8001bbe <main+0x46e>
 8001bf4:	f3af 8000 	nop.w
 8001bf8:	a0000000 	.word	0xa0000000
 8001bfc:	3ff9c99c 	.word	0x3ff9c99c
 8001c00:	04300002 	.word	0x04300002
 8001c04:	08600004 	.word	0x08600004
 8001c08:	0c900008 	.word	0x0c900008
 8001c0c:	10c00010 	.word	0x10c00010
 8001c10:	40007400 	.word	0x40007400
 8001c14:	20000020 	.word	0x20000020
 8001c18:	3fce4ce5 	.word	0x3fce4ce5
 8001c1c:	0801d90b 	.word	0x0801d90b
 8001c20:	20004d48 	.word	0x20004d48
 8001c24:	20004e10 	.word	0x20004e10
 8001c28:	20003444 	.word	0x20003444
 8001c2c:	200040c8 	.word	0x200040c8
 8001c30:	20003448 	.word	0x20003448
 8001c34:	08001171 	.word	0x08001171
 8001c38:	20004e4c 	.word	0x20004e4c
 8001c3c:	2000b4f8 	.word	0x2000b4f8

08001c40 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001c40:	b538      	push	{r3, r4, r5, lr}
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8001c42:	4c0f      	ldr	r4, [pc, #60]	; (8001c80 <HAL_TIM_PeriodElapsedCallback+0x40>)
 8001c44:	6803      	ldr	r3, [r0, #0]
 8001c46:	42a3      	cmp	r3, r4
{
 8001c48:	4605      	mov	r5, r0
  if (htim->Instance == TIM6) {
 8001c4a:	d101      	bne.n	8001c50 <HAL_TIM_PeriodElapsedCallback+0x10>
    HAL_IncTick();
 8001c4c:	f000 fc48 	bl	80024e0 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */
  if (htim->Instance == TIM6) {
 8001c50:	682b      	ldr	r3, [r5, #0]
 8001c52:	42a3      	cmp	r3, r4
 8001c54:	d102      	bne.n	8001c5c <HAL_TIM_PeriodElapsedCallback+0x1c>
	  lv_tick_inc(1);
 8001c56:	2001      	movs	r0, #1
 8001c58:	f013 f9c0 	bl	8014fdc <lv_tick_inc>
  }
  if (htim->Instance == TIM6) {
 8001c5c:	682b      	ldr	r3, [r5, #0]
 8001c5e:	42a3      	cmp	r3, r4
 8001c60:	d10c      	bne.n	8001c7c <HAL_TIM_PeriodElapsedCallback+0x3c>
 	  timer_key++;
 8001c62:	4a08      	ldr	r2, [pc, #32]	; (8001c84 <HAL_TIM_PeriodElapsedCallback+0x44>)
 8001c64:	6813      	ldr	r3, [r2, #0]
 8001c66:	3301      	adds	r3, #1
 	  if(timer_key >= 40) {
 8001c68:	2b27      	cmp	r3, #39	; 0x27
 8001c6a:	d801      	bhi.n	8001c70 <HAL_TIM_PeriodElapsedCallback+0x30>
 	  timer_key++;
 8001c6c:	6013      	str	r3, [r2, #0]
 8001c6e:	bd38      	pop	{r3, r4, r5, pc}
 		  timer_key = 0;
 8001c70:	2300      	movs	r3, #0
 8001c72:	6013      	str	r3, [r2, #0]
 		  Key_Read();
 	  }
   }
  /* USER CODE END Callback 1 */
}
 8001c74:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 		  Key_Read();
 8001c78:	f7ff bc00 	b.w	800147c <Key_Read>
 8001c7c:	bd38      	pop	{r3, r4, r5, pc}
 8001c7e:	bf00      	nop
 8001c80:	40001000 	.word	0x40001000
 8001c84:	20004e48 	.word	0x20004e48

08001c88 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001c88:	4770      	bx	lr
	...

08001c8c <Read_Encoder>:

uint8_t aVal = 0, bVal = 0, CLKLast = 0, bCW = 0, CCW = 0, CLKLast1 = 0;
uint32_t encoderPosCount = 0;

uint16_t Read_Encoder(void)
{
 8001c8c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	/* BEGIN � Code for encoder */
	aVal = HAL_GPIO_ReadPin(ENC_B_GPIO_Port, ENC_B_Pin);
 8001c8e:	2110      	movs	r1, #16
 8001c90:	481c      	ldr	r0, [pc, #112]	; (8001d04 <Read_Encoder+0x78>)
	if (aVal != CLKLast)
 8001c92:	4e1d      	ldr	r6, [pc, #116]	; (8001d08 <Read_Encoder+0x7c>)
	aVal = HAL_GPIO_ReadPin(ENC_B_GPIO_Port, ENC_B_Pin);
 8001c94:	4d1d      	ldr	r5, [pc, #116]	; (8001d0c <Read_Encoder+0x80>)
 8001c96:	f001 f999 	bl	8002fcc <HAL_GPIO_ReadPin>
	if (aVal != CLKLast)
 8001c9a:	7833      	ldrb	r3, [r6, #0]
	aVal = HAL_GPIO_ReadPin(ENC_B_GPIO_Port, ENC_B_Pin);
 8001c9c:	7028      	strb	r0, [r5, #0]
	if (aVal != CLKLast)
 8001c9e:	4283      	cmp	r3, r0
 8001ca0:	d026      	beq.n	8001cf0 <Read_Encoder+0x64>
	{ // Means the knob is rotating
	  // if the knob is rotating, we need to determine direction
	  // We do that by reading pin B.
//		if(!aVal)
//		{ // aVal is false or 0 then proceed. This prevents double incrementation.
			if (HAL_GPIO_ReadPin(ENC_A_GPIO_Port, ENC_A_Pin) != aVal)
 8001ca2:	2104      	movs	r1, #4
 8001ca4:	4817      	ldr	r0, [pc, #92]	; (8001d04 <Read_Encoder+0x78>)
 8001ca6:	4c1a      	ldr	r4, [pc, #104]	; (8001d10 <Read_Encoder+0x84>)
 8001ca8:	f001 f990 	bl	8002fcc <HAL_GPIO_ReadPin>
 8001cac:	782f      	ldrb	r7, [r5, #0]
 8001cae:	4a19      	ldr	r2, [pc, #100]	; (8001d14 <Read_Encoder+0x88>)
			{ // Means pin A Changed first � We�re Rotating Clockwise
				encoderPosCount++;
 8001cb0:	6823      	ldr	r3, [r4, #0]
			if (HAL_GPIO_ReadPin(ENC_A_GPIO_Port, ENC_A_Pin) != aVal)
 8001cb2:	42b8      	cmp	r0, r7
 8001cb4:	d020      	beq.n	8001cf8 <Read_Encoder+0x6c>
				encoderPosCount++;
 8001cb6:	3301      	adds	r3, #1
				if(encoderPosCount >= 100) encoderPosCount = 100;
 8001cb8:	2b63      	cmp	r3, #99	; 0x63
 8001cba:	bf88      	it	hi
 8001cbc:	2364      	movhi	r3, #100	; 0x64
 8001cbe:	6023      	str	r3, [r4, #0]
				bCW = true;
 8001cc0:	2301      	movs	r3, #1
			}
			else {// Otherwise B changed first and we�re moving CCW
				if(encoderPosCount >= 1) encoderPosCount--;
				bCW = false;
			}
			sprintf(buffer, "Encoder - aVal: %d DT: %d, EncoderPosition: %ld\n", aVal, HAL_GPIO_ReadPin(ENC_A_GPIO_Port, ENC_A_Pin), encoderPosCount);
 8001cc2:	2104      	movs	r1, #4
 8001cc4:	480f      	ldr	r0, [pc, #60]	; (8001d04 <Read_Encoder+0x78>)
				bCW = false;
 8001cc6:	7013      	strb	r3, [r2, #0]
			sprintf(buffer, "Encoder - aVal: %d DT: %d, EncoderPosition: %ld\n", aVal, HAL_GPIO_ReadPin(ENC_A_GPIO_Port, ENC_A_Pin), encoderPosCount);
 8001cc8:	f001 f980 	bl	8002fcc <HAL_GPIO_ReadPin>
 8001ccc:	6823      	ldr	r3, [r4, #0]
 8001cce:	4912      	ldr	r1, [pc, #72]	; (8001d18 <Read_Encoder+0x8c>)
 8001cd0:	9300      	str	r3, [sp, #0]
 8001cd2:	463a      	mov	r2, r7
 8001cd4:	4603      	mov	r3, r0
 8001cd6:	4811      	ldr	r0, [pc, #68]	; (8001d1c <Read_Encoder+0x90>)
 8001cd8:	f019 f89e 	bl	801ae18 <sprintf>
			HAL_UART_Transmit(&huart2, (uint8_t*)buffer, strlen(buffer), HAL_MAX_DELAY);
 8001cdc:	480f      	ldr	r0, [pc, #60]	; (8001d1c <Read_Encoder+0x90>)
 8001cde:	f7fe fa77 	bl	80001d0 <strlen>
 8001ce2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001ce6:	b282      	uxth	r2, r0
 8001ce8:	490c      	ldr	r1, [pc, #48]	; (8001d1c <Read_Encoder+0x90>)
 8001cea:	480d      	ldr	r0, [pc, #52]	; (8001d20 <Read_Encoder+0x94>)
 8001cec:	f004 f8bd 	bl	8005e6a <HAL_UART_Transmit>
//		}
	}
	CLKLast = aVal;
 8001cf0:	7828      	ldrb	r0, [r5, #0]
 8001cf2:	7030      	strb	r0, [r6, #0]
	return aVal;
}
 8001cf4:	b003      	add	sp, #12
 8001cf6:	bdf0      	pop	{r4, r5, r6, r7, pc}
				if(encoderPosCount >= 1) encoderPosCount--;
 8001cf8:	b10b      	cbz	r3, 8001cfe <Read_Encoder+0x72>
 8001cfa:	3b01      	subs	r3, #1
 8001cfc:	6023      	str	r3, [r4, #0]
				bCW = false;
 8001cfe:	2300      	movs	r3, #0
 8001d00:	e7df      	b.n	8001cc2 <Read_Encoder+0x36>
 8001d02:	bf00      	nop
 8001d04:	48000400 	.word	0x48000400
 8001d08:	20004e50 	.word	0x20004e50
 8001d0c:	20004e51 	.word	0x20004e51
 8001d10:	20004e54 	.word	0x20004e54
 8001d14:	20004e52 	.word	0x20004e52
 8001d18:	0801d922 	.word	0x0801d922
 8001d1c:	20004d48 	.word	0x20004d48
 8001d20:	2000b684 	.word	0x2000b684

08001d24 <tft_backlight>:
	}
}

void tft_backlight(uint16_t value)
{
	if(value >= 0 && value <= 100) {
 8001d24:	2864      	cmp	r0, #100	; 0x64
 8001d26:	d80b      	bhi.n	8001d40 <tft_backlight+0x1c>
		tft_pwm = value * 40;
 8001d28:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8001d2c:	00c1      	lsls	r1, r0, #3
 8001d2e:	4b05      	ldr	r3, [pc, #20]	; (8001d44 <tft_backlight+0x20>)
		__HAL_TIM_SetCompare(&htim3, TIM_CHANNEL_1, tft_pwm);		// PWM_CH1 = TFT
		//__HAL_TIM_SetCompare(&htim3, TIM_CHANNEL_2, tft_pwm);		// PWM_CH2 = TFT
		logI("I - TFT_PWM: %ld\n\r", tft_pwm);
 8001d30:	4805      	ldr	r0, [pc, #20]	; (8001d48 <tft_backlight+0x24>)
		tft_pwm = value * 40;
 8001d32:	b289      	uxth	r1, r1
 8001d34:	8019      	strh	r1, [r3, #0]
		__HAL_TIM_SetCompare(&htim3, TIM_CHANNEL_1, tft_pwm);		// PWM_CH1 = TFT
 8001d36:	4b05      	ldr	r3, [pc, #20]	; (8001d4c <tft_backlight+0x28>)
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	6359      	str	r1, [r3, #52]	; 0x34
		logI("I - TFT_PWM: %ld\n\r", tft_pwm);
 8001d3c:	f7ff bc96 	b.w	800166c <logI>
 8001d40:	4770      	bx	lr
 8001d42:	bf00      	nop
 8001d44:	20004e42 	.word	0x20004e42
 8001d48:	0801d953 	.word	0x0801d953
 8001d4c:	2000b558 	.word	0x2000b558

08001d50 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d50:	4b0a      	ldr	r3, [pc, #40]	; (8001d7c <HAL_MspInit+0x2c>)
 8001d52:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001d54:	f042 0201 	orr.w	r2, r2, #1
 8001d58:	661a      	str	r2, [r3, #96]	; 0x60
 8001d5a:	6e1a      	ldr	r2, [r3, #96]	; 0x60
{
 8001d5c:	b082      	sub	sp, #8
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d5e:	f002 0201 	and.w	r2, r2, #1
 8001d62:	9200      	str	r2, [sp, #0]
 8001d64:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001d66:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001d68:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001d6c:	659a      	str	r2, [r3, #88]	; 0x58
 8001d6e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d70:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d74:	9301      	str	r3, [sp, #4]
 8001d76:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001d78:	b002      	add	sp, #8
 8001d7a:	4770      	bx	lr
 8001d7c:	40021000 	.word	0x40021000

08001d80 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001d80:	b510      	push	{r4, lr}
 8001d82:	4604      	mov	r4, r0
 8001d84:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d86:	2214      	movs	r2, #20
 8001d88:	2100      	movs	r1, #0
 8001d8a:	a803      	add	r0, sp, #12
 8001d8c:	f019 f81f 	bl	801adce <memset>
  if(hadc->Instance==ADC1)
 8001d90:	6822      	ldr	r2, [r4, #0]
 8001d92:	4b11      	ldr	r3, [pc, #68]	; (8001dd8 <HAL_ADC_MspInit+0x58>)
 8001d94:	429a      	cmp	r2, r3
 8001d96:	d11d      	bne.n	8001dd4 <HAL_ADC_MspInit+0x54>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8001d98:	f103 4370 	add.w	r3, r3, #4026531840	; 0xf0000000
 8001d9c:	f5a3 33f8 	sub.w	r3, r3, #126976	; 0x1f000
    PC3     ------> ADC1_IN4 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001da0:	a903      	add	r1, sp, #12
    __HAL_RCC_ADC_CLK_ENABLE();
 8001da2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001da4:	480d      	ldr	r0, [pc, #52]	; (8001ddc <HAL_ADC_MspInit+0x5c>)
    __HAL_RCC_ADC_CLK_ENABLE();
 8001da6:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001daa:	64da      	str	r2, [r3, #76]	; 0x4c
 8001dac:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001dae:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8001db2:	9201      	str	r2, [sp, #4]
 8001db4:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001db6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001db8:	f042 0204 	orr.w	r2, r2, #4
 8001dbc:	64da      	str	r2, [r3, #76]	; 0x4c
 8001dbe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001dc0:	f003 0304 	and.w	r3, r3, #4
 8001dc4:	9302      	str	r3, [sp, #8]
 8001dc6:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8001dc8:	230f      	movs	r3, #15
 8001dca:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8001dcc:	230b      	movs	r3, #11
 8001dce:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001dd0:	f001 f820 	bl	8002e14 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001dd4:	b008      	add	sp, #32
 8001dd6:	bd10      	pop	{r4, pc}
 8001dd8:	50040000 	.word	0x50040000
 8001ddc:	48000800 	.word	0x48000800

08001de0 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8001de0:	b510      	push	{r4, lr}
 8001de2:	4604      	mov	r4, r0
 8001de4:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001de6:	2214      	movs	r2, #20
 8001de8:	2100      	movs	r1, #0
 8001dea:	a803      	add	r0, sp, #12
 8001dec:	f018 ffef 	bl	801adce <memset>
  if(hdac->Instance==DAC1)
 8001df0:	6822      	ldr	r2, [r4, #0]
 8001df2:	4b15      	ldr	r3, [pc, #84]	; (8001e48 <HAL_DAC_MspInit+0x68>)
 8001df4:	429a      	cmp	r2, r3
 8001df6:	d124      	bne.n	8001e42 <HAL_DAC_MspInit+0x62>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 8001df8:	f503 33ce 	add.w	r3, r3, #105472	; 0x19c00
    PA4     ------> DAC1_OUT1 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001dfc:	a903      	add	r1, sp, #12
    __HAL_RCC_DAC1_CLK_ENABLE();
 8001dfe:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001e00:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8001e04:	659a      	str	r2, [r3, #88]	; 0x58
 8001e06:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001e08:	f002 5200 	and.w	r2, r2, #536870912	; 0x20000000
 8001e0c:	9201      	str	r2, [sp, #4]
 8001e0e:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e10:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001e12:	f042 0201 	orr.w	r2, r2, #1
 8001e16:	64da      	str	r2, [r3, #76]	; 0x4c
 8001e18:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e1a:	f003 0301 	and.w	r3, r3, #1
 8001e1e:	9302      	str	r3, [sp, #8]
 8001e20:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001e22:	2310      	movs	r3, #16
 8001e24:	9303      	str	r3, [sp, #12]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e26:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001e2a:	2303      	movs	r3, #3
 8001e2c:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e2e:	f000 fff1 	bl	8002e14 <HAL_GPIO_Init>

    /* DAC1 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8001e32:	2200      	movs	r2, #0
 8001e34:	2036      	movs	r0, #54	; 0x36
 8001e36:	4611      	mov	r1, r2
 8001e38:	f000 feda 	bl	8002bf0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001e3c:	2036      	movs	r0, #54	; 0x36
 8001e3e:	f000 ff0b 	bl	8002c58 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }

}
 8001e42:	b008      	add	sp, #32
 8001e44:	bd10      	pop	{r4, pc}
 8001e46:	bf00      	nop
 8001e48:	40007400 	.word	0x40007400

08001e4c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001e4c:	b510      	push	{r4, lr}
 8001e4e:	4604      	mov	r4, r0
 8001e50:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e52:	2214      	movs	r2, #20
 8001e54:	2100      	movs	r1, #0
 8001e56:	a803      	add	r0, sp, #12
 8001e58:	f018 ffb9 	bl	801adce <memset>
  if(hi2c->Instance==I2C1)
 8001e5c:	6822      	ldr	r2, [r4, #0]
 8001e5e:	4b13      	ldr	r3, [pc, #76]	; (8001eac <HAL_I2C_MspInit+0x60>)
 8001e60:	429a      	cmp	r2, r3
 8001e62:	d121      	bne.n	8001ea8 <HAL_I2C_MspInit+0x5c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e64:	4c12      	ldr	r4, [pc, #72]	; (8001eb0 <HAL_I2C_MspInit+0x64>)
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e66:	4813      	ldr	r0, [pc, #76]	; (8001eb4 <HAL_I2C_MspInit+0x68>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e68:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8001e6a:	f043 0302 	orr.w	r3, r3, #2
 8001e6e:	64e3      	str	r3, [r4, #76]	; 0x4c
 8001e70:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8001e72:	f003 0302 	and.w	r3, r3, #2
 8001e76:	9301      	str	r3, [sp, #4]
 8001e78:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001e7a:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001e7e:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001e80:	2312      	movs	r3, #18
 8001e82:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001e84:	2301      	movs	r3, #1
 8001e86:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e88:	2303      	movs	r3, #3
 8001e8a:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e8c:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001e8e:	2304      	movs	r3, #4
 8001e90:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e92:	f000 ffbf 	bl	8002e14 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001e96:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8001e98:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001e9c:	65a3      	str	r3, [r4, #88]	; 0x58
 8001e9e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8001ea0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001ea4:	9302      	str	r3, [sp, #8]
 8001ea6:	9b02      	ldr	r3, [sp, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001ea8:	b008      	add	sp, #32
 8001eaa:	bd10      	pop	{r4, pc}
 8001eac:	40005400 	.word	0x40005400
 8001eb0:	40021000 	.word	0x40021000
 8001eb4:	48000400 	.word	0x48000400

08001eb8 <HAL_QSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hqspi: QSPI handle pointer
* @retval None
*/
void HAL_QSPI_MspInit(QSPI_HandleTypeDef* hqspi)
{
 8001eb8:	b570      	push	{r4, r5, r6, lr}
 8001eba:	4604      	mov	r4, r0
 8001ebc:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ebe:	2214      	movs	r2, #20
 8001ec0:	2100      	movs	r1, #0
 8001ec2:	a803      	add	r0, sp, #12
 8001ec4:	f018 ff83 	bl	801adce <memset>
  if(hqspi->Instance==QUADSPI)
 8001ec8:	6822      	ldr	r2, [r4, #0]
 8001eca:	4b1e      	ldr	r3, [pc, #120]	; (8001f44 <HAL_QSPI_MspInit+0x8c>)
 8001ecc:	429a      	cmp	r2, r3
 8001ece:	d137      	bne.n	8001f40 <HAL_QSPI_MspInit+0x88>
  {
  /* USER CODE BEGIN QUADSPI_MspInit 0 */

  /* USER CODE END QUADSPI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 8001ed0:	f103 4320 	add.w	r3, r3, #2684354560	; 0xa0000000
 8001ed4:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
    PB1     ------> QUADSPI_BK1_IO0
    PB10     ------> QUADSPI_CLK
    PB11     ------> QUADSPI_NCS 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ed8:	2602      	movs	r6, #2
    __HAL_RCC_QSPI_CLK_ENABLE();
 8001eda:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001edc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001ee0:	651a      	str	r2, [r3, #80]	; 0x50
 8001ee2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001ee4:	f402 7280 	and.w	r2, r2, #256	; 0x100
 8001ee8:	9200      	str	r2, [sp, #0]
 8001eea:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001eec:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001eee:	f042 0201 	orr.w	r2, r2, #1
 8001ef2:	64da      	str	r2, [r3, #76]	; 0x4c
 8001ef4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001ef6:	f002 0201 	and.w	r2, r2, #1
 8001efa:	9201      	str	r2, [sp, #4]
 8001efc:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001efe:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001f00:	f042 0202 	orr.w	r2, r2, #2
 8001f04:	64da      	str	r2, [r3, #76]	; 0x4c
 8001f06:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f08:	9604      	str	r6, [sp, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f0a:	f003 0302 	and.w	r3, r3, #2
 8001f0e:	9302      	str	r3, [sp, #8]
 8001f10:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f12:	2503      	movs	r5, #3
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001f14:	23c0      	movs	r3, #192	; 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8001f16:	240a      	movs	r4, #10
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f18:	a903      	add	r1, sp, #12
 8001f1a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001f1e:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f20:	9506      	str	r5, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8001f22:	9407      	str	r4, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f24:	f000 ff76 	bl	8002e14 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_10|GPIO_PIN_11;
 8001f28:	f640 4303 	movw	r3, #3075	; 0xc03
 8001f2c:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f2e:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f30:	2300      	movs	r3, #0
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f32:	4805      	ldr	r0, [pc, #20]	; (8001f48 <HAL_QSPI_MspInit+0x90>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f34:	9604      	str	r6, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f36:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f38:	9506      	str	r5, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8001f3a:	9407      	str	r4, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f3c:	f000 ff6a 	bl	8002e14 <HAL_GPIO_Init>
  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }

}
 8001f40:	b008      	add	sp, #32
 8001f42:	bd70      	pop	{r4, r5, r6, pc}
 8001f44:	a0001000 	.word	0xa0001000
 8001f48:	48000400 	.word	0x48000400

08001f4c <HAL_RTC_MspInit>:
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
  if(hrtc->Instance==RTC)
 8001f4c:	6802      	ldr	r2, [r0, #0]
 8001f4e:	4b05      	ldr	r3, [pc, #20]	; (8001f64 <HAL_RTC_MspInit+0x18>)
 8001f50:	429a      	cmp	r2, r3
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8001f52:	bf01      	itttt	eq
 8001f54:	4a04      	ldreq	r2, [pc, #16]	; (8001f68 <HAL_RTC_MspInit+0x1c>)
 8001f56:	f8d2 3090 	ldreq.w	r3, [r2, #144]	; 0x90
 8001f5a:	f443 4300 	orreq.w	r3, r3, #32768	; 0x8000
 8001f5e:	f8c2 3090 	streq.w	r3, [r2, #144]	; 0x90
 8001f62:	4770      	bx	lr
 8001f64:	40002800 	.word	0x40002800
 8001f68:	40021000 	.word	0x40021000

08001f6c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001f6c:	b510      	push	{r4, lr}
 8001f6e:	4604      	mov	r4, r0
 8001f70:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f72:	2214      	movs	r2, #20
 8001f74:	2100      	movs	r1, #0
 8001f76:	a803      	add	r0, sp, #12
 8001f78:	f018 ff29 	bl	801adce <memset>
  if(hspi->Instance==SPI3)
 8001f7c:	6822      	ldr	r2, [r4, #0]
 8001f7e:	4b13      	ldr	r3, [pc, #76]	; (8001fcc <HAL_SPI_MspInit+0x60>)
 8001f80:	429a      	cmp	r2, r3
 8001f82:	d120      	bne.n	8001fc6 <HAL_SPI_MspInit+0x5a>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8001f84:	f503 33ea 	add.w	r3, r3, #119808	; 0x1d400
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001f88:	a903      	add	r1, sp, #12
    __HAL_RCC_SPI3_CLK_ENABLE();
 8001f8a:	6d9a      	ldr	r2, [r3, #88]	; 0x58
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001f8c:	4810      	ldr	r0, [pc, #64]	; (8001fd0 <HAL_SPI_MspInit+0x64>)
    __HAL_RCC_SPI3_CLK_ENABLE();
 8001f8e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001f92:	659a      	str	r2, [r3, #88]	; 0x58
 8001f94:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001f96:	f402 4200 	and.w	r2, r2, #32768	; 0x8000
 8001f9a:	9201      	str	r2, [sp, #4]
 8001f9c:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001f9e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001fa0:	f042 0204 	orr.w	r2, r2, #4
 8001fa4:	64da      	str	r2, [r3, #76]	; 0x4c
 8001fa6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001fa8:	f003 0304 	and.w	r3, r3, #4
 8001fac:	9302      	str	r3, [sp, #8]
 8001fae:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8001fb0:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8001fb4:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fb6:	2302      	movs	r3, #2
 8001fb8:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001fba:	2303      	movs	r3, #3
 8001fbc:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001fbe:	2306      	movs	r3, #6
 8001fc0:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001fc2:	f000 ff27 	bl	8002e14 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8001fc6:	b008      	add	sp, #32
 8001fc8:	bd10      	pop	{r4, pc}
 8001fca:	bf00      	nop
 8001fcc:	40003c00 	.word	0x40003c00
 8001fd0:	48000800 	.word	0x48000800

08001fd4 <HAL_TIM_Base_MspInit>:
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
  if(htim_base->Instance==TIM3)
 8001fd4:	6802      	ldr	r2, [r0, #0]
 8001fd6:	4b08      	ldr	r3, [pc, #32]	; (8001ff8 <HAL_TIM_Base_MspInit+0x24>)
 8001fd8:	429a      	cmp	r2, r3
{
 8001fda:	b082      	sub	sp, #8
  if(htim_base->Instance==TIM3)
 8001fdc:	d10a      	bne.n	8001ff4 <HAL_TIM_Base_MspInit+0x20>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001fde:	f503 3303 	add.w	r3, r3, #134144	; 0x20c00
 8001fe2:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001fe4:	f042 0202 	orr.w	r2, r2, #2
 8001fe8:	659a      	str	r2, [r3, #88]	; 0x58
 8001fea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001fec:	f003 0302 	and.w	r3, r3, #2
 8001ff0:	9301      	str	r3, [sp, #4]
 8001ff2:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001ff4:	b002      	add	sp, #8
 8001ff6:	4770      	bx	lr
 8001ff8:	40000400 	.word	0x40000400

08001ffc <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001ffc:	b510      	push	{r4, lr}
 8001ffe:	4604      	mov	r4, r0
 8002000:	b086      	sub	sp, #24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002002:	2214      	movs	r2, #20
 8002004:	2100      	movs	r1, #0
 8002006:	a801      	add	r0, sp, #4
 8002008:	f018 fee1 	bl	801adce <memset>
  if(htim->Instance==TIM3)
 800200c:	6822      	ldr	r2, [r4, #0]
 800200e:	4b0c      	ldr	r3, [pc, #48]	; (8002040 <HAL_TIM_MspPostInit+0x44>)
 8002010:	429a      	cmp	r2, r3
 8002012:	d113      	bne.n	800203c <HAL_TIM_MspPostInit+0x40>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002014:	f503 3303 	add.w	r3, r3, #134144	; 0x20c00
    GPIO_InitStruct.Pin = PWM_LED_Pin|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002018:	a901      	add	r1, sp, #4
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800201a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800201c:	4809      	ldr	r0, [pc, #36]	; (8002044 <HAL_TIM_MspPostInit+0x48>)
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800201e:	f042 0204 	orr.w	r2, r2, #4
 8002022:	64da      	str	r2, [r3, #76]	; 0x4c
 8002024:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002026:	f003 0304 	and.w	r3, r3, #4
 800202a:	9300      	str	r3, [sp, #0]
 800202c:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = PWM_LED_Pin|GPIO_PIN_7;
 800202e:	23c0      	movs	r3, #192	; 0xc0
 8002030:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002032:	2302      	movs	r3, #2
 8002034:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002036:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002038:	f000 feec 	bl	8002e14 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 800203c:	b006      	add	sp, #24
 800203e:	bd10      	pop	{r4, pc}
 8002040:	40000400 	.word	0x40000400
 8002044:	48000800 	.word	0x48000800

08002048 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002048:	b510      	push	{r4, lr}
 800204a:	4604      	mov	r4, r0
 800204c:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800204e:	2214      	movs	r2, #20
 8002050:	2100      	movs	r1, #0
 8002052:	a803      	add	r0, sp, #12
 8002054:	f018 febb 	bl	801adce <memset>
  if(huart->Instance==USART2)
 8002058:	6822      	ldr	r2, [r4, #0]
 800205a:	4b13      	ldr	r3, [pc, #76]	; (80020a8 <HAL_UART_MspInit+0x60>)
 800205c:	429a      	cmp	r2, r3
 800205e:	d120      	bne.n	80020a2 <HAL_UART_MspInit+0x5a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002060:	f503 33e6 	add.w	r3, r3, #117760	; 0x1cc00
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002064:	a903      	add	r1, sp, #12
    __HAL_RCC_USART2_CLK_ENABLE();
 8002066:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8002068:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 800206c:	659a      	str	r2, [r3, #88]	; 0x58
 800206e:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8002070:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 8002074:	9201      	str	r2, [sp, #4]
 8002076:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002078:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800207a:	f042 0201 	orr.w	r2, r2, #1
 800207e:	64da      	str	r2, [r3, #76]	; 0x4c
 8002080:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002082:	f003 0301 	and.w	r3, r3, #1
 8002086:	9302      	str	r3, [sp, #8]
 8002088:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800208a:	230c      	movs	r3, #12
 800208c:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800208e:	2302      	movs	r3, #2
 8002090:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002092:	2303      	movs	r3, #3
 8002094:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002096:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800209a:	2307      	movs	r3, #7
 800209c:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800209e:	f000 feb9 	bl	8002e14 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80020a2:	b008      	add	sp, #32
 80020a4:	bd10      	pop	{r4, pc}
 80020a6:	bf00      	nop
 80020a8:	40004400 	.word	0x40004400

080020ac <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80020ac:	b510      	push	{r4, lr}
  uint32_t              uwTimclock = 0;
  uint32_t              uwPrescalerValue = 0;
  uint32_t              pFLatency;
  
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0); 
 80020ae:	4601      	mov	r1, r0
{
 80020b0:	b088      	sub	sp, #32
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0); 
 80020b2:	2200      	movs	r2, #0
 80020b4:	2036      	movs	r0, #54	; 0x36
 80020b6:	f000 fd9b 	bl	8002bf0 <HAL_NVIC_SetPriority>
  
  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn); 
 80020ba:	2036      	movs	r0, #54	; 0x36
 80020bc:	f000 fdcc 	bl	8002c58 <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 80020c0:	4b14      	ldr	r3, [pc, #80]	; (8002114 <HAL_InitTick+0x68>)
   
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
  
  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 80020c2:	4c15      	ldr	r4, [pc, #84]	; (8002118 <HAL_InitTick+0x6c>)
  __HAL_RCC_TIM6_CLK_ENABLE();
 80020c4:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80020c6:	f042 0210 	orr.w	r2, r2, #16
 80020ca:	659a      	str	r2, [r3, #88]	; 0x58
 80020cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020ce:	f003 0310 	and.w	r3, r3, #16
 80020d2:	9302      	str	r3, [sp, #8]
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80020d4:	a901      	add	r1, sp, #4
 80020d6:	a803      	add	r0, sp, #12
  __HAL_RCC_TIM6_CLK_ENABLE();
 80020d8:	9b02      	ldr	r3, [sp, #8]
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80020da:	f002 f925 	bl	8004328 <HAL_RCC_GetClockConfig>
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 80020de:	f002 f8ff 	bl	80042e0 <HAL_RCC_GetPCLK1Freq>
  htim6.Instance = TIM6;
 80020e2:	4b0e      	ldr	r3, [pc, #56]	; (800211c <HAL_InitTick+0x70>)
 80020e4:	6023      	str	r3, [r4, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000 / 1000) - 1;
 80020e6:	f240 33e7 	movw	r3, #999	; 0x3e7
 80020ea:	60e3      	str	r3, [r4, #12]
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 80020ec:	4b0c      	ldr	r3, [pc, #48]	; (8002120 <HAL_InitTick+0x74>)
 80020ee:	fbb0 f0f3 	udiv	r0, r0, r3
 80020f2:	3801      	subs	r0, #1
  htim6.Init.Prescaler = uwPrescalerValue;
  htim6.Init.ClockDivision = 0;
 80020f4:	2300      	movs	r3, #0
  htim6.Init.Prescaler = uwPrescalerValue;
 80020f6:	6060      	str	r0, [r4, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 80020f8:	4620      	mov	r0, r4
  htim6.Init.ClockDivision = 0;
 80020fa:	6123      	str	r3, [r4, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80020fc:	60a3      	str	r3, [r4, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 80020fe:	f003 fa8b 	bl	8005618 <HAL_TIM_Base_Init>
 8002102:	b920      	cbnz	r0, 800210e <HAL_InitTick+0x62>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8002104:	4620      	mov	r0, r4
 8002106:	f003 f955 	bl	80053b4 <HAL_TIM_Base_Start_IT>
  }
  
  /* Return function status */
  return HAL_ERROR;
}
 800210a:	b008      	add	sp, #32
 800210c:	bd10      	pop	{r4, pc}
  return HAL_ERROR;
 800210e:	2001      	movs	r0, #1
 8002110:	e7fb      	b.n	800210a <HAL_InitTick+0x5e>
 8002112:	bf00      	nop
 8002114:	40021000 	.word	0x40021000
 8002118:	2000b748 	.word	0x2000b748
 800211c:	40001000 	.word	0x40001000
 8002120:	000f4240 	.word	0x000f4240

08002124 <NMI_Handler>:
 8002124:	4770      	bx	lr

08002126 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002126:	e7fe      	b.n	8002126 <HardFault_Handler>

08002128 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002128:	e7fe      	b.n	8002128 <MemManage_Handler>

0800212a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800212a:	e7fe      	b.n	800212a <BusFault_Handler>

0800212c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800212c:	e7fe      	b.n	800212c <UsageFault_Handler>

0800212e <SVC_Handler>:
 800212e:	4770      	bx	lr

08002130 <DebugMon_Handler>:
 8002130:	4770      	bx	lr

08002132 <PendSV_Handler>:
 8002132:	4770      	bx	lr

08002134 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002134:	4770      	bx	lr
	...

08002138 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8002138:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 800213a:	4804      	ldr	r0, [pc, #16]	; (800214c <TIM6_DAC_IRQHandler+0x14>)
 800213c:	f003 f955 	bl	80053ea <HAL_TIM_IRQHandler>
  HAL_DAC_IRQHandler(&hdac1);
 8002140:	4803      	ldr	r0, [pc, #12]	; (8002150 <TIM6_DAC_IRQHandler+0x18>)
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8002142:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_DAC_IRQHandler(&hdac1);
 8002146:	f000 bda9 	b.w	8002c9c <HAL_DAC_IRQHandler>
 800214a:	bf00      	nop
 800214c:	2000b748 	.word	0x2000b748
 8002150:	2000b4f8 	.word	0x2000b4f8

08002154 <OTG_FS_IRQHandler>:
void OTG_FS_IRQHandler(void)
{
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8002154:	4801      	ldr	r0, [pc, #4]	; (800215c <OTG_FS_IRQHandler+0x8>)
 8002156:	f001 b88f 	b.w	8003278 <HAL_PCD_IRQHandler>
 800215a:	bf00      	nop
 800215c:	2000c0c0 	.word	0x2000c0c0

08002160 <_sbrk>:
	}
	return len;
}

caddr_t _sbrk(int incr)
{
 8002160:	b508      	push	{r3, lr}
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8002162:	4b0a      	ldr	r3, [pc, #40]	; (800218c <_sbrk+0x2c>)
 8002164:	6819      	ldr	r1, [r3, #0]
{
 8002166:	4602      	mov	r2, r0
	if (heap_end == 0)
 8002168:	b909      	cbnz	r1, 800216e <_sbrk+0xe>
		heap_end = &end;
 800216a:	4909      	ldr	r1, [pc, #36]	; (8002190 <_sbrk+0x30>)
 800216c:	6019      	str	r1, [r3, #0]

	prev_heap_end = heap_end;
 800216e:	6818      	ldr	r0, [r3, #0]
	if (heap_end + incr > stack_ptr)
 8002170:	4669      	mov	r1, sp
 8002172:	4402      	add	r2, r0
 8002174:	428a      	cmp	r2, r1
 8002176:	d906      	bls.n	8002186 <_sbrk+0x26>
	{
//		write(1, "Heap and stack collision\n", 25);
//		abort();
		errno = ENOMEM;
 8002178:	f018 fbe6 	bl	801a948 <__errno>
 800217c:	230c      	movs	r3, #12
 800217e:	6003      	str	r3, [r0, #0]
		return (caddr_t) -1;
 8002180:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002184:	bd08      	pop	{r3, pc}
	}

	heap_end += incr;
 8002186:	601a      	str	r2, [r3, #0]

	return (caddr_t) prev_heap_end;
}
 8002188:	bd08      	pop	{r3, pc}
 800218a:	bf00      	nop
 800218c:	20004e58 	.word	0x20004e58
 8002190:	2000c850 	.word	0x2000c850

08002194 <SystemInit>:

void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002194:	490f      	ldr	r1, [pc, #60]	; (80021d4 <SystemInit+0x40>)
 8002196:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 800219a:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800219e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 80021a2:	4b0d      	ldr	r3, [pc, #52]	; (80021d8 <SystemInit+0x44>)
 80021a4:	681a      	ldr	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 80021a6:	2000      	movs	r0, #0
  RCC->CR |= RCC_CR_MSION;
 80021a8:	f042 0201 	orr.w	r2, r2, #1
 80021ac:	601a      	str	r2, [r3, #0]
  RCC->CFGR = 0x00000000U;
 80021ae:	6098      	str	r0, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 80021b0:	681a      	ldr	r2, [r3, #0]
 80021b2:	f022 52a8 	bic.w	r2, r2, #352321536	; 0x15000000
 80021b6:	f422 2210 	bic.w	r2, r2, #589824	; 0x90000
 80021ba:	601a      	str	r2, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 80021bc:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80021c0:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80021c2:	681a      	ldr	r2, [r3, #0]
 80021c4:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80021c8:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 80021ca:	6198      	str	r0, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80021cc:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80021d0:	608b      	str	r3, [r1, #8]
 80021d2:	4770      	bx	lr
 80021d4:	e000ed00 	.word	0xe000ed00
 80021d8:	40021000 	.word	0x40021000

080021dc <W25qxx_Spi>:
#define	W25qxx_Delay(delay)		HAL_Delay(delay)
#endif

//###################################################################################################################
uint8_t	W25qxx_Spi(uint8_t	Data)
{
 80021dc:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	uint8_t	ret;
	HAL_SPI_TransmitReceive(&hspi3, &Data, &ret, 1, 10);
 80021de:	230a      	movs	r3, #10
{
 80021e0:	f88d 000f 	strb.w	r0, [sp, #15]
	HAL_SPI_TransmitReceive(&hspi3, &Data, &ret, 1, 10);
 80021e4:	9300      	str	r3, [sp, #0]
 80021e6:	f10d 0217 	add.w	r2, sp, #23
 80021ea:	2301      	movs	r3, #1
 80021ec:	f10d 010f 	add.w	r1, sp, #15
 80021f0:	4803      	ldr	r0, [pc, #12]	; (8002200 <W25qxx_Spi+0x24>)
 80021f2:	f002 fe8e 	bl	8004f12 <HAL_SPI_TransmitReceive>
	//HAL_SPI_TransmitReceive(&hspi2, &Data, &ret, 1, 10);
	return ret;
}
 80021f6:	f89d 0017 	ldrb.w	r0, [sp, #23]
 80021fa:	b007      	add	sp, #28
 80021fc:	f85d fb04 	ldr.w	pc, [sp], #4
 8002200:	2000b598 	.word	0x2000b598

08002204 <W25qxx_ReadID>:

//###################################################################################################################
uint32_t W25qxx_ReadID(void)
{
 8002204:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint32_t Temp = 0, Temp0 = 0, Temp1 = 0, Temp2 = 0;
  HAL_GPIO_WritePin(_W25QXX_CS_GPIO,_W25QXX_CS_PIN,GPIO_PIN_RESET);
 8002206:	4d0f      	ldr	r5, [pc, #60]	; (8002244 <W25qxx_ReadID+0x40>)
 8002208:	2200      	movs	r2, #0
 800220a:	2104      	movs	r1, #4
 800220c:	4628      	mov	r0, r5
 800220e:	f000 fee3 	bl	8002fd8 <HAL_GPIO_WritePin>
  W25qxx_Spi(0x9F);
 8002212:	209f      	movs	r0, #159	; 0x9f
 8002214:	f7ff ffe2 	bl	80021dc <W25qxx_Spi>
  Temp0 = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8002218:	20a5      	movs	r0, #165	; 0xa5
 800221a:	f7ff ffdf 	bl	80021dc <W25qxx_Spi>
 800221e:	4607      	mov	r7, r0
  Temp1 = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8002220:	20a5      	movs	r0, #165	; 0xa5
 8002222:	f7ff ffdb 	bl	80021dc <W25qxx_Spi>
 8002226:	4604      	mov	r4, r0
  Temp2 = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8002228:	20a5      	movs	r0, #165	; 0xa5
 800222a:	f7ff ffd7 	bl	80021dc <W25qxx_Spi>
  HAL_GPIO_WritePin(_W25QXX_CS_GPIO,_W25QXX_CS_PIN,GPIO_PIN_SET);
 800222e:	2201      	movs	r2, #1
  Temp2 = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8002230:	4606      	mov	r6, r0
  HAL_GPIO_WritePin(_W25QXX_CS_GPIO,_W25QXX_CS_PIN,GPIO_PIN_SET);
 8002232:	2104      	movs	r1, #4
 8002234:	4628      	mov	r0, r5
 8002236:	f000 fecf 	bl	8002fd8 <HAL_GPIO_WritePin>
  Temp = (Temp0 << 16) | (Temp1 << 8) | Temp2;
 800223a:	0220      	lsls	r0, r4, #8
 800223c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
  return Temp;
}
 8002240:	4330      	orrs	r0, r6
 8002242:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002244:	48000c00 	.word	0x48000c00

08002248 <W25qxx_ReadUniqID>:

//###################################################################################################################
void W25qxx_ReadUniqID(void)
{
 8002248:	b538      	push	{r3, r4, r5, lr}
  HAL_GPIO_WritePin(_W25QXX_CS_GPIO,_W25QXX_CS_PIN,GPIO_PIN_RESET);
 800224a:	2200      	movs	r2, #0
 800224c:	2104      	movs	r1, #4
 800224e:	4811      	ldr	r0, [pc, #68]	; (8002294 <W25qxx_ReadUniqID+0x4c>)
  W25qxx_Spi(0x4B);
	for(uint8_t	i=0;i<4;i++)
		W25qxx_Spi(W25QXX_DUMMY_BYTE);
	for(uint8_t	i=0;i<8;i++)
		w25qxx.UniqID[i] = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8002250:	4d11      	ldr	r5, [pc, #68]	; (8002298 <W25qxx_ReadUniqID+0x50>)
  HAL_GPIO_WritePin(_W25QXX_CS_GPIO,_W25QXX_CS_PIN,GPIO_PIN_RESET);
 8002252:	f000 fec1 	bl	8002fd8 <HAL_GPIO_WritePin>
  W25qxx_Spi(0x4B);
 8002256:	204b      	movs	r0, #75	; 0x4b
 8002258:	f7ff ffc0 	bl	80021dc <W25qxx_Spi>
		W25qxx_Spi(W25QXX_DUMMY_BYTE);
 800225c:	20a5      	movs	r0, #165	; 0xa5
 800225e:	f7ff ffbd 	bl	80021dc <W25qxx_Spi>
 8002262:	20a5      	movs	r0, #165	; 0xa5
 8002264:	f7ff ffba 	bl	80021dc <W25qxx_Spi>
 8002268:	20a5      	movs	r0, #165	; 0xa5
 800226a:	f7ff ffb7 	bl	80021dc <W25qxx_Spi>
 800226e:	20a5      	movs	r0, #165	; 0xa5
 8002270:	f7ff ffb4 	bl	80021dc <W25qxx_Spi>
 8002274:	2400      	movs	r4, #0
		w25qxx.UniqID[i] = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8002276:	20a5      	movs	r0, #165	; 0xa5
 8002278:	f7ff ffb0 	bl	80021dc <W25qxx_Spi>
 800227c:	1963      	adds	r3, r4, r5
 800227e:	3401      	adds	r4, #1
	for(uint8_t	i=0;i<8;i++)
 8002280:	2c08      	cmp	r4, #8
		w25qxx.UniqID[i] = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8002282:	7058      	strb	r0, [r3, #1]
	for(uint8_t	i=0;i<8;i++)
 8002284:	d1f7      	bne.n	8002276 <W25qxx_ReadUniqID+0x2e>
  HAL_GPIO_WritePin(_W25QXX_CS_GPIO,_W25QXX_CS_PIN,GPIO_PIN_SET);
 8002286:	2201      	movs	r2, #1
 8002288:	2104      	movs	r1, #4
 800228a:	4802      	ldr	r0, [pc, #8]	; (8002294 <W25qxx_ReadUniqID+0x4c>)
}
 800228c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_GPIO_WritePin(_W25QXX_CS_GPIO,_W25QXX_CS_PIN,GPIO_PIN_SET);
 8002290:	f000 bea2 	b.w	8002fd8 <HAL_GPIO_WritePin>
 8002294:	48000c00 	.word	0x48000c00
 8002298:	2000b788 	.word	0x2000b788

0800229c <W25qxx_ReadStatusRegister>:
  W25qxx_Delay(1);
}

//###################################################################################################################
uint8_t W25qxx_ReadStatusRegister(uint8_t	SelectStatusRegister_1_2_3)
{
 800229c:	b538      	push	{r3, r4, r5, lr}
	uint8_t	status=0;

	HAL_GPIO_WritePin(_W25QXX_CS_GPIO,_W25QXX_CS_PIN,GPIO_PIN_RESET);
 800229e:	2200      	movs	r2, #0
{
 80022a0:	4604      	mov	r4, r0
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO,_W25QXX_CS_PIN,GPIO_PIN_RESET);
 80022a2:	2104      	movs	r1, #4
 80022a4:	4815      	ldr	r0, [pc, #84]	; (80022fc <W25qxx_ReadStatusRegister+0x60>)
 80022a6:	4d16      	ldr	r5, [pc, #88]	; (8002300 <W25qxx_ReadStatusRegister+0x64>)
 80022a8:	f000 fe96 	bl	8002fd8 <HAL_GPIO_WritePin>
	if(SelectStatusRegister_1_2_3==1)
 80022ac:	2c01      	cmp	r4, #1
 80022ae:	d10f      	bne.n	80022d0 <W25qxx_ReadStatusRegister+0x34>
	{
		W25qxx_Spi(0x05);
 80022b0:	2005      	movs	r0, #5
 80022b2:	f7ff ff93 	bl	80021dc <W25qxx_Spi>
		status=W25qxx_Spi(W25QXX_DUMMY_BYTE);
 80022b6:	20a5      	movs	r0, #165	; 0xa5
 80022b8:	f7ff ff90 	bl	80021dc <W25qxx_Spi>
 80022bc:	4604      	mov	r4, r0
		w25qxx.StatusRegister1 = status;
 80022be:	f885 0024 	strb.w	r0, [r5, #36]	; 0x24
	{
		W25qxx_Spi(0x15);
		status=W25qxx_Spi(W25QXX_DUMMY_BYTE);
		w25qxx.StatusRegister3 = status;
	}
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO,_W25QXX_CS_PIN,GPIO_PIN_SET);
 80022c2:	2201      	movs	r2, #1
 80022c4:	2104      	movs	r1, #4
 80022c6:	480d      	ldr	r0, [pc, #52]	; (80022fc <W25qxx_ReadStatusRegister+0x60>)
 80022c8:	f000 fe86 	bl	8002fd8 <HAL_GPIO_WritePin>

	return status;
}
 80022cc:	4620      	mov	r0, r4
 80022ce:	bd38      	pop	{r3, r4, r5, pc}
	else if(SelectStatusRegister_1_2_3==2)
 80022d0:	2c02      	cmp	r4, #2
 80022d2:	d109      	bne.n	80022e8 <W25qxx_ReadStatusRegister+0x4c>
		W25qxx_Spi(0x35);
 80022d4:	2035      	movs	r0, #53	; 0x35
 80022d6:	f7ff ff81 	bl	80021dc <W25qxx_Spi>
		status=W25qxx_Spi(W25QXX_DUMMY_BYTE);
 80022da:	20a5      	movs	r0, #165	; 0xa5
 80022dc:	f7ff ff7e 	bl	80021dc <W25qxx_Spi>
 80022e0:	4604      	mov	r4, r0
		w25qxx.StatusRegister2 = status;
 80022e2:	f885 0025 	strb.w	r0, [r5, #37]	; 0x25
 80022e6:	e7ec      	b.n	80022c2 <W25qxx_ReadStatusRegister+0x26>
		W25qxx_Spi(0x15);
 80022e8:	2015      	movs	r0, #21
 80022ea:	f7ff ff77 	bl	80021dc <W25qxx_Spi>
		status=W25qxx_Spi(W25QXX_DUMMY_BYTE);
 80022ee:	20a5      	movs	r0, #165	; 0xa5
 80022f0:	f7ff ff74 	bl	80021dc <W25qxx_Spi>
 80022f4:	4604      	mov	r4, r0
		w25qxx.StatusRegister3 = status;
 80022f6:	f885 0026 	strb.w	r0, [r5, #38]	; 0x26
 80022fa:	e7e2      	b.n	80022c2 <W25qxx_ReadStatusRegister+0x26>
 80022fc:	48000c00 	.word	0x48000c00
 8002300:	2000b788 	.word	0x2000b788

08002304 <W25qxx_Init>:
 HAL_GPIO_WritePin(_W25QXX_CS_GPIO,_W25QXX_CS_PIN,GPIO_PIN_SET);
}

//###################################################################################################################
bool	W25qxx_Init(void)
{
 8002304:	b538      	push	{r3, r4, r5, lr}
	w25qxx.Lock=1;
 8002306:	4c55      	ldr	r4, [pc, #340]	; (800245c <W25qxx_Init+0x158>)
 8002308:	2301      	movs	r3, #1
 800230a:	f884 3027 	strb.w	r3, [r4, #39]	; 0x27
	while(HAL_GetTick()<100)
 800230e:	f000 f8f3 	bl	80024f8 <HAL_GetTick>
 8002312:	2863      	cmp	r0, #99	; 0x63
 8002314:	d917      	bls.n	8002346 <W25qxx_Init+0x42>
		W25qxx_Delay(1);
	uint32_t	id;
	#if (_W25QXX_DEBUG==1)

	logI("w25qxx Init Begin...\r\n");
 8002316:	4852      	ldr	r0, [pc, #328]	; (8002460 <W25qxx_Init+0x15c>)
 8002318:	f7ff f9a8 	bl	800166c <logI>
	#endif
	id=W25qxx_ReadID();
 800231c:	f7ff ff72 	bl	8002204 <W25qxx_ReadID>
 8002320:	4605      	mov	r5, r0

	#if (_W25QXX_DEBUG==1)
	logI("w25qxx ID:0x%X\r\n",id);
 8002322:	4601      	mov	r1, r0
 8002324:	484f      	ldr	r0, [pc, #316]	; (8002464 <W25qxx_Init+0x160>)
 8002326:	f7ff f9a1 	bl	800166c <logI>
	#endif
	switch(id&0x0000FFFF)
 800232a:	b2a8      	uxth	r0, r5
 800232c:	f5a0 4080 	sub.w	r0, r0, #16384	; 0x4000
 8002330:	3811      	subs	r0, #17
 8002332:	2809      	cmp	r0, #9
 8002334:	f200 808b 	bhi.w	800244e <W25qxx_Init+0x14a>
 8002338:	e8df f000 	tbb	[pc, r0]
 800233c:	71777d83 	.word	0x71777d83
 8002340:	585f656b 	.word	0x585f656b
 8002344:	0951      	.short	0x0951
		W25qxx_Delay(1);
 8002346:	2001      	movs	r0, #1
 8002348:	f000 f8dc 	bl	8002504 <HAL_Delay>
 800234c:	e7df      	b.n	800230e <W25qxx_Init+0xa>
	{
		case 0x401A:	// 	w25q512
			w25qxx.ID=W25Q512;
 800234e:	230a      	movs	r3, #10
 8002350:	7023      	strb	r3, [r4, #0]
			w25qxx.BlockCount=1024;
			#if (_W25QXX_DEBUG==1)
			logI("w25qxx Chip: w25q512\r\n");
 8002352:	4845      	ldr	r0, [pc, #276]	; (8002468 <W25qxx_Init+0x164>)
			w25qxx.BlockCount=1024;
 8002354:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002358:	61e3      	str	r3, [r4, #28]
		break;
		case 0x4011:	//	w25q10
			w25qxx.ID=W25Q10;
			w25qxx.BlockCount=2;
			#if (_W25QXX_DEBUG==1)
			logI("w25qxx Chip: w25q10\r\n");
 800235a:	f7ff f987 	bl	800166c <logI>
				#endif
			w25qxx.Lock=0;
			return false;

	}
	w25qxx.PageSize=256;
 800235e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002362:	8163      	strh	r3, [r4, #10]
	w25qxx.SectorSize=0x1000;
 8002364:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002368:	6123      	str	r3, [r4, #16]
	w25qxx.SectorCount=w25qxx.BlockCount*16;
 800236a:	69e3      	ldr	r3, [r4, #28]
 800236c:	011a      	lsls	r2, r3, #4
	w25qxx.PageCount=(w25qxx.SectorCount*w25qxx.SectorSize)/w25qxx.PageSize;
 800236e:	041b      	lsls	r3, r3, #16
	w25qxx.SectorCount=w25qxx.BlockCount*16;
 8002370:	6162      	str	r2, [r4, #20]
	w25qxx.PageCount=(w25qxx.SectorCount*w25qxx.SectorSize)/w25qxx.PageSize;
 8002372:	0a1a      	lsrs	r2, r3, #8
 8002374:	60e2      	str	r2, [r4, #12]
	w25qxx.BlockSize=w25qxx.SectorSize*16;
	w25qxx.CapacityInKiloByte=(w25qxx.SectorCount*w25qxx.SectorSize)/1024;
 8002376:	0a9b      	lsrs	r3, r3, #10
	w25qxx.BlockSize=w25qxx.SectorSize*16;
 8002378:	f44f 3280 	mov.w	r2, #65536	; 0x10000
	w25qxx.CapacityInKiloByte=(w25qxx.SectorCount*w25qxx.SectorSize)/1024;
 800237c:	6223      	str	r3, [r4, #32]
	w25qxx.BlockSize=w25qxx.SectorSize*16;
 800237e:	61a2      	str	r2, [r4, #24]
	W25qxx_ReadUniqID();
 8002380:	f7ff ff62 	bl	8002248 <W25qxx_ReadUniqID>
	W25qxx_ReadStatusRegister(1);
 8002384:	2001      	movs	r0, #1
 8002386:	f7ff ff89 	bl	800229c <W25qxx_ReadStatusRegister>
	W25qxx_ReadStatusRegister(2);
 800238a:	2002      	movs	r0, #2
 800238c:	f7ff ff86 	bl	800229c <W25qxx_ReadStatusRegister>
	W25qxx_ReadStatusRegister(3);
 8002390:	2003      	movs	r0, #3
 8002392:	f7ff ff83 	bl	800229c <W25qxx_ReadStatusRegister>
	#if (_W25QXX_DEBUG==1)
	logI("w25qxx Page Size: %d Bytes\r\n",w25qxx.PageSize);
 8002396:	8961      	ldrh	r1, [r4, #10]
 8002398:	4834      	ldr	r0, [pc, #208]	; (800246c <W25qxx_Init+0x168>)
 800239a:	f7ff f967 	bl	800166c <logI>
	logI("w25qxx Page Count: %d\r\n",w25qxx.PageCount);
 800239e:	68e1      	ldr	r1, [r4, #12]
 80023a0:	4833      	ldr	r0, [pc, #204]	; (8002470 <W25qxx_Init+0x16c>)
 80023a2:	f7ff f963 	bl	800166c <logI>
	logI("w25qxx Sector Size: %d Bytes\r\n",w25qxx.SectorSize);
 80023a6:	6921      	ldr	r1, [r4, #16]
 80023a8:	4832      	ldr	r0, [pc, #200]	; (8002474 <W25qxx_Init+0x170>)
 80023aa:	f7ff f95f 	bl	800166c <logI>
	logI("w25qxx Sector Count: %d\r\n",w25qxx.SectorCount);
 80023ae:	6961      	ldr	r1, [r4, #20]
 80023b0:	4831      	ldr	r0, [pc, #196]	; (8002478 <W25qxx_Init+0x174>)
 80023b2:	f7ff f95b 	bl	800166c <logI>
	logI("w25qxx Block Size: %d Bytes\r\n",w25qxx.BlockSize);
 80023b6:	69a1      	ldr	r1, [r4, #24]
 80023b8:	4830      	ldr	r0, [pc, #192]	; (800247c <W25qxx_Init+0x178>)
 80023ba:	f7ff f957 	bl	800166c <logI>
	logI("w25qxx Block Count: %d\r\n",w25qxx.BlockCount);
 80023be:	69e1      	ldr	r1, [r4, #28]
 80023c0:	482f      	ldr	r0, [pc, #188]	; (8002480 <W25qxx_Init+0x17c>)
 80023c2:	f7ff f953 	bl	800166c <logI>
	logI("w25qxx Capacity: %d KiloBytes\r\n",w25qxx.CapacityInKiloByte);
 80023c6:	6a21      	ldr	r1, [r4, #32]
 80023c8:	482e      	ldr	r0, [pc, #184]	; (8002484 <W25qxx_Init+0x180>)
 80023ca:	f7ff f94f 	bl	800166c <logI>
	logI("w25qxx Init Done\r\n");
 80023ce:	482e      	ldr	r0, [pc, #184]	; (8002488 <W25qxx_Init+0x184>)
 80023d0:	f7ff f94c 	bl	800166c <logI>
	#endif
	w25qxx.Lock=0;
 80023d4:	2300      	movs	r3, #0
 80023d6:	f884 3027 	strb.w	r3, [r4, #39]	; 0x27
	return true;
 80023da:	2001      	movs	r0, #1
}
 80023dc:	bd38      	pop	{r3, r4, r5, pc}
			w25qxx.ID=W25Q256;
 80023de:	2309      	movs	r3, #9
 80023e0:	7023      	strb	r3, [r4, #0]
			w25qxx.BlockCount=512;
 80023e2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80023e6:	61e3      	str	r3, [r4, #28]
			logI("w25qxx Chip: w25q256\r\n");
 80023e8:	4828      	ldr	r0, [pc, #160]	; (800248c <W25qxx_Init+0x188>)
 80023ea:	e7b6      	b.n	800235a <W25qxx_Init+0x56>
			w25qxx.ID=W25Q128;
 80023ec:	2308      	movs	r3, #8
 80023ee:	7023      	strb	r3, [r4, #0]
			w25qxx.BlockCount=256;
 80023f0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80023f4:	61e3      	str	r3, [r4, #28]
			logI("w25qxx Chip: w25q128\r\n");
 80023f6:	4826      	ldr	r0, [pc, #152]	; (8002490 <W25qxx_Init+0x18c>)
 80023f8:	e7af      	b.n	800235a <W25qxx_Init+0x56>
			w25qxx.ID=W25Q64;
 80023fa:	2307      	movs	r3, #7
 80023fc:	7023      	strb	r3, [r4, #0]
			w25qxx.BlockCount=128;
 80023fe:	2380      	movs	r3, #128	; 0x80
 8002400:	61e3      	str	r3, [r4, #28]
			logI("w25qxx Chip: w25q64\r\n");
 8002402:	4824      	ldr	r0, [pc, #144]	; (8002494 <W25qxx_Init+0x190>)
 8002404:	e7a9      	b.n	800235a <W25qxx_Init+0x56>
			w25qxx.ID=W25Q32;
 8002406:	2306      	movs	r3, #6
 8002408:	7023      	strb	r3, [r4, #0]
			w25qxx.BlockCount=64;
 800240a:	2340      	movs	r3, #64	; 0x40
 800240c:	61e3      	str	r3, [r4, #28]
			logI("w25qxx Chip: w25q32\r\n");
 800240e:	4822      	ldr	r0, [pc, #136]	; (8002498 <W25qxx_Init+0x194>)
 8002410:	e7a3      	b.n	800235a <W25qxx_Init+0x56>
			w25qxx.ID=W25Q16;
 8002412:	2305      	movs	r3, #5
 8002414:	7023      	strb	r3, [r4, #0]
			w25qxx.BlockCount=32;
 8002416:	2320      	movs	r3, #32
 8002418:	61e3      	str	r3, [r4, #28]
			logI("w25qxx Chip: w25q16\r\n");
 800241a:	4820      	ldr	r0, [pc, #128]	; (800249c <W25qxx_Init+0x198>)
 800241c:	e79d      	b.n	800235a <W25qxx_Init+0x56>
			w25qxx.ID=W25Q80;
 800241e:	2304      	movs	r3, #4
 8002420:	7023      	strb	r3, [r4, #0]
			w25qxx.BlockCount=16;
 8002422:	2310      	movs	r3, #16
 8002424:	61e3      	str	r3, [r4, #28]
			logI("w25qxx Chip: w25q80\r\n");
 8002426:	481e      	ldr	r0, [pc, #120]	; (80024a0 <W25qxx_Init+0x19c>)
 8002428:	e797      	b.n	800235a <W25qxx_Init+0x56>
			w25qxx.ID=W25Q40;
 800242a:	2303      	movs	r3, #3
 800242c:	7023      	strb	r3, [r4, #0]
			w25qxx.BlockCount=8;
 800242e:	2308      	movs	r3, #8
 8002430:	61e3      	str	r3, [r4, #28]
			logI("w25qxx Chip: w25q40\r\n");
 8002432:	481c      	ldr	r0, [pc, #112]	; (80024a4 <W25qxx_Init+0x1a0>)
 8002434:	e791      	b.n	800235a <W25qxx_Init+0x56>
			w25qxx.ID=W25Q20;
 8002436:	2302      	movs	r3, #2
 8002438:	7023      	strb	r3, [r4, #0]
			w25qxx.BlockCount=4;
 800243a:	2304      	movs	r3, #4
 800243c:	61e3      	str	r3, [r4, #28]
			logI("w25qxx Chip: w25q20\r\n");
 800243e:	481a      	ldr	r0, [pc, #104]	; (80024a8 <W25qxx_Init+0x1a4>)
 8002440:	e78b      	b.n	800235a <W25qxx_Init+0x56>
			w25qxx.ID=W25Q10;
 8002442:	2301      	movs	r3, #1
 8002444:	7023      	strb	r3, [r4, #0]
			w25qxx.BlockCount=2;
 8002446:	2302      	movs	r3, #2
 8002448:	61e3      	str	r3, [r4, #28]
			logI("w25qxx Chip: w25q10\r\n");
 800244a:	4818      	ldr	r0, [pc, #96]	; (80024ac <W25qxx_Init+0x1a8>)
 800244c:	e785      	b.n	800235a <W25qxx_Init+0x56>
				logI("w25qxx Unknown ID\r\n");
 800244e:	4818      	ldr	r0, [pc, #96]	; (80024b0 <W25qxx_Init+0x1ac>)
 8002450:	f7ff f90c 	bl	800166c <logI>
			w25qxx.Lock=0;
 8002454:	2000      	movs	r0, #0
 8002456:	f884 0027 	strb.w	r0, [r4, #39]	; 0x27
			return false;
 800245a:	bd38      	pop	{r3, r4, r5, pc}
 800245c:	2000b788 	.word	0x2000b788
 8002460:	0801d9b0 	.word	0x0801d9b0
 8002464:	0801d9c7 	.word	0x0801d9c7
 8002468:	0801d9d8 	.word	0x0801d9d8
 800246c:	0801dacb 	.word	0x0801dacb
 8002470:	0801dae8 	.word	0x0801dae8
 8002474:	0801db00 	.word	0x0801db00
 8002478:	0801db1f 	.word	0x0801db1f
 800247c:	0801db39 	.word	0x0801db39
 8002480:	0801db57 	.word	0x0801db57
 8002484:	0801db70 	.word	0x0801db70
 8002488:	0801db90 	.word	0x0801db90
 800248c:	0801d9ef 	.word	0x0801d9ef
 8002490:	0801da06 	.word	0x0801da06
 8002494:	0801da1d 	.word	0x0801da1d
 8002498:	0801da33 	.word	0x0801da33
 800249c:	0801da49 	.word	0x0801da49
 80024a0:	0801da5f 	.word	0x0801da5f
 80024a4:	0801da75 	.word	0x0801da75
 80024a8:	0801da8b 	.word	0x0801da8b
 80024ac:	0801daa1 	.word	0x0801daa1
 80024b0:	0801dab7 	.word	0x0801dab7

080024b4 <HAL_Init>:
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80024b4:	4a09      	ldr	r2, [pc, #36]	; (80024dc <HAL_Init+0x28>)
 80024b6:	6813      	ldr	r3, [r2, #0]
 80024b8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
{
 80024bc:	b510      	push	{r4, lr}
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80024be:	2003      	movs	r0, #3
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80024c0:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80024c2:	f000 fb83 	bl	8002bcc <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80024c6:	2000      	movs	r0, #0
 80024c8:	f7ff fdf0 	bl	80020ac <HAL_InitTick>
 80024cc:	4604      	mov	r4, r0
 80024ce:	b918      	cbnz	r0, 80024d8 <HAL_Init+0x24>
    status = HAL_ERROR;
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80024d0:	f7ff fc3e 	bl	8001d50 <HAL_MspInit>
  }

  /* Return function status */
  return status;
}
 80024d4:	4620      	mov	r0, r4
 80024d6:	bd10      	pop	{r4, pc}
    status = HAL_ERROR;
 80024d8:	2401      	movs	r4, #1
 80024da:	e7fb      	b.n	80024d4 <HAL_Init+0x20>
 80024dc:	40022000 	.word	0x40022000

080024e0 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 80024e0:	4a03      	ldr	r2, [pc, #12]	; (80024f0 <HAL_IncTick+0x10>)
 80024e2:	4904      	ldr	r1, [pc, #16]	; (80024f4 <HAL_IncTick+0x14>)
 80024e4:	6813      	ldr	r3, [r2, #0]
 80024e6:	6809      	ldr	r1, [r1, #0]
 80024e8:	440b      	add	r3, r1
 80024ea:	6013      	str	r3, [r2, #0]
 80024ec:	4770      	bx	lr
 80024ee:	bf00      	nop
 80024f0:	2000b7b0 	.word	0x2000b7b0
 80024f4:	20000028 	.word	0x20000028

080024f8 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80024f8:	4b01      	ldr	r3, [pc, #4]	; (8002500 <HAL_GetTick+0x8>)
 80024fa:	6818      	ldr	r0, [r3, #0]
}
 80024fc:	4770      	bx	lr
 80024fe:	bf00      	nop
 8002500:	2000b7b0 	.word	0x2000b7b0

08002504 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002504:	b538      	push	{r3, r4, r5, lr}
 8002506:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8002508:	f7ff fff6 	bl	80024f8 <HAL_GetTick>
  uint32_t wait = Delay;

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800250c:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 800250e:	bf1c      	itt	ne
 8002510:	4b05      	ldrne	r3, [pc, #20]	; (8002528 <HAL_Delay+0x24>)
 8002512:	681b      	ldrne	r3, [r3, #0]
  uint32_t tickstart = HAL_GetTick();
 8002514:	4605      	mov	r5, r0
    wait += (uint32_t)(uwTickFreq);
 8002516:	bf18      	it	ne
 8002518:	18e4      	addne	r4, r4, r3
  }

  while((HAL_GetTick() - tickstart) < wait)
 800251a:	f7ff ffed 	bl	80024f8 <HAL_GetTick>
 800251e:	1b40      	subs	r0, r0, r5
 8002520:	4284      	cmp	r4, r0
 8002522:	d8fa      	bhi.n	800251a <HAL_Delay+0x16>
  {
  }
}
 8002524:	bd38      	pop	{r3, r4, r5, pc}
 8002526:	bf00      	nop
 8002528:	20000028 	.word	0x20000028

0800252c <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 800252c:	b530      	push	{r4, r5, lr}
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 800252e:	0dcc      	lsrs	r4, r1, #23
 8002530:	f004 0404 	and.w	r4, r4, #4
 8002534:	3014      	adds	r0, #20

  MODIFY_REG(*preg,
 8002536:	f3c1 5104 	ubfx	r1, r1, #20, #5
 800253a:	5823      	ldr	r3, [r4, r0]
 800253c:	2507      	movs	r5, #7
 800253e:	408d      	lsls	r5, r1
 8002540:	ea23 0305 	bic.w	r3, r3, r5
 8002544:	fa02 f101 	lsl.w	r1, r2, r1
 8002548:	4319      	orrs	r1, r3
 800254a:	5021      	str	r1, [r4, r0]
 800254c:	bd30      	pop	{r4, r5, pc}

0800254e <LL_ADC_IsEnabled>:
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800254e:	6880      	ldr	r0, [r0, #8]
}
 8002550:	f000 0001 	and.w	r0, r0, #1
 8002554:	4770      	bx	lr

08002556 <LL_ADC_REG_IsConversionOngoing>:
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002556:	6880      	ldr	r0, [r0, #8]
}
 8002558:	f3c0 0080 	ubfx	r0, r0, #2, #1
 800255c:	4770      	bx	lr
	...

08002560 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002560:	b537      	push	{r0, r1, r2, r4, r5, lr}
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8002562:	2300      	movs	r3, #0
 8002564:	9301      	str	r3, [sp, #4]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8002566:	4604      	mov	r4, r0
 8002568:	2800      	cmp	r0, #0
 800256a:	f000 8085 	beq.w	8002678 <HAL_ADC_Init+0x118>
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800256e:	6d45      	ldr	r5, [r0, #84]	; 0x54
 8002570:	b925      	cbnz	r5, 800257c <HAL_ADC_Init+0x1c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002572:	f7ff fc05 	bl	8001d80 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002576:	65a5      	str	r5, [r4, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002578:	f884 5050 	strb.w	r5, [r4, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 800257c:	6820      	ldr	r0, [r4, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 800257e:	6883      	ldr	r3, [r0, #8]
 8002580:	009b      	lsls	r3, r3, #2
 8002582:	d47b      	bmi.n	800267c <HAL_ADC_Init+0x11c>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002584:	6883      	ldr	r3, [r0, #8]
 8002586:	00dd      	lsls	r5, r3, #3
 8002588:	d57f      	bpl.n	800268a <HAL_ADC_Init+0x12a>
 800258a:	6883      	ldr	r3, [r0, #8]
 800258c:	00d9      	lsls	r1, r3, #3
 800258e:	f140 808a 	bpl.w	80026a6 <HAL_ADC_Init+0x146>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002592:	2100      	movs	r1, #0

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002594:	f7ff ffdf 	bl	8002556 <LL_ADC_REG_IsConversionOngoing>

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002598:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800259a:	f013 0f10 	tst.w	r3, #16
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800259e:	6d63      	ldr	r3, [r4, #84]	; 0x54
  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80025a0:	d167      	bne.n	8002672 <HAL_ADC_Init+0x112>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 80025a2:	2800      	cmp	r0, #0
 80025a4:	d165      	bne.n	8002672 <HAL_ADC_Init+0x112>
    ADC_STATE_CLR_SET(hadc->State,
 80025a6:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80025aa:	f043 0302 	orr.w	r3, r3, #2
 80025ae:	6563      	str	r3, [r4, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80025b0:	6820      	ldr	r0, [r4, #0]
 80025b2:	f7ff ffcc 	bl	800254e <LL_ADC_IsEnabled>
 80025b6:	b998      	cbnz	r0, 80025e0 <HAL_ADC_Init+0x80>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80025b8:	4852      	ldr	r0, [pc, #328]	; (8002704 <HAL_ADC_Init+0x1a4>)
 80025ba:	f7ff ffc8 	bl	800254e <LL_ADC_IsEnabled>
 80025be:	4603      	mov	r3, r0
 80025c0:	4851      	ldr	r0, [pc, #324]	; (8002708 <HAL_ADC_Init+0x1a8>)
 80025c2:	f7ff ffc4 	bl	800254e <LL_ADC_IsEnabled>
 80025c6:	4303      	orrs	r3, r0
 80025c8:	4850      	ldr	r0, [pc, #320]	; (800270c <HAL_ADC_Init+0x1ac>)
 80025ca:	f7ff ffc0 	bl	800254e <LL_ADC_IsEnabled>
 80025ce:	4303      	orrs	r3, r0
 80025d0:	d106      	bne.n	80025e0 <HAL_ADC_Init+0x80>
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80025d2:	4a4f      	ldr	r2, [pc, #316]	; (8002710 <HAL_ADC_Init+0x1b0>)
 80025d4:	6860      	ldr	r0, [r4, #4]
 80025d6:	6893      	ldr	r3, [r2, #8]
 80025d8:	f423 137c 	bic.w	r3, r3, #4128768	; 0x3f0000
 80025dc:	4303      	orrs	r3, r0
 80025de:	6093      	str	r3, [r2, #8]
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
                hadc->Init.Overrun                                                     |
                hadc->Init.DataAlign                                                   |
 80025e0:	68e0      	ldr	r0, [r4, #12]
 80025e2:	6b63      	ldr	r3, [r4, #52]	; 0x34
                hadc->Init.Resolution                                                  |
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80025e4:	f894 2020 	ldrb.w	r2, [r4, #32]
                hadc->Init.DataAlign                                                   |
 80025e8:	4303      	orrs	r3, r0
 80025ea:	68a0      	ldr	r0, [r4, #8]
 80025ec:	4303      	orrs	r3, r0
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80025ee:	7e60      	ldrb	r0, [r4, #25]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80025f0:	2a01      	cmp	r2, #1
                hadc->Init.DataAlign                                                   |
 80025f2:	ea43 3340 	orr.w	r3, r3, r0, lsl #13
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80025f6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80025fa:	bf02      	ittt	eq
 80025fc:	6a62      	ldreq	r2, [r4, #36]	; 0x24
 80025fe:	f102 32ff 	addeq.w	r2, r2, #4294967295	; 0xffffffff
 8002602:	ea43 4342 	orreq.w	r3, r3, r2, lsl #17
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002606:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8002608:	b122      	cbz	r2, 8002614 <HAL_ADC_Init+0xb4>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
                  | hadc->Init.ExternalTrigConvEdge
 800260a:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800260c:	f402 7270 	and.w	r2, r2, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 8002610:	4302      	orrs	r2, r0
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002612:	4313      	orrs	r3, r2
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8002614:	6820      	ldr	r0, [r4, #0]
 8002616:	4a3f      	ldr	r2, [pc, #252]	; (8002714 <HAL_ADC_Init+0x1b4>)
 8002618:	68c5      	ldr	r5, [r0, #12]
 800261a:	402a      	ands	r2, r5
 800261c:	4313      	orrs	r3, r2
 800261e:	60c3      	str	r3, [r0, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002620:	f7ff ff99 	bl	8002556 <LL_ADC_REG_IsConversionOngoing>
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002624:	6823      	ldr	r3, [r4, #0]
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002626:	689a      	ldr	r2, [r3, #8]
 8002628:	0712      	lsls	r2, r2, #28
 800262a:	d546      	bpl.n	80026ba <HAL_ADC_Init+0x15a>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800262c:	6922      	ldr	r2, [r4, #16]
 800262e:	2a01      	cmp	r2, #1
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002630:	bf05      	ittet	eq
 8002632:	6b18      	ldreq	r0, [r3, #48]	; 0x30
 8002634:	69e2      	ldreq	r2, [r4, #28]
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002636:	6b1a      	ldrne	r2, [r3, #48]	; 0x30
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002638:	f102 32ff 	addeq.w	r2, r2, #4294967295	; 0xffffffff
 800263c:	bf06      	itte	eq
 800263e:	f020 000f 	biceq.w	r0, r0, #15
 8002642:	4302      	orreq	r2, r0
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002644:	f022 020f 	bicne.w	r2, r2, #15
 8002648:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 800264a:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800264c:	f023 0303 	bic.w	r3, r3, #3
 8002650:	f043 0301 	orr.w	r3, r3, #1
 8002654:	6563      	str	r3, [r4, #84]	; 0x54
    tmp_hal_status = HAL_ERROR;
  }

  /* Return function status */
  return tmp_hal_status;
}
 8002656:	4608      	mov	r0, r1
 8002658:	b003      	add	sp, #12
 800265a:	bd30      	pop	{r4, r5, pc}
      wait_loop_index--;
 800265c:	9b01      	ldr	r3, [sp, #4]
 800265e:	3b01      	subs	r3, #1
 8002660:	9301      	str	r3, [sp, #4]
    while (wait_loop_index != 0UL)
 8002662:	9b01      	ldr	r3, [sp, #4]
 8002664:	2b00      	cmp	r3, #0
 8002666:	d1f9      	bne.n	800265c <HAL_ADC_Init+0xfc>
 8002668:	e78f      	b.n	800258a <HAL_ADC_Init+0x2a>
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 800266a:	691a      	ldr	r2, [r3, #16]
 800266c:	f022 0201 	bic.w	r2, r2, #1
 8002670:	e045      	b.n	80026fe <HAL_ADC_Init+0x19e>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002672:	f043 0310 	orr.w	r3, r3, #16
 8002676:	6563      	str	r3, [r4, #84]	; 0x54
    return HAL_ERROR;
 8002678:	2101      	movs	r1, #1
 800267a:	e7ec      	b.n	8002656 <HAL_ADC_Init+0xf6>
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 800267c:	6883      	ldr	r3, [r0, #8]
 800267e:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8002682:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002686:	6083      	str	r3, [r0, #8]
 8002688:	e77c      	b.n	8002584 <HAL_ADC_Init+0x24>
  MODIFY_REG(ADCx->CR,
 800268a:	6883      	ldr	r3, [r0, #8]
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 800268c:	4a22      	ldr	r2, [pc, #136]	; (8002718 <HAL_ADC_Init+0x1b8>)
 800268e:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8002692:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002696:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800269a:	6083      	str	r3, [r0, #8]
 800269c:	4b1f      	ldr	r3, [pc, #124]	; (800271c <HAL_ADC_Init+0x1bc>)
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	fbb3 f3f2 	udiv	r3, r3, r2
 80026a4:	e7dc      	b.n	8002660 <HAL_ADC_Init+0x100>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80026a6:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80026a8:	f043 0310 	orr.w	r3, r3, #16
 80026ac:	6563      	str	r3, [r4, #84]	; 0x54
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80026ae:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80026b0:	f043 0301 	orr.w	r3, r3, #1
 80026b4:	65a3      	str	r3, [r4, #88]	; 0x58
    tmp_hal_status = HAL_ERROR;
 80026b6:	2101      	movs	r1, #1
 80026b8:	e76c      	b.n	8002594 <HAL_ADC_Init+0x34>
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80026ba:	2800      	cmp	r0, #0
 80026bc:	d1b6      	bne.n	800262c <HAL_ADC_Init+0xcc>
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 80026be:	68d8      	ldr	r0, [r3, #12]
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80026c0:	f894 2030 	ldrb.w	r2, [r4, #48]	; 0x30
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80026c4:	7e25      	ldrb	r5, [r4, #24]
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80026c6:	0052      	lsls	r2, r2, #1
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 80026c8:	f420 4080 	bic.w	r0, r0, #16384	; 0x4000
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 80026cc:	ea42 3285 	orr.w	r2, r2, r5, lsl #14
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 80026d0:	f020 0002 	bic.w	r0, r0, #2
 80026d4:	4302      	orrs	r2, r0
 80026d6:	60da      	str	r2, [r3, #12]
      if (hadc->Init.OversamplingMode == ENABLE)
 80026d8:	f894 2038 	ldrb.w	r2, [r4, #56]	; 0x38
 80026dc:	2a01      	cmp	r2, #1
 80026de:	d1c4      	bne.n	800266a <HAL_ADC_Init+0x10a>
        MODIFY_REG(hadc->Instance->CFGR2,
 80026e0:	6c25      	ldr	r5, [r4, #64]	; 0x40
 80026e2:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 80026e4:	6918      	ldr	r0, [r3, #16]
 80026e6:	432a      	orrs	r2, r5
 80026e8:	6c65      	ldr	r5, [r4, #68]	; 0x44
 80026ea:	f042 0201 	orr.w	r2, r2, #1
 80026ee:	432a      	orrs	r2, r5
 80026f0:	6ca5      	ldr	r5, [r4, #72]	; 0x48
 80026f2:	f420 60ff 	bic.w	r0, r0, #2040	; 0x7f8
 80026f6:	432a      	orrs	r2, r5
 80026f8:	f020 0004 	bic.w	r0, r0, #4
 80026fc:	4302      	orrs	r2, r0
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80026fe:	611a      	str	r2, [r3, #16]
 8002700:	e794      	b.n	800262c <HAL_ADC_Init+0xcc>
 8002702:	bf00      	nop
 8002704:	50040000 	.word	0x50040000
 8002708:	50040100 	.word	0x50040100
 800270c:	50040200 	.word	0x50040200
 8002710:	50040300 	.word	0x50040300
 8002714:	fff0c007 	.word	0xfff0c007
 8002718:	00030d40 	.word	0x00030d40
 800271c:	20000024 	.word	0x20000024

08002720 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8002720:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8002722:	2300      	movs	r3, #0
 8002724:	9301      	str	r3, [sp, #4]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002726:	f890 3050 	ldrb.w	r3, [r0, #80]	; 0x50
 800272a:	2b01      	cmp	r3, #1
{
 800272c:	4605      	mov	r5, r0
 800272e:	460c      	mov	r4, r1
  __HAL_LOCK(hadc);
 8002730:	f000 8184 	beq.w	8002a3c <HAL_ADC_ConfigChannel+0x31c>
 8002734:	2301      	movs	r3, #1
 8002736:	f880 3050 	strb.w	r3, [r0, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800273a:	6800      	ldr	r0, [r0, #0]
 800273c:	f7ff ff0b 	bl	8002556 <LL_ADC_REG_IsConversionOngoing>
 8002740:	2800      	cmp	r0, #0
 8002742:	f040 8175 	bne.w	8002a30 <HAL_ADC_ConfigChannel+0x310>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 8002746:	684b      	ldr	r3, [r1, #4]
 8002748:	2b05      	cmp	r3, #5
 800274a:	d808      	bhi.n	800275e <HAL_ADC_ConfigChannel+0x3e>
    {
      switch (sConfig->Rank)
 800274c:	3b02      	subs	r3, #2
 800274e:	2b03      	cmp	r3, #3
 8002750:	d866      	bhi.n	8002820 <HAL_ADC_ConfigChannel+0x100>
 8002752:	e8df f003 	tbb	[pc, r3]
 8002756:	5e02      	.short	0x5e02
 8002758:	6260      	.short	0x6260
      {
        case 2U: sConfig->Rank = ADC_REGULAR_RANK_2; break;
 800275a:	230c      	movs	r3, #12
        case 3U: sConfig->Rank = ADC_REGULAR_RANK_3; break;
        case 4U: sConfig->Rank = ADC_REGULAR_RANK_4; break;
        case 5U: sConfig->Rank = ADC_REGULAR_RANK_5; break;
        /* case 1U */
        default: sConfig->Rank = ADC_REGULAR_RANK_1; break;
 800275c:	6063      	str	r3, [r4, #4]
      }
    }
    #endif
    
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 800275e:	6862      	ldr	r2, [r4, #4]
 8002760:	6828      	ldr	r0, [r5, #0]
  MODIFY_REG(*preg,
 8002762:	6823      	ldr	r3, [r4, #0]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8002764:	0991      	lsrs	r1, r2, #6
 8002766:	f001 010c 	and.w	r1, r1, #12
 800276a:	f100 0730 	add.w	r7, r0, #48	; 0x30
  MODIFY_REG(*preg,
 800276e:	f002 021f 	and.w	r2, r2, #31
 8002772:	59ce      	ldr	r6, [r1, r7]
 8002774:	f04f 0e1f 	mov.w	lr, #31
 8002778:	f3c3 6384 	ubfx	r3, r3, #26, #5
 800277c:	4093      	lsls	r3, r2
 800277e:	fa0e f202 	lsl.w	r2, lr, r2
 8002782:	ea26 0202 	bic.w	r2, r6, r2
 8002786:	4313      	orrs	r3, r2
 8002788:	51cb      	str	r3, [r1, r7]
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800278a:	f7ff fee4 	bl	8002556 <LL_ADC_REG_IsConversionOngoing>
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800278e:	682b      	ldr	r3, [r5, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002790:	689a      	ldr	r2, [r3, #8]
 8002792:	0711      	lsls	r1, r2, #28
 8002794:	f140 8154 	bpl.w	8002a40 <HAL_ADC_ConfigChannel+0x320>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002798:	6828      	ldr	r0, [r5, #0]
 800279a:	f7ff fed8 	bl	800254e <LL_ADC_IsEnabled>
 800279e:	2800      	cmp	r0, #0
 80027a0:	f040 80d3 	bne.w	800294a <HAL_ADC_ConfigChannel+0x22a>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 80027a4:	68e6      	ldr	r6, [r4, #12]
 80027a6:	6828      	ldr	r0, [r5, #0]
 80027a8:	6823      	ldr	r3, [r4, #0]
  MODIFY_REG(ADCx->DIFSEL,
 80027aa:	4aba      	ldr	r2, [pc, #744]	; (8002a94 <HAL_ADC_ConfigChannel+0x374>)
 80027ac:	f8d0 10b0 	ldr.w	r1, [r0, #176]	; 0xb0
 80027b0:	f006 0e18 	and.w	lr, r6, #24
 80027b4:	f3c3 0712 	ubfx	r7, r3, #0, #19
 80027b8:	fa22 f20e 	lsr.w	r2, r2, lr
 80027bc:	401a      	ands	r2, r3
 80027be:	ea21 0107 	bic.w	r1, r1, r7
 80027c2:	430a      	orrs	r2, r1
 80027c4:	f8c0 20b0 	str.w	r2, [r0, #176]	; 0xb0

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80027c8:	4ab3      	ldr	r2, [pc, #716]	; (8002a98 <HAL_ADC_ConfigChannel+0x378>)
 80027ca:	4296      	cmp	r6, r2
 80027cc:	f040 80bd 	bne.w	800294a <HAL_ADC_ConfigChannel+0x22a>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80027d0:	2f00      	cmp	r7, #0
 80027d2:	f040 808f 	bne.w	80028f4 <HAL_ADC_ConfigChannel+0x1d4>
 80027d6:	0e9e      	lsrs	r6, r3, #26
 80027d8:	3601      	adds	r6, #1
 80027da:	f006 021f 	and.w	r2, r6, #31
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80027de:	2a09      	cmp	r2, #9
 80027e0:	f04f 0101 	mov.w	r1, #1
 80027e4:	ea4f 6686 	mov.w	r6, r6, lsl #26
 80027e8:	f240 809e 	bls.w	8002928 <HAL_ADC_ConfigChannel+0x208>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80027ec:	f006 46f8 	and.w	r6, r6, #2080374784	; 0x7c000000
 80027f0:	4091      	lsls	r1, r2
 80027f2:	ea41 0206 	orr.w	r2, r1, r6
 80027f6:	2f00      	cmp	r7, #0
 80027f8:	f040 80c7 	bne.w	800298a <HAL_ADC_ConfigChannel+0x26a>
 80027fc:	0e9b      	lsrs	r3, r3, #26
 80027fe:	3301      	adds	r3, #1
 8002800:	f003 031f 	and.w	r3, r3, #31
 8002804:	eb03 0143 	add.w	r1, r3, r3, lsl #1
 8002808:	391e      	subs	r1, #30
 800280a:	0509      	lsls	r1, r1, #20
 800280c:	f041 7100 	orr.w	r1, r1, #33554432	; 0x2000000
 8002810:	e097      	b.n	8002942 <HAL_ADC_ConfigChannel+0x222>
        case 3U: sConfig->Rank = ADC_REGULAR_RANK_3; break;
 8002812:	2312      	movs	r3, #18
 8002814:	e7a2      	b.n	800275c <HAL_ADC_ConfigChannel+0x3c>
        case 4U: sConfig->Rank = ADC_REGULAR_RANK_4; break;
 8002816:	2318      	movs	r3, #24
 8002818:	e7a0      	b.n	800275c <HAL_ADC_ConfigChannel+0x3c>
        case 5U: sConfig->Rank = ADC_REGULAR_RANK_5; break;
 800281a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800281e:	e79d      	b.n	800275c <HAL_ADC_ConfigChannel+0x3c>
        default: sConfig->Rank = ADC_REGULAR_RANK_1; break;
 8002820:	2306      	movs	r3, #6
 8002822:	e79b      	b.n	800275c <HAL_ADC_ConfigChannel+0x3c>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8002824:	6e19      	ldr	r1, [r3, #96]	; 0x60
 8002826:	6e19      	ldr	r1, [r3, #96]	; 0x60
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002828:	f3c2 0612 	ubfx	r6, r2, #0, #19
 800282c:	f3c1 6184 	ubfx	r1, r1, #26, #5
 8002830:	2e00      	cmp	r6, #0
 8002832:	d13e      	bne.n	80028b2 <HAL_ADC_ConfigChannel+0x192>
 8002834:	f3c2 6284 	ubfx	r2, r2, #26, #5
 8002838:	428a      	cmp	r2, r1
  MODIFY_REG(*preg,
 800283a:	bf02      	ittt	eq
 800283c:	6e1a      	ldreq	r2, [r3, #96]	; 0x60
 800283e:	f022 4200 	biceq.w	r2, r2, #2147483648	; 0x80000000
 8002842:	661a      	streq	r2, [r3, #96]	; 0x60
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8002844:	6e5a      	ldr	r2, [r3, #100]	; 0x64
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002846:	6822      	ldr	r2, [r4, #0]
 8002848:	6e5e      	ldr	r6, [r3, #100]	; 0x64
 800284a:	f3c2 0712 	ubfx	r7, r2, #0, #19
 800284e:	f3c6 6684 	ubfx	r6, r6, #26, #5
 8002852:	f100 010c 	add.w	r1, r0, #12
 8002856:	bb8f      	cbnz	r7, 80028bc <HAL_ADC_ConfigChannel+0x19c>
 8002858:	f3c2 6784 	ubfx	r7, r2, #26, #5
 800285c:	42be      	cmp	r6, r7
 800285e:	f040 8112 	bne.w	8002a86 <HAL_ADC_ConfigChannel+0x366>
  MODIFY_REG(*preg,
 8002862:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8002864:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002868:	665a      	str	r2, [r3, #100]	; 0x64
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800286a:	6822      	ldr	r2, [r4, #0]
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 800286c:	6883      	ldr	r3, [r0, #8]
 800286e:	6883      	ldr	r3, [r0, #8]
 8002870:	f3c2 0712 	ubfx	r7, r2, #0, #19
  register const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002874:	f100 0608 	add.w	r6, r0, #8
 8002878:	f3c3 6384 	ubfx	r3, r3, #26, #5
 800287c:	bb57      	cbnz	r7, 80028d4 <HAL_ADC_ConfigChannel+0x1b4>
 800287e:	f3c2 6284 	ubfx	r2, r2, #26, #5
 8002882:	4293      	cmp	r3, r2
 8002884:	f040 811c 	bne.w	8002ac0 <HAL_ADC_ConfigChannel+0x3a0>
  MODIFY_REG(*preg,
 8002888:	6833      	ldr	r3, [r6, #0]
 800288a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800288e:	6033      	str	r3, [r6, #0]
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8002890:	68c3      	ldr	r3, [r0, #12]
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002892:	6823      	ldr	r3, [r4, #0]
 8002894:	68c2      	ldr	r2, [r0, #12]
 8002896:	f3c3 0012 	ubfx	r0, r3, #0, #19
 800289a:	f3c2 6284 	ubfx	r2, r2, #26, #5
 800289e:	bb20      	cbnz	r0, 80028ea <HAL_ADC_ConfigChannel+0x1ca>
 80028a0:	f3c3 6384 	ubfx	r3, r3, #26, #5
 80028a4:	4293      	cmp	r3, r2
  MODIFY_REG(*preg,
 80028a6:	bf02      	ittt	eq
 80028a8:	680b      	ldreq	r3, [r1, #0]
 80028aa:	f023 4300 	biceq.w	r3, r3, #2147483648	; 0x80000000
 80028ae:	600b      	streq	r3, [r1, #0]
 80028b0:	e772      	b.n	8002798 <HAL_ADC_ConfigChannel+0x78>
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028b2:	fa92 f2a2 	rbit	r2, r2
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80028b6:	fab2 f282 	clz	r2, r2
 80028ba:	e7bd      	b.n	8002838 <HAL_ADC_ConfigChannel+0x118>
 80028bc:	fa92 f7a2 	rbit	r7, r2
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80028c0:	fab7 f787 	clz	r7, r7
 80028c4:	42be      	cmp	r6, r7
 80028c6:	d0cc      	beq.n	8002862 <HAL_ADC_ConfigChannel+0x142>
  register const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80028c8:	f103 0668 	add.w	r6, r3, #104	; 0x68
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80028cc:	6e9f      	ldr	r7, [r3, #104]	; 0x68
 80028ce:	6e9b      	ldr	r3, [r3, #104]	; 0x68
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80028d0:	f3c3 6384 	ubfx	r3, r3, #26, #5
 80028d4:	fa92 f2a2 	rbit	r2, r2
 80028d8:	fab2 f282 	clz	r2, r2
 80028dc:	429a      	cmp	r2, r3
 80028de:	d0d3      	beq.n	8002888 <HAL_ADC_ConfigChannel+0x168>
 80028e0:	68c3      	ldr	r3, [r0, #12]
 80028e2:	68c2      	ldr	r2, [r0, #12]
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80028e4:	6823      	ldr	r3, [r4, #0]
 80028e6:	f3c2 6284 	ubfx	r2, r2, #26, #5
 80028ea:	fa93 f3a3 	rbit	r3, r3
 80028ee:	fab3 f383 	clz	r3, r3
 80028f2:	e7d7      	b.n	80028a4 <HAL_ADC_ConfigChannel+0x184>
 80028f4:	fa93 f2a3 	rbit	r2, r3
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80028f8:	fab2 f282 	clz	r2, r2
 80028fc:	3201      	adds	r2, #1
 80028fe:	f002 021f 	and.w	r2, r2, #31
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002902:	2a09      	cmp	r2, #9
 8002904:	d830      	bhi.n	8002968 <HAL_ADC_ConfigChannel+0x248>
 8002906:	fa93 f6a3 	rbit	r6, r3
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800290a:	fab6 f686 	clz	r6, r6
 800290e:	3601      	adds	r6, #1
 8002910:	06b6      	lsls	r6, r6, #26
 8002912:	f006 46f8 	and.w	r6, r6, #2080374784	; 0x7c000000
 8002916:	fa93 f1a3 	rbit	r1, r3
 800291a:	fab1 f181 	clz	r1, r1
 800291e:	3101      	adds	r1, #1
 8002920:	f001 021f 	and.w	r2, r1, #31
 8002924:	2101      	movs	r1, #1
 8002926:	e001      	b.n	800292c <HAL_ADC_ConfigChannel+0x20c>
 8002928:	f006 46f8 	and.w	r6, r6, #2080374784	; 0x7c000000
 800292c:	4091      	lsls	r1, r2
 800292e:	ea41 0206 	orr.w	r2, r1, r6
 8002932:	b9a7      	cbnz	r7, 800295e <HAL_ADC_ConfigChannel+0x23e>
 8002934:	0e99      	lsrs	r1, r3, #26
 8002936:	3101      	adds	r1, #1
 8002938:	f001 011f 	and.w	r1, r1, #31
 800293c:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8002940:	0509      	lsls	r1, r1, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002942:	4311      	orrs	r1, r2
 8002944:	68a2      	ldr	r2, [r4, #8]
 8002946:	f7ff fdf1 	bl	800252c <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 800294a:	6822      	ldr	r2, [r4, #0]
 800294c:	4b53      	ldr	r3, [pc, #332]	; (8002a9c <HAL_ADC_ConfigChannel+0x37c>)
 800294e:	421a      	tst	r2, r3
 8002950:	d120      	bne.n	8002994 <HAL_ADC_ConfigChannel+0x274>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002952:	2000      	movs	r0, #0

    tmp_hal_status = HAL_ERROR;
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002954:	2300      	movs	r3, #0
 8002956:	f885 3050 	strb.w	r3, [r5, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
}
 800295a:	b003      	add	sp, #12
 800295c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800295e:	fa93 f1a3 	rbit	r1, r3
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002962:	fab1 f181 	clz	r1, r1
 8002966:	e7e6      	b.n	8002936 <HAL_ADC_ConfigChannel+0x216>
 8002968:	fa93 f2a3 	rbit	r2, r3
 800296c:	fab2 f282 	clz	r2, r2
 8002970:	3201      	adds	r2, #1
 8002972:	0692      	lsls	r2, r2, #26
 8002974:	f002 46f8 	and.w	r6, r2, #2080374784	; 0x7c000000
 8002978:	fa93 f1a3 	rbit	r1, r3
 800297c:	fab1 f181 	clz	r1, r1
 8002980:	3101      	adds	r1, #1
 8002982:	f001 021f 	and.w	r2, r1, #31
 8002986:	2101      	movs	r1, #1
 8002988:	e732      	b.n	80027f0 <HAL_ADC_ConfigChannel+0xd0>
 800298a:	fa93 f3a3 	rbit	r3, r3
 800298e:	fab3 f383 	clz	r3, r3
 8002992:	e734      	b.n	80027fe <HAL_ADC_ConfigChannel+0xde>
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8002994:	4942      	ldr	r1, [pc, #264]	; (8002aa0 <HAL_ADC_ConfigChannel+0x380>)
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002996:	4b43      	ldr	r3, [pc, #268]	; (8002aa4 <HAL_ADC_ConfigChannel+0x384>)
 8002998:	6888      	ldr	r0, [r1, #8]
 800299a:	429a      	cmp	r2, r3
 800299c:	f000 76e0 	and.w	r6, r0, #29360128	; 0x1c00000
 80029a0:	460c      	mov	r4, r1
 80029a2:	d11e      	bne.n	80029e2 <HAL_ADC_ConfigChannel+0x2c2>
 80029a4:	0202      	lsls	r2, r0, #8
 80029a6:	d4d4      	bmi.n	8002952 <HAL_ADC_ConfigChannel+0x232>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80029a8:	682b      	ldr	r3, [r5, #0]
 80029aa:	4a3f      	ldr	r2, [pc, #252]	; (8002aa8 <HAL_ADC_ConfigChannel+0x388>)
 80029ac:	4293      	cmp	r3, r2
 80029ae:	d003      	beq.n	80029b8 <HAL_ADC_ConfigChannel+0x298>
 80029b0:	f502 7200 	add.w	r2, r2, #512	; 0x200
 80029b4:	4293      	cmp	r3, r2
 80029b6:	d1cc      	bne.n	8002952 <HAL_ADC_ConfigChannel+0x232>
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80029b8:	68a3      	ldr	r3, [r4, #8]
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 80029ba:	4a3c      	ldr	r2, [pc, #240]	; (8002aac <HAL_ADC_ConfigChannel+0x38c>)
 80029bc:	f023 73e0 	bic.w	r3, r3, #29360128	; 0x1c00000
 80029c0:	4333      	orrs	r3, r6
 80029c2:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80029c6:	60a3      	str	r3, [r4, #8]
 80029c8:	4b39      	ldr	r3, [pc, #228]	; (8002ab0 <HAL_ADC_ConfigChannel+0x390>)
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	fbb3 f2f2 	udiv	r2, r3, r2
 80029d0:	230c      	movs	r3, #12
 80029d2:	4353      	muls	r3, r2
            wait_loop_index--;
 80029d4:	9301      	str	r3, [sp, #4]
          while (wait_loop_index != 0UL)
 80029d6:	9b01      	ldr	r3, [sp, #4]
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d0ba      	beq.n	8002952 <HAL_ADC_ConfigChannel+0x232>
            wait_loop_index--;
 80029dc:	9b01      	ldr	r3, [sp, #4]
 80029de:	3b01      	subs	r3, #1
 80029e0:	e7f8      	b.n	80029d4 <HAL_ADC_ConfigChannel+0x2b4>
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80029e2:	4b34      	ldr	r3, [pc, #208]	; (8002ab4 <HAL_ADC_ConfigChannel+0x394>)
 80029e4:	429a      	cmp	r2, r3
 80029e6:	d111      	bne.n	8002a0c <HAL_ADC_ConfigChannel+0x2ec>
 80029e8:	01c3      	lsls	r3, r0, #7
 80029ea:	d4b2      	bmi.n	8002952 <HAL_ADC_ConfigChannel+0x232>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80029ec:	682b      	ldr	r3, [r5, #0]
 80029ee:	4a2e      	ldr	r2, [pc, #184]	; (8002aa8 <HAL_ADC_ConfigChannel+0x388>)
 80029f0:	4293      	cmp	r3, r2
 80029f2:	d003      	beq.n	80029fc <HAL_ADC_ConfigChannel+0x2dc>
 80029f4:	f502 7200 	add.w	r2, r2, #512	; 0x200
 80029f8:	4293      	cmp	r3, r2
 80029fa:	d1aa      	bne.n	8002952 <HAL_ADC_ConfigChannel+0x232>
 80029fc:	68a3      	ldr	r3, [r4, #8]
 80029fe:	f023 73e0 	bic.w	r3, r3, #29360128	; 0x1c00000
 8002a02:	4333      	orrs	r3, r6
 8002a04:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002a08:	60a3      	str	r3, [r4, #8]
 8002a0a:	e7a2      	b.n	8002952 <HAL_ADC_ConfigChannel+0x232>
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8002a0c:	4b2a      	ldr	r3, [pc, #168]	; (8002ab8 <HAL_ADC_ConfigChannel+0x398>)
 8002a0e:	429a      	cmp	r2, r3
 8002a10:	d19f      	bne.n	8002952 <HAL_ADC_ConfigChannel+0x232>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002a12:	f410 0080 	ands.w	r0, r0, #4194304	; 0x400000
 8002a16:	d19c      	bne.n	8002952 <HAL_ADC_ConfigChannel+0x232>
        if (ADC_VREFINT_INSTANCE(hadc))
 8002a18:	682a      	ldr	r2, [r5, #0]
 8002a1a:	4b23      	ldr	r3, [pc, #140]	; (8002aa8 <HAL_ADC_ConfigChannel+0x388>)
 8002a1c:	429a      	cmp	r2, r3
 8002a1e:	d198      	bne.n	8002952 <HAL_ADC_ConfigChannel+0x232>
 8002a20:	688b      	ldr	r3, [r1, #8]
 8002a22:	f023 73e0 	bic.w	r3, r3, #29360128	; 0x1c00000
 8002a26:	4333      	orrs	r3, r6
 8002a28:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002a2c:	608b      	str	r3, [r1, #8]
 8002a2e:	e791      	b.n	8002954 <HAL_ADC_ConfigChannel+0x234>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002a30:	6d6a      	ldr	r2, [r5, #84]	; 0x54
 8002a32:	f042 0220 	orr.w	r2, r2, #32
 8002a36:	656a      	str	r2, [r5, #84]	; 0x54
    tmp_hal_status = HAL_ERROR;
 8002a38:	4618      	mov	r0, r3
 8002a3a:	e78b      	b.n	8002954 <HAL_ADC_ConfigChannel+0x234>
  __HAL_LOCK(hadc);
 8002a3c:	2002      	movs	r0, #2
 8002a3e:	e78c      	b.n	800295a <HAL_ADC_ConfigChannel+0x23a>
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002a40:	2800      	cmp	r0, #0
 8002a42:	f47f aea9 	bne.w	8002798 <HAL_ADC_ConfigChannel+0x78>
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8002a46:	4618      	mov	r0, r3
 8002a48:	68a2      	ldr	r2, [r4, #8]
 8002a4a:	6821      	ldr	r1, [r4, #0]
 8002a4c:	f7ff fd6e 	bl	800252c <LL_ADC_SetChannelSamplingTime>
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002a50:	6926      	ldr	r6, [r4, #16]
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8002a52:	682b      	ldr	r3, [r5, #0]
 8002a54:	6822      	ldr	r2, [r4, #0]
 8002a56:	68d9      	ldr	r1, [r3, #12]
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002a58:	2e04      	cmp	r6, #4
 8002a5a:	f103 0060 	add.w	r0, r3, #96	; 0x60
 8002a5e:	f43f aee1 	beq.w	8002824 <HAL_ADC_ConfigChannel+0x104>
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8002a62:	f3c1 03c1 	ubfx	r3, r1, #3, #2
 8002a66:	0059      	lsls	r1, r3, #1
 8002a68:	6963      	ldr	r3, [r4, #20]
  MODIFY_REG(*preg,
 8002a6a:	f850 7026 	ldr.w	r7, [r0, r6, lsl #2]
 8002a6e:	f002 42f8 	and.w	r2, r2, #2080374784	; 0x7c000000
 8002a72:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8002a76:	408b      	lsls	r3, r1
 8002a78:	4313      	orrs	r3, r2
 8002a7a:	4a10      	ldr	r2, [pc, #64]	; (8002abc <HAL_ADC_ConfigChannel+0x39c>)
 8002a7c:	403a      	ands	r2, r7
 8002a7e:	4313      	orrs	r3, r2
 8002a80:	f840 3026 	str.w	r3, [r0, r6, lsl #2]
 8002a84:	e688      	b.n	8002798 <HAL_ADC_ConfigChannel+0x78>
  register const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002a86:	f103 0668 	add.w	r6, r3, #104	; 0x68
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8002a8a:	6e9f      	ldr	r7, [r3, #104]	; 0x68
 8002a8c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002a8e:	f3c3 6384 	ubfx	r3, r3, #26, #5
 8002a92:	e6f4      	b.n	800287e <HAL_ADC_ConfigChannel+0x15e>
 8002a94:	0007ffff 	.word	0x0007ffff
 8002a98:	407f0000 	.word	0x407f0000
 8002a9c:	80080000 	.word	0x80080000
 8002aa0:	50040300 	.word	0x50040300
 8002aa4:	c7520000 	.word	0xc7520000
 8002aa8:	50040000 	.word	0x50040000
 8002aac:	00030d40 	.word	0x00030d40
 8002ab0:	20000024 	.word	0x20000024
 8002ab4:	cb840000 	.word	0xcb840000
 8002ab8:	80000001 	.word	0x80000001
 8002abc:	03fff000 	.word	0x03fff000
 8002ac0:	68c3      	ldr	r3, [r0, #12]
 8002ac2:	68c2      	ldr	r2, [r0, #12]
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002ac4:	6823      	ldr	r3, [r4, #0]
 8002ac6:	f3c2 6284 	ubfx	r2, r2, #26, #5
 8002aca:	e6e9      	b.n	80028a0 <HAL_ADC_ConfigChannel+0x180>

08002acc <LL_ADC_IsEnabled>:
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002acc:	6880      	ldr	r0, [r0, #8]
}
 8002ace:	f000 0001 	and.w	r0, r0, #1
 8002ad2:	4770      	bx	lr

08002ad4 <LL_ADC_REG_IsConversionOngoing>:
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002ad4:	6880      	ldr	r0, [r0, #8]
}
 8002ad6:	f3c0 0080 	ubfx	r0, r0, #2, #1
 8002ada:	4770      	bx	lr

08002adc <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8002adc:	b530      	push	{r4, r5, lr}
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002ade:	f890 3050 	ldrb.w	r3, [r0, #80]	; 0x50
 8002ae2:	2b01      	cmp	r3, #1
{
 8002ae4:	b09b      	sub	sp, #108	; 0x6c
 8002ae6:	4602      	mov	r2, r0
  __HAL_LOCK(hadc);
 8002ae8:	d066      	beq.n	8002bb8 <HAL_ADCEx_MultiModeConfigChannel+0xdc>
 8002aea:	2301      	movs	r3, #1
 8002aec:	f880 3050 	strb.w	r3, [r0, #80]	; 0x50

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8002af0:	4b32      	ldr	r3, [pc, #200]	; (8002bbc <HAL_ADCEx_MultiModeConfigChannel+0xe0>)
 8002af2:	6800      	ldr	r0, [r0, #0]
 8002af4:	4298      	cmp	r0, r3
 8002af6:	bf0c      	ite	eq
 8002af8:	f503 7380 	addeq.w	r3, r3, #256	; 0x100
 8002afc:	2300      	movne	r3, #0
 8002afe:	9301      	str	r3, [sp, #4]

  if (tmphadcSlave.Instance == NULL)
 8002b00:	9801      	ldr	r0, [sp, #4]
 8002b02:	b940      	cbnz	r0, 8002b16 <HAL_ADCEx_MultiModeConfigChannel+0x3a>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002b04:	6d53      	ldr	r3, [r2, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002b06:	f882 0050 	strb.w	r0, [r2, #80]	; 0x50
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002b0a:	f043 0320 	orr.w	r3, r3, #32
 8002b0e:	6553      	str	r3, [r2, #84]	; 0x54

    return HAL_ERROR;
 8002b10:	2001      	movs	r0, #1
  /* Process unlocked */
  __HAL_UNLOCK(hadc);

  /* Return function status */
  return tmp_hal_status;
}
 8002b12:	b01b      	add	sp, #108	; 0x6c
 8002b14:	bd30      	pop	{r4, r5, pc}
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8002b16:	f7ff ffdd 	bl	8002ad4 <LL_ADC_REG_IsConversionOngoing>
 8002b1a:	4603      	mov	r3, r0
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002b1c:	6810      	ldr	r0, [r2, #0]
 8002b1e:	f7ff ffd9 	bl	8002ad4 <LL_ADC_REG_IsConversionOngoing>
 8002b22:	2800      	cmp	r0, #0
 8002b24:	d142      	bne.n	8002bac <HAL_ADCEx_MultiModeConfigChannel+0xd0>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d140      	bne.n	8002bac <HAL_ADCEx_MultiModeConfigChannel+0xd0>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002b2a:	680b      	ldr	r3, [r1, #0]
 8002b2c:	4c24      	ldr	r4, [pc, #144]	; (8002bc0 <HAL_ADCEx_MultiModeConfigChannel+0xe4>)
 8002b2e:	b333      	cbz	r3, 8002b7e <HAL_ADCEx_MultiModeConfigChannel+0xa2>
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8002b30:	68a3      	ldr	r3, [r4, #8]
 8002b32:	6848      	ldr	r0, [r1, #4]
 8002b34:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8002b38:	4303      	orrs	r3, r0
 8002b3a:	f892 0030 	ldrb.w	r0, [r2, #48]	; 0x30
 8002b3e:	ea43 3340 	orr.w	r3, r3, r0, lsl #13
 8002b42:	60a3      	str	r3, [r4, #8]
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002b44:	481d      	ldr	r0, [pc, #116]	; (8002bbc <HAL_ADCEx_MultiModeConfigChannel+0xe0>)
 8002b46:	f7ff ffc1 	bl	8002acc <LL_ADC_IsEnabled>
 8002b4a:	4603      	mov	r3, r0
 8002b4c:	481d      	ldr	r0, [pc, #116]	; (8002bc4 <HAL_ADCEx_MultiModeConfigChannel+0xe8>)
 8002b4e:	f7ff ffbd 	bl	8002acc <LL_ADC_IsEnabled>
 8002b52:	4303      	orrs	r3, r0
 8002b54:	481c      	ldr	r0, [pc, #112]	; (8002bc8 <HAL_ADCEx_MultiModeConfigChannel+0xec>)
 8002b56:	f7ff ffb9 	bl	8002acc <LL_ADC_IsEnabled>
 8002b5a:	4318      	orrs	r0, r3
 8002b5c:	d004      	beq.n	8002b68 <HAL_ADCEx_MultiModeConfigChannel+0x8c>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002b5e:	2000      	movs	r0, #0
  __HAL_UNLOCK(hadc);
 8002b60:	2300      	movs	r3, #0
 8002b62:	f882 3050 	strb.w	r3, [r2, #80]	; 0x50
  return tmp_hal_status;
 8002b66:	e7d4      	b.n	8002b12 <HAL_ADCEx_MultiModeConfigChannel+0x36>
        MODIFY_REG(tmpADC_Common->CCR,
 8002b68:	680b      	ldr	r3, [r1, #0]
 8002b6a:	68a5      	ldr	r5, [r4, #8]
 8002b6c:	6889      	ldr	r1, [r1, #8]
 8002b6e:	430b      	orrs	r3, r1
 8002b70:	f425 6171 	bic.w	r1, r5, #3856	; 0xf10
 8002b74:	f021 010f 	bic.w	r1, r1, #15
 8002b78:	430b      	orrs	r3, r1
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8002b7a:	60a3      	str	r3, [r4, #8]
 8002b7c:	e7f0      	b.n	8002b60 <HAL_ADCEx_MultiModeConfigChannel+0x84>
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8002b7e:	68a3      	ldr	r3, [r4, #8]
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002b80:	480e      	ldr	r0, [pc, #56]	; (8002bbc <HAL_ADCEx_MultiModeConfigChannel+0xe0>)
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8002b82:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8002b86:	60a3      	str	r3, [r4, #8]
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002b88:	f7ff ffa0 	bl	8002acc <LL_ADC_IsEnabled>
 8002b8c:	4603      	mov	r3, r0
 8002b8e:	480d      	ldr	r0, [pc, #52]	; (8002bc4 <HAL_ADCEx_MultiModeConfigChannel+0xe8>)
 8002b90:	f7ff ff9c 	bl	8002acc <LL_ADC_IsEnabled>
 8002b94:	4303      	orrs	r3, r0
 8002b96:	480c      	ldr	r0, [pc, #48]	; (8002bc8 <HAL_ADCEx_MultiModeConfigChannel+0xec>)
 8002b98:	f7ff ff98 	bl	8002acc <LL_ADC_IsEnabled>
 8002b9c:	4318      	orrs	r0, r3
 8002b9e:	d1de      	bne.n	8002b5e <HAL_ADCEx_MultiModeConfigChannel+0x82>
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8002ba0:	68a3      	ldr	r3, [r4, #8]
 8002ba2:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8002ba6:	f023 030f 	bic.w	r3, r3, #15
 8002baa:	e7e6      	b.n	8002b7a <HAL_ADCEx_MultiModeConfigChannel+0x9e>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002bac:	6d53      	ldr	r3, [r2, #84]	; 0x54
 8002bae:	f043 0320 	orr.w	r3, r3, #32
 8002bb2:	6553      	str	r3, [r2, #84]	; 0x54
    tmp_hal_status = HAL_ERROR;
 8002bb4:	2001      	movs	r0, #1
 8002bb6:	e7d3      	b.n	8002b60 <HAL_ADCEx_MultiModeConfigChannel+0x84>
  __HAL_LOCK(hadc);
 8002bb8:	2002      	movs	r0, #2
 8002bba:	e7aa      	b.n	8002b12 <HAL_ADCEx_MultiModeConfigChannel+0x36>
 8002bbc:	50040000 	.word	0x50040000
 8002bc0:	50040300 	.word	0x50040300
 8002bc4:	50040100 	.word	0x50040100
 8002bc8:	50040200 	.word	0x50040200

08002bcc <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002bcc:	4a07      	ldr	r2, [pc, #28]	; (8002bec <HAL_NVIC_SetPriorityGrouping+0x20>)
 8002bce:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002bd0:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8002bd4:	041b      	lsls	r3, r3, #16
 8002bd6:	0c1b      	lsrs	r3, r3, #16
 8002bd8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002bdc:	0200      	lsls	r0, r0, #8
 8002bde:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002be2:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value  =  (reg_value                                   |
 8002be6:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 8002be8:	60d3      	str	r3, [r2, #12]
 8002bea:	4770      	bx	lr
 8002bec:	e000ed00 	.word	0xe000ed00

08002bf0 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002bf0:	4b17      	ldr	r3, [pc, #92]	; (8002c50 <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002bf2:	b530      	push	{r4, r5, lr}
 8002bf4:	68dc      	ldr	r4, [r3, #12]
 8002bf6:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002bfa:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002bfe:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002c00:	2b04      	cmp	r3, #4
 8002c02:	bf28      	it	cs
 8002c04:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002c06:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002c08:	f04f 0501 	mov.w	r5, #1
 8002c0c:	fa05 f303 	lsl.w	r3, r5, r3
 8002c10:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002c14:	bf8c      	ite	hi
 8002c16:	3c03      	subhi	r4, #3
 8002c18:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002c1a:	4019      	ands	r1, r3
 8002c1c:	40a1      	lsls	r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002c1e:	fa05 f404 	lsl.w	r4, r5, r4
 8002c22:	3c01      	subs	r4, #1
 8002c24:	4022      	ands	r2, r4
  if ((int32_t)(IRQn) >= 0)
 8002c26:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002c28:	ea42 0201 	orr.w	r2, r2, r1
 8002c2c:	ea4f 1202 	mov.w	r2, r2, lsl #4
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002c30:	bfad      	iteet	ge
 8002c32:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002c36:	f000 000f 	andlt.w	r0, r0, #15
 8002c3a:	4b06      	ldrlt	r3, [pc, #24]	; (8002c54 <HAL_NVIC_SetPriority+0x64>)
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002c3c:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002c40:	bfb5      	itete	lt
 8002c42:	b2d2      	uxtblt	r2, r2
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002c44:	b2d2      	uxtbge	r2, r2
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002c46:	541a      	strblt	r2, [r3, r0]
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002c48:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
 8002c4c:	bd30      	pop	{r4, r5, pc}
 8002c4e:	bf00      	nop
 8002c50:	e000ed00 	.word	0xe000ed00
 8002c54:	e000ed14 	.word	0xe000ed14

08002c58 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8002c58:	2800      	cmp	r0, #0
 8002c5a:	db08      	blt.n	8002c6e <HAL_NVIC_EnableIRQ+0x16>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002c5c:	0942      	lsrs	r2, r0, #5
 8002c5e:	2301      	movs	r3, #1
 8002c60:	f000 001f 	and.w	r0, r0, #31
 8002c64:	fa03 f000 	lsl.w	r0, r3, r0
 8002c68:	4b01      	ldr	r3, [pc, #4]	; (8002c70 <HAL_NVIC_EnableIRQ+0x18>)
 8002c6a:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8002c6e:	4770      	bx	lr
 8002c70:	e000e100 	.word	0xe000e100

08002c74 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8002c74:	b510      	push	{r4, lr}
  /* Check DAC handle */
  if (hdac == NULL)
 8002c76:	4604      	mov	r4, r0
 8002c78:	b168      	cbz	r0, 8002c96 <HAL_DAC_Init+0x22>
     return HAL_ERROR;
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8002c7a:	7903      	ldrb	r3, [r0, #4]
 8002c7c:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8002c80:	b913      	cbnz	r3, 8002c88 <HAL_DAC_Init+0x14>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8002c82:	7142      	strb	r2, [r0, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8002c84:	f7ff f8ac 	bl	8001de0 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8002c88:	2302      	movs	r3, #2
 8002c8a:	7123      	strb	r3, [r4, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8002c8c:	2000      	movs	r0, #0

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8002c8e:	2301      	movs	r3, #1
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8002c90:	6120      	str	r0, [r4, #16]
  hdac->State = HAL_DAC_STATE_READY;
 8002c92:	7123      	strb	r3, [r4, #4]

  /* Return function status */
  return HAL_OK;
 8002c94:	bd10      	pop	{r4, pc}
     return HAL_ERROR;
 8002c96:	2001      	movs	r0, #1
}
 8002c98:	bd10      	pop	{r4, pc}

08002c9a <HAL_DAC_DMAUnderrunCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_DMAUnderrunCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8002c9a:	4770      	bx	lr

08002c9c <HAL_DAC_IRQHandler>:
  if (__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR1))
 8002c9c:	6803      	ldr	r3, [r0, #0]
 8002c9e:	681a      	ldr	r2, [r3, #0]
 8002ca0:	0491      	lsls	r1, r2, #18
{
 8002ca2:	b510      	push	{r4, lr}
 8002ca4:	4604      	mov	r4, r0
  if (__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR1))
 8002ca6:	d511      	bpl.n	8002ccc <HAL_DAC_IRQHandler+0x30>
    if (__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR1))
 8002ca8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002caa:	0492      	lsls	r2, r2, #18
 8002cac:	d50e      	bpl.n	8002ccc <HAL_DAC_IRQHandler+0x30>
      hdac->State = HAL_DAC_STATE_ERROR;
 8002cae:	2204      	movs	r2, #4
 8002cb0:	7102      	strb	r2, [r0, #4]
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH1);
 8002cb2:	6902      	ldr	r2, [r0, #16]
 8002cb4:	f042 0201 	orr.w	r2, r2, #1
 8002cb8:	6102      	str	r2, [r0, #16]
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR1);
 8002cba:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002cbe:	635a      	str	r2, [r3, #52]	; 0x34
      CLEAR_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 8002cc0:	681a      	ldr	r2, [r3, #0]
 8002cc2:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002cc6:	601a      	str	r2, [r3, #0]
      HAL_DAC_DMAUnderrunCallbackCh1(hdac);
 8002cc8:	f7ff ffe7 	bl	8002c9a <HAL_DAC_DMAUnderrunCallbackCh1>
  if(__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR2))
 8002ccc:	6823      	ldr	r3, [r4, #0]
 8002cce:	681a      	ldr	r2, [r3, #0]
 8002cd0:	0091      	lsls	r1, r2, #2
 8002cd2:	d514      	bpl.n	8002cfe <HAL_DAC_IRQHandler+0x62>
    if (__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR2))
 8002cd4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002cd6:	0092      	lsls	r2, r2, #2
 8002cd8:	d511      	bpl.n	8002cfe <HAL_DAC_IRQHandler+0x62>
      hdac->State = HAL_DAC_STATE_ERROR;
 8002cda:	2204      	movs	r2, #4
 8002cdc:	7122      	strb	r2, [r4, #4]
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH2);
 8002cde:	6922      	ldr	r2, [r4, #16]
 8002ce0:	f042 0202 	orr.w	r2, r2, #2
 8002ce4:	6122      	str	r2, [r4, #16]
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR2);
 8002ce6:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8002cea:	635a      	str	r2, [r3, #52]	; 0x34
      CLEAR_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 8002cec:	681a      	ldr	r2, [r3, #0]
 8002cee:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
      HAL_DACEx_DMAUnderrunCallbackCh2(hdac);
 8002cf2:	4620      	mov	r0, r4
      CLEAR_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 8002cf4:	601a      	str	r2, [r3, #0]
}
 8002cf6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      HAL_DACEx_DMAUnderrunCallbackCh2(hdac);
 8002cfa:	f000 b88a 	b.w	8002e12 <HAL_DACEx_DMAUnderrunCallbackCh2>
 8002cfe:	bd10      	pop	{r4, pc}

08002d00 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected (Whenever present)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8002d00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    assert_param(IS_DAC_REFRESHTIME(sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime));
  }
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8002d02:	7943      	ldrb	r3, [r0, #5]
 8002d04:	2b01      	cmp	r3, #1
{
 8002d06:	4604      	mov	r4, r0
 8002d08:	460d      	mov	r5, r1
 8002d0a:	4616      	mov	r6, r2
 8002d0c:	f04f 0002 	mov.w	r0, #2
  __HAL_LOCK(hdac);
 8002d10:	d063      	beq.n	8002dda <HAL_DAC_ConfigChannel+0xda>
  if ((sConfig->DAC_SampleAndHold) == DAC_SAMPLEANDHOLD_ENABLE)
 8002d12:	680b      	ldr	r3, [r1, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8002d14:	7120      	strb	r0, [r4, #4]
  __HAL_LOCK(hdac);
 8002d16:	2201      	movs	r2, #1

  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8002d18:	2b04      	cmp	r3, #4
  __HAL_LOCK(hdac);
 8002d1a:	7162      	strb	r2, [r4, #5]
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8002d1c:	d125      	bne.n	8002d6a <HAL_DAC_ConfigChannel+0x6a>
  /* Sample on old configuration */
  {
    /* SampleTime */
    if (Channel == DAC_CHANNEL_1)
 8002d1e:	2e00      	cmp	r6, #0
 8002d20:	d16c      	bne.n	8002dfc <HAL_DAC_ConfigChannel+0xfc>
    {
      /* Get timeout */
      tickstart = HAL_GetTick();
 8002d22:	f7ff fbe9 	bl	80024f8 <HAL_GetTick>
 8002d26:	4607      	mov	r7, r0

      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8002d28:	6823      	ldr	r3, [r4, #0]
 8002d2a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d2c:	041b      	lsls	r3, r3, #16
 8002d2e:	d455      	bmi.n	8002ddc <HAL_DAC_ConfigChannel+0xdc>
          hdac->State = HAL_DAC_STATE_TIMEOUT;

          return HAL_TIMEOUT;
        }
      }
      HAL_Delay(1);
 8002d30:	2001      	movs	r0, #1
 8002d32:	f7ff fbe7 	bl	8002504 <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8002d36:	6823      	ldr	r3, [r4, #0]
 8002d38:	69aa      	ldr	r2, [r5, #24]
 8002d3a:	641a      	str	r2, [r3, #64]	; 0x40
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
    }
#endif /* STM32L451xx STM32L452xx STM32L462xx */

    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
 8002d3c:	6821      	ldr	r1, [r4, #0]
 8002d3e:	f006 0010 	and.w	r0, r6, #16
 8002d42:	6c8a      	ldr	r2, [r1, #72]	; 0x48
 8002d44:	f240 33ff 	movw	r3, #1023	; 0x3ff
 8002d48:	4083      	lsls	r3, r0
 8002d4a:	ea22 0203 	bic.w	r2, r2, r3
 8002d4e:	69eb      	ldr	r3, [r5, #28]
 8002d50:	4083      	lsls	r3, r0
 8002d52:	431a      	orrs	r2, r3
 8002d54:	648a      	str	r2, [r1, #72]	; 0x48
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
 8002d56:	6ccb      	ldr	r3, [r1, #76]	; 0x4c
 8002d58:	22ff      	movs	r2, #255	; 0xff
 8002d5a:	4082      	lsls	r2, r0
 8002d5c:	ea23 0302 	bic.w	r3, r3, r2
 8002d60:	6a2a      	ldr	r2, [r5, #32]
 8002d62:	fa02 f000 	lsl.w	r0, r2, r0
 8002d66:	4303      	orrs	r3, r0
 8002d68:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 8002d6a:	692b      	ldr	r3, [r5, #16]
 8002d6c:	2b01      	cmp	r3, #1
 8002d6e:	f006 0210 	and.w	r2, r6, #16
 8002d72:	6823      	ldr	r3, [r4, #0]
 8002d74:	d108      	bne.n	8002d88 <HAL_DAC_ConfigChannel+0x88>
  /* USER TRIMMING */
  {
  /* Get the DAC CCR value */
  tmpreg1 = hdac->Instance->CCR;
 8002d76:	6b99      	ldr	r1, [r3, #56]	; 0x38
  /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 8002d78:	201f      	movs	r0, #31
 8002d7a:	4090      	lsls	r0, r2
 8002d7c:	ea21 0000 	bic.w	r0, r1, r0
  /* Configure for the selected trimming offset */
  tmpreg2 = sConfig->DAC_TrimmingValue;
  /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8002d80:	6969      	ldr	r1, [r5, #20]
 8002d82:	4091      	lsls	r1, r2
 8002d84:	4301      	orrs	r1, r0
  /* Write to DAC CCR */
  hdac->Instance->CCR = tmpreg1;
 8002d86:	6399      	str	r1, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 8002d88:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | sConfig->DAC_ConnectOnChipPeripheral);
 8002d8a:	68ae      	ldr	r6, [r5, #8]
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 8002d8c:	2007      	movs	r0, #7
 8002d8e:	4090      	lsls	r0, r2
 8002d90:	ea21 0000 	bic.w	r0, r1, r0
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | sConfig->DAC_ConnectOnChipPeripheral);
 8002d94:	6829      	ldr	r1, [r5, #0]
 8002d96:	4331      	orrs	r1, r6
 8002d98:	68ee      	ldr	r6, [r5, #12]
 8002d9a:	4331      	orrs	r1, r6
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8002d9c:	4091      	lsls	r1, r2
 8002d9e:	4301      	orrs	r1, r0
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 8002da0:	63d9      	str	r1, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 8002da2:	6819      	ldr	r1, [r3, #0]
 8002da4:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8002da8:	4090      	lsls	r0, r2
 8002daa:	ea21 0100 	bic.w	r1, r1, r0
 8002dae:	6019      	str	r1, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8002db0:	6819      	ldr	r1, [r3, #0]
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 8002db2:	f640 70fc 	movw	r0, #4092	; 0xffc
 8002db6:	4090      	lsls	r0, r2
 8002db8:	ea21 0000 	bic.w	r0, r1, r0
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8002dbc:	6869      	ldr	r1, [r5, #4]
 8002dbe:	4091      	lsls	r1, r2
 8002dc0:	4301      	orrs	r1, r0
  }

#endif /* STM32L4R5xx STM32L4R7xx STM32L4R9xx STM32L4S5xx STM32L4S7xx STM32L4S9xx */

  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8002dc2:	6019      	str	r1, [r3, #0]
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << (Channel & 0x10UL));
 8002dc4:	6819      	ldr	r1, [r3, #0]
 8002dc6:	20c0      	movs	r0, #192	; 0xc0
 8002dc8:	fa00 f202 	lsl.w	r2, r0, r2
 8002dcc:	ea21 0202 	bic.w	r2, r1, r2
 8002dd0:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8002dd2:	2000      	movs	r0, #0
  hdac->State = HAL_DAC_STATE_READY;
 8002dd4:	2301      	movs	r3, #1
 8002dd6:	7123      	strb	r3, [r4, #4]
  __HAL_UNLOCK(hdac);
 8002dd8:	7160      	strb	r0, [r4, #5]

  /* Return function status */
  return HAL_OK;
}
 8002dda:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8002ddc:	f7ff fb8c 	bl	80024f8 <HAL_GetTick>
 8002de0:	1bc0      	subs	r0, r0, r7
 8002de2:	2801      	cmp	r0, #1
 8002de4:	d9a0      	bls.n	8002d28 <HAL_DAC_ConfigChannel+0x28>
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8002de6:	6923      	ldr	r3, [r4, #16]
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 8002de8:	2003      	movs	r0, #3
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8002dea:	f043 0308 	orr.w	r3, r3, #8
 8002dee:	6123      	str	r3, [r4, #16]
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 8002df0:	7120      	strb	r0, [r4, #4]
          return HAL_TIMEOUT;
 8002df2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8002df4:	f7ff fb80 	bl	80024f8 <HAL_GetTick>
 8002df8:	2801      	cmp	r0, #1
 8002dfa:	d8f4      	bhi.n	8002de6 <HAL_DAC_ConfigChannel+0xe6>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8002dfc:	6823      	ldr	r3, [r4, #0]
 8002dfe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	dbf7      	blt.n	8002df4 <HAL_DAC_ConfigChannel+0xf4>
      HAL_Delay(1U);
 8002e04:	2001      	movs	r0, #1
 8002e06:	f7ff fb7d 	bl	8002504 <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8002e0a:	6823      	ldr	r3, [r4, #0]
 8002e0c:	69aa      	ldr	r2, [r5, #24]
 8002e0e:	645a      	str	r2, [r3, #68]	; 0x44
 8002e10:	e794      	b.n	8002d3c <HAL_DAC_ConfigChannel+0x3c>

08002e12 <HAL_DACEx_DMAUnderrunCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_DMAUnderrunCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8002e12:	4770      	bx	lr

08002e14 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002e14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002e18:	b085      	sub	sp, #20
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002e1a:	680b      	ldr	r3, [r1, #0]
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002e1c:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8002fc8 <HAL_GPIO_Init+0x1b4>
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
        SYSCFG->EXTICR[position >> 2u] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8002e20:	4c67      	ldr	r4, [pc, #412]	; (8002fc0 <HAL_GPIO_Init+0x1ac>)
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002e22:	9301      	str	r3, [sp, #4]
  uint32_t position = 0x00u;
 8002e24:	2300      	movs	r3, #0
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002e26:	9a01      	ldr	r2, [sp, #4]
 8002e28:	40da      	lsrs	r2, r3
 8002e2a:	d102      	bne.n	8002e32 <HAL_GPIO_Init+0x1e>
      }
    }

    position++;
  }
}
 8002e2c:	b005      	add	sp, #20
 8002e2e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002e32:	2601      	movs	r6, #1
    if (iocurrent != 0x00u)
 8002e34:	9a01      	ldr	r2, [sp, #4]
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002e36:	409e      	lsls	r6, r3
    if (iocurrent != 0x00u)
 8002e38:	ea12 0e06 	ands.w	lr, r2, r6
 8002e3c:	f000 80b1 	beq.w	8002fa2 <HAL_GPIO_Init+0x18e>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002e40:	684a      	ldr	r2, [r1, #4]
 8002e42:	f022 0710 	bic.w	r7, r2, #16
 8002e46:	2f02      	cmp	r7, #2
 8002e48:	d116      	bne.n	8002e78 <HAL_GPIO_Init+0x64>
        temp = GPIOx->AFR[position >> 3u];
 8002e4a:	ea4f 09d3 	mov.w	r9, r3, lsr #3
 8002e4e:	eb00 0989 	add.w	r9, r0, r9, lsl #2
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002e52:	f003 0a07 	and.w	sl, r3, #7
        temp = GPIOx->AFR[position >> 3u];
 8002e56:	f8d9 5020 	ldr.w	r5, [r9, #32]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002e5a:	ea4f 0a8a 	mov.w	sl, sl, lsl #2
 8002e5e:	f04f 0c0f 	mov.w	ip, #15
 8002e62:	fa0c fc0a 	lsl.w	ip, ip, sl
 8002e66:	ea25 0c0c 	bic.w	ip, r5, ip
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002e6a:	690d      	ldr	r5, [r1, #16]
 8002e6c:	fa05 f50a 	lsl.w	r5, r5, sl
 8002e70:	ea45 050c 	orr.w	r5, r5, ip
        GPIOx->AFR[position >> 3u] = temp;
 8002e74:	f8c9 5020 	str.w	r5, [r9, #32]
 8002e78:	ea4f 0c43 	mov.w	ip, r3, lsl #1
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002e7c:	2503      	movs	r5, #3
      temp = GPIOx->MODER;
 8002e7e:	f8d0 b000 	ldr.w	fp, [r0]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002e82:	fa05 f50c 	lsl.w	r5, r5, ip
 8002e86:	43ed      	mvns	r5, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002e88:	f002 0a03 	and.w	sl, r2, #3
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002e8c:	ea0b 0b05 	and.w	fp, fp, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002e90:	fa0a f90c 	lsl.w	r9, sl, ip
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002e94:	3f01      	subs	r7, #1
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002e96:	ea49 090b 	orr.w	r9, r9, fp
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002e9a:	2f01      	cmp	r7, #1
      GPIOx->MODER = temp;
 8002e9c:	f8c0 9000 	str.w	r9, [r0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002ea0:	d811      	bhi.n	8002ec6 <HAL_GPIO_Init+0xb2>
        temp = GPIOx->OSPEEDR;
 8002ea2:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002ea4:	ea05 0907 	and.w	r9, r5, r7
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002ea8:	68cf      	ldr	r7, [r1, #12]
 8002eaa:	fa07 f70c 	lsl.w	r7, r7, ip
 8002eae:	ea47 0709 	orr.w	r7, r7, r9
        GPIOx->OSPEEDR = temp;
 8002eb2:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 8002eb4:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002eb6:	ea27 0906 	bic.w	r9, r7, r6
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8002eba:	f3c2 1700 	ubfx	r7, r2, #4, #1
 8002ebe:	409f      	lsls	r7, r3
 8002ec0:	ea47 0709 	orr.w	r7, r7, r9
        GPIOx->OTYPER = temp;
 8002ec4:	6047      	str	r7, [r0, #4]
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8002ec6:	f1ba 0f03 	cmp.w	sl, #3
 8002eca:	d107      	bne.n	8002edc <HAL_GPIO_Init+0xc8>
        temp = GPIOx->ASCR;
 8002ecc:	6ac7      	ldr	r7, [r0, #44]	; 0x2c
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8002ece:	ea27 0606 	bic.w	r6, r7, r6
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 8002ed2:	f3c2 07c0 	ubfx	r7, r2, #3, #1
 8002ed6:	409f      	lsls	r7, r3
 8002ed8:	433e      	orrs	r6, r7
        GPIOx->ASCR = temp;
 8002eda:	62c6      	str	r6, [r0, #44]	; 0x2c
      temp = GPIOx->PUPDR;
 8002edc:	68c6      	ldr	r6, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8002ede:	4035      	ands	r5, r6
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8002ee0:	688e      	ldr	r6, [r1, #8]
 8002ee2:	fa06 f60c 	lsl.w	r6, r6, ip
 8002ee6:	4335      	orrs	r5, r6
      GPIOx->PUPDR = temp;
 8002ee8:	60c5      	str	r5, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002eea:	00d5      	lsls	r5, r2, #3
 8002eec:	d559      	bpl.n	8002fa2 <HAL_GPIO_Init+0x18e>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002eee:	f8d8 5060 	ldr.w	r5, [r8, #96]	; 0x60
 8002ef2:	f045 0501 	orr.w	r5, r5, #1
 8002ef6:	f8c8 5060 	str.w	r5, [r8, #96]	; 0x60
 8002efa:	f8d8 5060 	ldr.w	r5, [r8, #96]	; 0x60
 8002efe:	f023 0603 	bic.w	r6, r3, #3
 8002f02:	f106 4680 	add.w	r6, r6, #1073741824	; 0x40000000
 8002f06:	f005 0501 	and.w	r5, r5, #1
 8002f0a:	f506 3680 	add.w	r6, r6, #65536	; 0x10000
 8002f0e:	9503      	str	r5, [sp, #12]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002f10:	f003 0c03 	and.w	ip, r3, #3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002f14:	9d03      	ldr	r5, [sp, #12]
        temp = SYSCFG->EXTICR[position >> 2u];
 8002f16:	68b5      	ldr	r5, [r6, #8]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002f18:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 8002f1c:	270f      	movs	r7, #15
 8002f1e:	fa07 f70c 	lsl.w	r7, r7, ip
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002f22:	f1b0 4f90 	cmp.w	r0, #1207959552	; 0x48000000
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002f26:	ea25 0707 	bic.w	r7, r5, r7
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002f2a:	d03c      	beq.n	8002fa6 <HAL_GPIO_Init+0x192>
 8002f2c:	4d25      	ldr	r5, [pc, #148]	; (8002fc4 <HAL_GPIO_Init+0x1b0>)
 8002f2e:	42a8      	cmp	r0, r5
 8002f30:	d03b      	beq.n	8002faa <HAL_GPIO_Init+0x196>
 8002f32:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8002f36:	42a8      	cmp	r0, r5
 8002f38:	d039      	beq.n	8002fae <HAL_GPIO_Init+0x19a>
 8002f3a:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8002f3e:	42a8      	cmp	r0, r5
 8002f40:	d037      	beq.n	8002fb2 <HAL_GPIO_Init+0x19e>
 8002f42:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8002f46:	42a8      	cmp	r0, r5
 8002f48:	d035      	beq.n	8002fb6 <HAL_GPIO_Init+0x1a2>
 8002f4a:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8002f4e:	42a8      	cmp	r0, r5
 8002f50:	d033      	beq.n	8002fba <HAL_GPIO_Init+0x1a6>
 8002f52:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8002f56:	42a8      	cmp	r0, r5
 8002f58:	bf14      	ite	ne
 8002f5a:	2507      	movne	r5, #7
 8002f5c:	2506      	moveq	r5, #6
 8002f5e:	fa05 f50c 	lsl.w	r5, r5, ip
 8002f62:	433d      	orrs	r5, r7
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002f64:	60b5      	str	r5, [r6, #8]
        temp = EXTI->IMR1;
 8002f66:	6825      	ldr	r5, [r4, #0]
        temp &= ~(iocurrent);
 8002f68:	ea6f 060e 	mvn.w	r6, lr
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002f6c:	03d7      	lsls	r7, r2, #15
        temp &= ~(iocurrent);
 8002f6e:	bf54      	ite	pl
 8002f70:	4035      	andpl	r5, r6
          temp |= iocurrent;
 8002f72:	ea4e 0505 	orrmi.w	r5, lr, r5
        EXTI->IMR1 = temp;
 8002f76:	6025      	str	r5, [r4, #0]
        temp = EXTI->EMR1;
 8002f78:	6865      	ldr	r5, [r4, #4]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002f7a:	0397      	lsls	r7, r2, #14
        temp &= ~(iocurrent);
 8002f7c:	bf54      	ite	pl
 8002f7e:	4035      	andpl	r5, r6
          temp |= iocurrent;
 8002f80:	ea4e 0505 	orrmi.w	r5, lr, r5
        EXTI->EMR1 = temp;
 8002f84:	6065      	str	r5, [r4, #4]
        temp = EXTI->RTSR1;
 8002f86:	68a5      	ldr	r5, [r4, #8]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002f88:	02d7      	lsls	r7, r2, #11
        temp &= ~(iocurrent);
 8002f8a:	bf54      	ite	pl
 8002f8c:	4035      	andpl	r5, r6
          temp |= iocurrent;
 8002f8e:	ea4e 0505 	orrmi.w	r5, lr, r5
        EXTI->RTSR1 = temp;
 8002f92:	60a5      	str	r5, [r4, #8]
        temp = EXTI->FTSR1;
 8002f94:	68e5      	ldr	r5, [r4, #12]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002f96:	0292      	lsls	r2, r2, #10
        temp &= ~(iocurrent);
 8002f98:	bf54      	ite	pl
 8002f9a:	4035      	andpl	r5, r6
          temp |= iocurrent;
 8002f9c:	ea4e 0505 	orrmi.w	r5, lr, r5
        EXTI->FTSR1 = temp;
 8002fa0:	60e5      	str	r5, [r4, #12]
    position++;
 8002fa2:	3301      	adds	r3, #1
 8002fa4:	e73f      	b.n	8002e26 <HAL_GPIO_Init+0x12>
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002fa6:	2500      	movs	r5, #0
 8002fa8:	e7d9      	b.n	8002f5e <HAL_GPIO_Init+0x14a>
 8002faa:	2501      	movs	r5, #1
 8002fac:	e7d7      	b.n	8002f5e <HAL_GPIO_Init+0x14a>
 8002fae:	2502      	movs	r5, #2
 8002fb0:	e7d5      	b.n	8002f5e <HAL_GPIO_Init+0x14a>
 8002fb2:	2503      	movs	r5, #3
 8002fb4:	e7d3      	b.n	8002f5e <HAL_GPIO_Init+0x14a>
 8002fb6:	2504      	movs	r5, #4
 8002fb8:	e7d1      	b.n	8002f5e <HAL_GPIO_Init+0x14a>
 8002fba:	2505      	movs	r5, #5
 8002fbc:	e7cf      	b.n	8002f5e <HAL_GPIO_Init+0x14a>
 8002fbe:	bf00      	nop
 8002fc0:	40010400 	.word	0x40010400
 8002fc4:	48000400 	.word	0x48000400
 8002fc8:	40021000 	.word	0x40021000

08002fcc <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8002fcc:	6903      	ldr	r3, [r0, #16]
 8002fce:	4219      	tst	r1, r3
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
 8002fd0:	bf14      	ite	ne
 8002fd2:	2001      	movne	r0, #1
 8002fd4:	2000      	moveq	r0, #0
 8002fd6:	4770      	bx	lr

08002fd8 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002fd8:	b10a      	cbz	r2, 8002fde <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002fda:	6181      	str	r1, [r0, #24]
 8002fdc:	4770      	bx	lr
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002fde:	6281      	str	r1, [r0, #40]	; 0x28
 8002fe0:	4770      	bx	lr

08002fe2 <HAL_GPIO_TogglePin>:
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) != 0x00u)
 8002fe2:	6943      	ldr	r3, [r0, #20]
 8002fe4:	420b      	tst	r3, r1
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002fe6:	bf14      	ite	ne
 8002fe8:	6281      	strne	r1, [r0, #40]	; 0x28
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002fea:	6181      	streq	r1, [r0, #24]
 8002fec:	4770      	bx	lr

08002fee <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002fee:	b510      	push	{r4, lr}
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002ff0:	4604      	mov	r4, r0
 8002ff2:	2800      	cmp	r0, #0
 8002ff4:	d04a      	beq.n	800308c <HAL_I2C_Init+0x9e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002ff6:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8002ffa:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8002ffe:	b91b      	cbnz	r3, 8003008 <HAL_I2C_Init+0x1a>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003000:	f880 2040 	strb.w	r2, [r0, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8003004:	f7fe ff22 	bl	8001e4c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003008:	2324      	movs	r3, #36	; 0x24
 800300a:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800300e:	6823      	ldr	r3, [r4, #0]
  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003010:	68e1      	ldr	r1, [r4, #12]
  __HAL_I2C_DISABLE(hi2c);
 8003012:	681a      	ldr	r2, [r3, #0]
 8003014:	f022 0201 	bic.w	r2, r2, #1
 8003018:	601a      	str	r2, [r3, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800301a:	6862      	ldr	r2, [r4, #4]
 800301c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003020:	611a      	str	r2, [r3, #16]
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003022:	689a      	ldr	r2, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003024:	2901      	cmp	r1, #1
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003026:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800302a:	609a      	str	r2, [r3, #8]
 800302c:	68a2      	ldr	r2, [r4, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800302e:	d124      	bne.n	800307a <HAL_I2C_Init+0x8c>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003030:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003034:	609a      	str	r2, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003036:	685a      	ldr	r2, [r3, #4]
  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8003038:	6961      	ldr	r1, [r4, #20]
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800303a:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 800303e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003042:	605a      	str	r2, [r3, #4]
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003044:	68da      	ldr	r2, [r3, #12]
 8003046:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800304a:	60da      	str	r2, [r3, #12]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 800304c:	6922      	ldr	r2, [r4, #16]
 800304e:	430a      	orrs	r2, r1
 8003050:	69a1      	ldr	r1, [r4, #24]
 8003052:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8003056:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003058:	6a21      	ldr	r1, [r4, #32]
 800305a:	69e2      	ldr	r2, [r4, #28]
 800305c:	430a      	orrs	r2, r1
 800305e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003060:	681a      	ldr	r2, [r3, #0]
 8003062:	f042 0201 	orr.w	r2, r2, #1
 8003066:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003068:	2000      	movs	r0, #0
  hi2c->State = HAL_I2C_STATE_READY;
 800306a:	2320      	movs	r3, #32
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800306c:	6460      	str	r0, [r4, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800306e:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8003072:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003074:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42

  return HAL_OK;
 8003078:	bd10      	pop	{r4, pc}
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800307a:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800307e:	2902      	cmp	r1, #2
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003080:	609a      	str	r2, [r3, #8]
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8003082:	bf04      	itt	eq
 8003084:	f44f 6200 	moveq.w	r2, #2048	; 0x800
 8003088:	605a      	streq	r2, [r3, #4]
 800308a:	e7d4      	b.n	8003036 <HAL_I2C_Init+0x48>
    return HAL_ERROR;
 800308c:	2001      	movs	r0, #1
}
 800308e:	bd10      	pop	{r4, pc}

08003090 <HAL_I2CEx_ConfigAnalogFilter>:
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003090:	f890 2041 	ldrb.w	r2, [r0, #65]	; 0x41
 8003094:	b2d2      	uxtb	r2, r2
 8003096:	2a20      	cmp	r2, #32
{
 8003098:	b510      	push	{r4, lr}
  if (hi2c->State == HAL_I2C_STATE_READY)
 800309a:	d11d      	bne.n	80030d8 <HAL_I2CEx_ConfigAnalogFilter+0x48>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800309c:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 80030a0:	2b01      	cmp	r3, #1
 80030a2:	d019      	beq.n	80030d8 <HAL_I2CEx_ConfigAnalogFilter+0x48>

    hi2c->State = HAL_I2C_STATE_BUSY;
 80030a4:	2324      	movs	r3, #36	; 0x24
 80030a6:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80030aa:	6803      	ldr	r3, [r0, #0]
 80030ac:	681c      	ldr	r4, [r3, #0]
 80030ae:	f024 0401 	bic.w	r4, r4, #1
 80030b2:	601c      	str	r4, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80030b4:	681c      	ldr	r4, [r3, #0]
 80030b6:	f424 5480 	bic.w	r4, r4, #4096	; 0x1000
 80030ba:	601c      	str	r4, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80030bc:	681c      	ldr	r4, [r3, #0]
 80030be:	4321      	orrs	r1, r4
 80030c0:	6019      	str	r1, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80030c2:	6819      	ldr	r1, [r3, #0]
 80030c4:	f041 0101 	orr.w	r1, r1, #1
 80030c8:	6019      	str	r1, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80030ca:	2300      	movs	r3, #0
    hi2c->State = HAL_I2C_STATE_READY;
 80030cc:	f880 2041 	strb.w	r2, [r0, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 80030d0:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40

    return HAL_OK;
 80030d4:	4618      	mov	r0, r3
 80030d6:	bd10      	pop	{r4, pc}
  }
  else
  {
    return HAL_BUSY;
 80030d8:	2002      	movs	r0, #2
  }
}
 80030da:	bd10      	pop	{r4, pc}

080030dc <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80030dc:	b510      	push	{r4, lr}

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80030de:	f890 4041 	ldrb.w	r4, [r0, #65]	; 0x41
 80030e2:	b2e4      	uxtb	r4, r4
 80030e4:	2c20      	cmp	r4, #32
 80030e6:	d11c      	bne.n	8003122 <HAL_I2CEx_ConfigDigitalFilter+0x46>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80030e8:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 80030ec:	2b01      	cmp	r3, #1
 80030ee:	d018      	beq.n	8003122 <HAL_I2CEx_ConfigDigitalFilter+0x46>

    hi2c->State = HAL_I2C_STATE_BUSY;
 80030f0:	2324      	movs	r3, #36	; 0x24
 80030f2:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80030f6:	6803      	ldr	r3, [r0, #0]
 80030f8:	681a      	ldr	r2, [r3, #0]
 80030fa:	f022 0201 	bic.w	r2, r2, #1
 80030fe:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003100:	681a      	ldr	r2, [r3, #0]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003102:	f422 6270 	bic.w	r2, r2, #3840	; 0xf00

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003106:	ea42 2101 	orr.w	r1, r2, r1, lsl #8

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800310a:	6019      	str	r1, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800310c:	681a      	ldr	r2, [r3, #0]
 800310e:	f042 0201 	orr.w	r2, r2, #1
 8003112:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003114:	2300      	movs	r3, #0
    hi2c->State = HAL_I2C_STATE_READY;
 8003116:	f880 4041 	strb.w	r4, [r0, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 800311a:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40

    return HAL_OK;
 800311e:	4618      	mov	r0, r3
 8003120:	bd10      	pop	{r4, pc}
  }
  else
  {
    return HAL_BUSY;
 8003122:	2002      	movs	r0, #2
  }
}
 8003124:	bd10      	pop	{r4, pc}

08003126 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8003126:	b5f0      	push	{r4, r5, r6, r7, lr}
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8003128:	4604      	mov	r4, r0
{
 800312a:	b08b      	sub	sp, #44	; 0x2c
  if (hpcd == NULL)
 800312c:	b360      	cbz	r0, 8003188 <HAL_PCD_Init+0x62>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800312e:	f890 33bd 	ldrb.w	r3, [r0, #957]	; 0x3bd
  USBx = hpcd->Instance;
 8003132:	6805      	ldr	r5, [r0, #0]
  if (hpcd->State == HAL_PCD_STATE_RESET)
 8003134:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8003138:	b91b      	cbnz	r3, 8003142 <HAL_PCD_Init+0x1c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800313a:	f880 23bc 	strb.w	r2, [r0, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800313e:	f00b fe73 	bl	800ee28 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8003142:	2303      	movs	r3, #3
 8003144:	f884 33bd 	strb.w	r3, [r4, #957]	; 0x3bd

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8003148:	6beb      	ldr	r3, [r5, #60]	; 0x3c
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800314a:	4625      	mov	r5, r4
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800314c:	f413 7380 	ands.w	r3, r3, #256	; 0x100
  __HAL_PCD_DISABLE(hpcd);
 8003150:	f855 0b10 	ldr.w	r0, [r5], #16
    hpcd->Init.dma_enable = 0U;
 8003154:	bf08      	it	eq
 8003156:	6123      	streq	r3, [r4, #16]
  __HAL_PCD_DISABLE(hpcd);
 8003158:	f003 f806 	bl	8006168 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800315c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800315e:	466e      	mov	r6, sp
 8003160:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8003162:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003164:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8003166:	e895 0003 	ldmia.w	r5, {r0, r1}
 800316a:	e886 0003 	stmia.w	r6, {r0, r1}
 800316e:	4625      	mov	r5, r4
 8003170:	1d27      	adds	r7, r4, #4
 8003172:	e897 000e 	ldmia.w	r7, {r1, r2, r3}
 8003176:	f855 0b10 	ldr.w	r0, [r5], #16
 800317a:	f002 ff43 	bl	8006004 <USB_CoreInit>
 800317e:	4606      	mov	r6, r0
 8003180:	b120      	cbz	r0, 800318c <HAL_PCD_Init+0x66>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003182:	2302      	movs	r3, #2
 8003184:	f884 33bd 	strb.w	r3, [r4, #957]	; 0x3bd
    return HAL_ERROR;
 8003188:	2501      	movs	r5, #1
 800318a:	e056      	b.n	800323a <HAL_PCD_Init+0x114>
    return HAL_ERROR;
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800318c:	4601      	mov	r1, r0
 800318e:	6820      	ldr	r0, [r4, #0]
 8003190:	f002 fff0 	bl	8006174 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003194:	4630      	mov	r0, r6
 8003196:	f8d4 e004 	ldr.w	lr, [r4, #4]
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800319a:	261c      	movs	r6, #28
 800319c:	f04f 0c01 	mov.w	ip, #1
    hpcd->IN_ep[i].num = i;
    hpcd->IN_ep[i].tx_fifo_num = i;
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80031a0:	4601      	mov	r1, r0
 80031a2:	b2c2      	uxtb	r2, r0
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80031a4:	4596      	cmp	lr, r2
 80031a6:	f100 0001 	add.w	r0, r0, #1
 80031aa:	d81c      	bhi.n	80031e6 <HAL_PCD_Init+0xc0>
 80031ac:	2300      	movs	r3, #0
    hpcd->IN_ep[i].xfer_len = 0U;
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80031ae:	261c      	movs	r6, #28
 80031b0:	4619      	mov	r1, r3
 80031b2:	b2d8      	uxtb	r0, r3
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80031b4:	4586      	cmp	lr, r0
 80031b6:	f103 0301 	add.w	r3, r3, #1
 80031ba:	d822      	bhi.n	8003202 <HAL_PCD_Init+0xdc>
    hpcd->OUT_ep[i].xfer_buff = 0U;
    hpcd->OUT_ep[i].xfer_len = 0U;
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80031bc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80031be:	466e      	mov	r6, sp
 80031c0:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 80031c2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80031c4:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 80031c6:	e895 0003 	ldmia.w	r5, {r0, r1}
 80031ca:	e886 0003 	stmia.w	r6, {r0, r1}
 80031ce:	e897 000e 	ldmia.w	r7, {r1, r2, r3}
 80031d2:	6820      	ldr	r0, [r4, #0]
 80031d4:	f003 f810 	bl	80061f8 <USB_DevInit>
 80031d8:	2301      	movs	r3, #1
 80031da:	4605      	mov	r5, r0
 80031dc:	b300      	cbz	r0, 8003220 <HAL_PCD_Init+0xfa>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80031de:	2202      	movs	r2, #2
 80031e0:	f884 23bd 	strb.w	r2, [r4, #957]	; 0x3bd
 80031e4:	e7d0      	b.n	8003188 <HAL_PCD_Init+0x62>
    hpcd->IN_ep[i].is_in = 1U;
 80031e6:	fb06 4302 	mla	r3, r6, r2, r4
 80031ea:	f883 c03d 	strb.w	ip, [r3, #61]	; 0x3d
    hpcd->IN_ep[i].num = i;
 80031ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    hpcd->IN_ep[i].tx_fifo_num = i;
 80031f2:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80031f6:	f883 103f 	strb.w	r1, [r3, #63]	; 0x3f
    hpcd->IN_ep[i].maxpacket = 0U;
 80031fa:	6459      	str	r1, [r3, #68]	; 0x44
    hpcd->IN_ep[i].xfer_buff = 0U;
 80031fc:	6499      	str	r1, [r3, #72]	; 0x48
    hpcd->IN_ep[i].xfer_len = 0U;
 80031fe:	6519      	str	r1, [r3, #80]	; 0x50
 8003200:	e7cf      	b.n	80031a2 <HAL_PCD_Init+0x7c>
    hpcd->OUT_ep[i].is_in = 0U;
 8003202:	fb06 4200 	mla	r2, r6, r0, r4
 8003206:	f882 11fd 	strb.w	r1, [r2, #509]	; 0x1fd
    hpcd->OUT_ep[i].num = i;
 800320a:	f882 01fc 	strb.w	r0, [r2, #508]	; 0x1fc
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800320e:	f882 11ff 	strb.w	r1, [r2, #511]	; 0x1ff
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003212:	f8c2 1204 	str.w	r1, [r2, #516]	; 0x204
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003216:	f8c2 1208 	str.w	r1, [r2, #520]	; 0x208
    hpcd->OUT_ep[i].xfer_len = 0U;
 800321a:	f8c2 1210 	str.w	r1, [r2, #528]	; 0x210
 800321e:	e7c8      	b.n	80031b2 <HAL_PCD_Init+0x8c>
    return HAL_ERROR;
  }

  hpcd->USB_Address = 0U;
 8003220:	f884 0038 	strb.w	r0, [r4, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8003224:	f884 33bd 	strb.w	r3, [r4, #957]	; 0x3bd
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8003228:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800322a:	2b01      	cmp	r3, #1
 800322c:	d102      	bne.n	8003234 <HAL_PCD_Init+0x10e>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800322e:	4620      	mov	r0, r4
 8003230:	f000 fbe8 	bl	8003a04 <HAL_PCDEx_ActivateLPM>
  }
  
  (void)USB_DevDisconnect(hpcd->Instance);
 8003234:	6820      	ldr	r0, [r4, #0]
 8003236:	f003 fac1 	bl	80067bc <USB_DevDisconnect>

  return HAL_OK;
}
 800323a:	4628      	mov	r0, r5
 800323c:	b00b      	add	sp, #44	; 0x2c
 800323e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003240 <HAL_PCD_Start>:
{
#if defined (USB_OTG_FS)
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  __HAL_LOCK(hpcd);
 8003240:	f890 33bc 	ldrb.w	r3, [r0, #956]	; 0x3bc
 8003244:	2b01      	cmp	r3, #1
{
 8003246:	b510      	push	{r4, lr}
 8003248:	4604      	mov	r4, r0
  __HAL_LOCK(hpcd);
 800324a:	d013      	beq.n	8003274 <HAL_PCD_Start+0x34>
 800324c:	2301      	movs	r3, #1
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800324e:	6800      	ldr	r0, [r0, #0]
  __HAL_LOCK(hpcd);
 8003250:	f884 33bc 	strb.w	r3, [r4, #956]	; 0x3bc
#if defined (USB_OTG_FS)
  if (hpcd->Init.battery_charging_enable == 1U)
 8003254:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8003256:	2b01      	cmp	r3, #1
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8003258:	bf02      	ittt	eq
 800325a:	6b83      	ldreq	r3, [r0, #56]	; 0x38
 800325c:	f443 3380 	orreq.w	r3, r3, #65536	; 0x10000
 8003260:	6383      	streq	r3, [r0, #56]	; 0x38
  }
#endif /* defined (USB_OTG_FS) */
  (void)USB_DevConnect(hpcd->Instance);
 8003262:	f003 fa9f 	bl	80067a4 <USB_DevConnect>
  __HAL_PCD_ENABLE(hpcd);
 8003266:	6820      	ldr	r0, [r4, #0]
 8003268:	f002 ff78 	bl	800615c <USB_EnableGlobalInt>
  __HAL_UNLOCK(hpcd);
 800326c:	2000      	movs	r0, #0
 800326e:	f884 03bc 	strb.w	r0, [r4, #956]	; 0x3bc
  return HAL_OK;
 8003272:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hpcd);
 8003274:	2002      	movs	r0, #2
}
 8003276:	bd10      	pop	{r4, pc}

08003278 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8003278:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800327c:	6806      	ldr	r6, [r0, #0]
{
 800327e:	b085      	sub	sp, #20
 8003280:	4604      	mov	r4, r0
  uint32_t i, ep_intr, epint, epnum = 0U;
  uint32_t fifoemptymsk, temp;
  USB_OTG_EPTypeDef *ep;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8003282:	4630      	mov	r0, r6
 8003284:	f003 fad5 	bl	8006832 <USB_GetMode>
 8003288:	9000      	str	r0, [sp, #0]
 800328a:	2800      	cmp	r0, #0
 800328c:	f040 814a 	bne.w	8003524 <HAL_PCD_IRQHandler+0x2ac>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8003290:	6820      	ldr	r0, [r4, #0]
 8003292:	f003 fa9f 	bl	80067d4 <USB_ReadInterrupts>
 8003296:	2800      	cmp	r0, #0
 8003298:	f000 8144 	beq.w	8003524 <HAL_PCD_IRQHandler+0x2ac>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 800329c:	6820      	ldr	r0, [r4, #0]
 800329e:	f003 fa99 	bl	80067d4 <USB_ReadInterrupts>
 80032a2:	0785      	lsls	r5, r0, #30
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80032a4:	bf48      	it	mi
 80032a6:	6822      	ldrmi	r2, [r4, #0]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80032a8:	6820      	ldr	r0, [r4, #0]
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80032aa:	bf42      	ittt	mi
 80032ac:	6953      	ldrmi	r3, [r2, #20]
 80032ae:	f003 0302 	andmi.w	r3, r3, #2
 80032b2:	6153      	strmi	r3, [r2, #20]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80032b4:	f003 fa8e 	bl	80067d4 <USB_ReadInterrupts>
 80032b8:	f410 2500 	ands.w	r5, r0, #524288	; 0x80000
 80032bc:	d00e      	beq.n	80032dc <HAL_PCD_IRQHandler+0x64>
    {
      epnum = 0U;

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80032be:	6820      	ldr	r0, [r4, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;


  if ((gSNPSiD == USB_OTG_CORE_ID_310A) &&
 80032c0:	f8df a480 	ldr.w	sl, [pc, #1152]	; 8003744 <HAL_PCD_IRQHandler+0x4cc>
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80032c4:	f003 fa8a 	bl	80067dc <USB_ReadDevAllOutEpInterrupt>
 80032c8:	f506 6730 	add.w	r7, r6, #2816	; 0xb00
 80032cc:	4680      	mov	r8, r0
      epnum = 0U;
 80032ce:	2500      	movs	r5, #0
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80032d0:	f04f 0920 	mov.w	r9, #32
      while (ep_intr != 0U)
 80032d4:	f1b8 0f00 	cmp.w	r8, #0
 80032d8:	f040 8127 	bne.w	800352a <HAL_PCD_IRQHandler+0x2b2>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 80032dc:	6820      	ldr	r0, [r4, #0]
 80032de:	f003 fa79 	bl	80067d4 <USB_ReadInterrupts>
 80032e2:	0342      	lsls	r2, r0, #13
 80032e4:	d50b      	bpl.n	80032fe <HAL_PCD_IRQHandler+0x86>
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 80032e6:	6820      	ldr	r0, [r4, #0]
 80032e8:	f003 fa80 	bl	80067ec <USB_ReadDevAllInEpInterrupt>
 80032ec:	4627      	mov	r7, r4
 80032ee:	4683      	mov	fp, r0
 80032f0:	f506 6a10 	add.w	sl, r6, #2304	; 0x900
      epnum = 0U;
 80032f4:	2500      	movs	r5, #0
      while (ep_intr != 0U)
 80032f6:	f1bb 0f00 	cmp.w	fp, #0
 80032fa:	f040 8168 	bne.w	80035ce <HAL_PCD_IRQHandler+0x356>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80032fe:	6820      	ldr	r0, [r4, #0]
 8003300:	f003 fa68 	bl	80067d4 <USB_ReadInterrupts>
 8003304:	2800      	cmp	r0, #0
 8003306:	da15      	bge.n	8003334 <HAL_PCD_IRQHandler+0xbc>
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8003308:	f8d6 3804 	ldr.w	r3, [r6, #2052]	; 0x804
 800330c:	f023 0301 	bic.w	r3, r3, #1
 8003310:	f8c6 3804 	str.w	r3, [r6, #2052]	; 0x804
      if (hpcd->LPM_State == LPM_L1)
 8003314:	f894 33f4 	ldrb.w	r3, [r4, #1012]	; 0x3f4
 8003318:	2b01      	cmp	r3, #1
 800331a:	f040 81de 	bne.w	80036da <HAL_PCD_IRQHandler+0x462>
        hpcd->LPM_State = LPM_L0;
 800331e:	2100      	movs	r1, #0
 8003320:	f884 13f4 	strb.w	r1, [r4, #1012]	; 0x3f4
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8003324:	4620      	mov	r0, r4
 8003326:	f00b ff03 	bl	800f130 <HAL_PCDEx_LPM_Callback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 800332a:	6822      	ldr	r2, [r4, #0]
 800332c:	6953      	ldr	r3, [r2, #20]
 800332e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003332:	6153      	str	r3, [r2, #20]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8003334:	6820      	ldr	r0, [r4, #0]
 8003336:	f003 fa4d 	bl	80067d4 <USB_ReadInterrupts>
 800333a:	0503      	lsls	r3, r0, #20
 800333c:	d50b      	bpl.n	8003356 <HAL_PCD_IRQHandler+0xde>
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 800333e:	f8d6 3808 	ldr.w	r3, [r6, #2056]	; 0x808
 8003342:	07df      	lsls	r7, r3, #31
 8003344:	d502      	bpl.n	800334c <HAL_PCD_IRQHandler+0xd4>
        HAL_PCD_SuspendCallback(hpcd);
 8003346:	4620      	mov	r0, r4
 8003348:	f00b fdea 	bl	800ef20 <HAL_PCD_SuspendCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 800334c:	6822      	ldr	r2, [r4, #0]
 800334e:	6953      	ldr	r3, [r2, #20]
 8003350:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003354:	6153      	str	r3, [r2, #20]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 8003356:	6820      	ldr	r0, [r4, #0]
 8003358:	f003 fa3c 	bl	80067d4 <USB_ReadInterrupts>
 800335c:	0100      	lsls	r0, r0, #4
 800335e:	d514      	bpl.n	800338a <HAL_PCD_IRQHandler+0x112>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 8003360:	6823      	ldr	r3, [r4, #0]
 8003362:	695a      	ldr	r2, [r3, #20]
 8003364:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 8003368:	615a      	str	r2, [r3, #20]
      if (hpcd->LPM_State == LPM_L0)
 800336a:	f894 23f4 	ldrb.w	r2, [r4, #1012]	; 0x3f4
 800336e:	2a00      	cmp	r2, #0
 8003370:	f040 81b7 	bne.w	80036e2 <HAL_PCD_IRQHandler+0x46a>
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 8003374:	6d5b      	ldr	r3, [r3, #84]	; 0x54
        hpcd->LPM_State = LPM_L1;
 8003376:	2101      	movs	r1, #1
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 8003378:	f3c3 0383 	ubfx	r3, r3, #2, #4
        hpcd->LPM_State = LPM_L1;
 800337c:	f884 13f4 	strb.w	r1, [r4, #1012]	; 0x3f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 8003380:	f8c4 33f8 	str.w	r3, [r4, #1016]	; 0x3f8
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8003384:	4620      	mov	r0, r4
 8003386:	f00b fed3 	bl	800f130 <HAL_PCDEx_LPM_Callback>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 800338a:	6820      	ldr	r0, [r4, #0]
 800338c:	f003 fa22 	bl	80067d4 <USB_ReadInterrupts>
 8003390:	04c1      	lsls	r1, r0, #19
 8003392:	d534      	bpl.n	80033fe <HAL_PCD_IRQHandler+0x186>
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8003394:	f506 6700 	add.w	r7, r6, #2048	; 0x800
 8003398:	687b      	ldr	r3, [r7, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 800339a:	6820      	ldr	r0, [r4, #0]
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800339c:	f023 0301 	bic.w	r3, r3, #1
 80033a0:	607b      	str	r3, [r7, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80033a2:	2110      	movs	r1, #16
 80033a4:	f002 fefe 	bl	80061a4 <USB_FlushTxFifo>
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80033a8:	6860      	ldr	r0, [r4, #4]
 80033aa:	f506 6310 	add.w	r3, r6, #2304	; 0x900
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 80033ae:	f64f 317f 	movw	r1, #64383	; 0xfb7f
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80033b2:	9a00      	ldr	r2, [sp, #0]
 80033b4:	4282      	cmp	r2, r0
 80033b6:	f040 8198 	bne.w	80036ea <HAL_PCD_IRQHandler+0x472>
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 80033ba:	69fb      	ldr	r3, [r7, #28]
 80033bc:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 80033c0:	61fb      	str	r3, [r7, #28]
      if (hpcd->Init.use_dedicated_ep1 != 0U)
 80033c2:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	f000 81a2 	beq.w	800370e <HAL_PCD_IRQHandler+0x496>
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 80033ca:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80033ce:	f043 030b 	orr.w	r3, r3, #11
 80033d2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 80033d6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80033d8:	f043 030b 	orr.w	r3, r3, #11
 80033dc:	647b      	str	r3, [r7, #68]	; 0x44
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80033de:	f8d6 3800 	ldr.w	r3, [r6, #2048]	; 0x800
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 80033e2:	6820      	ldr	r0, [r4, #0]
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80033e4:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80033e8:	f8c6 3800 	str.w	r3, [r6, #2048]	; 0x800
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 80033ec:	f504 7171 	add.w	r1, r4, #964	; 0x3c4
 80033f0:	f003 fa3e 	bl	8006870 <USB_EP0_OutStart>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 80033f4:	6822      	ldr	r2, [r4, #0]
 80033f6:	6953      	ldr	r3, [r2, #20]
 80033f8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80033fc:	6153      	str	r3, [r2, #20]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 80033fe:	6820      	ldr	r0, [r4, #0]
 8003400:	f003 f9e8 	bl	80067d4 <USB_ReadInterrupts>
 8003404:	0482      	lsls	r2, r0, #18
 8003406:	d516      	bpl.n	8003436 <HAL_PCD_IRQHandler+0x1be>
      (void)USB_ActivateSetup(hpcd->Instance);
 8003408:	6820      	ldr	r0, [r4, #0]
 800340a:	f003 fa16 	bl	800683a <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 800340e:	6820      	ldr	r0, [r4, #0]
 8003410:	f002 ff9a 	bl	8006348 <USB_GetDevSpeed>
 8003414:	60e0      	str	r0, [r4, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8003416:	6827      	ldr	r7, [r4, #0]
 8003418:	f000 ff5c 	bl	80042d4 <HAL_RCC_GetHCLKFreq>
 800341c:	7b22      	ldrb	r2, [r4, #12]
 800341e:	4601      	mov	r1, r0
 8003420:	4638      	mov	r0, r7
 8003422:	f002 fe27 	bl	8006074 <USB_SetTurnaroundTime>
      HAL_PCD_ResetCallback(hpcd);
 8003426:	4620      	mov	r0, r4
 8003428:	f00b fd67 	bl	800eefa <HAL_PCD_ResetCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 800342c:	6822      	ldr	r2, [r4, #0]
 800342e:	6953      	ldr	r3, [r2, #20]
 8003430:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003434:	6153      	str	r3, [r2, #20]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8003436:	6820      	ldr	r0, [r4, #0]
 8003438:	f003 f9cc 	bl	80067d4 <USB_ReadInterrupts>
 800343c:	06c3      	lsls	r3, r0, #27
 800343e:	d52b      	bpl.n	8003498 <HAL_PCD_IRQHandler+0x220>
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003440:	6822      	ldr	r2, [r4, #0]
 8003442:	6993      	ldr	r3, [r2, #24]
 8003444:	f023 0310 	bic.w	r3, r3, #16
 8003448:	6193      	str	r3, [r2, #24]
      temp = USBx->GRXSTSP;
 800344a:	6a37      	ldr	r7, [r6, #32]
      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 800344c:	f3c7 4343 	ubfx	r3, r7, #17, #4
 8003450:	2b02      	cmp	r3, #2
      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 8003452:	f007 090f 	and.w	r9, r7, #15
      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8003456:	f040 8165 	bne.w	8003724 <HAL_PCD_IRQHandler+0x4ac>
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 800345a:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 800345e:	421f      	tst	r7, r3
 8003460:	d015      	beq.n	800348e <HAL_PCD_IRQHandler+0x216>
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8003462:	f04f 081c 	mov.w	r8, #28
 8003466:	fb08 4809 	mla	r8, r8, r9, r4
 800346a:	f3c7 170a 	ubfx	r7, r7, #4, #11
 800346e:	463a      	mov	r2, r7
 8003470:	f8d8 1208 	ldr.w	r1, [r8, #520]	; 0x208
 8003474:	4630      	mov	r0, r6
 8003476:	f003 f91f 	bl	80066b8 <USB_ReadPacket>
          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800347a:	f8d8 3208 	ldr.w	r3, [r8, #520]	; 0x208
 800347e:	443b      	add	r3, r7
 8003480:	f8c8 3208 	str.w	r3, [r8, #520]	; 0x208
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003484:	f8d8 3214 	ldr.w	r3, [r8, #532]	; 0x214
 8003488:	441f      	add	r7, r3
 800348a:	f8c8 7214 	str.w	r7, [r8, #532]	; 0x214
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800348e:	6822      	ldr	r2, [r4, #0]
 8003490:	6993      	ldr	r3, [r2, #24]
 8003492:	f043 0310 	orr.w	r3, r3, #16
 8003496:	6193      	str	r3, [r2, #24]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8003498:	6820      	ldr	r0, [r4, #0]
 800349a:	f003 f99b 	bl	80067d4 <USB_ReadInterrupts>
 800349e:	0707      	lsls	r7, r0, #28
 80034a0:	d507      	bpl.n	80034b2 <HAL_PCD_IRQHandler+0x23a>
      HAL_PCD_SOFCallback(hpcd);
 80034a2:	4620      	mov	r0, r4
 80034a4:	f00b fd25 	bl	800eef2 <HAL_PCD_SOFCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 80034a8:	6822      	ldr	r2, [r4, #0]
 80034aa:	6953      	ldr	r3, [r2, #20]
 80034ac:	f003 0308 	and.w	r3, r3, #8
 80034b0:	6153      	str	r3, [r2, #20]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 80034b2:	6820      	ldr	r0, [r4, #0]
 80034b4:	f003 f98e 	bl	80067d4 <USB_ReadInterrupts>
 80034b8:	02c6      	lsls	r6, r0, #11
 80034ba:	d508      	bpl.n	80034ce <HAL_PCD_IRQHandler+0x256>
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 80034bc:	b2e9      	uxtb	r1, r5
 80034be:	4620      	mov	r0, r4
 80034c0:	f00b fd64 	bl	800ef8c <HAL_PCD_ISOINIncompleteCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 80034c4:	6822      	ldr	r2, [r4, #0]
 80034c6:	6953      	ldr	r3, [r2, #20]
 80034c8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80034cc:	6153      	str	r3, [r2, #20]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80034ce:	6820      	ldr	r0, [r4, #0]
 80034d0:	f003 f980 	bl	80067d4 <USB_ReadInterrupts>
 80034d4:	0280      	lsls	r0, r0, #10
 80034d6:	d508      	bpl.n	80034ea <HAL_PCD_IRQHandler+0x272>
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80034d8:	b2e9      	uxtb	r1, r5
 80034da:	4620      	mov	r0, r4
 80034dc:	f00b fd52 	bl	800ef84 <HAL_PCD_ISOOUTIncompleteCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80034e0:	6822      	ldr	r2, [r4, #0]
 80034e2:	6953      	ldr	r3, [r2, #20]
 80034e4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80034e8:	6153      	str	r3, [r2, #20]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 80034ea:	6820      	ldr	r0, [r4, #0]
 80034ec:	f003 f972 	bl	80067d4 <USB_ReadInterrupts>
 80034f0:	0041      	lsls	r1, r0, #1
 80034f2:	d507      	bpl.n	8003504 <HAL_PCD_IRQHandler+0x28c>
      HAL_PCD_ConnectCallback(hpcd);
 80034f4:	4620      	mov	r0, r4
 80034f6:	f00b fd4d 	bl	800ef94 <HAL_PCD_ConnectCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 80034fa:	6822      	ldr	r2, [r4, #0]
 80034fc:	6953      	ldr	r3, [r2, #20]
 80034fe:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8003502:	6153      	str	r3, [r2, #20]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8003504:	6820      	ldr	r0, [r4, #0]
 8003506:	f003 f965 	bl	80067d4 <USB_ReadInterrupts>
 800350a:	0742      	lsls	r2, r0, #29
 800350c:	d50a      	bpl.n	8003524 <HAL_PCD_IRQHandler+0x2ac>
      temp = hpcd->Instance->GOTGINT;
 800350e:	6823      	ldr	r3, [r4, #0]
 8003510:	685d      	ldr	r5, [r3, #4]
      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8003512:	076b      	lsls	r3, r5, #29
 8003514:	d502      	bpl.n	800351c <HAL_PCD_IRQHandler+0x2a4>
        HAL_PCD_DisconnectCallback(hpcd);
 8003516:	4620      	mov	r0, r4
 8003518:	f00b fd40 	bl	800ef9c <HAL_PCD_DisconnectCallback>
      hpcd->Instance->GOTGINT |= temp;
 800351c:	6823      	ldr	r3, [r4, #0]
 800351e:	685a      	ldr	r2, [r3, #4]
 8003520:	4315      	orrs	r5, r2
 8003522:	605d      	str	r5, [r3, #4]
}
 8003524:	b005      	add	sp, #20
 8003526:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        if ((ep_intr & 0x1U) != 0U)
 800352a:	f018 0f01 	tst.w	r8, #1
 800352e:	d040      	beq.n	80035b2 <HAL_PCD_IRQHandler+0x33a>
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8003530:	b2ea      	uxtb	r2, r5
 8003532:	4611      	mov	r1, r2
 8003534:	6820      	ldr	r0, [r4, #0]
 8003536:	9201      	str	r2, [sp, #4]
 8003538:	f003 f960 	bl	80067fc <USB_ReadDevOutEPInterrupt>
          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 800353c:	f010 0f01 	tst.w	r0, #1
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8003540:	4683      	mov	fp, r0
          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8003542:	9a01      	ldr	r2, [sp, #4]
 8003544:	d00f      	beq.n	8003566 <HAL_PCD_IRQHandler+0x2ee>
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8003546:	2101      	movs	r1, #1
 8003548:	60b9      	str	r1, [r7, #8]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800354a:	6821      	ldr	r1, [r4, #0]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800354c:	6c08      	ldr	r0, [r1, #64]	; 0x40
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800354e:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8003552:	eb01 1145 	add.w	r1, r1, r5, lsl #5
  if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8003556:	4550      	cmp	r0, sl
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003558:	688b      	ldr	r3, [r1, #8]
  if (gSNPSiD == USB_OTG_CORE_ID_310A)
 800355a:	d133      	bne.n	80035c4 <HAL_PCD_IRQHandler+0x34c>
    if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 800355c:	0418      	lsls	r0, r3, #16
 800355e:	d52d      	bpl.n	80035bc <HAL_PCD_IRQHandler+0x344>
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003560:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8003564:	608a      	str	r2, [r1, #8]
          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8003566:	f01b 0f08 	tst.w	fp, #8
 800356a:	d012      	beq.n	8003592 <HAL_PCD_IRQHandler+0x31a>
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800356c:	6822      	ldr	r2, [r4, #0]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800356e:	6c11      	ldr	r1, [r2, #64]	; 0x40
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003570:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003574:	eb02 1245 	add.w	r2, r2, r5, lsl #5
  if ((gSNPSiD == USB_OTG_CORE_ID_310A) &&
 8003578:	4551      	cmp	r1, sl
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800357a:	6890      	ldr	r0, [r2, #8]
  if ((gSNPSiD == USB_OTG_CORE_ID_310A) &&
 800357c:	d104      	bne.n	8003588 <HAL_PCD_IRQHandler+0x310>
 800357e:	0401      	lsls	r1, r0, #16
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003580:	bf44      	itt	mi
 8003582:	f44f 4100 	movmi.w	r1, #32768	; 0x8000
 8003586:	6091      	strmi	r1, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8003588:	4620      	mov	r0, r4
 800358a:	f00b fc9b 	bl	800eec4 <HAL_PCD_SetupStageCallback>
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 800358e:	2208      	movs	r2, #8
 8003590:	60ba      	str	r2, [r7, #8]
          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8003592:	f01b 0f10 	tst.w	fp, #16
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8003596:	bf1c      	itt	ne
 8003598:	2210      	movne	r2, #16
 800359a:	60ba      	strne	r2, [r7, #8]
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800359c:	f01b 0f20 	tst.w	fp, #32
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80035a0:	bf18      	it	ne
 80035a2:	f8c7 9008 	strne.w	r9, [r7, #8]
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 80035a6:	f41b 5f00 	tst.w	fp, #8192	; 0x2000
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 80035aa:	bf1c      	itt	ne
 80035ac:	f44f 5300 	movne.w	r3, #8192	; 0x2000
 80035b0:	60bb      	strne	r3, [r7, #8]
        epnum++;
 80035b2:	3501      	adds	r5, #1
        ep_intr >>= 1U;
 80035b4:	ea4f 0858 	mov.w	r8, r8, lsr #1
 80035b8:	3720      	adds	r7, #32
 80035ba:	e68b      	b.n	80032d4 <HAL_PCD_IRQHandler+0x5c>
      if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80035bc:	0698      	lsls	r0, r3, #26
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80035be:	bf48      	it	mi
 80035c0:	f8c1 9008 	strmi.w	r9, [r1, #8]
    HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80035c4:	4611      	mov	r1, r2
 80035c6:	4620      	mov	r0, r4
 80035c8:	f00b fc82 	bl	800eed0 <HAL_PCD_DataOutStageCallback>
 80035cc:	e7cb      	b.n	8003566 <HAL_PCD_IRQHandler+0x2ee>
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 80035ce:	f01b 0f01 	tst.w	fp, #1
 80035d2:	d07b      	beq.n	80036cc <HAL_PCD_IRQHandler+0x454>
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80035d4:	b2eb      	uxtb	r3, r5
 80035d6:	4619      	mov	r1, r3
 80035d8:	6820      	ldr	r0, [r4, #0]
 80035da:	9301      	str	r3, [sp, #4]
 80035dc:	f003 f917 	bl	800680e <USB_ReadDevInEPInterrupt>
          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80035e0:	f010 0f01 	tst.w	r0, #1
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80035e4:	4680      	mov	r8, r0
          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80035e6:	d010      	beq.n	800360a <HAL_PCD_IRQHandler+0x392>
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80035e8:	f8d6 3834 	ldr.w	r3, [r6, #2100]	; 0x834
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 80035ec:	9901      	ldr	r1, [sp, #4]
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80035ee:	2001      	movs	r0, #1
 80035f0:	f005 020f 	and.w	r2, r5, #15
 80035f4:	fa00 f202 	lsl.w	r2, r0, r2
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80035f8:	ea23 0302 	bic.w	r3, r3, r2
 80035fc:	f8c6 3834 	str.w	r3, [r6, #2100]	; 0x834
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8003600:	f8ca 0008 	str.w	r0, [sl, #8]
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8003604:	4620      	mov	r0, r4
 8003606:	f00b fc6c 	bl	800eee2 <HAL_PCD_DataInStageCallback>
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 800360a:	f018 0f08 	tst.w	r8, #8
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 800360e:	bf1c      	itt	ne
 8003610:	2308      	movne	r3, #8
 8003612:	f8ca 3008 	strne.w	r3, [sl, #8]
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8003616:	f018 0f10 	tst.w	r8, #16
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 800361a:	bf1c      	itt	ne
 800361c:	2310      	movne	r3, #16
 800361e:	f8ca 3008 	strne.w	r3, [sl, #8]
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8003622:	f018 0f40 	tst.w	r8, #64	; 0x40
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8003626:	bf1c      	itt	ne
 8003628:	2340      	movne	r3, #64	; 0x40
 800362a:	f8ca 3008 	strne.w	r3, [sl, #8]
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 800362e:	f018 0f02 	tst.w	r8, #2
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8003632:	bf1c      	itt	ne
 8003634:	2302      	movne	r3, #2
 8003636:	f8ca 3008 	strne.w	r3, [sl, #8]
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 800363a:	f018 0f80 	tst.w	r8, #128	; 0x80
 800363e:	d045      	beq.n	80036cc <HAL_PCD_IRQHandler+0x454>
  if (ep->xfer_count > ep->xfer_len)
 8003640:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8003642:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003644:	429a      	cmp	r2, r3
 8003646:	d841      	bhi.n	80036cc <HAL_PCD_IRQHandler+0x454>
  len = ep->xfer_len - ep->xfer_count;
 8003648:	eba3 0802 	sub.w	r8, r3, r2
  len32b = (len + 3U) / 4U;
 800364c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800364e:	6821      	ldr	r1, [r4, #0]
 8003650:	9102      	str	r1, [sp, #8]
  len32b = (len + 3U) / 4U;
 8003652:	4598      	cmp	r8, r3
 8003654:	bf28      	it	cs
 8003656:	4698      	movcs	r8, r3
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003658:	f501 6310 	add.w	r3, r1, #2304	; 0x900
  len32b = (len + 3U) / 4U;
 800365c:	f108 0803 	add.w	r8, r8, #3
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003660:	eb03 1345 	add.w	r3, r3, r5, lsl #5
  len32b = (len + 3U) / 4U;
 8003664:	ea4f 0898 	mov.w	r8, r8, lsr #2
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003668:	9303      	str	r3, [sp, #12]
 800366a:	9b03      	ldr	r3, [sp, #12]
 800366c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800366e:	699b      	ldr	r3, [r3, #24]
 8003670:	b29b      	uxth	r3, r3
 8003672:	4543      	cmp	r3, r8
 8003674:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003676:	d327      	bcc.n	80036c8 <HAL_PCD_IRQHandler+0x450>
 8003678:	4293      	cmp	r3, r2
 800367a:	d925      	bls.n	80036c8 <HAL_PCD_IRQHandler+0x450>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800367c:	b963      	cbnz	r3, 8003698 <HAL_PCD_IRQHandler+0x420>
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800367e:	9b02      	ldr	r3, [sp, #8]
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003680:	f005 010f 	and.w	r1, r5, #15
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003684:	f8d3 2834 	ldr.w	r2, [r3, #2100]	; 0x834
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003688:	2001      	movs	r0, #1
 800368a:	fa00 f101 	lsl.w	r1, r0, r1
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800368e:	ea22 0201 	bic.w	r2, r2, r1
 8003692:	f8c3 2834 	str.w	r2, [r3, #2100]	; 0x834
 8003696:	e019      	b.n	80036cc <HAL_PCD_IRQHandler+0x454>
    len = ep->xfer_len - ep->xfer_count;
 8003698:	eba3 0902 	sub.w	r9, r3, r2
 800369c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len);
 800369e:	9a01      	ldr	r2, [sp, #4]
 80036a0:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 80036a2:	9802      	ldr	r0, [sp, #8]
 80036a4:	4599      	cmp	r9, r3
 80036a6:	bf28      	it	cs
 80036a8:	4699      	movcs	r9, r3
 80036aa:	fa1f f389 	uxth.w	r3, r9
 80036ae:	f002 ff3b 	bl	8006528 <USB_WritePacket>
    ep->xfer_buff  += len;
 80036b2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80036b4:	444b      	add	r3, r9
 80036b6:	64bb      	str	r3, [r7, #72]	; 0x48
    ep->xfer_count += len;
 80036b8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    len32b = (len + 3U) / 4U;
 80036ba:	f109 0803 	add.w	r8, r9, #3
    ep->xfer_count += len;
 80036be:	444b      	add	r3, r9
    len32b = (len + 3U) / 4U;
 80036c0:	ea4f 0898 	mov.w	r8, r8, lsr #2
    ep->xfer_count += len;
 80036c4:	657b      	str	r3, [r7, #84]	; 0x54
 80036c6:	e7d0      	b.n	800366a <HAL_PCD_IRQHandler+0x3f2>
  if (ep->xfer_len <= ep->xfer_count)
 80036c8:	4293      	cmp	r3, r2
 80036ca:	d9d8      	bls.n	800367e <HAL_PCD_IRQHandler+0x406>
        epnum++;
 80036cc:	3501      	adds	r5, #1
        ep_intr >>= 1U;
 80036ce:	ea4f 0b5b 	mov.w	fp, fp, lsr #1
 80036d2:	371c      	adds	r7, #28
 80036d4:	f10a 0a20 	add.w	sl, sl, #32
 80036d8:	e60d      	b.n	80032f6 <HAL_PCD_IRQHandler+0x7e>
        HAL_PCD_ResumeCallback(hpcd);
 80036da:	4620      	mov	r0, r4
 80036dc:	f00b fc38 	bl	800ef50 <HAL_PCD_ResumeCallback>
 80036e0:	e623      	b.n	800332a <HAL_PCD_IRQHandler+0xb2>
        HAL_PCD_SuspendCallback(hpcd);
 80036e2:	4620      	mov	r0, r4
 80036e4:	f00b fc1c 	bl	800ef20 <HAL_PCD_SuspendCallback>
 80036e8:	e64f      	b.n	800338a <HAL_PCD_IRQHandler+0x112>
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 80036ea:	6099      	str	r1, [r3, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80036ec:	681a      	ldr	r2, [r3, #0]
 80036ee:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
 80036f2:	601a      	str	r2, [r3, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 80036f4:	f8c3 1208 	str.w	r1, [r3, #520]	; 0x208
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80036f8:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 80036fc:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
 8003700:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003704:	9a00      	ldr	r2, [sp, #0]
 8003706:	3201      	adds	r2, #1
 8003708:	9200      	str	r2, [sp, #0]
 800370a:	3320      	adds	r3, #32
 800370c:	e651      	b.n	80033b2 <HAL_PCD_IRQHandler+0x13a>
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 800370e:	697b      	ldr	r3, [r7, #20]
 8003710:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003714:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8003718:	617b      	str	r3, [r7, #20]
        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 800371a:	693b      	ldr	r3, [r7, #16]
 800371c:	f043 030b 	orr.w	r3, r3, #11
 8003720:	613b      	str	r3, [r7, #16]
 8003722:	e65c      	b.n	80033de <HAL_PCD_IRQHandler+0x166>
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 8003724:	2b06      	cmp	r3, #6
 8003726:	f47f aeb2 	bne.w	800348e <HAL_PCD_IRQHandler+0x216>
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 800372a:	2208      	movs	r2, #8
 800372c:	f504 7171 	add.w	r1, r4, #964	; 0x3c4
 8003730:	4630      	mov	r0, r6
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003732:	f04f 081c 	mov.w	r8, #28
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8003736:	f002 ffbf 	bl	80066b8 <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800373a:	fb08 4809 	mla	r8, r8, r9, r4
 800373e:	f3c7 170a 	ubfx	r7, r7, #4, #11
 8003742:	e69f      	b.n	8003484 <HAL_PCD_IRQHandler+0x20c>
 8003744:	4f54310a 	.word	0x4f54310a

08003748 <HAL_PCD_SetAddress>:
  __HAL_LOCK(hpcd);
 8003748:	f890 23bc 	ldrb.w	r2, [r0, #956]	; 0x3bc
 800374c:	2a01      	cmp	r2, #1
{
 800374e:	b510      	push	{r4, lr}
 8003750:	4604      	mov	r4, r0
  __HAL_LOCK(hpcd);
 8003752:	d00b      	beq.n	800376c <HAL_PCD_SetAddress+0x24>
 8003754:	2201      	movs	r2, #1
 8003756:	f880 23bc 	strb.w	r2, [r0, #956]	; 0x3bc
  hpcd->USB_Address = address;
 800375a:	f884 1038 	strb.w	r1, [r4, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800375e:	6800      	ldr	r0, [r0, #0]
 8003760:	f003 f810 	bl	8006784 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8003764:	2000      	movs	r0, #0
 8003766:	f884 03bc 	strb.w	r0, [r4, #956]	; 0x3bc
  return HAL_OK;
 800376a:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hpcd);
 800376c:	2002      	movs	r0, #2
}
 800376e:	bd10      	pop	{r4, pc}

08003770 <HAL_PCD_EP_Open>:
{
 8003770:	b570      	push	{r4, r5, r6, lr}
 8003772:	4604      	mov	r4, r0
 8003774:	f001 000f 	and.w	r0, r1, #15
  if ((ep_addr & 0x80U) == 0x80U)
 8003778:	f011 0f80 	tst.w	r1, #128	; 0x80
 800377c:	f04f 061c 	mov.w	r6, #28
 8003780:	b2c5      	uxtb	r5, r0
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003782:	fb06 4105 	mla	r1, r6, r5, r4
    ep->is_in = 1U;
 8003786:	bf15      	itete	ne
 8003788:	fb06 4505 	mlane	r5, r6, r5, r4
    ep->is_in = 0U;
 800378c:	fb06 4505 	mlaeq	r5, r6, r5, r4
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003790:	313c      	addne	r1, #60	; 0x3c
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003792:	f501 71fe 	addeq.w	r1, r1, #508	; 0x1fc
    ep->is_in = 1U;
 8003796:	bf15      	itete	ne
 8003798:	2601      	movne	r6, #1
    ep->is_in = 0U;
 800379a:	2600      	moveq	r6, #0
    ep->is_in = 1U;
 800379c:	f885 603d 	strbne.w	r6, [r5, #61]	; 0x3d
    ep->is_in = 0U;
 80037a0:	f885 61fd 	strbeq.w	r6, [r5, #509]	; 0x1fd
  ep->maxpacket = ep_mps;
 80037a4:	608a      	str	r2, [r1, #8]
  if (ep->is_in != 0U)
 80037a6:	784a      	ldrb	r2, [r1, #1]
  ep->type = ep_type;
 80037a8:	70cb      	strb	r3, [r1, #3]
  ep->num = ep_addr & EP_ADDR_MSK;
 80037aa:	b2c0      	uxtb	r0, r0
 80037ac:	7008      	strb	r0, [r1, #0]
  if (ep->is_in != 0U)
 80037ae:	b102      	cbz	r2, 80037b2 <HAL_PCD_EP_Open+0x42>
    ep->tx_fifo_num = ep->num;
 80037b0:	80c8      	strh	r0, [r1, #6]
  if (ep_type == EP_TYPE_BULK)
 80037b2:	2b02      	cmp	r3, #2
    ep->data_pid_start = 0U;
 80037b4:	bf04      	itt	eq
 80037b6:	2300      	moveq	r3, #0
 80037b8:	710b      	strbeq	r3, [r1, #4]
  __HAL_LOCK(hpcd);
 80037ba:	f894 33bc 	ldrb.w	r3, [r4, #956]	; 0x3bc
 80037be:	2b01      	cmp	r3, #1
 80037c0:	d009      	beq.n	80037d6 <HAL_PCD_EP_Open+0x66>
 80037c2:	2301      	movs	r3, #1
 80037c4:	f884 33bc 	strb.w	r3, [r4, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80037c8:	6820      	ldr	r0, [r4, #0]
 80037ca:	f002 fdc7 	bl	800635c <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80037ce:	2000      	movs	r0, #0
 80037d0:	f884 03bc 	strb.w	r0, [r4, #956]	; 0x3bc
  return ret;
 80037d4:	bd70      	pop	{r4, r5, r6, pc}
  __HAL_LOCK(hpcd);
 80037d6:	2002      	movs	r0, #2
}
 80037d8:	bd70      	pop	{r4, r5, r6, pc}

080037da <HAL_PCD_EP_Close>:
{
 80037da:	f001 030f 	and.w	r3, r1, #15
 80037de:	b2da      	uxtb	r2, r3
 80037e0:	b510      	push	{r4, lr}
 80037e2:	4604      	mov	r4, r0
 80037e4:	201c      	movs	r0, #28
  if ((ep_addr & 0x80U) == 0x80U)
 80037e6:	f011 0f80 	tst.w	r1, #128	; 0x80
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80037ea:	fb00 4102 	mla	r1, r0, r2, r4
 80037ee:	bf19      	ittee	ne
 80037f0:	313c      	addne	r1, #60	; 0x3c
    ep->is_in = 1U;
 80037f2:	fb00 4202 	mlane	r2, r0, r2, r4
    ep->is_in = 0U;
 80037f6:	fb00 4202 	mlaeq	r2, r0, r2, r4
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80037fa:	f501 71fe 	addeq.w	r1, r1, #508	; 0x1fc
    ep->is_in = 1U;
 80037fe:	bf15      	itete	ne
 8003800:	2001      	movne	r0, #1
    ep->is_in = 0U;
 8003802:	2000      	moveq	r0, #0
    ep->is_in = 1U;
 8003804:	f882 003d 	strbne.w	r0, [r2, #61]	; 0x3d
    ep->is_in = 0U;
 8003808:	f882 01fd 	strbeq.w	r0, [r2, #509]	; 0x1fd
  ep->num   = ep_addr & EP_ADDR_MSK;
 800380c:	700b      	strb	r3, [r1, #0]
  __HAL_LOCK(hpcd);
 800380e:	f894 33bc 	ldrb.w	r3, [r4, #956]	; 0x3bc
 8003812:	2b01      	cmp	r3, #1
 8003814:	d009      	beq.n	800382a <HAL_PCD_EP_Close+0x50>
 8003816:	2301      	movs	r3, #1
 8003818:	f884 33bc 	strb.w	r3, [r4, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800381c:	6820      	ldr	r0, [r4, #0]
 800381e:	f002 fddf 	bl	80063e0 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003822:	2000      	movs	r0, #0
 8003824:	f884 03bc 	strb.w	r0, [r4, #956]	; 0x3bc
  return HAL_OK;
 8003828:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hpcd);
 800382a:	2002      	movs	r0, #2
}
 800382c:	bd10      	pop	{r4, pc}

0800382e <HAL_PCD_EP_Receive>:
{
 800382e:	b538      	push	{r3, r4, r5, lr}
 8003830:	f001 050f 	and.w	r5, r1, #15
  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003834:	241c      	movs	r4, #28
 8003836:	fb04 0105 	mla	r1, r4, r5, r0
  ep->xfer_buff = pBuf;
 800383a:	fb04 0405 	mla	r4, r4, r5, r0
  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800383e:	f501 71fe 	add.w	r1, r1, #508	; 0x1fc
  ep->xfer_len = len;
 8003842:	f8c4 3210 	str.w	r3, [r4, #528]	; 0x210
  ep->xfer_count = 0U;
 8003846:	2300      	movs	r3, #0
  ep->xfer_buff = pBuf;
 8003848:	f8c4 2208 	str.w	r2, [r4, #520]	; 0x208
  ep->xfer_count = 0U;
 800384c:	f8c4 3214 	str.w	r3, [r4, #532]	; 0x214
  ep->is_in = 0U;
 8003850:	f884 31fd 	strb.w	r3, [r4, #509]	; 0x1fd
  ep->num = ep_addr & EP_ADDR_MSK;
 8003854:	f884 51fc 	strb.w	r5, [r4, #508]	; 0x1fc
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8003858:	6800      	ldr	r0, [r0, #0]
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800385a:	b91d      	cbnz	r5, 8003864 <HAL_PCD_EP_Receive+0x36>
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 800385c:	f002 fdf2 	bl	8006444 <USB_EP0StartXfer>
}
 8003860:	2000      	movs	r0, #0
 8003862:	bd38      	pop	{r3, r4, r5, pc}
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8003864:	f002 fe70 	bl	8006548 <USB_EPStartXfer>
 8003868:	e7fa      	b.n	8003860 <HAL_PCD_EP_Receive+0x32>

0800386a <HAL_PCD_EP_GetRxCount>:
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800386a:	231c      	movs	r3, #28
 800386c:	f001 010f 	and.w	r1, r1, #15
 8003870:	fb03 0101 	mla	r1, r3, r1, r0
}
 8003874:	f8d1 0214 	ldr.w	r0, [r1, #532]	; 0x214
 8003878:	4770      	bx	lr

0800387a <HAL_PCD_EP_Transmit>:
{
 800387a:	b538      	push	{r3, r4, r5, lr}
 800387c:	f001 050f 	and.w	r5, r1, #15
  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003880:	241c      	movs	r4, #28
 8003882:	fb04 0105 	mla	r1, r4, r5, r0
  ep->xfer_buff = pBuf;
 8003886:	fb04 0405 	mla	r4, r4, r5, r0
  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800388a:	313c      	adds	r1, #60	; 0x3c
  ep->xfer_len = len;
 800388c:	6523      	str	r3, [r4, #80]	; 0x50
  ep->xfer_count = 0U;
 800388e:	2300      	movs	r3, #0
 8003890:	6563      	str	r3, [r4, #84]	; 0x54
  ep->is_in = 1U;
 8003892:	2301      	movs	r3, #1
  ep->xfer_buff = pBuf;
 8003894:	64a2      	str	r2, [r4, #72]	; 0x48
  ep->is_in = 1U;
 8003896:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  ep->num = ep_addr & EP_ADDR_MSK;
 800389a:	f884 503c 	strb.w	r5, [r4, #60]	; 0x3c
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 800389e:	6800      	ldr	r0, [r0, #0]
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80038a0:	b91d      	cbnz	r5, 80038aa <HAL_PCD_EP_Transmit+0x30>
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 80038a2:	f002 fdcf 	bl	8006444 <USB_EP0StartXfer>
}
 80038a6:	2000      	movs	r0, #0
 80038a8:	bd38      	pop	{r3, r4, r5, pc}
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 80038aa:	f002 fe4d 	bl	8006548 <USB_EPStartXfer>
 80038ae:	e7fa      	b.n	80038a6 <HAL_PCD_EP_Transmit+0x2c>

080038b0 <HAL_PCD_EP_SetStall>:
{
 80038b0:	b538      	push	{r3, r4, r5, lr}
  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80038b2:	6843      	ldr	r3, [r0, #4]
 80038b4:	f001 050f 	and.w	r5, r1, #15
 80038b8:	429d      	cmp	r5, r3
{
 80038ba:	4604      	mov	r4, r0
  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80038bc:	d82d      	bhi.n	800391a <HAL_PCD_EP_SetStall+0x6a>
  if ((0x80U & ep_addr) == 0x80U)
 80038be:	f011 0f80 	tst.w	r1, #128	; 0x80
 80038c2:	f04f 021c 	mov.w	r2, #28
 80038c6:	d01e      	beq.n	8003906 <HAL_PCD_EP_SetStall+0x56>
    ep->is_in = 1U;
 80038c8:	fb02 0105 	mla	r1, r2, r5, r0
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80038cc:	fb02 0305 	mla	r3, r2, r5, r0
    ep->is_in = 1U;
 80038d0:	2201      	movs	r2, #1
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80038d2:	333c      	adds	r3, #60	; 0x3c
    ep->is_in = 1U;
 80038d4:	f881 203d 	strb.w	r2, [r1, #61]	; 0x3d
  ep->is_stall = 1U;
 80038d8:	2201      	movs	r2, #1
 80038da:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80038dc:	701d      	strb	r5, [r3, #0]
  __HAL_LOCK(hpcd);
 80038de:	f894 13bc 	ldrb.w	r1, [r4, #956]	; 0x3bc
 80038e2:	4291      	cmp	r1, r2
 80038e4:	d01b      	beq.n	800391e <HAL_PCD_EP_SetStall+0x6e>
 80038e6:	f884 23bc 	strb.w	r2, [r4, #956]	; 0x3bc
  (void)USB_EPSetStall(hpcd->Instance, ep);
 80038ea:	4619      	mov	r1, r3
 80038ec:	6820      	ldr	r0, [r4, #0]
 80038ee:	f002 fef1 	bl	80066d4 <USB_EPSetStall>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80038f2:	b925      	cbnz	r5, 80038fe <HAL_PCD_EP_SetStall+0x4e>
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 80038f4:	f504 7171 	add.w	r1, r4, #964	; 0x3c4
 80038f8:	6820      	ldr	r0, [r4, #0]
 80038fa:	f002 ffb9 	bl	8006870 <USB_EP0_OutStart>
  __HAL_UNLOCK(hpcd);
 80038fe:	2000      	movs	r0, #0
 8003900:	f884 03bc 	strb.w	r0, [r4, #956]	; 0x3bc
  return HAL_OK;
 8003904:	bd38      	pop	{r3, r4, r5, pc}
    ep = &hpcd->OUT_ep[ep_addr];
 8003906:	fb02 0301 	mla	r3, r2, r1, r0
    ep->is_in = 0U;
 800390a:	fb02 0101 	mla	r1, r2, r1, r0
 800390e:	2200      	movs	r2, #0
    ep = &hpcd->OUT_ep[ep_addr];
 8003910:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
    ep->is_in = 0U;
 8003914:	f881 21fd 	strb.w	r2, [r1, #509]	; 0x1fd
 8003918:	e7de      	b.n	80038d8 <HAL_PCD_EP_SetStall+0x28>
    return HAL_ERROR;
 800391a:	2001      	movs	r0, #1
 800391c:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(hpcd);
 800391e:	2002      	movs	r0, #2
}
 8003920:	bd38      	pop	{r3, r4, r5, pc}

08003922 <HAL_PCD_EP_ClrStall>:
{
 8003922:	b538      	push	{r3, r4, r5, lr}
  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8003924:	6843      	ldr	r3, [r0, #4]
 8003926:	f001 020f 	and.w	r2, r1, #15
 800392a:	429a      	cmp	r2, r3
{
 800392c:	4604      	mov	r4, r0
  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800392e:	d826      	bhi.n	800397e <HAL_PCD_EP_ClrStall+0x5c>
 8003930:	231c      	movs	r3, #28
  if ((0x80U & ep_addr) == 0x80U)
 8003932:	f011 0f80 	tst.w	r1, #128	; 0x80
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003936:	fb03 0102 	mla	r1, r3, r2, r0
 800393a:	bf19      	ittee	ne
 800393c:	313c      	addne	r1, #60	; 0x3c
    ep->is_in = 1U;
 800393e:	fb03 0302 	mlane	r3, r3, r2, r0
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003942:	f501 71fe 	addeq.w	r1, r1, #508	; 0x1fc
    ep->is_in = 0U;
 8003946:	fb03 4302 	mlaeq	r3, r3, r2, r4
    ep->is_in = 1U;
 800394a:	bf14      	ite	ne
 800394c:	2001      	movne	r0, #1
    ep->is_in = 0U;
 800394e:	2000      	moveq	r0, #0
  ep->is_stall = 0U;
 8003950:	f04f 0500 	mov.w	r5, #0
    ep->is_in = 1U;
 8003954:	bf14      	ite	ne
 8003956:	f883 003d 	strbne.w	r0, [r3, #61]	; 0x3d
    ep->is_in = 0U;
 800395a:	f883 01fd 	strbeq.w	r0, [r3, #509]	; 0x1fd
  ep->is_stall = 0U;
 800395e:	708d      	strb	r5, [r1, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003960:	700a      	strb	r2, [r1, #0]
  __HAL_LOCK(hpcd);
 8003962:	f894 33bc 	ldrb.w	r3, [r4, #956]	; 0x3bc
 8003966:	2b01      	cmp	r3, #1
 8003968:	d00b      	beq.n	8003982 <HAL_PCD_EP_ClrStall+0x60>
 800396a:	2301      	movs	r3, #1
 800396c:	f884 33bc 	strb.w	r3, [r4, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8003970:	6820      	ldr	r0, [r4, #0]
 8003972:	f002 fedc 	bl	800672e <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8003976:	f884 53bc 	strb.w	r5, [r4, #956]	; 0x3bc
  return HAL_OK;
 800397a:	4628      	mov	r0, r5
 800397c:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 800397e:	2001      	movs	r0, #1
 8003980:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(hpcd);
 8003982:	2002      	movs	r0, #2
}
 8003984:	bd38      	pop	{r3, r4, r5, pc}

08003986 <HAL_PCD_EP_Flush>:
  __HAL_LOCK(hpcd);
 8003986:	f890 33bc 	ldrb.w	r3, [r0, #956]	; 0x3bc
 800398a:	2b01      	cmp	r3, #1
{
 800398c:	b510      	push	{r4, lr}
 800398e:	4604      	mov	r4, r0
  __HAL_LOCK(hpcd);
 8003990:	d011      	beq.n	80039b6 <HAL_PCD_EP_Flush+0x30>
 8003992:	2301      	movs	r3, #1
 8003994:	f880 33bc 	strb.w	r3, [r0, #956]	; 0x3bc
  if ((ep_addr & 0x80U) == 0x80U)
 8003998:	060b      	lsls	r3, r1, #24
 800399a:	d508      	bpl.n	80039ae <HAL_PCD_EP_Flush+0x28>
    (void)USB_FlushTxFifo(hpcd->Instance, (uint32_t)ep_addr & EP_ADDR_MSK);
 800399c:	f001 010f 	and.w	r1, r1, #15
 80039a0:	6800      	ldr	r0, [r0, #0]
 80039a2:	f002 fbff 	bl	80061a4 <USB_FlushTxFifo>
  __HAL_UNLOCK(hpcd);
 80039a6:	2000      	movs	r0, #0
 80039a8:	f884 03bc 	strb.w	r0, [r4, #956]	; 0x3bc
  return HAL_OK;
 80039ac:	bd10      	pop	{r4, pc}
    (void)USB_FlushRxFifo(hpcd->Instance);
 80039ae:	6800      	ldr	r0, [r0, #0]
 80039b0:	f002 fc0a 	bl	80061c8 <USB_FlushRxFifo>
 80039b4:	e7f7      	b.n	80039a6 <HAL_PCD_EP_Flush+0x20>
  __HAL_LOCK(hpcd);
 80039b6:	2002      	movs	r0, #2
}
 80039b8:	bd10      	pop	{r4, pc}

080039ba <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 80039ba:	b570      	push	{r4, r5, r6, lr}
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 80039bc:	6804      	ldr	r4, [r0, #0]
 80039be:	6a63      	ldr	r3, [r4, #36]	; 0x24

  if (fifo == 0U)
 80039c0:	b921      	cbnz	r1, 80039cc <HAL_PCDEx_SetTxFiFo+0x12>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 80039c2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80039c6:	62a3      	str	r3, [r4, #40]	; 0x28
    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
  }

  return HAL_OK;
}
 80039c8:	2000      	movs	r0, #0
 80039ca:	bd70      	pop	{r4, r5, r6, pc}
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 80039cc:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    for (i = 0U; i < (fifo - 1U); i++)
 80039ce:	1e4d      	subs	r5, r1, #1
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 80039d0:	eb03 4310 	add.w	r3, r3, r0, lsr #16
    for (i = 0U; i < (fifo - 1U); i++)
 80039d4:	2000      	movs	r0, #0
 80039d6:	1c46      	adds	r6, r0, #1
 80039d8:	b2c0      	uxtb	r0, r0
 80039da:	4285      	cmp	r5, r0
 80039dc:	d806      	bhi.n	80039ec <HAL_PCDEx_SetTxFiFo+0x32>
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 80039de:	313f      	adds	r1, #63	; 0x3f
 80039e0:	eb04 0481 	add.w	r4, r4, r1, lsl #2
 80039e4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80039e8:	6063      	str	r3, [r4, #4]
 80039ea:	e7ed      	b.n	80039c8 <HAL_PCDEx_SetTxFiFo+0xe>
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80039ec:	3040      	adds	r0, #64	; 0x40
 80039ee:	eb04 0080 	add.w	r0, r4, r0, lsl #2
 80039f2:	6840      	ldr	r0, [r0, #4]
 80039f4:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 80039f8:	4630      	mov	r0, r6
 80039fa:	e7ec      	b.n	80039d6 <HAL_PCDEx_SetTxFiFo+0x1c>

080039fc <HAL_PCDEx_SetRxFiFo>:
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
  hpcd->Instance->GRXFSIZ = size;
 80039fc:	6803      	ldr	r3, [r0, #0]

  return HAL_OK;
}
 80039fe:	2000      	movs	r0, #0
  hpcd->Instance->GRXFSIZ = size;
 8003a00:	6259      	str	r1, [r3, #36]	; 0x24
}
 8003a02:	4770      	bx	lr

08003a04 <HAL_PCDEx_ActivateLPM>:
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003a04:	6802      	ldr	r2, [r0, #0]
{
 8003a06:	4603      	mov	r3, r0

  hpcd->lpm_active = 1U;
 8003a08:	2101      	movs	r1, #1
 8003a0a:	f8c0 13fc 	str.w	r1, [r0, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 8003a0e:	2000      	movs	r0, #0
 8003a10:	f883 03f4 	strb.w	r0, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8003a14:	6993      	ldr	r3, [r2, #24]
 8003a16:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003a1a:	6193      	str	r3, [r2, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8003a1c:	6d53      	ldr	r3, [r2, #84]	; 0x54
 8003a1e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003a22:	f043 0303 	orr.w	r3, r3, #3
 8003a26:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
}
 8003a28:	4770      	bx	lr
	...

08003a2c <HAL_PWR_EnableBkUpAccess>:
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003a2c:	4a02      	ldr	r2, [pc, #8]	; (8003a38 <HAL_PWR_EnableBkUpAccess+0xc>)
 8003a2e:	6813      	ldr	r3, [r2, #0]
 8003a30:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003a34:	6013      	str	r3, [r2, #0]
 8003a36:	4770      	bx	lr
 8003a38:	40007000 	.word	0x40007000

08003a3c <HAL_PWREx_GetVoltageRange>:
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8003a3c:	4b02      	ldr	r3, [pc, #8]	; (8003a48 <HAL_PWREx_GetVoltageRange+0xc>)
 8003a3e:	6818      	ldr	r0, [r3, #0]
#endif
}
 8003a40:	f400 60c0 	and.w	r0, r0, #1536	; 0x600
 8003a44:	4770      	bx	lr
 8003a46:	bf00      	nop
 8003a48:	40007000 	.word	0x40007000

08003a4c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003a4c:	4b17      	ldr	r3, [pc, #92]	; (8003aac <HAL_PWREx_ControlVoltageScaling+0x60>)
#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8003a4e:	681a      	ldr	r2, [r3, #0]
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003a50:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8003a54:	f402 62c0 	and.w	r2, r2, #1536	; 0x600
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003a58:	d11c      	bne.n	8003a94 <HAL_PWREx_ControlVoltageScaling+0x48>
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8003a5a:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
 8003a5e:	d015      	beq.n	8003a8c <HAL_PWREx_ControlVoltageScaling+0x40>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003a60:	681a      	ldr	r2, [r3, #0]
 8003a62:	f422 62c0 	bic.w	r2, r2, #1536	; 0x600
 8003a66:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003a6a:	601a      	str	r2, [r3, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003a6c:	4a10      	ldr	r2, [pc, #64]	; (8003ab0 <HAL_PWREx_ControlVoltageScaling+0x64>)
 8003a6e:	6811      	ldr	r1, [r2, #0]
 8003a70:	2232      	movs	r2, #50	; 0x32
 8003a72:	434a      	muls	r2, r1
 8003a74:	490f      	ldr	r1, [pc, #60]	; (8003ab4 <HAL_PWREx_ControlVoltageScaling+0x68>)
 8003a76:	fbb2 f2f1 	udiv	r2, r2, r1
 8003a7a:	4619      	mov	r1, r3
 8003a7c:	3201      	adds	r2, #1
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003a7e:	6958      	ldr	r0, [r3, #20]
 8003a80:	0540      	lsls	r0, r0, #21
 8003a82:	d500      	bpl.n	8003a86 <HAL_PWREx_ControlVoltageScaling+0x3a>
 8003a84:	b922      	cbnz	r2, 8003a90 <HAL_PWREx_ControlVoltageScaling+0x44>
      {
        wait_loop_index--;
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003a86:	694b      	ldr	r3, [r1, #20]
 8003a88:	055b      	lsls	r3, r3, #21
 8003a8a:	d40d      	bmi.n	8003aa8 <HAL_PWREx_ControlVoltageScaling+0x5c>
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8003a8c:	2000      	movs	r0, #0
 8003a8e:	4770      	bx	lr
        wait_loop_index--;
 8003a90:	3a01      	subs	r2, #1
 8003a92:	e7f4      	b.n	8003a7e <HAL_PWREx_ControlVoltageScaling+0x32>
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8003a94:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003a98:	bf1f      	itttt	ne
 8003a9a:	681a      	ldrne	r2, [r3, #0]
 8003a9c:	f422 62c0 	bicne.w	r2, r2, #1536	; 0x600
 8003aa0:	f442 6280 	orrne.w	r2, r2, #1024	; 0x400
 8003aa4:	601a      	strne	r2, [r3, #0]
 8003aa6:	e7f1      	b.n	8003a8c <HAL_PWREx_ControlVoltageScaling+0x40>
        return HAL_TIMEOUT;
 8003aa8:	2003      	movs	r0, #3
}
 8003aaa:	4770      	bx	lr
 8003aac:	40007000 	.word	0x40007000
 8003ab0:	20000024 	.word	0x20000024
 8003ab4:	000f4240 	.word	0x000f4240

08003ab8 <HAL_PWREx_EnableVddUSB>:
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 8003ab8:	4a02      	ldr	r2, [pc, #8]	; (8003ac4 <HAL_PWREx_EnableVddUSB+0xc>)
 8003aba:	6853      	ldr	r3, [r2, #4]
 8003abc:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003ac0:	6053      	str	r3, [r2, #4]
 8003ac2:	4770      	bx	lr
 8003ac4:	40007000 	.word	0x40007000

08003ac8 <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout : Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 8003ac8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003acc:	9d06      	ldr	r5, [sp, #24]
 8003ace:	4604      	mov	r4, r0
 8003ad0:	460f      	mov	r7, r1
 8003ad2:	4616      	mov	r6, r2
 8003ad4:	4698      	mov	r8, r3
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8003ad6:	6821      	ldr	r1, [r4, #0]
 8003ad8:	688a      	ldr	r2, [r1, #8]
 8003ada:	423a      	tst	r2, r7
 8003adc:	bf14      	ite	ne
 8003ade:	2201      	movne	r2, #1
 8003ae0:	2200      	moveq	r2, #0
 8003ae2:	42b2      	cmp	r2, r6
 8003ae4:	d102      	bne.n	8003aec <QSPI_WaitFlagStateUntilTimeout+0x24>

        return HAL_ERROR;
      }
    }
  }
  return HAL_OK;
 8003ae6:	2000      	movs	r0, #0
}
 8003ae8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (Timeout != HAL_MAX_DELAY)
 8003aec:	1c6b      	adds	r3, r5, #1
 8003aee:	d0f3      	beq.n	8003ad8 <QSPI_WaitFlagStateUntilTimeout+0x10>
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003af0:	f7fe fd02 	bl	80024f8 <HAL_GetTick>
 8003af4:	eba0 0008 	sub.w	r0, r0, r8
 8003af8:	4285      	cmp	r5, r0
 8003afa:	d301      	bcc.n	8003b00 <QSPI_WaitFlagStateUntilTimeout+0x38>
 8003afc:	2d00      	cmp	r5, #0
 8003afe:	d1ea      	bne.n	8003ad6 <QSPI_WaitFlagStateUntilTimeout+0xe>
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 8003b00:	2304      	movs	r3, #4
 8003b02:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 8003b06:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8003b08:	f043 0301 	orr.w	r3, r3, #1
 8003b0c:	63e3      	str	r3, [r4, #60]	; 0x3c
 8003b0e:	2001      	movs	r0, #1
 8003b10:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08003b14 <HAL_QSPI_Init>:
{
 8003b14:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8003b16:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8003b18:	f7fe fcee 	bl	80024f8 <HAL_GetTick>
 8003b1c:	4605      	mov	r5, r0
  if(hqspi == NULL)
 8003b1e:	2c00      	cmp	r4, #0
 8003b20:	d049      	beq.n	8003bb6 <HAL_QSPI_Init+0xa2>
  __HAL_LOCK(hqspi);
 8003b22:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 8003b26:	2b01      	cmp	r3, #1
 8003b28:	d047      	beq.n	8003bba <HAL_QSPI_Init+0xa6>
 8003b2a:	2301      	movs	r3, #1
 8003b2c:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
  if(hqspi->State == HAL_QSPI_STATE_RESET)
 8003b30:	f894 2039 	ldrb.w	r2, [r4, #57]	; 0x39
 8003b34:	f002 03ff 	and.w	r3, r2, #255	; 0xff
 8003b38:	b93a      	cbnz	r2, 8003b4a <HAL_QSPI_Init+0x36>
    hqspi->Lock = HAL_UNLOCKED;
 8003b3a:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
    HAL_QSPI_MspInit(hqspi);
 8003b3e:	4620      	mov	r0, r4
 8003b40:	f7fe f9ba 	bl	8001eb8 <HAL_QSPI_MspInit>
  hqspi->Timeout = Timeout;
 8003b44:	f241 3388 	movw	r3, #5000	; 0x1388
 8003b48:	6423      	str	r3, [r4, #64]	; 0x40
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 8003b4a:	6820      	ldr	r0, [r4, #0]
 8003b4c:	68a1      	ldr	r1, [r4, #8]
 8003b4e:	6802      	ldr	r2, [r0, #0]
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 8003b50:	6c23      	ldr	r3, [r4, #64]	; 0x40
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 8003b52:	3901      	subs	r1, #1
 8003b54:	f422 6270 	bic.w	r2, r2, #3840	; 0xf00
 8003b58:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8003b5c:	6002      	str	r2, [r0, #0]
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 8003b5e:	2120      	movs	r1, #32
 8003b60:	9300      	str	r3, [sp, #0]
 8003b62:	2200      	movs	r2, #0
 8003b64:	462b      	mov	r3, r5
 8003b66:	4620      	mov	r0, r4
 8003b68:	f7ff ffae 	bl	8003ac8 <QSPI_WaitFlagStateUntilTimeout>
  if(status == HAL_OK)
 8003b6c:	b9f0      	cbnz	r0, 8003bac <HAL_QSPI_Init+0x98>
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT),
 8003b6e:	6822      	ldr	r2, [r4, #0]
 8003b70:	6865      	ldr	r5, [r4, #4]
 8003b72:	6811      	ldr	r1, [r2, #0]
 8003b74:	68e3      	ldr	r3, [r4, #12]
 8003b76:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8003b7a:	ea43 6305 	orr.w	r3, r3, r5, lsl #24
 8003b7e:	f021 0110 	bic.w	r1, r1, #16
 8003b82:	430b      	orrs	r3, r1
 8003b84:	6013      	str	r3, [r2, #0]
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 8003b86:	69a1      	ldr	r1, [r4, #24]
 8003b88:	6963      	ldr	r3, [r4, #20]
 8003b8a:	6855      	ldr	r5, [r2, #4]
 8003b8c:	430b      	orrs	r3, r1
 8003b8e:	6921      	ldr	r1, [r4, #16]
 8003b90:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8003b94:	490a      	ldr	r1, [pc, #40]	; (8003bc0 <HAL_QSPI_Init+0xac>)
 8003b96:	4029      	ands	r1, r5
 8003b98:	430b      	orrs	r3, r1
 8003b9a:	6053      	str	r3, [r2, #4]
    __HAL_QSPI_ENABLE(hqspi);
 8003b9c:	6813      	ldr	r3, [r2, #0]
 8003b9e:	f043 0301 	orr.w	r3, r3, #1
 8003ba2:	6013      	str	r3, [r2, #0]
    hqspi->State = HAL_QSPI_STATE_READY;
 8003ba4:	2301      	movs	r3, #1
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8003ba6:	63e0      	str	r0, [r4, #60]	; 0x3c
    hqspi->State = HAL_QSPI_STATE_READY;
 8003ba8:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  __HAL_UNLOCK(hqspi);
 8003bac:	2300      	movs	r3, #0
 8003bae:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
}
 8003bb2:	b003      	add	sp, #12
 8003bb4:	bd30      	pop	{r4, r5, pc}
    return HAL_ERROR;
 8003bb6:	2001      	movs	r0, #1
 8003bb8:	e7fb      	b.n	8003bb2 <HAL_QSPI_Init+0x9e>
  __HAL_LOCK(hqspi);
 8003bba:	2002      	movs	r0, #2
 8003bbc:	e7f9      	b.n	8003bb2 <HAL_QSPI_Init+0x9e>
 8003bbe:	bf00      	nop
 8003bc0:	ffe0f8fe 	.word	0xffe0f8fe

08003bc4 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003bc4:	b537      	push	{r0, r1, r2, r4, r5, lr}
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003bc6:	4d1e      	ldr	r5, [pc, #120]	; (8003c40 <RCC_SetFlashLatencyFromMSIRange+0x7c>)
 8003bc8:	6dab      	ldr	r3, [r5, #88]	; 0x58
 8003bca:	00da      	lsls	r2, r3, #3
{
 8003bcc:	4604      	mov	r4, r0
  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003bce:	d518      	bpl.n	8003c02 <RCC_SetFlashLatencyFromMSIRange+0x3e>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003bd0:	f7ff ff34 	bl	8003a3c <HAL_PWREx_GetVoltageRange>
    __HAL_RCC_PWR_CLK_ENABLE();
    vos = HAL_PWREx_GetVoltageRange();
    __HAL_RCC_PWR_CLK_DISABLE();
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003bd4:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 8003bd8:	d123      	bne.n	8003c22 <RCC_SetFlashLatencyFromMSIRange+0x5e>
  {
    if(msirange > RCC_MSIRANGE_8)
 8003bda:	2c80      	cmp	r4, #128	; 0x80
 8003bdc:	d929      	bls.n	8003c32 <RCC_SetFlashLatencyFromMSIRange+0x6e>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003bde:	2ca0      	cmp	r4, #160	; 0xa0
        latency = FLASH_LATENCY_2; /* 2WS */
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003be0:	bf8c      	ite	hi
 8003be2:	2002      	movhi	r0, #2
 8003be4:	2001      	movls	r0, #1
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003be6:	4a17      	ldr	r2, [pc, #92]	; (8003c44 <RCC_SetFlashLatencyFromMSIRange+0x80>)
 8003be8:	6813      	ldr	r3, [r2, #0]
 8003bea:	f023 0307 	bic.w	r3, r3, #7
 8003bee:	4303      	orrs	r3, r0
 8003bf0:	6013      	str	r3, [r2, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003bf2:	6813      	ldr	r3, [r2, #0]
 8003bf4:	f003 0307 	and.w	r3, r3, #7
  {
    return HAL_ERROR;
  }

  return HAL_OK;
}
 8003bf8:	1a18      	subs	r0, r3, r0
 8003bfa:	bf18      	it	ne
 8003bfc:	2001      	movne	r0, #1
 8003bfe:	b003      	add	sp, #12
 8003c00:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_PWR_CLK_ENABLE();
 8003c02:	6dab      	ldr	r3, [r5, #88]	; 0x58
 8003c04:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003c08:	65ab      	str	r3, [r5, #88]	; 0x58
 8003c0a:	6dab      	ldr	r3, [r5, #88]	; 0x58
 8003c0c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c10:	9301      	str	r3, [sp, #4]
 8003c12:	9b01      	ldr	r3, [sp, #4]
    vos = HAL_PWREx_GetVoltageRange();
 8003c14:	f7ff ff12 	bl	8003a3c <HAL_PWREx_GetVoltageRange>
    __HAL_RCC_PWR_CLK_DISABLE();
 8003c18:	6dab      	ldr	r3, [r5, #88]	; 0x58
 8003c1a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003c1e:	65ab      	str	r3, [r5, #88]	; 0x58
 8003c20:	e7d8      	b.n	8003bd4 <RCC_SetFlashLatencyFromMSIRange+0x10>
    if(msirange > RCC_MSIRANGE_8)
 8003c22:	2c80      	cmp	r4, #128	; 0x80
 8003c24:	d807      	bhi.n	8003c36 <RCC_SetFlashLatencyFromMSIRange+0x72>
      if(msirange == RCC_MSIRANGE_8)
 8003c26:	d008      	beq.n	8003c3a <RCC_SetFlashLatencyFromMSIRange+0x76>
      else if(msirange == RCC_MSIRANGE_7)
 8003c28:	f1a4 0370 	sub.w	r3, r4, #112	; 0x70
 8003c2c:	4258      	negs	r0, r3
 8003c2e:	4158      	adcs	r0, r3
 8003c30:	e7d9      	b.n	8003be6 <RCC_SetFlashLatencyFromMSIRange+0x22>
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003c32:	2000      	movs	r0, #0
 8003c34:	e7d7      	b.n	8003be6 <RCC_SetFlashLatencyFromMSIRange+0x22>
      latency = FLASH_LATENCY_3; /* 3WS */
 8003c36:	2003      	movs	r0, #3
 8003c38:	e7d5      	b.n	8003be6 <RCC_SetFlashLatencyFromMSIRange+0x22>
        latency = FLASH_LATENCY_2; /* 2WS */
 8003c3a:	2002      	movs	r0, #2
 8003c3c:	e7d3      	b.n	8003be6 <RCC_SetFlashLatencyFromMSIRange+0x22>
 8003c3e:	bf00      	nop
 8003c40:	40021000 	.word	0x40021000
 8003c44:	40022000 	.word	0x40022000

08003c48 <HAL_RCC_GetSysClockFreq>:
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003c48:	4b22      	ldr	r3, [pc, #136]	; (8003cd4 <HAL_RCC_GetSysClockFreq+0x8c>)
 8003c4a:	689a      	ldr	r2, [r3, #8]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003c4c:	68d9      	ldr	r1, [r3, #12]
  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003c4e:	f012 020c 	ands.w	r2, r2, #12
 8003c52:	d005      	beq.n	8003c60 <HAL_RCC_GetSysClockFreq+0x18>
 8003c54:	2a0c      	cmp	r2, #12
 8003c56:	d115      	bne.n	8003c84 <HAL_RCC_GetSysClockFreq+0x3c>
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003c58:	f001 0103 	and.w	r1, r1, #3
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8003c5c:	2901      	cmp	r1, #1
 8003c5e:	d118      	bne.n	8003c92 <HAL_RCC_GetSysClockFreq+0x4a>
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003c60:	6819      	ldr	r1, [r3, #0]
    msirange = MSIRangeTable[msirange];
 8003c62:	481d      	ldr	r0, [pc, #116]	; (8003cd8 <HAL_RCC_GetSysClockFreq+0x90>)
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003c64:	0709      	lsls	r1, r1, #28
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003c66:	bf55      	itete	pl
 8003c68:	f8d3 1094 	ldrpl.w	r1, [r3, #148]	; 0x94
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003c6c:	6819      	ldrmi	r1, [r3, #0]
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003c6e:	f3c1 2103 	ubfxpl	r1, r1, #8, #4
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003c72:	f3c1 1103 	ubfxmi	r1, r1, #4, #4
    msirange = MSIRangeTable[msirange];
 8003c76:	f850 0021 	ldr.w	r0, [r0, r1, lsl #2]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003c7a:	b34a      	cbz	r2, 8003cd0 <HAL_RCC_GetSysClockFreq+0x88>
  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8003c7c:	2a0c      	cmp	r2, #12
 8003c7e:	d009      	beq.n	8003c94 <HAL_RCC_GetSysClockFreq+0x4c>
 8003c80:	2000      	movs	r0, #0
  return sysclockfreq;
 8003c82:	4770      	bx	lr
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8003c84:	2a04      	cmp	r2, #4
 8003c86:	d022      	beq.n	8003cce <HAL_RCC_GetSysClockFreq+0x86>
 8003c88:	2a08      	cmp	r2, #8
 8003c8a:	4814      	ldr	r0, [pc, #80]	; (8003cdc <HAL_RCC_GetSysClockFreq+0x94>)
 8003c8c:	bf18      	it	ne
 8003c8e:	2000      	movne	r0, #0
 8003c90:	4770      	bx	lr
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8003c92:	2000      	movs	r0, #0
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003c94:	68da      	ldr	r2, [r3, #12]
 8003c96:	f002 0203 	and.w	r2, r2, #3
    switch (pllsource)
 8003c9a:	2a02      	cmp	r2, #2
 8003c9c:	d015      	beq.n	8003cca <HAL_RCC_GetSysClockFreq+0x82>
      pllvco = HSE_VALUE;
 8003c9e:	490f      	ldr	r1, [pc, #60]	; (8003cdc <HAL_RCC_GetSysClockFreq+0x94>)
 8003ca0:	2a03      	cmp	r2, #3
 8003ca2:	bf08      	it	eq
 8003ca4:	4608      	moveq	r0, r1
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003ca6:	68da      	ldr	r2, [r3, #12]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003ca8:	68d9      	ldr	r1, [r3, #12]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003caa:	68db      	ldr	r3, [r3, #12]
 8003cac:	f3c3 6341 	ubfx	r3, r3, #25, #2
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003cb0:	f3c1 2106 	ubfx	r1, r1, #8, #7
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003cb4:	f3c2 1202 	ubfx	r2, r2, #4, #3
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003cb8:	3301      	adds	r3, #1
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003cba:	4348      	muls	r0, r1
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003cbc:	3201      	adds	r2, #1
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003cbe:	005b      	lsls	r3, r3, #1
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003cc0:	fbb0 f0f2 	udiv	r0, r0, r2
    sysclockfreq = pllvco / pllr;
 8003cc4:	fbb0 f0f3 	udiv	r0, r0, r3
 8003cc8:	4770      	bx	lr
      pllvco = HSI_VALUE;
 8003cca:	4805      	ldr	r0, [pc, #20]	; (8003ce0 <HAL_RCC_GetSysClockFreq+0x98>)
 8003ccc:	e7eb      	b.n	8003ca6 <HAL_RCC_GetSysClockFreq+0x5e>
    sysclockfreq = HSI_VALUE;
 8003cce:	4804      	ldr	r0, [pc, #16]	; (8003ce0 <HAL_RCC_GetSysClockFreq+0x98>)
}
 8003cd0:	4770      	bx	lr
 8003cd2:	bf00      	nop
 8003cd4:	40021000 	.word	0x40021000
 8003cd8:	0801d980 	.word	0x0801d980
 8003cdc:	007a1200 	.word	0x007a1200
 8003ce0:	00f42400 	.word	0x00f42400

08003ce4 <HAL_RCC_OscConfig>:
{
 8003ce4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
  if(RCC_OscInitStruct == NULL)
 8003ce8:	4605      	mov	r5, r0
 8003cea:	b908      	cbnz	r0, 8003cf0 <HAL_RCC_OscConfig+0xc>
        return HAL_ERROR;
 8003cec:	2001      	movs	r0, #1
 8003cee:	e047      	b.n	8003d80 <HAL_RCC_OscConfig+0x9c>
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003cf0:	4ca6      	ldr	r4, [pc, #664]	; (8003f8c <HAL_RCC_OscConfig+0x2a8>)
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003cf2:	6803      	ldr	r3, [r0, #0]
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003cf4:	68a6      	ldr	r6, [r4, #8]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003cf6:	68e7      	ldr	r7, [r4, #12]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003cf8:	06db      	lsls	r3, r3, #27
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003cfa:	f006 060c 	and.w	r6, r6, #12
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003cfe:	f007 0703 	and.w	r7, r7, #3
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003d02:	d573      	bpl.n	8003dec <HAL_RCC_OscConfig+0x108>
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003d04:	b11e      	cbz	r6, 8003d0e <HAL_RCC_OscConfig+0x2a>
 8003d06:	2e0c      	cmp	r6, #12
 8003d08:	d152      	bne.n	8003db0 <HAL_RCC_OscConfig+0xcc>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8003d0a:	2f01      	cmp	r7, #1
 8003d0c:	d150      	bne.n	8003db0 <HAL_RCC_OscConfig+0xcc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003d0e:	6823      	ldr	r3, [r4, #0]
 8003d10:	0798      	lsls	r0, r3, #30
 8003d12:	d502      	bpl.n	8003d1a <HAL_RCC_OscConfig+0x36>
 8003d14:	69ab      	ldr	r3, [r5, #24]
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d0e8      	beq.n	8003cec <HAL_RCC_OscConfig+0x8>
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8003d1a:	6823      	ldr	r3, [r4, #0]
 8003d1c:	6a28      	ldr	r0, [r5, #32]
 8003d1e:	0719      	lsls	r1, r3, #28
 8003d20:	bf56      	itet	pl
 8003d22:	f8d4 3094 	ldrpl.w	r3, [r4, #148]	; 0x94
 8003d26:	6823      	ldrmi	r3, [r4, #0]
 8003d28:	091b      	lsrpl	r3, r3, #4
 8003d2a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003d2e:	4283      	cmp	r3, r0
 8003d30:	d229      	bcs.n	8003d86 <HAL_RCC_OscConfig+0xa2>
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003d32:	f7ff ff47 	bl	8003bc4 <RCC_SetFlashLatencyFromMSIRange>
 8003d36:	2800      	cmp	r0, #0
 8003d38:	d1d8      	bne.n	8003cec <HAL_RCC_OscConfig+0x8>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003d3a:	6823      	ldr	r3, [r4, #0]
 8003d3c:	f043 0308 	orr.w	r3, r3, #8
 8003d40:	6023      	str	r3, [r4, #0]
 8003d42:	6823      	ldr	r3, [r4, #0]
 8003d44:	6a2a      	ldr	r2, [r5, #32]
 8003d46:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003d4a:	4313      	orrs	r3, r2
 8003d4c:	6023      	str	r3, [r4, #0]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003d4e:	6863      	ldr	r3, [r4, #4]
 8003d50:	69ea      	ldr	r2, [r5, #28]
 8003d52:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003d56:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8003d5a:	6063      	str	r3, [r4, #4]
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003d5c:	f7ff ff74 	bl	8003c48 <HAL_RCC_GetSysClockFreq>
 8003d60:	68a3      	ldr	r3, [r4, #8]
 8003d62:	4a8b      	ldr	r2, [pc, #556]	; (8003f90 <HAL_RCC_OscConfig+0x2ac>)
 8003d64:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8003d68:	5cd3      	ldrb	r3, [r2, r3]
 8003d6a:	f003 031f 	and.w	r3, r3, #31
 8003d6e:	40d8      	lsrs	r0, r3
 8003d70:	4b88      	ldr	r3, [pc, #544]	; (8003f94 <HAL_RCC_OscConfig+0x2b0>)
 8003d72:	6018      	str	r0, [r3, #0]
        status = HAL_InitTick(uwTickPrio);
 8003d74:	4b88      	ldr	r3, [pc, #544]	; (8003f98 <HAL_RCC_OscConfig+0x2b4>)
 8003d76:	6818      	ldr	r0, [r3, #0]
 8003d78:	f7fe f998 	bl	80020ac <HAL_InitTick>
        if(status != HAL_OK)
 8003d7c:	2800      	cmp	r0, #0
 8003d7e:	d035      	beq.n	8003dec <HAL_RCC_OscConfig+0x108>
}
 8003d80:	b003      	add	sp, #12
 8003d82:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003d86:	6823      	ldr	r3, [r4, #0]
 8003d88:	f043 0308 	orr.w	r3, r3, #8
 8003d8c:	6023      	str	r3, [r4, #0]
 8003d8e:	6823      	ldr	r3, [r4, #0]
 8003d90:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003d94:	4303      	orrs	r3, r0
 8003d96:	6023      	str	r3, [r4, #0]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003d98:	6863      	ldr	r3, [r4, #4]
 8003d9a:	69ea      	ldr	r2, [r5, #28]
 8003d9c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003da0:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8003da4:	6063      	str	r3, [r4, #4]
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003da6:	f7ff ff0d 	bl	8003bc4 <RCC_SetFlashLatencyFromMSIRange>
 8003daa:	2800      	cmp	r0, #0
 8003dac:	d0d6      	beq.n	8003d5c <HAL_RCC_OscConfig+0x78>
 8003dae:	e79d      	b.n	8003cec <HAL_RCC_OscConfig+0x8>
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003db0:	69ab      	ldr	r3, [r5, #24]
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d036      	beq.n	8003e24 <HAL_RCC_OscConfig+0x140>
        __HAL_RCC_MSI_ENABLE();
 8003db6:	6823      	ldr	r3, [r4, #0]
 8003db8:	f043 0301 	orr.w	r3, r3, #1
 8003dbc:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8003dbe:	f7fe fb9b 	bl	80024f8 <HAL_GetTick>
 8003dc2:	4680      	mov	r8, r0
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003dc4:	6823      	ldr	r3, [r4, #0]
 8003dc6:	079a      	lsls	r2, r3, #30
 8003dc8:	d524      	bpl.n	8003e14 <HAL_RCC_OscConfig+0x130>
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003dca:	6823      	ldr	r3, [r4, #0]
 8003dcc:	f043 0308 	orr.w	r3, r3, #8
 8003dd0:	6023      	str	r3, [r4, #0]
 8003dd2:	6823      	ldr	r3, [r4, #0]
 8003dd4:	6a2a      	ldr	r2, [r5, #32]
 8003dd6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003dda:	4313      	orrs	r3, r2
 8003ddc:	6023      	str	r3, [r4, #0]
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003dde:	6863      	ldr	r3, [r4, #4]
 8003de0:	69ea      	ldr	r2, [r5, #28]
 8003de2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003de6:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8003dea:	6063      	str	r3, [r4, #4]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003dec:	682b      	ldr	r3, [r5, #0]
 8003dee:	07d8      	lsls	r0, r3, #31
 8003df0:	d429      	bmi.n	8003e46 <HAL_RCC_OscConfig+0x162>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003df2:	682b      	ldr	r3, [r5, #0]
 8003df4:	0799      	lsls	r1, r3, #30
 8003df6:	d467      	bmi.n	8003ec8 <HAL_RCC_OscConfig+0x1e4>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003df8:	682b      	ldr	r3, [r5, #0]
 8003dfa:	0718      	lsls	r0, r3, #28
 8003dfc:	f100 809c 	bmi.w	8003f38 <HAL_RCC_OscConfig+0x254>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003e00:	682b      	ldr	r3, [r5, #0]
 8003e02:	0759      	lsls	r1, r3, #29
 8003e04:	f100 80ca 	bmi.w	8003f9c <HAL_RCC_OscConfig+0x2b8>
  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003e08:	6aa8      	ldr	r0, [r5, #40]	; 0x28
 8003e0a:	2800      	cmp	r0, #0
 8003e0c:	f040 8133 	bne.w	8004076 <HAL_RCC_OscConfig+0x392>
  return HAL_OK;
 8003e10:	2000      	movs	r0, #0
 8003e12:	e7b5      	b.n	8003d80 <HAL_RCC_OscConfig+0x9c>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003e14:	f7fe fb70 	bl	80024f8 <HAL_GetTick>
 8003e18:	eba0 0008 	sub.w	r0, r0, r8
 8003e1c:	2802      	cmp	r0, #2
 8003e1e:	d9d1      	bls.n	8003dc4 <HAL_RCC_OscConfig+0xe0>
            return HAL_TIMEOUT;
 8003e20:	2003      	movs	r0, #3
 8003e22:	e7ad      	b.n	8003d80 <HAL_RCC_OscConfig+0x9c>
        __HAL_RCC_MSI_DISABLE();
 8003e24:	6823      	ldr	r3, [r4, #0]
 8003e26:	f023 0301 	bic.w	r3, r3, #1
 8003e2a:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8003e2c:	f7fe fb64 	bl	80024f8 <HAL_GetTick>
 8003e30:	4680      	mov	r8, r0
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003e32:	6823      	ldr	r3, [r4, #0]
 8003e34:	079b      	lsls	r3, r3, #30
 8003e36:	d5d9      	bpl.n	8003dec <HAL_RCC_OscConfig+0x108>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003e38:	f7fe fb5e 	bl	80024f8 <HAL_GetTick>
 8003e3c:	eba0 0008 	sub.w	r0, r0, r8
 8003e40:	2802      	cmp	r0, #2
 8003e42:	d9f6      	bls.n	8003e32 <HAL_RCC_OscConfig+0x14e>
 8003e44:	e7ec      	b.n	8003e20 <HAL_RCC_OscConfig+0x13c>
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8003e46:	2e08      	cmp	r6, #8
 8003e48:	d003      	beq.n	8003e52 <HAL_RCC_OscConfig+0x16e>
 8003e4a:	2e0c      	cmp	r6, #12
 8003e4c:	d108      	bne.n	8003e60 <HAL_RCC_OscConfig+0x17c>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003e4e:	2f03      	cmp	r7, #3
 8003e50:	d106      	bne.n	8003e60 <HAL_RCC_OscConfig+0x17c>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003e52:	6823      	ldr	r3, [r4, #0]
 8003e54:	039a      	lsls	r2, r3, #14
 8003e56:	d5cc      	bpl.n	8003df2 <HAL_RCC_OscConfig+0x10e>
 8003e58:	686b      	ldr	r3, [r5, #4]
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d1c9      	bne.n	8003df2 <HAL_RCC_OscConfig+0x10e>
 8003e5e:	e745      	b.n	8003cec <HAL_RCC_OscConfig+0x8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003e60:	686b      	ldr	r3, [r5, #4]
 8003e62:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003e66:	d110      	bne.n	8003e8a <HAL_RCC_OscConfig+0x1a6>
 8003e68:	6823      	ldr	r3, [r4, #0]
 8003e6a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003e6e:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8003e70:	f7fe fb42 	bl	80024f8 <HAL_GetTick>
 8003e74:	4680      	mov	r8, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003e76:	6823      	ldr	r3, [r4, #0]
 8003e78:	039b      	lsls	r3, r3, #14
 8003e7a:	d4ba      	bmi.n	8003df2 <HAL_RCC_OscConfig+0x10e>
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003e7c:	f7fe fb3c 	bl	80024f8 <HAL_GetTick>
 8003e80:	eba0 0008 	sub.w	r0, r0, r8
 8003e84:	2864      	cmp	r0, #100	; 0x64
 8003e86:	d9f6      	bls.n	8003e76 <HAL_RCC_OscConfig+0x192>
 8003e88:	e7ca      	b.n	8003e20 <HAL_RCC_OscConfig+0x13c>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003e8a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003e8e:	d104      	bne.n	8003e9a <HAL_RCC_OscConfig+0x1b6>
 8003e90:	6823      	ldr	r3, [r4, #0]
 8003e92:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003e96:	6023      	str	r3, [r4, #0]
 8003e98:	e7e6      	b.n	8003e68 <HAL_RCC_OscConfig+0x184>
 8003e9a:	6822      	ldr	r2, [r4, #0]
 8003e9c:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8003ea0:	6022      	str	r2, [r4, #0]
 8003ea2:	6822      	ldr	r2, [r4, #0]
 8003ea4:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003ea8:	6022      	str	r2, [r4, #0]
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	d1e0      	bne.n	8003e70 <HAL_RCC_OscConfig+0x18c>
        tickstart = HAL_GetTick();
 8003eae:	f7fe fb23 	bl	80024f8 <HAL_GetTick>
 8003eb2:	4680      	mov	r8, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003eb4:	6823      	ldr	r3, [r4, #0]
 8003eb6:	0398      	lsls	r0, r3, #14
 8003eb8:	d59b      	bpl.n	8003df2 <HAL_RCC_OscConfig+0x10e>
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003eba:	f7fe fb1d 	bl	80024f8 <HAL_GetTick>
 8003ebe:	eba0 0008 	sub.w	r0, r0, r8
 8003ec2:	2864      	cmp	r0, #100	; 0x64
 8003ec4:	d9f6      	bls.n	8003eb4 <HAL_RCC_OscConfig+0x1d0>
 8003ec6:	e7ab      	b.n	8003e20 <HAL_RCC_OscConfig+0x13c>
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8003ec8:	2e04      	cmp	r6, #4
 8003eca:	d003      	beq.n	8003ed4 <HAL_RCC_OscConfig+0x1f0>
 8003ecc:	2e0c      	cmp	r6, #12
 8003ece:	d110      	bne.n	8003ef2 <HAL_RCC_OscConfig+0x20e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003ed0:	2f02      	cmp	r7, #2
 8003ed2:	d10e      	bne.n	8003ef2 <HAL_RCC_OscConfig+0x20e>
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003ed4:	6823      	ldr	r3, [r4, #0]
 8003ed6:	0559      	lsls	r1, r3, #21
 8003ed8:	d503      	bpl.n	8003ee2 <HAL_RCC_OscConfig+0x1fe>
 8003eda:	68eb      	ldr	r3, [r5, #12]
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	f43f af05 	beq.w	8003cec <HAL_RCC_OscConfig+0x8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003ee2:	6863      	ldr	r3, [r4, #4]
 8003ee4:	692a      	ldr	r2, [r5, #16]
 8003ee6:	f023 53f8 	bic.w	r3, r3, #520093696	; 0x1f000000
 8003eea:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8003eee:	6063      	str	r3, [r4, #4]
 8003ef0:	e782      	b.n	8003df8 <HAL_RCC_OscConfig+0x114>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003ef2:	68eb      	ldr	r3, [r5, #12]
 8003ef4:	b17b      	cbz	r3, 8003f16 <HAL_RCC_OscConfig+0x232>
        __HAL_RCC_HSI_ENABLE();
 8003ef6:	6823      	ldr	r3, [r4, #0]
 8003ef8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003efc:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8003efe:	f7fe fafb 	bl	80024f8 <HAL_GetTick>
 8003f02:	4607      	mov	r7, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003f04:	6823      	ldr	r3, [r4, #0]
 8003f06:	055a      	lsls	r2, r3, #21
 8003f08:	d4eb      	bmi.n	8003ee2 <HAL_RCC_OscConfig+0x1fe>
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003f0a:	f7fe faf5 	bl	80024f8 <HAL_GetTick>
 8003f0e:	1bc0      	subs	r0, r0, r7
 8003f10:	2802      	cmp	r0, #2
 8003f12:	d9f7      	bls.n	8003f04 <HAL_RCC_OscConfig+0x220>
 8003f14:	e784      	b.n	8003e20 <HAL_RCC_OscConfig+0x13c>
        __HAL_RCC_HSI_DISABLE();
 8003f16:	6823      	ldr	r3, [r4, #0]
 8003f18:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003f1c:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8003f1e:	f7fe faeb 	bl	80024f8 <HAL_GetTick>
 8003f22:	4607      	mov	r7, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003f24:	6823      	ldr	r3, [r4, #0]
 8003f26:	055b      	lsls	r3, r3, #21
 8003f28:	f57f af66 	bpl.w	8003df8 <HAL_RCC_OscConfig+0x114>
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003f2c:	f7fe fae4 	bl	80024f8 <HAL_GetTick>
 8003f30:	1bc0      	subs	r0, r0, r7
 8003f32:	2802      	cmp	r0, #2
 8003f34:	d9f6      	bls.n	8003f24 <HAL_RCC_OscConfig+0x240>
 8003f36:	e773      	b.n	8003e20 <HAL_RCC_OscConfig+0x13c>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003f38:	696b      	ldr	r3, [r5, #20]
 8003f3a:	b19b      	cbz	r3, 8003f64 <HAL_RCC_OscConfig+0x280>
      __HAL_RCC_LSI_ENABLE();
 8003f3c:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 8003f40:	f043 0301 	orr.w	r3, r3, #1
 8003f44:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
      tickstart = HAL_GetTick();
 8003f48:	f7fe fad6 	bl	80024f8 <HAL_GetTick>
 8003f4c:	4607      	mov	r7, r0
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003f4e:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 8003f52:	079a      	lsls	r2, r3, #30
 8003f54:	f53f af54 	bmi.w	8003e00 <HAL_RCC_OscConfig+0x11c>
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003f58:	f7fe face 	bl	80024f8 <HAL_GetTick>
 8003f5c:	1bc0      	subs	r0, r0, r7
 8003f5e:	2802      	cmp	r0, #2
 8003f60:	d9f5      	bls.n	8003f4e <HAL_RCC_OscConfig+0x26a>
 8003f62:	e75d      	b.n	8003e20 <HAL_RCC_OscConfig+0x13c>
      __HAL_RCC_LSI_DISABLE();
 8003f64:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 8003f68:	f023 0301 	bic.w	r3, r3, #1
 8003f6c:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
      tickstart = HAL_GetTick();
 8003f70:	f7fe fac2 	bl	80024f8 <HAL_GetTick>
 8003f74:	4607      	mov	r7, r0
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003f76:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 8003f7a:	079b      	lsls	r3, r3, #30
 8003f7c:	f57f af40 	bpl.w	8003e00 <HAL_RCC_OscConfig+0x11c>
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003f80:	f7fe faba 	bl	80024f8 <HAL_GetTick>
 8003f84:	1bc0      	subs	r0, r0, r7
 8003f86:	2802      	cmp	r0, #2
 8003f88:	d9f5      	bls.n	8003f76 <HAL_RCC_OscConfig+0x292>
 8003f8a:	e749      	b.n	8003e20 <HAL_RCC_OscConfig+0x13c>
 8003f8c:	40021000 	.word	0x40021000
 8003f90:	0801d966 	.word	0x0801d966
 8003f94:	20000024 	.word	0x20000024
 8003f98:	2000002c 	.word	0x2000002c
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8003f9c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8003f9e:	00d8      	lsls	r0, r3, #3
 8003fa0:	d429      	bmi.n	8003ff6 <HAL_RCC_OscConfig+0x312>
      __HAL_RCC_PWR_CLK_ENABLE();
 8003fa2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8003fa4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003fa8:	65a3      	str	r3, [r4, #88]	; 0x58
 8003faa:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8003fac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003fb0:	9301      	str	r3, [sp, #4]
 8003fb2:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8003fb4:	f04f 0801 	mov.w	r8, #1
    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003fb8:	4f79      	ldr	r7, [pc, #484]	; (80041a0 <HAL_RCC_OscConfig+0x4bc>)
 8003fba:	683b      	ldr	r3, [r7, #0]
 8003fbc:	05d9      	lsls	r1, r3, #23
 8003fbe:	d51d      	bpl.n	8003ffc <HAL_RCC_OscConfig+0x318>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003fc0:	68ab      	ldr	r3, [r5, #8]
 8003fc2:	2b01      	cmp	r3, #1
 8003fc4:	d12b      	bne.n	800401e <HAL_RCC_OscConfig+0x33a>
 8003fc6:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8003fca:	f043 0301 	orr.w	r3, r3, #1
 8003fce:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
      tickstart = HAL_GetTick();
 8003fd2:	f7fe fa91 	bl	80024f8 <HAL_GetTick>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003fd6:	f241 3988 	movw	r9, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8003fda:	4607      	mov	r7, r0
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003fdc:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8003fe0:	079b      	lsls	r3, r3, #30
 8003fe2:	d542      	bpl.n	800406a <HAL_RCC_OscConfig+0x386>
    if(pwrclkchanged == SET)
 8003fe4:	f1b8 0f00 	cmp.w	r8, #0
 8003fe8:	f43f af0e 	beq.w	8003e08 <HAL_RCC_OscConfig+0x124>
      __HAL_RCC_PWR_CLK_DISABLE();
 8003fec:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8003fee:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003ff2:	65a3      	str	r3, [r4, #88]	; 0x58
 8003ff4:	e708      	b.n	8003e08 <HAL_RCC_OscConfig+0x124>
    FlagStatus       pwrclkchanged = RESET;
 8003ff6:	f04f 0800 	mov.w	r8, #0
 8003ffa:	e7dd      	b.n	8003fb8 <HAL_RCC_OscConfig+0x2d4>
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003ffc:	683b      	ldr	r3, [r7, #0]
 8003ffe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004002:	603b      	str	r3, [r7, #0]
      tickstart = HAL_GetTick();
 8004004:	f7fe fa78 	bl	80024f8 <HAL_GetTick>
 8004008:	4681      	mov	r9, r0
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800400a:	683b      	ldr	r3, [r7, #0]
 800400c:	05da      	lsls	r2, r3, #23
 800400e:	d4d7      	bmi.n	8003fc0 <HAL_RCC_OscConfig+0x2dc>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004010:	f7fe fa72 	bl	80024f8 <HAL_GetTick>
 8004014:	eba0 0009 	sub.w	r0, r0, r9
 8004018:	2802      	cmp	r0, #2
 800401a:	d9f6      	bls.n	800400a <HAL_RCC_OscConfig+0x326>
 800401c:	e700      	b.n	8003e20 <HAL_RCC_OscConfig+0x13c>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800401e:	2b05      	cmp	r3, #5
 8004020:	d106      	bne.n	8004030 <HAL_RCC_OscConfig+0x34c>
 8004022:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8004026:	f043 0304 	orr.w	r3, r3, #4
 800402a:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
 800402e:	e7ca      	b.n	8003fc6 <HAL_RCC_OscConfig+0x2e2>
 8004030:	f8d4 2090 	ldr.w	r2, [r4, #144]	; 0x90
 8004034:	f022 0201 	bic.w	r2, r2, #1
 8004038:	f8c4 2090 	str.w	r2, [r4, #144]	; 0x90
 800403c:	f8d4 2090 	ldr.w	r2, [r4, #144]	; 0x90
 8004040:	f022 0204 	bic.w	r2, r2, #4
 8004044:	f8c4 2090 	str.w	r2, [r4, #144]	; 0x90
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004048:	2b00      	cmp	r3, #0
 800404a:	d1c2      	bne.n	8003fd2 <HAL_RCC_OscConfig+0x2ee>
      tickstart = HAL_GetTick();
 800404c:	f7fe fa54 	bl	80024f8 <HAL_GetTick>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004050:	f241 3988 	movw	r9, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8004054:	4607      	mov	r7, r0
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004056:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 800405a:	0798      	lsls	r0, r3, #30
 800405c:	d5c2      	bpl.n	8003fe4 <HAL_RCC_OscConfig+0x300>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800405e:	f7fe fa4b 	bl	80024f8 <HAL_GetTick>
 8004062:	1bc0      	subs	r0, r0, r7
 8004064:	4548      	cmp	r0, r9
 8004066:	d9f6      	bls.n	8004056 <HAL_RCC_OscConfig+0x372>
 8004068:	e6da      	b.n	8003e20 <HAL_RCC_OscConfig+0x13c>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800406a:	f7fe fa45 	bl	80024f8 <HAL_GetTick>
 800406e:	1bc0      	subs	r0, r0, r7
 8004070:	4548      	cmp	r0, r9
 8004072:	d9b3      	bls.n	8003fdc <HAL_RCC_OscConfig+0x2f8>
 8004074:	e6d4      	b.n	8003e20 <HAL_RCC_OscConfig+0x13c>
    if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004076:	2e0c      	cmp	r6, #12
 8004078:	d05c      	beq.n	8004134 <HAL_RCC_OscConfig+0x450>
        __HAL_RCC_PLL_DISABLE();
 800407a:	6823      	ldr	r3, [r4, #0]
      if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800407c:	2802      	cmp	r0, #2
        __HAL_RCC_PLL_DISABLE();
 800407e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004082:	6023      	str	r3, [r4, #0]
      if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004084:	d13b      	bne.n	80040fe <HAL_RCC_OscConfig+0x41a>
        tickstart = HAL_GetTick();
 8004086:	f7fe fa37 	bl	80024f8 <HAL_GetTick>
 800408a:	4606      	mov	r6, r0
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800408c:	6823      	ldr	r3, [r4, #0]
 800408e:	0199      	lsls	r1, r3, #6
 8004090:	d42f      	bmi.n	80040f2 <HAL_RCC_OscConfig+0x40e>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004092:	68e2      	ldr	r2, [r4, #12]
 8004094:	4b43      	ldr	r3, [pc, #268]	; (80041a4 <HAL_RCC_OscConfig+0x4c0>)
 8004096:	4013      	ands	r3, r2
 8004098:	6aea      	ldr	r2, [r5, #44]	; 0x2c
 800409a:	4313      	orrs	r3, r2
 800409c:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 800409e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80040a2:	6b2a      	ldr	r2, [r5, #48]	; 0x30
 80040a4:	3a01      	subs	r2, #1
 80040a6:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
 80040aa:	6baa      	ldr	r2, [r5, #56]	; 0x38
 80040ac:	0912      	lsrs	r2, r2, #4
 80040ae:	ea43 4342 	orr.w	r3, r3, r2, lsl #17
 80040b2:	6bea      	ldr	r2, [r5, #60]	; 0x3c
 80040b4:	0852      	lsrs	r2, r2, #1
 80040b6:	3a01      	subs	r2, #1
 80040b8:	ea43 5342 	orr.w	r3, r3, r2, lsl #21
 80040bc:	6c2a      	ldr	r2, [r5, #64]	; 0x40
 80040be:	0852      	lsrs	r2, r2, #1
 80040c0:	3a01      	subs	r2, #1
 80040c2:	ea43 6342 	orr.w	r3, r3, r2, lsl #25
 80040c6:	60e3      	str	r3, [r4, #12]
        __HAL_RCC_PLL_ENABLE();
 80040c8:	6823      	ldr	r3, [r4, #0]
 80040ca:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80040ce:	6023      	str	r3, [r4, #0]
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80040d0:	68e3      	ldr	r3, [r4, #12]
 80040d2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80040d6:	60e3      	str	r3, [r4, #12]
        tickstart = HAL_GetTick();
 80040d8:	f7fe fa0e 	bl	80024f8 <HAL_GetTick>
 80040dc:	4605      	mov	r5, r0
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80040de:	6823      	ldr	r3, [r4, #0]
 80040e0:	019a      	lsls	r2, r3, #6
 80040e2:	f53f ae95 	bmi.w	8003e10 <HAL_RCC_OscConfig+0x12c>
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80040e6:	f7fe fa07 	bl	80024f8 <HAL_GetTick>
 80040ea:	1b40      	subs	r0, r0, r5
 80040ec:	2802      	cmp	r0, #2
 80040ee:	d9f6      	bls.n	80040de <HAL_RCC_OscConfig+0x3fa>
 80040f0:	e696      	b.n	8003e20 <HAL_RCC_OscConfig+0x13c>
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80040f2:	f7fe fa01 	bl	80024f8 <HAL_GetTick>
 80040f6:	1b80      	subs	r0, r0, r6
 80040f8:	2802      	cmp	r0, #2
 80040fa:	d9c7      	bls.n	800408c <HAL_RCC_OscConfig+0x3a8>
 80040fc:	e690      	b.n	8003e20 <HAL_RCC_OscConfig+0x13c>
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 80040fe:	6823      	ldr	r3, [r4, #0]
 8004100:	f013 5f20 	tst.w	r3, #671088640	; 0x28000000
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8004104:	bf02      	ittt	eq
 8004106:	68e3      	ldreq	r3, [r4, #12]
 8004108:	f023 0303 	biceq.w	r3, r3, #3
 800410c:	60e3      	streq	r3, [r4, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 800410e:	68e3      	ldr	r3, [r4, #12]
 8004110:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8004114:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004118:	60e3      	str	r3, [r4, #12]
        tickstart = HAL_GetTick();
 800411a:	f7fe f9ed 	bl	80024f8 <HAL_GetTick>
 800411e:	4605      	mov	r5, r0
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004120:	6823      	ldr	r3, [r4, #0]
 8004122:	019b      	lsls	r3, r3, #6
 8004124:	f57f ae74 	bpl.w	8003e10 <HAL_RCC_OscConfig+0x12c>
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004128:	f7fe f9e6 	bl	80024f8 <HAL_GetTick>
 800412c:	1b40      	subs	r0, r0, r5
 800412e:	2802      	cmp	r0, #2
 8004130:	d9f6      	bls.n	8004120 <HAL_RCC_OscConfig+0x43c>
 8004132:	e675      	b.n	8003e20 <HAL_RCC_OscConfig+0x13c>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004134:	2801      	cmp	r0, #1
 8004136:	f43f ae23 	beq.w	8003d80 <HAL_RCC_OscConfig+0x9c>
        pll_config = RCC->PLLCFGR;
 800413a:	68e3      	ldr	r3, [r4, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800413c:	6aea      	ldr	r2, [r5, #44]	; 0x2c
 800413e:	f003 0103 	and.w	r1, r3, #3
 8004142:	4291      	cmp	r1, r2
 8004144:	f47f add2 	bne.w	8003cec <HAL_RCC_OscConfig+0x8>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004148:	6b29      	ldr	r1, [r5, #48]	; 0x30
 800414a:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800414e:	3901      	subs	r1, #1
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004150:	ebb2 1f01 	cmp.w	r2, r1, lsl #4
 8004154:	f47f adca 	bne.w	8003cec <HAL_RCC_OscConfig+0x8>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004158:	6b69      	ldr	r1, [r5, #52]	; 0x34
 800415a:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800415e:	ebb2 2f01 	cmp.w	r2, r1, lsl #8
 8004162:	f47f adc3 	bne.w	8003cec <HAL_RCC_OscConfig+0x8>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8004166:	6baa      	ldr	r2, [r5, #56]	; 0x38
 8004168:	3a07      	subs	r2, #7
 800416a:	f403 3100 	and.w	r1, r3, #131072	; 0x20000
 800416e:	bf18      	it	ne
 8004170:	2201      	movne	r2, #1
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004172:	4291      	cmp	r1, r2
 8004174:	f47f adba 	bne.w	8003cec <HAL_RCC_OscConfig+0x8>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004178:	6bea      	ldr	r2, [r5, #60]	; 0x3c
 800417a:	0852      	lsrs	r2, r2, #1
 800417c:	f403 01c0 	and.w	r1, r3, #6291456	; 0x600000
 8004180:	3a01      	subs	r2, #1
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8004182:	ebb1 5f42 	cmp.w	r1, r2, lsl #21
 8004186:	f47f adb1 	bne.w	8003cec <HAL_RCC_OscConfig+0x8>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800418a:	6c2a      	ldr	r2, [r5, #64]	; 0x40
 800418c:	0852      	lsrs	r2, r2, #1
 800418e:	3a01      	subs	r2, #1
 8004190:	f003 63c0 	and.w	r3, r3, #100663296	; 0x6000000
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004194:	ebb3 6f42 	cmp.w	r3, r2, lsl #25
    return HAL_ERROR;
 8004198:	bf14      	ite	ne
 800419a:	2001      	movne	r0, #1
 800419c:	2000      	moveq	r0, #0
 800419e:	e5ef      	b.n	8003d80 <HAL_RCC_OscConfig+0x9c>
 80041a0:	40007000 	.word	0x40007000
 80041a4:	f99d808c 	.word	0xf99d808c

080041a8 <HAL_RCC_ClockConfig>:
{
 80041a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80041ac:	460e      	mov	r6, r1
  if(RCC_ClkInitStruct == NULL)
 80041ae:	4604      	mov	r4, r0
 80041b0:	b910      	cbnz	r0, 80041b8 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 80041b2:	2001      	movs	r0, #1
 80041b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80041b8:	4a41      	ldr	r2, [pc, #260]	; (80042c0 <HAL_RCC_ClockConfig+0x118>)
 80041ba:	6813      	ldr	r3, [r2, #0]
 80041bc:	f003 0307 	and.w	r3, r3, #7
 80041c0:	428b      	cmp	r3, r1
 80041c2:	d32a      	bcc.n	800421a <HAL_RCC_ClockConfig+0x72>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80041c4:	6823      	ldr	r3, [r4, #0]
 80041c6:	07d9      	lsls	r1, r3, #31
 80041c8:	d432      	bmi.n	8004230 <HAL_RCC_ClockConfig+0x88>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80041ca:	6821      	ldr	r1, [r4, #0]
 80041cc:	078a      	lsls	r2, r1, #30
 80041ce:	d45c      	bmi.n	800428a <HAL_RCC_ClockConfig+0xe2>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80041d0:	4a3b      	ldr	r2, [pc, #236]	; (80042c0 <HAL_RCC_ClockConfig+0x118>)
 80041d2:	6813      	ldr	r3, [r2, #0]
 80041d4:	f003 0307 	and.w	r3, r3, #7
 80041d8:	429e      	cmp	r6, r3
 80041da:	d35e      	bcc.n	800429a <HAL_RCC_ClockConfig+0xf2>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80041dc:	f011 0f04 	tst.w	r1, #4
 80041e0:	4d38      	ldr	r5, [pc, #224]	; (80042c4 <HAL_RCC_ClockConfig+0x11c>)
 80041e2:	d165      	bne.n	80042b0 <HAL_RCC_ClockConfig+0x108>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80041e4:	070b      	lsls	r3, r1, #28
 80041e6:	d506      	bpl.n	80041f6 <HAL_RCC_ClockConfig+0x4e>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80041e8:	68ab      	ldr	r3, [r5, #8]
 80041ea:	6922      	ldr	r2, [r4, #16]
 80041ec:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 80041f0:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 80041f4:	60ab      	str	r3, [r5, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80041f6:	f7ff fd27 	bl	8003c48 <HAL_RCC_GetSysClockFreq>
 80041fa:	68ab      	ldr	r3, [r5, #8]
 80041fc:	4a32      	ldr	r2, [pc, #200]	; (80042c8 <HAL_RCC_ClockConfig+0x120>)
 80041fe:	f3c3 1303 	ubfx	r3, r3, #4, #4
}
 8004202:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004206:	5cd3      	ldrb	r3, [r2, r3]
 8004208:	f003 031f 	and.w	r3, r3, #31
 800420c:	40d8      	lsrs	r0, r3
 800420e:	4b2f      	ldr	r3, [pc, #188]	; (80042cc <HAL_RCC_ClockConfig+0x124>)
 8004210:	6018      	str	r0, [r3, #0]
  status = HAL_InitTick(uwTickPrio);
 8004212:	4b2f      	ldr	r3, [pc, #188]	; (80042d0 <HAL_RCC_ClockConfig+0x128>)
 8004214:	6818      	ldr	r0, [r3, #0]
 8004216:	f7fd bf49 	b.w	80020ac <HAL_InitTick>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800421a:	6813      	ldr	r3, [r2, #0]
 800421c:	f023 0307 	bic.w	r3, r3, #7
 8004220:	430b      	orrs	r3, r1
 8004222:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004224:	6813      	ldr	r3, [r2, #0]
 8004226:	f003 0307 	and.w	r3, r3, #7
 800422a:	4299      	cmp	r1, r3
 800422c:	d1c1      	bne.n	80041b2 <HAL_RCC_ClockConfig+0xa>
 800422e:	e7c9      	b.n	80041c4 <HAL_RCC_ClockConfig+0x1c>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004230:	6862      	ldr	r2, [r4, #4]
 8004232:	4d24      	ldr	r5, [pc, #144]	; (80042c4 <HAL_RCC_ClockConfig+0x11c>)
 8004234:	2a03      	cmp	r2, #3
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004236:	682b      	ldr	r3, [r5, #0]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004238:	d11b      	bne.n	8004272 <HAL_RCC_ClockConfig+0xca>
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800423a:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800423e:	d0b8      	beq.n	80041b2 <HAL_RCC_ClockConfig+0xa>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004240:	68ab      	ldr	r3, [r5, #8]
 8004242:	f023 0303 	bic.w	r3, r3, #3
 8004246:	4313      	orrs	r3, r2
 8004248:	60ab      	str	r3, [r5, #8]
    tickstart = HAL_GetTick();
 800424a:	f7fe f955 	bl	80024f8 <HAL_GetTick>
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800424e:	f241 3888 	movw	r8, #5000	; 0x1388
    tickstart = HAL_GetTick();
 8004252:	4607      	mov	r7, r0
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004254:	68ab      	ldr	r3, [r5, #8]
 8004256:	6862      	ldr	r2, [r4, #4]
 8004258:	f003 030c 	and.w	r3, r3, #12
 800425c:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8004260:	d0b3      	beq.n	80041ca <HAL_RCC_ClockConfig+0x22>
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004262:	f7fe f949 	bl	80024f8 <HAL_GetTick>
 8004266:	1bc0      	subs	r0, r0, r7
 8004268:	4540      	cmp	r0, r8
 800426a:	d9f3      	bls.n	8004254 <HAL_RCC_ClockConfig+0xac>
        return HAL_TIMEOUT;
 800426c:	2003      	movs	r0, #3
}
 800426e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004272:	2a02      	cmp	r2, #2
 8004274:	d102      	bne.n	800427c <HAL_RCC_ClockConfig+0xd4>
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004276:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 800427a:	e7e0      	b.n	800423e <HAL_RCC_ClockConfig+0x96>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800427c:	b912      	cbnz	r2, 8004284 <HAL_RCC_ClockConfig+0xdc>
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800427e:	f013 0f02 	tst.w	r3, #2
 8004282:	e7dc      	b.n	800423e <HAL_RCC_ClockConfig+0x96>
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004284:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8004288:	e7d9      	b.n	800423e <HAL_RCC_ClockConfig+0x96>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800428a:	4a0e      	ldr	r2, [pc, #56]	; (80042c4 <HAL_RCC_ClockConfig+0x11c>)
 800428c:	68a0      	ldr	r0, [r4, #8]
 800428e:	6893      	ldr	r3, [r2, #8]
 8004290:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004294:	4303      	orrs	r3, r0
 8004296:	6093      	str	r3, [r2, #8]
 8004298:	e79a      	b.n	80041d0 <HAL_RCC_ClockConfig+0x28>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800429a:	6813      	ldr	r3, [r2, #0]
 800429c:	f023 0307 	bic.w	r3, r3, #7
 80042a0:	4333      	orrs	r3, r6
 80042a2:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80042a4:	6813      	ldr	r3, [r2, #0]
 80042a6:	f003 0307 	and.w	r3, r3, #7
 80042aa:	429e      	cmp	r6, r3
 80042ac:	d181      	bne.n	80041b2 <HAL_RCC_ClockConfig+0xa>
 80042ae:	e795      	b.n	80041dc <HAL_RCC_ClockConfig+0x34>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80042b0:	68ab      	ldr	r3, [r5, #8]
 80042b2:	68e2      	ldr	r2, [r4, #12]
 80042b4:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80042b8:	4313      	orrs	r3, r2
 80042ba:	60ab      	str	r3, [r5, #8]
 80042bc:	e792      	b.n	80041e4 <HAL_RCC_ClockConfig+0x3c>
 80042be:	bf00      	nop
 80042c0:	40022000 	.word	0x40022000
 80042c4:	40021000 	.word	0x40021000
 80042c8:	0801d966 	.word	0x0801d966
 80042cc:	20000024 	.word	0x20000024
 80042d0:	2000002c 	.word	0x2000002c

080042d4 <HAL_RCC_GetHCLKFreq>:
}
 80042d4:	4b01      	ldr	r3, [pc, #4]	; (80042dc <HAL_RCC_GetHCLKFreq+0x8>)
 80042d6:	6818      	ldr	r0, [r3, #0]
 80042d8:	4770      	bx	lr
 80042da:	bf00      	nop
 80042dc:	20000024 	.word	0x20000024

080042e0 <HAL_RCC_GetPCLK1Freq>:
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80042e0:	4b05      	ldr	r3, [pc, #20]	; (80042f8 <HAL_RCC_GetPCLK1Freq+0x18>)
 80042e2:	4a06      	ldr	r2, [pc, #24]	; (80042fc <HAL_RCC_GetPCLK1Freq+0x1c>)
 80042e4:	689b      	ldr	r3, [r3, #8]
 80042e6:	f3c3 2302 	ubfx	r3, r3, #8, #3
 80042ea:	5cd3      	ldrb	r3, [r2, r3]
 80042ec:	4a04      	ldr	r2, [pc, #16]	; (8004300 <HAL_RCC_GetPCLK1Freq+0x20>)
 80042ee:	6810      	ldr	r0, [r2, #0]
 80042f0:	f003 031f 	and.w	r3, r3, #31
}
 80042f4:	40d8      	lsrs	r0, r3
 80042f6:	4770      	bx	lr
 80042f8:	40021000 	.word	0x40021000
 80042fc:	0801d976 	.word	0x0801d976
 8004300:	20000024 	.word	0x20000024

08004304 <HAL_RCC_GetPCLK2Freq>:
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8004304:	4b05      	ldr	r3, [pc, #20]	; (800431c <HAL_RCC_GetPCLK2Freq+0x18>)
 8004306:	4a06      	ldr	r2, [pc, #24]	; (8004320 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8004308:	689b      	ldr	r3, [r3, #8]
 800430a:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 800430e:	5cd3      	ldrb	r3, [r2, r3]
 8004310:	4a04      	ldr	r2, [pc, #16]	; (8004324 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004312:	6810      	ldr	r0, [r2, #0]
 8004314:	f003 031f 	and.w	r3, r3, #31
}
 8004318:	40d8      	lsrs	r0, r3
 800431a:	4770      	bx	lr
 800431c:	40021000 	.word	0x40021000
 8004320:	0801d976 	.word	0x0801d976
 8004324:	20000024 	.word	0x20000024

08004328 <HAL_RCC_GetClockConfig>:
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8004328:	230f      	movs	r3, #15
 800432a:	6003      	str	r3, [r0, #0]
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 800432c:	4b0b      	ldr	r3, [pc, #44]	; (800435c <HAL_RCC_GetClockConfig+0x34>)
 800432e:	689a      	ldr	r2, [r3, #8]
 8004330:	f002 0203 	and.w	r2, r2, #3
 8004334:	6042      	str	r2, [r0, #4]
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8004336:	689a      	ldr	r2, [r3, #8]
 8004338:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
 800433c:	6082      	str	r2, [r0, #8]
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 800433e:	689a      	ldr	r2, [r3, #8]
 8004340:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
 8004344:	60c2      	str	r2, [r0, #12]
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8004346:	689b      	ldr	r3, [r3, #8]
 8004348:	08db      	lsrs	r3, r3, #3
 800434a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800434e:	6103      	str	r3, [r0, #16]
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8004350:	4b03      	ldr	r3, [pc, #12]	; (8004360 <HAL_RCC_GetClockConfig+0x38>)
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	f003 0307 	and.w	r3, r3, #7
 8004358:	600b      	str	r3, [r1, #0]
 800435a:	4770      	bx	lr
 800435c:	40021000 	.word	0x40021000
 8004360:	40022000 	.word	0x40022000

08004364 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8004364:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004366:	4b45      	ldr	r3, [pc, #276]	; (800447c <RCCEx_PLLSAI1_Config+0x118>)
 8004368:	68da      	ldr	r2, [r3, #12]
 800436a:	f012 0f03 	tst.w	r2, #3
{
 800436e:	4605      	mov	r5, r0
 8004370:	460e      	mov	r6, r1
 8004372:	461c      	mov	r4, r3
 8004374:	6800      	ldr	r0, [r0, #0]
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004376:	d02a      	beq.n	80043ce <RCCEx_PLLSAI1_Config+0x6a>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8004378:	68da      	ldr	r2, [r3, #12]
 800437a:	f002 0203 	and.w	r2, r2, #3
 800437e:	4282      	cmp	r2, r0
 8004380:	d13c      	bne.n	80043fc <RCCEx_PLLSAI1_Config+0x98>
       ||
 8004382:	2a00      	cmp	r2, #0
 8004384:	d03a      	beq.n	80043fc <RCCEx_PLLSAI1_Config+0x98>
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8004386:	68db      	ldr	r3, [r3, #12]
       ||
 8004388:	686a      	ldr	r2, [r5, #4]
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800438a:	f3c3 1302 	ubfx	r3, r3, #4, #3
 800438e:	3301      	adds	r3, #1
       ||
 8004390:	4293      	cmp	r3, r2
 8004392:	d133      	bne.n	80043fc <RCCEx_PLLSAI1_Config+0x98>
  }

  if(status == HAL_OK)
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8004394:	6823      	ldr	r3, [r4, #0]
 8004396:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800439a:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800439c:	f7fe f8ac 	bl	80024f8 <HAL_GetTick>
 80043a0:	4607      	mov	r7, r0

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80043a2:	6823      	ldr	r3, [r4, #0]
 80043a4:	011a      	lsls	r2, r3, #4
 80043a6:	d432      	bmi.n	800440e <RCCEx_PLLSAI1_Config+0xaa>
 80043a8:	68af      	ldr	r7, [r5, #8]
      }
    }

    if(status == HAL_OK)
    {
      if(Divider == DIVIDER_P_UPDATE)
 80043aa:	2e00      	cmp	r6, #0
 80043ac:	d036      	beq.n	800441c <RCCEx_PLLSAI1_Config+0xb8>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80043ae:	2e01      	cmp	r6, #1
 80043b0:	d150      	bne.n	8004454 <RCCEx_PLLSAI1_Config+0xf0>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80043b2:	6922      	ldr	r2, [r4, #16]
 80043b4:	6928      	ldr	r0, [r5, #16]
 80043b6:	f422 02c0 	bic.w	r2, r2, #6291456	; 0x600000
 80043ba:	0840      	lsrs	r0, r0, #1
 80043bc:	f422 42fe 	bic.w	r2, r2, #32512	; 0x7f00
 80043c0:	3801      	subs	r0, #1
 80043c2:	ea42 2207 	orr.w	r2, r2, r7, lsl #8
 80043c6:	ea42 5240 	orr.w	r2, r2, r0, lsl #21
 80043ca:	6122      	str	r2, [r4, #16]
 80043cc:	e032      	b.n	8004434 <RCCEx_PLLSAI1_Config+0xd0>
    switch(PllSai1->PLLSAI1Source)
 80043ce:	2802      	cmp	r0, #2
 80043d0:	d010      	beq.n	80043f4 <RCCEx_PLLSAI1_Config+0x90>
 80043d2:	2803      	cmp	r0, #3
 80043d4:	d014      	beq.n	8004400 <RCCEx_PLLSAI1_Config+0x9c>
 80043d6:	2801      	cmp	r0, #1
 80043d8:	d110      	bne.n	80043fc <RCCEx_PLLSAI1_Config+0x98>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	079f      	lsls	r7, r3, #30
 80043de:	d538      	bpl.n	8004452 <RCCEx_PLLSAI1_Config+0xee>
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80043e0:	68e3      	ldr	r3, [r4, #12]
 80043e2:	686a      	ldr	r2, [r5, #4]
 80043e4:	f023 0373 	bic.w	r3, r3, #115	; 0x73
 80043e8:	3a01      	subs	r2, #1
 80043ea:	4318      	orrs	r0, r3
 80043ec:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 80043f0:	60e0      	str	r0, [r4, #12]
 80043f2:	e7cf      	b.n	8004394 <RCCEx_PLLSAI1_Config+0x30>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	f413 6f80 	tst.w	r3, #1024	; 0x400
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80043fa:	d1f1      	bne.n	80043e0 <RCCEx_PLLSAI1_Config+0x7c>
 80043fc:	2001      	movs	r0, #1
 80043fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004400:	681a      	ldr	r2, [r3, #0]
 8004402:	0391      	lsls	r1, r2, #14
 8004404:	d4ec      	bmi.n	80043e0 <RCCEx_PLLSAI1_Config+0x7c>
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	f413 2f80 	tst.w	r3, #262144	; 0x40000
 800440c:	e7f5      	b.n	80043fa <RCCEx_PLLSAI1_Config+0x96>
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800440e:	f7fe f873 	bl	80024f8 <HAL_GetTick>
 8004412:	1bc0      	subs	r0, r0, r7
 8004414:	2802      	cmp	r0, #2
 8004416:	d9c4      	bls.n	80043a2 <RCCEx_PLLSAI1_Config+0x3e>
        status = HAL_TIMEOUT;
 8004418:	2003      	movs	r0, #3
 800441a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800441c:	6921      	ldr	r1, [r4, #16]
 800441e:	68eb      	ldr	r3, [r5, #12]
 8004420:	f421 311f 	bic.w	r1, r1, #162816	; 0x27c00
 8004424:	f421 7140 	bic.w	r1, r1, #768	; 0x300
 8004428:	ea41 2107 	orr.w	r1, r1, r7, lsl #8
 800442c:	091b      	lsrs	r3, r3, #4
 800442e:	ea41 4143 	orr.w	r1, r1, r3, lsl #17
 8004432:	6121      	str	r1, [r4, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8004434:	6823      	ldr	r3, [r4, #0]
 8004436:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800443a:	6023      	str	r3, [r4, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800443c:	f7fe f85c 	bl	80024f8 <HAL_GetTick>
 8004440:	4606      	mov	r6, r0

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004442:	6823      	ldr	r3, [r4, #0]
 8004444:	011b      	lsls	r3, r3, #4
 8004446:	d513      	bpl.n	8004470 <RCCEx_PLLSAI1_Config+0x10c>
      }

      if(status == HAL_OK)
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8004448:	6923      	ldr	r3, [r4, #16]
 800444a:	69aa      	ldr	r2, [r5, #24]
 800444c:	4313      	orrs	r3, r2
 800444e:	6123      	str	r3, [r4, #16]
 8004450:	2000      	movs	r0, #0
      }
    }
  }

  return status;
}
 8004452:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004454:	6923      	ldr	r3, [r4, #16]
 8004456:	6968      	ldr	r0, [r5, #20]
 8004458:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800445c:	0840      	lsrs	r0, r0, #1
 800445e:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004462:	3801      	subs	r0, #1
 8004464:	ea43 2307 	orr.w	r3, r3, r7, lsl #8
 8004468:	ea43 6340 	orr.w	r3, r3, r0, lsl #25
 800446c:	6123      	str	r3, [r4, #16]
 800446e:	e7e1      	b.n	8004434 <RCCEx_PLLSAI1_Config+0xd0>
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004470:	f7fe f842 	bl	80024f8 <HAL_GetTick>
 8004474:	1b80      	subs	r0, r0, r6
 8004476:	2802      	cmp	r0, #2
 8004478:	d9e3      	bls.n	8004442 <RCCEx_PLLSAI1_Config+0xde>
 800447a:	e7cd      	b.n	8004418 <RCCEx_PLLSAI1_Config+0xb4>
 800447c:	40021000 	.word	0x40021000

08004480 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8004480:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004482:	4b3d      	ldr	r3, [pc, #244]	; (8004578 <RCCEx_PLLSAI2_Config+0xf8>)
 8004484:	68da      	ldr	r2, [r3, #12]
 8004486:	f012 0f03 	tst.w	r2, #3
{
 800448a:	4605      	mov	r5, r0
 800448c:	460e      	mov	r6, r1
 800448e:	461c      	mov	r4, r3
 8004490:	6800      	ldr	r0, [r0, #0]
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004492:	d028      	beq.n	80044e6 <RCCEx_PLLSAI2_Config+0x66>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8004494:	68da      	ldr	r2, [r3, #12]
 8004496:	f002 0203 	and.w	r2, r2, #3
 800449a:	4282      	cmp	r2, r0
 800449c:	d13a      	bne.n	8004514 <RCCEx_PLLSAI2_Config+0x94>
       ||
 800449e:	2a00      	cmp	r2, #0
 80044a0:	d038      	beq.n	8004514 <RCCEx_PLLSAI2_Config+0x94>
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 80044a2:	68db      	ldr	r3, [r3, #12]
       ||
 80044a4:	686a      	ldr	r2, [r5, #4]
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 80044a6:	f3c3 1302 	ubfx	r3, r3, #4, #3
 80044aa:	3301      	adds	r3, #1
       ||
 80044ac:	4293      	cmp	r3, r2
 80044ae:	d131      	bne.n	8004514 <RCCEx_PLLSAI2_Config+0x94>
  }

  if(status == HAL_OK)
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80044b0:	6823      	ldr	r3, [r4, #0]
 80044b2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80044b6:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80044b8:	f7fe f81e 	bl	80024f8 <HAL_GetTick>
 80044bc:	4607      	mov	r7, r0

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80044be:	6823      	ldr	r3, [r4, #0]
 80044c0:	009a      	lsls	r2, r3, #2
 80044c2:	d430      	bmi.n	8004526 <RCCEx_PLLSAI2_Config+0xa6>
 80044c4:	68a8      	ldr	r0, [r5, #8]
      }
    }

    if(status == HAL_OK)
    {
      if(Divider == DIVIDER_P_UPDATE)
 80044c6:	2e00      	cmp	r6, #0
 80044c8:	d034      	beq.n	8004534 <RCCEx_PLLSAI2_Config+0xb4>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80044ca:	6963      	ldr	r3, [r4, #20]
 80044cc:	6929      	ldr	r1, [r5, #16]
 80044ce:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80044d2:	0849      	lsrs	r1, r1, #1
 80044d4:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80044d8:	3901      	subs	r1, #1
 80044da:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
 80044de:	ea43 6341 	orr.w	r3, r3, r1, lsl #25
 80044e2:	6163      	str	r3, [r4, #20]
 80044e4:	e032      	b.n	800454c <RCCEx_PLLSAI2_Config+0xcc>
    switch(PllSai2->PLLSAI2Source)
 80044e6:	2802      	cmp	r0, #2
 80044e8:	d010      	beq.n	800450c <RCCEx_PLLSAI2_Config+0x8c>
 80044ea:	2803      	cmp	r0, #3
 80044ec:	d014      	beq.n	8004518 <RCCEx_PLLSAI2_Config+0x98>
 80044ee:	2801      	cmp	r0, #1
 80044f0:	d110      	bne.n	8004514 <RCCEx_PLLSAI2_Config+0x94>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	079f      	lsls	r7, r3, #30
 80044f6:	d538      	bpl.n	800456a <RCCEx_PLLSAI2_Config+0xea>
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80044f8:	68e3      	ldr	r3, [r4, #12]
 80044fa:	686a      	ldr	r2, [r5, #4]
 80044fc:	f023 0373 	bic.w	r3, r3, #115	; 0x73
 8004500:	3a01      	subs	r2, #1
 8004502:	4318      	orrs	r0, r3
 8004504:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8004508:	60e0      	str	r0, [r4, #12]
 800450a:	e7d1      	b.n	80044b0 <RCCEx_PLLSAI2_Config+0x30>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	f413 6f80 	tst.w	r3, #1024	; 0x400
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004512:	d1f1      	bne.n	80044f8 <RCCEx_PLLSAI2_Config+0x78>
 8004514:	2001      	movs	r0, #1
 8004516:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004518:	681a      	ldr	r2, [r3, #0]
 800451a:	0391      	lsls	r1, r2, #14
 800451c:	d4ec      	bmi.n	80044f8 <RCCEx_PLLSAI2_Config+0x78>
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	f413 2f80 	tst.w	r3, #262144	; 0x40000
 8004524:	e7f5      	b.n	8004512 <RCCEx_PLLSAI2_Config+0x92>
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004526:	f7fd ffe7 	bl	80024f8 <HAL_GetTick>
 800452a:	1bc0      	subs	r0, r0, r7
 800452c:	2802      	cmp	r0, #2
 800452e:	d9c6      	bls.n	80044be <RCCEx_PLLSAI2_Config+0x3e>
        status = HAL_TIMEOUT;
 8004530:	2003      	movs	r0, #3
 8004532:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004534:	6962      	ldr	r2, [r4, #20]
 8004536:	68eb      	ldr	r3, [r5, #12]
 8004538:	f422 321f 	bic.w	r2, r2, #162816	; 0x27c00
 800453c:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8004540:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
 8004544:	091b      	lsrs	r3, r3, #4
 8004546:	ea42 4243 	orr.w	r2, r2, r3, lsl #17
 800454a:	6162      	str	r2, [r4, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 800454c:	6823      	ldr	r3, [r4, #0]
 800454e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004552:	6023      	str	r3, [r4, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004554:	f7fd ffd0 	bl	80024f8 <HAL_GetTick>
 8004558:	4606      	mov	r6, r0

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800455a:	6823      	ldr	r3, [r4, #0]
 800455c:	009b      	lsls	r3, r3, #2
 800455e:	d505      	bpl.n	800456c <RCCEx_PLLSAI2_Config+0xec>
      }

      if(status == HAL_OK)
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8004560:	6963      	ldr	r3, [r4, #20]
 8004562:	696a      	ldr	r2, [r5, #20]
 8004564:	4313      	orrs	r3, r2
 8004566:	6163      	str	r3, [r4, #20]
 8004568:	2000      	movs	r0, #0
      }
    }
  }

  return status;
}
 800456a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800456c:	f7fd ffc4 	bl	80024f8 <HAL_GetTick>
 8004570:	1b80      	subs	r0, r0, r6
 8004572:	2802      	cmp	r0, #2
 8004574:	d9f1      	bls.n	800455a <RCCEx_PLLSAI2_Config+0xda>
 8004576:	e7db      	b.n	8004530 <RCCEx_PLLSAI2_Config+0xb0>
 8004578:	40021000 	.word	0x40021000

0800457c <HAL_RCCEx_PeriphCLKConfig>:
{
 800457c:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8004580:	6806      	ldr	r6, [r0, #0]
 8004582:	f416 6600 	ands.w	r6, r6, #2048	; 0x800
{
 8004586:	4604      	mov	r4, r0
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8004588:	d024      	beq.n	80045d4 <HAL_RCCEx_PeriphCLKConfig+0x58>
    switch(PeriphClkInit->Sai1ClockSelection)
 800458a:	6e41      	ldr	r1, [r0, #100]	; 0x64
 800458c:	f5b1 0f80 	cmp.w	r1, #4194304	; 0x400000
 8004590:	d02c      	beq.n	80045ec <HAL_RCCEx_PeriphCLKConfig+0x70>
 8004592:	d802      	bhi.n	800459a <HAL_RCCEx_PeriphCLKConfig+0x1e>
 8004594:	b1c1      	cbz	r1, 80045c8 <HAL_RCCEx_PeriphCLKConfig+0x4c>
      ret = HAL_ERROR;
 8004596:	2601      	movs	r6, #1
 8004598:	e01c      	b.n	80045d4 <HAL_RCCEx_PeriphCLKConfig+0x58>
    switch(PeriphClkInit->Sai1ClockSelection)
 800459a:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 800459e:	d00d      	beq.n	80045bc <HAL_RCCEx_PeriphCLKConfig+0x40>
 80045a0:	f5b1 0f40 	cmp.w	r1, #12582912	; 0xc00000
 80045a4:	d1f7      	bne.n	8004596 <HAL_RCCEx_PeriphCLKConfig+0x1a>
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80045a6:	4a4d      	ldr	r2, [pc, #308]	; (80046dc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80045a8:	6e61      	ldr	r1, [r4, #100]	; 0x64
 80045aa:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 80045ae:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 80045b2:	430b      	orrs	r3, r1
 80045b4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
 80045b8:	2600      	movs	r6, #0
 80045ba:	e00b      	b.n	80045d4 <HAL_RCCEx_PeriphCLKConfig+0x58>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80045bc:	4a47      	ldr	r2, [pc, #284]	; (80046dc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80045be:	68d3      	ldr	r3, [r2, #12]
 80045c0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80045c4:	60d3      	str	r3, [r2, #12]
      break;
 80045c6:	e7ee      	b.n	80045a6 <HAL_RCCEx_PeriphCLKConfig+0x2a>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80045c8:	3004      	adds	r0, #4
 80045ca:	f7ff fecb 	bl	8004364 <RCCEx_PLLSAI1_Config>
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80045ce:	4606      	mov	r6, r0
    if(ret == HAL_OK)
 80045d0:	2800      	cmp	r0, #0
 80045d2:	d0e8      	beq.n	80045a6 <HAL_RCCEx_PeriphCLKConfig+0x2a>
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80045d4:	6823      	ldr	r3, [r4, #0]
 80045d6:	04d8      	lsls	r0, r3, #19
 80045d8:	d506      	bpl.n	80045e8 <HAL_RCCEx_PeriphCLKConfig+0x6c>
    switch(PeriphClkInit->Sai2ClockSelection)
 80045da:	6ea1      	ldr	r1, [r4, #104]	; 0x68
 80045dc:	f1b1 7f80 	cmp.w	r1, #16777216	; 0x1000000
 80045e0:	d074      	beq.n	80046cc <HAL_RCCEx_PeriphCLKConfig+0x150>
 80045e2:	d808      	bhi.n	80045f6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 80045e4:	b1a9      	cbz	r1, 8004612 <HAL_RCCEx_PeriphCLKConfig+0x96>
      ret = HAL_ERROR;
 80045e6:	2601      	movs	r6, #1
 80045e8:	4635      	mov	r5, r6
 80045ea:	e021      	b.n	8004630 <HAL_RCCEx_PeriphCLKConfig+0xb4>
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80045ec:	2100      	movs	r1, #0
 80045ee:	3020      	adds	r0, #32
 80045f0:	f7ff ff46 	bl	8004480 <RCCEx_PLLSAI2_Config>
 80045f4:	e7eb      	b.n	80045ce <HAL_RCCEx_PeriphCLKConfig+0x52>
    switch(PeriphClkInit->Sai2ClockSelection)
 80045f6:	f1b1 7f00 	cmp.w	r1, #33554432	; 0x2000000
 80045fa:	d004      	beq.n	8004606 <HAL_RCCEx_PeriphCLKConfig+0x8a>
 80045fc:	f1b1 7f40 	cmp.w	r1, #50331648	; 0x3000000
 8004600:	d1f1      	bne.n	80045e6 <HAL_RCCEx_PeriphCLKConfig+0x6a>
 8004602:	4635      	mov	r5, r6
 8004604:	e009      	b.n	800461a <HAL_RCCEx_PeriphCLKConfig+0x9e>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004606:	4a35      	ldr	r2, [pc, #212]	; (80046dc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004608:	68d3      	ldr	r3, [r2, #12]
 800460a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800460e:	60d3      	str	r3, [r2, #12]
 8004610:	e7f7      	b.n	8004602 <HAL_RCCEx_PeriphCLKConfig+0x86>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004612:	1d20      	adds	r0, r4, #4
 8004614:	f7ff fea6 	bl	8004364 <RCCEx_PLLSAI1_Config>
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004618:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 800461a:	2d00      	cmp	r5, #0
 800461c:	d15c      	bne.n	80046d8 <HAL_RCCEx_PeriphCLKConfig+0x15c>
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800461e:	4a2f      	ldr	r2, [pc, #188]	; (80046dc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004620:	6ea1      	ldr	r1, [r4, #104]	; 0x68
 8004622:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8004626:	f023 7340 	bic.w	r3, r3, #50331648	; 0x3000000
 800462a:	430b      	orrs	r3, r1
 800462c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004630:	6823      	ldr	r3, [r4, #0]
 8004632:	0399      	lsls	r1, r3, #14
 8004634:	f140 814f 	bpl.w	80048d6 <HAL_RCCEx_PeriphCLKConfig+0x35a>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004638:	4f28      	ldr	r7, [pc, #160]	; (80046dc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800463a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800463c:	00da      	lsls	r2, r3, #3
 800463e:	f140 8176 	bpl.w	800492e <HAL_RCCEx_PeriphCLKConfig+0x3b2>
    FlagStatus       pwrclkchanged = RESET;
 8004642:	f04f 0800 	mov.w	r8, #0
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004646:	f8df 9098 	ldr.w	r9, [pc, #152]	; 80046e0 <HAL_RCCEx_PeriphCLKConfig+0x164>
 800464a:	f8d9 3000 	ldr.w	r3, [r9]
 800464e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004652:	f8c9 3000 	str.w	r3, [r9]
    tickstart = HAL_GetTick();
 8004656:	f7fd ff4f 	bl	80024f8 <HAL_GetTick>
 800465a:	4682      	mov	sl, r0
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800465c:	f8d9 3000 	ldr.w	r3, [r9]
 8004660:	05db      	lsls	r3, r3, #23
 8004662:	d53f      	bpl.n	80046e4 <HAL_RCCEx_PeriphCLKConfig+0x168>
    if(ret == HAL_OK)
 8004664:	2d00      	cmp	r5, #0
 8004666:	d144      	bne.n	80046f2 <HAL_RCCEx_PeriphCLKConfig+0x176>
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004668:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800466c:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 8004670:	d015      	beq.n	800469e <HAL_RCCEx_PeriphCLKConfig+0x122>
 8004672:	f8d4 2084 	ldr.w	r2, [r4, #132]	; 0x84
 8004676:	4293      	cmp	r3, r2
 8004678:	d011      	beq.n	800469e <HAL_RCCEx_PeriphCLKConfig+0x122>
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800467a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_FORCE();
 800467e:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 8004682:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8004686:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800468a:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800468e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004692:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8004696:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
        RCC->BDCR = tmpregister;
 800469a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800469e:	07d8      	lsls	r0, r3, #31
 80046a0:	d509      	bpl.n	80046b6 <HAL_RCCEx_PeriphCLKConfig+0x13a>
        tickstart = HAL_GetTick();
 80046a2:	f7fd ff29 	bl	80024f8 <HAL_GetTick>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80046a6:	f241 3988 	movw	r9, #5000	; 0x1388
        tickstart = HAL_GetTick();
 80046aa:	4605      	mov	r5, r0
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80046ac:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80046b0:	0799      	lsls	r1, r3, #30
 80046b2:	f140 8109 	bpl.w	80048c8 <HAL_RCCEx_PeriphCLKConfig+0x34c>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80046b6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80046ba:	f8d4 2084 	ldr.w	r2, [r4, #132]	; 0x84
 80046be:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80046c2:	4313      	orrs	r3, r2
 80046c4:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80046c8:	4635      	mov	r5, r6
 80046ca:	e012      	b.n	80046f2 <HAL_RCCEx_PeriphCLKConfig+0x176>
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80046cc:	2100      	movs	r1, #0
 80046ce:	f104 0020 	add.w	r0, r4, #32
 80046d2:	f7ff fed5 	bl	8004480 <RCCEx_PLLSAI2_Config>
 80046d6:	e79f      	b.n	8004618 <HAL_RCCEx_PeriphCLKConfig+0x9c>
 80046d8:	462e      	mov	r6, r5
 80046da:	e7a9      	b.n	8004630 <HAL_RCCEx_PeriphCLKConfig+0xb4>
 80046dc:	40021000 	.word	0x40021000
 80046e0:	40007000 	.word	0x40007000
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80046e4:	f7fd ff08 	bl	80024f8 <HAL_GetTick>
 80046e8:	eba0 000a 	sub.w	r0, r0, sl
 80046ec:	2802      	cmp	r0, #2
 80046ee:	d9b5      	bls.n	800465c <HAL_RCCEx_PeriphCLKConfig+0xe0>
        ret = HAL_TIMEOUT;
 80046f0:	2503      	movs	r5, #3
    if(pwrclkchanged == SET)
 80046f2:	f1b8 0f00 	cmp.w	r8, #0
 80046f6:	d003      	beq.n	8004700 <HAL_RCCEx_PeriphCLKConfig+0x184>
      __HAL_RCC_PWR_CLK_DISABLE();
 80046f8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80046fa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80046fe:	65bb      	str	r3, [r7, #88]	; 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004700:	6823      	ldr	r3, [r4, #0]
 8004702:	07da      	lsls	r2, r3, #31
 8004704:	d508      	bpl.n	8004718 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004706:	4990      	ldr	r1, [pc, #576]	; (8004948 <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 8004708:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 800470a:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 800470e:	f022 0203 	bic.w	r2, r2, #3
 8004712:	4302      	orrs	r2, r0
 8004714:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004718:	079f      	lsls	r7, r3, #30
 800471a:	d508      	bpl.n	800472e <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800471c:	498a      	ldr	r1, [pc, #552]	; (8004948 <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 800471e:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8004720:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8004724:	f022 020c 	bic.w	r2, r2, #12
 8004728:	4302      	orrs	r2, r0
 800472a:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800472e:	075e      	lsls	r6, r3, #29
 8004730:	d508      	bpl.n	8004744 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004732:	4985      	ldr	r1, [pc, #532]	; (8004948 <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 8004734:	6c20      	ldr	r0, [r4, #64]	; 0x40
 8004736:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 800473a:	f022 0230 	bic.w	r2, r2, #48	; 0x30
 800473e:	4302      	orrs	r2, r0
 8004740:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004744:	0718      	lsls	r0, r3, #28
 8004746:	d508      	bpl.n	800475a <HAL_RCCEx_PeriphCLKConfig+0x1de>
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004748:	497f      	ldr	r1, [pc, #508]	; (8004948 <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 800474a:	6c60      	ldr	r0, [r4, #68]	; 0x44
 800474c:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8004750:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8004754:	4302      	orrs	r2, r0
 8004756:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800475a:	06d9      	lsls	r1, r3, #27
 800475c:	d508      	bpl.n	8004770 <HAL_RCCEx_PeriphCLKConfig+0x1f4>
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800475e:	497a      	ldr	r1, [pc, #488]	; (8004948 <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 8004760:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 8004762:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8004766:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800476a:	4302      	orrs	r2, r0
 800476c:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004770:	069a      	lsls	r2, r3, #26
 8004772:	d508      	bpl.n	8004786 <HAL_RCCEx_PeriphCLKConfig+0x20a>
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004774:	4974      	ldr	r1, [pc, #464]	; (8004948 <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 8004776:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 8004778:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 800477c:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8004780:	4302      	orrs	r2, r0
 8004782:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8004786:	059f      	lsls	r7, r3, #22
 8004788:	d508      	bpl.n	800479c <HAL_RCCEx_PeriphCLKConfig+0x220>
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800478a:	496f      	ldr	r1, [pc, #444]	; (8004948 <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 800478c:	6de0      	ldr	r0, [r4, #92]	; 0x5c
 800478e:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8004792:	f422 2240 	bic.w	r2, r2, #786432	; 0xc0000
 8004796:	4302      	orrs	r2, r0
 8004798:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800479c:	055e      	lsls	r6, r3, #21
 800479e:	d508      	bpl.n	80047b2 <HAL_RCCEx_PeriphCLKConfig+0x236>
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80047a0:	4969      	ldr	r1, [pc, #420]	; (8004948 <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 80047a2:	6e20      	ldr	r0, [r4, #96]	; 0x60
 80047a4:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 80047a8:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 80047ac:	4302      	orrs	r2, r0
 80047ae:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80047b2:	0658      	lsls	r0, r3, #25
 80047b4:	d508      	bpl.n	80047c8 <HAL_RCCEx_PeriphCLKConfig+0x24c>
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80047b6:	4964      	ldr	r1, [pc, #400]	; (8004948 <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 80047b8:	6d20      	ldr	r0, [r4, #80]	; 0x50
 80047ba:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 80047be:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 80047c2:	4302      	orrs	r2, r0
 80047c4:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80047c8:	0619      	lsls	r1, r3, #24
 80047ca:	d508      	bpl.n	80047de <HAL_RCCEx_PeriphCLKConfig+0x262>
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80047cc:	495e      	ldr	r1, [pc, #376]	; (8004948 <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 80047ce:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80047d0:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 80047d4:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 80047d8:	4302      	orrs	r2, r0
 80047da:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80047de:	05da      	lsls	r2, r3, #23
 80047e0:	d508      	bpl.n	80047f4 <HAL_RCCEx_PeriphCLKConfig+0x278>
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80047e2:	4959      	ldr	r1, [pc, #356]	; (8004948 <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 80047e4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80047e6:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 80047ea:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 80047ee:	4302      	orrs	r2, r0
 80047f0:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80047f4:	049b      	lsls	r3, r3, #18
 80047f6:	d50f      	bpl.n	8004818 <HAL_RCCEx_PeriphCLKConfig+0x29c>
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80047f8:	4a53      	ldr	r2, [pc, #332]	; (8004948 <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 80047fa:	6ee1      	ldr	r1, [r4, #108]	; 0x6c
 80047fc:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8004800:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 8004804:	430b      	orrs	r3, r1
    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004806:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800480a:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800480e:	d164      	bne.n	80048da <HAL_RCCEx_PeriphCLKConfig+0x35e>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004810:	68d3      	ldr	r3, [r2, #12]
 8004812:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004816:	60d3      	str	r3, [r2, #12]
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8004818:	6823      	ldr	r3, [r4, #0]
 800481a:	031f      	lsls	r7, r3, #12
 800481c:	d50f      	bpl.n	800483e <HAL_RCCEx_PeriphCLKConfig+0x2c2>
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800481e:	4a4a      	ldr	r2, [pc, #296]	; (8004948 <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 8004820:	6f21      	ldr	r1, [r4, #112]	; 0x70
 8004822:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8004826:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 800482a:	430b      	orrs	r3, r1
    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 800482c:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004830:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8004834:	d15c      	bne.n	80048f0 <HAL_RCCEx_PeriphCLKConfig+0x374>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004836:	68d3      	ldr	r3, [r2, #12]
 8004838:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800483c:	60d3      	str	r3, [r2, #12]
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800483e:	6823      	ldr	r3, [r4, #0]
 8004840:	035e      	lsls	r6, r3, #13
 8004842:	d50f      	bpl.n	8004864 <HAL_RCCEx_PeriphCLKConfig+0x2e8>
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004844:	4a40      	ldr	r2, [pc, #256]	; (8004948 <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 8004846:	6f61      	ldr	r1, [r4, #116]	; 0x74
 8004848:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 800484c:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 8004850:	430b      	orrs	r3, r1
    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004852:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004856:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800485a:	d154      	bne.n	8004906 <HAL_RCCEx_PeriphCLKConfig+0x38a>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800485c:	68d3      	ldr	r3, [r2, #12]
 800485e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004862:	60d3      	str	r3, [r2, #12]
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004864:	6823      	ldr	r3, [r4, #0]
 8004866:	0458      	lsls	r0, r3, #17
 8004868:	d512      	bpl.n	8004890 <HAL_RCCEx_PeriphCLKConfig+0x314>
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800486a:	4937      	ldr	r1, [pc, #220]	; (8004948 <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 800486c:	6fa2      	ldr	r2, [r4, #120]	; 0x78
 800486e:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8004872:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 8004876:	4313      	orrs	r3, r2
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8004878:	f1b2 5f80 	cmp.w	r2, #268435456	; 0x10000000
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800487c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8004880:	d14c      	bne.n	800491c <HAL_RCCEx_PeriphCLKConfig+0x3a0>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8004882:	2102      	movs	r1, #2
 8004884:	1d20      	adds	r0, r4, #4
 8004886:	f7ff fd6d 	bl	8004364 <RCCEx_PLLSAI1_Config>
      if(ret != HAL_OK)
 800488a:	2800      	cmp	r0, #0
 800488c:	bf18      	it	ne
 800488e:	4605      	movne	r5, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004890:	6822      	ldr	r2, [r4, #0]
 8004892:	0411      	lsls	r1, r2, #16
 8004894:	d508      	bpl.n	80048a8 <HAL_RCCEx_PeriphCLKConfig+0x32c>
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004896:	492c      	ldr	r1, [pc, #176]	; (8004948 <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 8004898:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
 800489a:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 800489e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80048a2:	4303      	orrs	r3, r0
 80048a4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80048a8:	03d3      	lsls	r3, r2, #15
 80048aa:	d509      	bpl.n	80048c0 <HAL_RCCEx_PeriphCLKConfig+0x344>
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80048ac:	4a26      	ldr	r2, [pc, #152]	; (8004948 <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 80048ae:	f8d4 1080 	ldr.w	r1, [r4, #128]	; 0x80
 80048b2:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 80048b6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80048ba:	430b      	orrs	r3, r1
 80048bc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
}
 80048c0:	4628      	mov	r0, r5
 80048c2:	b002      	add	sp, #8
 80048c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80048c8:	f7fd fe16 	bl	80024f8 <HAL_GetTick>
 80048cc:	1b40      	subs	r0, r0, r5
 80048ce:	4548      	cmp	r0, r9
 80048d0:	f67f aeec 	bls.w	80046ac <HAL_RCCEx_PeriphCLKConfig+0x130>
 80048d4:	e70c      	b.n	80046f0 <HAL_RCCEx_PeriphCLKConfig+0x174>
 80048d6:	4635      	mov	r5, r6
 80048d8:	e712      	b.n	8004700 <HAL_RCCEx_PeriphCLKConfig+0x184>
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80048da:	f1b1 6f80 	cmp.w	r1, #67108864	; 0x4000000
 80048de:	d19b      	bne.n	8004818 <HAL_RCCEx_PeriphCLKConfig+0x29c>
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80048e0:	2101      	movs	r1, #1
 80048e2:	1d20      	adds	r0, r4, #4
 80048e4:	f7ff fd3e 	bl	8004364 <RCCEx_PLLSAI1_Config>
        if(ret != HAL_OK)
 80048e8:	2800      	cmp	r0, #0
 80048ea:	bf18      	it	ne
 80048ec:	4605      	movne	r5, r0
 80048ee:	e793      	b.n	8004818 <HAL_RCCEx_PeriphCLKConfig+0x29c>
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80048f0:	f1b1 6f80 	cmp.w	r1, #67108864	; 0x4000000
 80048f4:	d1a3      	bne.n	800483e <HAL_RCCEx_PeriphCLKConfig+0x2c2>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80048f6:	2101      	movs	r1, #1
 80048f8:	1d20      	adds	r0, r4, #4
 80048fa:	f7ff fd33 	bl	8004364 <RCCEx_PLLSAI1_Config>
      if(ret != HAL_OK)
 80048fe:	2800      	cmp	r0, #0
 8004900:	bf18      	it	ne
 8004902:	4605      	movne	r5, r0
 8004904:	e79b      	b.n	800483e <HAL_RCCEx_PeriphCLKConfig+0x2c2>
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8004906:	f1b1 6f80 	cmp.w	r1, #67108864	; 0x4000000
 800490a:	d1ab      	bne.n	8004864 <HAL_RCCEx_PeriphCLKConfig+0x2e8>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800490c:	2101      	movs	r1, #1
 800490e:	1d20      	adds	r0, r4, #4
 8004910:	f7ff fd28 	bl	8004364 <RCCEx_PLLSAI1_Config>
      if(ret != HAL_OK)
 8004914:	2800      	cmp	r0, #0
 8004916:	bf18      	it	ne
 8004918:	4605      	movne	r5, r0
 800491a:	e7a3      	b.n	8004864 <HAL_RCCEx_PeriphCLKConfig+0x2e8>
    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 800491c:	f1b2 5f00 	cmp.w	r2, #536870912	; 0x20000000
 8004920:	d1b6      	bne.n	8004890 <HAL_RCCEx_PeriphCLKConfig+0x314>
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8004922:	2102      	movs	r1, #2
 8004924:	f104 0020 	add.w	r0, r4, #32
 8004928:	f7ff fdaa 	bl	8004480 <RCCEx_PLLSAI2_Config>
 800492c:	e7ad      	b.n	800488a <HAL_RCCEx_PeriphCLKConfig+0x30e>
      __HAL_RCC_PWR_CLK_ENABLE();
 800492e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004930:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004934:	65bb      	str	r3, [r7, #88]	; 0x58
 8004936:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004938:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800493c:	9301      	str	r3, [sp, #4]
 800493e:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8004940:	f04f 0801 	mov.w	r8, #1
 8004944:	e67f      	b.n	8004646 <HAL_RCCEx_PeriphCLKConfig+0xca>
 8004946:	bf00      	nop
 8004948:	40021000 	.word	0x40021000

0800494c <HAL_RTC_WaitForSynchro>:

  /* Clear RSF flag */
#if defined(STM32L412xx) || defined(STM32L422xx)
  hrtc->Instance->ICSR &= (uint32_t)RTC_RSF_MASK;
#else
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 800494c:	6802      	ldr	r2, [r0, #0]
{
 800494e:	b538      	push	{r3, r4, r5, lr}
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8004950:	68d3      	ldr	r3, [r2, #12]
 8004952:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004956:	60d3      	str	r3, [r2, #12]
{
 8004958:	4604      	mov	r4, r0
#endif

  tickstart = HAL_GetTick();
 800495a:	f7fd fdcd 	bl	80024f8 <HAL_GetTick>
 800495e:	4605      	mov	r5, r0

  /* Wait the registers to be synchronised */
#if defined(STM32L412xx) || defined(STM32L422xx)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
#else
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8004960:	6823      	ldr	r3, [r4, #0]
 8004962:	68db      	ldr	r3, [r3, #12]
 8004964:	069b      	lsls	r3, r3, #26
 8004966:	d501      	bpl.n	800496c <HAL_RTC_WaitForSynchro+0x20>
    {
      return HAL_TIMEOUT;
    }
  }

  return HAL_OK;
 8004968:	2000      	movs	r0, #0
 800496a:	bd38      	pop	{r3, r4, r5, pc}
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800496c:	f7fd fdc4 	bl	80024f8 <HAL_GetTick>
 8004970:	1b40      	subs	r0, r0, r5
 8004972:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8004976:	d9f3      	bls.n	8004960 <HAL_RTC_WaitForSynchro+0x14>
      return HAL_TIMEOUT;
 8004978:	2003      	movs	r0, #3
}
 800497a:	bd38      	pop	{r3, r4, r5, pc}

0800497c <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800497c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
      }
    }
  }
#else /* #if defined(STM32L412xx) || defined(STM32L422xx) */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 800497e:	6803      	ldr	r3, [r0, #0]
 8004980:	68dc      	ldr	r4, [r3, #12]
 8004982:	f014 0440 	ands.w	r4, r4, #64	; 0x40
{
 8004986:	4605      	mov	r5, r0
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8004988:	d118      	bne.n	80049bc <RTC_EnterInitMode+0x40>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 800498a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800498e:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8004990:	f7fd fdb2 	bl	80024f8 <HAL_GetTick>
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
      {
        status = HAL_TIMEOUT;
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8004994:	2703      	movs	r7, #3
    tickstart = HAL_GetTick();
 8004996:	4606      	mov	r6, r0
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8004998:	682b      	ldr	r3, [r5, #0]
 800499a:	68db      	ldr	r3, [r3, #12]
 800499c:	065b      	lsls	r3, r3, #25
 800499e:	d401      	bmi.n	80049a4 <RTC_EnterInitMode+0x28>
 80049a0:	2c03      	cmp	r4, #3
 80049a2:	d101      	bne.n	80049a8 <RTC_EnterInitMode+0x2c>
    }
  }
#endif /* #if defined(STM32L412xx) || defined(STM32L422xx) */

  return status;
}
 80049a4:	4620      	mov	r0, r4
 80049a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 80049a8:	f7fd fda6 	bl	80024f8 <HAL_GetTick>
 80049ac:	1b80      	subs	r0, r0, r6
 80049ae:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80049b2:	bf84      	itt	hi
 80049b4:	f885 7021 	strbhi.w	r7, [r5, #33]	; 0x21
        status = HAL_TIMEOUT;
 80049b8:	2403      	movhi	r4, #3
 80049ba:	e7ed      	b.n	8004998 <RTC_EnterInitMode+0x1c>
  HAL_StatusTypeDef status = HAL_OK;
 80049bc:	2400      	movs	r4, #0
 80049be:	e7f1      	b.n	80049a4 <RTC_EnterInitMode+0x28>

080049c0 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 80049c0:	b538      	push	{r3, r4, r5, lr}
  /* Exit Initialization mode */
#if defined(STM32L412xx) || defined(STM32L422xx)
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
#else
  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ISR, RTC_ISR_INIT);
 80049c2:	4c0f      	ldr	r4, [pc, #60]	; (8004a00 <RTC_ExitInitMode+0x40>)
 80049c4:	68e3      	ldr	r3, [r4, #12]
 80049c6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80049ca:	60e3      	str	r3, [r4, #12]
#endif

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 80049cc:	68a3      	ldr	r3, [r4, #8]
 80049ce:	069b      	lsls	r3, r3, #26
{
 80049d0:	4605      	mov	r5, r0
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 80049d2:	d406      	bmi.n	80049e2 <RTC_ExitInitMode+0x22>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80049d4:	f7ff ffba 	bl	800494c <HAL_RTC_WaitForSynchro>
 80049d8:	b188      	cbz	r0, 80049fe <RTC_ExitInitMode+0x3e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80049da:	2003      	movs	r0, #3
 80049dc:	f885 0021 	strb.w	r0, [r5, #33]	; 0x21
 80049e0:	bd38      	pop	{r3, r4, r5, pc}
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 80049e2:	68a3      	ldr	r3, [r4, #8]
 80049e4:	f023 0320 	bic.w	r3, r3, #32
 80049e8:	60a3      	str	r3, [r4, #8]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80049ea:	f7ff ffaf 	bl	800494c <HAL_RTC_WaitForSynchro>
 80049ee:	b110      	cbz	r0, 80049f6 <RTC_ExitInitMode+0x36>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80049f0:	2003      	movs	r0, #3
 80049f2:	f885 0021 	strb.w	r0, [r5, #33]	; 0x21
      status = HAL_TIMEOUT;
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 80049f6:	68a3      	ldr	r3, [r4, #8]
 80049f8:	f043 0320 	orr.w	r3, r3, #32
 80049fc:	60a3      	str	r3, [r4, #8]
  }

  return status;
}
 80049fe:	bd38      	pop	{r3, r4, r5, pc}
 8004a00:	40002800 	.word	0x40002800

08004a04 <HAL_RTC_Init>:
{
 8004a04:	b538      	push	{r3, r4, r5, lr}
  if (hrtc != NULL)
 8004a06:	4604      	mov	r4, r0
 8004a08:	2800      	cmp	r0, #0
 8004a0a:	d040      	beq.n	8004a8e <HAL_RTC_Init+0x8a>
    if (hrtc->State == HAL_RTC_STATE_RESET)
 8004a0c:	f890 3021 	ldrb.w	r3, [r0, #33]	; 0x21
 8004a10:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8004a14:	b91b      	cbnz	r3, 8004a1e <HAL_RTC_Init+0x1a>
      hrtc->Lock = HAL_UNLOCKED;
 8004a16:	f880 2020 	strb.w	r2, [r0, #32]
      HAL_RTC_MspInit(hrtc);
 8004a1a:	f7fd fa97 	bl	8001f4c <HAL_RTC_MspInit>
    hrtc->State = HAL_RTC_STATE_BUSY;
 8004a1e:	2302      	movs	r3, #2
 8004a20:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004a24:	6823      	ldr	r3, [r4, #0]
 8004a26:	22ca      	movs	r2, #202	; 0xca
 8004a28:	625a      	str	r2, [r3, #36]	; 0x24
 8004a2a:	2253      	movs	r2, #83	; 0x53
 8004a2c:	625a      	str	r2, [r3, #36]	; 0x24
    status = RTC_EnterInitMode(hrtc);
 8004a2e:	4620      	mov	r0, r4
 8004a30:	f7ff ffa4 	bl	800497c <RTC_EnterInitMode>
    if (status == HAL_OK)
 8004a34:	2800      	cmp	r0, #0
 8004a36:	d12b      	bne.n	8004a90 <HAL_RTC_Init+0x8c>
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 8004a38:	6823      	ldr	r3, [r4, #0]
      hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8004a3a:	6920      	ldr	r0, [r4, #16]
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 8004a3c:	689a      	ldr	r2, [r3, #8]
 8004a3e:	f422 02e0 	bic.w	r2, r2, #7340032	; 0x700000
 8004a42:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004a46:	609a      	str	r2, [r3, #8]
      hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8004a48:	6862      	ldr	r2, [r4, #4]
 8004a4a:	6899      	ldr	r1, [r3, #8]
 8004a4c:	4302      	orrs	r2, r0
 8004a4e:	69a0      	ldr	r0, [r4, #24]
 8004a50:	4302      	orrs	r2, r0
 8004a52:	430a      	orrs	r2, r1
 8004a54:	609a      	str	r2, [r3, #8]
      hrtc->Instance->PRER = (hrtc->Init.SynchPrediv);
 8004a56:	68e2      	ldr	r2, [r4, #12]
 8004a58:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8004a5a:	691a      	ldr	r2, [r3, #16]
 8004a5c:	68a1      	ldr	r1, [r4, #8]
 8004a5e:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8004a62:	611a      	str	r2, [r3, #16]
      status = RTC_ExitInitMode(hrtc);
 8004a64:	4620      	mov	r0, r4
 8004a66:	f7ff ffab 	bl	80049c0 <RTC_ExitInitMode>
      if (status == HAL_OK)
 8004a6a:	b988      	cbnz	r0, 8004a90 <HAL_RTC_Init+0x8c>
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 8004a6c:	6823      	ldr	r3, [r4, #0]
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8004a6e:	6965      	ldr	r5, [r4, #20]
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 8004a70:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004a72:	f022 0203 	bic.w	r2, r2, #3
 8004a76:	64da      	str	r2, [r3, #76]	; 0x4c
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8004a78:	69e2      	ldr	r2, [r4, #28]
 8004a7a:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8004a7c:	432a      	orrs	r2, r5
 8004a7e:	430a      	orrs	r2, r1
 8004a80:	64da      	str	r2, [r3, #76]	; 0x4c
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004a82:	22ff      	movs	r2, #255	; 0xff
 8004a84:	625a      	str	r2, [r3, #36]	; 0x24
          hrtc->State = HAL_RTC_STATE_READY;
 8004a86:	2301      	movs	r3, #1
 8004a88:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
 8004a8c:	bd38      	pop	{r3, r4, r5, pc}
  HAL_StatusTypeDef status = HAL_ERROR;
 8004a8e:	2001      	movs	r0, #1
}
 8004a90:	bd38      	pop	{r3, r4, r5, pc}

08004a92 <RTC_ByteToBcd2>:
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
  uint32_t bcdhigh = 0U;
 8004a92:	2300      	movs	r3, #0
  uint8_t temp = Value;

  while (temp >= 10U)
 8004a94:	2809      	cmp	r0, #9
 8004a96:	d803      	bhi.n	8004aa0 <RTC_ByteToBcd2+0xe>
  {
    bcdhigh++;
    temp -= 10U;
  }

  return ((uint8_t)(bcdhigh << 4U) | temp);
 8004a98:	ea40 1003 	orr.w	r0, r0, r3, lsl #4
}
 8004a9c:	b2c0      	uxtb	r0, r0
 8004a9e:	4770      	bx	lr
    temp -= 10U;
 8004aa0:	380a      	subs	r0, #10
    bcdhigh++;
 8004aa2:	3301      	adds	r3, #1
    temp -= 10U;
 8004aa4:	b2c0      	uxtb	r0, r0
 8004aa6:	e7f5      	b.n	8004a94 <RTC_ByteToBcd2+0x2>

08004aa8 <HAL_RTC_SetTime>:
{
 8004aa8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(hrtc);
 8004aaa:	f890 3020 	ldrb.w	r3, [r0, #32]
 8004aae:	2b01      	cmp	r3, #1
{
 8004ab0:	4605      	mov	r5, r0
 8004ab2:	460e      	mov	r6, r1
 8004ab4:	4617      	mov	r7, r2
 8004ab6:	f04f 0302 	mov.w	r3, #2
  __HAL_LOCK(hrtc);
 8004aba:	d052      	beq.n	8004b62 <HAL_RTC_SetTime+0xba>
  hrtc->State = HAL_RTC_STATE_BUSY;
 8004abc:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21
  __HAL_LOCK(hrtc);
 8004ac0:	2201      	movs	r2, #1
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004ac2:	6803      	ldr	r3, [r0, #0]
  __HAL_LOCK(hrtc);
 8004ac4:	f880 2020 	strb.w	r2, [r0, #32]
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004ac8:	22ca      	movs	r2, #202	; 0xca
 8004aca:	625a      	str	r2, [r3, #36]	; 0x24
 8004acc:	2253      	movs	r2, #83	; 0x53
 8004ace:	625a      	str	r2, [r3, #36]	; 0x24
  status = RTC_EnterInitMode(hrtc);
 8004ad0:	f7ff ff54 	bl	800497c <RTC_EnterInitMode>
  if (status == HAL_OK)
 8004ad4:	bb68      	cbnz	r0, 8004b32 <HAL_RTC_SetTime+0x8a>
 8004ad6:	682b      	ldr	r3, [r5, #0]
 8004ad8:	7830      	ldrb	r0, [r6, #0]
 8004ada:	7874      	ldrb	r4, [r6, #1]
 8004adc:	78b1      	ldrb	r1, [r6, #2]
      if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8004ade:	689b      	ldr	r3, [r3, #8]
    if (Format == RTC_FORMAT_BIN)
 8004ae0:	bb97      	cbnz	r7, 8004b48 <HAL_RTC_SetTime+0xa0>
      if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8004ae2:	f013 0340 	ands.w	r3, r3, #64	; 0x40
        sTime->TimeFormat = 0x00U;
 8004ae6:	bf08      	it	eq
 8004ae8:	70f3      	strbeq	r3, [r6, #3]
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8004aea:	f7ff ffd2 	bl	8004a92 <RTC_ByteToBcd2>
 8004aee:	4602      	mov	r2, r0
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8004af0:	4620      	mov	r0, r4
 8004af2:	f7ff ffce 	bl	8004a92 <RTC_ByteToBcd2>
 8004af6:	4604      	mov	r4, r0
                          ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos) | \
 8004af8:	4608      	mov	r0, r1
 8004afa:	f7ff ffca 	bl	8004a92 <RTC_ByteToBcd2>
                          (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 8004afe:	78f3      	ldrb	r3, [r6, #3]
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8004b00:	ea40 5083 	orr.w	r0, r0, r3, lsl #22
 8004b04:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
 8004b08:	ea40 2004 	orr.w	r0, r0, r4, lsl #8
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8004b0c:	682b      	ldr	r3, [r5, #0]
 8004b0e:	f000 307f 	and.w	r0, r0, #2139062143	; 0x7f7f7f7f
 8004b12:	f020 40fe 	bic.w	r0, r0, #2130706432	; 0x7f000000
 8004b16:	6018      	str	r0, [r3, #0]
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 8004b18:	689a      	ldr	r2, [r3, #8]
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8004b1a:	6930      	ldr	r0, [r6, #16]
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 8004b1c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004b20:	609a      	str	r2, [r3, #8]
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8004b22:	68f2      	ldr	r2, [r6, #12]
 8004b24:	6899      	ldr	r1, [r3, #8]
 8004b26:	4302      	orrs	r2, r0
 8004b28:	430a      	orrs	r2, r1
 8004b2a:	609a      	str	r2, [r3, #8]
    status = RTC_ExitInitMode(hrtc);
 8004b2c:	4628      	mov	r0, r5
 8004b2e:	f7ff ff47 	bl	80049c0 <RTC_ExitInitMode>
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004b32:	682b      	ldr	r3, [r5, #0]
 8004b34:	22ff      	movs	r2, #255	; 0xff
 8004b36:	625a      	str	r2, [r3, #36]	; 0x24
  if (status == HAL_OK)
 8004b38:	b910      	cbnz	r0, 8004b40 <HAL_RTC_SetTime+0x98>
    hrtc->State = HAL_RTC_STATE_READY;
 8004b3a:	2301      	movs	r3, #1
 8004b3c:	f885 3021 	strb.w	r3, [r5, #33]	; 0x21
  __HAL_UNLOCK(hrtc);
 8004b40:	2300      	movs	r3, #0
 8004b42:	f885 3020 	strb.w	r3, [r5, #32]
  return status;
 8004b46:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8004b48:	f013 0340 	ands.w	r3, r3, #64	; 0x40
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8004b4c:	ea4f 2404 	mov.w	r4, r4, lsl #8
        sTime->TimeFormat = 0x00U;
 8004b50:	bf08      	it	eq
 8004b52:	70f3      	strbeq	r3, [r6, #3]
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8004b54:	ea44 4000 	orr.w	r0, r4, r0, lsl #16
                ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8004b58:	78f4      	ldrb	r4, [r6, #3]
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8004b5a:	4308      	orrs	r0, r1
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8004b5c:	ea40 5084 	orr.w	r0, r0, r4, lsl #22
 8004b60:	e7d4      	b.n	8004b0c <HAL_RTC_SetTime+0x64>
  __HAL_LOCK(hrtc);
 8004b62:	4618      	mov	r0, r3
}
 8004b64:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08004b66 <HAL_RTC_SetDate>:
{
 8004b66:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(hrtc);
 8004b68:	f890 3020 	ldrb.w	r3, [r0, #32]
 8004b6c:	2b01      	cmp	r3, #1
{
 8004b6e:	4605      	mov	r5, r0
 8004b70:	f04f 0002 	mov.w	r0, #2
  __HAL_LOCK(hrtc);
 8004b74:	d043      	beq.n	8004bfe <HAL_RTC_SetDate+0x98>
 8004b76:	2301      	movs	r3, #1
 8004b78:	f885 3020 	strb.w	r3, [r5, #32]
  hrtc->State = HAL_RTC_STATE_BUSY;
 8004b7c:	f885 0021 	strb.w	r0, [r5, #33]	; 0x21
 8004b80:	784b      	ldrb	r3, [r1, #1]
 8004b82:	78c8      	ldrb	r0, [r1, #3]
 8004b84:	788e      	ldrb	r6, [r1, #2]
 8004b86:	780c      	ldrb	r4, [r1, #0]
  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8004b88:	bb92      	cbnz	r2, 8004bf0 <HAL_RTC_SetDate+0x8a>
 8004b8a:	06da      	lsls	r2, r3, #27
 8004b8c:	d503      	bpl.n	8004b96 <HAL_RTC_SetDate+0x30>
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8004b8e:	f023 0310 	bic.w	r3, r3, #16
 8004b92:	330a      	adds	r3, #10
 8004b94:	704b      	strb	r3, [r1, #1]
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 8004b96:	f7ff ff7c 	bl	8004a92 <RTC_ByteToBcd2>
 8004b9a:	4607      	mov	r7, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8004b9c:	7848      	ldrb	r0, [r1, #1]
 8004b9e:	f7ff ff78 	bl	8004a92 <RTC_ByteToBcd2>
 8004ba2:	4602      	mov	r2, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date) << RTC_DR_DU_Pos) | \
 8004ba4:	4630      	mov	r0, r6
 8004ba6:	f7ff ff74 	bl	8004a92 <RTC_ByteToBcd2>
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 8004baa:	ea40 3044 	orr.w	r0, r0, r4, lsl #13
 8004bae:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8004bb2:	ea40 2402 	orr.w	r4, r0, r2, lsl #8
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004bb6:	682b      	ldr	r3, [r5, #0]
 8004bb8:	22ca      	movs	r2, #202	; 0xca
 8004bba:	625a      	str	r2, [r3, #36]	; 0x24
 8004bbc:	2253      	movs	r2, #83	; 0x53
 8004bbe:	625a      	str	r2, [r3, #36]	; 0x24
  status = RTC_EnterInitMode(hrtc);
 8004bc0:	4628      	mov	r0, r5
 8004bc2:	f7ff fedb 	bl	800497c <RTC_EnterInitMode>
  if (status == HAL_OK)
 8004bc6:	b940      	cbnz	r0, 8004bda <HAL_RTC_SetDate+0x74>
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8004bc8:	682b      	ldr	r3, [r5, #0]
 8004bca:	f024 447f 	bic.w	r4, r4, #4278190080	; 0xff000000
 8004bce:	f024 04c0 	bic.w	r4, r4, #192	; 0xc0
 8004bd2:	605c      	str	r4, [r3, #4]
    status = RTC_ExitInitMode(hrtc);
 8004bd4:	4628      	mov	r0, r5
 8004bd6:	f7ff fef3 	bl	80049c0 <RTC_ExitInitMode>
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004bda:	682b      	ldr	r3, [r5, #0]
 8004bdc:	22ff      	movs	r2, #255	; 0xff
 8004bde:	625a      	str	r2, [r3, #36]	; 0x24
  if (status == HAL_OK)
 8004be0:	b910      	cbnz	r0, 8004be8 <HAL_RTC_SetDate+0x82>
    hrtc->State = HAL_RTC_STATE_READY ;
 8004be2:	2301      	movs	r3, #1
 8004be4:	f885 3021 	strb.w	r3, [r5, #33]	; 0x21
  __HAL_UNLOCK(hrtc);
 8004be8:	2300      	movs	r3, #0
 8004bea:	f885 3020 	strb.w	r3, [r5, #32]
  return status;
 8004bee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 8004bf0:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8004bf2:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 8004bf6:	4330      	orrs	r0, r6
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8004bf8:	ea40 3444 	orr.w	r4, r0, r4, lsl #13
 8004bfc:	e7db      	b.n	8004bb6 <HAL_RTC_SetDate+0x50>
}
 8004bfe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08004c00 <SPI_WaitFifoStateUntilTimeout.part.1>:
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004c00:	6803      	ldr	r3, [r0, #0]
 8004c02:	685a      	ldr	r2, [r3, #4]
 8004c04:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004c08:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004c0a:	6842      	ldr	r2, [r0, #4]
 8004c0c:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
 8004c10:	d10a      	bne.n	8004c28 <SPI_WaitFifoStateUntilTimeout.part.1+0x28>
 8004c12:	6882      	ldr	r2, [r0, #8]
 8004c14:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 8004c18:	d002      	beq.n	8004c20 <SPI_WaitFifoStateUntilTimeout.part.1+0x20>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004c1a:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 8004c1e:	d103      	bne.n	8004c28 <SPI_WaitFifoStateUntilTimeout.part.1+0x28>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004c20:	681a      	ldr	r2, [r3, #0]
 8004c22:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004c26:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004c28:	6a82      	ldr	r2, [r0, #40]	; 0x28
 8004c2a:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 8004c2e:	d107      	bne.n	8004c40 <SPI_WaitFifoStateUntilTimeout.part.1+0x40>
        {
          SPI_RESET_CRC(hspi);
 8004c30:	681a      	ldr	r2, [r3, #0]
 8004c32:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004c36:	601a      	str	r2, [r3, #0]
 8004c38:	681a      	ldr	r2, [r3, #0]
 8004c3a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004c3e:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004c40:	2301      	movs	r3, #1
 8004c42:	f880 305d 	strb.w	r3, [r0, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004c46:	2300      	movs	r3, #0
 8004c48:	f880 305c 	strb.w	r3, [r0, #92]	; 0x5c
      }
    }
  }

  return HAL_OK;
}
 8004c4c:	2003      	movs	r0, #3
 8004c4e:	4770      	bx	lr

08004c50 <SPI_WaitFlagStateUntilTimeout.constprop.10>:
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
 8004c50:	b570      	push	{r4, r5, r6, lr}
 8004c52:	4604      	mov	r4, r0
 8004c54:	460d      	mov	r5, r1
 8004c56:	4616      	mov	r6, r2
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004c58:	6823      	ldr	r3, [r4, #0]
 8004c5a:	6898      	ldr	r0, [r3, #8]
 8004c5c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8004c60:	d100      	bne.n	8004c64 <SPI_WaitFlagStateUntilTimeout.constprop.10+0x14>
}
 8004c62:	bd70      	pop	{r4, r5, r6, pc}
    if (Timeout != HAL_MAX_DELAY)
 8004c64:	1c6a      	adds	r2, r5, #1
 8004c66:	d0f8      	beq.n	8004c5a <SPI_WaitFlagStateUntilTimeout.constprop.10+0xa>
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8004c68:	f7fd fc46 	bl	80024f8 <HAL_GetTick>
 8004c6c:	1b80      	subs	r0, r0, r6
 8004c6e:	4285      	cmp	r5, r0
 8004c70:	d8f2      	bhi.n	8004c58 <SPI_WaitFlagStateUntilTimeout.constprop.10+0x8>
 8004c72:	4620      	mov	r0, r4
}
 8004c74:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8004c78:	f7ff bfc2 	b.w	8004c00 <SPI_WaitFifoStateUntilTimeout.part.1>

08004c7c <SPI_WaitFifoStateUntilTimeout.constprop.11>:
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
 8004c7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004c7e:	4605      	mov	r5, r0
 8004c80:	460c      	mov	r4, r1
 8004c82:	4616      	mov	r6, r2
 8004c84:	461f      	mov	r7, r3
  while ((hspi->Instance->SR & Fifo) != State)
 8004c86:	6829      	ldr	r1, [r5, #0]
 8004c88:	6888      	ldr	r0, [r1, #8]
 8004c8a:	4020      	ands	r0, r4
 8004c8c:	d100      	bne.n	8004c90 <SPI_WaitFifoStateUntilTimeout.constprop.11+0x14>
}
 8004c8e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8004c90:	f5b4 6fc0 	cmp.w	r4, #1536	; 0x600
      READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 8004c94:	bf08      	it	eq
 8004c96:	7b0b      	ldrbeq	r3, [r1, #12]
    if (Timeout != HAL_MAX_DELAY)
 8004c98:	1c73      	adds	r3, r6, #1
 8004c9a:	d0f5      	beq.n	8004c88 <SPI_WaitFifoStateUntilTimeout.constprop.11+0xc>
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8004c9c:	f7fd fc2c 	bl	80024f8 <HAL_GetTick>
 8004ca0:	1bc0      	subs	r0, r0, r7
 8004ca2:	4286      	cmp	r6, r0
 8004ca4:	d8ef      	bhi.n	8004c86 <SPI_WaitFifoStateUntilTimeout.constprop.11+0xa>
 8004ca6:	4628      	mov	r0, r5
}
 8004ca8:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8004cac:	f7ff bfa8 	b.w	8004c00 <SPI_WaitFifoStateUntilTimeout.part.1>

08004cb0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004cb0:	b570      	push	{r4, r5, r6, lr}
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004cb2:	4613      	mov	r3, r2
{
 8004cb4:	460d      	mov	r5, r1
 8004cb6:	4616      	mov	r6, r2
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004cb8:	460a      	mov	r2, r1
 8004cba:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
{
 8004cbe:	4604      	mov	r4, r0
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004cc0:	f7ff ffdc 	bl	8004c7c <SPI_WaitFifoStateUntilTimeout.constprop.11>
 8004cc4:	b128      	cbz	r0, 8004cd2 <SPI_EndRxTxTransaction+0x22>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004cc6:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8004cc8:	f043 0320 	orr.w	r3, r3, #32
 8004ccc:	6623      	str	r3, [r4, #96]	; 0x60
      return HAL_TIMEOUT;
 8004cce:	2003      	movs	r0, #3
 8004cd0:	e00f      	b.n	8004cf2 <SPI_EndRxTxTransaction+0x42>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
    return HAL_TIMEOUT;
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004cd2:	4632      	mov	r2, r6
 8004cd4:	4629      	mov	r1, r5
 8004cd6:	4620      	mov	r0, r4
 8004cd8:	f7ff ffba 	bl	8004c50 <SPI_WaitFlagStateUntilTimeout.constprop.10>
 8004cdc:	2800      	cmp	r0, #0
 8004cde:	d1f2      	bne.n	8004cc6 <SPI_EndRxTxTransaction+0x16>
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004ce0:	4633      	mov	r3, r6
 8004ce2:	462a      	mov	r2, r5
 8004ce4:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8004ce8:	4620      	mov	r0, r4
 8004cea:	f7ff ffc7 	bl	8004c7c <SPI_WaitFifoStateUntilTimeout.constprop.11>
 8004cee:	2800      	cmp	r0, #0
 8004cf0:	d1e9      	bne.n	8004cc6 <SPI_EndRxTxTransaction+0x16>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
    return HAL_TIMEOUT;
  }

  return HAL_OK;
}
 8004cf2:	bd70      	pop	{r4, r5, r6, pc}

08004cf4 <HAL_SPI_Init>:
{
 8004cf4:	b570      	push	{r4, r5, r6, lr}
  if (hspi == NULL)
 8004cf6:	4604      	mov	r4, r0
 8004cf8:	2800      	cmp	r0, #0
 8004cfa:	d04a      	beq.n	8004d92 <HAL_SPI_Init+0x9e>
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004cfc:	2300      	movs	r3, #0
 8004cfe:	6283      	str	r3, [r0, #40]	; 0x28
  if (hspi->State == HAL_SPI_STATE_RESET)
 8004d00:	f890 305d 	ldrb.w	r3, [r0, #93]	; 0x5d
 8004d04:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8004d08:	b91b      	cbnz	r3, 8004d12 <HAL_SPI_Init+0x1e>
    hspi->Lock = HAL_UNLOCKED;
 8004d0a:	f880 205c 	strb.w	r2, [r0, #92]	; 0x5c
    HAL_SPI_MspInit(hspi);
 8004d0e:	f7fd f92d 	bl	8001f6c <HAL_SPI_MspInit>
  hspi->State = HAL_SPI_STATE_BUSY;
 8004d12:	2302      	movs	r3, #2
  __HAL_SPI_DISABLE(hspi);
 8004d14:	6821      	ldr	r1, [r4, #0]
  hspi->State = HAL_SPI_STATE_BUSY;
 8004d16:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  __HAL_SPI_DISABLE(hspi);
 8004d1a:	680b      	ldr	r3, [r1, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004d1c:	68e2      	ldr	r2, [r4, #12]
  __HAL_SPI_DISABLE(hspi);
 8004d1e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004d22:	f5b2 6fe0 	cmp.w	r2, #1792	; 0x700
  __HAL_SPI_DISABLE(hspi);
 8004d26:	600b      	str	r3, [r1, #0]
 8004d28:	f04f 0300 	mov.w	r3, #0
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004d2c:	d92e      	bls.n	8004d8c <HAL_SPI_Init+0x98>
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8004d2e:	4618      	mov	r0, r3
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8004d30:	f5b2 6f70 	cmp.w	r2, #3840	; 0xf00
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004d34:	bf18      	it	ne
 8004d36:	62a3      	strne	r3, [r4, #40]	; 0x28
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 8004d38:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8004d3a:	b92b      	cbnz	r3, 8004d48 <HAL_SPI_Init+0x54>
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004d3c:	f5b2 6fe0 	cmp.w	r2, #1792	; 0x700
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 8004d40:	bf8c      	ite	hi
 8004d42:	2302      	movhi	r3, #2
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 8004d44:	2301      	movls	r3, #1
 8004d46:	6323      	str	r3, [r4, #48]	; 0x30
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 8004d48:	68a6      	ldr	r6, [r4, #8]
 8004d4a:	6863      	ldr	r3, [r4, #4]
 8004d4c:	69a5      	ldr	r5, [r4, #24]
 8004d4e:	4333      	orrs	r3, r6
 8004d50:	6926      	ldr	r6, [r4, #16]
 8004d52:	4333      	orrs	r3, r6
 8004d54:	6966      	ldr	r6, [r4, #20]
 8004d56:	4333      	orrs	r3, r6
 8004d58:	69e6      	ldr	r6, [r4, #28]
 8004d5a:	4333      	orrs	r3, r6
 8004d5c:	6a26      	ldr	r6, [r4, #32]
 8004d5e:	4333      	orrs	r3, r6
 8004d60:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8004d62:	4333      	orrs	r3, r6
 8004d64:	f405 7600 	and.w	r6, r5, #512	; 0x200
 8004d68:	4333      	orrs	r3, r6
 8004d6a:	600b      	str	r3, [r1, #0]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 8004d6c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004d6e:	431a      	orrs	r2, r3
 8004d70:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8004d72:	0c2d      	lsrs	r5, r5, #16
 8004d74:	431a      	orrs	r2, r3
 8004d76:	f005 0504 	and.w	r5, r5, #4
 8004d7a:	432a      	orrs	r2, r5
 8004d7c:	4302      	orrs	r2, r0
  hspi->State     = HAL_SPI_STATE_READY;
 8004d7e:	2301      	movs	r3, #1
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004d80:	2000      	movs	r0, #0
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 8004d82:	604a      	str	r2, [r1, #4]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004d84:	6620      	str	r0, [r4, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8004d86:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  return HAL_OK;
 8004d8a:	bd70      	pop	{r4, r5, r6, pc}
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8004d8c:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8004d90:	e7d0      	b.n	8004d34 <HAL_SPI_Init+0x40>
    return HAL_ERROR;
 8004d92:	2001      	movs	r0, #1
}
 8004d94:	bd70      	pop	{r4, r5, r6, pc}

08004d96 <HAL_SPI_Transmit>:
{
 8004d96:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8004d9a:	461e      	mov	r6, r3
  __HAL_LOCK(hspi);
 8004d9c:	f890 305c 	ldrb.w	r3, [r0, #92]	; 0x5c
 8004da0:	2b01      	cmp	r3, #1
{
 8004da2:	4604      	mov	r4, r0
 8004da4:	460d      	mov	r5, r1
 8004da6:	4690      	mov	r8, r2
  __HAL_LOCK(hspi);
 8004da8:	f000 80b1 	beq.w	8004f0e <HAL_SPI_Transmit+0x178>
 8004dac:	2301      	movs	r3, #1
 8004dae:	f880 305c 	strb.w	r3, [r0, #92]	; 0x5c
  tickstart = HAL_GetTick();
 8004db2:	f7fd fba1 	bl	80024f8 <HAL_GetTick>
 8004db6:	4607      	mov	r7, r0
  if (hspi->State != HAL_SPI_STATE_READY)
 8004db8:	f894 005d 	ldrb.w	r0, [r4, #93]	; 0x5d
 8004dbc:	b2c0      	uxtb	r0, r0
 8004dbe:	2801      	cmp	r0, #1
 8004dc0:	f040 80a3 	bne.w	8004f0a <HAL_SPI_Transmit+0x174>
  if ((pData == NULL) || (Size == 0U))
 8004dc4:	2d00      	cmp	r5, #0
 8004dc6:	d05f      	beq.n	8004e88 <HAL_SPI_Transmit+0xf2>
 8004dc8:	f1b8 0f00 	cmp.w	r8, #0
 8004dcc:	d05c      	beq.n	8004e88 <HAL_SPI_Transmit+0xf2>
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004dce:	2303      	movs	r3, #3
 8004dd0:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004dd4:	2000      	movs	r0, #0
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004dd6:	68a3      	ldr	r3, [r4, #8]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004dd8:	6620      	str	r0, [r4, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004dda:	6420      	str	r0, [r4, #64]	; 0x40
  hspi->TxXferCount = Size;
 8004ddc:	f8a4 803e 	strh.w	r8, [r4, #62]	; 0x3e
  hspi->RxXferSize  = 0U;
 8004de0:	f8a4 0044 	strh.w	r0, [r4, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8004de4:	f8a4 0046 	strh.w	r0, [r4, #70]	; 0x46
  hspi->TxISR       = NULL;
 8004de8:	6520      	str	r0, [r4, #80]	; 0x50
  hspi->RxISR       = NULL;
 8004dea:	64e0      	str	r0, [r4, #76]	; 0x4c
 8004dec:	6820      	ldr	r0, [r4, #0]
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8004dee:	63a5      	str	r5, [r4, #56]	; 0x38
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004df0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
    SPI_1LINE_TX(hspi);
 8004df4:	bf08      	it	eq
 8004df6:	6803      	ldreq	r3, [r0, #0]
  hspi->TxXferSize  = Size;
 8004df8:	f8a4 803c 	strh.w	r8, [r4, #60]	; 0x3c
    SPI_1LINE_TX(hspi);
 8004dfc:	bf04      	itt	eq
 8004dfe:	f443 4380 	orreq.w	r3, r3, #16384	; 0x4000
 8004e02:	6003      	streq	r3, [r0, #0]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004e04:	6803      	ldr	r3, [r0, #0]
 8004e06:	065b      	lsls	r3, r3, #25
    __HAL_SPI_ENABLE(hspi);
 8004e08:	bf5e      	ittt	pl
 8004e0a:	6803      	ldrpl	r3, [r0, #0]
 8004e0c:	f043 0340 	orrpl.w	r3, r3, #64	; 0x40
 8004e10:	6003      	strpl	r3, [r0, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004e12:	68e3      	ldr	r3, [r4, #12]
 8004e14:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004e18:	6863      	ldr	r3, [r4, #4]
 8004e1a:	d93e      	bls.n	8004e9a <HAL_SPI_Transmit+0x104>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004e1c:	b113      	cbz	r3, 8004e24 <HAL_SPI_Transmit+0x8e>
 8004e1e:	f1b8 0f01 	cmp.w	r8, #1
 8004e22:	d107      	bne.n	8004e34 <HAL_SPI_Transmit+0x9e>
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004e24:	f835 3b02 	ldrh.w	r3, [r5], #2
 8004e28:	60c3      	str	r3, [r0, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004e2a:	63a5      	str	r5, [r4, #56]	; 0x38
        hspi->TxXferCount--;
 8004e2c:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8004e2e:	3b01      	subs	r3, #1
 8004e30:	b29b      	uxth	r3, r3
 8004e32:	87e3      	strh	r3, [r4, #62]	; 0x3e
    while (hspi->TxXferCount > 0U)
 8004e34:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8004e36:	b29b      	uxth	r3, r3
 8004e38:	b9a3      	cbnz	r3, 8004e64 <HAL_SPI_Transmit+0xce>
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004e3a:	463a      	mov	r2, r7
 8004e3c:	4631      	mov	r1, r6
 8004e3e:	4620      	mov	r0, r4
 8004e40:	f7ff ff36 	bl	8004cb0 <SPI_EndRxTxTransaction>
 8004e44:	2800      	cmp	r0, #0
 8004e46:	d15d      	bne.n	8004f04 <HAL_SPI_Transmit+0x16e>
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004e48:	68a3      	ldr	r3, [r4, #8]
 8004e4a:	b933      	cbnz	r3, 8004e5a <HAL_SPI_Transmit+0xc4>
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004e4c:	9301      	str	r3, [sp, #4]
 8004e4e:	6823      	ldr	r3, [r4, #0]
 8004e50:	68da      	ldr	r2, [r3, #12]
 8004e52:	9201      	str	r2, [sp, #4]
 8004e54:	689b      	ldr	r3, [r3, #8]
 8004e56:	9301      	str	r3, [sp, #4]
 8004e58:	9b01      	ldr	r3, [sp, #4]
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004e5a:	6e20      	ldr	r0, [r4, #96]	; 0x60
    errorcode = HAL_BUSY;
 8004e5c:	3000      	adds	r0, #0
 8004e5e:	bf18      	it	ne
 8004e60:	2001      	movne	r0, #1
 8004e62:	e011      	b.n	8004e88 <HAL_SPI_Transmit+0xf2>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004e64:	6822      	ldr	r2, [r4, #0]
 8004e66:	6893      	ldr	r3, [r2, #8]
 8004e68:	0798      	lsls	r0, r3, #30
 8004e6a:	d505      	bpl.n	8004e78 <HAL_SPI_Transmit+0xe2>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004e6c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8004e6e:	f833 1b02 	ldrh.w	r1, [r3], #2
 8004e72:	60d1      	str	r1, [r2, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004e74:	63a3      	str	r3, [r4, #56]	; 0x38
 8004e76:	e7d9      	b.n	8004e2c <HAL_SPI_Transmit+0x96>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004e78:	f7fd fb3e 	bl	80024f8 <HAL_GetTick>
 8004e7c:	1bc0      	subs	r0, r0, r7
 8004e7e:	42b0      	cmp	r0, r6
 8004e80:	d3d8      	bcc.n	8004e34 <HAL_SPI_Transmit+0x9e>
 8004e82:	1c71      	adds	r1, r6, #1
 8004e84:	d0d6      	beq.n	8004e34 <HAL_SPI_Transmit+0x9e>
          errorcode = HAL_TIMEOUT;
 8004e86:	2003      	movs	r0, #3
  hspi->State = HAL_SPI_STATE_READY;
 8004e88:	2301      	movs	r3, #1
 8004e8a:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8004e8e:	2300      	movs	r3, #0
 8004e90:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
}
 8004e94:	b002      	add	sp, #8
 8004e96:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004e9a:	b113      	cbz	r3, 8004ea2 <HAL_SPI_Transmit+0x10c>
 8004e9c:	f1b8 0f01 	cmp.w	r8, #1
 8004ea0:	d113      	bne.n	8004eca <HAL_SPI_Transmit+0x134>
      if (hspi->TxXferCount > 1U)
 8004ea2:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8004ea4:	b29b      	uxth	r3, r3
 8004ea6:	2b01      	cmp	r3, #1
 8004ea8:	d906      	bls.n	8004eb8 <HAL_SPI_Transmit+0x122>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004eaa:	f835 3b02 	ldrh.w	r3, [r5], #2
 8004eae:	60c3      	str	r3, [r0, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004eb0:	63a5      	str	r5, [r4, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8004eb2:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8004eb4:	3b02      	subs	r3, #2
 8004eb6:	e006      	b.n	8004ec6 <HAL_SPI_Transmit+0x130>
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004eb8:	782b      	ldrb	r3, [r5, #0]
 8004eba:	7303      	strb	r3, [r0, #12]
        hspi->pTxBuffPtr ++;
 8004ebc:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8004ebe:	3301      	adds	r3, #1
 8004ec0:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->TxXferCount--;
 8004ec2:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8004ec4:	3b01      	subs	r3, #1
 8004ec6:	b29b      	uxth	r3, r3
 8004ec8:	87e3      	strh	r3, [r4, #62]	; 0x3e
    while (hspi->TxXferCount > 0U)
 8004eca:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8004ecc:	b29b      	uxth	r3, r3
 8004ece:	2b00      	cmp	r3, #0
 8004ed0:	d0b3      	beq.n	8004e3a <HAL_SPI_Transmit+0xa4>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004ed2:	6823      	ldr	r3, [r4, #0]
 8004ed4:	689a      	ldr	r2, [r3, #8]
 8004ed6:	0792      	lsls	r2, r2, #30
 8004ed8:	d50c      	bpl.n	8004ef4 <HAL_SPI_Transmit+0x15e>
        if (hspi->TxXferCount > 1U)
 8004eda:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 8004edc:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8004ede:	b292      	uxth	r2, r2
 8004ee0:	2a01      	cmp	r2, #1
 8004ee2:	d904      	bls.n	8004eee <HAL_SPI_Transmit+0x158>
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004ee4:	f830 2b02 	ldrh.w	r2, [r0], #2
 8004ee8:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8004eea:	63a0      	str	r0, [r4, #56]	; 0x38
 8004eec:	e7e1      	b.n	8004eb2 <HAL_SPI_Transmit+0x11c>
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004eee:	7802      	ldrb	r2, [r0, #0]
 8004ef0:	731a      	strb	r2, [r3, #12]
 8004ef2:	e7e3      	b.n	8004ebc <HAL_SPI_Transmit+0x126>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004ef4:	f7fd fb00 	bl	80024f8 <HAL_GetTick>
 8004ef8:	1bc0      	subs	r0, r0, r7
 8004efa:	4286      	cmp	r6, r0
 8004efc:	d8e5      	bhi.n	8004eca <HAL_SPI_Transmit+0x134>
 8004efe:	1c73      	adds	r3, r6, #1
 8004f00:	d0e3      	beq.n	8004eca <HAL_SPI_Transmit+0x134>
 8004f02:	e7c0      	b.n	8004e86 <HAL_SPI_Transmit+0xf0>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004f04:	2320      	movs	r3, #32
 8004f06:	6623      	str	r3, [r4, #96]	; 0x60
 8004f08:	e79e      	b.n	8004e48 <HAL_SPI_Transmit+0xb2>
    errorcode = HAL_BUSY;
 8004f0a:	2002      	movs	r0, #2
 8004f0c:	e7bc      	b.n	8004e88 <HAL_SPI_Transmit+0xf2>
  __HAL_LOCK(hspi);
 8004f0e:	2002      	movs	r0, #2
 8004f10:	e7c0      	b.n	8004e94 <HAL_SPI_Transmit+0xfe>

08004f12 <HAL_SPI_TransmitReceive>:
{
 8004f12:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004f16:	461e      	mov	r6, r3
  __HAL_LOCK(hspi);
 8004f18:	f890 305c 	ldrb.w	r3, [r0, #92]	; 0x5c
{
 8004f1c:	9f08      	ldr	r7, [sp, #32]
  __HAL_LOCK(hspi);
 8004f1e:	2b01      	cmp	r3, #1
{
 8004f20:	4604      	mov	r4, r0
 8004f22:	460d      	mov	r5, r1
 8004f24:	4691      	mov	r9, r2
  __HAL_LOCK(hspi);
 8004f26:	f000 8115 	beq.w	8005154 <HAL_SPI_TransmitReceive+0x242>
 8004f2a:	2301      	movs	r3, #1
 8004f2c:	f880 305c 	strb.w	r3, [r0, #92]	; 0x5c
  tickstart = HAL_GetTick();
 8004f30:	f7fd fae2 	bl	80024f8 <HAL_GetTick>
  tmp_state           = hspi->State;
 8004f34:	f894 305d 	ldrb.w	r3, [r4, #93]	; 0x5d
  tmp_mode            = hspi->Init.Mode;
 8004f38:	6861      	ldr	r1, [r4, #4]
  tmp_state           = hspi->State;
 8004f3a:	b2db      	uxtb	r3, r3
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8004f3c:	2b01      	cmp	r3, #1
  tickstart = HAL_GetTick();
 8004f3e:	4680      	mov	r8, r0
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8004f40:	d00a      	beq.n	8004f58 <HAL_SPI_TransmitReceive+0x46>
 8004f42:	f5b1 7f82 	cmp.w	r1, #260	; 0x104
 8004f46:	f040 8103 	bne.w	8005150 <HAL_SPI_TransmitReceive+0x23e>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8004f4a:	68a0      	ldr	r0, [r4, #8]
 8004f4c:	2800      	cmp	r0, #0
 8004f4e:	f040 80ff 	bne.w	8005150 <HAL_SPI_TransmitReceive+0x23e>
 8004f52:	2b04      	cmp	r3, #4
 8004f54:	f040 80fc 	bne.w	8005150 <HAL_SPI_TransmitReceive+0x23e>
  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8004f58:	2d00      	cmp	r5, #0
 8004f5a:	d049      	beq.n	8004ff0 <HAL_SPI_TransmitReceive+0xde>
 8004f5c:	f1b9 0f00 	cmp.w	r9, #0
 8004f60:	d046      	beq.n	8004ff0 <HAL_SPI_TransmitReceive+0xde>
 8004f62:	2e00      	cmp	r6, #0
 8004f64:	d044      	beq.n	8004ff0 <HAL_SPI_TransmitReceive+0xde>
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004f66:	f894 305d 	ldrb.w	r3, [r4, #93]	; 0x5d
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8004f6a:	68e2      	ldr	r2, [r4, #12]
 8004f6c:	6820      	ldr	r0, [r4, #0]
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004f6e:	f8c4 9040 	str.w	r9, [r4, #64]	; 0x40
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004f72:	2b04      	cmp	r3, #4
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8004f74:	bf1c      	itt	ne
 8004f76:	2305      	movne	r3, #5
 8004f78:	f884 305d 	strbne.w	r3, [r4, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004f7c:	2300      	movs	r3, #0
 8004f7e:	6623      	str	r3, [r4, #96]	; 0x60
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8004f80:	f5b2 6fe0 	cmp.w	r2, #1792	; 0x700
  hspi->RxXferCount = Size;
 8004f84:	f8a4 6046 	strh.w	r6, [r4, #70]	; 0x46
  hspi->TxXferCount = Size;
 8004f88:	87e6      	strh	r6, [r4, #62]	; 0x3e
  hspi->RxISR       = NULL;
 8004f8a:	64e3      	str	r3, [r4, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8004f8c:	6523      	str	r3, [r4, #80]	; 0x50
  hspi->RxXferSize  = Size;
 8004f8e:	f8a4 6044 	strh.w	r6, [r4, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8004f92:	63a5      	str	r5, [r4, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8004f94:	87a6      	strh	r6, [r4, #60]	; 0x3c
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004f96:	6843      	ldr	r3, [r0, #4]
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8004f98:	d801      	bhi.n	8004f9e <HAL_SPI_TransmitReceive+0x8c>
 8004f9a:	2e01      	cmp	r6, #1
 8004f9c:	d92a      	bls.n	8004ff4 <HAL_SPI_TransmitReceive+0xe2>
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004f9e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004fa2:	6043      	str	r3, [r0, #4]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004fa4:	6803      	ldr	r3, [r0, #0]
 8004fa6:	065b      	lsls	r3, r3, #25
    __HAL_SPI_ENABLE(hspi);
 8004fa8:	bf5e      	ittt	pl
 8004faa:	6803      	ldrpl	r3, [r0, #0]
 8004fac:	f043 0340 	orrpl.w	r3, r3, #64	; 0x40
 8004fb0:	6003      	strpl	r3, [r0, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004fb2:	f5b2 6fe0 	cmp.w	r2, #1792	; 0x700
 8004fb6:	d956      	bls.n	8005066 <HAL_SPI_TransmitReceive+0x154>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004fb8:	b109      	cbz	r1, 8004fbe <HAL_SPI_TransmitReceive+0xac>
 8004fba:	2e01      	cmp	r6, #1
 8004fbc:	d107      	bne.n	8004fce <HAL_SPI_TransmitReceive+0xbc>
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004fbe:	f835 3b02 	ldrh.w	r3, [r5], #2
 8004fc2:	60c3      	str	r3, [r0, #12]
      hspi->TxXferCount--;
 8004fc4:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004fc6:	63a5      	str	r5, [r4, #56]	; 0x38
      hspi->TxXferCount--;
 8004fc8:	3b01      	subs	r3, #1
 8004fca:	b29b      	uxth	r3, r3
 8004fcc:	87e3      	strh	r3, [r4, #62]	; 0x3e
        txallowed = 1U;
 8004fce:	2501      	movs	r5, #1
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004fd0:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8004fd2:	b29b      	uxth	r3, r3
 8004fd4:	b98b      	cbnz	r3, 8004ffa <HAL_SPI_TransmitReceive+0xe8>
 8004fd6:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 8004fda:	b29b      	uxth	r3, r3
 8004fdc:	b96b      	cbnz	r3, 8004ffa <HAL_SPI_TransmitReceive+0xe8>
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004fde:	4642      	mov	r2, r8
 8004fe0:	4639      	mov	r1, r7
 8004fe2:	4620      	mov	r0, r4
 8004fe4:	f7ff fe64 	bl	8004cb0 <SPI_EndRxTxTransaction>
 8004fe8:	2800      	cmp	r0, #0
 8004fea:	d034      	beq.n	8005056 <HAL_SPI_TransmitReceive+0x144>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004fec:	2320      	movs	r3, #32
 8004fee:	6623      	str	r3, [r4, #96]	; 0x60
    errorcode = HAL_ERROR;
 8004ff0:	2001      	movs	r0, #1
 8004ff2:	e030      	b.n	8005056 <HAL_SPI_TransmitReceive+0x144>
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004ff4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8004ff8:	e7d3      	b.n	8004fa2 <HAL_SPI_TransmitReceive+0x90>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004ffa:	6822      	ldr	r2, [r4, #0]
 8004ffc:	6893      	ldr	r3, [r2, #8]
 8004ffe:	0799      	lsls	r1, r3, #30
 8005000:	d50d      	bpl.n	800501e <HAL_SPI_TransmitReceive+0x10c>
 8005002:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8005004:	b29b      	uxth	r3, r3
 8005006:	b153      	cbz	r3, 800501e <HAL_SPI_TransmitReceive+0x10c>
 8005008:	b14d      	cbz	r5, 800501e <HAL_SPI_TransmitReceive+0x10c>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800500a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800500c:	f833 1b02 	ldrh.w	r1, [r3], #2
 8005010:	60d1      	str	r1, [r2, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005012:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->TxXferCount--;
 8005014:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8005016:	3b01      	subs	r3, #1
 8005018:	b29b      	uxth	r3, r3
 800501a:	87e3      	strh	r3, [r4, #62]	; 0x3e
        txallowed = 0U;
 800501c:	2500      	movs	r5, #0
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800501e:	6893      	ldr	r3, [r2, #8]
 8005020:	07db      	lsls	r3, r3, #31
 8005022:	d50f      	bpl.n	8005044 <HAL_SPI_TransmitReceive+0x132>
 8005024:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 8005028:	b29b      	uxth	r3, r3
 800502a:	b15b      	cbz	r3, 8005044 <HAL_SPI_TransmitReceive+0x132>
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800502c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800502e:	68d2      	ldr	r2, [r2, #12]
 8005030:	f823 2b02 	strh.w	r2, [r3], #2
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005034:	6423      	str	r3, [r4, #64]	; 0x40
        hspi->RxXferCount--;
 8005036:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 800503a:	3b01      	subs	r3, #1
 800503c:	b29b      	uxth	r3, r3
 800503e:	f8a4 3046 	strh.w	r3, [r4, #70]	; 0x46
        txallowed = 1U;
 8005042:	2501      	movs	r5, #1
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8005044:	f7fd fa58 	bl	80024f8 <HAL_GetTick>
 8005048:	eba0 0008 	sub.w	r0, r0, r8
 800504c:	4287      	cmp	r7, r0
 800504e:	d8bf      	bhi.n	8004fd0 <HAL_SPI_TransmitReceive+0xbe>
 8005050:	1c7e      	adds	r6, r7, #1
 8005052:	d0bd      	beq.n	8004fd0 <HAL_SPI_TransmitReceive+0xbe>
        errorcode = HAL_TIMEOUT;
 8005054:	2003      	movs	r0, #3
  hspi->State = HAL_SPI_STATE_READY;
 8005056:	2301      	movs	r3, #1
 8005058:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 800505c:	2300      	movs	r3, #0
 800505e:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
 8005062:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005066:	b109      	cbz	r1, 800506c <HAL_SPI_TransmitReceive+0x15a>
 8005068:	2e01      	cmp	r6, #1
 800506a:	d10b      	bne.n	8005084 <HAL_SPI_TransmitReceive+0x172>
      if (hspi->TxXferCount > 1U)
 800506c:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800506e:	b29b      	uxth	r3, r3
 8005070:	2b01      	cmp	r3, #1
 8005072:	d951      	bls.n	8005118 <HAL_SPI_TransmitReceive+0x206>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005074:	f835 3b02 	ldrh.w	r3, [r5], #2
 8005078:	60c3      	str	r3, [r0, #12]
        hspi->TxXferCount -= 2U;
 800507a:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800507c:	63a5      	str	r5, [r4, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 800507e:	3b02      	subs	r3, #2
        hspi->TxXferCount--;
 8005080:	b29b      	uxth	r3, r3
 8005082:	87e3      	strh	r3, [r4, #62]	; 0x3e
        txallowed = 1U;
 8005084:	2501      	movs	r5, #1
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005086:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8005088:	b29b      	uxth	r3, r3
 800508a:	b923      	cbnz	r3, 8005096 <HAL_SPI_TransmitReceive+0x184>
 800508c:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 8005090:	b29b      	uxth	r3, r3
 8005092:	2b00      	cmp	r3, #0
 8005094:	d0a3      	beq.n	8004fde <HAL_SPI_TransmitReceive+0xcc>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005096:	6822      	ldr	r2, [r4, #0]
 8005098:	6893      	ldr	r3, [r2, #8]
 800509a:	0798      	lsls	r0, r3, #30
 800509c:	d511      	bpl.n	80050c2 <HAL_SPI_TransmitReceive+0x1b0>
 800509e:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80050a0:	b29b      	uxth	r3, r3
 80050a2:	b173      	cbz	r3, 80050c2 <HAL_SPI_TransmitReceive+0x1b0>
 80050a4:	b16d      	cbz	r5, 80050c2 <HAL_SPI_TransmitReceive+0x1b0>
        if (hspi->TxXferCount > 1U)
 80050a6:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80050a8:	b29b      	uxth	r3, r3
 80050aa:	2b01      	cmp	r3, #1
 80050ac:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80050ae:	d93b      	bls.n	8005128 <HAL_SPI_TransmitReceive+0x216>
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80050b0:	f833 1b02 	ldrh.w	r1, [r3], #2
 80050b4:	60d1      	str	r1, [r2, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80050b6:	63a3      	str	r3, [r4, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 80050b8:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80050ba:	3b02      	subs	r3, #2
          hspi->TxXferCount--;
 80050bc:	b29b      	uxth	r3, r3
 80050be:	87e3      	strh	r3, [r4, #62]	; 0x3e
        txallowed = 0U;
 80050c0:	2500      	movs	r5, #0
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80050c2:	6822      	ldr	r2, [r4, #0]
 80050c4:	6893      	ldr	r3, [r2, #8]
 80050c6:	07d9      	lsls	r1, r3, #31
 80050c8:	d51d      	bpl.n	8005106 <HAL_SPI_TransmitReceive+0x1f4>
 80050ca:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 80050ce:	b29b      	uxth	r3, r3
 80050d0:	b1cb      	cbz	r3, 8005106 <HAL_SPI_TransmitReceive+0x1f4>
        if (hspi->RxXferCount > 1U)
 80050d2:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 80050d6:	b29b      	uxth	r3, r3
 80050d8:	2b01      	cmp	r3, #1
 80050da:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80050dc:	d92c      	bls.n	8005138 <HAL_SPI_TransmitReceive+0x226>
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80050de:	68d1      	ldr	r1, [r2, #12]
 80050e0:	f823 1b02 	strh.w	r1, [r3], #2
          hspi->pRxBuffPtr += sizeof(uint16_t);
 80050e4:	6423      	str	r3, [r4, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 80050e6:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 80050ea:	3b02      	subs	r3, #2
 80050ec:	b29b      	uxth	r3, r3
 80050ee:	f8a4 3046 	strh.w	r3, [r4, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 80050f2:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 80050f6:	b29b      	uxth	r3, r3
 80050f8:	2b01      	cmp	r3, #1
 80050fa:	d803      	bhi.n	8005104 <HAL_SPI_TransmitReceive+0x1f2>
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80050fc:	6853      	ldr	r3, [r2, #4]
 80050fe:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8005102:	6053      	str	r3, [r2, #4]
        txallowed = 1U;
 8005104:	2501      	movs	r5, #1
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8005106:	f7fd f9f7 	bl	80024f8 <HAL_GetTick>
 800510a:	eba0 0008 	sub.w	r0, r0, r8
 800510e:	4287      	cmp	r7, r0
 8005110:	d8b9      	bhi.n	8005086 <HAL_SPI_TransmitReceive+0x174>
 8005112:	1c7b      	adds	r3, r7, #1
 8005114:	d0b7      	beq.n	8005086 <HAL_SPI_TransmitReceive+0x174>
 8005116:	e79d      	b.n	8005054 <HAL_SPI_TransmitReceive+0x142>
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8005118:	782b      	ldrb	r3, [r5, #0]
 800511a:	7303      	strb	r3, [r0, #12]
        hspi->pTxBuffPtr++;
 800511c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800511e:	3301      	adds	r3, #1
 8005120:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->TxXferCount--;
 8005122:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8005124:	3b01      	subs	r3, #1
 8005126:	e7ab      	b.n	8005080 <HAL_SPI_TransmitReceive+0x16e>
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8005128:	781b      	ldrb	r3, [r3, #0]
 800512a:	7313      	strb	r3, [r2, #12]
          hspi->pTxBuffPtr++;
 800512c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800512e:	3301      	adds	r3, #1
 8005130:	63a3      	str	r3, [r4, #56]	; 0x38
          hspi->TxXferCount--;
 8005132:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8005134:	3b01      	subs	r3, #1
 8005136:	e7c1      	b.n	80050bc <HAL_SPI_TransmitReceive+0x1aa>
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8005138:	7b12      	ldrb	r2, [r2, #12]
 800513a:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 800513c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800513e:	3301      	adds	r3, #1
 8005140:	6423      	str	r3, [r4, #64]	; 0x40
          hspi->RxXferCount--;
 8005142:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 8005146:	3b01      	subs	r3, #1
 8005148:	b29b      	uxth	r3, r3
 800514a:	f8a4 3046 	strh.w	r3, [r4, #70]	; 0x46
 800514e:	e7d9      	b.n	8005104 <HAL_SPI_TransmitReceive+0x1f2>
    errorcode = HAL_BUSY;
 8005150:	2002      	movs	r0, #2
 8005152:	e780      	b.n	8005056 <HAL_SPI_TransmitReceive+0x144>
  __HAL_LOCK(hspi);
 8005154:	2002      	movs	r0, #2
}
 8005156:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	...

0800515c <TIM_OC1_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800515c:	6a03      	ldr	r3, [r0, #32]
 800515e:	f023 0301 	bic.w	r3, r3, #1
 8005162:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005164:	6a03      	ldr	r3, [r0, #32]
{
 8005166:	b570      	push	{r4, r5, r6, lr}
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005168:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800516a:	6982      	ldr	r2, [r0, #24]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800516c:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800516e:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8005172:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 8005176:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005178:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC1P;
 800517a:	f023 0302 	bic.w	r3, r3, #2
  tmpccer |= OC_Config->OCPolarity;
 800517e:	432b      	orrs	r3, r5

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005180:	4d1b      	ldr	r5, [pc, #108]	; (80051f0 <TIM_OC1_SetConfig+0x94>)
 8005182:	42a8      	cmp	r0, r5
 8005184:	d00f      	beq.n	80051a6 <TIM_OC1_SetConfig+0x4a>
 8005186:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 800518a:	42a8      	cmp	r0, r5
 800518c:	d00b      	beq.n	80051a6 <TIM_OC1_SetConfig+0x4a>
 800518e:	f505 6540 	add.w	r5, r5, #3072	; 0xc00
 8005192:	42a8      	cmp	r0, r5
 8005194:	d007      	beq.n	80051a6 <TIM_OC1_SetConfig+0x4a>
 8005196:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800519a:	42a8      	cmp	r0, r5
 800519c:	d003      	beq.n	80051a6 <TIM_OC1_SetConfig+0x4a>
 800519e:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80051a2:	42a8      	cmp	r0, r5
 80051a4:	d11e      	bne.n	80051e4 <TIM_OC1_SetConfig+0x88>
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80051a6:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC1NP;
 80051a8:	f023 0308 	bic.w	r3, r3, #8
    tmpccer |= OC_Config->OCNPolarity;
 80051ac:	432b      	orrs	r3, r5
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80051ae:	4d10      	ldr	r5, [pc, #64]	; (80051f0 <TIM_OC1_SetConfig+0x94>)
 80051b0:	42a8      	cmp	r0, r5
    tmpccer &= ~TIM_CCER_CC1NE;
 80051b2:	f023 0304 	bic.w	r3, r3, #4
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80051b6:	d00f      	beq.n	80051d8 <TIM_OC1_SetConfig+0x7c>
 80051b8:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 80051bc:	42a8      	cmp	r0, r5
 80051be:	d00b      	beq.n	80051d8 <TIM_OC1_SetConfig+0x7c>
 80051c0:	f505 6540 	add.w	r5, r5, #3072	; 0xc00
 80051c4:	42a8      	cmp	r0, r5
 80051c6:	d007      	beq.n	80051d8 <TIM_OC1_SetConfig+0x7c>
 80051c8:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80051cc:	42a8      	cmp	r0, r5
 80051ce:	d003      	beq.n	80051d8 <TIM_OC1_SetConfig+0x7c>
 80051d0:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80051d4:	42a8      	cmp	r0, r5
 80051d6:	d105      	bne.n	80051e4 <TIM_OC1_SetConfig+0x88>
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80051d8:	f424 7540 	bic.w	r5, r4, #768	; 0x300
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80051dc:	698e      	ldr	r6, [r1, #24]
 80051de:	694c      	ldr	r4, [r1, #20]
 80051e0:	4334      	orrs	r4, r6
 80051e2:	432c      	orrs	r4, r5
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80051e4:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80051e6:	6182      	str	r2, [r0, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80051e8:	684a      	ldr	r2, [r1, #4]
 80051ea:	6342      	str	r2, [r0, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80051ec:	6203      	str	r3, [r0, #32]
 80051ee:	bd70      	pop	{r4, r5, r6, pc}
 80051f0:	40012c00 	.word	0x40012c00

080051f4 <TIM_OC3_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80051f4:	6a03      	ldr	r3, [r0, #32]
 80051f6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80051fa:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80051fc:	6a03      	ldr	r3, [r0, #32]
{
 80051fe:	b570      	push	{r4, r5, r6, lr}
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005200:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005202:	69c2      	ldr	r2, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
  tmpccmrx &= ~TIM_CCMR2_CC3S;
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005204:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005206:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800520a:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 800520e:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005210:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC3P;
 8005212:	f423 7300 	bic.w	r3, r3, #512	; 0x200
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005216:	ea43 2305 	orr.w	r3, r3, r5, lsl #8

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800521a:	4d16      	ldr	r5, [pc, #88]	; (8005274 <TIM_OC3_SetConfig+0x80>)
 800521c:	42a8      	cmp	r0, r5
 800521e:	d003      	beq.n	8005228 <TIM_OC3_SetConfig+0x34>
 8005220:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8005224:	42a8      	cmp	r0, r5
 8005226:	d10d      	bne.n	8005244 <TIM_OC3_SetConfig+0x50>
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005228:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC3NP;
 800522a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800522e:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005232:	4d10      	ldr	r5, [pc, #64]	; (8005274 <TIM_OC3_SetConfig+0x80>)
 8005234:	42a8      	cmp	r0, r5
    tmpccer &= ~TIM_CCER_CC3NE;
 8005236:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800523a:	d00e      	beq.n	800525a <TIM_OC3_SetConfig+0x66>
 800523c:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8005240:	42a8      	cmp	r0, r5
 8005242:	d00a      	beq.n	800525a <TIM_OC3_SetConfig+0x66>
 8005244:	4d0c      	ldr	r5, [pc, #48]	; (8005278 <TIM_OC3_SetConfig+0x84>)
 8005246:	42a8      	cmp	r0, r5
 8005248:	d007      	beq.n	800525a <TIM_OC3_SetConfig+0x66>
 800524a:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800524e:	42a8      	cmp	r0, r5
 8005250:	d003      	beq.n	800525a <TIM_OC3_SetConfig+0x66>
 8005252:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8005256:	42a8      	cmp	r0, r5
 8005258:	d106      	bne.n	8005268 <TIM_OC3_SetConfig+0x74>
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800525a:	f424 5540 	bic.w	r5, r4, #12288	; 0x3000
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800525e:	698e      	ldr	r6, [r1, #24]
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005260:	694c      	ldr	r4, [r1, #20]
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005262:	4334      	orrs	r4, r6
 8005264:	ea45 1404 	orr.w	r4, r5, r4, lsl #4
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005268:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800526a:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800526c:	684a      	ldr	r2, [r1, #4]
 800526e:	63c2      	str	r2, [r0, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005270:	6203      	str	r3, [r0, #32]
 8005272:	bd70      	pop	{r4, r5, r6, pc}
 8005274:	40012c00 	.word	0x40012c00
 8005278:	40014000 	.word	0x40014000

0800527c <TIM_OC4_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800527c:	6a03      	ldr	r3, [r0, #32]
 800527e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005282:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005284:	6a03      	ldr	r3, [r0, #32]
{
 8005286:	b530      	push	{r4, r5, lr}
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005288:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800528a:	69c2      	ldr	r2, [r0, #28]
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800528c:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800528e:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 8005292:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005296:	ea42 2205 	orr.w	r2, r2, r5, lsl #8

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800529a:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC4P;
 800529c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80052a0:	ea43 3305 	orr.w	r3, r3, r5, lsl #12

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80052a4:	4d0e      	ldr	r5, [pc, #56]	; (80052e0 <TIM_OC4_SetConfig+0x64>)
 80052a6:	42a8      	cmp	r0, r5
 80052a8:	d00f      	beq.n	80052ca <TIM_OC4_SetConfig+0x4e>
 80052aa:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 80052ae:	42a8      	cmp	r0, r5
 80052b0:	d00b      	beq.n	80052ca <TIM_OC4_SetConfig+0x4e>
 80052b2:	f505 6540 	add.w	r5, r5, #3072	; 0xc00
 80052b6:	42a8      	cmp	r0, r5
 80052b8:	d007      	beq.n	80052ca <TIM_OC4_SetConfig+0x4e>
 80052ba:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80052be:	42a8      	cmp	r0, r5
 80052c0:	d003      	beq.n	80052ca <TIM_OC4_SetConfig+0x4e>
 80052c2:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80052c6:	42a8      	cmp	r0, r5
 80052c8:	d104      	bne.n	80052d4 <TIM_OC4_SetConfig+0x58>

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80052ca:	694d      	ldr	r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS4;
 80052cc:	f424 4480 	bic.w	r4, r4, #16384	; 0x4000
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80052d0:	ea44 1485 	orr.w	r4, r4, r5, lsl #6
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80052d4:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80052d6:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80052d8:	684a      	ldr	r2, [r1, #4]
 80052da:	6402      	str	r2, [r0, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80052dc:	6203      	str	r3, [r0, #32]
 80052de:	bd30      	pop	{r4, r5, pc}
 80052e0:	40012c00 	.word	0x40012c00

080052e4 <TIM_OC5_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80052e4:	6a03      	ldr	r3, [r0, #32]
 80052e6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80052ea:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80052ec:	6a03      	ldr	r3, [r0, #32]
{
 80052ee:	b530      	push	{r4, r5, lr}
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80052f0:	6844      	ldr	r4, [r0, #4]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80052f2:	6d42      	ldr	r2, [r0, #84]	; 0x54

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80052f4:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80052f6:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80052fa:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpccmrx |= OC_Config->OCMode;
 80052fe:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8005300:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC5P;
 8005302:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8005306:	ea43 4305 	orr.w	r3, r3, r5, lsl #16

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800530a:	4d0f      	ldr	r5, [pc, #60]	; (8005348 <TIM_OC5_SetConfig+0x64>)
 800530c:	42a8      	cmp	r0, r5
 800530e:	d00f      	beq.n	8005330 <TIM_OC5_SetConfig+0x4c>
 8005310:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8005314:	42a8      	cmp	r0, r5
 8005316:	d00b      	beq.n	8005330 <TIM_OC5_SetConfig+0x4c>
 8005318:	f505 6540 	add.w	r5, r5, #3072	; 0xc00
 800531c:	42a8      	cmp	r0, r5
 800531e:	d007      	beq.n	8005330 <TIM_OC5_SetConfig+0x4c>
 8005320:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8005324:	42a8      	cmp	r0, r5
 8005326:	d003      	beq.n	8005330 <TIM_OC5_SetConfig+0x4c>
 8005328:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800532c:	42a8      	cmp	r0, r5
 800532e:	d104      	bne.n	800533a <TIM_OC5_SetConfig+0x56>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8005330:	694d      	ldr	r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS5;
 8005332:	f424 3480 	bic.w	r4, r4, #65536	; 0x10000
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8005336:	ea44 2405 	orr.w	r4, r4, r5, lsl #8
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800533a:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800533c:	6542      	str	r2, [r0, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800533e:	684a      	ldr	r2, [r1, #4]
 8005340:	6582      	str	r2, [r0, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005342:	6203      	str	r3, [r0, #32]
 8005344:	bd30      	pop	{r4, r5, pc}
 8005346:	bf00      	nop
 8005348:	40012c00 	.word	0x40012c00

0800534c <TIM_OC6_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800534c:	6a03      	ldr	r3, [r0, #32]
 800534e:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8005352:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005354:	6a03      	ldr	r3, [r0, #32]
{
 8005356:	b530      	push	{r4, r5, lr}
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005358:	6844      	ldr	r4, [r0, #4]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800535a:	6d42      	ldr	r2, [r0, #84]	; 0x54

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800535c:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800535e:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 8005362:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005366:	ea42 2205 	orr.w	r2, r2, r5, lsl #8

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800536a:	688d      	ldr	r5, [r1, #8]
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800536c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8005370:	ea43 5305 	orr.w	r3, r3, r5, lsl #20

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005374:	4d0e      	ldr	r5, [pc, #56]	; (80053b0 <TIM_OC6_SetConfig+0x64>)
 8005376:	42a8      	cmp	r0, r5
 8005378:	d00f      	beq.n	800539a <TIM_OC6_SetConfig+0x4e>
 800537a:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 800537e:	42a8      	cmp	r0, r5
 8005380:	d00b      	beq.n	800539a <TIM_OC6_SetConfig+0x4e>
 8005382:	f505 6540 	add.w	r5, r5, #3072	; 0xc00
 8005386:	42a8      	cmp	r0, r5
 8005388:	d007      	beq.n	800539a <TIM_OC6_SetConfig+0x4e>
 800538a:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800538e:	42a8      	cmp	r0, r5
 8005390:	d003      	beq.n	800539a <TIM_OC6_SetConfig+0x4e>
 8005392:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8005396:	42a8      	cmp	r0, r5
 8005398:	d104      	bne.n	80053a4 <TIM_OC6_SetConfig+0x58>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800539a:	694d      	ldr	r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS6;
 800539c:	f424 2480 	bic.w	r4, r4, #262144	; 0x40000
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80053a0:	ea44 2485 	orr.w	r4, r4, r5, lsl #10
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80053a4:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80053a6:	6542      	str	r2, [r0, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80053a8:	684a      	ldr	r2, [r1, #4]
 80053aa:	65c2      	str	r2, [r0, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80053ac:	6203      	str	r3, [r0, #32]
 80053ae:	bd30      	pop	{r4, r5, pc}
 80053b0:	40012c00 	.word	0x40012c00

080053b4 <HAL_TIM_Base_Start_IT>:
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80053b4:	6803      	ldr	r3, [r0, #0]
 80053b6:	68da      	ldr	r2, [r3, #12]
 80053b8:	f042 0201 	orr.w	r2, r2, #1
 80053bc:	60da      	str	r2, [r3, #12]
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80053be:	6899      	ldr	r1, [r3, #8]
 80053c0:	4a06      	ldr	r2, [pc, #24]	; (80053dc <HAL_TIM_Base_Start_IT+0x28>)
 80053c2:	400a      	ands	r2, r1
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80053c4:	2a06      	cmp	r2, #6
 80053c6:	d006      	beq.n	80053d6 <HAL_TIM_Base_Start_IT+0x22>
 80053c8:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
    __HAL_TIM_ENABLE(htim);
 80053cc:	bf1e      	ittt	ne
 80053ce:	681a      	ldrne	r2, [r3, #0]
 80053d0:	f042 0201 	orrne.w	r2, r2, #1
 80053d4:	601a      	strne	r2, [r3, #0]
}
 80053d6:	2000      	movs	r0, #0
 80053d8:	4770      	bx	lr
 80053da:	bf00      	nop
 80053dc:	00010007 	.word	0x00010007

080053e0 <HAL_TIM_PWM_MspInit>:
 80053e0:	4770      	bx	lr

080053e2 <HAL_TIM_OC_DelayElapsedCallback>:
 80053e2:	4770      	bx	lr

080053e4 <HAL_TIM_IC_CaptureCallback>:
 80053e4:	4770      	bx	lr

080053e6 <HAL_TIM_PWM_PulseFinishedCallback>:
 80053e6:	4770      	bx	lr

080053e8 <HAL_TIM_TriggerCallback>:
 80053e8:	4770      	bx	lr

080053ea <HAL_TIM_IRQHandler>:
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80053ea:	6803      	ldr	r3, [r0, #0]
 80053ec:	691a      	ldr	r2, [r3, #16]
 80053ee:	0791      	lsls	r1, r2, #30
{
 80053f0:	b510      	push	{r4, lr}
 80053f2:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80053f4:	d50f      	bpl.n	8005416 <HAL_TIM_IRQHandler+0x2c>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80053f6:	68da      	ldr	r2, [r3, #12]
 80053f8:	0792      	lsls	r2, r2, #30
 80053fa:	d50c      	bpl.n	8005416 <HAL_TIM_IRQHandler+0x2c>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80053fc:	f06f 0202 	mvn.w	r2, #2
 8005400:	611a      	str	r2, [r3, #16]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005402:	699b      	ldr	r3, [r3, #24]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005404:	2201      	movs	r2, #1
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005406:	0799      	lsls	r1, r3, #30
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005408:	7702      	strb	r2, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800540a:	f000 8085 	beq.w	8005518 <HAL_TIM_IRQHandler+0x12e>
          HAL_TIM_IC_CaptureCallback(htim);
 800540e:	f7ff ffe9 	bl	80053e4 <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005412:	2300      	movs	r3, #0
 8005414:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005416:	6823      	ldr	r3, [r4, #0]
 8005418:	691a      	ldr	r2, [r3, #16]
 800541a:	0752      	lsls	r2, r2, #29
 800541c:	d510      	bpl.n	8005440 <HAL_TIM_IRQHandler+0x56>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800541e:	68da      	ldr	r2, [r3, #12]
 8005420:	0750      	lsls	r0, r2, #29
 8005422:	d50d      	bpl.n	8005440 <HAL_TIM_IRQHandler+0x56>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005424:	f06f 0204 	mvn.w	r2, #4
 8005428:	611a      	str	r2, [r3, #16]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800542a:	699b      	ldr	r3, [r3, #24]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800542c:	2202      	movs	r2, #2
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800542e:	f413 7f40 	tst.w	r3, #768	; 0x300
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005432:	7722      	strb	r2, [r4, #28]
        HAL_TIM_IC_CaptureCallback(htim);
 8005434:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005436:	d075      	beq.n	8005524 <HAL_TIM_IRQHandler+0x13a>
        HAL_TIM_IC_CaptureCallback(htim);
 8005438:	f7ff ffd4 	bl	80053e4 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800543c:	2300      	movs	r3, #0
 800543e:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005440:	6823      	ldr	r3, [r4, #0]
 8005442:	691a      	ldr	r2, [r3, #16]
 8005444:	0711      	lsls	r1, r2, #28
 8005446:	d50f      	bpl.n	8005468 <HAL_TIM_IRQHandler+0x7e>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005448:	68da      	ldr	r2, [r3, #12]
 800544a:	0712      	lsls	r2, r2, #28
 800544c:	d50c      	bpl.n	8005468 <HAL_TIM_IRQHandler+0x7e>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800544e:	f06f 0208 	mvn.w	r2, #8
 8005452:	611a      	str	r2, [r3, #16]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005454:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005456:	2204      	movs	r2, #4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005458:	079b      	lsls	r3, r3, #30
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800545a:	7722      	strb	r2, [r4, #28]
        HAL_TIM_IC_CaptureCallback(htim);
 800545c:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800545e:	d067      	beq.n	8005530 <HAL_TIM_IRQHandler+0x146>
        HAL_TIM_IC_CaptureCallback(htim);
 8005460:	f7ff ffc0 	bl	80053e4 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005464:	2300      	movs	r3, #0
 8005466:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005468:	6823      	ldr	r3, [r4, #0]
 800546a:	691a      	ldr	r2, [r3, #16]
 800546c:	06d0      	lsls	r0, r2, #27
 800546e:	d510      	bpl.n	8005492 <HAL_TIM_IRQHandler+0xa8>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005470:	68da      	ldr	r2, [r3, #12]
 8005472:	06d1      	lsls	r1, r2, #27
 8005474:	d50d      	bpl.n	8005492 <HAL_TIM_IRQHandler+0xa8>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005476:	f06f 0210 	mvn.w	r2, #16
 800547a:	611a      	str	r2, [r3, #16]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800547c:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800547e:	2208      	movs	r2, #8
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005480:	f413 7f40 	tst.w	r3, #768	; 0x300
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005484:	7722      	strb	r2, [r4, #28]
        HAL_TIM_IC_CaptureCallback(htim);
 8005486:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005488:	d058      	beq.n	800553c <HAL_TIM_IRQHandler+0x152>
        HAL_TIM_IC_CaptureCallback(htim);
 800548a:	f7ff ffab 	bl	80053e4 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800548e:	2300      	movs	r3, #0
 8005490:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005492:	6823      	ldr	r3, [r4, #0]
 8005494:	691a      	ldr	r2, [r3, #16]
 8005496:	07d2      	lsls	r2, r2, #31
 8005498:	d508      	bpl.n	80054ac <HAL_TIM_IRQHandler+0xc2>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800549a:	68da      	ldr	r2, [r3, #12]
 800549c:	07d0      	lsls	r0, r2, #31
 800549e:	d505      	bpl.n	80054ac <HAL_TIM_IRQHandler+0xc2>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80054a0:	f06f 0201 	mvn.w	r2, #1
 80054a4:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 80054a6:	4620      	mov	r0, r4
 80054a8:	f7fc fbca 	bl	8001c40 <HAL_TIM_PeriodElapsedCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80054ac:	6823      	ldr	r3, [r4, #0]
 80054ae:	691a      	ldr	r2, [r3, #16]
 80054b0:	0611      	lsls	r1, r2, #24
 80054b2:	d508      	bpl.n	80054c6 <HAL_TIM_IRQHandler+0xdc>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80054b4:	68da      	ldr	r2, [r3, #12]
 80054b6:	0612      	lsls	r2, r2, #24
 80054b8:	d505      	bpl.n	80054c6 <HAL_TIM_IRQHandler+0xdc>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80054ba:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80054be:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 80054c0:	4620      	mov	r0, r4
 80054c2:	f000 fab4 	bl	8005a2e <HAL_TIMEx_BreakCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80054c6:	6823      	ldr	r3, [r4, #0]
 80054c8:	691a      	ldr	r2, [r3, #16]
 80054ca:	05d0      	lsls	r0, r2, #23
 80054cc:	d508      	bpl.n	80054e0 <HAL_TIM_IRQHandler+0xf6>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80054ce:	68da      	ldr	r2, [r3, #12]
 80054d0:	0611      	lsls	r1, r2, #24
 80054d2:	d505      	bpl.n	80054e0 <HAL_TIM_IRQHandler+0xf6>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80054d4:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80054d8:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_Break2Callback(htim);
 80054da:	4620      	mov	r0, r4
 80054dc:	f000 faa8 	bl	8005a30 <HAL_TIMEx_Break2Callback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80054e0:	6823      	ldr	r3, [r4, #0]
 80054e2:	691a      	ldr	r2, [r3, #16]
 80054e4:	0652      	lsls	r2, r2, #25
 80054e6:	d508      	bpl.n	80054fa <HAL_TIM_IRQHandler+0x110>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80054e8:	68da      	ldr	r2, [r3, #12]
 80054ea:	0650      	lsls	r0, r2, #25
 80054ec:	d505      	bpl.n	80054fa <HAL_TIM_IRQHandler+0x110>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80054ee:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80054f2:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 80054f4:	4620      	mov	r0, r4
 80054f6:	f7ff ff77 	bl	80053e8 <HAL_TIM_TriggerCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80054fa:	6823      	ldr	r3, [r4, #0]
 80054fc:	691a      	ldr	r2, [r3, #16]
 80054fe:	0691      	lsls	r1, r2, #26
 8005500:	d522      	bpl.n	8005548 <HAL_TIM_IRQHandler+0x15e>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005502:	68da      	ldr	r2, [r3, #12]
 8005504:	0692      	lsls	r2, r2, #26
 8005506:	d51f      	bpl.n	8005548 <HAL_TIM_IRQHandler+0x15e>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005508:	f06f 0220 	mvn.w	r2, #32
      HAL_TIMEx_CommutCallback(htim);
 800550c:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800550e:	611a      	str	r2, [r3, #16]
}
 8005510:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      HAL_TIMEx_CommutCallback(htim);
 8005514:	f000 ba8a 	b.w	8005a2c <HAL_TIMEx_CommutCallback>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005518:	f7ff ff63 	bl	80053e2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800551c:	4620      	mov	r0, r4
 800551e:	f7ff ff62 	bl	80053e6 <HAL_TIM_PWM_PulseFinishedCallback>
 8005522:	e776      	b.n	8005412 <HAL_TIM_IRQHandler+0x28>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005524:	f7ff ff5d 	bl	80053e2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005528:	4620      	mov	r0, r4
 800552a:	f7ff ff5c 	bl	80053e6 <HAL_TIM_PWM_PulseFinishedCallback>
 800552e:	e785      	b.n	800543c <HAL_TIM_IRQHandler+0x52>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005530:	f7ff ff57 	bl	80053e2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005534:	4620      	mov	r0, r4
 8005536:	f7ff ff56 	bl	80053e6 <HAL_TIM_PWM_PulseFinishedCallback>
 800553a:	e793      	b.n	8005464 <HAL_TIM_IRQHandler+0x7a>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800553c:	f7ff ff51 	bl	80053e2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005540:	4620      	mov	r0, r4
 8005542:	f7ff ff50 	bl	80053e6 <HAL_TIM_PWM_PulseFinishedCallback>
 8005546:	e7a2      	b.n	800548e <HAL_TIM_IRQHandler+0xa4>
 8005548:	bd10      	pop	{r4, pc}
	...

0800554c <TIM_Base_SetConfig>:
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800554c:	4a30      	ldr	r2, [pc, #192]	; (8005610 <TIM_Base_SetConfig+0xc4>)
  tmpcr1 = TIMx->CR1;
 800554e:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005550:	4290      	cmp	r0, r2
 8005552:	d012      	beq.n	800557a <TIM_Base_SetConfig+0x2e>
 8005554:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8005558:	d00f      	beq.n	800557a <TIM_Base_SetConfig+0x2e>
 800555a:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 800555e:	4290      	cmp	r0, r2
 8005560:	d00b      	beq.n	800557a <TIM_Base_SetConfig+0x2e>
 8005562:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005566:	4290      	cmp	r0, r2
 8005568:	d007      	beq.n	800557a <TIM_Base_SetConfig+0x2e>
 800556a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800556e:	4290      	cmp	r0, r2
 8005570:	d003      	beq.n	800557a <TIM_Base_SetConfig+0x2e>
 8005572:	f502 3294 	add.w	r2, r2, #75776	; 0x12800
 8005576:	4290      	cmp	r0, r2
 8005578:	d119      	bne.n	80055ae <TIM_Base_SetConfig+0x62>
    tmpcr1 |= Structure->CounterMode;
 800557a:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800557c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8005580:	4313      	orrs	r3, r2
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005582:	4a23      	ldr	r2, [pc, #140]	; (8005610 <TIM_Base_SetConfig+0xc4>)
 8005584:	4290      	cmp	r0, r2
 8005586:	d01d      	beq.n	80055c4 <TIM_Base_SetConfig+0x78>
 8005588:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 800558c:	d01a      	beq.n	80055c4 <TIM_Base_SetConfig+0x78>
 800558e:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8005592:	4290      	cmp	r0, r2
 8005594:	d016      	beq.n	80055c4 <TIM_Base_SetConfig+0x78>
 8005596:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800559a:	4290      	cmp	r0, r2
 800559c:	d012      	beq.n	80055c4 <TIM_Base_SetConfig+0x78>
 800559e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80055a2:	4290      	cmp	r0, r2
 80055a4:	d00e      	beq.n	80055c4 <TIM_Base_SetConfig+0x78>
 80055a6:	f502 3294 	add.w	r2, r2, #75776	; 0x12800
 80055aa:	4290      	cmp	r0, r2
 80055ac:	d00a      	beq.n	80055c4 <TIM_Base_SetConfig+0x78>
 80055ae:	4a19      	ldr	r2, [pc, #100]	; (8005614 <TIM_Base_SetConfig+0xc8>)
 80055b0:	4290      	cmp	r0, r2
 80055b2:	d007      	beq.n	80055c4 <TIM_Base_SetConfig+0x78>
 80055b4:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80055b8:	4290      	cmp	r0, r2
 80055ba:	d003      	beq.n	80055c4 <TIM_Base_SetConfig+0x78>
 80055bc:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80055c0:	4290      	cmp	r0, r2
 80055c2:	d103      	bne.n	80055cc <TIM_Base_SetConfig+0x80>
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80055c4:	68ca      	ldr	r2, [r1, #12]
    tmpcr1 &= ~TIM_CR1_CKD;
 80055c6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80055ca:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80055cc:	694a      	ldr	r2, [r1, #20]
 80055ce:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80055d2:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 80055d4:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80055d6:	688b      	ldr	r3, [r1, #8]
 80055d8:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 80055da:	680b      	ldr	r3, [r1, #0]
 80055dc:	6283      	str	r3, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80055de:	4b0c      	ldr	r3, [pc, #48]	; (8005610 <TIM_Base_SetConfig+0xc4>)
 80055e0:	4298      	cmp	r0, r3
 80055e2:	d00f      	beq.n	8005604 <TIM_Base_SetConfig+0xb8>
 80055e4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80055e8:	4298      	cmp	r0, r3
 80055ea:	d00b      	beq.n	8005604 <TIM_Base_SetConfig+0xb8>
 80055ec:	f503 6340 	add.w	r3, r3, #3072	; 0xc00
 80055f0:	4298      	cmp	r0, r3
 80055f2:	d007      	beq.n	8005604 <TIM_Base_SetConfig+0xb8>
 80055f4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80055f8:	4298      	cmp	r0, r3
 80055fa:	d003      	beq.n	8005604 <TIM_Base_SetConfig+0xb8>
 80055fc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005600:	4298      	cmp	r0, r3
 8005602:	d101      	bne.n	8005608 <TIM_Base_SetConfig+0xbc>
    TIMx->RCR = Structure->RepetitionCounter;
 8005604:	690b      	ldr	r3, [r1, #16]
 8005606:	6303      	str	r3, [r0, #48]	; 0x30
  TIMx->EGR = TIM_EGR_UG;
 8005608:	2301      	movs	r3, #1
 800560a:	6143      	str	r3, [r0, #20]
 800560c:	4770      	bx	lr
 800560e:	bf00      	nop
 8005610:	40012c00 	.word	0x40012c00
 8005614:	40014000 	.word	0x40014000

08005618 <HAL_TIM_Base_Init>:
{
 8005618:	b510      	push	{r4, lr}
  if (htim == NULL)
 800561a:	4604      	mov	r4, r0
 800561c:	b1a0      	cbz	r0, 8005648 <HAL_TIM_Base_Init+0x30>
  if (htim->State == HAL_TIM_STATE_RESET)
 800561e:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8005622:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8005626:	b91b      	cbnz	r3, 8005630 <HAL_TIM_Base_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 8005628:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 800562c:	f7fc fcd2 	bl	8001fd4 <HAL_TIM_Base_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 8005630:	2302      	movs	r3, #2
 8005632:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005636:	6820      	ldr	r0, [r4, #0]
 8005638:	1d21      	adds	r1, r4, #4
 800563a:	f7ff ff87 	bl	800554c <TIM_Base_SetConfig>
  htim->State = HAL_TIM_STATE_READY;
 800563e:	2301      	movs	r3, #1
 8005640:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8005644:	2000      	movs	r0, #0
 8005646:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8005648:	2001      	movs	r0, #1
}
 800564a:	bd10      	pop	{r4, pc}

0800564c <HAL_TIM_PWM_Init>:
{
 800564c:	b510      	push	{r4, lr}
  if (htim == NULL)
 800564e:	4604      	mov	r4, r0
 8005650:	b1a0      	cbz	r0, 800567c <HAL_TIM_PWM_Init+0x30>
  if (htim->State == HAL_TIM_STATE_RESET)
 8005652:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8005656:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800565a:	b91b      	cbnz	r3, 8005664 <HAL_TIM_PWM_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 800565c:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_PWM_MspInit(htim);
 8005660:	f7ff febe 	bl	80053e0 <HAL_TIM_PWM_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 8005664:	2302      	movs	r3, #2
 8005666:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800566a:	6820      	ldr	r0, [r4, #0]
 800566c:	1d21      	adds	r1, r4, #4
 800566e:	f7ff ff6d 	bl	800554c <TIM_Base_SetConfig>
  htim->State = HAL_TIM_STATE_READY;
 8005672:	2301      	movs	r3, #1
 8005674:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8005678:	2000      	movs	r0, #0
 800567a:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 800567c:	2001      	movs	r0, #1
}
 800567e:	bd10      	pop	{r4, pc}

08005680 <TIM_OC2_SetConfig>:
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005680:	6a03      	ldr	r3, [r0, #32]
 8005682:	f023 0310 	bic.w	r3, r3, #16
 8005686:	6203      	str	r3, [r0, #32]
  tmpccer = TIMx->CCER;
 8005688:	6a03      	ldr	r3, [r0, #32]
{
 800568a:	b570      	push	{r4, r5, r6, lr}
  tmpcr2 =  TIMx->CR2;
 800568c:	6844      	ldr	r4, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 800568e:	6982      	ldr	r2, [r0, #24]
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005690:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005692:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 8005696:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800569a:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800569e:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC2P;
 80056a0:	f023 0320 	bic.w	r3, r3, #32
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80056a4:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80056a8:	4d16      	ldr	r5, [pc, #88]	; (8005704 <TIM_OC2_SetConfig+0x84>)
 80056aa:	42a8      	cmp	r0, r5
 80056ac:	d003      	beq.n	80056b6 <TIM_OC2_SetConfig+0x36>
 80056ae:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 80056b2:	42a8      	cmp	r0, r5
 80056b4:	d10d      	bne.n	80056d2 <TIM_OC2_SetConfig+0x52>
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80056b6:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC2NP;
 80056b8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80056bc:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80056c0:	4d10      	ldr	r5, [pc, #64]	; (8005704 <TIM_OC2_SetConfig+0x84>)
 80056c2:	42a8      	cmp	r0, r5
    tmpccer &= ~TIM_CCER_CC2NE;
 80056c4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80056c8:	d00e      	beq.n	80056e8 <TIM_OC2_SetConfig+0x68>
 80056ca:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 80056ce:	42a8      	cmp	r0, r5
 80056d0:	d00a      	beq.n	80056e8 <TIM_OC2_SetConfig+0x68>
 80056d2:	4d0d      	ldr	r5, [pc, #52]	; (8005708 <TIM_OC2_SetConfig+0x88>)
 80056d4:	42a8      	cmp	r0, r5
 80056d6:	d007      	beq.n	80056e8 <TIM_OC2_SetConfig+0x68>
 80056d8:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80056dc:	42a8      	cmp	r0, r5
 80056de:	d003      	beq.n	80056e8 <TIM_OC2_SetConfig+0x68>
 80056e0:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80056e4:	42a8      	cmp	r0, r5
 80056e6:	d106      	bne.n	80056f6 <TIM_OC2_SetConfig+0x76>
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80056e8:	f424 6540 	bic.w	r5, r4, #3072	; 0xc00
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80056ec:	698e      	ldr	r6, [r1, #24]
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80056ee:	694c      	ldr	r4, [r1, #20]
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80056f0:	4334      	orrs	r4, r6
 80056f2:	ea45 0484 	orr.w	r4, r5, r4, lsl #2
  TIMx->CR2 = tmpcr2;
 80056f6:	6044      	str	r4, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 80056f8:	6182      	str	r2, [r0, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 80056fa:	684a      	ldr	r2, [r1, #4]
 80056fc:	6382      	str	r2, [r0, #56]	; 0x38
  TIMx->CCER = tmpccer;
 80056fe:	6203      	str	r3, [r0, #32]
 8005700:	bd70      	pop	{r4, r5, r6, pc}
 8005702:	bf00      	nop
 8005704:	40012c00 	.word	0x40012c00
 8005708:	40014000 	.word	0x40014000

0800570c <HAL_TIM_PWM_ConfigChannel>:
{
 800570c:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(htim);
 800570e:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8005712:	2b01      	cmp	r3, #1
{
 8005714:	4604      	mov	r4, r0
 8005716:	f04f 0002 	mov.w	r0, #2
  __HAL_LOCK(htim);
 800571a:	d010      	beq.n	800573e <HAL_TIM_PWM_ConfigChannel+0x32>
 800571c:	2301      	movs	r3, #1
  switch (Channel)
 800571e:	2a08      	cmp	r2, #8
  __HAL_LOCK(htim);
 8005720:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 8005724:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
  switch (Channel)
 8005728:	d043      	beq.n	80057b2 <HAL_TIM_PWM_ConfigChannel+0xa6>
 800572a:	d809      	bhi.n	8005740 <HAL_TIM_PWM_ConfigChannel+0x34>
 800572c:	b1fa      	cbz	r2, 800576e <HAL_TIM_PWM_ConfigChannel+0x62>
 800572e:	2a04      	cmp	r2, #4
 8005730:	d02e      	beq.n	8005790 <HAL_TIM_PWM_ConfigChannel+0x84>
  htim->State = HAL_TIM_STATE_READY;
 8005732:	2301      	movs	r3, #1
  __HAL_UNLOCK(htim);
 8005734:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 8005736:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 800573a:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 800573e:	bd38      	pop	{r3, r4, r5, pc}
  switch (Channel)
 8005740:	2a10      	cmp	r2, #16
 8005742:	d047      	beq.n	80057d4 <HAL_TIM_PWM_ConfigChannel+0xc8>
 8005744:	2a14      	cmp	r2, #20
 8005746:	d056      	beq.n	80057f6 <HAL_TIM_PWM_ConfigChannel+0xea>
 8005748:	2a0c      	cmp	r2, #12
 800574a:	d1f2      	bne.n	8005732 <HAL_TIM_PWM_ConfigChannel+0x26>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800574c:	6820      	ldr	r0, [r4, #0]
 800574e:	f7ff fd95 	bl	800527c <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005752:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005754:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005756:	69da      	ldr	r2, [r3, #28]
 8005758:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800575c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800575e:	69da      	ldr	r2, [r3, #28]
 8005760:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005764:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005766:	69da      	ldr	r2, [r3, #28]
 8005768:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 800576c:	e030      	b.n	80057d0 <HAL_TIM_PWM_ConfigChannel+0xc4>
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800576e:	6820      	ldr	r0, [r4, #0]
 8005770:	f7ff fcf4 	bl	800515c <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005774:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005776:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005778:	699a      	ldr	r2, [r3, #24]
 800577a:	f042 0208 	orr.w	r2, r2, #8
 800577e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005780:	699a      	ldr	r2, [r3, #24]
 8005782:	f022 0204 	bic.w	r2, r2, #4
 8005786:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005788:	699a      	ldr	r2, [r3, #24]
 800578a:	430a      	orrs	r2, r1
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800578c:	619a      	str	r2, [r3, #24]
      break;
 800578e:	e7d0      	b.n	8005732 <HAL_TIM_PWM_ConfigChannel+0x26>
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005790:	6820      	ldr	r0, [r4, #0]
 8005792:	f7ff ff75 	bl	8005680 <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005796:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005798:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800579a:	699a      	ldr	r2, [r3, #24]
 800579c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80057a0:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80057a2:	699a      	ldr	r2, [r3, #24]
 80057a4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80057a8:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80057aa:	699a      	ldr	r2, [r3, #24]
 80057ac:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 80057b0:	e7ec      	b.n	800578c <HAL_TIM_PWM_ConfigChannel+0x80>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80057b2:	6820      	ldr	r0, [r4, #0]
 80057b4:	f7ff fd1e 	bl	80051f4 <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80057b8:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80057ba:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80057bc:	69da      	ldr	r2, [r3, #28]
 80057be:	f042 0208 	orr.w	r2, r2, #8
 80057c2:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80057c4:	69da      	ldr	r2, [r3, #28]
 80057c6:	f022 0204 	bic.w	r2, r2, #4
 80057ca:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80057cc:	69da      	ldr	r2, [r3, #28]
 80057ce:	430a      	orrs	r2, r1
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80057d0:	61da      	str	r2, [r3, #28]
      break;
 80057d2:	e7ae      	b.n	8005732 <HAL_TIM_PWM_ConfigChannel+0x26>
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80057d4:	6820      	ldr	r0, [r4, #0]
 80057d6:	f7ff fd85 	bl	80052e4 <TIM_OC5_SetConfig>
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80057da:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80057dc:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80057de:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80057e0:	f042 0208 	orr.w	r2, r2, #8
 80057e4:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80057e6:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80057e8:	f022 0204 	bic.w	r2, r2, #4
 80057ec:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80057ee:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80057f0:	430a      	orrs	r2, r1
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80057f2:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80057f4:	e79d      	b.n	8005732 <HAL_TIM_PWM_ConfigChannel+0x26>
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80057f6:	6820      	ldr	r0, [r4, #0]
 80057f8:	f7ff fda8 	bl	800534c <TIM_OC6_SetConfig>
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80057fc:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80057fe:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8005800:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005802:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005806:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8005808:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800580a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800580e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8005810:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005812:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8005816:	e7ec      	b.n	80057f2 <HAL_TIM_PWM_ConfigChannel+0xe6>

08005818 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005818:	b510      	push	{r4, lr}
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800581a:	6884      	ldr	r4, [r0, #8]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800581c:	430a      	orrs	r2, r1
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800581e:	f424 447f 	bic.w	r4, r4, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005822:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
 8005826:	4323      	orrs	r3, r4

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005828:	6083      	str	r3, [r0, #8]
 800582a:	bd10      	pop	{r4, pc}

0800582c <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 800582c:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8005830:	2b01      	cmp	r3, #1
{
 8005832:	b570      	push	{r4, r5, r6, lr}
 8005834:	4604      	mov	r4, r0
 8005836:	f04f 0002 	mov.w	r0, #2
  __HAL_LOCK(htim);
 800583a:	d017      	beq.n	800586c <HAL_TIM_ConfigClockSource+0x40>
  htim->State = HAL_TIM_STATE_BUSY;
 800583c:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
  tmpsmcr = htim->Instance->SMCR;
 8005840:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(htim);
 8005842:	2301      	movs	r3, #1
 8005844:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
  tmpsmcr = htim->Instance->SMCR;
 8005848:	6882      	ldr	r2, [r0, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800584a:	4b41      	ldr	r3, [pc, #260]	; (8005950 <HAL_TIM_ConfigClockSource+0x124>)
 800584c:	4013      	ands	r3, r2
  htim->Instance->SMCR = tmpsmcr;
 800584e:	6083      	str	r3, [r0, #8]
  switch (sClockSourceConfig->ClockSource)
 8005850:	680b      	ldr	r3, [r1, #0]
 8005852:	2b40      	cmp	r3, #64	; 0x40
 8005854:	d065      	beq.n	8005922 <HAL_TIM_ConfigClockSource+0xf6>
 8005856:	d815      	bhi.n	8005884 <HAL_TIM_ConfigClockSource+0x58>
 8005858:	2b10      	cmp	r3, #16
 800585a:	d00c      	beq.n	8005876 <HAL_TIM_ConfigClockSource+0x4a>
 800585c:	d807      	bhi.n	800586e <HAL_TIM_ConfigClockSource+0x42>
 800585e:	b153      	cbz	r3, 8005876 <HAL_TIM_ConfigClockSource+0x4a>
  htim->State = HAL_TIM_STATE_READY;
 8005860:	2301      	movs	r3, #1
  __HAL_UNLOCK(htim);
 8005862:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 8005864:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8005868:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 800586c:	bd70      	pop	{r4, r5, r6, pc}
  switch (sClockSourceConfig->ClockSource)
 800586e:	2b20      	cmp	r3, #32
 8005870:	d001      	beq.n	8005876 <HAL_TIM_ConfigClockSource+0x4a>
 8005872:	2b30      	cmp	r3, #48	; 0x30
 8005874:	d1f4      	bne.n	8005860 <HAL_TIM_ConfigClockSource+0x34>
  tmpsmcr = TIMx->SMCR;
 8005876:	6882      	ldr	r2, [r0, #8]
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005878:	f043 0307 	orr.w	r3, r3, #7
  tmpsmcr &= ~TIM_SMCR_TS;
 800587c:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005880:	4313      	orrs	r3, r2
 8005882:	e01a      	b.n	80058ba <HAL_TIM_ConfigClockSource+0x8e>
  switch (sClockSourceConfig->ClockSource)
 8005884:	2b60      	cmp	r3, #96	; 0x60
 8005886:	d034      	beq.n	80058f2 <HAL_TIM_ConfigClockSource+0xc6>
 8005888:	d819      	bhi.n	80058be <HAL_TIM_ConfigClockSource+0x92>
 800588a:	2b50      	cmp	r3, #80	; 0x50
 800588c:	d1e8      	bne.n	8005860 <HAL_TIM_ConfigClockSource+0x34>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800588e:	684a      	ldr	r2, [r1, #4]
 8005890:	68ce      	ldr	r6, [r1, #12]
  tmpccer = TIMx->CCER;
 8005892:	6a01      	ldr	r1, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005894:	6a05      	ldr	r5, [r0, #32]
 8005896:	f025 0501 	bic.w	r5, r5, #1
 800589a:	6205      	str	r5, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 800589c:	6983      	ldr	r3, [r0, #24]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800589e:	f021 010a 	bic.w	r1, r1, #10
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80058a2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80058a6:	ea43 1306 	orr.w	r3, r3, r6, lsl #4
  tmpccer |= TIM_ICPolarity;
 80058aa:	430a      	orrs	r2, r1
  TIMx->CCMR1 = tmpccmr1;
 80058ac:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 80058ae:	6202      	str	r2, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 80058b0:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 80058b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80058b6:	f043 0357 	orr.w	r3, r3, #87	; 0x57
  TIMx->SMCR = tmpsmcr;
 80058ba:	6083      	str	r3, [r0, #8]
 80058bc:	e7d0      	b.n	8005860 <HAL_TIM_ConfigClockSource+0x34>
  switch (sClockSourceConfig->ClockSource)
 80058be:	2b70      	cmp	r3, #112	; 0x70
 80058c0:	d00c      	beq.n	80058dc <HAL_TIM_ConfigClockSource+0xb0>
 80058c2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80058c6:	d1cb      	bne.n	8005860 <HAL_TIM_ConfigClockSource+0x34>
      TIM_ETR_SetConfig(htim->Instance,
 80058c8:	68cb      	ldr	r3, [r1, #12]
 80058ca:	684a      	ldr	r2, [r1, #4]
 80058cc:	6889      	ldr	r1, [r1, #8]
 80058ce:	f7ff ffa3 	bl	8005818 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80058d2:	6822      	ldr	r2, [r4, #0]
 80058d4:	6893      	ldr	r3, [r2, #8]
 80058d6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80058da:	e008      	b.n	80058ee <HAL_TIM_ConfigClockSource+0xc2>
      TIM_ETR_SetConfig(htim->Instance,
 80058dc:	68cb      	ldr	r3, [r1, #12]
 80058de:	684a      	ldr	r2, [r1, #4]
 80058e0:	6889      	ldr	r1, [r1, #8]
 80058e2:	f7ff ff99 	bl	8005818 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80058e6:	6822      	ldr	r2, [r4, #0]
 80058e8:	6893      	ldr	r3, [r2, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80058ea:	f043 0377 	orr.w	r3, r3, #119	; 0x77
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80058ee:	6093      	str	r3, [r2, #8]
      break;
 80058f0:	e7b6      	b.n	8005860 <HAL_TIM_ConfigClockSource+0x34>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80058f2:	684d      	ldr	r5, [r1, #4]
 80058f4:	68ce      	ldr	r6, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80058f6:	6a01      	ldr	r1, [r0, #32]
 80058f8:	f021 0110 	bic.w	r1, r1, #16
 80058fc:	6201      	str	r1, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 80058fe:	6982      	ldr	r2, [r0, #24]
  tmpccer = TIMx->CCER;
 8005900:	6a03      	ldr	r3, [r0, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005902:	f422 4270 	bic.w	r2, r2, #61440	; 0xf000
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005906:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 800590a:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800590e:	ea42 3206 	orr.w	r2, r2, r6, lsl #12
  TIMx->CCMR1 = tmpccmr1 ;
 8005912:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 8005914:	6203      	str	r3, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 8005916:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8005918:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800591c:	f043 0367 	orr.w	r3, r3, #103	; 0x67
 8005920:	e7cb      	b.n	80058ba <HAL_TIM_ConfigClockSource+0x8e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005922:	684a      	ldr	r2, [r1, #4]
 8005924:	68ce      	ldr	r6, [r1, #12]
  tmpccer = TIMx->CCER;
 8005926:	6a01      	ldr	r1, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005928:	6a05      	ldr	r5, [r0, #32]
 800592a:	f025 0501 	bic.w	r5, r5, #1
 800592e:	6205      	str	r5, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005930:	6983      	ldr	r3, [r0, #24]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005932:	f021 010a 	bic.w	r1, r1, #10
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005936:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800593a:	ea43 1306 	orr.w	r3, r3, r6, lsl #4
  tmpccer |= TIM_ICPolarity;
 800593e:	430a      	orrs	r2, r1
  TIMx->CCMR1 = tmpccmr1;
 8005940:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 8005942:	6202      	str	r2, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 8005944:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8005946:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800594a:	f043 0347 	orr.w	r3, r3, #71	; 0x47
 800594e:	e7b4      	b.n	80058ba <HAL_TIM_ConfigClockSource+0x8e>
 8005950:	fffe0088 	.word	0xfffe0088

08005954 <TIM_CCxChannelCmd>:
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005954:	6a03      	ldr	r3, [r0, #32]
  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005956:	f001 011f 	and.w	r1, r1, #31
{
 800595a:	b510      	push	{r4, lr}
  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800595c:	2401      	movs	r4, #1
 800595e:	408c      	lsls	r4, r1
  TIMx->CCER &= ~tmp;
 8005960:	ea23 0304 	bic.w	r3, r3, r4
 8005964:	6203      	str	r3, [r0, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005966:	6a03      	ldr	r3, [r0, #32]
 8005968:	408a      	lsls	r2, r1
 800596a:	431a      	orrs	r2, r3
 800596c:	6202      	str	r2, [r0, #32]
 800596e:	bd10      	pop	{r4, pc}

08005970 <HAL_TIM_PWM_Start>:
{
 8005970:	b510      	push	{r4, lr}
 8005972:	4604      	mov	r4, r0
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005974:	2201      	movs	r2, #1
 8005976:	6800      	ldr	r0, [r0, #0]
 8005978:	f7ff ffec 	bl	8005954 <TIM_CCxChannelCmd>
  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800597c:	6823      	ldr	r3, [r4, #0]
 800597e:	4a13      	ldr	r2, [pc, #76]	; (80059cc <HAL_TIM_PWM_Start+0x5c>)
 8005980:	4293      	cmp	r3, r2
 8005982:	d01d      	beq.n	80059c0 <HAL_TIM_PWM_Start+0x50>
 8005984:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005988:	4293      	cmp	r3, r2
 800598a:	d019      	beq.n	80059c0 <HAL_TIM_PWM_Start+0x50>
 800598c:	f502 6240 	add.w	r2, r2, #3072	; 0xc00
 8005990:	4293      	cmp	r3, r2
 8005992:	d015      	beq.n	80059c0 <HAL_TIM_PWM_Start+0x50>
 8005994:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005998:	4293      	cmp	r3, r2
 800599a:	d011      	beq.n	80059c0 <HAL_TIM_PWM_Start+0x50>
 800599c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80059a0:	4293      	cmp	r3, r2
 80059a2:	d00d      	beq.n	80059c0 <HAL_TIM_PWM_Start+0x50>
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80059a4:	6899      	ldr	r1, [r3, #8]
 80059a6:	4a0a      	ldr	r2, [pc, #40]	; (80059d0 <HAL_TIM_PWM_Start+0x60>)
 80059a8:	400a      	ands	r2, r1
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80059aa:	2a06      	cmp	r2, #6
 80059ac:	d006      	beq.n	80059bc <HAL_TIM_PWM_Start+0x4c>
 80059ae:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 80059b2:	d003      	beq.n	80059bc <HAL_TIM_PWM_Start+0x4c>
    __HAL_TIM_ENABLE(htim);
 80059b4:	681a      	ldr	r2, [r3, #0]
 80059b6:	f042 0201 	orr.w	r2, r2, #1
 80059ba:	601a      	str	r2, [r3, #0]
}
 80059bc:	2000      	movs	r0, #0
 80059be:	bd10      	pop	{r4, pc}
    __HAL_TIM_MOE_ENABLE(htim);
 80059c0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80059c2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80059c6:	645a      	str	r2, [r3, #68]	; 0x44
 80059c8:	e7ec      	b.n	80059a4 <HAL_TIM_PWM_Start+0x34>
 80059ca:	bf00      	nop
 80059cc:	40012c00 	.word	0x40012c00
 80059d0:	00010007 	.word	0x00010007

080059d4 <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80059d4:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 80059d8:	2b01      	cmp	r3, #1
{
 80059da:	b530      	push	{r4, r5, lr}
 80059dc:	f04f 0302 	mov.w	r3, #2
  __HAL_LOCK(htim);
 80059e0:	d01f      	beq.n	8005a22 <HAL_TIMEx_MasterConfigSynchronization+0x4e>

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80059e2:	6802      	ldr	r2, [r0, #0]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80059e4:	4d10      	ldr	r5, [pc, #64]	; (8005a28 <HAL_TIMEx_MasterConfigSynchronization+0x54>)
  htim->State = HAL_TIM_STATE_BUSY;
 80059e6:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80059ea:	42aa      	cmp	r2, r5
  tmpcr2 = htim->Instance->CR2;
 80059ec:	6853      	ldr	r3, [r2, #4]
  tmpsmcr = htim->Instance->SMCR;
 80059ee:	6894      	ldr	r4, [r2, #8]
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80059f0:	d003      	beq.n	80059fa <HAL_TIMEx_MasterConfigSynchronization+0x26>
 80059f2:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 80059f6:	42aa      	cmp	r2, r5
 80059f8:	d103      	bne.n	8005a02 <HAL_TIMEx_MasterConfigSynchronization+0x2e>
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80059fa:	684d      	ldr	r5, [r1, #4]
    tmpcr2 &= ~TIM_CR2_MMS2;
 80059fc:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005a00:	432b      	orrs	r3, r5
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005a02:	680d      	ldr	r5, [r1, #0]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005a04:	6889      	ldr	r1, [r1, #8]
  tmpcr2 &= ~TIM_CR2_MMS;
 8005a06:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005a0a:	432b      	orrs	r3, r5
  tmpsmcr &= ~TIM_SMCR_MSM;
 8005a0c:	f024 0480 	bic.w	r4, r4, #128	; 0x80

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005a10:	6053      	str	r3, [r2, #4]
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005a12:	4321      	orrs	r1, r4

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005a14:	2301      	movs	r3, #1
  htim->Instance->SMCR = tmpsmcr;
 8005a16:	6091      	str	r1, [r2, #8]
  htim->State = HAL_TIM_STATE_READY;
 8005a18:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005a1c:	2300      	movs	r3, #0
 8005a1e:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  __HAL_LOCK(htim);
 8005a22:	4618      	mov	r0, r3

  return HAL_OK;
}
 8005a24:	bd30      	pop	{r4, r5, pc}
 8005a26:	bf00      	nop
 8005a28:	40012c00 	.word	0x40012c00

08005a2c <HAL_TIMEx_CommutCallback>:
 8005a2c:	4770      	bx	lr

08005a2e <HAL_TIMEx_BreakCallback>:
 8005a2e:	4770      	bx	lr

08005a30 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005a30:	4770      	bx	lr
	...

08005a34 <UART_SetConfig>:
  uint32_t lpuart_ker_ck_pres         = 0x00000000U;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  if (UART_INSTANCE_LOWPOWER(huart))
 8005a34:	6802      	ldr	r2, [r0, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005a36:	69c1      	ldr	r1, [r0, #28]
{
 8005a38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005a3a:	4604      	mov	r4, r0
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005a3c:	6883      	ldr	r3, [r0, #8]
 8005a3e:	6900      	ldr	r0, [r0, #16]
#if defined(USART_CR1_FIFOEN)
  tmpreg |= (uint32_t)huart->FifoMode;
#endif /* USART_CR1_FIFOEN */
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005a40:	6815      	ldr	r5, [r2, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005a42:	4303      	orrs	r3, r0
 8005a44:	6960      	ldr	r0, [r4, #20]
 8005a46:	4303      	orrs	r3, r0
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005a48:	48ba      	ldr	r0, [pc, #744]	; (8005d34 <UART_SetConfig+0x300>)
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005a4a:	430b      	orrs	r3, r1
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005a4c:	4028      	ands	r0, r5
 8005a4e:	4303      	orrs	r3, r0
 8005a50:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005a52:	6853      	ldr	r3, [r2, #4]
 8005a54:	68e0      	ldr	r0, [r4, #12]
 8005a56:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8005a5a:	4303      	orrs	r3, r0
 8005a5c:	6053      	str	r3, [r2, #4]
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005a5e:	4bb6      	ldr	r3, [pc, #728]	; (8005d38 <UART_SetConfig+0x304>)
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005a60:	69a0      	ldr	r0, [r4, #24]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005a62:	429a      	cmp	r2, r3
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005a64:	bf1c      	itt	ne
 8005a66:	6a23      	ldrne	r3, [r4, #32]
 8005a68:	4318      	orrne	r0, r3
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005a6a:	6893      	ldr	r3, [r2, #8]
 8005a6c:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8005a70:	4303      	orrs	r3, r0
 8005a72:	6093      	str	r3, [r2, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005a74:	4bb1      	ldr	r3, [pc, #708]	; (8005d3c <UART_SetConfig+0x308>)
 8005a76:	429a      	cmp	r2, r3
 8005a78:	d119      	bne.n	8005aae <UART_SetConfig+0x7a>
 8005a7a:	f503 4358 	add.w	r3, r3, #55296	; 0xd800
 8005a7e:	4ab0      	ldr	r2, [pc, #704]	; (8005d40 <UART_SetConfig+0x30c>)
 8005a80:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005a84:	f003 0303 	and.w	r3, r3, #3
        }
      } /*   if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (lpuart_ker_ck_pres != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005a88:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 8005a8c:	5cd3      	ldrb	r3, [r2, r3]
 8005a8e:	f040 8138 	bne.w	8005d02 <UART_SetConfig+0x2ce>
  {
    switch (clocksource)
 8005a92:	2b08      	cmp	r3, #8
 8005a94:	f200 808f 	bhi.w	8005bb6 <UART_SetConfig+0x182>
 8005a98:	e8df f013 	tbh	[pc, r3, lsl #1]
 8005a9c:	00ca011a 	.word	0x00ca011a
 8005aa0:	008d00f9 	.word	0x008d00f9
 8005aa4:	008d0114 	.word	0x008d0114
 8005aa8:	008d008d 	.word	0x008d008d
 8005aac:	0036      	.short	0x0036
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005aae:	4ba5      	ldr	r3, [pc, #660]	; (8005d44 <UART_SetConfig+0x310>)
 8005ab0:	429a      	cmp	r2, r3
 8005ab2:	d107      	bne.n	8005ac4 <UART_SetConfig+0x90>
 8005ab4:	f503 33e6 	add.w	r3, r3, #117760	; 0x1cc00
 8005ab8:	4aa3      	ldr	r2, [pc, #652]	; (8005d48 <UART_SetConfig+0x314>)
 8005aba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005abe:	f003 030c 	and.w	r3, r3, #12
 8005ac2:	e7e1      	b.n	8005a88 <UART_SetConfig+0x54>
 8005ac4:	4ba1      	ldr	r3, [pc, #644]	; (8005d4c <UART_SetConfig+0x318>)
 8005ac6:	429a      	cmp	r2, r3
 8005ac8:	d123      	bne.n	8005b12 <UART_SetConfig+0xde>
 8005aca:	f503 33e4 	add.w	r3, r3, #116736	; 0x1c800
 8005ace:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005ad2:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8005ad6:	2b10      	cmp	r3, #16
 8005ad8:	f000 80f1 	beq.w	8005cbe <UART_SetConfig+0x28a>
 8005adc:	d80b      	bhi.n	8005af6 <UART_SetConfig+0xc2>
 8005ade:	2b00      	cmp	r3, #0
 8005ae0:	f000 80f3 	beq.w	8005cca <UART_SetConfig+0x296>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005ae4:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
        break;
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 8005ae8:	f04f 0201 	mov.w	r2, #1
  uint32_t usartdiv                   = 0x00000000U;
 8005aec:	f04f 0300 	mov.w	r3, #0
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005af0:	f000 80f8 	beq.w	8005ce4 <UART_SetConfig+0x2b0>
 8005af4:	e0a8      	b.n	8005c48 <UART_SetConfig+0x214>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005af6:	2b20      	cmp	r3, #32
 8005af8:	f000 80c6 	beq.w	8005c88 <UART_SetConfig+0x254>
 8005afc:	2b30      	cmp	r3, #48	; 0x30
 8005afe:	d1f1      	bne.n	8005ae4 <UART_SetConfig+0xb0>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005b00:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 8005b04:	f040 80b8 	bne.w	8005c78 <UART_SetConfig+0x244>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8005b08:	6860      	ldr	r0, [r4, #4]
 8005b0a:	0843      	lsrs	r3, r0, #1
 8005b0c:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 8005b10:	e0c3      	b.n	8005c9a <UART_SetConfig+0x266>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005b12:	4b8f      	ldr	r3, [pc, #572]	; (8005d50 <UART_SetConfig+0x31c>)
 8005b14:	429a      	cmp	r2, r3
 8005b16:	d11e      	bne.n	8005b56 <UART_SetConfig+0x122>
 8005b18:	f503 33e2 	add.w	r3, r3, #115712	; 0x1c400
 8005b1c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005b20:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8005b24:	2b40      	cmp	r3, #64	; 0x40
 8005b26:	f000 80bb 	beq.w	8005ca0 <UART_SetConfig+0x26c>
 8005b2a:	d80a      	bhi.n	8005b42 <UART_SetConfig+0x10e>
 8005b2c:	b97b      	cbnz	r3, 8005b4e <UART_SetConfig+0x11a>
  if (UART_INSTANCE_LOWPOWER(huart))
 8005b2e:	4b82      	ldr	r3, [pc, #520]	; (8005d38 <UART_SetConfig+0x304>)
 8005b30:	429a      	cmp	r2, r3
 8005b32:	f040 80ca 	bne.w	8005cca <UART_SetConfig+0x296>
        lpuart_ker_ck_pres = HAL_RCC_GetPCLK1Freq();
 8005b36:	f7fe fbd3 	bl	80042e0 <HAL_RCC_GetPCLK1Freq>
        break;
 8005b3a:	2300      	movs	r3, #0
    if (lpuart_ker_ck_pres != 0U)
 8005b3c:	bbb0      	cbnz	r0, 8005bac <UART_SetConfig+0x178>
 8005b3e:	4602      	mov	r2, r0
 8005b40:	e03a      	b.n	8005bb8 <UART_SetConfig+0x184>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005b42:	2b80      	cmp	r3, #128	; 0x80
 8005b44:	f000 809d 	beq.w	8005c82 <UART_SetConfig+0x24e>
 8005b48:	2bc0      	cmp	r3, #192	; 0xc0
 8005b4a:	f000 80b0 	beq.w	8005cae <UART_SetConfig+0x27a>
  if (UART_INSTANCE_LOWPOWER(huart))
 8005b4e:	4b7a      	ldr	r3, [pc, #488]	; (8005d38 <UART_SetConfig+0x304>)
 8005b50:	429a      	cmp	r2, r3
 8005b52:	d1c7      	bne.n	8005ae4 <UART_SetConfig+0xb0>
 8005b54:	e02f      	b.n	8005bb6 <UART_SetConfig+0x182>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005b56:	4b7f      	ldr	r3, [pc, #508]	; (8005d54 <UART_SetConfig+0x320>)
 8005b58:	429a      	cmp	r2, r3
 8005b5a:	d111      	bne.n	8005b80 <UART_SetConfig+0x14c>
 8005b5c:	f503 33e0 	add.w	r3, r3, #114688	; 0x1c000
 8005b60:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005b64:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005b68:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005b6c:	f000 8098 	beq.w	8005ca0 <UART_SetConfig+0x26c>
 8005b70:	d9dc      	bls.n	8005b2c <UART_SetConfig+0xf8>
 8005b72:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005b76:	f000 8084 	beq.w	8005c82 <UART_SetConfig+0x24e>
 8005b7a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005b7e:	e7e4      	b.n	8005b4a <UART_SetConfig+0x116>
 8005b80:	4b6d      	ldr	r3, [pc, #436]	; (8005d38 <UART_SetConfig+0x304>)
 8005b82:	429a      	cmp	r2, r3
 8005b84:	d1ae      	bne.n	8005ae4 <UART_SetConfig+0xb0>
 8005b86:	f503 33c8 	add.w	r3, r3, #102400	; 0x19000
 8005b8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005b8e:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8005b92:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005b96:	f000 8083 	beq.w	8005ca0 <UART_SetConfig+0x26c>
 8005b9a:	d9c7      	bls.n	8005b2c <UART_SetConfig+0xf8>
 8005b9c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005ba0:	d06f      	beq.n	8005c82 <UART_SetConfig+0x24e>
 8005ba2:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005ba6:	e7d0      	b.n	8005b4a <UART_SetConfig+0x116>
        lpuart_ker_ck_pres = (uint32_t)HSI_VALUE;
 8005ba8:	486b      	ldr	r0, [pc, #428]	; (8005d58 <UART_SetConfig+0x324>)
  if (UART_INSTANCE_LOWPOWER(huart))
 8005baa:	2302      	movs	r3, #2
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005bac:	6862      	ldr	r2, [r4, #4]
 8005bae:	eb02 0142 	add.w	r1, r2, r2, lsl #1
 8005bb2:	4281      	cmp	r1, r0
 8005bb4:	d905      	bls.n	8005bc2 <UART_SetConfig+0x18e>
        ret = HAL_ERROR;
 8005bb6:	2201      	movs	r2, #1
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005bb8:	2300      	movs	r3, #0
 8005bba:	6623      	str	r3, [r4, #96]	; 0x60
  huart->TxISR = NULL;
 8005bbc:	6663      	str	r3, [r4, #100]	; 0x64

  return ret;
}
 8005bbe:	4610      	mov	r0, r2
 8005bc0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005bc2:	ebb0 3f02 	cmp.w	r0, r2, lsl #12
 8005bc6:	d8f6      	bhi.n	8005bb6 <UART_SetConfig+0x182>
        switch (clocksource)
 8005bc8:	2b08      	cmp	r3, #8
 8005bca:	d82e      	bhi.n	8005c2a <UART_SetConfig+0x1f6>
 8005bcc:	e8df f003 	tbb	[pc, r3]
 8005bd0:	2d1c2d05 	.word	0x2d1c2d05
 8005bd4:	2d2d2d24 	.word	0x2d2d2d24
 8005bd8:	27          	.byte	0x27
 8005bd9:	00          	.byte	0x00
            usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8005bda:	f7fe fb81 	bl	80042e0 <HAL_RCC_GetPCLK1Freq>
            usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8005bde:	6862      	ldr	r2, [r4, #4]
 8005be0:	f44f 7180 	mov.w	r1, #256	; 0x100
 8005be4:	0856      	lsrs	r6, r2, #1
 8005be6:	2700      	movs	r7, #0
 8005be8:	fbe1 6700 	umlal	r6, r7, r1, r0
 8005bec:	2300      	movs	r3, #0
 8005bee:	4630      	mov	r0, r6
 8005bf0:	4639      	mov	r1, r7
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate));
 8005bf2:	f7fa ffd5 	bl	8000ba0 <__aeabi_uldivmod>
            break;
 8005bf6:	2200      	movs	r2, #0
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005bf8:	4b58      	ldr	r3, [pc, #352]	; (8005d5c <UART_SetConfig+0x328>)
 8005bfa:	f5a0 7140 	sub.w	r1, r0, #768	; 0x300
 8005bfe:	4299      	cmp	r1, r3
 8005c00:	d8d9      	bhi.n	8005bb6 <UART_SetConfig+0x182>
          huart->Instance->BRR = usartdiv;
 8005c02:	6823      	ldr	r3, [r4, #0]
 8005c04:	60d8      	str	r0, [r3, #12]
 8005c06:	e7d7      	b.n	8005bb8 <UART_SetConfig+0x184>
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate));
 8005c08:	4855      	ldr	r0, [pc, #340]	; (8005d60 <UART_SetConfig+0x32c>)
 8005c0a:	0855      	lsrs	r5, r2, #1
 8005c0c:	2300      	movs	r3, #0
 8005c0e:	2100      	movs	r1, #0
 8005c10:	1940      	adds	r0, r0, r5
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate));
 8005c12:	f141 0100 	adc.w	r1, r1, #0
 8005c16:	e7ec      	b.n	8005bf2 <UART_SetConfig+0x1be>
            usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8005c18:	f7fe f816 	bl	8003c48 <HAL_RCC_GetSysClockFreq>
 8005c1c:	e7df      	b.n	8005bde <UART_SetConfig+0x1aa>
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate));
 8005c1e:	0850      	lsrs	r0, r2, #1
 8005c20:	2100      	movs	r1, #0
 8005c22:	2300      	movs	r3, #0
 8005c24:	f510 0000 	adds.w	r0, r0, #8388608	; 0x800000
 8005c28:	e7f3      	b.n	8005c12 <UART_SetConfig+0x1de>
            ret = HAL_ERROR;
 8005c2a:	2201      	movs	r2, #1
  uint32_t usartdiv                   = 0x00000000U;
 8005c2c:	2000      	movs	r0, #0
 8005c2e:	e7e3      	b.n	8005bf8 <UART_SetConfig+0x1c4>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8005c30:	f7fe fb68 	bl	8004304 <HAL_RCC_GetPCLK2Freq>
 8005c34:	e04e      	b.n	8005cd4 <UART_SetConfig+0x2a0>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8005c36:	f7fe fb53 	bl	80042e0 <HAL_RCC_GetPCLK1Freq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8005c3a:	6862      	ldr	r2, [r4, #4]
 8005c3c:	eb00 0352 	add.w	r3, r0, r2, lsr #1
 8005c40:	fbb3 f3f2 	udiv	r3, r3, r2
 8005c44:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 8005c46:	2200      	movs	r2, #0
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005c48:	f1a3 0010 	sub.w	r0, r3, #16
 8005c4c:	f64f 71ef 	movw	r1, #65519	; 0xffef
 8005c50:	4288      	cmp	r0, r1
 8005c52:	d8b0      	bhi.n	8005bb6 <UART_SetConfig+0x182>
      huart->Instance->BRR = usartdiv;
 8005c54:	6821      	ldr	r1, [r4, #0]
 8005c56:	60cb      	str	r3, [r1, #12]
 8005c58:	e7ae      	b.n	8005bb8 <UART_SetConfig+0x184>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8005c5a:	f7fe fb53 	bl	8004304 <HAL_RCC_GetPCLK2Freq>
 8005c5e:	e7ec      	b.n	8005c3a <UART_SetConfig+0x206>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8005c60:	6860      	ldr	r0, [r4, #4]
 8005c62:	0843      	lsrs	r3, r0, #1
 8005c64:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
 8005c68:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8005c6c:	fbb3 f3f0 	udiv	r3, r3, r0
 8005c70:	e7e8      	b.n	8005c44 <UART_SetConfig+0x210>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8005c72:	f7fd ffe9 	bl	8003c48 <HAL_RCC_GetSysClockFreq>
 8005c76:	e7e0      	b.n	8005c3a <UART_SetConfig+0x206>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8005c78:	6860      	ldr	r0, [r4, #4]
 8005c7a:	0843      	lsrs	r3, r0, #1
 8005c7c:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8005c80:	e7f4      	b.n	8005c6c <UART_SetConfig+0x238>
  if (UART_INSTANCE_LOWPOWER(huart))
 8005c82:	4b2d      	ldr	r3, [pc, #180]	; (8005d38 <UART_SetConfig+0x304>)
 8005c84:	429a      	cmp	r2, r3
 8005c86:	d08f      	beq.n	8005ba8 <UART_SetConfig+0x174>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005c88:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 8005c8c:	d1e8      	bne.n	8005c60 <UART_SetConfig+0x22c>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8005c8e:	6860      	ldr	r0, [r4, #4]
 8005c90:	0843      	lsrs	r3, r0, #1
 8005c92:	f103 73f4 	add.w	r3, r3, #31981568	; 0x1e80000
 8005c96:	f503 4390 	add.w	r3, r3, #18432	; 0x4800
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8005c9a:	fbb3 f3f0 	udiv	r3, r3, r0
 8005c9e:	e01f      	b.n	8005ce0 <UART_SetConfig+0x2ac>
  if (UART_INSTANCE_LOWPOWER(huart))
 8005ca0:	4b25      	ldr	r3, [pc, #148]	; (8005d38 <UART_SetConfig+0x304>)
 8005ca2:	429a      	cmp	r2, r3
 8005ca4:	d10b      	bne.n	8005cbe <UART_SetConfig+0x28a>
        lpuart_ker_ck_pres = HAL_RCC_GetSysClockFreq();
 8005ca6:	f7fd ffcf 	bl	8003c48 <HAL_RCC_GetSysClockFreq>
        break;
 8005caa:	2304      	movs	r3, #4
 8005cac:	e746      	b.n	8005b3c <UART_SetConfig+0x108>
  if (UART_INSTANCE_LOWPOWER(huart))
 8005cae:	4b22      	ldr	r3, [pc, #136]	; (8005d38 <UART_SetConfig+0x304>)
 8005cb0:	429a      	cmp	r2, r3
 8005cb2:	f47f af25 	bne.w	8005b00 <UART_SetConfig+0xcc>
        lpuart_ker_ck_pres = (uint32_t)LSE_VALUE;
 8005cb6:	f44f 4000 	mov.w	r0, #32768	; 0x8000
  if (UART_INSTANCE_LOWPOWER(huart))
 8005cba:	2308      	movs	r3, #8
 8005cbc:	e776      	b.n	8005bac <UART_SetConfig+0x178>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005cbe:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 8005cc2:	d1d6      	bne.n	8005c72 <UART_SetConfig+0x23e>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8005cc4:	f7fd ffc0 	bl	8003c48 <HAL_RCC_GetSysClockFreq>
 8005cc8:	e004      	b.n	8005cd4 <UART_SetConfig+0x2a0>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005cca:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 8005cce:	d1b2      	bne.n	8005c36 <UART_SetConfig+0x202>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8005cd0:	f7fe fb06 	bl	80042e0 <HAL_RCC_GetPCLK1Freq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8005cd4:	6861      	ldr	r1, [r4, #4]
 8005cd6:	084a      	lsrs	r2, r1, #1
 8005cd8:	eb02 0340 	add.w	r3, r2, r0, lsl #1
 8005cdc:	fbb3 f3f1 	udiv	r3, r3, r1
 8005ce0:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 8005ce2:	2200      	movs	r2, #0
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005ce4:	f1a3 0010 	sub.w	r0, r3, #16
 8005ce8:	f64f 71ef 	movw	r1, #65519	; 0xffef
 8005cec:	4288      	cmp	r0, r1
 8005cee:	f63f af62 	bhi.w	8005bb6 <UART_SetConfig+0x182>
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005cf2:	f023 010f 	bic.w	r1, r3, #15
      huart->Instance->BRR = brrtemp;
 8005cf6:	6820      	ldr	r0, [r4, #0]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005cf8:	f3c3 0342 	ubfx	r3, r3, #1, #3
      huart->Instance->BRR = brrtemp;
 8005cfc:	430b      	orrs	r3, r1
 8005cfe:	60c3      	str	r3, [r0, #12]
 8005d00:	e75a      	b.n	8005bb8 <UART_SetConfig+0x184>
    switch (clocksource)
 8005d02:	2b08      	cmp	r3, #8
 8005d04:	f63f af57 	bhi.w	8005bb6 <UART_SetConfig+0x182>
 8005d08:	a201      	add	r2, pc, #4	; (adr r2, 8005d10 <UART_SetConfig+0x2dc>)
 8005d0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d0e:	bf00      	nop
 8005d10:	08005c37 	.word	0x08005c37
 8005d14:	08005c5b 	.word	0x08005c5b
 8005d18:	08005c61 	.word	0x08005c61
 8005d1c:	08005bb7 	.word	0x08005bb7
 8005d20:	08005c73 	.word	0x08005c73
 8005d24:	08005bb7 	.word	0x08005bb7
 8005d28:	08005bb7 	.word	0x08005bb7
 8005d2c:	08005bb7 	.word	0x08005bb7
 8005d30:	08005c79 	.word	0x08005c79
 8005d34:	efff69f3 	.word	0xefff69f3
 8005d38:	40008000 	.word	0x40008000
 8005d3c:	40013800 	.word	0x40013800
 8005d40:	0801dba3 	.word	0x0801dba3
 8005d44:	40004400 	.word	0x40004400
 8005d48:	0801dba7 	.word	0x0801dba7
 8005d4c:	40004800 	.word	0x40004800
 8005d50:	40004c00 	.word	0x40004c00
 8005d54:	40005000 	.word	0x40005000
 8005d58:	00f42400 	.word	0x00f42400
 8005d5c:	000ffcff 	.word	0x000ffcff
 8005d60:	f4240000 	.word	0xf4240000

08005d64 <UART_AdvFeatureConfig>:
{
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005d64:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8005d66:	07da      	lsls	r2, r3, #31
{
 8005d68:	b510      	push	{r4, lr}
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005d6a:	d506      	bpl.n	8005d7a <UART_AdvFeatureConfig+0x16>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005d6c:	6801      	ldr	r1, [r0, #0]
 8005d6e:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8005d70:	684a      	ldr	r2, [r1, #4]
 8005d72:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 8005d76:	4322      	orrs	r2, r4
 8005d78:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005d7a:	079c      	lsls	r4, r3, #30
 8005d7c:	d506      	bpl.n	8005d8c <UART_AdvFeatureConfig+0x28>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005d7e:	6801      	ldr	r1, [r0, #0]
 8005d80:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 8005d82:	684a      	ldr	r2, [r1, #4]
 8005d84:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8005d88:	4322      	orrs	r2, r4
 8005d8a:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005d8c:	0759      	lsls	r1, r3, #29
 8005d8e:	d506      	bpl.n	8005d9e <UART_AdvFeatureConfig+0x3a>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005d90:	6801      	ldr	r1, [r0, #0]
 8005d92:	6b04      	ldr	r4, [r0, #48]	; 0x30
 8005d94:	684a      	ldr	r2, [r1, #4]
 8005d96:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8005d9a:	4322      	orrs	r2, r4
 8005d9c:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005d9e:	071a      	lsls	r2, r3, #28
 8005da0:	d506      	bpl.n	8005db0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005da2:	6801      	ldr	r1, [r0, #0]
 8005da4:	6b44      	ldr	r4, [r0, #52]	; 0x34
 8005da6:	684a      	ldr	r2, [r1, #4]
 8005da8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005dac:	4322      	orrs	r2, r4
 8005dae:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005db0:	06dc      	lsls	r4, r3, #27
 8005db2:	d506      	bpl.n	8005dc2 <UART_AdvFeatureConfig+0x5e>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005db4:	6801      	ldr	r1, [r0, #0]
 8005db6:	6b84      	ldr	r4, [r0, #56]	; 0x38
 8005db8:	688a      	ldr	r2, [r1, #8]
 8005dba:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8005dbe:	4322      	orrs	r2, r4
 8005dc0:	608a      	str	r2, [r1, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005dc2:	0699      	lsls	r1, r3, #26
 8005dc4:	d506      	bpl.n	8005dd4 <UART_AdvFeatureConfig+0x70>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005dc6:	6801      	ldr	r1, [r0, #0]
 8005dc8:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 8005dca:	688a      	ldr	r2, [r1, #8]
 8005dcc:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005dd0:	4322      	orrs	r2, r4
 8005dd2:	608a      	str	r2, [r1, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005dd4:	065a      	lsls	r2, r3, #25
 8005dd6:	d50f      	bpl.n	8005df8 <UART_AdvFeatureConfig+0x94>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005dd8:	6801      	ldr	r1, [r0, #0]
 8005dda:	6c04      	ldr	r4, [r0, #64]	; 0x40
 8005ddc:	684a      	ldr	r2, [r1, #4]
 8005dde:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 8005de2:	4322      	orrs	r2, r4
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005de4:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005de8:	604a      	str	r2, [r1, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005dea:	d105      	bne.n	8005df8 <UART_AdvFeatureConfig+0x94>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005dec:	684a      	ldr	r2, [r1, #4]
 8005dee:	6c44      	ldr	r4, [r0, #68]	; 0x44
 8005df0:	f422 02c0 	bic.w	r2, r2, #6291456	; 0x600000
 8005df4:	4322      	orrs	r2, r4
 8005df6:	604a      	str	r2, [r1, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005df8:	061b      	lsls	r3, r3, #24
 8005dfa:	d506      	bpl.n	8005e0a <UART_AdvFeatureConfig+0xa6>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005dfc:	6802      	ldr	r2, [r0, #0]
 8005dfe:	6c81      	ldr	r1, [r0, #72]	; 0x48
 8005e00:	6853      	ldr	r3, [r2, #4]
 8005e02:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 8005e06:	430b      	orrs	r3, r1
 8005e08:	6053      	str	r3, [r2, #4]
 8005e0a:	bd10      	pop	{r4, pc}

08005e0c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005e0c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005e10:	9d06      	ldr	r5, [sp, #24]
 8005e12:	4604      	mov	r4, r0
 8005e14:	460f      	mov	r7, r1
 8005e16:	4616      	mov	r6, r2
 8005e18:	4698      	mov	r8, r3
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005e1a:	6821      	ldr	r1, [r4, #0]
 8005e1c:	69ca      	ldr	r2, [r1, #28]
 8005e1e:	ea37 0302 	bics.w	r3, r7, r2
 8005e22:	bf0c      	ite	eq
 8005e24:	2201      	moveq	r2, #1
 8005e26:	2200      	movne	r2, #0
 8005e28:	42b2      	cmp	r2, r6
 8005e2a:	d002      	beq.n	8005e32 <UART_WaitOnFlagUntilTimeout+0x26>

        return HAL_TIMEOUT;
      }
    }
  }
  return HAL_OK;
 8005e2c:	2000      	movs	r0, #0
}
 8005e2e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (Timeout != HAL_MAX_DELAY)
 8005e32:	1c6b      	adds	r3, r5, #1
 8005e34:	d0f2      	beq.n	8005e1c <UART_WaitOnFlagUntilTimeout+0x10>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005e36:	f7fc fb5f 	bl	80024f8 <HAL_GetTick>
 8005e3a:	eba0 0008 	sub.w	r0, r0, r8
 8005e3e:	4285      	cmp	r5, r0
 8005e40:	d301      	bcc.n	8005e46 <UART_WaitOnFlagUntilTimeout+0x3a>
 8005e42:	2d00      	cmp	r5, #0
 8005e44:	d1e9      	bne.n	8005e1a <UART_WaitOnFlagUntilTimeout+0xe>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005e46:	6823      	ldr	r3, [r4, #0]
 8005e48:	681a      	ldr	r2, [r3, #0]
 8005e4a:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8005e4e:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005e50:	689a      	ldr	r2, [r3, #8]
 8005e52:	f022 0201 	bic.w	r2, r2, #1
 8005e56:	609a      	str	r2, [r3, #8]
        huart->gState = HAL_UART_STATE_READY;
 8005e58:	2320      	movs	r3, #32
 8005e5a:	6763      	str	r3, [r4, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8005e5c:	67a3      	str	r3, [r4, #120]	; 0x78
        __HAL_UNLOCK(huart);
 8005e5e:	2300      	movs	r3, #0
 8005e60:	f884 3070 	strb.w	r3, [r4, #112]	; 0x70
 8005e64:	2003      	movs	r0, #3
 8005e66:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08005e6a <HAL_UART_Transmit>:
{
 8005e6a:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8005e6e:	4698      	mov	r8, r3
  if (huart->gState == HAL_UART_STATE_READY)
 8005e70:	6f43      	ldr	r3, [r0, #116]	; 0x74
 8005e72:	2b20      	cmp	r3, #32
{
 8005e74:	4604      	mov	r4, r0
 8005e76:	460e      	mov	r6, r1
 8005e78:	4691      	mov	r9, r2
  if (huart->gState == HAL_UART_STATE_READY)
 8005e7a:	d14b      	bne.n	8005f14 <HAL_UART_Transmit+0xaa>
    if ((pData == NULL) || (Size == 0U))
 8005e7c:	2900      	cmp	r1, #0
 8005e7e:	d047      	beq.n	8005f10 <HAL_UART_Transmit+0xa6>
 8005e80:	2a00      	cmp	r2, #0
 8005e82:	d045      	beq.n	8005f10 <HAL_UART_Transmit+0xa6>
    __HAL_LOCK(huart);
 8005e84:	f890 3070 	ldrb.w	r3, [r0, #112]	; 0x70
 8005e88:	2b01      	cmp	r3, #1
 8005e8a:	d043      	beq.n	8005f14 <HAL_UART_Transmit+0xaa>
 8005e8c:	2301      	movs	r3, #1
 8005e8e:	f880 3070 	strb.w	r3, [r0, #112]	; 0x70
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005e92:	2500      	movs	r5, #0
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005e94:	2321      	movs	r3, #33	; 0x21
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005e96:	67c5      	str	r5, [r0, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005e98:	6743      	str	r3, [r0, #116]	; 0x74
    tickstart = HAL_GetTick();
 8005e9a:	f7fc fb2d 	bl	80024f8 <HAL_GetTick>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005e9e:	68a3      	ldr	r3, [r4, #8]
    huart->TxXferSize  = Size;
 8005ea0:	f8a4 9050 	strh.w	r9, [r4, #80]	; 0x50
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005ea4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
    tickstart = HAL_GetTick();
 8005ea8:	4607      	mov	r7, r0
    huart->TxXferCount = Size;
 8005eaa:	f8a4 9052 	strh.w	r9, [r4, #82]	; 0x52
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005eae:	d103      	bne.n	8005eb8 <HAL_UART_Transmit+0x4e>
 8005eb0:	6923      	ldr	r3, [r4, #16]
 8005eb2:	b90b      	cbnz	r3, 8005eb8 <HAL_UART_Transmit+0x4e>
 8005eb4:	4635      	mov	r5, r6
      pdata8bits  = NULL;
 8005eb6:	461e      	mov	r6, r3
    while (huart->TxXferCount > 0U)
 8005eb8:	f8b4 2052 	ldrh.w	r2, [r4, #82]	; 0x52
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005ebc:	f8cd 8000 	str.w	r8, [sp]
    while (huart->TxXferCount > 0U)
 8005ec0:	b292      	uxth	r2, r2
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005ec2:	463b      	mov	r3, r7
    while (huart->TxXferCount > 0U)
 8005ec4:	b94a      	cbnz	r2, 8005eda <HAL_UART_Transmit+0x70>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005ec6:	2140      	movs	r1, #64	; 0x40
 8005ec8:	4620      	mov	r0, r4
 8005eca:	f7ff ff9f 	bl	8005e0c <UART_WaitOnFlagUntilTimeout>
 8005ece:	b950      	cbnz	r0, 8005ee6 <HAL_UART_Transmit+0x7c>
    huart->gState = HAL_UART_STATE_READY;
 8005ed0:	2320      	movs	r3, #32
 8005ed2:	6763      	str	r3, [r4, #116]	; 0x74
    __HAL_UNLOCK(huart);
 8005ed4:	f884 0070 	strb.w	r0, [r4, #112]	; 0x70
    return HAL_OK;
 8005ed8:	e006      	b.n	8005ee8 <HAL_UART_Transmit+0x7e>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005eda:	2200      	movs	r2, #0
 8005edc:	2180      	movs	r1, #128	; 0x80
 8005ede:	4620      	mov	r0, r4
 8005ee0:	f7ff ff94 	bl	8005e0c <UART_WaitOnFlagUntilTimeout>
 8005ee4:	b118      	cbz	r0, 8005eee <HAL_UART_Transmit+0x84>
        return HAL_TIMEOUT;
 8005ee6:	2003      	movs	r0, #3
}
 8005ee8:	b003      	add	sp, #12
 8005eea:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005eee:	6822      	ldr	r2, [r4, #0]
      if (pdata8bits == NULL)
 8005ef0:	b95e      	cbnz	r6, 8005f0a <HAL_UART_Transmit+0xa0>
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005ef2:	f835 3b02 	ldrh.w	r3, [r5], #2
 8005ef6:	f3c3 0308 	ubfx	r3, r3, #0, #9
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005efa:	8513      	strh	r3, [r2, #40]	; 0x28
      huart->TxXferCount--;
 8005efc:	f8b4 3052 	ldrh.w	r3, [r4, #82]	; 0x52
 8005f00:	3b01      	subs	r3, #1
 8005f02:	b29b      	uxth	r3, r3
 8005f04:	f8a4 3052 	strh.w	r3, [r4, #82]	; 0x52
 8005f08:	e7d6      	b.n	8005eb8 <HAL_UART_Transmit+0x4e>
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005f0a:	f816 3b01 	ldrb.w	r3, [r6], #1
 8005f0e:	e7f4      	b.n	8005efa <HAL_UART_Transmit+0x90>
      return  HAL_ERROR;
 8005f10:	2001      	movs	r0, #1
 8005f12:	e7e9      	b.n	8005ee8 <HAL_UART_Transmit+0x7e>
    return HAL_BUSY;
 8005f14:	2002      	movs	r0, #2
 8005f16:	e7e7      	b.n	8005ee8 <HAL_UART_Transmit+0x7e>

08005f18 <UART_CheckIdleState>:
{
 8005f18:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8005f1a:	4604      	mov	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005f1c:	2600      	movs	r6, #0
 8005f1e:	67c6      	str	r6, [r0, #124]	; 0x7c
  tickstart = HAL_GetTick();
 8005f20:	f7fc faea 	bl	80024f8 <HAL_GetTick>
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005f24:	6823      	ldr	r3, [r4, #0]
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	071a      	lsls	r2, r3, #28
  tickstart = HAL_GetTick();
 8005f2a:	4605      	mov	r5, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005f2c:	d415      	bmi.n	8005f5a <UART_CheckIdleState+0x42>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005f2e:	6823      	ldr	r3, [r4, #0]
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	075b      	lsls	r3, r3, #29
 8005f34:	d50a      	bpl.n	8005f4c <UART_CheckIdleState+0x34>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005f36:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005f3a:	9300      	str	r3, [sp, #0]
 8005f3c:	2200      	movs	r2, #0
 8005f3e:	462b      	mov	r3, r5
 8005f40:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8005f44:	4620      	mov	r0, r4
 8005f46:	f7ff ff61 	bl	8005e0c <UART_WaitOnFlagUntilTimeout>
 8005f4a:	b990      	cbnz	r0, 8005f72 <UART_CheckIdleState+0x5a>
  huart->gState = HAL_UART_STATE_READY;
 8005f4c:	2320      	movs	r3, #32
  __HAL_UNLOCK(huart);
 8005f4e:	2000      	movs	r0, #0
  huart->gState = HAL_UART_STATE_READY;
 8005f50:	6763      	str	r3, [r4, #116]	; 0x74
  __HAL_UNLOCK(huart);
 8005f52:	f884 0070 	strb.w	r0, [r4, #112]	; 0x70
  huart->RxState = HAL_UART_STATE_READY;
 8005f56:	67a3      	str	r3, [r4, #120]	; 0x78
  return HAL_OK;
 8005f58:	e00c      	b.n	8005f74 <UART_CheckIdleState+0x5c>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005f5a:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005f5e:	9300      	str	r3, [sp, #0]
 8005f60:	4632      	mov	r2, r6
 8005f62:	4603      	mov	r3, r0
 8005f64:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005f68:	4620      	mov	r0, r4
 8005f6a:	f7ff ff4f 	bl	8005e0c <UART_WaitOnFlagUntilTimeout>
 8005f6e:	2800      	cmp	r0, #0
 8005f70:	d0dd      	beq.n	8005f2e <UART_CheckIdleState+0x16>
      return HAL_TIMEOUT;
 8005f72:	2003      	movs	r0, #3
}
 8005f74:	b002      	add	sp, #8
 8005f76:	bd70      	pop	{r4, r5, r6, pc}

08005f78 <HAL_UART_Init>:
{
 8005f78:	b510      	push	{r4, lr}
  if (huart == NULL)
 8005f7a:	4604      	mov	r4, r0
 8005f7c:	b340      	cbz	r0, 8005fd0 <HAL_UART_Init+0x58>
  if (huart->gState == HAL_UART_STATE_RESET)
 8005f7e:	6f43      	ldr	r3, [r0, #116]	; 0x74
 8005f80:	b91b      	cbnz	r3, 8005f8a <HAL_UART_Init+0x12>
    huart->Lock = HAL_UNLOCKED;
 8005f82:	f880 3070 	strb.w	r3, [r0, #112]	; 0x70
    HAL_UART_MspInit(huart);
 8005f86:	f7fc f85f 	bl	8002048 <HAL_UART_MspInit>
  __HAL_UART_DISABLE(huart);
 8005f8a:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8005f8c:	2324      	movs	r3, #36	; 0x24
 8005f8e:	6763      	str	r3, [r4, #116]	; 0x74
  __HAL_UART_DISABLE(huart);
 8005f90:	6813      	ldr	r3, [r2, #0]
 8005f92:	f023 0301 	bic.w	r3, r3, #1
 8005f96:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005f98:	4620      	mov	r0, r4
 8005f9a:	f7ff fd4b 	bl	8005a34 <UART_SetConfig>
 8005f9e:	2801      	cmp	r0, #1
 8005fa0:	d016      	beq.n	8005fd0 <HAL_UART_Init+0x58>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005fa2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005fa4:	b113      	cbz	r3, 8005fac <HAL_UART_Init+0x34>
    UART_AdvFeatureConfig(huart);
 8005fa6:	4620      	mov	r0, r4
 8005fa8:	f7ff fedc 	bl	8005d64 <UART_AdvFeatureConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005fac:	6823      	ldr	r3, [r4, #0]
 8005fae:	685a      	ldr	r2, [r3, #4]
 8005fb0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005fb4:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005fb6:	689a      	ldr	r2, [r3, #8]
 8005fb8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005fbc:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 8005fbe:	681a      	ldr	r2, [r3, #0]
 8005fc0:	f042 0201 	orr.w	r2, r2, #1
  return (UART_CheckIdleState(huart));
 8005fc4:	4620      	mov	r0, r4
  __HAL_UART_ENABLE(huart);
 8005fc6:	601a      	str	r2, [r3, #0]
}
 8005fc8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return (UART_CheckIdleState(huart));
 8005fcc:	f7ff bfa4 	b.w	8005f18 <UART_CheckIdleState>
}
 8005fd0:	2001      	movs	r0, #1
 8005fd2:	bd10      	pop	{r4, pc}

08005fd4 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8005fd4:	4b0a      	ldr	r3, [pc, #40]	; (8006000 <USB_CoreReset+0x2c>)
  uint32_t count = 0U;

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8005fd6:	3b01      	subs	r3, #1
 8005fd8:	d101      	bne.n	8005fde <USB_CoreReset+0xa>
    {
      return HAL_TIMEOUT;
 8005fda:	2003      	movs	r0, #3
 8005fdc:	4770      	bx	lr
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005fde:	6902      	ldr	r2, [r0, #16]
 8005fe0:	2a00      	cmp	r2, #0
 8005fe2:	daf8      	bge.n	8005fd6 <USB_CoreReset+0x2>

  /* Core Soft Reset */
  count = 0U;
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8005fe4:	6903      	ldr	r3, [r0, #16]
 8005fe6:	4a06      	ldr	r2, [pc, #24]	; (8006000 <USB_CoreReset+0x2c>)
 8005fe8:	f043 0301 	orr.w	r3, r3, #1
 8005fec:	6103      	str	r3, [r0, #16]

  do
  {
    if (++count > 200000U)
 8005fee:	3a01      	subs	r2, #1
 8005ff0:	d0f3      	beq.n	8005fda <USB_CoreReset+0x6>
    {
      return HAL_TIMEOUT;
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8005ff2:	6903      	ldr	r3, [r0, #16]
 8005ff4:	f013 0301 	ands.w	r3, r3, #1
 8005ff8:	d1f9      	bne.n	8005fee <USB_CoreReset+0x1a>

  return HAL_OK;
 8005ffa:	4618      	mov	r0, r3
}
 8005ffc:	4770      	bx	lr
 8005ffe:	bf00      	nop
 8006000:	00030d41 	.word	0x00030d41

08006004 <USB_CoreInit>:
{
 8006004:	b084      	sub	sp, #16
 8006006:	b538      	push	{r3, r4, r5, lr}
 8006008:	ad05      	add	r5, sp, #20
 800600a:	e885 000e 	stmia.w	r5, {r1, r2, r3}
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800600e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006010:	2b01      	cmp	r3, #1
{
 8006012:	4604      	mov	r4, r0
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006014:	d119      	bne.n	800604a <USB_CoreInit+0x46>
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006016:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8006018:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800601c:	6383      	str	r3, [r0, #56]	; 0x38
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800601e:	68c3      	ldr	r3, [r0, #12]
 8006020:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8006024:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006028:	60c3      	str	r3, [r0, #12]
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800602a:	68c3      	ldr	r3, [r0, #12]
 800602c:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8006030:	60c3      	str	r3, [r0, #12]
    if (cfg.use_external_vbus == 1U)
 8006032:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006034:	2b01      	cmp	r3, #1
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8006036:	bf02      	ittt	eq
 8006038:	68c3      	ldreq	r3, [r0, #12]
 800603a:	f443 1380 	orreq.w	r3, r3, #1048576	; 0x100000
 800603e:	60c3      	streq	r3, [r0, #12]
}
 8006040:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006044:	b004      	add	sp, #16
    ret = USB_CoreReset(USBx);
 8006046:	f7ff bfc5 	b.w	8005fd4 <USB_CoreReset>
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800604a:	68c3      	ldr	r3, [r0, #12]
 800604c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006050:	60c3      	str	r3, [r0, #12]
    ret = USB_CoreReset(USBx);
 8006052:	f7ff ffbf 	bl	8005fd4 <USB_CoreReset>
    if (cfg.battery_charging_enable == 0U)
 8006056:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006058:	b93b      	cbnz	r3, 800606a <USB_CoreInit+0x66>
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800605a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800605c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006060:	63a3      	str	r3, [r4, #56]	; 0x38
}
 8006062:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006066:	b004      	add	sp, #16
 8006068:	4770      	bx	lr
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800606a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800606c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006070:	e7f6      	b.n	8006060 <USB_CoreInit+0x5c>
	...

08006074 <USB_SetTurnaroundTime>:
  if (speed == USBD_FS_SPEED)
 8006074:	2a02      	cmp	r2, #2
 8006076:	d158      	bne.n	800612a <USB_SetTurnaroundTime+0xb6>
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8006078:	4b2e      	ldr	r3, [pc, #184]	; (8006134 <USB_SetTurnaroundTime+0xc0>)
 800607a:	4a2f      	ldr	r2, [pc, #188]	; (8006138 <USB_SetTurnaroundTime+0xc4>)
 800607c:	440b      	add	r3, r1
 800607e:	4293      	cmp	r3, r2
 8006080:	d947      	bls.n	8006112 <USB_SetTurnaroundTime+0x9e>
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8006082:	4b2e      	ldr	r3, [pc, #184]	; (800613c <USB_SetTurnaroundTime+0xc8>)
 8006084:	4a2e      	ldr	r2, [pc, #184]	; (8006140 <USB_SetTurnaroundTime+0xcc>)
 8006086:	440b      	add	r3, r1
 8006088:	4293      	cmp	r3, r2
 800608a:	d944      	bls.n	8006116 <USB_SetTurnaroundTime+0xa2>
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800608c:	f5a1 0374 	sub.w	r3, r1, #15990784	; 0xf40000
 8006090:	4a2c      	ldr	r2, [pc, #176]	; (8006144 <USB_SetTurnaroundTime+0xd0>)
 8006092:	f5a3 5310 	sub.w	r3, r3, #9216	; 0x2400
 8006096:	4293      	cmp	r3, r2
 8006098:	d93f      	bls.n	800611a <USB_SetTurnaroundTime+0xa6>
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800609a:	f1a1 7383 	sub.w	r3, r1, #17170432	; 0x1060000
 800609e:	f502 32c3 	add.w	r2, r2, #99840	; 0x18600
 80060a2:	f5a3 43e7 	sub.w	r3, r3, #29568	; 0x7380
 80060a6:	32a0      	adds	r2, #160	; 0xa0
 80060a8:	4293      	cmp	r3, r2
 80060aa:	d938      	bls.n	800611e <USB_SetTurnaroundTime+0xaa>
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 80060ac:	4b26      	ldr	r3, [pc, #152]	; (8006148 <USB_SetTurnaroundTime+0xd4>)
 80060ae:	4a27      	ldr	r2, [pc, #156]	; (800614c <USB_SetTurnaroundTime+0xd8>)
 80060b0:	440b      	add	r3, r1
 80060b2:	4293      	cmp	r3, r2
 80060b4:	d935      	bls.n	8006122 <USB_SetTurnaroundTime+0xae>
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 80060b6:	4b26      	ldr	r3, [pc, #152]	; (8006150 <USB_SetTurnaroundTime+0xdc>)
 80060b8:	f502 2292 	add.w	r2, r2, #299008	; 0x49000
 80060bc:	440b      	add	r3, r1
 80060be:	f502 7278 	add.w	r2, r2, #992	; 0x3e0
 80060c2:	4293      	cmp	r3, r2
 80060c4:	d92f      	bls.n	8006126 <USB_SetTurnaroundTime+0xb2>
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 80060c6:	4b23      	ldr	r3, [pc, #140]	; (8006154 <USB_SetTurnaroundTime+0xe0>)
 80060c8:	f502 22c3 	add.w	r2, r2, #399360	; 0x61800
 80060cc:	440b      	add	r3, r1
 80060ce:	f502 7220 	add.w	r2, r2, #640	; 0x280
 80060d2:	4293      	cmp	r3, r2
 80060d4:	d929      	bls.n	800612a <USB_SetTurnaroundTime+0xb6>
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 80060d6:	f1a1 73b7 	sub.w	r3, r1, #23986176	; 0x16e0000
 80060da:	f502 12b7 	add.w	r2, r2, #1499136	; 0x16e000
 80060de:	f5a3 5358 	sub.w	r3, r3, #13824	; 0x3600
 80060e2:	f502 7258 	add.w	r2, r2, #864	; 0x360
 80060e6:	4293      	cmp	r3, r2
 80060e8:	d921      	bls.n	800612e <USB_SetTurnaroundTime+0xba>
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 80060ea:	4b1b      	ldr	r3, [pc, #108]	; (8006158 <USB_SetTurnaroundTime+0xe4>)
      UsbTrd = 0x6U;
 80060ec:	f502 2212 	add.w	r2, r2, #598016	; 0x92000
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 80060f0:	440b      	add	r3, r1
      UsbTrd = 0x6U;
 80060f2:	f502 62f8 	add.w	r2, r2, #1984	; 0x7c0
 80060f6:	4293      	cmp	r3, r2
 80060f8:	bf94      	ite	ls
 80060fa:	2307      	movls	r3, #7
 80060fc:	2306      	movhi	r3, #6
  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 80060fe:	68c2      	ldr	r2, [r0, #12]
 8006100:	f422 5270 	bic.w	r2, r2, #15360	; 0x3c00
 8006104:	60c2      	str	r2, [r0, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8006106:	68c2      	ldr	r2, [r0, #12]
 8006108:	ea42 2383 	orr.w	r3, r2, r3, lsl #10
 800610c:	60c3      	str	r3, [r0, #12]
}
 800610e:	2000      	movs	r0, #0
 8006110:	4770      	bx	lr
      UsbTrd = 0xFU;
 8006112:	230f      	movs	r3, #15
 8006114:	e7f3      	b.n	80060fe <USB_SetTurnaroundTime+0x8a>
      UsbTrd = 0xEU;
 8006116:	230e      	movs	r3, #14
 8006118:	e7f1      	b.n	80060fe <USB_SetTurnaroundTime+0x8a>
      UsbTrd = 0xDU;
 800611a:	230d      	movs	r3, #13
 800611c:	e7ef      	b.n	80060fe <USB_SetTurnaroundTime+0x8a>
      UsbTrd = 0xCU;
 800611e:	230c      	movs	r3, #12
 8006120:	e7ed      	b.n	80060fe <USB_SetTurnaroundTime+0x8a>
      UsbTrd = 0xBU;
 8006122:	230b      	movs	r3, #11
 8006124:	e7eb      	b.n	80060fe <USB_SetTurnaroundTime+0x8a>
      UsbTrd = 0xAU;
 8006126:	230a      	movs	r3, #10
 8006128:	e7e9      	b.n	80060fe <USB_SetTurnaroundTime+0x8a>
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800612a:	2309      	movs	r3, #9
 800612c:	e7e7      	b.n	80060fe <USB_SetTurnaroundTime+0x8a>
      UsbTrd = 0x8U;
 800612e:	2308      	movs	r3, #8
 8006130:	e7e5      	b.n	80060fe <USB_SetTurnaroundTime+0x8a>
 8006132:	bf00      	nop
 8006134:	ff275340 	.word	0xff275340
 8006138:	000c34ff 	.word	0x000c34ff
 800613c:	ff1b1e40 	.word	0xff1b1e40
 8006140:	000f423f 	.word	0x000f423f
 8006144:	00124f7f 	.word	0x00124f7f
 8006148:	fee5b660 	.word	0xfee5b660
 800614c:	0016e35f 	.word	0x0016e35f
 8006150:	feced300 	.word	0xfeced300
 8006154:	feb35bc0 	.word	0xfeb35bc0
 8006158:	fe5954e0 	.word	0xfe5954e0

0800615c <USB_EnableGlobalInt>:
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800615c:	6883      	ldr	r3, [r0, #8]
 800615e:	f043 0301 	orr.w	r3, r3, #1
 8006162:	6083      	str	r3, [r0, #8]
}
 8006164:	2000      	movs	r0, #0
 8006166:	4770      	bx	lr

08006168 <USB_DisableGlobalInt>:
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8006168:	6883      	ldr	r3, [r0, #8]
 800616a:	f023 0301 	bic.w	r3, r3, #1
 800616e:	6083      	str	r3, [r0, #8]
}
 8006170:	2000      	movs	r0, #0
 8006172:	4770      	bx	lr

08006174 <USB_SetCurrentMode>:
{
 8006174:	b508      	push	{r3, lr}
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8006176:	68c3      	ldr	r3, [r0, #12]
  if (mode == USB_HOST_MODE)
 8006178:	2901      	cmp	r1, #1
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800617a:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 800617e:	60c3      	str	r3, [r0, #12]
  if (mode == USB_HOST_MODE)
 8006180:	d108      	bne.n	8006194 <USB_SetCurrentMode+0x20>
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8006182:	68c3      	ldr	r3, [r0, #12]
 8006184:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8006188:	60c3      	str	r3, [r0, #12]
  HAL_Delay(50U);
 800618a:	2032      	movs	r0, #50	; 0x32
 800618c:	f7fc f9ba 	bl	8002504 <HAL_Delay>
  return HAL_OK;
 8006190:	2000      	movs	r0, #0
 8006192:	bd08      	pop	{r3, pc}
  else if (mode == USB_DEVICE_MODE)
 8006194:	b919      	cbnz	r1, 800619e <USB_SetCurrentMode+0x2a>
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8006196:	68c3      	ldr	r3, [r0, #12]
 8006198:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800619c:	e7f4      	b.n	8006188 <USB_SetCurrentMode+0x14>
    return HAL_ERROR;
 800619e:	2001      	movs	r0, #1
}
 80061a0:	bd08      	pop	{r3, pc}
	...

080061a4 <USB_FlushTxFifo>:
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80061a4:	0189      	lsls	r1, r1, #6
 80061a6:	f041 0120 	orr.w	r1, r1, #32
 80061aa:	4a06      	ldr	r2, [pc, #24]	; (80061c4 <USB_FlushTxFifo+0x20>)
 80061ac:	6101      	str	r1, [r0, #16]
    if (++count > 200000U)
 80061ae:	3a01      	subs	r2, #1
 80061b0:	d005      	beq.n	80061be <USB_FlushTxFifo+0x1a>
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80061b2:	6903      	ldr	r3, [r0, #16]
 80061b4:	f013 0320 	ands.w	r3, r3, #32
 80061b8:	d1f9      	bne.n	80061ae <USB_FlushTxFifo+0xa>
  return HAL_OK;
 80061ba:	4618      	mov	r0, r3
 80061bc:	4770      	bx	lr
      return HAL_TIMEOUT;
 80061be:	2003      	movs	r0, #3
}
 80061c0:	4770      	bx	lr
 80061c2:	bf00      	nop
 80061c4:	00030d41 	.word	0x00030d41

080061c8 <USB_FlushRxFifo>:
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80061c8:	2310      	movs	r3, #16
 80061ca:	4a06      	ldr	r2, [pc, #24]	; (80061e4 <USB_FlushRxFifo+0x1c>)
 80061cc:	6103      	str	r3, [r0, #16]
    if (++count > 200000U)
 80061ce:	3a01      	subs	r2, #1
 80061d0:	d005      	beq.n	80061de <USB_FlushRxFifo+0x16>
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80061d2:	6903      	ldr	r3, [r0, #16]
 80061d4:	f013 0310 	ands.w	r3, r3, #16
 80061d8:	d1f9      	bne.n	80061ce <USB_FlushRxFifo+0x6>
  return HAL_OK;
 80061da:	4618      	mov	r0, r3
 80061dc:	4770      	bx	lr
      return HAL_TIMEOUT;
 80061de:	2003      	movs	r0, #3
}
 80061e0:	4770      	bx	lr
 80061e2:	bf00      	nop
 80061e4:	00030d41 	.word	0x00030d41

080061e8 <USB_SetDevSpeed>:
  USBx_DEVICE->DCFG |= speed;
 80061e8:	f8d0 3800 	ldr.w	r3, [r0, #2048]	; 0x800
 80061ec:	4319      	orrs	r1, r3
 80061ee:	f8c0 1800 	str.w	r1, [r0, #2048]	; 0x800
}
 80061f2:	2000      	movs	r0, #0
 80061f4:	4770      	bx	lr
	...

080061f8 <USB_DevInit>:
{
 80061f8:	b084      	sub	sp, #16
 80061fa:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80061fe:	4604      	mov	r4, r0
 8006200:	a809      	add	r0, sp, #36	; 0x24
 8006202:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  for (i = 0U; i < 15U; i++)
 8006206:	2300      	movs	r3, #0
 8006208:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 800620a:	460f      	mov	r7, r1
    USBx->DIEPTXF[i] = 0U;
 800620c:	4619      	mov	r1, r3
 800620e:	f103 0240 	add.w	r2, r3, #64	; 0x40
 8006212:	eb04 0282 	add.w	r2, r4, r2, lsl #2
  for (i = 0U; i < 15U; i++)
 8006216:	3301      	adds	r3, #1
 8006218:	2b0f      	cmp	r3, #15
    USBx->DIEPTXF[i] = 0U;
 800621a:	6051      	str	r1, [r2, #4]
  for (i = 0U; i < 15U; i++)
 800621c:	d1f7      	bne.n	800620e <USB_DevInit+0x16>
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800621e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
  if (cfg.vbus_sensing_enable == 0U)
 8006220:	2e00      	cmp	r6, #0
 8006222:	d162      	bne.n	80062ea <USB_DevInit+0xf2>
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8006224:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006228:	63a3      	str	r3, [r4, #56]	; 0x38
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800622a:	6823      	ldr	r3, [r4, #0]
 800622c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006230:	6023      	str	r3, [r4, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8006232:	6823      	ldr	r3, [r4, #0]
 8006234:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006238:	6023      	str	r3, [r4, #0]
  USBx_PCGCCTL = 0U;
 800623a:	2300      	movs	r3, #0
 800623c:	f8c4 3e00 	str.w	r3, [r4, #3584]	; 0xe00
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8006240:	f8d4 3800 	ldr.w	r3, [r4, #2048]	; 0x800
 8006244:	f8c4 3800 	str.w	r3, [r4, #2048]	; 0x800
  (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8006248:	2103      	movs	r1, #3
 800624a:	4620      	mov	r0, r4
 800624c:	f7ff ffcc 	bl	80061e8 <USB_SetDevSpeed>
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8006250:	2110      	movs	r1, #16
 8006252:	4620      	mov	r0, r4
 8006254:	f7ff ffa6 	bl	80061a4 <USB_FlushTxFifo>
 8006258:	4601      	mov	r1, r0
  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800625a:	4620      	mov	r0, r4
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800625c:	f504 6500 	add.w	r5, r4, #2048	; 0x800
  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8006260:	f7ff ffb2 	bl	80061c8 <USB_FlushRxFifo>
 8006264:	2800      	cmp	r0, #0
 8006266:	d144      	bne.n	80062f2 <USB_DevInit+0xfa>
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8006268:	1c08      	adds	r0, r1, #0
 800626a:	bf18      	it	ne
 800626c:	2001      	movne	r0, #1
  USBx_DEVICE->DIEPMSK = 0U;
 800626e:	2300      	movs	r3, #0
 8006270:	612b      	str	r3, [r5, #16]
 8006272:	f504 6210 	add.w	r2, r4, #2304	; 0x900
  USBx_DEVICE->DOEPMSK = 0U;
 8006276:	616b      	str	r3, [r5, #20]
      USBx_INEP(i)->DIEPCTL = 0U;
 8006278:	4619      	mov	r1, r3
  USBx_DEVICE->DAINTMSK = 0U;
 800627a:	61eb      	str	r3, [r5, #28]
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800627c:	f04f 4e90 	mov.w	lr, #1207959552	; 0x48000000
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8006280:	f04f 6c00 	mov.w	ip, #134217728	; 0x8000000
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8006284:	f64f 387f 	movw	r8, #64383	; 0xfb7f
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006288:	42bb      	cmp	r3, r7
 800628a:	d134      	bne.n	80062f6 <USB_DevInit+0xfe>
 800628c:	2100      	movs	r1, #0
 800628e:	f504 6230 	add.w	r2, r4, #2816	; 0xb00
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8006292:	460f      	mov	r7, r1
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8006294:	f04f 4e90 	mov.w	lr, #1207959552	; 0x48000000
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8006298:	f04f 6c00 	mov.w	ip, #134217728	; 0x8000000
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800629c:	f64f 387f 	movw	r8, #64383	; 0xfb7f
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80062a0:	428b      	cmp	r3, r1
 80062a2:	d13b      	bne.n	800631c <USB_DevInit+0x124>
  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80062a4:	692b      	ldr	r3, [r5, #16]
 80062a6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80062aa:	612b      	str	r3, [r5, #16]
  USBx->GINTMSK = 0U;
 80062ac:	2300      	movs	r3, #0
 80062ae:	61a3      	str	r3, [r4, #24]
  USBx->GINTSTS = 0xBFFFFFFFU;
 80062b0:	f06f 4380 	mvn.w	r3, #1073741824	; 0x40000000
 80062b4:	6163      	str	r3, [r4, #20]
  USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80062b6:	69a3      	ldr	r3, [r4, #24]
 80062b8:	f043 0310 	orr.w	r3, r3, #16
 80062bc:	61a3      	str	r3, [r4, #24]
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80062be:	69a2      	ldr	r2, [r4, #24]
 80062c0:	4b20      	ldr	r3, [pc, #128]	; (8006344 <USB_DevInit+0x14c>)
 80062c2:	4313      	orrs	r3, r2
 80062c4:	61a3      	str	r3, [r4, #24]
  if (cfg.Sof_enable != 0U)
 80062c6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80062c8:	b11b      	cbz	r3, 80062d2 <USB_DevInit+0xda>
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80062ca:	69a3      	ldr	r3, [r4, #24]
 80062cc:	f043 0308 	orr.w	r3, r3, #8
 80062d0:	61a3      	str	r3, [r4, #24]
  if (cfg.vbus_sensing_enable == 1U)
 80062d2:	2e01      	cmp	r6, #1
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80062d4:	bf01      	itttt	eq
 80062d6:	69a3      	ldreq	r3, [r4, #24]
 80062d8:	f043 4380 	orreq.w	r3, r3, #1073741824	; 0x40000000
 80062dc:	f043 0304 	orreq.w	r3, r3, #4
 80062e0:	61a3      	streq	r3, [r4, #24]
}
 80062e2:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80062e6:	b004      	add	sp, #16
 80062e8:	4770      	bx	lr
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 80062ea:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80062ee:	63a3      	str	r3, [r4, #56]	; 0x38
 80062f0:	e7a3      	b.n	800623a <USB_DevInit+0x42>
 80062f2:	2001      	movs	r0, #1
 80062f4:	e7bb      	b.n	800626e <USB_DevInit+0x76>
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80062f6:	f8d2 9000 	ldr.w	r9, [r2]
 80062fa:	f1b9 0f00 	cmp.w	r9, #0
 80062fe:	da0b      	bge.n	8006318 <USB_DevInit+0x120>
      if (i == 0U)
 8006300:	b93b      	cbnz	r3, 8006312 <USB_DevInit+0x11a>
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8006302:	f8c2 c000 	str.w	ip, [r2]
    USBx_INEP(i)->DIEPTSIZ = 0U;
 8006306:	6111      	str	r1, [r2, #16]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006308:	3301      	adds	r3, #1
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800630a:	f8c2 8008 	str.w	r8, [r2, #8]
 800630e:	3220      	adds	r2, #32
 8006310:	e7ba      	b.n	8006288 <USB_DevInit+0x90>
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8006312:	f8c2 e000 	str.w	lr, [r2]
 8006316:	e7f6      	b.n	8006306 <USB_DevInit+0x10e>
      USBx_INEP(i)->DIEPCTL = 0U;
 8006318:	6011      	str	r1, [r2, #0]
 800631a:	e7f4      	b.n	8006306 <USB_DevInit+0x10e>
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800631c:	f8d2 9000 	ldr.w	r9, [r2]
 8006320:	f1b9 0f00 	cmp.w	r9, #0
 8006324:	da0b      	bge.n	800633e <USB_DevInit+0x146>
      if (i == 0U)
 8006326:	b939      	cbnz	r1, 8006338 <USB_DevInit+0x140>
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8006328:	f8c2 c000 	str.w	ip, [r2]
    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800632c:	6117      	str	r7, [r2, #16]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800632e:	3101      	adds	r1, #1
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8006330:	f8c2 8008 	str.w	r8, [r2, #8]
 8006334:	3220      	adds	r2, #32
 8006336:	e7b3      	b.n	80062a0 <USB_DevInit+0xa8>
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8006338:	f8c2 e000 	str.w	lr, [r2]
 800633c:	e7f6      	b.n	800632c <USB_DevInit+0x134>
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800633e:	6017      	str	r7, [r2, #0]
 8006340:	e7f4      	b.n	800632c <USB_DevInit+0x134>
 8006342:	bf00      	nop
 8006344:	803c3800 	.word	0x803c3800

08006348 <USB_GetDevSpeed>:
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8006348:	f8d0 3808 	ldr.w	r3, [r0, #2056]	; 0x808
  if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800634c:	f013 0f02 	tst.w	r3, #2
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8006350:	f500 6000 	add.w	r0, r0, #2048	; 0x800
}
 8006354:	bf14      	ite	ne
 8006356:	2002      	movne	r0, #2
 8006358:	200f      	moveq	r0, #15
 800635a:	4770      	bx	lr

0800635c <USB_ActivateEndpoint>:
{
 800635c:	b570      	push	{r4, r5, r6, lr}
  if (ep->is_in == 1U)
 800635e:	784a      	ldrb	r2, [r1, #1]
  uint32_t epnum = (uint32_t)ep->num;
 8006360:	780c      	ldrb	r4, [r1, #0]
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8006362:	f8d0 681c 	ldr.w	r6, [r0, #2076]	; 0x81c
 8006366:	f500 6300 	add.w	r3, r0, #2048	; 0x800
  if (ep->is_in == 1U)
 800636a:	2a01      	cmp	r2, #1
 800636c:	f004 050f 	and.w	r5, r4, #15
 8006370:	d11b      	bne.n	80063aa <USB_ActivateEndpoint+0x4e>
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8006372:	40aa      	lsls	r2, r5
 8006374:	4332      	orrs	r2, r6
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8006376:	eb00 1044 	add.w	r0, r0, r4, lsl #5
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800637a:	61da      	str	r2, [r3, #28]
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800637c:	f8d0 3900 	ldr.w	r3, [r0, #2304]	; 0x900
 8006380:	041a      	lsls	r2, r3, #16
 8006382:	d410      	bmi.n	80063a6 <USB_ActivateEndpoint+0x4a>
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8006384:	688b      	ldr	r3, [r1, #8]
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8006386:	78c9      	ldrb	r1, [r1, #3]
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8006388:	f8d0 2900 	ldr.w	r2, [r0, #2304]	; 0x900
 800638c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006390:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006394:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006398:	ea43 4381 	orr.w	r3, r3, r1, lsl #18
 800639c:	ea43 5384 	orr.w	r3, r3, r4, lsl #22
 80063a0:	4313      	orrs	r3, r2
 80063a2:	f8c0 3900 	str.w	r3, [r0, #2304]	; 0x900
}
 80063a6:	2000      	movs	r0, #0
 80063a8:	bd70      	pop	{r4, r5, r6, pc}
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 80063aa:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80063ae:	40aa      	lsls	r2, r5
 80063b0:	4332      	orrs	r2, r6
    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 80063b2:	eb00 1044 	add.w	r0, r0, r4, lsl #5
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 80063b6:	61da      	str	r2, [r3, #28]
    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 80063b8:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	; 0xb00
 80063bc:	041b      	lsls	r3, r3, #16
 80063be:	d4f2      	bmi.n	80063a6 <USB_ActivateEndpoint+0x4a>
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80063c0:	688b      	ldr	r3, [r1, #8]
                                    ((uint32_t)ep->type << 18) |
 80063c2:	78c9      	ldrb	r1, [r1, #3]
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80063c4:	f8d0 2b00 	ldr.w	r2, [r0, #2816]	; 0xb00
 80063c8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80063cc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80063d0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80063d4:	ea43 4381 	orr.w	r3, r3, r1, lsl #18
 80063d8:	4313      	orrs	r3, r2
 80063da:	f8c0 3b00 	str.w	r3, [r0, #2816]	; 0xb00
 80063de:	e7e2      	b.n	80063a6 <USB_ActivateEndpoint+0x4a>

080063e0 <USB_DeactivateEndpoint>:
{
 80063e0:	b530      	push	{r4, r5, lr}
  if (ep->is_in == 1U)
 80063e2:	784b      	ldrb	r3, [r1, #1]
  uint32_t epnum = (uint32_t)ep->num;
 80063e4:	780c      	ldrb	r4, [r1, #0]
    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80063e6:	f8d0 183c 	ldr.w	r1, [r0, #2108]	; 0x83c
 80063ea:	f500 6200 	add.w	r2, r0, #2048	; 0x800
  if (ep->is_in == 1U)
 80063ee:	2b01      	cmp	r3, #1
 80063f0:	f004 050f 	and.w	r5, r4, #15
 80063f4:	d110      	bne.n	8006418 <USB_DeactivateEndpoint+0x38>
    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80063f6:	40ab      	lsls	r3, r5
 80063f8:	43db      	mvns	r3, r3
 80063fa:	4019      	ands	r1, r3
 80063fc:	63d1      	str	r1, [r2, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80063fe:	69d1      	ldr	r1, [r2, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8006400:	eb00 1044 	add.w	r0, r0, r4, lsl #5
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8006404:	400b      	ands	r3, r1
 8006406:	61d3      	str	r3, [r2, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8006408:	f8d0 2900 	ldr.w	r2, [r0, #2304]	; 0x900
 800640c:	4b0b      	ldr	r3, [pc, #44]	; (800643c <USB_DeactivateEndpoint+0x5c>)
 800640e:	4013      	ands	r3, r2
 8006410:	f8c0 3900 	str.w	r3, [r0, #2304]	; 0x900
}
 8006414:	2000      	movs	r0, #0
 8006416:	bd30      	pop	{r4, r5, pc}
    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8006418:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800641c:	40ab      	lsls	r3, r5
 800641e:	43db      	mvns	r3, r3
 8006420:	4019      	ands	r1, r3
 8006422:	63d1      	str	r1, [r2, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8006424:	69d1      	ldr	r1, [r2, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8006426:	eb00 1044 	add.w	r0, r0, r4, lsl #5
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800642a:	400b      	ands	r3, r1
 800642c:	61d3      	str	r3, [r2, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800642e:	f8d0 2b00 	ldr.w	r2, [r0, #2816]	; 0xb00
 8006432:	4b03      	ldr	r3, [pc, #12]	; (8006440 <USB_DeactivateEndpoint+0x60>)
 8006434:	4013      	ands	r3, r2
 8006436:	f8c0 3b00 	str.w	r3, [r0, #2816]	; 0xb00
 800643a:	e7eb      	b.n	8006414 <USB_DeactivateEndpoint+0x34>
 800643c:	ec337800 	.word	0xec337800
 8006440:	eff37800 	.word	0xeff37800

08006444 <USB_EP0StartXfer>:
{
 8006444:	b570      	push	{r4, r5, r6, lr}
  if (ep->is_in == 1U)
 8006446:	784b      	ldrb	r3, [r1, #1]
  uint32_t epnum = (uint32_t)ep->num;
 8006448:	780a      	ldrb	r2, [r1, #0]
 800644a:	694d      	ldr	r5, [r1, #20]
 800644c:	4e35      	ldr	r6, [pc, #212]	; (8006524 <USB_EP0StartXfer+0xe0>)
  if (ep->is_in == 1U)
 800644e:	2b01      	cmp	r3, #1
 8006450:	f04f 0320 	mov.w	r3, #32
 8006454:	d145      	bne.n	80064e2 <USB_EP0StartXfer+0x9e>
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006456:	fb13 0302 	smlabb	r3, r3, r2, r0
    if (ep->xfer_len == 0U)
 800645a:	bb45      	cbnz	r5, 80064ae <USB_EP0StartXfer+0x6a>
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800645c:	f8d3 4910 	ldr.w	r4, [r3, #2320]	; 0x910
 8006460:	f024 54ff 	bic.w	r4, r4, #534773760	; 0x1fe00000
 8006464:	f424 14c0 	bic.w	r4, r4, #1572864	; 0x180000
 8006468:	f8c3 4910 	str.w	r4, [r3, #2320]	; 0x910
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800646c:	f8d3 4910 	ldr.w	r4, [r3, #2320]	; 0x910
 8006470:	f444 2400 	orr.w	r4, r4, #524288	; 0x80000
 8006474:	f8c3 4910 	str.w	r4, [r3, #2320]	; 0x910
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006478:	f8d3 4910 	ldr.w	r4, [r3, #2320]	; 0x910
 800647c:	4026      	ands	r6, r4
 800647e:	f8c3 6910 	str.w	r6, [r3, #2320]	; 0x910
    USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8006482:	eb00 1242 	add.w	r2, r0, r2, lsl #5
    if (ep->xfer_len > 0U)
 8006486:	694b      	ldr	r3, [r1, #20]
    USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8006488:	f8d2 4900 	ldr.w	r4, [r2, #2304]	; 0x900
 800648c:	f044 4404 	orr.w	r4, r4, #2214592512	; 0x84000000
 8006490:	f8c2 4900 	str.w	r4, [r2, #2304]	; 0x900
    if (ep->xfer_len > 0U)
 8006494:	b14b      	cbz	r3, 80064aa <USB_EP0StartXfer+0x66>
      USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8006496:	780a      	ldrb	r2, [r1, #0]
 8006498:	f8d0 3834 	ldr.w	r3, [r0, #2100]	; 0x834
 800649c:	f002 010f 	and.w	r1, r2, #15
 80064a0:	2201      	movs	r2, #1
 80064a2:	408a      	lsls	r2, r1
 80064a4:	431a      	orrs	r2, r3
 80064a6:	f8c0 2834 	str.w	r2, [r0, #2100]	; 0x834
}
 80064aa:	2000      	movs	r0, #0
 80064ac:	bd70      	pop	{r4, r5, r6, pc}
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80064ae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80064b2:	691c      	ldr	r4, [r3, #16]
 80064b4:	4026      	ands	r6, r4
 80064b6:	611e      	str	r6, [r3, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80064b8:	691c      	ldr	r4, [r3, #16]
 80064ba:	f024 54ff 	bic.w	r4, r4, #534773760	; 0x1fe00000
 80064be:	f424 14c0 	bic.w	r4, r4, #1572864	; 0x180000
 80064c2:	611c      	str	r4, [r3, #16]
      if (ep->xfer_len > ep->maxpacket)
 80064c4:	688c      	ldr	r4, [r1, #8]
 80064c6:	42a5      	cmp	r5, r4
        ep->xfer_len = ep->maxpacket;
 80064c8:	bf88      	it	hi
 80064ca:	614c      	strhi	r4, [r1, #20]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80064cc:	691c      	ldr	r4, [r3, #16]
 80064ce:	f444 2400 	orr.w	r4, r4, #524288	; 0x80000
 80064d2:	611c      	str	r4, [r3, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80064d4:	694c      	ldr	r4, [r1, #20]
 80064d6:	691d      	ldr	r5, [r3, #16]
 80064d8:	f3c4 0412 	ubfx	r4, r4, #0, #19
 80064dc:	432c      	orrs	r4, r5
 80064de:	611c      	str	r4, [r3, #16]
 80064e0:	e7cf      	b.n	8006482 <USB_EP0StartXfer+0x3e>
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80064e2:	fb13 0002 	smlabb	r0, r3, r2, r0
 80064e6:	f500 6330 	add.w	r3, r0, #2816	; 0xb00
 80064ea:	691a      	ldr	r2, [r3, #16]
 80064ec:	4032      	ands	r2, r6
 80064ee:	611a      	str	r2, [r3, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80064f0:	691a      	ldr	r2, [r3, #16]
 80064f2:	f022 52ff 	bic.w	r2, r2, #534773760	; 0x1fe00000
 80064f6:	f422 12c0 	bic.w	r2, r2, #1572864	; 0x180000
 80064fa:	611a      	str	r2, [r3, #16]
 80064fc:	688a      	ldr	r2, [r1, #8]
    if (ep->xfer_len > 0U)
 80064fe:	b105      	cbz	r5, 8006502 <USB_EP0StartXfer+0xbe>
      ep->xfer_len = ep->maxpacket;
 8006500:	614a      	str	r2, [r1, #20]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8006502:	6919      	ldr	r1, [r3, #16]
 8006504:	f441 2100 	orr.w	r1, r1, #524288	; 0x80000
 8006508:	6119      	str	r1, [r3, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 800650a:	6919      	ldr	r1, [r3, #16]
 800650c:	f3c2 0212 	ubfx	r2, r2, #0, #19
 8006510:	430a      	orrs	r2, r1
 8006512:	611a      	str	r2, [r3, #16]
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8006514:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	; 0xb00
 8006518:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800651c:	f8c0 3b00 	str.w	r3, [r0, #2816]	; 0xb00
 8006520:	e7c3      	b.n	80064aa <USB_EP0StartXfer+0x66>
 8006522:	bf00      	nop
 8006524:	fff80000 	.word	0xfff80000

08006528 <USB_WritePacket>:
  count32b = ((uint32_t)len + 3U) / 4U;
 8006528:	3303      	adds	r3, #3
    USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800652a:	eb00 3202 	add.w	r2, r0, r2, lsl #12
 800652e:	f023 0303 	bic.w	r3, r3, #3
 8006532:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8006536:	440b      	add	r3, r1
  for (i = 0U; i < count32b; i++)
 8006538:	4299      	cmp	r1, r3
 800653a:	d101      	bne.n	8006540 <USB_WritePacket+0x18>
}
 800653c:	2000      	movs	r0, #0
 800653e:	4770      	bx	lr
    USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8006540:	f851 0b04 	ldr.w	r0, [r1], #4
 8006544:	6010      	str	r0, [r2, #0]
 8006546:	e7f7      	b.n	8006538 <USB_WritePacket+0x10>

08006548 <USB_EPStartXfer>:
{
 8006548:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (ep->is_in == 1U)
 800654a:	784b      	ldrb	r3, [r1, #1]
  uint32_t epnum = (uint32_t)ep->num;
 800654c:	780d      	ldrb	r5, [r1, #0]
 800654e:	4e58      	ldr	r6, [pc, #352]	; (80066b0 <USB_EPStartXfer+0x168>)
  if (ep->is_in == 1U)
 8006550:	2b01      	cmp	r3, #1
 8006552:	f04f 0220 	mov.w	r2, #32
 8006556:	694b      	ldr	r3, [r1, #20]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006558:	fb12 0205 	smlabb	r2, r2, r5, r0
  if (ep->is_in == 1U)
 800655c:	d16a      	bne.n	8006634 <USB_EPStartXfer+0xec>
    if (ep->xfer_len == 0U)
 800655e:	bb3b      	cbnz	r3, 80065b0 <USB_EPStartXfer+0x68>
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006560:	f502 6410 	add.w	r4, r2, #2304	; 0x900
 8006564:	f8d2 2910 	ldr.w	r2, [r2, #2320]	; 0x910
 8006568:	f022 52ff 	bic.w	r2, r2, #534773760	; 0x1fe00000
 800656c:	f422 12c0 	bic.w	r2, r2, #1572864	; 0x180000
 8006570:	6122      	str	r2, [r4, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8006572:	6922      	ldr	r2, [r4, #16]
 8006574:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 8006578:	6122      	str	r2, [r4, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800657a:	6922      	ldr	r2, [r4, #16]
 800657c:	4016      	ands	r6, r2
 800657e:	6126      	str	r6, [r4, #16]
    USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8006580:	eb00 1245 	add.w	r2, r0, r5, lsl #5
 8006584:	f8d2 4900 	ldr.w	r4, [r2, #2304]	; 0x900
 8006588:	f044 4404 	orr.w	r4, r4, #2214592512	; 0x84000000
 800658c:	f8c2 4900 	str.w	r4, [r2, #2304]	; 0x900
    if (ep->type != EP_TYPE_ISOC)
 8006590:	78cc      	ldrb	r4, [r1, #3]
 8006592:	2c01      	cmp	r4, #1
 8006594:	d03b      	beq.n	800660e <USB_EPStartXfer+0xc6>
      if (ep->xfer_len > 0U)
 8006596:	b14b      	cbz	r3, 80065ac <USB_EPStartXfer+0x64>
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8006598:	780b      	ldrb	r3, [r1, #0]
 800659a:	f8d0 4834 	ldr.w	r4, [r0, #2100]	; 0x834
 800659e:	f003 020f 	and.w	r2, r3, #15
 80065a2:	2301      	movs	r3, #1
 80065a4:	4093      	lsls	r3, r2
 80065a6:	4323      	orrs	r3, r4
 80065a8:	f8c0 3834 	str.w	r3, [r0, #2100]	; 0x834
}
 80065ac:	2000      	movs	r0, #0
 80065ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80065b0:	f8d2 4910 	ldr.w	r4, [r2, #2320]	; 0x910
 80065b4:	4034      	ands	r4, r6
 80065b6:	f8c2 4910 	str.w	r4, [r2, #2320]	; 0x910
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80065ba:	f8d2 4910 	ldr.w	r4, [r2, #2320]	; 0x910
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 80065be:	688e      	ldr	r6, [r1, #8]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80065c0:	f024 54ff 	bic.w	r4, r4, #534773760	; 0x1fe00000
 80065c4:	f424 14c0 	bic.w	r4, r4, #1572864	; 0x180000
 80065c8:	f8c2 4910 	str.w	r4, [r2, #2320]	; 0x910
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 80065cc:	199c      	adds	r4, r3, r6
 80065ce:	3c01      	subs	r4, #1
 80065d0:	fbb4 f6f6 	udiv	r6, r4, r6
 80065d4:	4c37      	ldr	r4, [pc, #220]	; (80066b4 <USB_EPStartXfer+0x16c>)
 80065d6:	f8d2 7910 	ldr.w	r7, [r2, #2320]	; 0x910
 80065da:	ea04 44c6 	and.w	r4, r4, r6, lsl #19
 80065de:	433c      	orrs	r4, r7
 80065e0:	f8c2 4910 	str.w	r4, [r2, #2320]	; 0x910
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80065e4:	f8d2 6910 	ldr.w	r6, [r2, #2320]	; 0x910
 80065e8:	f3c3 0412 	ubfx	r4, r3, #0, #19
 80065ec:	4334      	orrs	r4, r6
 80065ee:	f8c2 4910 	str.w	r4, [r2, #2320]	; 0x910
      if (ep->type == EP_TYPE_ISOC)
 80065f2:	78cc      	ldrb	r4, [r1, #3]
 80065f4:	2c01      	cmp	r4, #1
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80065f6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
      if (ep->type == EP_TYPE_ISOC)
 80065fa:	d1c1      	bne.n	8006580 <USB_EPStartXfer+0x38>
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 80065fc:	6914      	ldr	r4, [r2, #16]
 80065fe:	f024 44c0 	bic.w	r4, r4, #1610612736	; 0x60000000
 8006602:	6114      	str	r4, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8006604:	6914      	ldr	r4, [r2, #16]
 8006606:	f044 5400 	orr.w	r4, r4, #536870912	; 0x20000000
 800660a:	6114      	str	r4, [r2, #16]
 800660c:	e7b8      	b.n	8006580 <USB_EPStartXfer+0x38>
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800660e:	f8d0 4808 	ldr.w	r4, [r0, #2056]	; 0x808
 8006612:	f414 7f80 	tst.w	r4, #256	; 0x100
        USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8006616:	f8d2 4900 	ldr.w	r4, [r2, #2304]	; 0x900
 800661a:	bf0c      	ite	eq
 800661c:	f044 5400 	orreq.w	r4, r4, #536870912	; 0x20000000
        USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8006620:	f044 5480 	orrne.w	r4, r4, #268435456	; 0x10000000
 8006624:	f8c2 4900 	str.w	r4, [r2, #2304]	; 0x900
      (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len);
 8006628:	780a      	ldrb	r2, [r1, #0]
 800662a:	68c9      	ldr	r1, [r1, #12]
 800662c:	b29b      	uxth	r3, r3
 800662e:	f7ff ff7b 	bl	8006528 <USB_WritePacket>
 8006632:	e7bb      	b.n	80065ac <USB_EPStartXfer+0x64>
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8006634:	f502 6530 	add.w	r5, r2, #2816	; 0xb00
 8006638:	692c      	ldr	r4, [r5, #16]
 800663a:	4034      	ands	r4, r6
 800663c:	612c      	str	r4, [r5, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800663e:	692c      	ldr	r4, [r5, #16]
 8006640:	f024 54ff 	bic.w	r4, r4, #534773760	; 0x1fe00000
 8006644:	f424 14c0 	bic.w	r4, r4, #1572864	; 0x180000
 8006648:	612c      	str	r4, [r5, #16]
 800664a:	688c      	ldr	r4, [r1, #8]
    if (ep->xfer_len == 0U)
 800664c:	b9fb      	cbnz	r3, 800668e <USB_EPStartXfer+0x146>
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800664e:	692b      	ldr	r3, [r5, #16]
 8006650:	f3c4 0412 	ubfx	r4, r4, #0, #19
 8006654:	431c      	orrs	r4, r3
 8006656:	612c      	str	r4, [r5, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8006658:	692b      	ldr	r3, [r5, #16]
 800665a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 800665e:	612b      	str	r3, [r5, #16]
    if (ep->type == EP_TYPE_ISOC)
 8006660:	78cb      	ldrb	r3, [r1, #3]
 8006662:	2b01      	cmp	r3, #1
 8006664:	d10c      	bne.n	8006680 <USB_EPStartXfer+0x138>
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8006666:	f8d0 3808 	ldr.w	r3, [r0, #2056]	; 0x808
 800666a:	f413 7f80 	tst.w	r3, #256	; 0x100
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800666e:	f8d2 3b00 	ldr.w	r3, [r2, #2816]	; 0xb00
 8006672:	bf0c      	ite	eq
 8006674:	f043 5300 	orreq.w	r3, r3, #536870912	; 0x20000000
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8006678:	f043 5380 	orrne.w	r3, r3, #268435456	; 0x10000000
 800667c:	f8c2 3b00 	str.w	r3, [r2, #2816]	; 0xb00
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8006680:	f8d2 3b00 	ldr.w	r3, [r2, #2816]	; 0xb00
 8006684:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006688:	f8c2 3b00 	str.w	r3, [r2, #2816]	; 0xb00
 800668c:	e78e      	b.n	80065ac <USB_EPStartXfer+0x64>
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800668e:	4e09      	ldr	r6, [pc, #36]	; (80066b4 <USB_EPStartXfer+0x16c>)
 8006690:	692f      	ldr	r7, [r5, #16]
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8006692:	4423      	add	r3, r4
 8006694:	3b01      	subs	r3, #1
 8006696:	fbb3 f3f4 	udiv	r3, r3, r4
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800669a:	ea06 46c3 	and.w	r6, r6, r3, lsl #19
 800669e:	433e      	orrs	r6, r7
 80066a0:	612e      	str	r6, [r5, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 80066a2:	b29b      	uxth	r3, r3
 80066a4:	692e      	ldr	r6, [r5, #16]
 80066a6:	4363      	muls	r3, r4
 80066a8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80066ac:	4333      	orrs	r3, r6
 80066ae:	e7d6      	b.n	800665e <USB_EPStartXfer+0x116>
 80066b0:	fff80000 	.word	0xfff80000
 80066b4:	1ff80000 	.word	0x1ff80000

080066b8 <USB_ReadPacket>:
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 80066b8:	3203      	adds	r2, #3
 80066ba:	f022 0203 	bic.w	r2, r2, #3
 80066be:	440a      	add	r2, r1
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80066c0:	f500 5080 	add.w	r0, r0, #4096	; 0x1000
  for (i = 0U; i < count32b; i++)
 80066c4:	4291      	cmp	r1, r2
 80066c6:	d101      	bne.n	80066cc <USB_ReadPacket+0x14>
}
 80066c8:	4608      	mov	r0, r1
 80066ca:	4770      	bx	lr
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80066cc:	6803      	ldr	r3, [r0, #0]
 80066ce:	f841 3b04 	str.w	r3, [r1], #4
 80066d2:	e7f7      	b.n	80066c4 <USB_ReadPacket+0xc>

080066d4 <USB_EPSetStall>:
  if (ep->is_in == 1U)
 80066d4:	784b      	ldrb	r3, [r1, #1]
  uint32_t epnum = (uint32_t)ep->num;
 80066d6:	780a      	ldrb	r2, [r1, #0]
  if (ep->is_in == 1U)
 80066d8:	2b01      	cmp	r3, #1
 80066da:	f04f 0320 	mov.w	r3, #32
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 80066de:	fb13 0002 	smlabb	r0, r3, r2, r0
  if (ep->is_in == 1U)
 80066e2:	d112      	bne.n	800670a <USB_EPSetStall+0x36>
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 80066e4:	f8d0 3900 	ldr.w	r3, [r0, #2304]	; 0x900
 80066e8:	2b00      	cmp	r3, #0
 80066ea:	db06      	blt.n	80066fa <USB_EPSetStall+0x26>
 80066ec:	b12a      	cbz	r2, 80066fa <USB_EPSetStall+0x26>
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 80066ee:	f8d0 3900 	ldr.w	r3, [r0, #2304]	; 0x900
 80066f2:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80066f6:	f8c0 3900 	str.w	r3, [r0, #2304]	; 0x900
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 80066fa:	f8d0 3900 	ldr.w	r3, [r0, #2304]	; 0x900
 80066fe:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8006702:	f8c0 3900 	str.w	r3, [r0, #2304]	; 0x900
}
 8006706:	2000      	movs	r0, #0
 8006708:	4770      	bx	lr
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800670a:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	; 0xb00
 800670e:	2b00      	cmp	r3, #0
 8006710:	db06      	blt.n	8006720 <USB_EPSetStall+0x4c>
 8006712:	b12a      	cbz	r2, 8006720 <USB_EPSetStall+0x4c>
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8006714:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	; 0xb00
 8006718:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800671c:	f8c0 3b00 	str.w	r3, [r0, #2816]	; 0xb00
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8006720:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	; 0xb00
 8006724:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8006728:	f8c0 3b00 	str.w	r3, [r0, #2816]	; 0xb00
 800672c:	e7eb      	b.n	8006706 <USB_EPSetStall+0x32>

0800672e <USB_EPClearStall>:
  if (ep->is_in == 1U)
 800672e:	784b      	ldrb	r3, [r1, #1]
  uint32_t epnum = (uint32_t)ep->num;
 8006730:	780a      	ldrb	r2, [r1, #0]
  if (ep->is_in == 1U)
 8006732:	2b01      	cmp	r3, #1
 8006734:	f04f 0320 	mov.w	r3, #32
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8006738:	fb13 0002 	smlabb	r0, r3, r2, r0
  if (ep->is_in == 1U)
 800673c:	d111      	bne.n	8006762 <USB_EPClearStall+0x34>
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800673e:	f8d0 3900 	ldr.w	r3, [r0, #2304]	; 0x900
 8006742:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006746:	f8c0 3900 	str.w	r3, [r0, #2304]	; 0x900
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800674a:	78cb      	ldrb	r3, [r1, #3]
 800674c:	3b02      	subs	r3, #2
 800674e:	2b01      	cmp	r3, #1
 8006750:	d805      	bhi.n	800675e <USB_EPClearStall+0x30>
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8006752:	f8d0 3900 	ldr.w	r3, [r0, #2304]	; 0x900
 8006756:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800675a:	f8c0 3900 	str.w	r3, [r0, #2304]	; 0x900
}
 800675e:	2000      	movs	r0, #0
 8006760:	4770      	bx	lr
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8006762:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	; 0xb00
 8006766:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800676a:	f8c0 3b00 	str.w	r3, [r0, #2816]	; 0xb00
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800676e:	78cb      	ldrb	r3, [r1, #3]
 8006770:	3b02      	subs	r3, #2
 8006772:	2b01      	cmp	r3, #1
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8006774:	bf9e      	ittt	ls
 8006776:	f8d0 3b00 	ldrls.w	r3, [r0, #2816]	; 0xb00
 800677a:	f043 5380 	orrls.w	r3, r3, #268435456	; 0x10000000
 800677e:	f8c0 3b00 	strls.w	r3, [r0, #2816]	; 0xb00
 8006782:	e7ec      	b.n	800675e <USB_EPClearStall+0x30>

08006784 <USB_SetDevAddress>:
  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8006784:	f8d0 3800 	ldr.w	r3, [r0, #2048]	; 0x800
 8006788:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800678c:	f8c0 3800 	str.w	r3, [r0, #2048]	; 0x800
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8006790:	f8d0 3800 	ldr.w	r3, [r0, #2048]	; 0x800
 8006794:	0109      	lsls	r1, r1, #4
 8006796:	f401 61fe 	and.w	r1, r1, #2032	; 0x7f0
 800679a:	4319      	orrs	r1, r3
 800679c:	f8c0 1800 	str.w	r1, [r0, #2048]	; 0x800
}
 80067a0:	2000      	movs	r0, #0
 80067a2:	4770      	bx	lr

080067a4 <USB_DevConnect>:
{
 80067a4:	b508      	push	{r3, lr}
  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 80067a6:	f8d0 3804 	ldr.w	r3, [r0, #2052]	; 0x804
 80067aa:	f023 0302 	bic.w	r3, r3, #2
 80067ae:	f8c0 3804 	str.w	r3, [r0, #2052]	; 0x804
  HAL_Delay(3U);
 80067b2:	2003      	movs	r0, #3
 80067b4:	f7fb fea6 	bl	8002504 <HAL_Delay>
}
 80067b8:	2000      	movs	r0, #0
 80067ba:	bd08      	pop	{r3, pc}

080067bc <USB_DevDisconnect>:
{
 80067bc:	b508      	push	{r3, lr}
  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80067be:	f8d0 3804 	ldr.w	r3, [r0, #2052]	; 0x804
 80067c2:	f043 0302 	orr.w	r3, r3, #2
 80067c6:	f8c0 3804 	str.w	r3, [r0, #2052]	; 0x804
  HAL_Delay(3U);
 80067ca:	2003      	movs	r0, #3
 80067cc:	f7fb fe9a 	bl	8002504 <HAL_Delay>
}
 80067d0:	2000      	movs	r0, #0
 80067d2:	bd08      	pop	{r3, pc}

080067d4 <USB_ReadInterrupts>:
  tmpreg = USBx->GINTSTS;
 80067d4:	6942      	ldr	r2, [r0, #20]
  tmpreg &= USBx->GINTMSK;
 80067d6:	6980      	ldr	r0, [r0, #24]
}
 80067d8:	4010      	ands	r0, r2
 80067da:	4770      	bx	lr

080067dc <USB_ReadDevAllOutEpInterrupt>:
  tmpreg  = USBx_DEVICE->DAINT;
 80067dc:	f8d0 3818 	ldr.w	r3, [r0, #2072]	; 0x818
 80067e0:	f500 6000 	add.w	r0, r0, #2048	; 0x800
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80067e4:	69c0      	ldr	r0, [r0, #28]
 80067e6:	4018      	ands	r0, r3
}
 80067e8:	0c00      	lsrs	r0, r0, #16
 80067ea:	4770      	bx	lr

080067ec <USB_ReadDevAllInEpInterrupt>:
  tmpreg  = USBx_DEVICE->DAINT;
 80067ec:	f8d0 3818 	ldr.w	r3, [r0, #2072]	; 0x818
 80067f0:	f500 6000 	add.w	r0, r0, #2048	; 0x800
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80067f4:	69c0      	ldr	r0, [r0, #28]
 80067f6:	4018      	ands	r0, r3
}
 80067f8:	b280      	uxth	r0, r0
 80067fa:	4770      	bx	lr

080067fc <USB_ReadDevOutEPInterrupt>:
  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 80067fc:	eb00 1141 	add.w	r1, r0, r1, lsl #5
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8006800:	f500 6000 	add.w	r0, r0, #2048	; 0x800
  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8006804:	f8d1 2b08 	ldr.w	r2, [r1, #2824]	; 0xb08
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8006808:	6940      	ldr	r0, [r0, #20]
}
 800680a:	4010      	ands	r0, r2
 800680c:	4770      	bx	lr

0800680e <USB_ReadDevInEPInterrupt>:
{
 800680e:	b510      	push	{r4, lr}
  msk = USBx_DEVICE->DIEPMSK;
 8006810:	f8d0 4810 	ldr.w	r4, [r0, #2064]	; 0x810
  emp = USBx_DEVICE->DIEPEMPMSK;
 8006814:	f8d0 3834 	ldr.w	r3, [r0, #2100]	; 0x834
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8006818:	eb00 1041 	add.w	r0, r0, r1, lsl #5
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800681c:	f001 010f 	and.w	r1, r1, #15
 8006820:	40cb      	lsrs	r3, r1
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8006822:	f500 6010 	add.w	r0, r0, #2304	; 0x900
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8006826:	01db      	lsls	r3, r3, #7
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8006828:	6880      	ldr	r0, [r0, #8]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800682a:	b2db      	uxtb	r3, r3
 800682c:	4323      	orrs	r3, r4
}
 800682e:	4018      	ands	r0, r3
 8006830:	bd10      	pop	{r4, pc}

08006832 <USB_GetMode>:
  return ((USBx->GINTSTS) & 0x1U);
 8006832:	6940      	ldr	r0, [r0, #20]
}
 8006834:	f000 0001 	and.w	r0, r0, #1
 8006838:	4770      	bx	lr

0800683a <USB_ActivateSetup>:
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800683a:	f8d0 3900 	ldr.w	r3, [r0, #2304]	; 0x900
 800683e:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8006842:	f023 0307 	bic.w	r3, r3, #7
 8006846:	f8c0 3900 	str.w	r3, [r0, #2304]	; 0x900
  if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD) == DSTS_ENUMSPD_LS_PHY_6MHZ)
 800684a:	f500 6300 	add.w	r3, r0, #2048	; 0x800
 800684e:	689a      	ldr	r2, [r3, #8]
 8006850:	f002 0206 	and.w	r2, r2, #6
 8006854:	2a04      	cmp	r2, #4
    USBx_INEP(0U)->DIEPCTL |= 3U;
 8006856:	bf02      	ittt	eq
 8006858:	f8d0 2900 	ldreq.w	r2, [r0, #2304]	; 0x900
 800685c:	f042 0203 	orreq.w	r2, r2, #3
 8006860:	f8c0 2900 	streq.w	r2, [r0, #2304]	; 0x900
  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8006864:	685a      	ldr	r2, [r3, #4]
 8006866:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800686a:	605a      	str	r2, [r3, #4]
}
 800686c:	2000      	movs	r0, #0
 800686e:	4770      	bx	lr

08006870 <USB_EP0_OutStart>:
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8006870:	6c02      	ldr	r2, [r0, #64]	; 0x40
  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8006872:	4b0f      	ldr	r3, [pc, #60]	; (80068b0 <USB_EP0_OutStart+0x40>)
 8006874:	429a      	cmp	r2, r3
 8006876:	d903      	bls.n	8006880 <USB_EP0_OutStart+0x10>
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006878:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	; 0xb00
 800687c:	2b00      	cmp	r3, #0
 800687e:	db14      	blt.n	80068aa <USB_EP0_OutStart+0x3a>
  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8006880:	2300      	movs	r3, #0
 8006882:	f8c0 3b10 	str.w	r3, [r0, #2832]	; 0xb10
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8006886:	f8d0 3b10 	ldr.w	r3, [r0, #2832]	; 0xb10
 800688a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800688e:	f8c0 3b10 	str.w	r3, [r0, #2832]	; 0xb10
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8006892:	f8d0 3b10 	ldr.w	r3, [r0, #2832]	; 0xb10
 8006896:	f043 0318 	orr.w	r3, r3, #24
 800689a:	f8c0 3b10 	str.w	r3, [r0, #2832]	; 0xb10
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800689e:	f8d0 3b10 	ldr.w	r3, [r0, #2832]	; 0xb10
 80068a2:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 80068a6:	f8c0 3b10 	str.w	r3, [r0, #2832]	; 0xb10
}
 80068aa:	2000      	movs	r0, #0
 80068ac:	4770      	bx	lr
 80068ae:	bf00      	nop
 80068b0:	4f54300a 	.word	0x4f54300a

080068b4 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */    

void MX_FATFS_Init(void) 
{
 80068b4:	b508      	push	{r3, lr}
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 80068b6:	4903      	ldr	r1, [pc, #12]	; (80068c4 <MX_FATFS_Init+0x10>)
 80068b8:	4803      	ldr	r0, [pc, #12]	; (80068c8 <MX_FATFS_Init+0x14>)
 80068ba:	f001 f83b 	bl	8007934 <FATFS_LinkDriver>
 80068be:	4b03      	ldr	r3, [pc, #12]	; (80068cc <MX_FATFS_Init+0x18>)
 80068c0:	7018      	strb	r0, [r3, #0]
 80068c2:	bd08      	pop	{r3, pc}
 80068c4:	2000b7b4 	.word	0x2000b7b4
 80068c8:	20000034 	.word	0x20000034
 80068cc:	2000b7b8 	.word	0x2000b7b8

080068d0 <USER_status>:
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
  /* USER CODE BEGIN STATUS */
    Stat = STA_NOINIT;
 80068d0:	4b02      	ldr	r3, [pc, #8]	; (80068dc <USER_status+0xc>)
 80068d2:	2201      	movs	r2, #1
 80068d4:	701a      	strb	r2, [r3, #0]
    return Stat;
 80068d6:	7818      	ldrb	r0, [r3, #0]
  /* USER CODE END STATUS */
}
 80068d8:	4770      	bx	lr
 80068da:	bf00      	nop
 80068dc:	20000030 	.word	0x20000030

080068e0 <USER_write>:
{ 
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
    return RES_OK;
  /* USER CODE END WRITE */
}
 80068e0:	2000      	movs	r0, #0
 80068e2:	4770      	bx	lr

080068e4 <USER_ioctl>:
{
  /* USER CODE BEGIN IOCTL */
    DRESULT res = RES_ERROR;
    return res;
  /* USER CODE END IOCTL */
}
 80068e4:	2001      	movs	r0, #1
 80068e6:	4770      	bx	lr

080068e8 <USER_read>:
 80068e8:	2000      	movs	r0, #0
 80068ea:	4770      	bx	lr

080068ec <USER_initialize>:
 80068ec:	4b02      	ldr	r3, [pc, #8]	; (80068f8 <USER_initialize+0xc>)
 80068ee:	2201      	movs	r2, #1
 80068f0:	701a      	strb	r2, [r3, #0]
 80068f2:	7818      	ldrb	r0, [r3, #0]
 80068f4:	4770      	bx	lr
 80068f6:	bf00      	nop
 80068f8:	20000030 	.word	0x20000030

080068fc <USBD_MSC_GetHSCfgDesc>:
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_MSC_GetHSCfgDesc (uint16_t *length)
{
  *length = sizeof (USBD_MSC_CfgHSDesc);
 80068fc:	2320      	movs	r3, #32
 80068fe:	8003      	strh	r3, [r0, #0]
  return USBD_MSC_CfgHSDesc;
}
 8006900:	4800      	ldr	r0, [pc, #0]	; (8006904 <USBD_MSC_GetHSCfgDesc+0x8>)
 8006902:	4770      	bx	lr
 8006904:	200000a0 	.word	0x200000a0

08006908 <USBD_MSC_GetFSCfgDesc>:
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_MSC_GetFSCfgDesc (uint16_t *length)
{
  *length = sizeof (USBD_MSC_CfgFSDesc);
 8006908:	2320      	movs	r3, #32
 800690a:	8003      	strh	r3, [r0, #0]
  return USBD_MSC_CfgFSDesc;
}
 800690c:	4800      	ldr	r0, [pc, #0]	; (8006910 <USBD_MSC_GetFSCfgDesc+0x8>)
 800690e:	4770      	bx	lr
 8006910:	20000080 	.word	0x20000080

08006914 <USBD_MSC_GetOtherSpeedCfgDesc>:
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_MSC_GetOtherSpeedCfgDesc (uint16_t *length)
{
  *length = sizeof (USBD_MSC_OtherSpeedCfgDesc);
 8006914:	2320      	movs	r3, #32
 8006916:	8003      	strh	r3, [r0, #0]
  return USBD_MSC_OtherSpeedCfgDesc;
}
 8006918:	4800      	ldr	r0, [pc, #0]	; (800691c <USBD_MSC_GetOtherSpeedCfgDesc+0x8>)
 800691a:	4770      	bx	lr
 800691c:	200000cc 	.word	0x200000cc

08006920 <USBD_MSC_GetDeviceQualifierDescriptor>:
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_MSC_GetDeviceQualifierDescriptor (uint16_t *length)
{
  *length = sizeof (USBD_MSC_DeviceQualifierDesc);
 8006920:	230a      	movs	r3, #10
 8006922:	8003      	strh	r3, [r0, #0]
  return USBD_MSC_DeviceQualifierDesc;
}
 8006924:	4800      	ldr	r0, [pc, #0]	; (8006928 <USBD_MSC_GetDeviceQualifierDescriptor+0x8>)
 8006926:	4770      	bx	lr
 8006928:	200000c0 	.word	0x200000c0

0800692c <USBD_MSC_Init>:
{
 800692c:	b538      	push	{r3, r4, r5, lr}
  if(pdev->dev_speed == USBD_SPEED_HIGH)
 800692e:	7c03      	ldrb	r3, [r0, #16]
{
 8006930:	4604      	mov	r4, r0
  if(pdev->dev_speed == USBD_SPEED_HIGH)
 8006932:	b9e3      	cbnz	r3, 800696e <USBD_MSC_Init+0x42>
    USBD_LL_OpenEP(pdev, MSC_EPOUT_ADDR, USBD_EP_TYPE_BULK, MSC_MAX_HS_PACKET);
 8006934:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006938:	2202      	movs	r2, #2
 800693a:	2101      	movs	r1, #1
    pdev->ep_out[MSC_EPOUT_ADDR & 0xFU].is_used = 1U;
 800693c:	2501      	movs	r5, #1
    USBD_LL_OpenEP(pdev, MSC_EPOUT_ADDR, USBD_EP_TYPE_BULK, MSC_MAX_HS_PACKET);
 800693e:	f008 fb6d 	bl	800f01c <USBD_LL_OpenEP>
    pdev->ep_out[MSC_EPOUT_ADDR & 0xFU].is_used = 1U;
 8006942:	f8c4 5158 	str.w	r5, [r4, #344]	; 0x158
    USBD_LL_OpenEP(pdev, MSC_EPIN_ADDR, USBD_EP_TYPE_BULK, MSC_MAX_HS_PACKET);
 8006946:	f44f 7300 	mov.w	r3, #512	; 0x200
    USBD_LL_OpenEP(pdev, MSC_EPIN_ADDR, USBD_EP_TYPE_BULK, MSC_MAX_FS_PACKET);
 800694a:	2202      	movs	r2, #2
 800694c:	2181      	movs	r1, #129	; 0x81
 800694e:	4620      	mov	r0, r4
 8006950:	f008 fb64 	bl	800f01c <USBD_LL_OpenEP>
    pdev->ep_in[MSC_EPIN_ADDR & 0xFU].is_used = 1U;
 8006954:	62e5      	str	r5, [r4, #44]	; 0x2c
  pdev->pClassData = USBD_malloc(sizeof (USBD_MSC_BOT_HandleTypeDef));
 8006956:	f44f 701b 	mov.w	r0, #620	; 0x26c
 800695a:	f008 fc1b 	bl	800f194 <USBD_static_malloc>
 800695e:	f8c4 0290 	str.w	r0, [r4, #656]	; 0x290
  if(pdev->pClassData == NULL)
 8006962:	b170      	cbz	r0, 8006982 <USBD_MSC_Init+0x56>
  MSC_BOT_Init(pdev);
 8006964:	4620      	mov	r0, r4
 8006966:	f000 f8ea 	bl	8006b3e <MSC_BOT_Init>
  return USBD_OK;
 800696a:	2000      	movs	r0, #0
 800696c:	bd38      	pop	{r3, r4, r5, pc}
    USBD_LL_OpenEP(pdev, MSC_EPOUT_ADDR, USBD_EP_TYPE_BULK, MSC_MAX_FS_PACKET);
 800696e:	2340      	movs	r3, #64	; 0x40
 8006970:	2202      	movs	r2, #2
 8006972:	2101      	movs	r1, #1
    pdev->ep_out[MSC_EPOUT_ADDR & 0xFU].is_used = 1U;
 8006974:	2501      	movs	r5, #1
    USBD_LL_OpenEP(pdev, MSC_EPOUT_ADDR, USBD_EP_TYPE_BULK, MSC_MAX_FS_PACKET);
 8006976:	f008 fb51 	bl	800f01c <USBD_LL_OpenEP>
    pdev->ep_out[MSC_EPOUT_ADDR & 0xFU].is_used = 1U;
 800697a:	f8c4 5158 	str.w	r5, [r4, #344]	; 0x158
    USBD_LL_OpenEP(pdev, MSC_EPIN_ADDR, USBD_EP_TYPE_BULK, MSC_MAX_FS_PACKET);
 800697e:	2340      	movs	r3, #64	; 0x40
 8006980:	e7e3      	b.n	800694a <USBD_MSC_Init+0x1e>
    return USBD_FAIL;
 8006982:	2002      	movs	r0, #2
}
 8006984:	bd38      	pop	{r3, r4, r5, pc}

08006986 <USBD_MSC_DeInit>:
{
 8006986:	b538      	push	{r3, r4, r5, lr}
 8006988:	4604      	mov	r4, r0
  USBD_LL_CloseEP(pdev, MSC_EPOUT_ADDR);
 800698a:	2101      	movs	r1, #1
  pdev->ep_out[MSC_EPOUT_ADDR & 0xFU].is_used = 0U;
 800698c:	2500      	movs	r5, #0
  USBD_LL_CloseEP(pdev, MSC_EPOUT_ADDR);
 800698e:	f008 fb55 	bl	800f03c <USBD_LL_CloseEP>
  USBD_LL_CloseEP(pdev, MSC_EPIN_ADDR);
 8006992:	2181      	movs	r1, #129	; 0x81
  pdev->ep_out[MSC_EPOUT_ADDR & 0xFU].is_used = 0U;
 8006994:	f8c4 5158 	str.w	r5, [r4, #344]	; 0x158
  USBD_LL_CloseEP(pdev, MSC_EPIN_ADDR);
 8006998:	4620      	mov	r0, r4
 800699a:	f008 fb4f 	bl	800f03c <USBD_LL_CloseEP>
  MSC_BOT_DeInit(pdev);
 800699e:	4620      	mov	r0, r4
  pdev->ep_in[MSC_EPIN_ADDR & 0xFU].is_used = 0U;
 80069a0:	62e5      	str	r5, [r4, #44]	; 0x2c
  MSC_BOT_DeInit(pdev);
 80069a2:	f000 f8f7 	bl	8006b94 <MSC_BOT_DeInit>
  if(pdev->pClassData != NULL)
 80069a6:	f8d4 0290 	ldr.w	r0, [r4, #656]	; 0x290
 80069aa:	b118      	cbz	r0, 80069b4 <USBD_MSC_DeInit+0x2e>
    USBD_free(pdev->pClassData);
 80069ac:	f008 fbf6 	bl	800f19c <USBD_static_free>
    pdev->pClassData  = NULL;
 80069b0:	f8c4 5290 	str.w	r5, [r4, #656]	; 0x290
}
 80069b4:	2000      	movs	r0, #0
 80069b6:	bd38      	pop	{r3, r4, r5, pc}

080069b8 <USBD_MSC_Setup>:
{
 80069b8:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint16_t status_info = 0U;
 80069bc:	2300      	movs	r3, #0
 80069be:	f8ad 3006 	strh.w	r3, [sp, #6]
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80069c2:	780b      	ldrb	r3, [r1, #0]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef*) pdev->pClassData;
 80069c4:	f8d0 7290 	ldr.w	r7, [r0, #656]	; 0x290
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80069c8:	f013 0260 	ands.w	r2, r3, #96	; 0x60
{
 80069cc:	4604      	mov	r4, r0
 80069ce:	460e      	mov	r6, r1
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80069d0:	d02d      	beq.n	8006a2e <USBD_MSC_Setup+0x76>
 80069d2:	2a20      	cmp	r2, #32
 80069d4:	d104      	bne.n	80069e0 <USBD_MSC_Setup+0x28>
    switch (req->bRequest)
 80069d6:	784a      	ldrb	r2, [r1, #1]
 80069d8:	2afe      	cmp	r2, #254	; 0xfe
 80069da:	d005      	beq.n	80069e8 <USBD_MSC_Setup+0x30>
 80069dc:	2aff      	cmp	r2, #255	; 0xff
 80069de:	d018      	beq.n	8006a12 <USBD_MSC_Setup+0x5a>
    USBD_CtlError (pdev, req);
 80069e0:	f000 ff2b 	bl	800783a <USBD_CtlError>
    ret = USBD_FAIL;
 80069e4:	2002      	movs	r0, #2
    break;
 80069e6:	e01f      	b.n	8006a28 <USBD_MSC_Setup+0x70>
      if((req->wValue  == 0U) && (req->wLength == 1U) &&
 80069e8:	884d      	ldrh	r5, [r1, #2]
 80069ea:	2d00      	cmp	r5, #0
 80069ec:	d175      	bne.n	8006ada <USBD_MSC_Setup+0x122>
 80069ee:	f8b1 8006 	ldrh.w	r8, [r1, #6]
 80069f2:	f1b8 0f01 	cmp.w	r8, #1
 80069f6:	d170      	bne.n	8006ada <USBD_MSC_Setup+0x122>
 80069f8:	061a      	lsls	r2, r3, #24
 80069fa:	d56e      	bpl.n	8006ada <USBD_MSC_Setup+0x122>
        hmsc->max_lun = (uint32_t)((USBD_StorageTypeDef *)pdev->pUserData)->GetMaxLun();
 80069fc:	f8d0 3294 	ldr.w	r3, [r0, #660]	; 0x294
 8006a00:	699b      	ldr	r3, [r3, #24]
 8006a02:	4798      	blx	r3
        USBD_CtlSendData (pdev, (uint8_t *)(void *)&hmsc->max_lun, 1U);
 8006a04:	4642      	mov	r2, r8
        hmsc->max_lun = (uint32_t)((USBD_StorageTypeDef *)pdev->pUserData)->GetMaxLun();
 8006a06:	6038      	str	r0, [r7, #0]
        USBD_CtlSendData (pdev, (uint8_t *)(void *)&hmsc->max_lun, 1U);
 8006a08:	4639      	mov	r1, r7
        USBD_CtlSendData (pdev, (uint8_t *)(void *)&hmsc->interface, 1U);
 8006a0a:	4620      	mov	r0, r4
 8006a0c:	f000 ff3c 	bl	8007888 <USBD_CtlSendData>
 8006a10:	e009      	b.n	8006a26 <USBD_MSC_Setup+0x6e>
      if((req->wValue  == 0U) && (req->wLength == 0U) &&
 8006a12:	884a      	ldrh	r2, [r1, #2]
 8006a14:	2a00      	cmp	r2, #0
 8006a16:	d160      	bne.n	8006ada <USBD_MSC_Setup+0x122>
 8006a18:	88cd      	ldrh	r5, [r1, #6]
 8006a1a:	2d00      	cmp	r5, #0
 8006a1c:	d15d      	bne.n	8006ada <USBD_MSC_Setup+0x122>
 8006a1e:	061b      	lsls	r3, r3, #24
 8006a20:	d45b      	bmi.n	8006ada <USBD_MSC_Setup+0x122>
        MSC_BOT_Reset(pdev);
 8006a22:	f000 f8ac 	bl	8006b7e <MSC_BOT_Reset>
  uint8_t ret = USBD_OK;
 8006a26:	2000      	movs	r0, #0
}
 8006a28:	b002      	add	sp, #8
 8006a2a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    switch (req->bRequest)
 8006a2e:	784b      	ldrb	r3, [r1, #1]
 8006a30:	2b0b      	cmp	r3, #11
 8006a32:	d852      	bhi.n	8006ada <USBD_MSC_Setup+0x122>
 8006a34:	e8df f003 	tbb	[pc, r3]
 8006a38:	51511c06 	.word	0x51511c06
 8006a3c:	51515151 	.word	0x51515151
 8006a40:	150e5151 	.word	0x150e5151
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006a44:	f890 3274 	ldrb.w	r3, [r0, #628]	; 0x274
 8006a48:	2b03      	cmp	r3, #3
 8006a4a:	d146      	bne.n	8006ada <USBD_MSC_Setup+0x122>
        USBD_CtlSendData (pdev, (uint8_t *)(void *)&status_info, 2U);
 8006a4c:	2202      	movs	r2, #2
 8006a4e:	f10d 0106 	add.w	r1, sp, #6
 8006a52:	e7da      	b.n	8006a0a <USBD_MSC_Setup+0x52>
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006a54:	f890 3274 	ldrb.w	r3, [r0, #628]	; 0x274
 8006a58:	2b03      	cmp	r3, #3
 8006a5a:	d13e      	bne.n	8006ada <USBD_MSC_Setup+0x122>
        USBD_CtlSendData (pdev, (uint8_t *)(void *)&hmsc->interface, 1U);
 8006a5c:	2201      	movs	r2, #1
 8006a5e:	1d39      	adds	r1, r7, #4
 8006a60:	e7d3      	b.n	8006a0a <USBD_MSC_Setup+0x52>
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006a62:	f890 3274 	ldrb.w	r3, [r0, #628]	; 0x274
 8006a66:	2b03      	cmp	r3, #3
 8006a68:	d137      	bne.n	8006ada <USBD_MSC_Setup+0x122>
        hmsc->interface = (uint8_t)(req->wValue);
 8006a6a:	788b      	ldrb	r3, [r1, #2]
 8006a6c:	607b      	str	r3, [r7, #4]
 8006a6e:	e7da      	b.n	8006a26 <USBD_MSC_Setup+0x6e>
      USBD_LL_FlushEP(pdev, (uint8_t)req->wIndex);
 8006a70:	7909      	ldrb	r1, [r1, #4]
 8006a72:	f008 faf1 	bl	800f058 <USBD_LL_FlushEP>
      USBD_LL_CloseEP (pdev , (uint8_t)req->wIndex);
 8006a76:	7931      	ldrb	r1, [r6, #4]
 8006a78:	4620      	mov	r0, r4
 8006a7a:	f008 fadf 	bl	800f03c <USBD_LL_CloseEP>
      if((((uint8_t)req->wIndex) & 0x80U) == 0x80U)
 8006a7e:	88b3      	ldrh	r3, [r6, #4]
 8006a80:	7c22      	ldrb	r2, [r4, #16]
 8006a82:	2114      	movs	r1, #20
 8006a84:	f013 0f80 	tst.w	r3, #128	; 0x80
 8006a88:	f003 030f 	and.w	r3, r3, #15
        pdev->ep_in[(uint8_t)req->wIndex & 0xFU].is_used = 0U;
 8006a8c:	fb01 4303 	mla	r3, r1, r3, r4
 8006a90:	f04f 0100 	mov.w	r1, #0
      if((((uint8_t)req->wIndex) & 0x80U) == 0x80U)
 8006a94:	d011      	beq.n	8006aba <USBD_MSC_Setup+0x102>
        pdev->ep_in[(uint8_t)req->wIndex & 0xFU].is_used = 0U;
 8006a96:	6199      	str	r1, [r3, #24]
        if(pdev->dev_speed == USBD_SPEED_HIGH)
 8006a98:	b96a      	cbnz	r2, 8006ab6 <USBD_MSC_Setup+0xfe>
          USBD_LL_OpenEP(pdev, MSC_EPIN_ADDR, USBD_EP_TYPE_BULK,
 8006a9a:	f44f 7300 	mov.w	r3, #512	; 0x200
          USBD_LL_OpenEP(pdev, MSC_EPIN_ADDR, USBD_EP_TYPE_BULK,
 8006a9e:	2202      	movs	r2, #2
 8006aa0:	2181      	movs	r1, #129	; 0x81
 8006aa2:	4620      	mov	r0, r4
 8006aa4:	f008 faba 	bl	800f01c <USBD_LL_OpenEP>
        pdev->ep_in[MSC_EPIN_ADDR & 0xFU].is_used = 1U;
 8006aa8:	2301      	movs	r3, #1
 8006aaa:	62e3      	str	r3, [r4, #44]	; 0x2c
      MSC_BOT_CplClrFeature(pdev, (uint8_t)req->wIndex);
 8006aac:	7931      	ldrb	r1, [r6, #4]
 8006aae:	4620      	mov	r0, r4
 8006ab0:	f000 f91a 	bl	8006ce8 <MSC_BOT_CplClrFeature>
 8006ab4:	e7b7      	b.n	8006a26 <USBD_MSC_Setup+0x6e>
          USBD_LL_OpenEP(pdev, MSC_EPIN_ADDR, USBD_EP_TYPE_BULK,
 8006ab6:	2340      	movs	r3, #64	; 0x40
 8006ab8:	e7f1      	b.n	8006a9e <USBD_MSC_Setup+0xe6>
        pdev->ep_out[(uint8_t)req->wIndex & 0xFU].is_used = 0U;
 8006aba:	f8c3 1144 	str.w	r1, [r3, #324]	; 0x144
        if(pdev->dev_speed == USBD_SPEED_HIGH)
 8006abe:	b952      	cbnz	r2, 8006ad6 <USBD_MSC_Setup+0x11e>
          USBD_LL_OpenEP(pdev, MSC_EPOUT_ADDR, USBD_EP_TYPE_BULK,
 8006ac0:	f44f 7300 	mov.w	r3, #512	; 0x200
          USBD_LL_OpenEP(pdev, MSC_EPOUT_ADDR, USBD_EP_TYPE_BULK,
 8006ac4:	2202      	movs	r2, #2
 8006ac6:	2101      	movs	r1, #1
 8006ac8:	4620      	mov	r0, r4
 8006aca:	f008 faa7 	bl	800f01c <USBD_LL_OpenEP>
        pdev->ep_out[MSC_EPOUT_ADDR & 0xFU].is_used = 1U;
 8006ace:	2301      	movs	r3, #1
 8006ad0:	f8c4 3158 	str.w	r3, [r4, #344]	; 0x158
 8006ad4:	e7ea      	b.n	8006aac <USBD_MSC_Setup+0xf4>
          USBD_LL_OpenEP(pdev, MSC_EPOUT_ADDR, USBD_EP_TYPE_BULK,
 8006ad6:	2340      	movs	r3, #64	; 0x40
 8006ad8:	e7f4      	b.n	8006ac4 <USBD_MSC_Setup+0x10c>
      USBD_CtlError (pdev, req);
 8006ada:	4631      	mov	r1, r6
 8006adc:	4620      	mov	r0, r4
 8006ade:	e77f      	b.n	80069e0 <USBD_MSC_Setup+0x28>

08006ae0 <USBD_MSC_DataIn>:
{
 8006ae0:	b508      	push	{r3, lr}
  MSC_BOT_DataIn(pdev , epnum);
 8006ae2:	f000 f879 	bl	8006bd8 <MSC_BOT_DataIn>
}
 8006ae6:	2000      	movs	r0, #0
 8006ae8:	bd08      	pop	{r3, pc}

08006aea <USBD_MSC_DataOut>:
{
 8006aea:	b508      	push	{r3, lr}
  MSC_BOT_DataOut(pdev , epnum);
 8006aec:	f000 f890 	bl	8006c10 <MSC_BOT_DataOut>
}
 8006af0:	2000      	movs	r0, #0
 8006af2:	bd08      	pop	{r3, pc}

08006af4 <USBD_MSC_RegisterStorage>:
* @retval status
*/
uint8_t  USBD_MSC_RegisterStorage  (USBD_HandleTypeDef   *pdev,
                                    USBD_StorageTypeDef *fops)
{
  if(fops != NULL)
 8006af4:	b109      	cbz	r1, 8006afa <USBD_MSC_RegisterStorage+0x6>
  {
    pdev->pUserData = fops;
 8006af6:	f8c0 1294 	str.w	r1, [r0, #660]	; 0x294
  }
  return USBD_OK;
}
 8006afa:	2000      	movs	r0, #0
 8006afc:	4770      	bx	lr

08006afe <MSC_BOT_Abort>:
* @param  pdev: device instance
* @retval status
*/

static void  MSC_BOT_Abort (USBD_HandleTypeDef  *pdev)
{
 8006afe:	b570      	push	{r4, r5, r6, lr}
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef*)pdev->pClassData;
 8006b00:	f8d0 4290 	ldr.w	r4, [r0, #656]	; 0x290

  if ((hmsc->cbw.bmFlags == 0U) &&
 8006b04:	f894 3218 	ldrb.w	r3, [r4, #536]	; 0x218
{
 8006b08:	4605      	mov	r5, r0
  if ((hmsc->cbw.bmFlags == 0U) &&
 8006b0a:	b93b      	cbnz	r3, 8006b1c <MSC_BOT_Abort+0x1e>
 8006b0c:	f8d4 3214 	ldr.w	r3, [r4, #532]	; 0x214
 8006b10:	b123      	cbz	r3, 8006b1c <MSC_BOT_Abort+0x1e>
      (hmsc->cbw.dDataLength != 0U) &&
 8006b12:	7a63      	ldrb	r3, [r4, #9]
 8006b14:	b913      	cbnz	r3, 8006b1c <MSC_BOT_Abort+0x1e>
      (hmsc->bot_status == USBD_BOT_STATUS_NORMAL))
  {
    USBD_LL_StallEP(pdev, MSC_EPOUT_ADDR );
 8006b16:	2101      	movs	r1, #1
 8006b18:	f008 faac 	bl	800f074 <USBD_LL_StallEP>
  }

  USBD_LL_StallEP(pdev, MSC_EPIN_ADDR);
 8006b1c:	2181      	movs	r1, #129	; 0x81
 8006b1e:	4628      	mov	r0, r5
 8006b20:	f008 faa8 	bl	800f074 <USBD_LL_StallEP>

  if(hmsc->bot_status == USBD_BOT_STATUS_ERROR)
 8006b24:	7a63      	ldrb	r3, [r4, #9]
 8006b26:	2b02      	cmp	r3, #2
 8006b28:	d108      	bne.n	8006b3c <MSC_BOT_Abort+0x3e>
  {
    USBD_LL_PrepareReceive (pdev, MSC_EPOUT_ADDR, (uint8_t *)(void *)&hmsc->cbw,
 8006b2a:	f504 7203 	add.w	r2, r4, #524	; 0x20c
 8006b2e:	4628      	mov	r0, r5
 8006b30:	231f      	movs	r3, #31
 8006b32:	2101      	movs	r1, #1
                            USBD_BOT_CBW_LENGTH);
  }
}
 8006b34:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    USBD_LL_PrepareReceive (pdev, MSC_EPOUT_ADDR, (uint8_t *)(void *)&hmsc->cbw,
 8006b38:	f008 bae8 	b.w	800f10c <USBD_LL_PrepareReceive>
 8006b3c:	bd70      	pop	{r4, r5, r6, pc}

08006b3e <MSC_BOT_Init>:
{
 8006b3e:	b570      	push	{r4, r5, r6, lr}
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef*)pdev->pClassData;
 8006b40:	f8d0 5290 	ldr.w	r5, [r0, #656]	; 0x290
{
 8006b44:	4604      	mov	r4, r0
  hmsc->bot_state = USBD_BOT_IDLE;
 8006b46:	2000      	movs	r0, #0
 8006b48:	7228      	strb	r0, [r5, #8]
  hmsc->bot_status = USBD_BOT_STATUS_NORMAL;
 8006b4a:	7268      	strb	r0, [r5, #9]
  hmsc->scsi_sense_tail = 0U;
 8006b4c:	f885 025d 	strb.w	r0, [r5, #605]	; 0x25d
  hmsc->scsi_sense_head = 0U;
 8006b50:	f885 025c 	strb.w	r0, [r5, #604]	; 0x25c
  ((USBD_StorageTypeDef *)pdev->pUserData)->Init(0U);
 8006b54:	f8d4 3294 	ldr.w	r3, [r4, #660]	; 0x294
 8006b58:	681b      	ldr	r3, [r3, #0]
 8006b5a:	4798      	blx	r3
  USBD_LL_FlushEP(pdev, MSC_EPOUT_ADDR);
 8006b5c:	2101      	movs	r1, #1
 8006b5e:	4620      	mov	r0, r4
 8006b60:	f008 fa7a 	bl	800f058 <USBD_LL_FlushEP>
  USBD_LL_FlushEP(pdev, MSC_EPIN_ADDR);
 8006b64:	2181      	movs	r1, #129	; 0x81
 8006b66:	4620      	mov	r0, r4
 8006b68:	f008 fa76 	bl	800f058 <USBD_LL_FlushEP>
  USBD_LL_PrepareReceive (pdev, MSC_EPOUT_ADDR, (uint8_t *)(void *)&hmsc->cbw,
 8006b6c:	f505 7203 	add.w	r2, r5, #524	; 0x20c
 8006b70:	4620      	mov	r0, r4
 8006b72:	231f      	movs	r3, #31
 8006b74:	2101      	movs	r1, #1
}
 8006b76:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  USBD_LL_PrepareReceive (pdev, MSC_EPOUT_ADDR, (uint8_t *)(void *)&hmsc->cbw,
 8006b7a:	f008 bac7 	b.w	800f10c <USBD_LL_PrepareReceive>

08006b7e <MSC_BOT_Reset>:
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef*)pdev->pClassData;
 8006b7e:	f8d0 2290 	ldr.w	r2, [r0, #656]	; 0x290
  hmsc->bot_state  = USBD_BOT_IDLE;
 8006b82:	2300      	movs	r3, #0
  hmsc->bot_status = USBD_BOT_STATUS_RECOVERY;
 8006b84:	2101      	movs	r1, #1
  hmsc->bot_state  = USBD_BOT_IDLE;
 8006b86:	7213      	strb	r3, [r2, #8]
  hmsc->bot_status = USBD_BOT_STATUS_RECOVERY;
 8006b88:	7251      	strb	r1, [r2, #9]
  USBD_LL_PrepareReceive (pdev, MSC_EPOUT_ADDR, (uint8_t *)(void *)&hmsc->cbw,
 8006b8a:	231f      	movs	r3, #31
 8006b8c:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8006b90:	f008 babc 	b.w	800f10c <USBD_LL_PrepareReceive>

08006b94 <MSC_BOT_DeInit>:
  hmsc->bot_state  = USBD_BOT_IDLE;
 8006b94:	f8d0 3290 	ldr.w	r3, [r0, #656]	; 0x290
 8006b98:	2200      	movs	r2, #0
 8006b9a:	721a      	strb	r2, [r3, #8]
 8006b9c:	4770      	bx	lr
	...

08006ba0 <MSC_BOT_SendCSW>:
{
 8006ba0:	b570      	push	{r4, r5, r6, lr}
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef*)pdev->pClassData;
 8006ba2:	f8d0 4290 	ldr.w	r4, [r0, #656]	; 0x290
  hmsc->csw.dSignature = USBD_BOT_CSW_SIGNATURE;
 8006ba6:	4b0b      	ldr	r3, [pc, #44]	; (8006bd4 <MSC_BOT_SendCSW+0x34>)
 8006ba8:	f8c4 322c 	str.w	r3, [r4, #556]	; 0x22c
  hmsc->bot_state = USBD_BOT_IDLE;
 8006bac:	2300      	movs	r3, #0
{
 8006bae:	4605      	mov	r5, r0
  hmsc->csw.bStatus = CSW_Status;
 8006bb0:	f884 1238 	strb.w	r1, [r4, #568]	; 0x238
  hmsc->bot_state = USBD_BOT_IDLE;
 8006bb4:	7223      	strb	r3, [r4, #8]
  USBD_LL_Transmit (pdev, MSC_EPIN_ADDR, (uint8_t *)(void *)&hmsc->csw,
 8006bb6:	f504 720b 	add.w	r2, r4, #556	; 0x22c
 8006bba:	230d      	movs	r3, #13
 8006bbc:	2181      	movs	r1, #129	; 0x81
 8006bbe:	f008 fa97 	bl	800f0f0 <USBD_LL_Transmit>
  USBD_LL_PrepareReceive (pdev, MSC_EPOUT_ADDR, (uint8_t *)(void *)&hmsc->cbw,
 8006bc2:	f504 7203 	add.w	r2, r4, #524	; 0x20c
 8006bc6:	4628      	mov	r0, r5
 8006bc8:	231f      	movs	r3, #31
 8006bca:	2101      	movs	r1, #1
}
 8006bcc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  USBD_LL_PrepareReceive (pdev, MSC_EPOUT_ADDR, (uint8_t *)(void *)&hmsc->cbw,
 8006bd0:	f008 ba9c 	b.w	800f10c <USBD_LL_PrepareReceive>
 8006bd4:	53425355 	.word	0x53425355

08006bd8 <MSC_BOT_DataIn>:
{
 8006bd8:	b510      	push	{r4, lr}
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef*)pdev->pClassData;
 8006bda:	f8d0 3290 	ldr.w	r3, [r0, #656]	; 0x290
  switch (hmsc->bot_state)
 8006bde:	7a1a      	ldrb	r2, [r3, #8]
 8006be0:	2a02      	cmp	r2, #2
{
 8006be2:	4604      	mov	r4, r0
  switch (hmsc->bot_state)
 8006be4:	d003      	beq.n	8006bee <MSC_BOT_DataIn+0x16>
 8006be6:	d312      	bcc.n	8006c0e <MSC_BOT_DataIn+0x36>
 8006be8:	2a04      	cmp	r2, #4
 8006bea:	d90e      	bls.n	8006c0a <MSC_BOT_DataIn+0x32>
 8006bec:	bd10      	pop	{r4, pc}
    if(SCSI_ProcessCmd(pdev,
 8006bee:	f203 221b 	addw	r2, r3, #539	; 0x21b
 8006bf2:	f893 1219 	ldrb.w	r1, [r3, #537]	; 0x219
 8006bf6:	f000 f8a3 	bl	8006d40 <SCSI_ProcessCmd>
 8006bfa:	2800      	cmp	r0, #0
 8006bfc:	da07      	bge.n	8006c0e <MSC_BOT_DataIn+0x36>
      MSC_BOT_SendCSW (pdev, USBD_CSW_CMD_FAILED);
 8006bfe:	2101      	movs	r1, #1
 8006c00:	4620      	mov	r0, r4
}
 8006c02:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    MSC_BOT_SendCSW (pdev, USBD_CSW_CMD_PASSED);
 8006c06:	f7ff bfcb 	b.w	8006ba0 <MSC_BOT_SendCSW>
 8006c0a:	2100      	movs	r1, #0
 8006c0c:	e7f9      	b.n	8006c02 <MSC_BOT_DataIn+0x2a>
 8006c0e:	bd10      	pop	{r4, pc}

08006c10 <MSC_BOT_DataOut>:
{
 8006c10:	b570      	push	{r4, r5, r6, lr}
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef*)pdev->pClassData;
 8006c12:	f8d0 4290 	ldr.w	r4, [r0, #656]	; 0x290
  switch (hmsc->bot_state)
 8006c16:	7a23      	ldrb	r3, [r4, #8]
{
 8006c18:	4605      	mov	r5, r0
  switch (hmsc->bot_state)
 8006c1a:	b113      	cbz	r3, 8006c22 <MSC_BOT_DataOut+0x12>
 8006c1c:	2b01      	cmp	r3, #1
 8006c1e:	d058      	beq.n	8006cd2 <MSC_BOT_DataOut+0xc2>
 8006c20:	bd70      	pop	{r4, r5, r6, pc}
  hmsc->csw.dTag = hmsc->cbw.dTag;
 8006c22:	f8d4 3210 	ldr.w	r3, [r4, #528]	; 0x210
 8006c26:	f8c4 3230 	str.w	r3, [r4, #560]	; 0x230
  hmsc->csw.dDataResidue = hmsc->cbw.dDataLength;
 8006c2a:	f8d4 3214 	ldr.w	r3, [r4, #532]	; 0x214
 8006c2e:	f8c4 3234 	str.w	r3, [r4, #564]	; 0x234
  if ((USBD_LL_GetRxDataSize (pdev ,MSC_EPOUT_ADDR) != USBD_BOT_CBW_LENGTH) ||
 8006c32:	2101      	movs	r1, #1
 8006c34:	f008 fa78 	bl	800f128 <USBD_LL_GetRxDataSize>
 8006c38:	281f      	cmp	r0, #31
 8006c3a:	f894 1219 	ldrb.w	r1, [r4, #537]	; 0x219
 8006c3e:	d10b      	bne.n	8006c58 <MSC_BOT_DataOut+0x48>
 8006c40:	f8d4 220c 	ldr.w	r2, [r4, #524]	; 0x20c
 8006c44:	4b27      	ldr	r3, [pc, #156]	; (8006ce4 <MSC_BOT_DataOut+0xd4>)
 8006c46:	429a      	cmp	r2, r3
 8006c48:	d106      	bne.n	8006c58 <MSC_BOT_DataOut+0x48>
      (hmsc->cbw.dSignature != USBD_BOT_CBW_SIGNATURE) ||
 8006c4a:	2901      	cmp	r1, #1
 8006c4c:	d804      	bhi.n	8006c58 <MSC_BOT_DataOut+0x48>
        (hmsc->cbw.bLUN > 1U) ||
 8006c4e:	f894 321a 	ldrb.w	r3, [r4, #538]	; 0x21a
 8006c52:	3b01      	subs	r3, #1
 8006c54:	2b0f      	cmp	r3, #15
 8006c56:	d90b      	bls.n	8006c70 <MSC_BOT_DataOut+0x60>
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8006c58:	2320      	movs	r3, #32
 8006c5a:	2205      	movs	r2, #5
 8006c5c:	4628      	mov	r0, r5
 8006c5e:	f000 fa9d 	bl	800719c <SCSI_SenseCode>
    hmsc->bot_status = USBD_BOT_STATUS_ERROR;
 8006c62:	2302      	movs	r3, #2
 8006c64:	7263      	strb	r3, [r4, #9]
        MSC_BOT_Abort(pdev);
 8006c66:	4628      	mov	r0, r5
}
 8006c68:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        MSC_BOT_Abort(pdev);
 8006c6c:	f7ff bf47 	b.w	8006afe <MSC_BOT_Abort>
    if(SCSI_ProcessCmd(pdev, hmsc->cbw.bLUN, &hmsc->cbw.CB[0]) < 0)
 8006c70:	f204 221b 	addw	r2, r4, #539	; 0x21b
 8006c74:	4628      	mov	r0, r5
 8006c76:	f000 f863 	bl	8006d40 <SCSI_ProcessCmd>
 8006c7a:	2800      	cmp	r0, #0
 8006c7c:	7a23      	ldrb	r3, [r4, #8]
 8006c7e:	da07      	bge.n	8006c90 <MSC_BOT_DataOut+0x80>
      if(hmsc->bot_state == USBD_BOT_NO_DATA)
 8006c80:	2b05      	cmp	r3, #5
 8006c82:	d1f0      	bne.n	8006c66 <MSC_BOT_DataOut+0x56>
        MSC_BOT_SendCSW (pdev, USBD_CSW_CMD_FAILED);
 8006c84:	2101      	movs	r1, #1
        MSC_BOT_SendCSW (pdev, USBD_CSW_CMD_PASSED);
 8006c86:	4628      	mov	r0, r5
}
 8006c88:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        MSC_BOT_SendCSW (pdev, USBD_CSW_CMD_PASSED);
 8006c8c:	f7ff bf88 	b.w	8006ba0 <MSC_BOT_SendCSW>
    else if ((hmsc->bot_state != USBD_BOT_DATA_IN) &&
 8006c90:	3b01      	subs	r3, #1
 8006c92:	2b02      	cmp	r3, #2
 8006c94:	d925      	bls.n	8006ce2 <MSC_BOT_DataOut+0xd2>
      if (hmsc->bot_data_length > 0U)
 8006c96:	8963      	ldrh	r3, [r4, #10]
 8006c98:	b1cb      	cbz	r3, 8006cce <MSC_BOT_DataOut+0xbe>
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef*)pdev->pClassData;
 8006c9a:	f8d5 1290 	ldr.w	r1, [r5, #656]	; 0x290
  hmsc->csw.dDataResidue -= len;
 8006c9e:	f8d1 0234 	ldr.w	r0, [r1, #564]	; 0x234
  uint16_t length = (uint16_t)MIN(hmsc->cbw.dDataLength, len);
 8006ca2:	f8d1 6214 	ldr.w	r6, [r1, #532]	; 0x214
        MSC_BOT_SendData(pdev, hmsc->bot_data, hmsc->bot_data_length);
 8006ca6:	f104 020c 	add.w	r2, r4, #12
  uint16_t length = (uint16_t)MIN(hmsc->cbw.dDataLength, len);
 8006caa:	461c      	mov	r4, r3
  hmsc->csw.dDataResidue -= len;
 8006cac:	1b00      	subs	r0, r0, r4
 8006cae:	f8c1 0234 	str.w	r0, [r1, #564]	; 0x234
  hmsc->csw.bStatus = USBD_CSW_CMD_PASSED;
 8006cb2:	2000      	movs	r0, #0
 8006cb4:	f881 0238 	strb.w	r0, [r1, #568]	; 0x238
  hmsc->bot_state = USBD_BOT_SEND_DATA;
 8006cb8:	2004      	movs	r0, #4
 8006cba:	7208      	strb	r0, [r1, #8]
  uint16_t length = (uint16_t)MIN(hmsc->cbw.dDataLength, len);
 8006cbc:	429e      	cmp	r6, r3
 8006cbe:	bf38      	it	cc
 8006cc0:	b2b3      	uxthcc	r3, r6
  USBD_LL_Transmit(pdev, MSC_EPIN_ADDR, pbuf, length);
 8006cc2:	4628      	mov	r0, r5
 8006cc4:	2181      	movs	r1, #129	; 0x81
}
 8006cc6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  USBD_LL_Transmit(pdev, MSC_EPIN_ADDR, pbuf, length);
 8006cca:	f008 ba11 	b.w	800f0f0 <USBD_LL_Transmit>
        MSC_BOT_SendCSW (pdev, USBD_CSW_CMD_PASSED);
 8006cce:	4619      	mov	r1, r3
 8006cd0:	e7d9      	b.n	8006c86 <MSC_BOT_DataOut+0x76>
    if(SCSI_ProcessCmd(pdev,
 8006cd2:	f204 221b 	addw	r2, r4, #539	; 0x21b
 8006cd6:	f894 1219 	ldrb.w	r1, [r4, #537]	; 0x219
 8006cda:	f000 f831 	bl	8006d40 <SCSI_ProcessCmd>
 8006cde:	2800      	cmp	r0, #0
 8006ce0:	dbd0      	blt.n	8006c84 <MSC_BOT_DataOut+0x74>
 8006ce2:	bd70      	pop	{r4, r5, r6, pc}
 8006ce4:	43425355 	.word	0x43425355

08006ce8 <MSC_BOT_CplClrFeature>:
* @param  epnum: endpoint index
* @retval None
*/

void  MSC_BOT_CplClrFeature (USBD_HandleTypeDef  *pdev, uint8_t epnum)
{
 8006ce8:	b510      	push	{r4, lr}
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef*)pdev->pClassData;
 8006cea:	f8d0 4290 	ldr.w	r4, [r0, #656]	; 0x290

  if(hmsc->bot_status == USBD_BOT_STATUS_ERROR)/* Bad CBW Signature */
 8006cee:	7a63      	ldrb	r3, [r4, #9]
 8006cf0:	2b02      	cmp	r3, #2
 8006cf2:	d105      	bne.n	8006d00 <MSC_BOT_CplClrFeature+0x18>
  {
    USBD_LL_StallEP(pdev, MSC_EPIN_ADDR);
 8006cf4:	2181      	movs	r1, #129	; 0x81
 8006cf6:	f008 f9bd 	bl	800f074 <USBD_LL_StallEP>
    hmsc->bot_status = USBD_BOT_STATUS_NORMAL;
 8006cfa:	2300      	movs	r3, #0
 8006cfc:	7263      	strb	r3, [r4, #9]
 8006cfe:	bd10      	pop	{r4, pc}
  }
  else if(((epnum & 0x80U) == 0x80U) && (hmsc->bot_status != USBD_BOT_STATUS_RECOVERY))
 8006d00:	060a      	lsls	r2, r1, #24
 8006d02:	d506      	bpl.n	8006d12 <MSC_BOT_CplClrFeature+0x2a>
 8006d04:	2b01      	cmp	r3, #1
 8006d06:	d004      	beq.n	8006d12 <MSC_BOT_CplClrFeature+0x2a>
  {
    MSC_BOT_SendCSW (pdev, USBD_CSW_CMD_FAILED);
 8006d08:	2101      	movs	r1, #1
  }
  else
  {
    return;
  }
}
 8006d0a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    MSC_BOT_SendCSW (pdev, USBD_CSW_CMD_FAILED);
 8006d0e:	f7ff bf47 	b.w	8006ba0 <MSC_BOT_SendCSW>
 8006d12:	bd10      	pop	{r4, pc}

08006d14 <SCSI_SenseCode.constprop.8>:
* @retval none

*/
void SCSI_SenseCode(USBD_HandleTypeDef  *pdev, uint8_t lun, uint8_t sKey, uint8_t ASC)
{
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef*)pdev->pClassData;
 8006d14:	f8d0 2290 	ldr.w	r2, [r0, #656]	; 0x290

  hmsc->scsi_sense[hmsc->scsi_sense_tail].Skey  = sKey;
 8006d18:	f892 325d 	ldrb.w	r3, [r2, #605]	; 0x25d
 8006d1c:	eb02 00c3 	add.w	r0, r2, r3, lsl #3
  hmsc->scsi_sense[hmsc->scsi_sense_tail].w.ASC = ASC << 8;
  hmsc->scsi_sense_tail++;
 8006d20:	3301      	adds	r3, #1
 8006d22:	b2db      	uxtb	r3, r3
  hmsc->scsi_sense[hmsc->scsi_sense_tail].Skey  = sKey;
 8006d24:	f880 123c 	strb.w	r1, [r0, #572]	; 0x23c
  if (hmsc->scsi_sense_tail == SENSE_LIST_DEEPTH)
 8006d28:	2b04      	cmp	r3, #4
  hmsc->scsi_sense[hmsc->scsi_sense_tail].w.ASC = ASC << 8;
 8006d2a:	f04f 0100 	mov.w	r1, #0
 8006d2e:	f880 1240 	strb.w	r1, [r0, #576]	; 0x240
  hmsc->scsi_sense_tail++;
 8006d32:	bf14      	ite	ne
 8006d34:	f882 325d 	strbne.w	r3, [r2, #605]	; 0x25d
  {
    hmsc->scsi_sense_tail = 0U;
 8006d38:	f882 125d 	strbeq.w	r1, [r2, #605]	; 0x25d
 8006d3c:	4770      	bx	lr
	...

08006d40 <SCSI_ProcessCmd>:
{
 8006d40:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
  switch (cmd[0])
 8006d44:	7813      	ldrb	r3, [r2, #0]
 8006d46:	2b1e      	cmp	r3, #30
{
 8006d48:	4605      	mov	r5, r0
 8006d4a:	460c      	mov	r4, r1
 8006d4c:	4617      	mov	r7, r2
  switch (cmd[0])
 8006d4e:	d016      	beq.n	8006d7e <SCSI_ProcessCmd+0x3e>
 8006d50:	d81a      	bhi.n	8006d88 <SCSI_ProcessCmd+0x48>
 8006d52:	2b12      	cmp	r3, #18
 8006d54:	f000 80e3 	beq.w	8006f1e <SCSI_ProcessCmd+0x1de>
 8006d58:	d80c      	bhi.n	8006d74 <SCSI_ProcessCmd+0x34>
 8006d5a:	2b00      	cmp	r3, #0
 8006d5c:	f000 8092 	beq.w	8006e84 <SCSI_ProcessCmd+0x144>
 8006d60:	2b03      	cmp	r3, #3
 8006d62:	f000 80ad 	beq.w	8006ec0 <SCSI_ProcessCmd+0x180>
    SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, INVALID_CDB);
 8006d66:	2105      	movs	r1, #5
 8006d68:	4628      	mov	r0, r5
 8006d6a:	f7ff ffd3 	bl	8006d14 <SCSI_SenseCode.constprop.8>
    return -1;
 8006d6e:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8006d72:	e0a1      	b.n	8006eb8 <SCSI_ProcessCmd+0x178>
  switch (cmd[0])
 8006d74:	2b1a      	cmp	r3, #26
 8006d76:	f000 80fa 	beq.w	8006f6e <SCSI_ProcessCmd+0x22e>
 8006d7a:	2b1b      	cmp	r3, #27
 8006d7c:	d1f3      	bne.n	8006d66 <SCSI_ProcessCmd+0x26>
* @retval status
*/
static int8_t SCSI_StartStopUnit(USBD_HandleTypeDef  *pdev, uint8_t lun, uint8_t *params)
{
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef*) pdev->pClassData;
  hmsc->bot_data_length = 0U;
 8006d7e:	f8d5 3290 	ldr.w	r3, [r5, #656]	; 0x290
 8006d82:	2400      	movs	r4, #0
  if(SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
                            hmsc->scsi_blk_len) < 0)
  {
    return -1; /* error */
  }
  hmsc->bot_data_length = 0U;
 8006d84:	815c      	strh	r4, [r3, #10]
 8006d86:	e097      	b.n	8006eb8 <SCSI_ProcessCmd+0x178>
  switch (cmd[0])
 8006d88:	2b28      	cmp	r3, #40	; 0x28
 8006d8a:	f000 813a 	beq.w	8007002 <SCSI_ProcessCmd+0x2c2>
 8006d8e:	d827      	bhi.n	8006de0 <SCSI_ProcessCmd+0xa0>
 8006d90:	2b23      	cmp	r3, #35	; 0x23
 8006d92:	f000 810a 	beq.w	8006faa <SCSI_ProcessCmd+0x26a>
 8006d96:	2b25      	cmp	r3, #37	; 0x25
 8006d98:	d1e5      	bne.n	8006d66 <SCSI_ProcessCmd+0x26>
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef*)pdev->pClassData;
 8006d9a:	f8d0 6290 	ldr.w	r6, [r0, #656]	; 0x290
  if(((USBD_StorageTypeDef *)pdev->pUserData)->GetCapacity(lun, &hmsc->scsi_blk_nbr, &hmsc->scsi_blk_size) != 0)
 8006d9e:	f8d0 3294 	ldr.w	r3, [r0, #660]	; 0x294
 8006da2:	f206 225e 	addw	r2, r6, #606	; 0x25e
 8006da6:	4620      	mov	r0, r4
 8006da8:	685b      	ldr	r3, [r3, #4]
 8006daa:	f506 7118 	add.w	r1, r6, #608	; 0x260
 8006dae:	4798      	blx	r3
 8006db0:	4604      	mov	r4, r0
 8006db2:	2800      	cmp	r0, #0
 8006db4:	f040 810d 	bne.w	8006fd2 <SCSI_ProcessCmd+0x292>
    hmsc->bot_data[0] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 24);
 8006db8:	f8d6 3260 	ldr.w	r3, [r6, #608]	; 0x260
    hmsc->bot_data[4] = (uint8_t)(hmsc->scsi_blk_size >>  24);
 8006dbc:	7430      	strb	r0, [r6, #16]
    hmsc->bot_data[0] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 24);
 8006dbe:	3b01      	subs	r3, #1
 8006dc0:	0e1a      	lsrs	r2, r3, #24
 8006dc2:	7332      	strb	r2, [r6, #12]
    hmsc->bot_data[1] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 16);
 8006dc4:	0c1a      	lsrs	r2, r3, #16
 8006dc6:	7372      	strb	r2, [r6, #13]
    hmsc->bot_data[3] = (uint8_t)(hmsc->scsi_blk_nbr - 1U);
 8006dc8:	73f3      	strb	r3, [r6, #15]
    hmsc->bot_data[2] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >>  8);
 8006dca:	0a1a      	lsrs	r2, r3, #8
    hmsc->bot_data[4] = (uint8_t)(hmsc->scsi_blk_size >>  24);
 8006dcc:	f8b6 325e 	ldrh.w	r3, [r6, #606]	; 0x25e
    hmsc->bot_data[2] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >>  8);
 8006dd0:	73b2      	strb	r2, [r6, #14]
    hmsc->bot_data[7] = (uint8_t)(hmsc->scsi_blk_size);
 8006dd2:	74f3      	strb	r3, [r6, #19]
    hmsc->bot_data[6] = (uint8_t)(hmsc->scsi_blk_size >>  8);
 8006dd4:	0a1a      	lsrs	r2, r3, #8
    hmsc->bot_data_length = 8U;
 8006dd6:	2308      	movs	r3, #8
    hmsc->bot_data[5] = (uint8_t)(hmsc->scsi_blk_size >>  16);
 8006dd8:	7470      	strb	r0, [r6, #17]
    hmsc->bot_data[6] = (uint8_t)(hmsc->scsi_blk_size >>  8);
 8006dda:	74b2      	strb	r2, [r6, #18]
    hmsc->bot_data_length = 8U;
 8006ddc:	8173      	strh	r3, [r6, #10]
 8006dde:	e06b      	b.n	8006eb8 <SCSI_ProcessCmd+0x178>
  switch (cmd[0])
 8006de0:	2b2f      	cmp	r3, #47	; 0x2f
 8006de2:	f000 81c2 	beq.w	800716a <SCSI_ProcessCmd+0x42a>
 8006de6:	2b5a      	cmp	r3, #90	; 0x5a
 8006de8:	f000 80d0 	beq.w	8006f8c <SCSI_ProcessCmd+0x24c>
 8006dec:	2b2a      	cmp	r3, #42	; 0x2a
 8006dee:	d1ba      	bne.n	8006d66 <SCSI_ProcessCmd+0x26>
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef*) pdev->pClassData;
 8006df0:	f8d0 6290 	ldr.w	r6, [r0, #656]	; 0x290
  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 8006df4:	7a33      	ldrb	r3, [r6, #8]
 8006df6:	2b00      	cmp	r3, #0
 8006df8:	f040 8177 	bne.w	80070ea <SCSI_ProcessCmd+0x3aa>
    if ((hmsc->cbw.bmFlags & 0x80U) == 0x80U)
 8006dfc:	f996 3218 	ldrsb.w	r3, [r6, #536]	; 0x218
 8006e00:	2b00      	cmp	r3, #0
 8006e02:	db44      	blt.n	8006e8e <SCSI_ProcessCmd+0x14e>
    if(((USBD_StorageTypeDef *)pdev->pUserData)->IsReady(lun) != 0)
 8006e04:	f8d0 3294 	ldr.w	r3, [r0, #660]	; 0x294
 8006e08:	4608      	mov	r0, r1
 8006e0a:	689b      	ldr	r3, [r3, #8]
 8006e0c:	4798      	blx	r3
 8006e0e:	2800      	cmp	r0, #0
 8006e10:	f040 80df 	bne.w	8006fd2 <SCSI_ProcessCmd+0x292>
    if(((USBD_StorageTypeDef *)pdev->pUserData)->IsWriteProtected(lun) != 0)
 8006e14:	f8d5 3294 	ldr.w	r3, [r5, #660]	; 0x294
 8006e18:	4620      	mov	r0, r4
 8006e1a:	68db      	ldr	r3, [r3, #12]
 8006e1c:	4798      	blx	r3
 8006e1e:	4604      	mov	r4, r0
 8006e20:	2800      	cmp	r0, #0
 8006e22:	f040 80d6 	bne.w	8006fd2 <SCSI_ProcessCmd+0x292>
                          ((uint32_t)params[3] << 16) |
 8006e26:	78fa      	ldrb	r2, [r7, #3]
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8006e28:	78bb      	ldrb	r3, [r7, #2]
                          ((uint32_t)params[3] << 16) |
 8006e2a:	0412      	lsls	r2, r2, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8006e2c:	ea42 6203 	orr.w	r2, r2, r3, lsl #24
                           (uint32_t)params[5];
 8006e30:	797b      	ldrb	r3, [r7, #5]
                          ((uint32_t)params[4] << 8) |
 8006e32:	431a      	orrs	r2, r3
 8006e34:	793b      	ldrb	r3, [r7, #4]
 8006e36:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8006e3a:	f8c6 2264 	str.w	r2, [r6, #612]	; 0x264
    hmsc->scsi_blk_len = ((uint32_t)params[7] << 8) |
 8006e3e:	79f9      	ldrb	r1, [r7, #7]
                          (uint32_t)params[8];
 8006e40:	7a3b      	ldrb	r3, [r7, #8]
    hmsc->scsi_blk_len = ((uint32_t)params[7] << 8) |
 8006e42:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
static int8_t SCSI_CheckAddressRange (USBD_HandleTypeDef *pdev, uint8_t lun,
                                      uint32_t blk_offset, uint32_t blk_nbr)
{
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef*) pdev->pClassData;

  if ((blk_offset + blk_nbr) > hmsc->scsi_blk_nbr)
 8006e46:	f8d5 1290 	ldr.w	r1, [r5, #656]	; 0x290
    hmsc->scsi_blk_len = ((uint32_t)params[7] << 8) |
 8006e4a:	f8c6 3268 	str.w	r3, [r6, #616]	; 0x268
  if ((blk_offset + blk_nbr) > hmsc->scsi_blk_nbr)
 8006e4e:	f8d1 1260 	ldr.w	r1, [r1, #608]	; 0x260
 8006e52:	441a      	add	r2, r3
 8006e54:	428a      	cmp	r2, r1
 8006e56:	d81a      	bhi.n	8006e8e <SCSI_ProcessCmd+0x14e>
    len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 8006e58:	f8b6 225e 	ldrh.w	r2, [r6, #606]	; 0x25e
 8006e5c:	4353      	muls	r3, r2
    if (hmsc->cbw.dDataLength != len)
 8006e5e:	f8d6 2214 	ldr.w	r2, [r6, #532]	; 0x214
 8006e62:	4293      	cmp	r3, r2
 8006e64:	d113      	bne.n	8006e8e <SCSI_ProcessCmd+0x14e>
    len = MIN(len, MSC_MEDIA_PACKET);
 8006e66:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
    hmsc->bot_state = USBD_BOT_DATA_OUT;
 8006e6a:	f04f 0101 	mov.w	r1, #1
    len = MIN(len, MSC_MEDIA_PACKET);
 8006e6e:	bf28      	it	cs
 8006e70:	f44f 7300 	movcs.w	r3, #512	; 0x200
    hmsc->bot_state = USBD_BOT_DATA_OUT;
 8006e74:	7231      	strb	r1, [r6, #8]
    USBD_LL_PrepareReceive (pdev, MSC_EPOUT_ADDR, hmsc->bot_data, len);
 8006e76:	b29b      	uxth	r3, r3
 8006e78:	f106 020c 	add.w	r2, r6, #12
 8006e7c:	4628      	mov	r0, r5
 8006e7e:	f008 f945 	bl	800f10c <USBD_LL_PrepareReceive>
 8006e82:	e019      	b.n	8006eb8 <SCSI_ProcessCmd+0x178>
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef*)pdev->pClassData;
 8006e84:	f8d0 6290 	ldr.w	r6, [r0, #656]	; 0x290
  if (hmsc->cbw.dDataLength != 0U)
 8006e88:	f8d6 7214 	ldr.w	r7, [r6, #532]	; 0x214
 8006e8c:	b127      	cbz	r7, 8006e98 <SCSI_ProcessCmd+0x158>
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8006e8e:	2105      	movs	r1, #5
  if( ((USBD_StorageTypeDef *)pdev->pUserData)->Read(lun,
                              hmsc->bot_data,
                              hmsc->scsi_blk_addr,
                              (len / hmsc->scsi_blk_size)) < 0)
  {
    SCSI_SenseCode(pdev, lun, HARDWARE_ERROR, UNRECOVERED_READ_ERROR);
 8006e90:	4628      	mov	r0, r5
 8006e92:	f7ff ff3f 	bl	8006d14 <SCSI_SenseCode.constprop.8>
 8006e96:	e00c      	b.n	8006eb2 <SCSI_ProcessCmd+0x172>
  if(((USBD_StorageTypeDef *)pdev->pUserData)->IsReady(lun) != 0)
 8006e98:	f8d0 3294 	ldr.w	r3, [r0, #660]	; 0x294
 8006e9c:	4608      	mov	r0, r1
 8006e9e:	689b      	ldr	r3, [r3, #8]
 8006ea0:	4798      	blx	r3
 8006ea2:	4604      	mov	r4, r0
 8006ea4:	b138      	cbz	r0, 8006eb6 <SCSI_ProcessCmd+0x176>
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8006ea6:	2102      	movs	r1, #2
 8006ea8:	4628      	mov	r0, r5
 8006eaa:	f7ff ff33 	bl	8006d14 <SCSI_SenseCode.constprop.8>
    hmsc->bot_state = USBD_BOT_NO_DATA;
 8006eae:	2305      	movs	r3, #5
 8006eb0:	7233      	strb	r3, [r6, #8]
  return 0;
 8006eb2:	2400      	movs	r4, #0
 8006eb4:	e000      	b.n	8006eb8 <SCSI_ProcessCmd+0x178>
  hmsc->bot_data_length = 0U;
 8006eb6:	8170      	strh	r0, [r6, #10]
}
 8006eb8:	4620      	mov	r0, r4
 8006eba:	b003      	add	sp, #12
 8006ebc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006ec0:	f8d0 3290 	ldr.w	r3, [r0, #656]	; 0x290
    hmsc->bot_data[i] = 0U;
 8006ec4:	2000      	movs	r0, #0
 8006ec6:	f103 020c 	add.w	r2, r3, #12
 8006eca:	f103 011e 	add.w	r1, r3, #30
 8006ece:	f802 0b01 	strb.w	r0, [r2], #1
  for(i = 0U ;i < REQUEST_SENSE_DATA_LEN; i++)
 8006ed2:	428a      	cmp	r2, r1
 8006ed4:	d1fb      	bne.n	8006ece <SCSI_ProcessCmd+0x18e>
  hmsc->bot_data[0]	= 0x70U;
 8006ed6:	2270      	movs	r2, #112	; 0x70
 8006ed8:	731a      	strb	r2, [r3, #12]
  hmsc->bot_data[7]	= REQUEST_SENSE_DATA_LEN - 6U;
 8006eda:	220c      	movs	r2, #12
 8006edc:	74da      	strb	r2, [r3, #19]
  if((hmsc->scsi_sense_head != hmsc->scsi_sense_tail)) {
 8006ede:	f893 125d 	ldrb.w	r1, [r3, #605]	; 0x25d
 8006ee2:	f893 225c 	ldrb.w	r2, [r3, #604]	; 0x25c
 8006ee6:	4291      	cmp	r1, r2
 8006ee8:	d012      	beq.n	8006f10 <SCSI_ProcessCmd+0x1d0>
 8006eea:	eb03 01c2 	add.w	r1, r3, r2, lsl #3
    hmsc->scsi_sense_head++;
 8006eee:	3201      	adds	r2, #1
    hmsc->bot_data[2]     = hmsc->scsi_sense[hmsc->scsi_sense_head].Skey;
 8006ef0:	f891 423c 	ldrb.w	r4, [r1, #572]	; 0x23c
 8006ef4:	739c      	strb	r4, [r3, #14]
    hmsc->bot_data[12]    = hmsc->scsi_sense[hmsc->scsi_sense_head].w.b.ASCQ;
 8006ef6:	f891 4241 	ldrb.w	r4, [r1, #577]	; 0x241
 8006efa:	761c      	strb	r4, [r3, #24]
    hmsc->scsi_sense_head++;
 8006efc:	b2d2      	uxtb	r2, r2
    hmsc->bot_data[13]    = hmsc->scsi_sense[hmsc->scsi_sense_head].w.b.ASC;
 8006efe:	f891 1240 	ldrb.w	r1, [r1, #576]	; 0x240
 8006f02:	7659      	strb	r1, [r3, #25]
    if (hmsc->scsi_sense_head == SENSE_LIST_DEEPTH)
 8006f04:	2a04      	cmp	r2, #4
    hmsc->scsi_sense_head++;
 8006f06:	bf14      	ite	ne
 8006f08:	f883 225c 	strbne.w	r2, [r3, #604]	; 0x25c
      hmsc->scsi_sense_head = 0U;
 8006f0c:	f883 025c 	strbeq.w	r0, [r3, #604]	; 0x25c
  hmsc->bot_data_length = REQUEST_SENSE_DATA_LEN;
 8006f10:	2212      	movs	r2, #18
 8006f12:	815a      	strh	r2, [r3, #10]
  if (params[4] <= REQUEST_SENSE_DATA_LEN)
 8006f14:	793a      	ldrb	r2, [r7, #4]
 8006f16:	2a12      	cmp	r2, #18
    hmsc->bot_data_length = params[4];
 8006f18:	bf98      	it	ls
 8006f1a:	815a      	strhls	r2, [r3, #10]
 8006f1c:	e7c9      	b.n	8006eb2 <SCSI_ProcessCmd+0x172>
  if (params[1] & 0x01U)/*Evpd is set*/
 8006f1e:	787b      	ldrb	r3, [r7, #1]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef*)pdev->pClassData;
 8006f20:	f8d0 2290 	ldr.w	r2, [r0, #656]	; 0x290
  if (params[1] & 0x01U)/*Evpd is set*/
 8006f24:	07db      	lsls	r3, r3, #31
 8006f26:	d50c      	bpl.n	8006f42 <SCSI_ProcessCmd+0x202>
    hmsc->bot_data_length = len;
 8006f28:	2307      	movs	r3, #7
 8006f2a:	4999      	ldr	r1, [pc, #612]	; (8007190 <SCSI_ProcessCmd+0x450>)
 8006f2c:	8153      	strh	r3, [r2, #10]
 8006f2e:	f102 0312 	add.w	r3, r2, #18
 8006f32:	320b      	adds	r2, #11
      hmsc->bot_data[len] = MSC_Page00_Inquiry_Data[len];
 8006f34:	f811 0d01 	ldrb.w	r0, [r1, #-1]!
 8006f38:	f803 0901 	strb.w	r0, [r3], #-1
    while (len)
 8006f3c:	4293      	cmp	r3, r2
 8006f3e:	d1f9      	bne.n	8006f34 <SCSI_ProcessCmd+0x1f4>
 8006f40:	e7b7      	b.n	8006eb2 <SCSI_ProcessCmd+0x172>
    pPage = (uint8_t *)(void *)&((USBD_StorageTypeDef *)pdev->pUserData)->pInquiry[lun * STANDARD_INQUIRY_DATA_LEN];
 8006f42:	f8d0 3294 	ldr.w	r3, [r0, #660]	; 0x294
 8006f46:	69db      	ldr	r3, [r3, #28]
 8006f48:	eb01 04c1 	add.w	r4, r1, r1, lsl #3
 8006f4c:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8006f50:	7939      	ldrb	r1, [r7, #4]
    len = (uint16_t)pPage[4] + 5U;
 8006f52:	7923      	ldrb	r3, [r4, #4]
 8006f54:	3305      	adds	r3, #5
 8006f56:	428b      	cmp	r3, r1
 8006f58:	bf28      	it	cs
 8006f5a:	460b      	movcs	r3, r1
    hmsc->bot_data_length = len;
 8006f5c:	8153      	strh	r3, [r2, #10]
    while (len)
 8006f5e:	2b00      	cmp	r3, #0
 8006f60:	d0a7      	beq.n	8006eb2 <SCSI_ProcessCmd+0x172>
      len--;
 8006f62:	3b01      	subs	r3, #1
 8006f64:	b29b      	uxth	r3, r3
      hmsc->bot_data[len] = pPage[len];
 8006f66:	18d1      	adds	r1, r2, r3
 8006f68:	5ce0      	ldrb	r0, [r4, r3]
 8006f6a:	7308      	strb	r0, [r1, #12]
 8006f6c:	e7f7      	b.n	8006f5e <SCSI_ProcessCmd+0x21e>
 8006f6e:	f8d0 3290 	ldr.w	r3, [r0, #656]	; 0x290
 8006f72:	4988      	ldr	r1, [pc, #544]	; (8007194 <SCSI_ProcessCmd+0x454>)
  hmsc->bot_data_length = len;
 8006f74:	2208      	movs	r2, #8
 8006f76:	815a      	strh	r2, [r3, #10]
 8006f78:	f103 0213 	add.w	r2, r3, #19
 8006f7c:	330b      	adds	r3, #11
    hmsc->bot_data[len] = MSC_Mode_Sense6_data[len];
 8006f7e:	f811 0d01 	ldrb.w	r0, [r1, #-1]!
 8006f82:	f802 0901 	strb.w	r0, [r2], #-1
  while (len)
 8006f86:	4293      	cmp	r3, r2
 8006f88:	d1f9      	bne.n	8006f7e <SCSI_ProcessCmd+0x23e>
 8006f8a:	e792      	b.n	8006eb2 <SCSI_ProcessCmd+0x172>
 8006f8c:	f8d0 3290 	ldr.w	r3, [r0, #656]	; 0x290
 8006f90:	4981      	ldr	r1, [pc, #516]	; (8007198 <SCSI_ProcessCmd+0x458>)
  hmsc->bot_data_length = len;
 8006f92:	2208      	movs	r2, #8
 8006f94:	815a      	strh	r2, [r3, #10]
 8006f96:	f103 0213 	add.w	r2, r3, #19
 8006f9a:	330b      	adds	r3, #11
    hmsc->bot_data[len] = MSC_Mode_Sense10_data[len];
 8006f9c:	f811 0d01 	ldrb.w	r0, [r1, #-1]!
 8006fa0:	f802 0901 	strb.w	r0, [r2], #-1
  while (len)
 8006fa4:	429a      	cmp	r2, r3
 8006fa6:	d1f9      	bne.n	8006f9c <SCSI_ProcessCmd+0x25c>
 8006fa8:	e783      	b.n	8006eb2 <SCSI_ProcessCmd+0x172>
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef*)pdev->pClassData;
 8006faa:	f8d0 6290 	ldr.w	r6, [r0, #656]	; 0x290
    hmsc->bot_data[i] = 0U;
 8006fae:	2100      	movs	r1, #0
 8006fb0:	f106 030c 	add.w	r3, r6, #12
 8006fb4:	f106 0218 	add.w	r2, r6, #24
 8006fb8:	f803 1b01 	strb.w	r1, [r3], #1
  for(i = 0U; i < 12U ; i++)
 8006fbc:	4293      	cmp	r3, r2
 8006fbe:	d1fb      	bne.n	8006fb8 <SCSI_ProcessCmd+0x278>
  if(((USBD_StorageTypeDef *)pdev->pUserData)->GetCapacity(lun, &blk_nbr, &blk_size) != 0U)
 8006fc0:	f8d5 3294 	ldr.w	r3, [r5, #660]	; 0x294
 8006fc4:	f10d 0202 	add.w	r2, sp, #2
 8006fc8:	685b      	ldr	r3, [r3, #4]
 8006fca:	a901      	add	r1, sp, #4
 8006fcc:	4620      	mov	r0, r4
 8006fce:	4798      	blx	r3
 8006fd0:	b108      	cbz	r0, 8006fd6 <SCSI_ProcessCmd+0x296>
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8006fd2:	2102      	movs	r1, #2
 8006fd4:	e75c      	b.n	8006e90 <SCSI_ProcessCmd+0x150>
    hmsc->bot_data[3] = 0x08U;
 8006fd6:	2308      	movs	r3, #8
 8006fd8:	73f3      	strb	r3, [r6, #15]
    hmsc->bot_data[4] = (uint8_t)((blk_nbr - 1U) >> 24);
 8006fda:	9b01      	ldr	r3, [sp, #4]
    hmsc->bot_data[9] = (uint8_t)(blk_size >>  16);
 8006fdc:	7570      	strb	r0, [r6, #21]
    hmsc->bot_data[4] = (uint8_t)((blk_nbr - 1U) >> 24);
 8006fde:	3b01      	subs	r3, #1
 8006fe0:	0e1a      	lsrs	r2, r3, #24
 8006fe2:	7432      	strb	r2, [r6, #16]
    hmsc->bot_data[5] = (uint8_t)((blk_nbr - 1U) >> 16);
 8006fe4:	0c1a      	lsrs	r2, r3, #16
 8006fe6:	7472      	strb	r2, [r6, #17]
    hmsc->bot_data[7] = (uint8_t)(blk_nbr - 1U);
 8006fe8:	74f3      	strb	r3, [r6, #19]
    hmsc->bot_data[6] = (uint8_t)((blk_nbr - 1U) >>  8);
 8006fea:	0a1a      	lsrs	r2, r3, #8
    hmsc->bot_data[8] = 0x02U;
 8006fec:	2302      	movs	r3, #2
 8006fee:	7533      	strb	r3, [r6, #20]
    hmsc->bot_data[9] = (uint8_t)(blk_size >>  16);
 8006ff0:	f8bd 3002 	ldrh.w	r3, [sp, #2]
    hmsc->bot_data[6] = (uint8_t)((blk_nbr - 1U) >>  8);
 8006ff4:	74b2      	strb	r2, [r6, #18]
    hmsc->bot_data[11] = (uint8_t)(blk_size);
 8006ff6:	75f3      	strb	r3, [r6, #23]
    hmsc->bot_data[10] = (uint8_t)(blk_size >>  8);
 8006ff8:	0a1a      	lsrs	r2, r3, #8
    hmsc->bot_data_length = 12U;
 8006ffa:	230c      	movs	r3, #12
    hmsc->bot_data[10] = (uint8_t)(blk_size >>  8);
 8006ffc:	75b2      	strb	r2, [r6, #22]
    hmsc->bot_data_length = 12U;
 8006ffe:	8173      	strh	r3, [r6, #10]
 8007000:	e757      	b.n	8006eb2 <SCSI_ProcessCmd+0x172>
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef*) pdev->pClassData;
 8007002:	f8d0 6290 	ldr.w	r6, [r0, #656]	; 0x290
  if(hmsc->bot_state == USBD_BOT_IDLE)  /* Idle */
 8007006:	7a33      	ldrb	r3, [r6, #8]
 8007008:	bb7b      	cbnz	r3, 800706a <SCSI_ProcessCmd+0x32a>
    if ((hmsc->cbw.bmFlags & 0x80U) != 0x80U)
 800700a:	f996 3218 	ldrsb.w	r3, [r6, #536]	; 0x218
 800700e:	2b00      	cmp	r3, #0
 8007010:	f6bf af3d 	bge.w	8006e8e <SCSI_ProcessCmd+0x14e>
    if(((USBD_StorageTypeDef *)pdev->pUserData)->IsReady(lun) != 0)
 8007014:	f8d0 3294 	ldr.w	r3, [r0, #660]	; 0x294
 8007018:	4608      	mov	r0, r1
 800701a:	689b      	ldr	r3, [r3, #8]
 800701c:	4798      	blx	r3
 800701e:	2800      	cmp	r0, #0
 8007020:	d1d7      	bne.n	8006fd2 <SCSI_ProcessCmd+0x292>
                          ((uint32_t)params[3] << 16) |
 8007022:	78fb      	ldrb	r3, [r7, #3]
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8007024:	78ba      	ldrb	r2, [r7, #2]
                          ((uint32_t)params[3] << 16) |
 8007026:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8007028:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
                           (uint32_t)params[5];
 800702c:	797a      	ldrb	r2, [r7, #5]
                          ((uint32_t)params[4] <<  8) |
 800702e:	4313      	orrs	r3, r2
 8007030:	793a      	ldrb	r2, [r7, #4]
 8007032:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8007036:	f8c6 3264 	str.w	r3, [r6, #612]	; 0x264
    hmsc->scsi_blk_len =  ((uint32_t)params[7] <<  8) | (uint32_t)params[8];
 800703a:	79f9      	ldrb	r1, [r7, #7]
 800703c:	7a3a      	ldrb	r2, [r7, #8]
 800703e:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
  if ((blk_offset + blk_nbr) > hmsc->scsi_blk_nbr)
 8007042:	f8d5 1290 	ldr.w	r1, [r5, #656]	; 0x290
    hmsc->scsi_blk_len =  ((uint32_t)params[7] <<  8) | (uint32_t)params[8];
 8007046:	f8c6 2268 	str.w	r2, [r6, #616]	; 0x268
  if ((blk_offset + blk_nbr) > hmsc->scsi_blk_nbr)
 800704a:	f8d1 1260 	ldr.w	r1, [r1, #608]	; 0x260
 800704e:	4413      	add	r3, r2
 8007050:	428b      	cmp	r3, r1
 8007052:	f63f af1c 	bhi.w	8006e8e <SCSI_ProcessCmd+0x14e>
    hmsc->bot_state = USBD_BOT_DATA_IN;
 8007056:	2302      	movs	r3, #2
 8007058:	7233      	strb	r3, [r6, #8]
    if (hmsc->cbw.dDataLength != (hmsc->scsi_blk_len * hmsc->scsi_blk_size))
 800705a:	f8b6 325e 	ldrh.w	r3, [r6, #606]	; 0x25e
 800705e:	435a      	muls	r2, r3
 8007060:	f8d6 3214 	ldr.w	r3, [r6, #532]	; 0x214
 8007064:	4293      	cmp	r3, r2
 8007066:	f47f af12 	bne.w	8006e8e <SCSI_ProcessCmd+0x14e>
  hmsc->bot_data_length = MSC_MEDIA_PACKET;
 800706a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800706e:	8173      	strh	r3, [r6, #10]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef*)pdev->pClassData;
 8007070:	f8d5 6290 	ldr.w	r6, [r5, #656]	; 0x290
  if( ((USBD_StorageTypeDef *)pdev->pUserData)->Read(lun,
 8007074:	f8d5 2294 	ldr.w	r2, [r5, #660]	; 0x294
  uint32_t len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 8007078:	f8b6 325e 	ldrh.w	r3, [r6, #606]	; 0x25e
 800707c:	f8d6 7268 	ldr.w	r7, [r6, #616]	; 0x268
  if( ((USBD_StorageTypeDef *)pdev->pUserData)->Read(lun,
 8007080:	f8d2 9010 	ldr.w	r9, [r2, #16]
 8007084:	f8d6 2264 	ldr.w	r2, [r6, #612]	; 0x264
  uint32_t len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 8007088:	435f      	muls	r7, r3
  len = MIN(len, MSC_MEDIA_PACKET);
 800708a:	f5b7 7f00 	cmp.w	r7, #512	; 0x200
                              hmsc->bot_data,
 800708e:	f106 080c 	add.w	r8, r6, #12
  len = MIN(len, MSC_MEDIA_PACKET);
 8007092:	bf28      	it	cs
 8007094:	f44f 7700 	movcs.w	r7, #512	; 0x200
  if( ((USBD_StorageTypeDef *)pdev->pUserData)->Read(lun,
 8007098:	4641      	mov	r1, r8
                              (len / hmsc->scsi_blk_size)) < 0)
 800709a:	fbb7 f3f3 	udiv	r3, r7, r3
  if( ((USBD_StorageTypeDef *)pdev->pUserData)->Read(lun,
 800709e:	4620      	mov	r0, r4
 80070a0:	b29b      	uxth	r3, r3
 80070a2:	47c8      	blx	r9
 80070a4:	2800      	cmp	r0, #0
 80070a6:	da01      	bge.n	80070ac <SCSI_ProcessCmd+0x36c>
    SCSI_SenseCode(pdev, lun, HARDWARE_ERROR, UNRECOVERED_READ_ERROR);
 80070a8:	2104      	movs	r1, #4
 80070aa:	e6f1      	b.n	8006e90 <SCSI_ProcessCmd+0x150>
    return -1;
  }

  USBD_LL_Transmit (pdev, MSC_EPIN_ADDR, hmsc->bot_data, len);
 80070ac:	b2bb      	uxth	r3, r7
 80070ae:	4642      	mov	r2, r8
 80070b0:	2181      	movs	r1, #129	; 0x81
 80070b2:	4628      	mov	r0, r5
 80070b4:	f008 f81c 	bl	800f0f0 <USBD_LL_Transmit>

  hmsc->scsi_blk_addr += (len / hmsc->scsi_blk_size);
 80070b8:	f8b6 425e 	ldrh.w	r4, [r6, #606]	; 0x25e
 80070bc:	f8d6 2264 	ldr.w	r2, [r6, #612]	; 0x264
 80070c0:	fbb7 f3f4 	udiv	r3, r7, r4
  hmsc->scsi_blk_len -= (len / hmsc->scsi_blk_size);
 80070c4:	f8d6 4268 	ldr.w	r4, [r6, #616]	; 0x268
  hmsc->scsi_blk_addr += (len / hmsc->scsi_blk_size);
 80070c8:	441a      	add	r2, r3
  hmsc->scsi_blk_len -= (len / hmsc->scsi_blk_size);
 80070ca:	1ae4      	subs	r4, r4, r3

  /* case 6 : Hi = Di */
  hmsc->csw.dDataResidue -= len;
 80070cc:	f8d6 3234 	ldr.w	r3, [r6, #564]	; 0x234
  hmsc->scsi_blk_addr += (len / hmsc->scsi_blk_size);
 80070d0:	f8c6 2264 	str.w	r2, [r6, #612]	; 0x264
  hmsc->csw.dDataResidue -= len;
 80070d4:	1bdf      	subs	r7, r3, r7
  hmsc->scsi_blk_len -= (len / hmsc->scsi_blk_size);
 80070d6:	f8c6 4268 	str.w	r4, [r6, #616]	; 0x268
  hmsc->csw.dDataResidue -= len;
 80070da:	f8c6 7234 	str.w	r7, [r6, #564]	; 0x234

  if (hmsc->scsi_blk_len == 0U)
 80070de:	2c00      	cmp	r4, #0
 80070e0:	f47f aee7 	bne.w	8006eb2 <SCSI_ProcessCmd+0x172>
  {
    hmsc->bot_state = USBD_BOT_LAST_DATA_IN;
 80070e4:	2303      	movs	r3, #3
 80070e6:	7233      	strb	r3, [r6, #8]
 80070e8:	e6e6      	b.n	8006eb8 <SCSI_ProcessCmd+0x178>
*/

static int8_t SCSI_ProcessWrite (USBD_HandleTypeDef  *pdev, uint8_t lun)
{
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef*) pdev->pClassData;
  uint32_t len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 80070ea:	f8b6 325e 	ldrh.w	r3, [r6, #606]	; 0x25e
 80070ee:	f8d6 7268 	ldr.w	r7, [r6, #616]	; 0x268

  len = MIN(len, MSC_MEDIA_PACKET);

  if(((USBD_StorageTypeDef *)pdev->pUserData)->Write(lun, hmsc->bot_data,
 80070f2:	f8d0 2294 	ldr.w	r2, [r0, #660]	; 0x294
  uint32_t len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 80070f6:	435f      	muls	r7, r3
  len = MIN(len, MSC_MEDIA_PACKET);
 80070f8:	f5b7 7f00 	cmp.w	r7, #512	; 0x200
  if(((USBD_StorageTypeDef *)pdev->pUserData)->Write(lun, hmsc->bot_data,
 80070fc:	f106 080c 	add.w	r8, r6, #12
  len = MIN(len, MSC_MEDIA_PACKET);
 8007100:	bf28      	it	cs
 8007102:	f44f 7700 	movcs.w	r7, #512	; 0x200
  if(((USBD_StorageTypeDef *)pdev->pUserData)->Write(lun, hmsc->bot_data,
 8007106:	f8d2 9014 	ldr.w	r9, [r2, #20]
                             hmsc->scsi_blk_addr,
                             (len / hmsc->scsi_blk_size)) < 0)
 800710a:	fbb7 f3f3 	udiv	r3, r7, r3
  if(((USBD_StorageTypeDef *)pdev->pUserData)->Write(lun, hmsc->bot_data,
 800710e:	f8d6 2264 	ldr.w	r2, [r6, #612]	; 0x264
 8007112:	b29b      	uxth	r3, r3
 8007114:	4641      	mov	r1, r8
 8007116:	4620      	mov	r0, r4
 8007118:	47c8      	blx	r9
 800711a:	2800      	cmp	r0, #0
 800711c:	dbc4      	blt.n	80070a8 <SCSI_ProcessCmd+0x368>
    SCSI_SenseCode(pdev, lun, HARDWARE_ERROR, WRITE_FAULT);

    return -1;
  }

  hmsc->scsi_blk_addr += (len / hmsc->scsi_blk_size);
 800711e:	f8d6 2264 	ldr.w	r2, [r6, #612]	; 0x264
 8007122:	f8b6 125e 	ldrh.w	r1, [r6, #606]	; 0x25e
 8007126:	fbb7 f0f1 	udiv	r0, r7, r1
 800712a:	4402      	add	r2, r0
  hmsc->scsi_blk_len -= (len / hmsc->scsi_blk_size);
 800712c:	f8d6 3268 	ldr.w	r3, [r6, #616]	; 0x268
  hmsc->scsi_blk_addr += (len / hmsc->scsi_blk_size);
 8007130:	f8c6 2264 	str.w	r2, [r6, #612]	; 0x264

  /* case 12 : Ho = Do */
  hmsc->csw.dDataResidue -= len;
 8007134:	f8d6 2234 	ldr.w	r2, [r6, #564]	; 0x234
  hmsc->scsi_blk_len -= (len / hmsc->scsi_blk_size);
 8007138:	1a1b      	subs	r3, r3, r0
  hmsc->csw.dDataResidue -= len;
 800713a:	1bd7      	subs	r7, r2, r7
  hmsc->scsi_blk_len -= (len / hmsc->scsi_blk_size);
 800713c:	f8c6 3268 	str.w	r3, [r6, #616]	; 0x268
  hmsc->csw.dDataResidue -= len;
 8007140:	f8c6 7234 	str.w	r7, [r6, #564]	; 0x234

  if (hmsc->scsi_blk_len == 0U)
 8007144:	b923      	cbnz	r3, 8007150 <SCSI_ProcessCmd+0x410>
  {
    MSC_BOT_SendCSW (pdev, USBD_CSW_CMD_PASSED);
 8007146:	2100      	movs	r1, #0
 8007148:	4628      	mov	r0, r5
 800714a:	f7ff fd29 	bl	8006ba0 <MSC_BOT_SendCSW>
 800714e:	e6b0      	b.n	8006eb2 <SCSI_ProcessCmd+0x172>
  }
  else
  {
    len = MIN((hmsc->scsi_blk_len * hmsc->scsi_blk_size), MSC_MEDIA_PACKET);
 8007150:	434b      	muls	r3, r1
 8007152:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007156:	bf28      	it	cs
 8007158:	f44f 7300 	movcs.w	r3, #512	; 0x200
    /* Prepare EP to Receive next packet */
    USBD_LL_PrepareReceive (pdev, MSC_EPOUT_ADDR, hmsc->bot_data, len);
 800715c:	b29b      	uxth	r3, r3
 800715e:	4642      	mov	r2, r8
 8007160:	2101      	movs	r1, #1
 8007162:	4628      	mov	r0, r5
 8007164:	f007 ffd2 	bl	800f10c <USBD_LL_PrepareReceive>
 8007168:	e6a3      	b.n	8006eb2 <SCSI_ProcessCmd+0x172>
  if ((params[1]& 0x02U) == 0x02U)
 800716a:	7854      	ldrb	r4, [r2, #1]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef*) pdev->pClassData;
 800716c:	f8d0 3290 	ldr.w	r3, [r0, #656]	; 0x290
  if ((params[1]& 0x02U) == 0x02U)
 8007170:	f014 0402 	ands.w	r4, r4, #2
 8007174:	f47f ae8b 	bne.w	8006e8e <SCSI_ProcessCmd+0x14e>
  if ((blk_offset + blk_nbr) > hmsc->scsi_blk_nbr)
 8007178:	f8d3 1268 	ldr.w	r1, [r3, #616]	; 0x268
 800717c:	f8d3 2264 	ldr.w	r2, [r3, #612]	; 0x264
 8007180:	440a      	add	r2, r1
 8007182:	f8d3 1260 	ldr.w	r1, [r3, #608]	; 0x260
 8007186:	428a      	cmp	r2, r1
 8007188:	f67f adfc 	bls.w	8006d84 <SCSI_ProcessCmd+0x44>
 800718c:	e67f      	b.n	8006e8e <SCSI_ProcessCmd+0x14e>
 800718e:	bf00      	nop
 8007190:	0801dbcb 	.word	0x0801dbcb
 8007194:	0801dbc4 	.word	0x0801dbc4
 8007198:	0801dbbc 	.word	0x0801dbbc

0800719c <SCSI_SenseCode>:
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef*)pdev->pClassData;
 800719c:	f8d0 1290 	ldr.w	r1, [r0, #656]	; 0x290
  hmsc->scsi_sense[hmsc->scsi_sense_tail].Skey  = sKey;
 80071a0:	f891 325d 	ldrb.w	r3, [r1, #605]	; 0x25d
 80071a4:	eb01 00c3 	add.w	r0, r1, r3, lsl #3
  hmsc->scsi_sense_tail++;
 80071a8:	3301      	adds	r3, #1
 80071aa:	b2db      	uxtb	r3, r3
  hmsc->scsi_sense[hmsc->scsi_sense_tail].Skey  = sKey;
 80071ac:	f880 223c 	strb.w	r2, [r0, #572]	; 0x23c
  if (hmsc->scsi_sense_tail == SENSE_LIST_DEEPTH)
 80071b0:	2b04      	cmp	r3, #4
  hmsc->scsi_sense[hmsc->scsi_sense_tail].w.ASC = ASC << 8;
 80071b2:	f04f 0200 	mov.w	r2, #0
 80071b6:	f880 2240 	strb.w	r2, [r0, #576]	; 0x240
  hmsc->scsi_sense_tail++;
 80071ba:	bf14      	ite	ne
 80071bc:	f881 325d 	strbne.w	r3, [r1, #605]	; 0x25d
    hmsc->scsi_sense_tail = 0U;
 80071c0:	f881 225d 	strbeq.w	r2, [r1, #605]	; 0x25d
 80071c4:	4770      	bx	lr

080071c6 <USBD_Init>:
* @param  pdesc: Descriptor structure address
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev, USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80071c6:	b508      	push	{r3, lr}
  /* Check whether the USB Host handle is valid */
  if(pdev == NULL)
 80071c8:	b180      	cbz	r0, 80071ec <USBD_Init+0x26>
#endif
    return USBD_FAIL;
  }

  /* Unlink previous class*/
  if(pdev->pClass != NULL)
 80071ca:	f8d0 328c 	ldr.w	r3, [r0, #652]	; 0x28c
 80071ce:	b113      	cbz	r3, 80071d6 <USBD_Init+0x10>
  {
    pdev->pClass = NULL;
 80071d0:	2300      	movs	r3, #0
 80071d2:	f8c0 328c 	str.w	r3, [r0, #652]	; 0x28c
  }

  /* Assign USBD Descriptors */
  if(pdesc != NULL)
 80071d6:	b109      	cbz	r1, 80071dc <USBD_Init+0x16>
  {
    pdev->pDesc = pdesc;
 80071d8:	f8c0 1288 	str.w	r1, [r0, #648]	; 0x288
  }

  /* Set Device initial State */
  pdev->dev_state  = USBD_STATE_DEFAULT;
 80071dc:	2301      	movs	r3, #1
 80071de:	f880 3274 	strb.w	r3, [r0, #628]	; 0x274
  pdev->id = id;
 80071e2:	7002      	strb	r2, [r0, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 80071e4:	f007 fede 	bl	800efa4 <USBD_LL_Init>

  return USBD_OK;
 80071e8:	2000      	movs	r0, #0
 80071ea:	bd08      	pop	{r3, pc}
    return USBD_FAIL;
 80071ec:	2002      	movs	r0, #2
}
 80071ee:	bd08      	pop	{r3, pc}

080071f0 <USBD_RegisterClass>:
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
  USBD_StatusTypeDef   status = USBD_OK;
  if(pclass != 0)
 80071f0:	b119      	cbz	r1, 80071fa <USBD_RegisterClass+0xa>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 80071f2:	f8c0 128c 	str.w	r1, [r0, #652]	; 0x28c
    status = USBD_OK;
 80071f6:	2000      	movs	r0, #0
 80071f8:	4770      	bx	lr
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 80071fa:	2002      	movs	r0, #2
  }

  return status;
}
 80071fc:	4770      	bx	lr

080071fe <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start  (USBD_HandleTypeDef *pdev)
{
 80071fe:	b508      	push	{r3, lr}

  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 8007200:	f007 fefe 	bl	800f000 <USBD_LL_Start>

  return USBD_OK;
}
 8007204:	2000      	movs	r0, #0
 8007206:	bd08      	pop	{r3, pc}

08007208 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8007208:	b508      	push	{r3, lr}
  USBD_StatusTypeDef   ret = USBD_FAIL;

  if(pdev->pClass != NULL)
 800720a:	f8d0 328c 	ldr.w	r3, [r0, #652]	; 0x28c
 800720e:	b90b      	cbnz	r3, 8007214 <USBD_SetClassConfig+0xc>
  USBD_StatusTypeDef   ret = USBD_FAIL;
 8007210:	2002      	movs	r0, #2
 8007212:	bd08      	pop	{r3, pc}
  {
    /* Set configuration  and Start the Class*/
    if(pdev->pClass->Init(pdev, cfgidx) == 0U)
 8007214:	681b      	ldr	r3, [r3, #0]
 8007216:	4798      	blx	r3
 8007218:	2800      	cmp	r0, #0
 800721a:	d1f9      	bne.n	8007210 <USBD_SetClassConfig+0x8>
      ret = USBD_OK;
    }
  }

  return ret;
}
 800721c:	bd08      	pop	{r3, pc}

0800721e <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800721e:	b508      	push	{r3, lr}
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8007220:	f8d0 328c 	ldr.w	r3, [r0, #652]	; 0x28c
 8007224:	685b      	ldr	r3, [r3, #4]
 8007226:	4798      	blx	r3
  return USBD_OK;
}
 8007228:	2000      	movs	r0, #0
 800722a:	bd08      	pop	{r3, pc}

0800722c <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800722c:	b538      	push	{r3, r4, r5, lr}
 800722e:	4604      	mov	r4, r0
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8007230:	f500 7520 	add.w	r5, r0, #640	; 0x280
 8007234:	4628      	mov	r0, r5
 8007236:	f000 faec 	bl	8007812 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800723a:	2301      	movs	r3, #1

  pdev->ep0_data_len = pdev->request.wLength;

  switch (pdev->request.bmRequest & 0x1FU)
 800723c:	f894 1280 	ldrb.w	r1, [r4, #640]	; 0x280
  pdev->ep0_state = USBD_EP0_SETUP;
 8007240:	f8c4 326c 	str.w	r3, [r4, #620]	; 0x26c
  pdev->ep0_data_len = pdev->request.wLength;
 8007244:	f8b4 3286 	ldrh.w	r3, [r4, #646]	; 0x286
 8007248:	f8c4 3270 	str.w	r3, [r4, #624]	; 0x270
  switch (pdev->request.bmRequest & 0x1FU)
 800724c:	f001 031f 	and.w	r3, r1, #31
 8007250:	2b01      	cmp	r3, #1
 8007252:	d00e      	beq.n	8007272 <USBD_LL_SetupStage+0x46>
 8007254:	d307      	bcc.n	8007266 <USBD_LL_SetupStage+0x3a>
 8007256:	2b02      	cmp	r3, #2
 8007258:	d010      	beq.n	800727c <USBD_LL_SetupStage+0x50>
  case USB_REQ_RECIPIENT_ENDPOINT:
    USBD_StdEPReq(pdev, &pdev->request);
    break;

  default:
    USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800725a:	f001 0180 	and.w	r1, r1, #128	; 0x80
 800725e:	4620      	mov	r0, r4
 8007260:	f007 ff08 	bl	800f074 <USBD_LL_StallEP>
    break;
 8007264:	e003      	b.n	800726e <USBD_LL_SetupStage+0x42>
    USBD_StdDevReq (pdev, &pdev->request);
 8007266:	4629      	mov	r1, r5
 8007268:	4620      	mov	r0, r4
 800726a:	f000 f903 	bl	8007474 <USBD_StdDevReq>
  }

  return USBD_OK;
}
 800726e:	2000      	movs	r0, #0
 8007270:	bd38      	pop	{r3, r4, r5, pc}
    USBD_StdItfReq(pdev, &pdev->request);
 8007272:	4629      	mov	r1, r5
 8007274:	4620      	mov	r0, r4
 8007276:	f000 fa1f 	bl	80076b8 <USBD_StdItfReq>
    break;
 800727a:	e7f8      	b.n	800726e <USBD_LL_SetupStage+0x42>
    USBD_StdEPReq(pdev, &pdev->request);
 800727c:	4629      	mov	r1, r5
 800727e:	4620      	mov	r0, r4
 8007280:	f000 fa3f 	bl	8007702 <USBD_StdEPReq>
    break;
 8007284:	e7f3      	b.n	800726e <USBD_LL_SetupStage+0x42>

08007286 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8007286:	b570      	push	{r4, r5, r6, lr}
 8007288:	4605      	mov	r5, r0
 800728a:	4616      	mov	r6, r2
  USBD_EndpointTypeDef    *pep;

  if(epnum == 0U)
 800728c:	bb49      	cbnz	r1, 80072e2 <USBD_LL_DataOutStage+0x5c>
  {
    pep = &pdev->ep_out[0];

    if ( pdev->ep0_state == USBD_EP0_DATA_OUT)
 800728e:	f8d0 326c 	ldr.w	r3, [r0, #620]	; 0x26c
 8007292:	2b03      	cmp	r3, #3
 8007294:	d11e      	bne.n	80072d4 <USBD_LL_DataOutStage+0x4e>
    {
      if(pep->rem_length > pep->maxpacket)
 8007296:	f8d0 314c 	ldr.w	r3, [r0, #332]	; 0x14c
 800729a:	f8d0 2150 	ldr.w	r2, [r0, #336]	; 0x150
 800729e:	4293      	cmp	r3, r2
 80072a0:	d90b      	bls.n	80072ba <USBD_LL_DataOutStage+0x34>
      {
        pep->rem_length -=  pep->maxpacket;
 80072a2:	1a9b      	subs	r3, r3, r2

        USBD_CtlContinueRx (pdev,
 80072a4:	429a      	cmp	r2, r3
        pep->rem_length -=  pep->maxpacket;
 80072a6:	f8c0 314c 	str.w	r3, [r0, #332]	; 0x14c
        USBD_CtlContinueRx (pdev,
 80072aa:	bf8c      	ite	hi
 80072ac:	b29a      	uxthhi	r2, r3
 80072ae:	b292      	uxthls	r2, r2
 80072b0:	4631      	mov	r1, r6
 80072b2:	f000 fafe 	bl	80078b2 <USBD_CtlContinueRx>
  {
    /* should never be in this condition */
    return USBD_FAIL;
  }

  return USBD_OK;
 80072b6:	2000      	movs	r0, #0
    pdev->pClass->DataOut(pdev, epnum);
 80072b8:	bd70      	pop	{r4, r5, r6, pc}
        if((pdev->pClass->EP0_RxReady != NULL)&&
 80072ba:	f8d0 328c 	ldr.w	r3, [r0, #652]	; 0x28c
 80072be:	691b      	ldr	r3, [r3, #16]
 80072c0:	b123      	cbz	r3, 80072cc <USBD_LL_DataOutStage+0x46>
 80072c2:	f890 2274 	ldrb.w	r2, [r0, #628]	; 0x274
 80072c6:	2a03      	cmp	r2, #3
 80072c8:	d100      	bne.n	80072cc <USBD_LL_DataOutStage+0x46>
          pdev->pClass->EP0_RxReady(pdev);
 80072ca:	4798      	blx	r3
        USBD_CtlSendStatus(pdev);
 80072cc:	4628      	mov	r0, r5
 80072ce:	f000 faf8 	bl	80078c2 <USBD_CtlSendStatus>
 80072d2:	e7f0      	b.n	80072b6 <USBD_LL_DataOutStage+0x30>
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 80072d4:	2b05      	cmp	r3, #5
 80072d6:	d1ee      	bne.n	80072b6 <USBD_LL_DataOutStage+0x30>
        pdev->ep0_state = USBD_EP0_IDLE;
 80072d8:	f8c5 126c 	str.w	r1, [r5, #620]	; 0x26c
        USBD_LL_StallEP(pdev, 0U);
 80072dc:	f007 feca 	bl	800f074 <USBD_LL_StallEP>
 80072e0:	e7e9      	b.n	80072b6 <USBD_LL_DataOutStage+0x30>
  else if((pdev->pClass->DataOut != NULL) &&
 80072e2:	f8d0 328c 	ldr.w	r3, [r0, #652]	; 0x28c
 80072e6:	699b      	ldr	r3, [r3, #24]
 80072e8:	b12b      	cbz	r3, 80072f6 <USBD_LL_DataOutStage+0x70>
 80072ea:	f890 2274 	ldrb.w	r2, [r0, #628]	; 0x274
 80072ee:	2a03      	cmp	r2, #3
 80072f0:	d101      	bne.n	80072f6 <USBD_LL_DataOutStage+0x70>
    pdev->pClass->DataOut(pdev, epnum);
 80072f2:	4798      	blx	r3
 80072f4:	e7df      	b.n	80072b6 <USBD_LL_DataOutStage+0x30>
    return USBD_FAIL;
 80072f6:	2002      	movs	r0, #2
}
 80072f8:	bd70      	pop	{r4, r5, r6, pc}

080072fa <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev, uint8_t epnum,
                                       uint8_t *pdata)
{
 80072fa:	b570      	push	{r4, r5, r6, lr}
 80072fc:	4613      	mov	r3, r2
 80072fe:	4604      	mov	r4, r0
  USBD_EndpointTypeDef *pep;

  if(epnum == 0U)
 8007300:	460e      	mov	r6, r1
 8007302:	2900      	cmp	r1, #0
 8007304:	d148      	bne.n	8007398 <USBD_LL_DataInStage+0x9e>
  {
    pep = &pdev->ep_in[0];

    if ( pdev->ep0_state == USBD_EP0_DATA_IN)
 8007306:	f8d0 226c 	ldr.w	r2, [r0, #620]	; 0x26c
 800730a:	2a02      	cmp	r2, #2
 800730c:	d13d      	bne.n	800738a <USBD_LL_DataInStage+0x90>
    {
      if(pep->rem_length > pep->maxpacket)
 800730e:	6a05      	ldr	r5, [r0, #32]
 8007310:	6a42      	ldr	r2, [r0, #36]	; 0x24
 8007312:	4295      	cmp	r5, r2
 8007314:	d914      	bls.n	8007340 <USBD_LL_DataInStage+0x46>
      {
        pep->rem_length -= pep->maxpacket;
 8007316:	1aaa      	subs	r2, r5, r2
 8007318:	6202      	str	r2, [r0, #32]

        USBD_CtlContinueSendData (pdev, pdata, (uint16_t)pep->rem_length);
 800731a:	4619      	mov	r1, r3
 800731c:	b292      	uxth	r2, r2
 800731e:	f000 fac0 	bl	80078a2 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive (pdev, 0U, NULL, 0U);
 8007322:	4633      	mov	r3, r6
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
          pdev->ep0_data_len = 0U;

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive (pdev, 0U, NULL, 0U);
 8007324:	461a      	mov	r2, r3
 8007326:	4619      	mov	r1, r3
 8007328:	4620      	mov	r0, r4
 800732a:	f007 feef 	bl	800f10c <USBD_LL_PrepareReceive>
      {
        USBD_LL_StallEP(pdev, 0x80U);
      }
    }

    if (pdev->dev_test_mode == 1U)
 800732e:	f894 3278 	ldrb.w	r3, [r4, #632]	; 0x278
 8007332:	2b01      	cmp	r3, #1
 8007334:	f04f 0000 	mov.w	r0, #0
 8007338:	d13a      	bne.n	80073b0 <USBD_LL_DataInStage+0xb6>
    {
      USBD_RunTestMode(pdev);
      pdev->dev_test_mode = 0U;
 800733a:	f884 0278 	strb.w	r0, [r4, #632]	; 0x278
 800733e:	bd70      	pop	{r4, r5, r6, pc}
        if((pep->total_length % pep->maxpacket == 0U) &&
 8007340:	69c3      	ldr	r3, [r0, #28]
 8007342:	fbb3 f5f2 	udiv	r5, r3, r2
 8007346:	fb02 3515 	mls	r5, r2, r5, r3
 800734a:	b965      	cbnz	r5, 8007366 <USBD_LL_DataInStage+0x6c>
 800734c:	429a      	cmp	r2, r3
 800734e:	d80a      	bhi.n	8007366 <USBD_LL_DataInStage+0x6c>
           (pep->total_length >= pep->maxpacket) &&
 8007350:	f8d0 2270 	ldr.w	r2, [r0, #624]	; 0x270
 8007354:	4293      	cmp	r3, r2
 8007356:	d206      	bcs.n	8007366 <USBD_LL_DataInStage+0x6c>
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 8007358:	462a      	mov	r2, r5
 800735a:	f000 faa2 	bl	80078a2 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800735e:	f8c4 5270 	str.w	r5, [r4, #624]	; 0x270
          USBD_LL_PrepareReceive (pdev, 0U, NULL, 0U);
 8007362:	462b      	mov	r3, r5
 8007364:	e7de      	b.n	8007324 <USBD_LL_DataInStage+0x2a>
          if((pdev->pClass->EP0_TxSent != NULL)&&
 8007366:	f8d4 328c 	ldr.w	r3, [r4, #652]	; 0x28c
 800736a:	68db      	ldr	r3, [r3, #12]
 800736c:	b12b      	cbz	r3, 800737a <USBD_LL_DataInStage+0x80>
 800736e:	f894 2274 	ldrb.w	r2, [r4, #628]	; 0x274
 8007372:	2a03      	cmp	r2, #3
 8007374:	d101      	bne.n	800737a <USBD_LL_DataInStage+0x80>
            pdev->pClass->EP0_TxSent(pdev);
 8007376:	4620      	mov	r0, r4
 8007378:	4798      	blx	r3
          USBD_LL_StallEP(pdev, 0x80U);
 800737a:	2180      	movs	r1, #128	; 0x80
 800737c:	4620      	mov	r0, r4
 800737e:	f007 fe79 	bl	800f074 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 8007382:	4620      	mov	r0, r4
 8007384:	f000 faa8 	bl	80078d8 <USBD_CtlReceiveStatus>
 8007388:	e7d1      	b.n	800732e <USBD_LL_DataInStage+0x34>
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800738a:	f032 0304 	bics.w	r3, r2, #4
 800738e:	d1ce      	bne.n	800732e <USBD_LL_DataInStage+0x34>
        USBD_LL_StallEP(pdev, 0x80U);
 8007390:	2180      	movs	r1, #128	; 0x80
 8007392:	f007 fe6f 	bl	800f074 <USBD_LL_StallEP>
 8007396:	e7ca      	b.n	800732e <USBD_LL_DataInStage+0x34>
    }
  }
  else if((pdev->pClass->DataIn != NULL) &&
 8007398:	f8d0 328c 	ldr.w	r3, [r0, #652]	; 0x28c
 800739c:	695b      	ldr	r3, [r3, #20]
 800739e:	b133      	cbz	r3, 80073ae <USBD_LL_DataInStage+0xb4>
 80073a0:	f890 2274 	ldrb.w	r2, [r0, #628]	; 0x274
 80073a4:	2a03      	cmp	r2, #3
 80073a6:	d102      	bne.n	80073ae <USBD_LL_DataInStage+0xb4>
          (pdev->dev_state == USBD_STATE_CONFIGURED))
  {
    pdev->pClass->DataIn(pdev, epnum);
 80073a8:	4798      	blx	r3
  {
    /* should never be in this condition */
    return USBD_FAIL;
  }

  return USBD_OK;
 80073aa:	2000      	movs	r0, #0
    pdev->pClass->DataIn(pdev, epnum);
 80073ac:	bd70      	pop	{r4, r5, r6, pc}
    return USBD_FAIL;
 80073ae:	2002      	movs	r0, #2
}
 80073b0:	bd70      	pop	{r4, r5, r6, pc}

080073b2 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef  *pdev)
{
 80073b2:	b570      	push	{r4, r5, r6, lr}
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80073b4:	2200      	movs	r2, #0
{
 80073b6:	4604      	mov	r4, r0
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80073b8:	4611      	mov	r1, r2
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80073ba:	2501      	movs	r5, #1

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80073bc:	2640      	movs	r6, #64	; 0x40
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80073be:	2340      	movs	r3, #64	; 0x40
 80073c0:	f007 fe2c 	bl	800f01c <USBD_LL_OpenEP>

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80073c4:	4633      	mov	r3, r6
 80073c6:	2180      	movs	r1, #128	; 0x80
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80073c8:	f8c4 5144 	str.w	r5, [r4, #324]	; 0x144
  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80073cc:	f8c4 6150 	str.w	r6, [r4, #336]	; 0x150
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80073d0:	2200      	movs	r2, #0
 80073d2:	4620      	mov	r0, r4
 80073d4:	f007 fe22 	bl	800f01c <USBD_LL_OpenEP>
  pdev->dev_state = USBD_STATE_DEFAULT;
  pdev->ep0_state = USBD_EP0_IDLE;
  pdev->dev_config= 0U;
  pdev->dev_remote_wakeup = 0U;

  if (pdev->pClassData)
 80073d8:	f8d4 3290 	ldr.w	r3, [r4, #656]	; 0x290
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80073dc:	61a5      	str	r5, [r4, #24]
  pdev->ep0_state = USBD_EP0_IDLE;
 80073de:	2100      	movs	r1, #0
  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80073e0:	6266      	str	r6, [r4, #36]	; 0x24
  pdev->dev_state = USBD_STATE_DEFAULT;
 80073e2:	f884 5274 	strb.w	r5, [r4, #628]	; 0x274
  pdev->ep0_state = USBD_EP0_IDLE;
 80073e6:	f8c4 126c 	str.w	r1, [r4, #620]	; 0x26c
  pdev->dev_config= 0U;
 80073ea:	6061      	str	r1, [r4, #4]
  pdev->dev_remote_wakeup = 0U;
 80073ec:	f8c4 127c 	str.w	r1, [r4, #636]	; 0x27c
  if (pdev->pClassData)
 80073f0:	b123      	cbz	r3, 80073fc <USBD_LL_Reset+0x4a>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80073f2:	f8d4 328c 	ldr.w	r3, [r4, #652]	; 0x28c
 80073f6:	4620      	mov	r0, r4
 80073f8:	685b      	ldr	r3, [r3, #4]
 80073fa:	4798      	blx	r3
  }

  return USBD_OK;
}
 80073fc:	2000      	movs	r0, #0
 80073fe:	bd70      	pop	{r4, r5, r6, pc}

08007400 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef  *pdev, USBD_SpeedTypeDef speed)
{
  pdev->dev_speed = speed;
 8007400:	7401      	strb	r1, [r0, #16]
  return USBD_OK;
}
 8007402:	2000      	movs	r0, #0
 8007404:	4770      	bx	lr

08007406 <USBD_LL_Suspend>:
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef  *pdev)
{
  pdev->dev_old_state =  pdev->dev_state;
 8007406:	f890 3274 	ldrb.w	r3, [r0, #628]	; 0x274
 800740a:	f880 3275 	strb.w	r3, [r0, #629]	; 0x275
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 800740e:	2304      	movs	r3, #4
 8007410:	f880 3274 	strb.w	r3, [r0, #628]	; 0x274
  return USBD_OK;
}
 8007414:	2000      	movs	r0, #0
 8007416:	4770      	bx	lr

08007418 <USBD_LL_Resume>:
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef  *pdev)
{
  pdev->dev_state = pdev->dev_old_state;
 8007418:	f890 3275 	ldrb.w	r3, [r0, #629]	; 0x275
 800741c:	f880 3274 	strb.w	r3, [r0, #628]	; 0x274
  return USBD_OK;
}
 8007420:	2000      	movs	r0, #0
 8007422:	4770      	bx	lr

08007424 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef  *pdev)
{
 8007424:	b508      	push	{r3, lr}
  if(pdev->dev_state == USBD_STATE_CONFIGURED)
 8007426:	f890 2274 	ldrb.w	r2, [r0, #628]	; 0x274
 800742a:	2a03      	cmp	r2, #3
 800742c:	d104      	bne.n	8007438 <USBD_LL_SOF+0x14>
  {
    if(pdev->pClass->SOF != NULL)
 800742e:	f8d0 328c 	ldr.w	r3, [r0, #652]	; 0x28c
 8007432:	69db      	ldr	r3, [r3, #28]
 8007434:	b103      	cbz	r3, 8007438 <USBD_LL_SOF+0x14>
    {
      pdev->pClass->SOF(pdev);
 8007436:	4798      	blx	r3
    }
  }
  return USBD_OK;
}
 8007438:	2000      	movs	r0, #0
 800743a:	bd08      	pop	{r3, pc}

0800743c <USBD_LL_IsoINIncomplete>:
 800743c:	2000      	movs	r0, #0
 800743e:	4770      	bx	lr

08007440 <USBD_LL_IsoOUTIncomplete>:
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
}
 8007440:	2000      	movs	r0, #0
 8007442:	4770      	bx	lr

08007444 <USBD_LL_DevConnected>:
{
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
}
 8007444:	2000      	movs	r0, #0
 8007446:	4770      	bx	lr

08007448 <USBD_LL_DevDisconnected>:
*         Handle device disconnection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef  *pdev)
{
 8007448:	b508      	push	{r3, lr}
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800744a:	2201      	movs	r2, #1
 800744c:	f880 2274 	strb.w	r2, [r0, #628]	; 0x274
  pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8007450:	f8d0 228c 	ldr.w	r2, [r0, #652]	; 0x28c
 8007454:	7901      	ldrb	r1, [r0, #4]
 8007456:	6852      	ldr	r2, [r2, #4]
 8007458:	4790      	blx	r2

  return USBD_OK;
}
 800745a:	2000      	movs	r0, #0
 800745c:	bd08      	pop	{r3, pc}

0800745e <USBD_CtlError.constprop.1>:
* @param  pdev: device instance
* @param  req: usb request
* @retval None
*/

void USBD_CtlError( USBD_HandleTypeDef *pdev ,
 800745e:	b510      	push	{r4, lr}
                            USBD_SetupReqTypedef *req)
{
  USBD_LL_StallEP(pdev , 0x80U);
 8007460:	2180      	movs	r1, #128	; 0x80
void USBD_CtlError( USBD_HandleTypeDef *pdev ,
 8007462:	4604      	mov	r4, r0
  USBD_LL_StallEP(pdev , 0x80U);
 8007464:	f007 fe06 	bl	800f074 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev , 0U);
 8007468:	4620      	mov	r0, r4
 800746a:	2100      	movs	r1, #0
}
 800746c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  USBD_LL_StallEP(pdev , 0U);
 8007470:	f007 be00 	b.w	800f074 <USBD_LL_StallEP>

08007474 <USBD_StdDevReq>:
{
 8007474:	b537      	push	{r0, r1, r2, r4, r5, lr}
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007476:	780b      	ldrb	r3, [r1, #0]
 8007478:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800747c:	2b20      	cmp	r3, #32
{
 800747e:	4604      	mov	r4, r0
 8007480:	460d      	mov	r5, r1
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007482:	d014      	beq.n	80074ae <USBD_StdDevReq+0x3a>
 8007484:	2b40      	cmp	r3, #64	; 0x40
 8007486:	d012      	beq.n	80074ae <USBD_StdDevReq+0x3a>
 8007488:	2b00      	cmp	r3, #0
 800748a:	f040 8095 	bne.w	80075b8 <USBD_StdDevReq+0x144>
    switch (req->bRequest)
 800748e:	784b      	ldrb	r3, [r1, #1]
 8007490:	2b09      	cmp	r3, #9
 8007492:	f200 8090 	bhi.w	80075b6 <USBD_StdDevReq+0x142>
 8007496:	e8df f013 	tbh	[pc, r3, lsl #1]
 800749a:	00e7      	.short	0x00e7
 800749c:	008e0101 	.word	0x008e0101
 80074a0:	008e00fa 	.word	0x008e00fa
 80074a4:	00130082 	.word	0x00130082
 80074a8:	00d2008e 	.word	0x00d2008e
 80074ac:	00a0      	.short	0x00a0
    pdev->pClass->Setup(pdev, req);
 80074ae:	f8d4 328c 	ldr.w	r3, [r4, #652]	; 0x28c
 80074b2:	4629      	mov	r1, r5
 80074b4:	689b      	ldr	r3, [r3, #8]
 80074b6:	4620      	mov	r0, r4
 80074b8:	4798      	blx	r3
}
 80074ba:	2000      	movs	r0, #0
 80074bc:	b003      	add	sp, #12
 80074be:	bd30      	pop	{r4, r5, pc}
  switch (req->wValue >> 8)
 80074c0:	884b      	ldrh	r3, [r1, #2]
 80074c2:	0a1a      	lsrs	r2, r3, #8
 80074c4:	3a01      	subs	r2, #1
 80074c6:	2a0e      	cmp	r2, #14
 80074c8:	d875      	bhi.n	80075b6 <USBD_StdDevReq+0x142>
 80074ca:	e8df f002 	tbb	[pc, r2]
 80074ce:	2824      	.short	0x2824
 80074d0:	55747435 	.word	0x55747435
 80074d4:	7474745e 	.word	0x7474745e
 80074d8:	74747474 	.word	0x74747474
 80074dc:	08          	.byte	0x08
 80074dd:	00          	.byte	0x00
    pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 80074de:	f8d0 3288 	ldr.w	r3, [r0, #648]	; 0x288
 80074e2:	69db      	ldr	r3, [r3, #28]
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80074e4:	7c20      	ldrb	r0, [r4, #16]
 80074e6:	f10d 0106 	add.w	r1, sp, #6
 80074ea:	4798      	blx	r3
  if((len != 0U) && (req->wLength != 0U))
 80074ec:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 80074f0:	b152      	cbz	r2, 8007508 <USBD_StdDevReq+0x94>
 80074f2:	88eb      	ldrh	r3, [r5, #6]
 80074f4:	b143      	cbz	r3, 8007508 <USBD_StdDevReq+0x94>
    len = MIN(len, req->wLength);
 80074f6:	429a      	cmp	r2, r3
 80074f8:	bf28      	it	cs
 80074fa:	461a      	movcs	r2, r3
    USBD_CtlSendData (pdev, pbuf, len);
 80074fc:	4601      	mov	r1, r0
 80074fe:	4620      	mov	r0, r4
    len = MIN(len, req->wLength);
 8007500:	f8ad 2006 	strh.w	r2, [sp, #6]
    USBD_CtlSendData (pdev, pbuf, len);
 8007504:	f000 f9c0 	bl	8007888 <USBD_CtlSendData>
  if(req->wLength == 0U)
 8007508:	88eb      	ldrh	r3, [r5, #6]
 800750a:	2b00      	cmp	r3, #0
 800750c:	d1d5      	bne.n	80074ba <USBD_StdDevReq+0x46>
    USBD_CtlSendStatus(pdev);
 800750e:	4620      	mov	r0, r4
 8007510:	f000 f9d7 	bl	80078c2 <USBD_CtlSendStatus>
 8007514:	e7d1      	b.n	80074ba <USBD_StdDevReq+0x46>
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8007516:	f8d0 3288 	ldr.w	r3, [r0, #648]	; 0x288
 800751a:	681b      	ldr	r3, [r3, #0]
 800751c:	e7e2      	b.n	80074e4 <USBD_StdDevReq+0x70>
    if(pdev->dev_speed == USBD_SPEED_HIGH )
 800751e:	7c02      	ldrb	r2, [r0, #16]
 8007520:	f8d0 328c 	ldr.w	r3, [r0, #652]	; 0x28c
 8007524:	b932      	cbnz	r2, 8007534 <USBD_StdDevReq+0xc0>
      pbuf   = (uint8_t *)pdev->pClass->GetHSConfigDescriptor(&len);
 8007526:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      pbuf   = (uint8_t *)pdev->pClass->GetFSConfigDescriptor(&len);
 8007528:	f10d 0006 	add.w	r0, sp, #6
 800752c:	4798      	blx	r3
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800752e:	2302      	movs	r3, #2
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8007530:	7043      	strb	r3, [r0, #1]
 8007532:	e7db      	b.n	80074ec <USBD_StdDevReq+0x78>
      pbuf   = (uint8_t *)pdev->pClass->GetFSConfigDescriptor(&len);
 8007534:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007536:	e7f7      	b.n	8007528 <USBD_StdDevReq+0xb4>
    switch ((uint8_t)(req->wValue))
 8007538:	b2db      	uxtb	r3, r3
 800753a:	2b05      	cmp	r3, #5
 800753c:	d83b      	bhi.n	80075b6 <USBD_StdDevReq+0x142>
 800753e:	e8df f003 	tbb	[pc, r3]
 8007542:	0703      	.short	0x0703
 8007544:	17130f0b 	.word	0x17130f0b
     pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8007548:	f8d0 3288 	ldr.w	r3, [r0, #648]	; 0x288
 800754c:	685b      	ldr	r3, [r3, #4]
 800754e:	e7c9      	b.n	80074e4 <USBD_StdDevReq+0x70>
      pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8007550:	f8d0 3288 	ldr.w	r3, [r0, #648]	; 0x288
 8007554:	689b      	ldr	r3, [r3, #8]
 8007556:	e7c5      	b.n	80074e4 <USBD_StdDevReq+0x70>
      pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8007558:	f8d0 3288 	ldr.w	r3, [r0, #648]	; 0x288
 800755c:	68db      	ldr	r3, [r3, #12]
 800755e:	e7c1      	b.n	80074e4 <USBD_StdDevReq+0x70>
      pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8007560:	f8d0 3288 	ldr.w	r3, [r0, #648]	; 0x288
 8007564:	691b      	ldr	r3, [r3, #16]
 8007566:	e7bd      	b.n	80074e4 <USBD_StdDevReq+0x70>
      pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8007568:	f8d0 3288 	ldr.w	r3, [r0, #648]	; 0x288
 800756c:	695b      	ldr	r3, [r3, #20]
 800756e:	e7b9      	b.n	80074e4 <USBD_StdDevReq+0x70>
      pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8007570:	f8d0 3288 	ldr.w	r3, [r0, #648]	; 0x288
 8007574:	699b      	ldr	r3, [r3, #24]
 8007576:	e7b5      	b.n	80074e4 <USBD_StdDevReq+0x70>
    if(pdev->dev_speed == USBD_SPEED_HIGH)
 8007578:	7c03      	ldrb	r3, [r0, #16]
 800757a:	b9e3      	cbnz	r3, 80075b6 <USBD_StdDevReq+0x142>
      pbuf = (uint8_t *)pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800757c:	f8d0 328c 	ldr.w	r3, [r0, #652]	; 0x28c
 8007580:	f10d 0006 	add.w	r0, sp, #6
 8007584:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007586:	4798      	blx	r3
 8007588:	e7b0      	b.n	80074ec <USBD_StdDevReq+0x78>
    if(pdev->dev_speed == USBD_SPEED_HIGH  )
 800758a:	7c03      	ldrb	r3, [r0, #16]
 800758c:	b99b      	cbnz	r3, 80075b6 <USBD_StdDevReq+0x142>
      pbuf   = (uint8_t *)pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800758e:	f8d0 328c 	ldr.w	r3, [r0, #652]	; 0x28c
 8007592:	f10d 0006 	add.w	r0, sp, #6
 8007596:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007598:	4798      	blx	r3
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800759a:	2307      	movs	r3, #7
 800759c:	e7c8      	b.n	8007530 <USBD_StdDevReq+0xbc>
  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800759e:	888b      	ldrh	r3, [r1, #4]
 80075a0:	b94b      	cbnz	r3, 80075b6 <USBD_StdDevReq+0x142>
 80075a2:	88cb      	ldrh	r3, [r1, #6]
 80075a4:	b93b      	cbnz	r3, 80075b6 <USBD_StdDevReq+0x142>
 80075a6:	884d      	ldrh	r5, [r1, #2]
 80075a8:	2d7f      	cmp	r5, #127	; 0x7f
 80075aa:	d804      	bhi.n	80075b6 <USBD_StdDevReq+0x142>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80075ac:	f890 3274 	ldrb.w	r3, [r0, #628]	; 0x274
 80075b0:	2b03      	cmp	r3, #3
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80075b2:	b2e9      	uxtb	r1, r5
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80075b4:	d103      	bne.n	80075be <USBD_StdDevReq+0x14a>
      USBD_CtlError(pdev, req);
 80075b6:	4620      	mov	r0, r4
    USBD_CtlError(pdev, req);
 80075b8:	f7ff ff51 	bl	800745e <USBD_CtlError.constprop.1>
    break;
 80075bc:	e77d      	b.n	80074ba <USBD_StdDevReq+0x46>
      pdev->dev_address = dev_addr;
 80075be:	f880 1276 	strb.w	r1, [r0, #630]	; 0x276
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 80075c2:	f007 fd87 	bl	800f0d4 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 80075c6:	4620      	mov	r0, r4
 80075c8:	f000 f97b 	bl	80078c2 <USBD_CtlSendStatus>
      if (dev_addr != 0U)
 80075cc:	b11d      	cbz	r5, 80075d6 <USBD_StdDevReq+0x162>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80075ce:	2302      	movs	r3, #2
        pdev->dev_state = USBD_STATE_DEFAULT;
 80075d0:	f884 3274 	strb.w	r3, [r4, #628]	; 0x274
 80075d4:	e771      	b.n	80074ba <USBD_StdDevReq+0x46>
 80075d6:	2301      	movs	r3, #1
 80075d8:	e7fa      	b.n	80075d0 <USBD_StdDevReq+0x15c>
  cfgidx = (uint8_t)(req->wValue);
 80075da:	7889      	ldrb	r1, [r1, #2]
 80075dc:	4d35      	ldr	r5, [pc, #212]	; (80076b4 <USBD_StdDevReq+0x240>)
  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80075de:	2901      	cmp	r1, #1
  cfgidx = (uint8_t)(req->wValue);
 80075e0:	7029      	strb	r1, [r5, #0]
  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80075e2:	d8e8      	bhi.n	80075b6 <USBD_StdDevReq+0x142>
    switch (pdev->dev_state)
 80075e4:	f890 3274 	ldrb.w	r3, [r0, #628]	; 0x274
 80075e8:	2b02      	cmp	r3, #2
 80075ea:	d008      	beq.n	80075fe <USBD_StdDevReq+0x18a>
 80075ec:	2b03      	cmp	r3, #3
 80075ee:	d014      	beq.n	800761a <USBD_StdDevReq+0x1a6>
      USBD_CtlError(pdev, req);
 80075f0:	f7ff ff35 	bl	800745e <USBD_CtlError.constprop.1>
      USBD_ClrClassConfig(pdev, cfgidx);
 80075f4:	7829      	ldrb	r1, [r5, #0]
 80075f6:	4620      	mov	r0, r4
 80075f8:	f7ff fe11 	bl	800721e <USBD_ClrClassConfig>
 80075fc:	e75d      	b.n	80074ba <USBD_StdDevReq+0x46>
      if (cfgidx)
 80075fe:	2900      	cmp	r1, #0
 8007600:	d085      	beq.n	800750e <USBD_StdDevReq+0x9a>
        pdev->dev_config = cfgidx;
 8007602:	2101      	movs	r1, #1
        pdev->dev_state = USBD_STATE_CONFIGURED;
 8007604:	2303      	movs	r3, #3
        pdev->dev_config = cfgidx;
 8007606:	6041      	str	r1, [r0, #4]
        pdev->dev_state = USBD_STATE_CONFIGURED;
 8007608:	f880 3274 	strb.w	r3, [r0, #628]	; 0x274
        if(USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800760c:	4620      	mov	r0, r4
 800760e:	f7ff fdfb 	bl	8007208 <USBD_SetClassConfig>
 8007612:	2802      	cmp	r0, #2
 8007614:	f47f af7b 	bne.w	800750e <USBD_StdDevReq+0x9a>
 8007618:	e7cd      	b.n	80075b6 <USBD_StdDevReq+0x142>
      if (cfgidx == 0U)
 800761a:	b931      	cbnz	r1, 800762a <USBD_StdDevReq+0x1b6>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800761c:	2302      	movs	r3, #2
 800761e:	f880 3274 	strb.w	r3, [r0, #628]	; 0x274
        pdev->dev_config = cfgidx;
 8007622:	6041      	str	r1, [r0, #4]
        USBD_ClrClassConfig(pdev, cfgidx);
 8007624:	f7ff fdfb 	bl	800721e <USBD_ClrClassConfig>
 8007628:	e771      	b.n	800750e <USBD_StdDevReq+0x9a>
      else if (cfgidx != pdev->dev_config)
 800762a:	6841      	ldr	r1, [r0, #4]
 800762c:	2901      	cmp	r1, #1
 800762e:	f43f af6e 	beq.w	800750e <USBD_StdDevReq+0x9a>
        USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8007632:	b2c9      	uxtb	r1, r1
 8007634:	f7ff fdf3 	bl	800721e <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8007638:	7829      	ldrb	r1, [r5, #0]
 800763a:	6061      	str	r1, [r4, #4]
 800763c:	e7e6      	b.n	800760c <USBD_StdDevReq+0x198>
  if (req->wLength != 1U)
 800763e:	88ca      	ldrh	r2, [r1, #6]
 8007640:	2a01      	cmp	r2, #1
 8007642:	d1b8      	bne.n	80075b6 <USBD_StdDevReq+0x142>
    switch (pdev->dev_state)
 8007644:	f890 3274 	ldrb.w	r3, [r0, #628]	; 0x274
 8007648:	2b00      	cmp	r3, #0
 800764a:	d0b4      	beq.n	80075b6 <USBD_StdDevReq+0x142>
 800764c:	2b02      	cmp	r3, #2
 800764e:	d903      	bls.n	8007658 <USBD_StdDevReq+0x1e4>
 8007650:	2b03      	cmp	r3, #3
 8007652:	d1b0      	bne.n	80075b6 <USBD_StdDevReq+0x142>
      USBD_CtlSendData (pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 8007654:	1d01      	adds	r1, r0, #4
 8007656:	e003      	b.n	8007660 <USBD_StdDevReq+0x1ec>
      pdev->dev_default_config = 0U;
 8007658:	4601      	mov	r1, r0
 800765a:	2300      	movs	r3, #0
 800765c:	f841 3f08 	str.w	r3, [r1, #8]!
    USBD_CtlSendData (pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 8007660:	4620      	mov	r0, r4
 8007662:	f000 f911 	bl	8007888 <USBD_CtlSendData>
 8007666:	e728      	b.n	80074ba <USBD_StdDevReq+0x46>
  switch (pdev->dev_state)
 8007668:	f890 3274 	ldrb.w	r3, [r0, #628]	; 0x274
 800766c:	3b01      	subs	r3, #1
 800766e:	2b02      	cmp	r3, #2
 8007670:	d8a1      	bhi.n	80075b6 <USBD_StdDevReq+0x142>
    if(req->wLength != 0x2U)
 8007672:	88cb      	ldrh	r3, [r1, #6]
 8007674:	2b02      	cmp	r3, #2
 8007676:	d19e      	bne.n	80075b6 <USBD_StdDevReq+0x142>
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8007678:	2301      	movs	r3, #1
 800767a:	60c3      	str	r3, [r0, #12]
    if (pdev->dev_remote_wakeup)
 800767c:	f8d0 327c 	ldr.w	r3, [r0, #636]	; 0x27c
 8007680:	b10b      	cbz	r3, 8007686 <USBD_StdDevReq+0x212>
      pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8007682:	2303      	movs	r3, #3
 8007684:	60c3      	str	r3, [r0, #12]
    USBD_CtlSendData (pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 8007686:	2202      	movs	r2, #2
 8007688:	f104 010c 	add.w	r1, r4, #12
 800768c:	e7e8      	b.n	8007660 <USBD_StdDevReq+0x1ec>
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800768e:	884b      	ldrh	r3, [r1, #2]
 8007690:	2b01      	cmp	r3, #1
 8007692:	f47f af12 	bne.w	80074ba <USBD_StdDevReq+0x46>
    pdev->dev_remote_wakeup = 1U;
 8007696:	f8c4 327c 	str.w	r3, [r4, #636]	; 0x27c
 800769a:	e738      	b.n	800750e <USBD_StdDevReq+0x9a>
  switch (pdev->dev_state)
 800769c:	f890 3274 	ldrb.w	r3, [r0, #628]	; 0x274
 80076a0:	3b01      	subs	r3, #1
 80076a2:	2b02      	cmp	r3, #2
 80076a4:	d887      	bhi.n	80075b6 <USBD_StdDevReq+0x142>
    if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80076a6:	884b      	ldrh	r3, [r1, #2]
 80076a8:	2b01      	cmp	r3, #1
 80076aa:	f47f af06 	bne.w	80074ba <USBD_StdDevReq+0x46>
      pdev->dev_remote_wakeup = 0U;
 80076ae:	2300      	movs	r3, #0
 80076b0:	e7f1      	b.n	8007696 <USBD_StdDevReq+0x222>
 80076b2:	bf00      	nop
 80076b4:	20004e5c 	.word	0x20004e5c

080076b8 <USBD_StdItfReq>:
{
 80076b8:	b538      	push	{r3, r4, r5, lr}
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80076ba:	780b      	ldrb	r3, [r1, #0]
 80076bc:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80076c0:	2b20      	cmp	r3, #32
{
 80076c2:	4604      	mov	r4, r0
 80076c4:	460d      	mov	r5, r1
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80076c6:	d002      	beq.n	80076ce <USBD_StdItfReq+0x16>
 80076c8:	2b40      	cmp	r3, #64	; 0x40
 80076ca:	d000      	beq.n	80076ce <USBD_StdItfReq+0x16>
 80076cc:	b9b3      	cbnz	r3, 80076fc <USBD_StdItfReq+0x44>
    switch (pdev->dev_state)
 80076ce:	f894 3274 	ldrb.w	r3, [r4, #628]	; 0x274
 80076d2:	3b01      	subs	r3, #1
 80076d4:	2b02      	cmp	r3, #2
 80076d6:	d810      	bhi.n	80076fa <USBD_StdItfReq+0x42>
      if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80076d8:	792b      	ldrb	r3, [r5, #4]
 80076da:	2b01      	cmp	r3, #1
 80076dc:	d80d      	bhi.n	80076fa <USBD_StdItfReq+0x42>
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup (pdev, req);
 80076de:	f8d4 328c 	ldr.w	r3, [r4, #652]	; 0x28c
 80076e2:	4629      	mov	r1, r5
 80076e4:	689b      	ldr	r3, [r3, #8]
 80076e6:	4620      	mov	r0, r4
 80076e8:	4798      	blx	r3
        if ((req->wLength == 0U) && (ret == USBD_OK))
 80076ea:	88eb      	ldrh	r3, [r5, #6]
 80076ec:	b91b      	cbnz	r3, 80076f6 <USBD_StdItfReq+0x3e>
 80076ee:	b910      	cbnz	r0, 80076f6 <USBD_StdItfReq+0x3e>
          USBD_CtlSendStatus(pdev);
 80076f0:	4620      	mov	r0, r4
 80076f2:	f000 f8e6 	bl	80078c2 <USBD_CtlSendStatus>
}
 80076f6:	2000      	movs	r0, #0
 80076f8:	bd38      	pop	{r3, r4, r5, pc}
      USBD_CtlError(pdev, req);
 80076fa:	4620      	mov	r0, r4
    USBD_CtlError(pdev, req);
 80076fc:	f7ff feaf 	bl	800745e <USBD_CtlError.constprop.1>
    break;
 8007700:	e7f9      	b.n	80076f6 <USBD_StdItfReq+0x3e>

08007702 <USBD_StdEPReq>:
{
 8007702:	b538      	push	{r3, r4, r5, lr}
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007704:	780a      	ldrb	r2, [r1, #0]
 8007706:	f002 0260 	and.w	r2, r2, #96	; 0x60
 800770a:	2a20      	cmp	r2, #32
{
 800770c:	4604      	mov	r4, r0
 800770e:	460b      	mov	r3, r1
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007710:	d013      	beq.n	800773a <USBD_StdEPReq+0x38>
 8007712:	2a40      	cmp	r2, #64	; 0x40
 8007714:	d011      	beq.n	800773a <USBD_StdEPReq+0x38>
 8007716:	b96a      	cbnz	r2, 8007734 <USBD_StdEPReq+0x32>
    switch (req->bRequest)
 8007718:	785d      	ldrb	r5, [r3, #1]
  ep_addr  = LOBYTE(req->wIndex);
 800771a:	888a      	ldrh	r2, [r1, #4]
    switch (req->bRequest)
 800771c:	2d01      	cmp	r5, #1
  ep_addr  = LOBYTE(req->wIndex);
 800771e:	b2d1      	uxtb	r1, r2
    switch (req->bRequest)
 8007720:	d01f      	beq.n	8007762 <USBD_StdEPReq+0x60>
 8007722:	d335      	bcc.n	8007790 <USBD_StdEPReq+0x8e>
 8007724:	2d03      	cmp	r5, #3
 8007726:	d105      	bne.n	8007734 <USBD_StdEPReq+0x32>
      switch (pdev->dev_state)
 8007728:	f890 2274 	ldrb.w	r2, [r0, #628]	; 0x274
 800772c:	2a02      	cmp	r2, #2
 800772e:	d026      	beq.n	800777e <USBD_StdEPReq+0x7c>
 8007730:	2a03      	cmp	r2, #3
 8007732:	d00a      	beq.n	800774a <USBD_StdEPReq+0x48>
    USBD_CtlError(pdev, req);
 8007734:	f7ff fe93 	bl	800745e <USBD_CtlError.constprop.1>
    break;
 8007738:	e005      	b.n	8007746 <USBD_StdEPReq+0x44>
    pdev->pClass->Setup (pdev, req);
 800773a:	f8d4 228c 	ldr.w	r2, [r4, #652]	; 0x28c
 800773e:	4619      	mov	r1, r3
 8007740:	6892      	ldr	r2, [r2, #8]
 8007742:	4620      	mov	r0, r4
 8007744:	4790      	blx	r2
}
 8007746:	2000      	movs	r0, #0
 8007748:	bd38      	pop	{r3, r4, r5, pc}
        if (req->wValue == USB_FEATURE_EP_HALT)
 800774a:	885a      	ldrh	r2, [r3, #2]
 800774c:	b92a      	cbnz	r2, 800775a <USBD_StdEPReq+0x58>
          if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800774e:	064a      	lsls	r2, r1, #25
 8007750:	d003      	beq.n	800775a <USBD_StdEPReq+0x58>
 8007752:	88db      	ldrh	r3, [r3, #6]
 8007754:	b90b      	cbnz	r3, 800775a <USBD_StdEPReq+0x58>
            USBD_LL_StallEP(pdev, ep_addr);
 8007756:	f007 fc8d 	bl	800f074 <USBD_LL_StallEP>
        USBD_CtlSendStatus(pdev);
 800775a:	4620      	mov	r0, r4
 800775c:	f000 f8b1 	bl	80078c2 <USBD_CtlSendStatus>
        break;
 8007760:	e7f1      	b.n	8007746 <USBD_StdEPReq+0x44>
      switch (pdev->dev_state)
 8007762:	f890 2274 	ldrb.w	r2, [r0, #628]	; 0x274
 8007766:	2a02      	cmp	r2, #2
 8007768:	d009      	beq.n	800777e <USBD_StdEPReq+0x7c>
 800776a:	2a03      	cmp	r2, #3
 800776c:	d1e2      	bne.n	8007734 <USBD_StdEPReq+0x32>
        if (req->wValue == USB_FEATURE_EP_HALT)
 800776e:	885b      	ldrh	r3, [r3, #2]
 8007770:	2b00      	cmp	r3, #0
 8007772:	d1e8      	bne.n	8007746 <USBD_StdEPReq+0x44>
          if ((ep_addr & 0x7FU) != 0x00U)
 8007774:	064d      	lsls	r5, r1, #25
 8007776:	d0f0      	beq.n	800775a <USBD_StdEPReq+0x58>
            USBD_LL_ClearStallEP(pdev, ep_addr);
 8007778:	f007 fc8a 	bl	800f090 <USBD_LL_ClearStallEP>
 800777c:	e7ed      	b.n	800775a <USBD_StdEPReq+0x58>
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800777e:	064b      	lsls	r3, r1, #25
 8007780:	d017      	beq.n	80077b2 <USBD_StdEPReq+0xb0>
          USBD_LL_StallEP(pdev, ep_addr);
 8007782:	f007 fc77 	bl	800f074 <USBD_LL_StallEP>
          USBD_LL_StallEP(pdev, 0x80U);
 8007786:	2180      	movs	r1, #128	; 0x80
 8007788:	4620      	mov	r0, r4
 800778a:	f007 fc73 	bl	800f074 <USBD_LL_StallEP>
 800778e:	e7da      	b.n	8007746 <USBD_StdEPReq+0x44>
      switch (pdev->dev_state)
 8007790:	f890 3274 	ldrb.w	r3, [r0, #628]	; 0x274
 8007794:	2b02      	cmp	r3, #2
 8007796:	d00e      	beq.n	80077b6 <USBD_StdEPReq+0xb4>
 8007798:	2b03      	cmp	r3, #3
 800779a:	d1cb      	bne.n	8007734 <USBD_StdEPReq+0x32>
        if((ep_addr & 0x80U) == 0x80U)
 800779c:	f012 0f80 	tst.w	r2, #128	; 0x80
 80077a0:	f04f 0314 	mov.w	r3, #20
 80077a4:	f001 020f 	and.w	r2, r1, #15
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80077a8:	fb03 0202 	mla	r2, r3, r2, r0
        if((ep_addr & 0x80U) == 0x80U)
 80077ac:	d012      	beq.n	80077d4 <USBD_StdEPReq+0xd2>
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80077ae:	6992      	ldr	r2, [r2, #24]
 80077b0:	b9da      	cbnz	r2, 80077ea <USBD_StdEPReq+0xe8>
          USBD_CtlError(pdev, req);
 80077b2:	4620      	mov	r0, r4
 80077b4:	e7be      	b.n	8007734 <USBD_StdEPReq+0x32>
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80077b6:	0649      	lsls	r1, r1, #25
 80077b8:	d1fb      	bne.n	80077b2 <USBD_StdEPReq+0xb0>
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 80077ba:	0613      	lsls	r3, r2, #24
 80077bc:	bf4c      	ite	mi
 80077be:	f100 0114 	addmi.w	r1, r0, #20
 80077c2:	f500 71a0 	addpl.w	r1, r0, #320	; 0x140
          pep->status = 0x0000U;
 80077c6:	2300      	movs	r3, #0
 80077c8:	600b      	str	r3, [r1, #0]
          USBD_CtlSendData (pdev, (uint8_t *)(void *)&pep->status, 2U);
 80077ca:	2202      	movs	r2, #2
          USBD_CtlSendData (pdev, (uint8_t *)(void *)&pep->status, 2U);
 80077cc:	4620      	mov	r0, r4
 80077ce:	f000 f85b 	bl	8007888 <USBD_CtlSendData>
          break;
 80077d2:	e7b8      	b.n	8007746 <USBD_StdEPReq+0x44>
          if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80077d4:	f8d2 2144 	ldr.w	r2, [r2, #324]	; 0x144
 80077d8:	2a00      	cmp	r2, #0
 80077da:	d0ea      	beq.n	80077b2 <USBD_StdEPReq+0xb0>
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 80077dc:	f001 057f 	and.w	r5, r1, #127	; 0x7f
 80077e0:	fb03 0505 	mla	r5, r3, r5, r0
 80077e4:	f505 75a0 	add.w	r5, r5, #320	; 0x140
 80077e8:	e004      	b.n	80077f4 <USBD_StdEPReq+0xf2>
 80077ea:	f001 057f 	and.w	r5, r1, #127	; 0x7f
 80077ee:	fb05 3503 	mla	r5, r5, r3, r3
 80077f2:	4405      	add	r5, r0
          if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80077f4:	f011 037f 	ands.w	r3, r1, #127	; 0x7f
 80077f8:	d103      	bne.n	8007802 <USBD_StdEPReq+0x100>
            pep->status = 0x0001U;
 80077fa:	602b      	str	r3, [r5, #0]
          USBD_CtlSendData (pdev, (uint8_t *)(void *)&pep->status, 2U);
 80077fc:	2202      	movs	r2, #2
 80077fe:	4629      	mov	r1, r5
 8007800:	e7e4      	b.n	80077cc <USBD_StdEPReq+0xca>
          else if(USBD_LL_IsStallEP(pdev, ep_addr))
 8007802:	4620      	mov	r0, r4
 8007804:	f007 fc52 	bl	800f0ac <USBD_LL_IsStallEP>
 8007808:	b108      	cbz	r0, 800780e <USBD_StdEPReq+0x10c>
            pep->status = 0x0001U;
 800780a:	2301      	movs	r3, #1
 800780c:	e7f5      	b.n	80077fa <USBD_StdEPReq+0xf8>
            pep->status = 0x0000U;
 800780e:	6028      	str	r0, [r5, #0]
 8007810:	e7f4      	b.n	80077fc <USBD_StdEPReq+0xfa>

08007812 <USBD_ParseSetupRequest>:
  req->bmRequest     = *(uint8_t *)  (pdata);
 8007812:	780b      	ldrb	r3, [r1, #0]
 8007814:	7003      	strb	r3, [r0, #0]
  req->bRequest      = *(uint8_t *)  (pdata +  1);
 8007816:	784b      	ldrb	r3, [r1, #1]
 8007818:	7043      	strb	r3, [r0, #1]
  req->wValue        = SWAPBYTE      (pdata +  2);
 800781a:	78ca      	ldrb	r2, [r1, #3]
 800781c:	788b      	ldrb	r3, [r1, #2]
 800781e:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8007822:	8043      	strh	r3, [r0, #2]
  req->wIndex        = SWAPBYTE      (pdata +  4);
 8007824:	794a      	ldrb	r2, [r1, #5]
 8007826:	790b      	ldrb	r3, [r1, #4]
 8007828:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 800782c:	8083      	strh	r3, [r0, #4]
  req->wLength       = SWAPBYTE      (pdata +  6);
 800782e:	79ca      	ldrb	r2, [r1, #7]
 8007830:	798b      	ldrb	r3, [r1, #6]
 8007832:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8007836:	80c3      	strh	r3, [r0, #6]
 8007838:	4770      	bx	lr

0800783a <USBD_CtlError>:
{
 800783a:	b510      	push	{r4, lr}
  USBD_LL_StallEP(pdev , 0x80U);
 800783c:	2180      	movs	r1, #128	; 0x80
{
 800783e:	4604      	mov	r4, r0
  USBD_LL_StallEP(pdev , 0x80U);
 8007840:	f007 fc18 	bl	800f074 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev , 0U);
 8007844:	4620      	mov	r0, r4
 8007846:	2100      	movs	r1, #0
}
 8007848:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  USBD_LL_StallEP(pdev , 0U);
 800784c:	f007 bc12 	b.w	800f074 <USBD_LL_StallEP>

08007850 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8007850:	b530      	push	{r4, r5, lr}
  uint8_t idx = 0U;

  if (desc != NULL)
 8007852:	b188      	cbz	r0, 8007878 <USBD_GetString+0x28>
 8007854:	4605      	mov	r5, r0
 8007856:	1a2b      	subs	r3, r5, r0
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
    uint8_t  len = 0U;

    while (*buf != '\0')
 8007858:	f815 4b01 	ldrb.w	r4, [r5], #1
 800785c:	b2db      	uxtb	r3, r3
 800785e:	2c00      	cmp	r4, #0
 8007860:	d1f9      	bne.n	8007856 <USBD_GetString+0x6>
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 8007862:	3301      	adds	r3, #1
 8007864:	005b      	lsls	r3, r3, #1
 8007866:	8013      	strh	r3, [r2, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 8007868:	700b      	strb	r3, [r1, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 800786a:	2303      	movs	r3, #3
 800786c:	704b      	strb	r3, [r1, #1]
 800786e:	3801      	subs	r0, #1
 8007870:	2302      	movs	r3, #2
    while (*desc != '\0')
 8007872:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 8007876:	b905      	cbnz	r5, 800787a <USBD_GetString+0x2a>
 8007878:	bd30      	pop	{r4, r5, pc}
      unicode[idx++] = *desc++;
 800787a:	1c5a      	adds	r2, r3, #1
 800787c:	b2d2      	uxtb	r2, r2
 800787e:	54cd      	strb	r5, [r1, r3]
      unicode[idx++] =  0U;
 8007880:	3302      	adds	r3, #2
 8007882:	b2db      	uxtb	r3, r3
 8007884:	548c      	strb	r4, [r1, r2]
 8007886:	e7f4      	b.n	8007872 <USBD_GetString+0x22>

08007888 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData (USBD_HandleTypeDef *pdev, uint8_t *pbuf,
                                     uint16_t len)
{
 8007888:	b510      	push	{r4, lr}
 800788a:	4613      	mov	r3, r2
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800788c:	2202      	movs	r2, #2
 800788e:	f8c0 226c 	str.w	r2, [r0, #620]	; 0x26c
  pdev->ep_in[0].total_length = len;
 8007892:	61c3      	str	r3, [r0, #28]
  pdev->ep_in[0].rem_length   = len;

 /* Start the transfer */
  USBD_LL_Transmit (pdev, 0x00U, pbuf, len);
 8007894:	460a      	mov	r2, r1
  pdev->ep_in[0].rem_length   = len;
 8007896:	6203      	str	r3, [r0, #32]
  USBD_LL_Transmit (pdev, 0x00U, pbuf, len);
 8007898:	2100      	movs	r1, #0
 800789a:	f007 fc29 	bl	800f0f0 <USBD_LL_Transmit>

  return USBD_OK;
}
 800789e:	2000      	movs	r0, #0
 80078a0:	bd10      	pop	{r4, pc}

080078a2 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData (USBD_HandleTypeDef *pdev,
                                             uint8_t *pbuf, uint16_t len)
{
 80078a2:	b508      	push	{r3, lr}
 /* Start the next transfer */
  USBD_LL_Transmit (pdev, 0x00U, pbuf, len);
 80078a4:	4613      	mov	r3, r2
 80078a6:	460a      	mov	r2, r1
 80078a8:	2100      	movs	r1, #0
 80078aa:	f007 fc21 	bl	800f0f0 <USBD_LL_Transmit>

  return USBD_OK;
}
 80078ae:	2000      	movs	r0, #0
 80078b0:	bd08      	pop	{r3, pc}

080078b2 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx (USBD_HandleTypeDef *pdev, uint8_t *pbuf,
                                       uint16_t len)
{
 80078b2:	b508      	push	{r3, lr}
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80078b4:	4613      	mov	r3, r2
 80078b6:	460a      	mov	r2, r1
 80078b8:	2100      	movs	r1, #0
 80078ba:	f007 fc27 	bl	800f10c <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 80078be:	2000      	movs	r0, #0
 80078c0:	bd08      	pop	{r3, pc}

080078c2 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus (USBD_HandleTypeDef *pdev)
{
 80078c2:	b508      	push	{r3, lr}
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80078c4:	2304      	movs	r3, #4
 80078c6:	f8c0 326c 	str.w	r3, [r0, #620]	; 0x26c

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80078ca:	2300      	movs	r3, #0
 80078cc:	461a      	mov	r2, r3
 80078ce:	4619      	mov	r1, r3
 80078d0:	f007 fc0e 	bl	800f0f0 <USBD_LL_Transmit>

  return USBD_OK;
}
 80078d4:	2000      	movs	r0, #0
 80078d6:	bd08      	pop	{r3, pc}

080078d8 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus (USBD_HandleTypeDef *pdev)
{
 80078d8:	b508      	push	{r3, lr}
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80078da:	2305      	movs	r3, #5
 80078dc:	f8c0 326c 	str.w	r3, [r0, #620]	; 0x26c

 /* Start the transfer */
  USBD_LL_PrepareReceive (pdev, 0U, NULL, 0U);
 80078e0:	2300      	movs	r3, #0
 80078e2:	461a      	mov	r2, r3
 80078e4:	4619      	mov	r1, r3
 80078e6:	f007 fc11 	bl	800f10c <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 80078ea:	2000      	movs	r0, #0
 80078ec:	bd08      	pop	{r3, pc}
	...

080078f0 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 80078f0:	b530      	push	{r4, r5, lr}
  uint8_t ret = 1;
  uint8_t DiskNum = 0;

  if(disk.nbr < _VOLUMES)
 80078f2:	4b0f      	ldr	r3, [pc, #60]	; (8007930 <FATFS_LinkDriverEx+0x40>)
 80078f4:	7a5d      	ldrb	r5, [r3, #9]
 80078f6:	f005 04ff 	and.w	r4, r5, #255	; 0xff
 80078fa:	b9b5      	cbnz	r5, 800792a <FATFS_LinkDriverEx+0x3a>
  {
    disk.is_initialized[disk.nbr] = 0;
 80078fc:	7a5d      	ldrb	r5, [r3, #9]
 80078fe:	555c      	strb	r4, [r3, r5]
    disk.drv[disk.nbr] = drv;
 8007900:	7a5d      	ldrb	r5, [r3, #9]
 8007902:	eb03 0585 	add.w	r5, r3, r5, lsl #2
 8007906:	6068      	str	r0, [r5, #4]
    disk.lun[disk.nbr] = lun;
 8007908:	7a58      	ldrb	r0, [r3, #9]
 800790a:	4418      	add	r0, r3
 800790c:	7202      	strb	r2, [r0, #8]
    DiskNum = disk.nbr++;
 800790e:	7a5a      	ldrb	r2, [r3, #9]
 8007910:	b2d2      	uxtb	r2, r2
 8007912:	1c50      	adds	r0, r2, #1
 8007914:	b2c0      	uxtb	r0, r0
 8007916:	7258      	strb	r0, [r3, #9]
    path[0] = DiskNum + '0';
    path[1] = ':';
 8007918:	233a      	movs	r3, #58	; 0x3a
    path[0] = DiskNum + '0';
 800791a:	3230      	adds	r2, #48	; 0x30
    path[1] = ':';
 800791c:	704b      	strb	r3, [r1, #1]
    path[2] = '/';
 800791e:	232f      	movs	r3, #47	; 0x2f
    path[0] = DiskNum + '0';
 8007920:	700a      	strb	r2, [r1, #0]
    path[2] = '/';
 8007922:	708b      	strb	r3, [r1, #2]
    path[3] = 0;
 8007924:	70cc      	strb	r4, [r1, #3]
 8007926:	4620      	mov	r0, r4
 8007928:	bd30      	pop	{r4, r5, pc}
  uint8_t ret = 1;
 800792a:	2001      	movs	r0, #1
    ret = 0;
  }

  return ret;
}
 800792c:	bd30      	pop	{r4, r5, pc}
 800792e:	bf00      	nop
 8007930:	20004e60 	.word	0x20004e60

08007934 <FATFS_LinkDriver>:
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
  return FATFS_LinkDriverEx(drv, path, 0);
 8007934:	2200      	movs	r2, #0
 8007936:	f7ff bfdb 	b.w	80078f0 <FATFS_LinkDriverEx>
	...

0800793c <main_screen_event>:
	}
}

static void main_screen_event(lv_obj_t * obj, lv_event_t event)
{
    switch(event) {
 800793c:	2911      	cmp	r1, #17
{
 800793e:	b508      	push	{r3, lr}
    switch(event) {
 8007940:	d10b      	bne.n	800795a <main_screen_event+0x1e>
        case LV_EVENT_APPLY:
            //printf("Released\n");
            lv_task_del(Task_Principal);
 8007942:	4b06      	ldr	r3, [pc, #24]	; (800795c <main_screen_event+0x20>)
 8007944:	6818      	ldr	r0, [r3, #0]
 8007946:	f00d fff3 	bl	8015930 <lv_task_del>
    		lv_obj_del(Tela_Principal);
 800794a:	4b05      	ldr	r3, [pc, #20]	; (8007960 <main_screen_event+0x24>)
 800794c:	6818      	ldr	r0, [r3, #0]
 800794e:	f008 fc32 	bl	80101b6 <lv_obj_del>
    		screen_sel();
            break;
    }
}
 8007952:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    		screen_sel();
 8007956:	f007 b8db 	b.w	800eb10 <screen_sel>
 800795a:	bd08      	pop	{r3, pc}
 800795c:	20004e6c 	.word	0x20004e6c
 8007960:	20004e70 	.word	0x20004e70

08007964 <print_frequencia>:
{
 8007964:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	sprintf(buffer, "%d%d%d.%d%d%d Mhz", q0, q1, q2, q3, q4, q5);
 8007968:	f8df 90b0 	ldr.w	r9, [pc, #176]	; 8007a1c <print_frequencia+0xb8>
	lv_style_copy(&style_txt1, &lv_style_plain);
 800796c:	4e24      	ldr	r6, [pc, #144]	; (8007a00 <print_frequencia+0x9c>)
	sprintf(buffer, "%d%d%d.%d%d%d Mhz", q0, q1, q2, q3, q4, q5);
 800796e:	4925      	ldr	r1, [pc, #148]	; (8007a04 <print_frequencia+0xa0>)
{
 8007970:	b085      	sub	sp, #20
	sprintf(buffer, "%d%d%d.%d%d%d Mhz", q0, q1, q2, q3, q4, q5);
 8007972:	2400      	movs	r4, #0
 8007974:	2701      	movs	r7, #1
 8007976:	f04f 0803 	mov.w	r8, #3
 800797a:	463a      	mov	r2, r7
 800797c:	4623      	mov	r3, r4
 800797e:	9403      	str	r4, [sp, #12]
 8007980:	9402      	str	r4, [sp, #8]
 8007982:	9701      	str	r7, [sp, #4]
 8007984:	f8cd 8000 	str.w	r8, [sp]
 8007988:	4648      	mov	r0, r9
 800798a:	f013 fa45 	bl	801ae18 <sprintf>
	lv_style_copy(&style_txt1, &lv_style_plain);
 800798e:	4630      	mov	r0, r6
 8007990:	491d      	ldr	r1, [pc, #116]	; (8007a08 <print_frequencia+0xa4>)
 8007992:	f009 f969 	bl	8010c68 <lv_style_copy>
	style_txt1.text.font = &lv_font_eurostile_24;
 8007996:	4b1d      	ldr	r3, [pc, #116]	; (8007a0c <print_frequencia+0xa8>)
 8007998:	6273      	str	r3, [r6, #36]	; 0x24
	style_txt1.text.color = LV_COLOR_WHITE;
 800799a:	4b1d      	ldr	r3, [pc, #116]	; (8007a10 <print_frequencia+0xac>)
	style_txt1.text.letter_space = 0;
 800799c:	8534      	strh	r4, [r6, #40]	; 0x28
	style_txt1.text.color = LV_COLOR_WHITE;
 800799e:	881b      	ldrh	r3, [r3, #0]
 80079a0:	8433      	strh	r3, [r6, #32]
	lv_obj_t * txt_freq = lv_label_create(Tela_Principal, NULL);
 80079a2:	4b1c      	ldr	r3, [pc, #112]	; (8007a14 <print_frequencia+0xb0>)
	style_txt1.text.line_space = 0;
 80079a4:	8574      	strh	r4, [r6, #42]	; 0x2a
	lv_obj_t * txt_freq = lv_label_create(Tela_Principal, NULL);
 80079a6:	6818      	ldr	r0, [r3, #0]
 80079a8:	4621      	mov	r1, r4
 80079aa:	f011 f9d9 	bl	8018d60 <lv_label_create>
	lv_obj_set_event_cb(txt_freq, main_screen_event);   		// Assign an event callback
 80079ae:	491a      	ldr	r1, [pc, #104]	; (8007a18 <print_frequencia+0xb4>)
	lv_obj_t * txt_freq = lv_label_create(Tela_Principal, NULL);
 80079b0:	4605      	mov	r5, r0
	lv_obj_set_event_cb(txt_freq, main_screen_event);   		// Assign an event callback
 80079b2:	f007 fe4e 	bl	800f652 <lv_obj_set_event_cb>
	lv_obj_set_style(txt_freq, &style_txt1); 					// Configura o estilo criado
 80079b6:	4631      	mov	r1, r6
 80079b8:	4628      	mov	r0, r5
 80079ba:	f008 fc8b 	bl	80102d4 <lv_obj_set_style>
	lv_label_set_long_mode(txt_freq, LV_LABEL_LONG_EXPAND); 	// Quebra as linhas longas
 80079be:	4621      	mov	r1, r4
 80079c0:	4628      	mov	r0, r5
 80079c2:	f011 f977 	bl	8018cb4 <lv_label_set_long_mode>
	lv_label_set_recolor(txt_freq, true); 						// Ativa recolorizar por comandos no texto
 80079c6:	4639      	mov	r1, r7
 80079c8:	4628      	mov	r0, r5
 80079ca:	f011 f9b5 	bl	8018d38 <lv_label_set_recolor>
	lv_label_set_align(txt_freq, LV_ALIGN_IN_TOP_MID); 			// Centraliza linhas alinhadas
 80079ce:	4628      	mov	r0, r5
 80079d0:	2102      	movs	r1, #2
 80079d2:	f010 fe0e 	bl	80185f2 <lv_label_set_align>
	lv_label_set_text(txt_freq, buffer);
 80079d6:	4649      	mov	r1, r9
 80079d8:	4628      	mov	r0, r5
 80079da:	f011 f917 	bl	8018c0c <lv_label_set_text>
	lv_obj_set_width(txt_freq, 300); 							// Configuura o comprimento
 80079de:	4628      	mov	r0, r5
 80079e0:	f44f 7196 	mov.w	r1, #300	; 0x12c
 80079e4:	f008 fbbe 	bl	8010164 <lv_obj_set_width>
	lv_obj_align(txt_freq, NULL, LV_ALIGN_IN_TOP_MID, 0, 3); 	// Alinha ao centro
 80079e8:	f8cd 8000 	str.w	r8, [sp]
 80079ec:	4623      	mov	r3, r4
 80079ee:	2202      	movs	r2, #2
 80079f0:	4621      	mov	r1, r4
 80079f2:	4628      	mov	r0, r5
 80079f4:	f007 ffcc 	bl	800f990 <lv_obj_align>
}
 80079f8:	b005      	add	sp, #20
 80079fa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80079fe:	bf00      	nop
 8007a00:	200050f0 	.word	0x200050f0
 8007a04:	0802c702 	.word	0x0802c702
 8007a08:	2000c6a8 	.word	0x2000c6a8
 8007a0c:	20001338 	.word	0x20001338
 8007a10:	0801d8c0 	.word	0x0801d8c0
 8007a14:	20004e70 	.word	0x20004e70
 8007a18:	0800793d 	.word	0x0800793d
 8007a1c:	20004d48 	.word	0x20004d48

08007a20 <print_pot>:
{
 8007a20:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
	if(!falha) {
 8007a24:	4b76      	ldr	r3, [pc, #472]	; (8007c00 <print_pot+0x1e0>)
 8007a26:	681c      	ldr	r4, [r3, #0]
 8007a28:	2c00      	cmp	r4, #0
 8007a2a:	f040 80e5 	bne.w	8007bf8 <print_pot+0x1d8>
		lv_style_copy(&style_txt_fwd, &lv_style_plain);
 8007a2e:	4d75      	ldr	r5, [pc, #468]	; (8007c04 <print_pot+0x1e4>)
 8007a30:	4975      	ldr	r1, [pc, #468]	; (8007c08 <print_pot+0x1e8>)
 8007a32:	edcd 0a03 	vstr	s1, [sp, #12]
 8007a36:	4628      	mov	r0, r5
 8007a38:	ed8d 0a02 	vstr	s0, [sp, #8]
 8007a3c:	f009 f914 	bl	8010c68 <lv_style_copy>
		style_txt_fwd.text.color = LV_COLOR_CYAN;
 8007a40:	f895 3020 	ldrb.w	r3, [r5, #32]
		txt_fwd = lv_label_create(Tela_Principal, NULL);
 8007a44:	f8df 81ec 	ldr.w	r8, [pc, #492]	; 8007c34 <print_pot+0x214>
		style_txt_fwd.text.font = &lv_font_eurostile_24;
 8007a48:	f8df 91ec 	ldr.w	r9, [pc, #492]	; 8007c38 <print_pot+0x218>
 8007a4c:	f8c5 9024 	str.w	r9, [r5, #36]	; 0x24
		style_txt_fwd.text.color = LV_COLOR_CYAN;
 8007a50:	f043 031f 	orr.w	r3, r3, #31
 8007a54:	f885 3020 	strb.w	r3, [r5, #32]
 8007a58:	8c2b      	ldrh	r3, [r5, #32]
		txt_fwd = lv_label_create(Tela_Principal, NULL);
 8007a5a:	4f6c      	ldr	r7, [pc, #432]	; (8007c0c <print_pot+0x1ec>)
		style_txt_fwd.text.color = LV_COLOR_CYAN;
 8007a5c:	f443 63fc 	orr.w	r3, r3, #2016	; 0x7e0
 8007a60:	842b      	strh	r3, [r5, #32]
 8007a62:	0a1b      	lsrs	r3, r3, #8
 8007a64:	f364 03c7 	bfi	r3, r4, #3, #5
 8007a68:	f885 3021 	strb.w	r3, [r5, #33]	; 0x21
		style_txt_fwd.text.letter_space = 1;
 8007a6c:	2601      	movs	r6, #1
		txt_fwd = lv_label_create(Tela_Principal, NULL);
 8007a6e:	4621      	mov	r1, r4
 8007a70:	f8d8 0000 	ldr.w	r0, [r8]
		style_txt_fwd.text.letter_space = 1;
 8007a74:	852e      	strh	r6, [r5, #40]	; 0x28
		style_txt_fwd.text.line_space = 1;
 8007a76:	856e      	strh	r6, [r5, #42]	; 0x2a
		txt_fwd = lv_label_create(Tela_Principal, NULL);
 8007a78:	f011 f972 	bl	8018d60 <lv_label_create>
		lv_obj_set_style(txt_fwd, &style_txt_fwd); 							// Configura o estilo criado
 8007a7c:	4629      	mov	r1, r5
		txt_fwd = lv_label_create(Tela_Principal, NULL);
 8007a7e:	6038      	str	r0, [r7, #0]
		lv_obj_set_style(txt_fwd, &style_txt_fwd); 							// Configura o estilo criado
 8007a80:	f008 fc28 	bl	80102d4 <lv_obj_set_style>
		lv_label_set_long_mode(txt_fwd, LV_LABEL_LONG_EXPAND); 				// Quebra as linhas longas
 8007a84:	6838      	ldr	r0, [r7, #0]
 8007a86:	4621      	mov	r1, r4
 8007a88:	f011 f914 	bl	8018cb4 <lv_label_set_long_mode>
		lv_label_set_recolor(txt_fwd, true); 								// Ativa recolorizar por comandos no texto
 8007a8c:	6838      	ldr	r0, [r7, #0]
 8007a8e:	4631      	mov	r1, r6
 8007a90:	f011 f952 	bl	8018d38 <lv_label_set_recolor>
		lv_label_set_align(txt_fwd, LV_ALIGN_IN_BOTTOM_LEFT); 				// Centraliza linhas alinhadas
 8007a94:	6838      	ldr	r0, [r7, #0]
 8007a96:	2104      	movs	r1, #4
 8007a98:	f010 fdab 	bl	80185f2 <lv_label_set_align>
		lv_label_set_text(txt_fwd, "FWD:");
 8007a9c:	6838      	ldr	r0, [r7, #0]
 8007a9e:	495c      	ldr	r1, [pc, #368]	; (8007c10 <print_pot+0x1f0>)
 8007aa0:	f011 f8b4 	bl	8018c0c <lv_label_set_text>
		lv_obj_align(txt_fwd, NULL, LV_ALIGN_IN_BOTTOM_LEFT, 5, -25); 		// Alinha ao centro
 8007aa4:	f06f 0a18 	mvn.w	sl, #24
		lv_obj_set_width(txt_fwd, 200); 									// Configuura o comprimento
 8007aa8:	6838      	ldr	r0, [r7, #0]
 8007aaa:	21c8      	movs	r1, #200	; 0xc8
 8007aac:	f008 fb5a 	bl	8010164 <lv_obj_set_width>
		lv_obj_align(txt_fwd, NULL, LV_ALIGN_IN_BOTTOM_LEFT, 5, -25); 		// Alinha ao centro
 8007ab0:	f8cd a000 	str.w	sl, [sp]
 8007ab4:	2305      	movs	r3, #5
 8007ab6:	2204      	movs	r2, #4
 8007ab8:	6838      	ldr	r0, [r7, #0]
		txt_pot = lv_label_create(Tela_Principal, NULL);
 8007aba:	4f56      	ldr	r7, [pc, #344]	; (8007c14 <print_pot+0x1f4>)
		lv_obj_align(txt_fwd, NULL, LV_ALIGN_IN_BOTTOM_LEFT, 5, -25); 		// Alinha ao centro
 8007abc:	4621      	mov	r1, r4
 8007abe:	f007 ff67 	bl	800f990 <lv_obj_align>
		txt_pot = lv_label_create(Tela_Principal, NULL);
 8007ac2:	4621      	mov	r1, r4
 8007ac4:	f8d8 0000 	ldr.w	r0, [r8]
 8007ac8:	f011 f94a 	bl	8018d60 <lv_label_create>
		lv_obj_set_style(txt_pot, &style_txt_fwd); 							// Configura o estilo criado
 8007acc:	4629      	mov	r1, r5
		txt_pot = lv_label_create(Tela_Principal, NULL);
 8007ace:	6038      	str	r0, [r7, #0]
		lv_obj_set_style(txt_pot, &style_txt_fwd); 							// Configura o estilo criado
 8007ad0:	f008 fc00 	bl	80102d4 <lv_obj_set_style>
		lv_label_set_long_mode(txt_pot, LV_LABEL_LONG_BREAK); 				// Quebra as linhas longas
 8007ad4:	6838      	ldr	r0, [r7, #0]
		txt_ref = lv_label_create(Tela_Principal, NULL);
 8007ad6:	4d50      	ldr	r5, [pc, #320]	; (8007c18 <print_pot+0x1f8>)
		lv_label_set_long_mode(txt_pot, LV_LABEL_LONG_BREAK); 				// Quebra as linhas longas
 8007ad8:	4631      	mov	r1, r6
 8007ada:	f011 f8eb 	bl	8018cb4 <lv_label_set_long_mode>
		lv_label_set_recolor(txt_pot, true); 								// Ativa recolorizar por comandos no texto
 8007ade:	6838      	ldr	r0, [r7, #0]
 8007ae0:	4631      	mov	r1, r6
 8007ae2:	f011 f929 	bl	8018d38 <lv_label_set_recolor>
		lv_label_set_align(txt_pot, LV_ALIGN_IN_BOTTOM_RIGHT); 				// Centraliza linhas alinhadas
 8007ae6:	6838      	ldr	r0, [r7, #0]
 8007ae8:	2106      	movs	r1, #6
 8007aea:	f010 fd82 	bl	80185f2 <lv_label_set_align>
		sprintf(buffer, "%0.1fW", fwd);
 8007aee:	ed9d 0a02 	vldr	s0, [sp, #8]
 8007af2:	ee10 0a10 	vmov	r0, s0
 8007af6:	f7f8 fd27 	bl	8000548 <__aeabi_f2d>
 8007afa:	4602      	mov	r2, r0
 8007afc:	460b      	mov	r3, r1
 8007afe:	4847      	ldr	r0, [pc, #284]	; (8007c1c <print_pot+0x1fc>)
 8007b00:	4947      	ldr	r1, [pc, #284]	; (8007c20 <print_pot+0x200>)
 8007b02:	f013 f989 	bl	801ae18 <sprintf>
		lv_label_set_text(txt_pot, buffer);
 8007b06:	6838      	ldr	r0, [r7, #0]
 8007b08:	4944      	ldr	r1, [pc, #272]	; (8007c1c <print_pot+0x1fc>)
 8007b0a:	f011 f87f 	bl	8018c0c <lv_label_set_text>
		lv_obj_set_width(txt_pot, 200); 									// Configuura o comprimento
 8007b0e:	6838      	ldr	r0, [r7, #0]
 8007b10:	21c8      	movs	r1, #200	; 0xc8
 8007b12:	f008 fb27 	bl	8010164 <lv_obj_set_width>
		lv_obj_align(txt_pot, NULL, LV_ALIGN_IN_BOTTOM_RIGHT, -8, -25); 	// Alinha ao centro
 8007b16:	f8cd a000 	str.w	sl, [sp]
 8007b1a:	6838      	ldr	r0, [r7, #0]
		lv_style_copy(&style_txt_ref, &lv_style_plain);
 8007b1c:	4f41      	ldr	r7, [pc, #260]	; (8007c24 <print_pot+0x204>)
		lv_obj_align(txt_pot, NULL, LV_ALIGN_IN_BOTTOM_RIGHT, -8, -25); 	// Alinha ao centro
 8007b1e:	2206      	movs	r2, #6
 8007b20:	f06f 0307 	mvn.w	r3, #7
 8007b24:	4621      	mov	r1, r4
 8007b26:	f007 ff33 	bl	800f990 <lv_obj_align>
		lv_style_copy(&style_txt_ref, &lv_style_plain);
 8007b2a:	4937      	ldr	r1, [pc, #220]	; (8007c08 <print_pot+0x1e8>)
 8007b2c:	4638      	mov	r0, r7
 8007b2e:	f009 f89b 	bl	8010c68 <lv_style_copy>
		style_txt_ref.text.color = LV_COLOR_WHITE;
 8007b32:	4b3d      	ldr	r3, [pc, #244]	; (8007c28 <print_pot+0x208>)
		txt_ref = lv_label_create(Tela_Principal, NULL);
 8007b34:	f8d8 0000 	ldr.w	r0, [r8]
		style_txt_ref.text.color = LV_COLOR_WHITE;
 8007b38:	881b      	ldrh	r3, [r3, #0]
 8007b3a:	843b      	strh	r3, [r7, #32]
		txt_ref = lv_label_create(Tela_Principal, NULL);
 8007b3c:	4621      	mov	r1, r4
		style_txt_ref.text.font = &lv_font_eurostile_24;
 8007b3e:	f8c7 9024 	str.w	r9, [r7, #36]	; 0x24
		style_txt_ref.text.letter_space = 1;
 8007b42:	853e      	strh	r6, [r7, #40]	; 0x28
		style_txt_ref.text.line_space = 1;
 8007b44:	857e      	strh	r6, [r7, #42]	; 0x2a
		txt_ref = lv_label_create(Tela_Principal, NULL);
 8007b46:	f011 f90b 	bl	8018d60 <lv_label_create>
		lv_obj_set_style(txt_ref, &style_txt_ref); 							// Configura o estilo criado
 8007b4a:	4639      	mov	r1, r7
		txt_ref = lv_label_create(Tela_Principal, NULL);
 8007b4c:	6028      	str	r0, [r5, #0]
		lv_obj_set_style(txt_ref, &style_txt_ref); 							// Configura o estilo criado
 8007b4e:	f008 fbc1 	bl	80102d4 <lv_obj_set_style>
		lv_label_set_long_mode(txt_ref, LV_LABEL_LONG_EXPAND); 				// Quebra as linhas longas
 8007b52:	6828      	ldr	r0, [r5, #0]
 8007b54:	4621      	mov	r1, r4
 8007b56:	f011 f8ad 	bl	8018cb4 <lv_label_set_long_mode>
		lv_label_set_recolor(txt_ref, true); 								// Ativa recolorizar por comandos no texto
 8007b5a:	6828      	ldr	r0, [r5, #0]
 8007b5c:	4631      	mov	r1, r6
 8007b5e:	f011 f8eb 	bl	8018d38 <lv_label_set_recolor>
		lv_label_set_align(txt_ref, LV_ALIGN_IN_BOTTOM_LEFT); 				// Centraliza linhas alinhadas
 8007b62:	6828      	ldr	r0, [r5, #0]
 8007b64:	2104      	movs	r1, #4
 8007b66:	f010 fd44 	bl	80185f2 <lv_label_set_align>
		lv_label_set_text(txt_ref, "REF:");
 8007b6a:	6828      	ldr	r0, [r5, #0]
 8007b6c:	492f      	ldr	r1, [pc, #188]	; (8007c2c <print_pot+0x20c>)
 8007b6e:	f011 f84d 	bl	8018c0c <lv_label_set_text>
		lv_obj_align(txt_ref, NULL, LV_ALIGN_IN_BOTTOM_LEFT, 5, -2); 		//Alinha ao centro
 8007b72:	f06f 0901 	mvn.w	r9, #1
		lv_obj_set_width(txt_ref, 300); 									// Configuura o comprimento
 8007b76:	6828      	ldr	r0, [r5, #0]
 8007b78:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8007b7c:	f008 faf2 	bl	8010164 <lv_obj_set_width>
		lv_obj_align(txt_ref, NULL, LV_ALIGN_IN_BOTTOM_LEFT, 5, -2); 		//Alinha ao centro
 8007b80:	f8cd 9000 	str.w	r9, [sp]
 8007b84:	2305      	movs	r3, #5
 8007b86:	2204      	movs	r2, #4
 8007b88:	6828      	ldr	r0, [r5, #0]
		txt_swr = lv_label_create(Tela_Principal, NULL);
 8007b8a:	4d29      	ldr	r5, [pc, #164]	; (8007c30 <print_pot+0x210>)
		lv_obj_align(txt_ref, NULL, LV_ALIGN_IN_BOTTOM_LEFT, 5, -2); 		//Alinha ao centro
 8007b8c:	4621      	mov	r1, r4
 8007b8e:	f007 feff 	bl	800f990 <lv_obj_align>
		txt_swr = lv_label_create(Tela_Principal, NULL);
 8007b92:	4621      	mov	r1, r4
 8007b94:	f8d8 0000 	ldr.w	r0, [r8]
 8007b98:	f011 f8e2 	bl	8018d60 <lv_label_create>
		lv_obj_set_style(txt_swr, &style_txt_ref); 							// Configura o estilo criado
 8007b9c:	4639      	mov	r1, r7
		txt_swr = lv_label_create(Tela_Principal, NULL);
 8007b9e:	6028      	str	r0, [r5, #0]
		lv_obj_set_style(txt_swr, &style_txt_ref); 							// Configura o estilo criado
 8007ba0:	f008 fb98 	bl	80102d4 <lv_obj_set_style>
		lv_label_set_long_mode(txt_swr, LV_LABEL_LONG_BREAK); 				// Quebra as linhas longas
 8007ba4:	4631      	mov	r1, r6
 8007ba6:	6828      	ldr	r0, [r5, #0]
 8007ba8:	f011 f884 	bl	8018cb4 <lv_label_set_long_mode>
		lv_label_set_recolor(txt_swr, true); 								// Ativa recolorizar por comandos no texto
 8007bac:	4631      	mov	r1, r6
 8007bae:	6828      	ldr	r0, [r5, #0]
 8007bb0:	f011 f8c2 	bl	8018d38 <lv_label_set_recolor>
		lv_label_set_align(txt_swr, LV_ALIGN_IN_BOTTOM_RIGHT); 				// Centraliza linhas alinhadas
 8007bb4:	2106      	movs	r1, #6
 8007bb6:	6828      	ldr	r0, [r5, #0]
 8007bb8:	f010 fd1b 	bl	80185f2 <lv_label_set_align>
		sprintf(buffer, "%0.1fW", swr);
 8007bbc:	eddd 0a03 	vldr	s1, [sp, #12]
 8007bc0:	ee10 0a90 	vmov	r0, s1
 8007bc4:	f7f8 fcc0 	bl	8000548 <__aeabi_f2d>
 8007bc8:	4602      	mov	r2, r0
 8007bca:	460b      	mov	r3, r1
 8007bcc:	4813      	ldr	r0, [pc, #76]	; (8007c1c <print_pot+0x1fc>)
 8007bce:	4914      	ldr	r1, [pc, #80]	; (8007c20 <print_pot+0x200>)
 8007bd0:	f013 f922 	bl	801ae18 <sprintf>
		lv_label_set_text(txt_swr, buffer);
 8007bd4:	4911      	ldr	r1, [pc, #68]	; (8007c1c <print_pot+0x1fc>)
 8007bd6:	6828      	ldr	r0, [r5, #0]
 8007bd8:	f011 f818 	bl	8018c0c <lv_label_set_text>
		lv_obj_set_width(txt_swr, 300); 									// Configuura o comprimento
 8007bdc:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8007be0:	6828      	ldr	r0, [r5, #0]
 8007be2:	f008 fabf 	bl	8010164 <lv_obj_set_width>
		lv_obj_align(txt_swr, NULL, LV_ALIGN_IN_BOTTOM_RIGHT, -8, -2); 		//Alinha ao centro
 8007be6:	f8cd 9000 	str.w	r9, [sp]
 8007bea:	f06f 0307 	mvn.w	r3, #7
 8007bee:	2206      	movs	r2, #6
 8007bf0:	4621      	mov	r1, r4
 8007bf2:	6828      	ldr	r0, [r5, #0]
 8007bf4:	f007 fecc 	bl	800f990 <lv_obj_align>
}
 8007bf8:	b004      	add	sp, #16
 8007bfa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007bfe:	bf00      	nop
 8007c00:	20004e2c 	.word	0x20004e2c
 8007c04:	2000512c 	.word	0x2000512c
 8007c08:	2000c6a8 	.word	0x2000c6a8
 8007c0c:	200051a4 	.word	0x200051a4
 8007c10:	0802c714 	.word	0x0802c714
 8007c14:	200051a8 	.word	0x200051a8
 8007c18:	200051ac 	.word	0x200051ac
 8007c1c:	20004d48 	.word	0x20004d48
 8007c20:	0802c719 	.word	0x0802c719
 8007c24:	20005168 	.word	0x20005168
 8007c28:	0801d8c0 	.word	0x0801d8c0
 8007c2c:	0802c720 	.word	0x0802c720
 8007c30:	200051b0 	.word	0x200051b0
 8007c34:	20004e70 	.word	0x20004e70
 8007c38:	20001338 	.word	0x20001338

08007c3c <print_audio>:
{
 8007c3c:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
	lv_style_copy(&style_txt, &lv_style_plain);
 8007c40:	4d3c      	ldr	r5, [pc, #240]	; (8007d34 <print_audio+0xf8>)
	img_stereo = lv_img_create(Tela_Principal, NULL); 					// Crate an image object
 8007c42:	4e3d      	ldr	r6, [pc, #244]	; (8007d38 <print_audio+0xfc>)
 8007c44:	4f3d      	ldr	r7, [pc, #244]	; (8007d3c <print_audio+0x100>)
{
 8007c46:	4682      	mov	sl, r0
 8007c48:	4689      	mov	r9, r1
	lv_style_copy(&style_txt, &lv_style_plain);
 8007c4a:	4628      	mov	r0, r5
 8007c4c:	493c      	ldr	r1, [pc, #240]	; (8007d40 <print_audio+0x104>)
 8007c4e:	f009 f80b 	bl	8010c68 <lv_style_copy>
	style_txt.text.font = &lv_font_eurostile_10;
 8007c52:	4b3c      	ldr	r3, [pc, #240]	; (8007d44 <print_audio+0x108>)
 8007c54:	626b      	str	r3, [r5, #36]	; 0x24
	style_txt.text.color = LV_COLOR_WHITE;
 8007c56:	4b3c      	ldr	r3, [pc, #240]	; (8007d48 <print_audio+0x10c>)
	img_stereo = lv_img_create(Tela_Principal, NULL); 					// Crate an image object
 8007c58:	6830      	ldr	r0, [r6, #0]
	style_txt.text.color = LV_COLOR_WHITE;
 8007c5a:	881b      	ldrh	r3, [r3, #0]
 8007c5c:	842b      	strh	r3, [r5, #32]
	style_txt.text.letter_space = 1;
 8007c5e:	f04f 0801 	mov.w	r8, #1
	img_stereo = lv_img_create(Tela_Principal, NULL); 					// Crate an image object
 8007c62:	2100      	movs	r1, #0
	style_txt.text.letter_space = 1;
 8007c64:	f8a5 8028 	strh.w	r8, [r5, #40]	; 0x28
	style_txt.text.line_space = 1;
 8007c68:	f8a5 802a 	strh.w	r8, [r5, #42]	; 0x2a
	img_stereo = lv_img_create(Tela_Principal, NULL); 					// Crate an image object
 8007c6c:	f010 f9aa 	bl	8017fc4 <lv_img_create>
	lv_obj_t * txt_stereo = lv_label_create(Tela_Principal, NULL);
 8007c70:	2100      	movs	r1, #0
	img_stereo = lv_img_create(Tela_Principal, NULL); 					// Crate an image object
 8007c72:	6038      	str	r0, [r7, #0]
	lv_obj_t * txt_stereo = lv_label_create(Tela_Principal, NULL);
 8007c74:	6830      	ldr	r0, [r6, #0]
 8007c76:	f011 f873 	bl	8018d60 <lv_label_create>
	lv_obj_set_style(txt_stereo, &style_txt);                    		// Set the created style
 8007c7a:	4629      	mov	r1, r5
	lv_obj_t * txt_stereo = lv_label_create(Tela_Principal, NULL);
 8007c7c:	4604      	mov	r4, r0
	lv_obj_set_style(txt_stereo, &style_txt);                    		// Set the created style
 8007c7e:	f008 fb29 	bl	80102d4 <lv_obj_set_style>
	lv_label_set_long_mode(txt_stereo, LV_LABEL_LONG_EXPAND);     		// Break the long lines
 8007c82:	2100      	movs	r1, #0
 8007c84:	4620      	mov	r0, r4
 8007c86:	f011 f815 	bl	8018cb4 <lv_label_set_long_mode>
	lv_label_set_recolor(txt_stereo, true);                      		// Enable re-coloring by commands in the text
 8007c8a:	4641      	mov	r1, r8
 8007c8c:	4620      	mov	r0, r4
 8007c8e:	f011 f853 	bl	8018d38 <lv_label_set_recolor>
	lv_label_set_align(txt_stereo, LV_ALIGN_IN_TOP_LEFT);       		// Center aligned lines
 8007c92:	4641      	mov	r1, r8
 8007c94:	4620      	mov	r0, r4
 8007c96:	f010 fcac 	bl	80185f2 <lv_label_set_align>
	if(stereo) {
 8007c9a:	f1ba 0f00 	cmp.w	sl, #0
 8007c9e:	d042      	beq.n	8007d26 <print_audio+0xea>
		lv_label_set_text(txt_stereo, "ST");
 8007ca0:	492a      	ldr	r1, [pc, #168]	; (8007d4c <print_audio+0x110>)
 8007ca2:	4620      	mov	r0, r4
 8007ca4:	f010 ffb2 	bl	8018c0c <lv_label_set_text>
		lv_img_set_src(img_stereo, &stereo_vd);
 8007ca8:	4929      	ldr	r1, [pc, #164]	; (8007d50 <print_audio+0x114>)
		lv_img_set_src(img_stereo, &stereo_off);
 8007caa:	6838      	ldr	r0, [r7, #0]
 8007cac:	f010 f8fa 	bl	8017ea4 <lv_img_set_src>
		lv_obj_set_pos(img_stereo, 28, 59); 							// Set the positions
 8007cb0:	223b      	movs	r2, #59	; 0x3b
 8007cb2:	6838      	ldr	r0, [r7, #0]
 8007cb4:	211c      	movs	r1, #28
 8007cb6:	f007 fe16 	bl	800f8e6 <lv_obj_set_pos>
	lv_obj_align(txt_stereo, NULL, LV_ALIGN_IN_TOP_LEFT, 6, 61);      	// Align to center
 8007cba:	253d      	movs	r5, #61	; 0x3d
	lv_obj_set_width(txt_stereo, 300);                           		// Set a width
 8007cbc:	4620      	mov	r0, r4
 8007cbe:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8007cc2:	f008 fa4f 	bl	8010164 <lv_obj_set_width>
	lv_obj_align(txt_stereo, NULL, LV_ALIGN_IN_TOP_LEFT, 6, 61);      	// Align to center
 8007cc6:	2201      	movs	r2, #1
 8007cc8:	2306      	movs	r3, #6
 8007cca:	4620      	mov	r0, r4
 8007ccc:	9500      	str	r5, [sp, #0]
 8007cce:	2100      	movs	r1, #0
 8007cd0:	f007 fe5e 	bl	800f990 <lv_obj_align>
	lv_obj_t * txt_audio = lv_label_create(Tela_Principal, NULL);
 8007cd4:	2100      	movs	r1, #0
 8007cd6:	6830      	ldr	r0, [r6, #0]
 8007cd8:	f011 f842 	bl	8018d60 <lv_label_create>
	lv_obj_set_style(txt_audio, &style_txt);                    		// Set the created style
 8007cdc:	4915      	ldr	r1, [pc, #84]	; (8007d34 <print_audio+0xf8>)
	lv_obj_t * txt_audio = lv_label_create(Tela_Principal, NULL);
 8007cde:	4604      	mov	r4, r0
	lv_obj_set_style(txt_audio, &style_txt);                    		// Set the created style
 8007ce0:	f008 faf8 	bl	80102d4 <lv_obj_set_style>
	lv_label_set_long_mode(txt_audio, LV_LABEL_LONG_EXPAND);     		// Break the long lines
 8007ce4:	4620      	mov	r0, r4
 8007ce6:	2100      	movs	r1, #0
 8007ce8:	f010 ffe4 	bl	8018cb4 <lv_label_set_long_mode>
	lv_label_set_recolor(txt_audio, true);                      		// Enable re-coloring by commands in the text
 8007cec:	4620      	mov	r0, r4
 8007cee:	2101      	movs	r1, #1
 8007cf0:	f011 f822 	bl	8018d38 <lv_label_set_recolor>
	lv_label_set_align(txt_audio, LV_ALIGN_IN_TOP_LEFT);       			// Center aligned lines
 8007cf4:	4620      	mov	r0, r4
 8007cf6:	2101      	movs	r1, #1
 8007cf8:	f010 fc7b 	bl	80185f2 <lv_label_set_align>
	lv_label_set_text(txt_audio, IndexAudio[audio]);
 8007cfc:	4b15      	ldr	r3, [pc, #84]	; (8007d54 <print_audio+0x118>)
 8007cfe:	4620      	mov	r0, r4
 8007d00:	f853 1029 	ldr.w	r1, [r3, r9, lsl #2]
 8007d04:	f010 ff82 	bl	8018c0c <lv_label_set_text>
	lv_obj_set_width(txt_audio, 300);                           		// Set a width
 8007d08:	4620      	mov	r0, r4
 8007d0a:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8007d0e:	f008 fa29 	bl	8010164 <lv_obj_set_width>
	lv_obj_align(txt_audio, NULL, LV_ALIGN_IN_TOP_LEFT, 55, 61);      	// Align to center
 8007d12:	9500      	str	r5, [sp, #0]
 8007d14:	2337      	movs	r3, #55	; 0x37
 8007d16:	2201      	movs	r2, #1
 8007d18:	2100      	movs	r1, #0
 8007d1a:	4620      	mov	r0, r4
 8007d1c:	f007 fe38 	bl	800f990 <lv_obj_align>
}
 8007d20:	b002      	add	sp, #8
 8007d22:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		lv_label_set_text(txt_stereo, "Mo");
 8007d26:	490c      	ldr	r1, [pc, #48]	; (8007d58 <print_audio+0x11c>)
 8007d28:	4620      	mov	r0, r4
 8007d2a:	f010 ff6f 	bl	8018c0c <lv_label_set_text>
		lv_img_set_src(img_stereo, &stereo_off);
 8007d2e:	490b      	ldr	r1, [pc, #44]	; (8007d5c <print_audio+0x120>)
 8007d30:	e7bb      	b.n	8007caa <print_audio+0x6e>
 8007d32:	bf00      	nop
 8007d34:	2000503c 	.word	0x2000503c
 8007d38:	20004e70 	.word	0x20004e70
 8007d3c:	20004ed0 	.word	0x20004ed0
 8007d40:	2000c6a8 	.word	0x2000c6a8
 8007d44:	200006f8 	.word	0x200006f8
 8007d48:	0801d8c0 	.word	0x0801d8c0
 8007d4c:	0802c6fc 	.word	0x0802c6fc
 8007d50:	20001bd4 	.word	0x20001bd4
 8007d54:	2000196c 	.word	0x2000196c
 8007d58:	0802c6ff 	.word	0x0802c6ff
 8007d5c:	20001bc8 	.word	0x20001bc8

08007d60 <print_temperatura>:
{
 8007d60:	b573      	push	{r0, r1, r4, r5, r6, lr}
	lv_style_copy(&style_txt, &lv_style_plain);
 8007d62:	4d1f      	ldr	r5, [pc, #124]	; (8007de0 <print_temperatura+0x80>)
 8007d64:	491f      	ldr	r1, [pc, #124]	; (8007de4 <print_temperatura+0x84>)
	txt_temp = lv_label_create(Tela_Principal, NULL);
 8007d66:	4c20      	ldr	r4, [pc, #128]	; (8007de8 <print_temperatura+0x88>)
	lv_style_copy(&style_txt, &lv_style_plain);
 8007d68:	4628      	mov	r0, r5
 8007d6a:	f008 ff7d 	bl	8010c68 <lv_style_copy>
	style_txt.text.font = &lv_font_eurostile_10;
 8007d6e:	4b1f      	ldr	r3, [pc, #124]	; (8007dec <print_temperatura+0x8c>)
 8007d70:	626b      	str	r3, [r5, #36]	; 0x24
	style_txt.text.color = LV_COLOR_WHITE;
 8007d72:	4b1f      	ldr	r3, [pc, #124]	; (8007df0 <print_temperatura+0x90>)
 8007d74:	881b      	ldrh	r3, [r3, #0]
 8007d76:	842b      	strh	r3, [r5, #32]
	txt_temp = lv_label_create(Tela_Principal, NULL);
 8007d78:	4b1e      	ldr	r3, [pc, #120]	; (8007df4 <print_temperatura+0x94>)
	style_txt.text.letter_space = 1;
 8007d7a:	2601      	movs	r6, #1
	txt_temp = lv_label_create(Tela_Principal, NULL);
 8007d7c:	6818      	ldr	r0, [r3, #0]
	style_txt.text.letter_space = 1;
 8007d7e:	852e      	strh	r6, [r5, #40]	; 0x28
	txt_temp = lv_label_create(Tela_Principal, NULL);
 8007d80:	2100      	movs	r1, #0
	style_txt.text.line_space = 1;
 8007d82:	856e      	strh	r6, [r5, #42]	; 0x2a
	txt_temp = lv_label_create(Tela_Principal, NULL);
 8007d84:	f010 ffec 	bl	8018d60 <lv_label_create>
	lv_obj_set_style(txt_temp, &style_txt);                    		// Set the created style
 8007d88:	4629      	mov	r1, r5
	txt_temp = lv_label_create(Tela_Principal, NULL);
 8007d8a:	6020      	str	r0, [r4, #0]
	lv_obj_set_style(txt_temp, &style_txt);                    		// Set the created style
 8007d8c:	f008 faa2 	bl	80102d4 <lv_obj_set_style>
	lv_label_set_long_mode(txt_temp, LV_LABEL_LONG_EXPAND);     	// Break the long lines
 8007d90:	6820      	ldr	r0, [r4, #0]
	sprintf(buffer, "TP:%0.1f°", temp);
 8007d92:	4d19      	ldr	r5, [pc, #100]	; (8007df8 <print_temperatura+0x98>)
	lv_label_set_long_mode(txt_temp, LV_LABEL_LONG_EXPAND);     	// Break the long lines
 8007d94:	2100      	movs	r1, #0
 8007d96:	f010 ff8d 	bl	8018cb4 <lv_label_set_long_mode>
	lv_label_set_recolor(txt_temp, true);                      		// Enable re-coloring by commands in the text
 8007d9a:	4631      	mov	r1, r6
 8007d9c:	6820      	ldr	r0, [r4, #0]
 8007d9e:	f010 ffcb 	bl	8018d38 <lv_label_set_recolor>
	lv_label_set_align(txt_temp, LV_ALIGN_IN_TOP_LEFT);       		// Center aligned lines
 8007da2:	4631      	mov	r1, r6
 8007da4:	6820      	ldr	r0, [r4, #0]
 8007da6:	f010 fc24 	bl	80185f2 <lv_label_set_align>
	sprintf(buffer, "TP:%0.1f°", temp);
 8007daa:	a30b      	add	r3, pc, #44	; (adr r3, 8007dd8 <print_temperatura+0x78>)
 8007dac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007db0:	4912      	ldr	r1, [pc, #72]	; (8007dfc <print_temperatura+0x9c>)
 8007db2:	4628      	mov	r0, r5
 8007db4:	f013 f830 	bl	801ae18 <sprintf>
	lv_label_set_text(txt_temp, buffer);
 8007db8:	4629      	mov	r1, r5
 8007dba:	6820      	ldr	r0, [r4, #0]
 8007dbc:	f010 ff26 	bl	8018c0c <lv_label_set_text>
	lv_obj_align(txt_temp, NULL, LV_ALIGN_IN_TOP_LEFT, 109, 61);    // Align to center
 8007dc0:	233d      	movs	r3, #61	; 0x3d
 8007dc2:	9300      	str	r3, [sp, #0]
 8007dc4:	4632      	mov	r2, r6
 8007dc6:	236d      	movs	r3, #109	; 0x6d
 8007dc8:	2100      	movs	r1, #0
 8007dca:	6820      	ldr	r0, [r4, #0]
 8007dcc:	f007 fde0 	bl	800f990 <lv_obj_align>
}
 8007dd0:	b002      	add	sp, #8
 8007dd2:	bd70      	pop	{r4, r5, r6, pc}
 8007dd4:	f3af 8000 	nop.w
 8007dd8:	60000000 	.word	0x60000000
 8007ddc:	4045a666 	.word	0x4045a666
 8007de0:	20005078 	.word	0x20005078
 8007de4:	2000c6a8 	.word	0x2000c6a8
 8007de8:	200051b4 	.word	0x200051b4
 8007dec:	200006f8 	.word	0x200006f8
 8007df0:	0801d8c0 	.word	0x0801d8c0
 8007df4:	20004e70 	.word	0x20004e70
 8007df8:	20004d48 	.word	0x20004d48
 8007dfc:	0802c72d 	.word	0x0802c72d

08007e00 <print_alarme>:
{
 8007e00:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	lv_style_copy(&style_cont, &lv_style_plain);
 8007e04:	4c5a      	ldr	r4, [pc, #360]	; (8007f70 <print_alarme+0x170>)
 8007e06:	495b      	ldr	r1, [pc, #364]	; (8007f74 <print_alarme+0x174>)
	cod_falha = lv_label_create(cont, NULL);
 8007e08:	4d5b      	ldr	r5, [pc, #364]	; (8007f78 <print_alarme+0x178>)
{
 8007e0a:	4680      	mov	r8, r0
	lv_style_copy(&style_cont, &lv_style_plain);
 8007e0c:	4620      	mov	r0, r4
 8007e0e:	f008 ff2b 	bl	8010c68 <lv_style_copy>
	style_cont.text.font = &lv_font_eurostile_22;
 8007e12:	4b5a      	ldr	r3, [pc, #360]	; (8007f7c <print_alarme+0x17c>)
 8007e14:	6263      	str	r3, [r4, #36]	; 0x24
	style_cont.text.color = LV_COLOR_WHITE;
 8007e16:	4b5a      	ldr	r3, [pc, #360]	; (8007f80 <print_alarme+0x180>)
 8007e18:	881b      	ldrh	r3, [r3, #0]
 8007e1a:	8423      	strh	r3, [r4, #32]
	style_cont.body.main_color = LV_COLOR_RED;
 8007e1c:	78a3      	ldrb	r3, [r4, #2]
 8007e1e:	f36f 0304 	bfc	r3, #0, #5
 8007e22:	70a3      	strb	r3, [r4, #2]
 8007e24:	8863      	ldrh	r3, [r4, #2]
 8007e26:	f36f 134a 	bfc	r3, #5, #6
 8007e2a:	8063      	strh	r3, [r4, #2]
 8007e2c:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8007e30:	f043 03f8 	orr.w	r3, r3, #248	; 0xf8
 8007e34:	70e3      	strb	r3, [r4, #3]
	style_cont.body.grad_color = LV_COLOR_RED;
 8007e36:	7923      	ldrb	r3, [r4, #4]
 8007e38:	f36f 0304 	bfc	r3, #0, #5
 8007e3c:	7123      	strb	r3, [r4, #4]
 8007e3e:	88a3      	ldrh	r3, [r4, #4]
 8007e40:	f36f 134a 	bfc	r3, #5, #6
 8007e44:	80a3      	strh	r3, [r4, #4]
 8007e46:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8007e4a:	f043 03f8 	orr.w	r3, r3, #248	; 0xf8
 8007e4e:	7163      	strb	r3, [r4, #5]
	style_cont.body.opa = LV_OPA_50;
 8007e50:	237f      	movs	r3, #127	; 0x7f
 8007e52:	7223      	strb	r3, [r4, #8]
	cont = lv_cont_create(Tela_Principal, NULL);
 8007e54:	4b4b      	ldr	r3, [pc, #300]	; (8007f84 <print_alarme+0x184>)
	style_cont.text.letter_space = 1;
 8007e56:	2701      	movs	r7, #1
	cont = lv_cont_create(Tela_Principal, NULL);
 8007e58:	6818      	ldr	r0, [r3, #0]
	style_cont.text.letter_space = 1;
 8007e5a:	8527      	strh	r7, [r4, #40]	; 0x28
	cont = lv_cont_create(Tela_Principal, NULL);
 8007e5c:	2100      	movs	r1, #0
	style_cont.text.line_space = 1;
 8007e5e:	8567      	strh	r7, [r4, #42]	; 0x2a
	cont = lv_cont_create(Tela_Principal, NULL);
 8007e60:	f00e fe54 	bl	8016b0c <lv_cont_create>
	lv_obj_set_style(cont, &style_cont);
 8007e64:	4621      	mov	r1, r4
	cont = lv_cont_create(Tela_Principal, NULL);
 8007e66:	4606      	mov	r6, r0
	lv_obj_set_style(cont, &style_cont);
 8007e68:	f008 fa34 	bl	80102d4 <lv_obj_set_style>
	lv_obj_set_size(cont, 154, 50);
 8007e6c:	2232      	movs	r2, #50	; 0x32
 8007e6e:	219a      	movs	r1, #154	; 0x9a
 8007e70:	4630      	mov	r0, r6
 8007e72:	f008 f92d 	bl	80100d0 <lv_obj_set_size>
	lv_obj_align(cont, NULL, LV_ALIGN_IN_TOP_LEFT, 3, 75);
 8007e76:	234b      	movs	r3, #75	; 0x4b
 8007e78:	463a      	mov	r2, r7
 8007e7a:	9300      	str	r3, [sp, #0]
 8007e7c:	2100      	movs	r1, #0
 8007e7e:	2303      	movs	r3, #3
 8007e80:	4630      	mov	r0, r6
 8007e82:	f007 fd85 	bl	800f990 <lv_obj_align>
	lv_cont_set_layout(cont, LV_LAYOUT_OFF);
 8007e86:	2100      	movs	r1, #0
 8007e88:	4630      	mov	r0, r6
 8007e8a:	f00e fea1 	bl	8016bd0 <lv_cont_set_layout>
	cod_falha = lv_label_create(cont, NULL);
 8007e8e:	2100      	movs	r1, #0
 8007e90:	4630      	mov	r0, r6
 8007e92:	f010 ff65 	bl	8018d60 <lv_label_create>
	lv_label_set_long_mode(cod_falha, LV_LABEL_LONG_EXPAND);     	// Break the long lines
 8007e96:	2100      	movs	r1, #0
	cod_falha = lv_label_create(cont, NULL);
 8007e98:	6028      	str	r0, [r5, #0]
	lv_label_set_long_mode(cod_falha, LV_LABEL_LONG_EXPAND);     	// Break the long lines
 8007e9a:	f010 ff0b 	bl	8018cb4 <lv_label_set_long_mode>
	lv_label_set_recolor(cod_falha, true); 							// Ativa recolorizar por comandos no texto
 8007e9e:	4639      	mov	r1, r7
 8007ea0:	6828      	ldr	r0, [r5, #0]
	desc_falha = lv_label_create(cont, NULL);
 8007ea2:	4c39      	ldr	r4, [pc, #228]	; (8007f88 <print_alarme+0x188>)
	lv_label_set_recolor(cod_falha, true); 							// Ativa recolorizar por comandos no texto
 8007ea4:	f010 ff48 	bl	8018d38 <lv_label_set_recolor>
	lv_obj_set_width(cod_falha, 150);
 8007ea8:	2196      	movs	r1, #150	; 0x96
 8007eaa:	6828      	ldr	r0, [r5, #0]
 8007eac:	f008 f95a 	bl	8010164 <lv_obj_set_width>
	lv_obj_align(cod_falha, cont, LV_ALIGN_IN_BOTTOM_MID, -10, -24 );
 8007eb0:	f06f 0317 	mvn.w	r3, #23
 8007eb4:	2205      	movs	r2, #5
 8007eb6:	9300      	str	r3, [sp, #0]
 8007eb8:	4631      	mov	r1, r6
 8007eba:	f06f 0309 	mvn.w	r3, #9
 8007ebe:	6828      	ldr	r0, [r5, #0]
 8007ec0:	f007 fd66 	bl	800f990 <lv_obj_align>
	desc_falha = lv_label_create(cont, NULL);
 8007ec4:	2100      	movs	r1, #0
 8007ec6:	4630      	mov	r0, r6
 8007ec8:	f010 ff4a 	bl	8018d60 <lv_label_create>
	lv_label_set_long_mode(desc_falha, LV_LABEL_LONG_SROLL_CIRC);     	// Break the long lines
 8007ecc:	2104      	movs	r1, #4
	desc_falha = lv_label_create(cont, NULL);
 8007ece:	6020      	str	r0, [r4, #0]
	lv_label_set_long_mode(desc_falha, LV_LABEL_LONG_SROLL_CIRC);     	// Break the long lines
 8007ed0:	f010 fef0 	bl	8018cb4 <lv_label_set_long_mode>
	lv_label_set_recolor(desc_falha, true); 							// Ativa recolorizar por comandos no texto
 8007ed4:	4639      	mov	r1, r7
 8007ed6:	6820      	ldr	r0, [r4, #0]
 8007ed8:	f010 ff2e 	bl	8018d38 <lv_label_set_recolor>
	lv_obj_set_width(desc_falha, 150);
 8007edc:	2196      	movs	r1, #150	; 0x96
 8007ede:	6820      	ldr	r0, [r4, #0]
 8007ee0:	f008 f940 	bl	8010164 <lv_obj_set_width>
	lv_obj_align(desc_falha, cont, LV_ALIGN_IN_BOTTOM_MID, 0, -2);
 8007ee4:	f06f 0301 	mvn.w	r3, #1
 8007ee8:	9300      	str	r3, [sp, #0]
 8007eea:	2205      	movs	r2, #5
 8007eec:	2300      	movs	r3, #0
 8007eee:	4631      	mov	r1, r6
 8007ef0:	6820      	ldr	r0, [r4, #0]
    switch(falha) {
 8007ef2:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
	lv_obj_align(desc_falha, cont, LV_ALIGN_IN_BOTTOM_MID, 0, -2);
 8007ef6:	f007 fd4b 	bl	800f990 <lv_obj_align>
    switch(falha) {
 8007efa:	f1b8 0f06 	cmp.w	r8, #6
 8007efe:	d834      	bhi.n	8007f6a <print_alarme+0x16a>
 8007f00:	e8df f008 	tbb	[pc, r8]
 8007f04:	1b150f04 	.word	0x1b150f04
 8007f08:	2721      	.short	0x2721
 8007f0a:	2d          	.byte	0x2d
 8007f0b:	00          	.byte	0x00
    		lv_label_set_text(cod_falha, "Fail 01");
 8007f0c:	491f      	ldr	r1, [pc, #124]	; (8007f8c <print_alarme+0x18c>)
 8007f0e:	6828      	ldr	r0, [r5, #0]
 8007f10:	f010 fe7c 	bl	8018c0c <lv_label_set_text>
    		lv_label_set_text(desc_falha, "PLL NO LOCK");
 8007f14:	491e      	ldr	r1, [pc, #120]	; (8007f90 <print_alarme+0x190>)
    		lv_label_set_text(desc_falha, "No Antenna");
 8007f16:	6820      	ldr	r0, [r4, #0]
}
 8007f18:	b002      	add	sp, #8
 8007f1a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    		lv_label_set_text(desc_falha, "No Antenna");
 8007f1e:	f010 be75 	b.w	8018c0c <lv_label_set_text>
    		lv_label_set_text(cod_falha, "Fail 02");
 8007f22:	491c      	ldr	r1, [pc, #112]	; (8007f94 <print_alarme+0x194>)
 8007f24:	6828      	ldr	r0, [r5, #0]
 8007f26:	f010 fe71 	bl	8018c0c <lv_label_set_text>
    		lv_label_set_text(desc_falha, "Reflected High");
 8007f2a:	491b      	ldr	r1, [pc, #108]	; (8007f98 <print_alarme+0x198>)
 8007f2c:	e7f3      	b.n	8007f16 <print_alarme+0x116>
    		lv_label_set_text(cod_falha, "Fail 03");
 8007f2e:	491b      	ldr	r1, [pc, #108]	; (8007f9c <print_alarme+0x19c>)
 8007f30:	6828      	ldr	r0, [r5, #0]
 8007f32:	f010 fe6b 	bl	8018c0c <lv_label_set_text>
    		lv_label_set_text(desc_falha, "Foldback");
 8007f36:	491a      	ldr	r1, [pc, #104]	; (8007fa0 <print_alarme+0x1a0>)
 8007f38:	e7ed      	b.n	8007f16 <print_alarme+0x116>
    		lv_label_set_text(cod_falha, "Fail 04");
 8007f3a:	491a      	ldr	r1, [pc, #104]	; (8007fa4 <print_alarme+0x1a4>)
 8007f3c:	6828      	ldr	r0, [r5, #0]
 8007f3e:	f010 fe65 	bl	8018c0c <lv_label_set_text>
    		lv_label_set_text(desc_falha, "Foldback IPA");
 8007f42:	4919      	ldr	r1, [pc, #100]	; (8007fa8 <print_alarme+0x1a8>)
 8007f44:	e7e7      	b.n	8007f16 <print_alarme+0x116>
    		lv_label_set_text(cod_falha, "Fail 05");
 8007f46:	4919      	ldr	r1, [pc, #100]	; (8007fac <print_alarme+0x1ac>)
 8007f48:	6828      	ldr	r0, [r5, #0]
 8007f4a:	f010 fe5f 	bl	8018c0c <lv_label_set_text>
    		lv_label_set_text(desc_falha, "IPA High");
 8007f4e:	4918      	ldr	r1, [pc, #96]	; (8007fb0 <print_alarme+0x1b0>)
 8007f50:	e7e1      	b.n	8007f16 <print_alarme+0x116>
    		lv_label_set_text(cod_falha, "Fail 06");
 8007f52:	4918      	ldr	r1, [pc, #96]	; (8007fb4 <print_alarme+0x1b4>)
 8007f54:	6828      	ldr	r0, [r5, #0]
 8007f56:	f010 fe59 	bl	8018c0c <lv_label_set_text>
    		lv_label_set_text(desc_falha, "VIN Fail");
 8007f5a:	4917      	ldr	r1, [pc, #92]	; (8007fb8 <print_alarme+0x1b8>)
 8007f5c:	e7db      	b.n	8007f16 <print_alarme+0x116>
    		lv_label_set_text(cod_falha, "Fail 07");
 8007f5e:	4917      	ldr	r1, [pc, #92]	; (8007fbc <print_alarme+0x1bc>)
 8007f60:	6828      	ldr	r0, [r5, #0]
 8007f62:	f010 fe53 	bl	8018c0c <lv_label_set_text>
    		lv_label_set_text(desc_falha, "No Antenna");
 8007f66:	4916      	ldr	r1, [pc, #88]	; (8007fc0 <print_alarme+0x1c0>)
 8007f68:	e7d5      	b.n	8007f16 <print_alarme+0x116>
}
 8007f6a:	b002      	add	sp, #8
 8007f6c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007f70:	20004ed4 	.word	0x20004ed4
 8007f74:	2000c6a8 	.word	0x2000c6a8
 8007f78:	20004ec4 	.word	0x20004ec4
 8007f7c:	20000d18 	.word	0x20000d18
 8007f80:	0801d8c0 	.word	0x0801d8c0
 8007f84:	20004e70 	.word	0x20004e70
 8007f88:	20004ec8 	.word	0x20004ec8
 8007f8c:	0802c676 	.word	0x0802c676
 8007f90:	0802c67e 	.word	0x0802c67e
 8007f94:	0802c68a 	.word	0x0802c68a
 8007f98:	0802c692 	.word	0x0802c692
 8007f9c:	0802c6a1 	.word	0x0802c6a1
 8007fa0:	0802c6a9 	.word	0x0802c6a9
 8007fa4:	0802c6b2 	.word	0x0802c6b2
 8007fa8:	0802c6ba 	.word	0x0802c6ba
 8007fac:	0802c6c7 	.word	0x0802c6c7
 8007fb0:	0802c6cf 	.word	0x0802c6cf
 8007fb4:	0802c6d8 	.word	0x0802c6d8
 8007fb8:	0802c6e0 	.word	0x0802c6e0
 8007fbc:	0802c6e9 	.word	0x0802c6e9
 8007fc0:	0802c6f1 	.word	0x0802c6f1

08007fc4 <print_status>:
{
 8007fc4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	lv_style_copy(&style_txt, &lv_style_plain);
 8007fc6:	4c37      	ldr	r4, [pc, #220]	; (80080a4 <print_status+0xe0>)
 8007fc8:	4937      	ldr	r1, [pc, #220]	; (80080a8 <print_status+0xe4>)
{
 8007fca:	4605      	mov	r5, r0
	lv_style_copy(&style_txt, &lv_style_plain);
 8007fcc:	4620      	mov	r0, r4
 8007fce:	f008 fe4b 	bl	8010c68 <lv_style_copy>
	style_txt.text.font = &lv_font_eurostile_10;
 8007fd2:	4b36      	ldr	r3, [pc, #216]	; (80080ac <print_status+0xe8>)
 8007fd4:	6263      	str	r3, [r4, #36]	; 0x24
	style_txt.text.color = LV_COLOR_WHITE;
 8007fd6:	4b36      	ldr	r3, [pc, #216]	; (80080b0 <print_status+0xec>)
 8007fd8:	881b      	ldrh	r3, [r3, #0]
 8007fda:	8423      	strh	r3, [r4, #32]
	style_txt.body.main_color = LV_COLOR_BLUE;
 8007fdc:	78a3      	ldrb	r3, [r4, #2]
 8007fde:	f043 031f 	orr.w	r3, r3, #31
 8007fe2:	70a3      	strb	r3, [r4, #2]
 8007fe4:	8863      	ldrh	r3, [r4, #2]
 8007fe6:	f36f 134a 	bfc	r3, #5, #6
 8007fea:	8063      	strh	r3, [r4, #2]
 8007fec:	0a1b      	lsrs	r3, r3, #8
 8007fee:	f36f 03c7 	bfc	r3, #3, #5
 8007ff2:	70e3      	strb	r3, [r4, #3]
	style_txt.body.grad_color = LV_COLOR_BLUE;
 8007ff4:	7923      	ldrb	r3, [r4, #4]
 8007ff6:	f043 031f 	orr.w	r3, r3, #31
 8007ffa:	7123      	strb	r3, [r4, #4]
 8007ffc:	88a3      	ldrh	r3, [r4, #4]
 8007ffe:	f36f 134a 	bfc	r3, #5, #6
 8008002:	80a3      	strh	r3, [r4, #4]
 8008004:	0a1b      	lsrs	r3, r3, #8
 8008006:	f36f 03c7 	bfc	r3, #3, #5
 800800a:	7163      	strb	r3, [r4, #5]
	cont = lv_cont_create(Tela_Principal, NULL);
 800800c:	4b29      	ldr	r3, [pc, #164]	; (80080b4 <print_status+0xf0>)
	style_txt.text.letter_space = 1;
 800800e:	2701      	movs	r7, #1
	cont = lv_cont_create(Tela_Principal, NULL);
 8008010:	6818      	ldr	r0, [r3, #0]
	style_txt.text.letter_space = 1;
 8008012:	8527      	strh	r7, [r4, #40]	; 0x28
	cont = lv_cont_create(Tela_Principal, NULL);
 8008014:	2100      	movs	r1, #0
	style_txt.text.line_space = 1;
 8008016:	8567      	strh	r7, [r4, #42]	; 0x2a
	cont = lv_cont_create(Tela_Principal, NULL);
 8008018:	f00e fd78 	bl	8016b0c <lv_cont_create>
	lv_obj_set_style(cont, &style_txt);
 800801c:	4621      	mov	r1, r4
	cont = lv_cont_create(Tela_Principal, NULL);
 800801e:	4606      	mov	r6, r0
	lv_obj_set_style(cont, &style_txt);
 8008020:	f008 f958 	bl	80102d4 <lv_obj_set_style>
	lv_obj_set_size(cont, 30, 12);
 8008024:	220c      	movs	r2, #12
 8008026:	211e      	movs	r1, #30
 8008028:	4630      	mov	r0, r6
 800802a:	f008 f851 	bl	80100d0 <lv_obj_set_size>
	lv_obj_align(cont, NULL, LV_ALIGN_IN_TOP_LEFT, 127, 45);
 800802e:	232d      	movs	r3, #45	; 0x2d
 8008030:	9300      	str	r3, [sp, #0]
 8008032:	463a      	mov	r2, r7
 8008034:	237f      	movs	r3, #127	; 0x7f
 8008036:	2100      	movs	r1, #0
 8008038:	4630      	mov	r0, r6
 800803a:	f007 fca9 	bl	800f990 <lv_obj_align>
	lv_cont_set_layout(cont, LV_LAYOUT_COL_M);
 800803e:	2103      	movs	r1, #3
 8008040:	4630      	mov	r0, r6
 8008042:	f00e fdc5 	bl	8016bd0 <lv_cont_set_layout>
	label = lv_label_create(cont, NULL);
 8008046:	2100      	movs	r1, #0
 8008048:	4630      	mov	r0, r6
 800804a:	f010 fe89 	bl	8018d60 <lv_label_create>
	if(!falha) {
 800804e:	b92d      	cbnz	r5, 800805c <print_status+0x98>
		lv_label_set_text(label, "OK");
 8008050:	4919      	ldr	r1, [pc, #100]	; (80080b8 <print_status+0xf4>)
}
 8008052:	b003      	add	sp, #12
 8008054:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
		lv_label_set_text(label, "OK");
 8008058:	f010 bdd8 	b.w	8018c0c <lv_label_set_text>
		style_txt.body.main_color = LV_COLOR_RED;
 800805c:	78a3      	ldrb	r3, [r4, #2]
		lv_label_set_text(label, "FAIL");
 800805e:	4917      	ldr	r1, [pc, #92]	; (80080bc <print_status+0xf8>)
		style_txt.body.main_color = LV_COLOR_RED;
 8008060:	f36f 0304 	bfc	r3, #0, #5
 8008064:	70a3      	strb	r3, [r4, #2]
 8008066:	8863      	ldrh	r3, [r4, #2]
 8008068:	f36f 134a 	bfc	r3, #5, #6
 800806c:	8063      	strh	r3, [r4, #2]
 800806e:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8008072:	f043 03f8 	orr.w	r3, r3, #248	; 0xf8
 8008076:	70e3      	strb	r3, [r4, #3]
		style_txt.body.grad_color = LV_COLOR_RED;
 8008078:	7923      	ldrb	r3, [r4, #4]
 800807a:	f36f 0304 	bfc	r3, #0, #5
 800807e:	7123      	strb	r3, [r4, #4]
 8008080:	88a3      	ldrh	r3, [r4, #4]
 8008082:	f36f 134a 	bfc	r3, #5, #6
 8008086:	80a3      	strh	r3, [r4, #4]
 8008088:	f3c3 2307 	ubfx	r3, r3, #8, #8
 800808c:	f043 03f8 	orr.w	r3, r3, #248	; 0xf8
 8008090:	7163      	strb	r3, [r4, #5]
		lv_label_set_text(label, "FAIL");
 8008092:	f010 fdbb 	bl	8018c0c <lv_label_set_text>
		print_alarme(falha);
 8008096:	4628      	mov	r0, r5
}
 8008098:	b003      	add	sp, #12
 800809a:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
		print_alarme(falha);
 800809e:	f7ff beaf 	b.w	8007e00 <print_alarme>
 80080a2:	bf00      	nop
 80080a4:	200050b4 	.word	0x200050b4
 80080a8:	2000c6a8 	.word	0x2000c6a8
 80080ac:	200006f8 	.word	0x200006f8
 80080b0:	0801d8c0 	.word	0x0801d8c0
 80080b4:	20004e70 	.word	0x20004e70
 80080b8:	0802c725 	.word	0x0802c725
 80080bc:	0802c728 	.word	0x0802c728

080080c0 <create_vumeter>:
{
 80080c0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	lv_style_copy(&style_indic_off, &lv_style_pretty);
 80080c2:	4e70      	ldr	r6, [pc, #448]	; (8008284 <create_vumeter+0x1c4>)
 80080c4:	4970      	ldr	r1, [pc, #448]	; (8008288 <create_vumeter+0x1c8>)
	lv_style_copy(&style_indic_vd, &lv_style_pretty);
 80080c6:	4d71      	ldr	r5, [pc, #452]	; (800828c <create_vumeter+0x1cc>)
		bar[x] = lv_bar_create(Tela_Principal, NULL);
 80080c8:	4f71      	ldr	r7, [pc, #452]	; (8008290 <create_vumeter+0x1d0>)
	lv_style_copy(&style_indic_off, &lv_style_pretty);
 80080ca:	4630      	mov	r0, r6
 80080cc:	f008 fdcc 	bl	8010c68 <lv_style_copy>
	style_indic_off.body.grad_color = LV_COLOR_MAKE(105, 105, 105);
 80080d0:	4b70      	ldr	r3, [pc, #448]	; (8008294 <create_vumeter+0x1d4>)
	lv_style_copy(&style_indic_vd, &lv_style_pretty);
 80080d2:	496d      	ldr	r1, [pc, #436]	; (8008288 <create_vumeter+0x1c8>)
	style_indic_off.body.grad_color = LV_COLOR_MAKE(105, 105, 105);
 80080d4:	885b      	ldrh	r3, [r3, #2]
 80080d6:	80b3      	strh	r3, [r6, #4]
	style_indic_off.body.radius = 0;
 80080d8:	2400      	movs	r4, #0
	lv_style_copy(&style_indic_vd, &lv_style_pretty);
 80080da:	4628      	mov	r0, r5
	style_indic_off.body.main_color = LV_COLOR_MAKE(105, 105, 105);
 80080dc:	8073      	strh	r3, [r6, #2]
	style_indic_off.body.border.color = LV_COLOR_MAKE(105, 105, 105);
 80080de:	8173      	strh	r3, [r6, #10]
	style_indic_off.body.radius = 0;
 80080e0:	80f4      	strh	r4, [r6, #6]
	lv_style_copy(&style_indic_vd, &lv_style_pretty);
 80080e2:	f008 fdc1 	bl	8010c68 <lv_style_copy>
	style_indic_vd.body.grad_color = LV_COLOR_LIME;
 80080e6:	792b      	ldrb	r3, [r5, #4]
	style_indic_vd.body.radius = 0;
 80080e8:	80ec      	strh	r4, [r5, #6]
	style_indic_vd.body.grad_color = LV_COLOR_LIME;
 80080ea:	f364 0304 	bfi	r3, r4, #0, #5
 80080ee:	712b      	strb	r3, [r5, #4]
 80080f0:	88ab      	ldrh	r3, [r5, #4]
	lv_style_copy(&style_indic_cy, &lv_style_pretty);
 80080f2:	4965      	ldr	r1, [pc, #404]	; (8008288 <create_vumeter+0x1c8>)
	style_indic_vd.body.grad_color = LV_COLOR_LIME;
 80080f4:	f443 63fc 	orr.w	r3, r3, #2016	; 0x7e0
 80080f8:	80ab      	strh	r3, [r5, #4]
 80080fa:	0a1b      	lsrs	r3, r3, #8
 80080fc:	f364 03c7 	bfi	r3, r4, #3, #5
 8008100:	716b      	strb	r3, [r5, #5]
	style_indic_vd.body.main_color = LV_COLOR_LIME;
 8008102:	78ab      	ldrb	r3, [r5, #2]
 8008104:	f364 0304 	bfi	r3, r4, #0, #5
 8008108:	70ab      	strb	r3, [r5, #2]
 800810a:	886b      	ldrh	r3, [r5, #2]
 800810c:	f443 63fc 	orr.w	r3, r3, #2016	; 0x7e0
 8008110:	806b      	strh	r3, [r5, #2]
 8008112:	0a1b      	lsrs	r3, r3, #8
 8008114:	f364 03c7 	bfi	r3, r4, #3, #5
 8008118:	70eb      	strb	r3, [r5, #3]
	style_indic_vd.body.border.color = LV_COLOR_LIME;
 800811a:	7aab      	ldrb	r3, [r5, #10]
 800811c:	f364 0304 	bfi	r3, r4, #0, #5
 8008120:	72ab      	strb	r3, [r5, #10]
 8008122:	896b      	ldrh	r3, [r5, #10]
 8008124:	f443 63fc 	orr.w	r3, r3, #2016	; 0x7e0
 8008128:	816b      	strh	r3, [r5, #10]
 800812a:	0a1b      	lsrs	r3, r3, #8
 800812c:	f364 03c7 	bfi	r3, r4, #3, #5
 8008130:	72eb      	strb	r3, [r5, #11]
	lv_style_copy(&style_indic_cy, &lv_style_pretty);
 8008132:	4d59      	ldr	r5, [pc, #356]	; (8008298 <create_vumeter+0x1d8>)
 8008134:	4628      	mov	r0, r5
 8008136:	f008 fd97 	bl	8010c68 <lv_style_copy>
	style_indic_cy.body.grad_color = LV_COLOR_CYAN;
 800813a:	792b      	ldrb	r3, [r5, #4]
	style_indic_cy.body.radius = 0;
 800813c:	80ec      	strh	r4, [r5, #6]
	style_indic_cy.body.grad_color = LV_COLOR_CYAN;
 800813e:	f043 031f 	orr.w	r3, r3, #31
 8008142:	712b      	strb	r3, [r5, #4]
 8008144:	88ab      	ldrh	r3, [r5, #4]
	lv_style_copy(&style_indic_am, &lv_style_pretty);
 8008146:	4950      	ldr	r1, [pc, #320]	; (8008288 <create_vumeter+0x1c8>)
	style_indic_cy.body.grad_color = LV_COLOR_CYAN;
 8008148:	f443 63fc 	orr.w	r3, r3, #2016	; 0x7e0
 800814c:	80ab      	strh	r3, [r5, #4]
 800814e:	0a1b      	lsrs	r3, r3, #8
 8008150:	f364 03c7 	bfi	r3, r4, #3, #5
 8008154:	716b      	strb	r3, [r5, #5]
	style_indic_cy.body.main_color = LV_COLOR_CYAN;
 8008156:	78ab      	ldrb	r3, [r5, #2]
 8008158:	f043 031f 	orr.w	r3, r3, #31
 800815c:	70ab      	strb	r3, [r5, #2]
 800815e:	886b      	ldrh	r3, [r5, #2]
 8008160:	f443 63fc 	orr.w	r3, r3, #2016	; 0x7e0
 8008164:	806b      	strh	r3, [r5, #2]
 8008166:	0a1b      	lsrs	r3, r3, #8
 8008168:	f364 03c7 	bfi	r3, r4, #3, #5
 800816c:	70eb      	strb	r3, [r5, #3]
	style_indic_cy.body.border.color = LV_COLOR_CYAN;
 800816e:	7aab      	ldrb	r3, [r5, #10]
 8008170:	f043 031f 	orr.w	r3, r3, #31
 8008174:	72ab      	strb	r3, [r5, #10]
 8008176:	896b      	ldrh	r3, [r5, #10]
 8008178:	f443 63fc 	orr.w	r3, r3, #2016	; 0x7e0
 800817c:	816b      	strh	r3, [r5, #10]
 800817e:	0a1b      	lsrs	r3, r3, #8
 8008180:	f364 03c7 	bfi	r3, r4, #3, #5
 8008184:	72eb      	strb	r3, [r5, #11]
	lv_style_copy(&style_indic_am, &lv_style_pretty);
 8008186:	4d45      	ldr	r5, [pc, #276]	; (800829c <create_vumeter+0x1dc>)
 8008188:	4628      	mov	r0, r5
 800818a:	f008 fd6d 	bl	8010c68 <lv_style_copy>
	style_indic_am.body.grad_color = LV_COLOR_YELLOW;
 800818e:	792b      	ldrb	r3, [r5, #4]
	style_indic_am.body.radius = 0;
 8008190:	80ec      	strh	r4, [r5, #6]
	style_indic_am.body.grad_color = LV_COLOR_YELLOW;
 8008192:	f364 0304 	bfi	r3, r4, #0, #5
 8008196:	712b      	strb	r3, [r5, #4]
 8008198:	88ab      	ldrh	r3, [r5, #4]
	lv_style_copy(&style_indic_vm, &lv_style_pretty);
 800819a:	493b      	ldr	r1, [pc, #236]	; (8008288 <create_vumeter+0x1c8>)
	style_indic_am.body.grad_color = LV_COLOR_YELLOW;
 800819c:	f443 63fc 	orr.w	r3, r3, #2016	; 0x7e0
 80081a0:	80ab      	strh	r3, [r5, #4]
 80081a2:	0a1b      	lsrs	r3, r3, #8
 80081a4:	f043 03f8 	orr.w	r3, r3, #248	; 0xf8
 80081a8:	716b      	strb	r3, [r5, #5]
	style_indic_am.body.main_color = LV_COLOR_YELLOW;
 80081aa:	78ab      	ldrb	r3, [r5, #2]
 80081ac:	f364 0304 	bfi	r3, r4, #0, #5
 80081b0:	70ab      	strb	r3, [r5, #2]
 80081b2:	886b      	ldrh	r3, [r5, #2]
 80081b4:	f443 63fc 	orr.w	r3, r3, #2016	; 0x7e0
 80081b8:	806b      	strh	r3, [r5, #2]
 80081ba:	0a1b      	lsrs	r3, r3, #8
 80081bc:	f043 03f8 	orr.w	r3, r3, #248	; 0xf8
 80081c0:	70eb      	strb	r3, [r5, #3]
	style_indic_am.body.border.color = LV_COLOR_YELLOW;
 80081c2:	7aab      	ldrb	r3, [r5, #10]
 80081c4:	f364 0304 	bfi	r3, r4, #0, #5
 80081c8:	72ab      	strb	r3, [r5, #10]
 80081ca:	896b      	ldrh	r3, [r5, #10]
 80081cc:	f443 63fc 	orr.w	r3, r3, #2016	; 0x7e0
 80081d0:	816b      	strh	r3, [r5, #10]
 80081d2:	0a1b      	lsrs	r3, r3, #8
 80081d4:	f043 03f8 	orr.w	r3, r3, #248	; 0xf8
 80081d8:	72eb      	strb	r3, [r5, #11]
	lv_style_copy(&style_indic_vm, &lv_style_pretty);
 80081da:	4d31      	ldr	r5, [pc, #196]	; (80082a0 <create_vumeter+0x1e0>)
 80081dc:	4628      	mov	r0, r5
 80081de:	f008 fd43 	bl	8010c68 <lv_style_copy>
	style_indic_vm.body.grad_color = LV_COLOR_RED;
 80081e2:	792b      	ldrb	r3, [r5, #4]
	style_indic_vm.body.radius = 0;
 80081e4:	80ec      	strh	r4, [r5, #6]
	style_indic_vm.body.grad_color = LV_COLOR_RED;
 80081e6:	f364 0304 	bfi	r3, r4, #0, #5
 80081ea:	712b      	strb	r3, [r5, #4]
 80081ec:	88ab      	ldrh	r3, [r5, #4]
 80081ee:	f364 134a 	bfi	r3, r4, #5, #6
 80081f2:	80ab      	strh	r3, [r5, #4]
 80081f4:	f3c3 2307 	ubfx	r3, r3, #8, #8
 80081f8:	f043 03f8 	orr.w	r3, r3, #248	; 0xf8
 80081fc:	716b      	strb	r3, [r5, #5]
	style_indic_vm.body.main_color = LV_COLOR_RED;
 80081fe:	78ab      	ldrb	r3, [r5, #2]
 8008200:	f364 0304 	bfi	r3, r4, #0, #5
 8008204:	70ab      	strb	r3, [r5, #2]
 8008206:	886b      	ldrh	r3, [r5, #2]
 8008208:	f364 134a 	bfi	r3, r4, #5, #6
 800820c:	806b      	strh	r3, [r5, #2]
 800820e:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8008212:	f043 03f8 	orr.w	r3, r3, #248	; 0xf8
 8008216:	70eb      	strb	r3, [r5, #3]
	style_indic_vm.body.border.color = LV_COLOR_RED;
 8008218:	7aab      	ldrb	r3, [r5, #10]
 800821a:	f364 0304 	bfi	r3, r4, #0, #5
 800821e:	72ab      	strb	r3, [r5, #10]
 8008220:	896b      	ldrh	r3, [r5, #10]
 8008222:	f364 134a 	bfi	r3, r4, #5, #6
 8008226:	816b      	strh	r3, [r5, #10]
 8008228:	f3c3 2307 	ubfx	r3, r3, #8, #8
 800822c:	f043 03f8 	orr.w	r3, r3, #248	; 0xf8
 8008230:	72eb      	strb	r3, [r5, #11]
 8008232:	4d1c      	ldr	r5, [pc, #112]	; (80082a4 <create_vumeter+0x1e4>)
		bar[x] = lv_bar_create(Tela_Principal, NULL);
 8008234:	6838      	ldr	r0, [r7, #0]
 8008236:	2100      	movs	r1, #0
 8008238:	f00d ff80 	bl	801613c <lv_bar_create>
		lv_obj_set_size(bar[x], 3, 12);
 800823c:	220c      	movs	r2, #12
		bar[x] = lv_bar_create(Tela_Principal, NULL);
 800823e:	6068      	str	r0, [r5, #4]
		lv_obj_set_size(bar[x], 3, 12);
 8008240:	2103      	movs	r1, #3
 8008242:	f007 ff45 	bl	80100d0 <lv_obj_set_size>
		lv_bar_set_style(bar[x], LV_BAR_STYLE_BG, &style_indic_off);
 8008246:	6868      	ldr	r0, [r5, #4]
 8008248:	4632      	mov	r2, r6
 800824a:	2100      	movs	r1, #0
 800824c:	f00d ff60 	bl	8016110 <lv_bar_set_style>
		lv_bar_set_style(bar[x], LV_BAR_STYLE_INDIC, &style_indic_off);
 8008250:	6868      	ldr	r0, [r5, #4]
 8008252:	4632      	mov	r2, r6
 8008254:	2101      	movs	r1, #1
 8008256:	f00d ff5b 	bl	8016110 <lv_bar_set_style>
		lv_obj_align(bar[x], NULL, LV_ALIGN_IN_TOP_LEFT, vumeter_pos_x[x], 43);
 800825a:	222b      	movs	r2, #43	; 0x2b
 800825c:	4b12      	ldr	r3, [pc, #72]	; (80082a8 <create_vumeter+0x1e8>)
 800825e:	9200      	str	r2, [sp, #0]
 8008260:	f933 3024 	ldrsh.w	r3, [r3, r4, lsl #2]
 8008264:	6868      	ldr	r0, [r5, #4]
 8008266:	2201      	movs	r2, #1
 8008268:	2100      	movs	r1, #0
 800826a:	f007 fb91 	bl	800f990 <lv_obj_align>
 800826e:	3401      	adds	r4, #1
		lv_bar_set_value(bar[x], 100, 0);
 8008270:	2200      	movs	r2, #0
 8008272:	2164      	movs	r1, #100	; 0x64
 8008274:	f855 0f04 	ldr.w	r0, [r5, #4]!
 8008278:	f00d feee 	bl	8016058 <lv_bar_set_value>
	for(uint8_t x = 0; x < 20; x++) {
 800827c:	2c14      	cmp	r4, #20
 800827e:	d1d9      	bne.n	8008234 <create_vumeter+0x174>
}
 8008280:	b003      	add	sp, #12
 8008282:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008284:	20004f88 	.word	0x20004f88
 8008288:	2000c5b8 	.word	0x2000c5b8
 800828c:	20004fc4 	.word	0x20004fc4
 8008290:	20004e70 	.word	0x20004e70
 8008294:	0801d8c0 	.word	0x0801d8c0
 8008298:	20004f4c 	.word	0x20004f4c
 800829c:	20004f10 	.word	0x20004f10
 80082a0:	20005000 	.word	0x20005000
 80082a4:	20004e70 	.word	0x20004e70
 80082a8:	0802c758 	.word	0x0802c758

080082ac <main_screen>:
	Tela_Principal = lv_obj_create(NULL, NULL);
 80082ac:	2100      	movs	r1, #0
{
 80082ae:	b538      	push	{r3, r4, r5, lr}
	Tela_Principal = lv_obj_create(NULL, NULL);
 80082b0:	4608      	mov	r0, r1
 80082b2:	f007 fd8f 	bl	800fdd4 <lv_obj_create>
 80082b6:	4d21      	ldr	r5, [pc, #132]	; (800833c <main_screen+0x90>)
	img_fundo = lv_img_create(Tela_Principal, NULL);
 80082b8:	4c21      	ldr	r4, [pc, #132]	; (8008340 <main_screen+0x94>)
	Tela_Principal = lv_obj_create(NULL, NULL);
 80082ba:	6028      	str	r0, [r5, #0]
	img_fundo = lv_img_create(Tela_Principal, NULL);
 80082bc:	2100      	movs	r1, #0
 80082be:	f00f fe81 	bl	8017fc4 <lv_img_create>
    lv_img_set_src(img_fundo, &tela_0);
 80082c2:	4920      	ldr	r1, [pc, #128]	; (8008344 <main_screen+0x98>)
	img_fundo = lv_img_create(Tela_Principal, NULL);
 80082c4:	6020      	str	r0, [r4, #0]
    lv_img_set_src(img_fundo, &tela_0);
 80082c6:	f00f fded 	bl	8017ea4 <lv_img_set_src>
	lv_obj_set_protect(img_fundo, LV_PROTECT_POS);
 80082ca:	2104      	movs	r1, #4
 80082cc:	6820      	ldr	r0, [r4, #0]
 80082ce:	f007 f9b3 	bl	800f638 <lv_obj_set_protect>
	lv_obj_set_event_cb(img_fundo, main_screen_event);
 80082d2:	491d      	ldr	r1, [pc, #116]	; (8008348 <main_screen+0x9c>)
 80082d4:	6820      	ldr	r0, [r4, #0]
 80082d6:	f007 f9bc 	bl	800f652 <lv_obj_set_event_cb>
	lv_obj_set_click(img_fundo, 1);
 80082da:	2101      	movs	r1, #1
 80082dc:	6820      	ldr	r0, [r4, #0]
 80082de:	f007 f98f 	bl	800f600 <lv_obj_set_click>
	print_frequencia(frequencia);
 80082e2:	4b1a      	ldr	r3, [pc, #104]	; (800834c <main_screen+0xa0>)
 80082e4:	6818      	ldr	r0, [r3, #0]
 80082e6:	f7ff fb3d 	bl	8007964 <print_frequencia>
	print_audio(Cfg_Stereo, Cfg_Audio);
 80082ea:	4b19      	ldr	r3, [pc, #100]	; (8008350 <main_screen+0xa4>)
 80082ec:	7819      	ldrb	r1, [r3, #0]
 80082ee:	4b19      	ldr	r3, [pc, #100]	; (8008354 <main_screen+0xa8>)
 80082f0:	7818      	ldrb	r0, [r3, #0]
 80082f2:	f7ff fca3 	bl	8007c3c <print_audio>
	print_temperatura(temperatura);
 80082f6:	4b18      	ldr	r3, [pc, #96]	; (8008358 <main_screen+0xac>)
 80082f8:	ed93 0a00 	vldr	s0, [r3]
 80082fc:	f7ff fd30 	bl	8007d60 <print_temperatura>
	print_status(falha);
 8008300:	4b16      	ldr	r3, [pc, #88]	; (800835c <main_screen+0xb0>)
 8008302:	6818      	ldr	r0, [r3, #0]
 8008304:	f7ff fe5e 	bl	8007fc4 <print_status>
	print_pot(forward, reflected);
 8008308:	4b15      	ldr	r3, [pc, #84]	; (8008360 <main_screen+0xb4>)
 800830a:	edd3 0a00 	vldr	s1, [r3]
 800830e:	4b15      	ldr	r3, [pc, #84]	; (8008364 <main_screen+0xb8>)
 8008310:	ed93 0a00 	vldr	s0, [r3]
 8008314:	f7ff fb84 	bl	8007a20 <print_pot>
	create_vumeter();
 8008318:	f7ff fed2 	bl	80080c0 <create_vumeter>
    return lv_disp_get_layer_sys(lv_disp_get_default());
}

static inline void lv_scr_load(lv_obj_t * scr)
{
    lv_disp_load_scr(scr);
 800831c:	6828      	ldr	r0, [r5, #0]
 800831e:	f006 ff45 	bl	800f1ac <lv_disp_load_scr>
	Task_Principal = lv_task_create(update_main_screen, 500, LV_TASK_PRIO_MID, NULL);
 8008322:	2300      	movs	r3, #0
 8008324:	2203      	movs	r2, #3
 8008326:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 800832a:	480f      	ldr	r0, [pc, #60]	; (8008368 <main_screen+0xbc>)
 800832c:	f00d fbf0 	bl	8015b10 <lv_task_create>
 8008330:	4b0e      	ldr	r3, [pc, #56]	; (800836c <main_screen+0xc0>)
 8008332:	6018      	str	r0, [r3, #0]
	TelaAtiva = TelaPrincipal;
 8008334:	4b0e      	ldr	r3, [pc, #56]	; (8008370 <main_screen+0xc4>)
 8008336:	2200      	movs	r2, #0
 8008338:	601a      	str	r2, [r3, #0]
 800833a:	bd38      	pop	{r3, r4, r5, pc}
 800833c:	20004e70 	.word	0x20004e70
 8008340:	20004ecc 	.word	0x20004ecc
 8008344:	20001be0 	.word	0x20001be0
 8008348:	0800793d 	.word	0x0800793d
 800834c:	20000010 	.word	0x20000010
 8008350:	2000343a 	.word	0x2000343a
 8008354:	20000000 	.word	0x20000000
 8008358:	20000020 	.word	0x20000020
 800835c:	20004e2c 	.word	0x20004e2c
 8008360:	20004e3c 	.word	0x20004e3c
 8008364:	20004e30 	.word	0x20004e30
 8008368:	080083c9 	.word	0x080083c9
 800836c:	20004e6c 	.word	0x20004e6c
 8008370:	20003444 	.word	0x20003444

08008374 <ButtonEventTelaPrincipal>:
	if(event == 0x10) {
 8008374:	2810      	cmp	r0, #16
 8008376:	d107      	bne.n	8008388 <ButtonEventTelaPrincipal+0x14>
		if(tipo == 0x01) {	// Single Click
 8008378:	2901      	cmp	r1, #1
 800837a:	d105      	bne.n	8008388 <ButtonEventTelaPrincipal+0x14>
			lv_event_send(img_fundo, LV_EVENT_APPLY, NULL);
 800837c:	4b03      	ldr	r3, [pc, #12]	; (800838c <ButtonEventTelaPrincipal+0x18>)
 800837e:	2200      	movs	r2, #0
 8008380:	2111      	movs	r1, #17
 8008382:	6818      	ldr	r0, [r3, #0]
 8008384:	f007 b9ac 	b.w	800f6e0 <lv_event_send>
 8008388:	4770      	bx	lr
 800838a:	bf00      	nop
 800838c:	20004ecc 	.word	0x20004ecc

08008390 <bargraph_off>:

void bargraph_off(uint8_t value)
{
 8008390:	b570      	push	{r4, r5, r6, lr}
 8008392:	4c0b      	ldr	r4, [pc, #44]	; (80083c0 <bargraph_off+0x30>)
	for(uint8_t x = value; x < 20; x++) {
		lv_bar_set_style(bar[x], LV_BAR_STYLE_BG, &style_indic_off);
 8008394:	4e0b      	ldr	r6, [pc, #44]	; (80083c4 <bargraph_off+0x34>)
 8008396:	eb04 0480 	add.w	r4, r4, r0, lsl #2
{
 800839a:	4605      	mov	r5, r0
 800839c:	3c04      	subs	r4, #4
	for(uint8_t x = value; x < 20; x++) {
 800839e:	2d13      	cmp	r5, #19
 80083a0:	d900      	bls.n	80083a4 <bargraph_off+0x14>
		lv_bar_set_style(bar[x], LV_BAR_STYLE_INDIC, &style_indic_off);
	}
}
 80083a2:	bd70      	pop	{r4, r5, r6, pc}
		lv_bar_set_style(bar[x], LV_BAR_STYLE_BG, &style_indic_off);
 80083a4:	4632      	mov	r2, r6
 80083a6:	2100      	movs	r1, #0
 80083a8:	6860      	ldr	r0, [r4, #4]
 80083aa:	f00d feb1 	bl	8016110 <lv_bar_set_style>
	for(uint8_t x = value; x < 20; x++) {
 80083ae:	3501      	adds	r5, #1
		lv_bar_set_style(bar[x], LV_BAR_STYLE_INDIC, &style_indic_off);
 80083b0:	4632      	mov	r2, r6
 80083b2:	2101      	movs	r1, #1
 80083b4:	f854 0f04 	ldr.w	r0, [r4, #4]!
 80083b8:	f00d feaa 	bl	8016110 <lv_bar_set_style>
	for(uint8_t x = value; x < 20; x++) {
 80083bc:	b2ed      	uxtb	r5, r5
 80083be:	e7ee      	b.n	800839e <bargraph_off+0xe>
 80083c0:	20004e74 	.word	0x20004e74
 80083c4:	20004f88 	.word	0x20004f88

080083c8 <update_main_screen>:
			break;
	}
}

static void update_main_screen(lv_task_t * param)
{
 80083c8:	b538      	push	{r3, r4, r5, lr}
	if(!falha) {
 80083ca:	4c88      	ldr	r4, [pc, #544]	; (80085ec <update_main_screen+0x224>)
 80083cc:	6822      	ldr	r2, [r4, #0]
 80083ce:	bb3a      	cbnz	r2, 8008420 <update_main_screen+0x58>
		// Potencia Direta
		lv_label_set_text(txt_fwd, "FWD:");
 80083d0:	4b87      	ldr	r3, [pc, #540]	; (80085f0 <update_main_screen+0x228>)
 80083d2:	4988      	ldr	r1, [pc, #544]	; (80085f4 <update_main_screen+0x22c>)
 80083d4:	6818      	ldr	r0, [r3, #0]
 80083d6:	f010 fc19 	bl	8018c0c <lv_label_set_text>
		sprintf(buffer, "%0.1fW", forward);
 80083da:	4b87      	ldr	r3, [pc, #540]	; (80085f8 <update_main_screen+0x230>)
 80083dc:	6818      	ldr	r0, [r3, #0]
 80083de:	f7f8 f8b3 	bl	8000548 <__aeabi_f2d>
 80083e2:	4602      	mov	r2, r0
 80083e4:	460b      	mov	r3, r1
 80083e6:	4885      	ldr	r0, [pc, #532]	; (80085fc <update_main_screen+0x234>)
 80083e8:	4985      	ldr	r1, [pc, #532]	; (8008600 <update_main_screen+0x238>)
 80083ea:	f012 fd15 	bl	801ae18 <sprintf>
		lv_label_set_text(txt_pot, buffer);
 80083ee:	4b85      	ldr	r3, [pc, #532]	; (8008604 <update_main_screen+0x23c>)
 80083f0:	4982      	ldr	r1, [pc, #520]	; (80085fc <update_main_screen+0x234>)
 80083f2:	6818      	ldr	r0, [r3, #0]
 80083f4:	f010 fc0a 	bl	8018c0c <lv_label_set_text>
		// Refletida
		lv_label_set_text(txt_ref, "REF:");
 80083f8:	4b83      	ldr	r3, [pc, #524]	; (8008608 <update_main_screen+0x240>)
 80083fa:	4984      	ldr	r1, [pc, #528]	; (800860c <update_main_screen+0x244>)
 80083fc:	6818      	ldr	r0, [r3, #0]
 80083fe:	f010 fc05 	bl	8018c0c <lv_label_set_text>
		sprintf(buffer, "%0.1fW", reflected);
 8008402:	4b83      	ldr	r3, [pc, #524]	; (8008610 <update_main_screen+0x248>)
 8008404:	6818      	ldr	r0, [r3, #0]
 8008406:	f7f8 f89f 	bl	8000548 <__aeabi_f2d>
 800840a:	460b      	mov	r3, r1
 800840c:	4602      	mov	r2, r0
 800840e:	497c      	ldr	r1, [pc, #496]	; (8008600 <update_main_screen+0x238>)
 8008410:	487a      	ldr	r0, [pc, #488]	; (80085fc <update_main_screen+0x234>)
 8008412:	f012 fd01 	bl	801ae18 <sprintf>
		lv_label_set_text(txt_swr, buffer);
 8008416:	4b7f      	ldr	r3, [pc, #508]	; (8008614 <update_main_screen+0x24c>)
 8008418:	4978      	ldr	r1, [pc, #480]	; (80085fc <update_main_screen+0x234>)
 800841a:	6818      	ldr	r0, [r3, #0]
 800841c:	f010 fbf6 	bl	8018c0c <lv_label_set_text>
	}
	// Temperatura
	sprintf(buffer, "TP:%0.1f°", temperatura);
 8008420:	4b7d      	ldr	r3, [pc, #500]	; (8008618 <update_main_screen+0x250>)
 8008422:	6818      	ldr	r0, [r3, #0]
 8008424:	f7f8 f890 	bl	8000548 <__aeabi_f2d>
 8008428:	460b      	mov	r3, r1
 800842a:	4602      	mov	r2, r0
 800842c:	497b      	ldr	r1, [pc, #492]	; (800861c <update_main_screen+0x254>)
 800842e:	4873      	ldr	r0, [pc, #460]	; (80085fc <update_main_screen+0x234>)
 8008430:	f012 fcf2 	bl	801ae18 <sprintf>
//	lv_label_set_text(txt_temp, buffer);

	// Status
    switch(falha) {
 8008434:	6823      	ldr	r3, [r4, #0]
 8008436:	3b01      	subs	r3, #1
 8008438:	2b06      	cmp	r3, #6
 800843a:	d80f      	bhi.n	800845c <update_main_screen+0x94>
 800843c:	e8df f003 	tbb	[pc, r3]
 8008440:	37302904 	.word	0x37302904
 8008444:	453e      	.short	0x453e
 8008446:	4c          	.byte	0x4c
 8008447:	00          	.byte	0x00
    	case FAIL_PLLLOCK:
    		lv_label_set_text(cod_falha, "Fail 01");
 8008448:	4b75      	ldr	r3, [pc, #468]	; (8008620 <update_main_screen+0x258>)
 800844a:	4976      	ldr	r1, [pc, #472]	; (8008624 <update_main_screen+0x25c>)
 800844c:	6818      	ldr	r0, [r3, #0]
 800844e:	f010 fbdd 	bl	8018c0c <lv_label_set_text>
    		lv_label_set_text(desc_falha, "PLL NO LOCK");
 8008452:	4975      	ldr	r1, [pc, #468]	; (8008628 <update_main_screen+0x260>)
    		lv_label_set_text(cod_falha, "Fail 06");
    		lv_label_set_text(desc_falha, "VIN Fail");
    		break;
    	case FAIL_SWR:
    		lv_label_set_text(cod_falha, "Fail 07");
    		lv_label_set_text(desc_falha, "No Antenna");
 8008454:	4b75      	ldr	r3, [pc, #468]	; (800862c <update_main_screen+0x264>)
 8008456:	6818      	ldr	r0, [r3, #0]
 8008458:	f010 fbd8 	bl	8018c0c <lv_label_set_text>
    		break;
    }
	// Vu-Meter MPX
    update_vumeter_mpx(mpx);
 800845c:	4d74      	ldr	r5, [pc, #464]	; (8008630 <update_main_screen+0x268>)
	switch(value) {
 800845e:	682b      	ldr	r3, [r5, #0]
 8008460:	2b14      	cmp	r3, #20
 8008462:	d843      	bhi.n	80084ec <update_main_screen+0x124>
 8008464:	e8df f013 	tbh	[pc, r3, lsl #1]
 8008468:	0051003f 	.word	0x0051003f
 800846c:	0075005e 	.word	0x0075005e
 8008470:	01040096 	.word	0x01040096
 8008474:	01780139 	.word	0x01780139
 8008478:	021801c1 	.word	0x021801c1
 800847c:	02dc0275 	.word	0x02dc0275
 8008480:	03cd0352 	.word	0x03cd0352
 8008484:	04e80458 	.word	0x04e80458
 8008488:	062e058a 	.word	0x062e058a
 800848c:	07a606e4 	.word	0x07a606e4
 8008490:	0872      	.short	0x0872
    		lv_label_set_text(cod_falha, "Fail 02");
 8008492:	4b63      	ldr	r3, [pc, #396]	; (8008620 <update_main_screen+0x258>)
 8008494:	4967      	ldr	r1, [pc, #412]	; (8008634 <update_main_screen+0x26c>)
 8008496:	6818      	ldr	r0, [r3, #0]
 8008498:	f010 fbb8 	bl	8018c0c <lv_label_set_text>
    		lv_label_set_text(desc_falha, "Reflected High");
 800849c:	4966      	ldr	r1, [pc, #408]	; (8008638 <update_main_screen+0x270>)
 800849e:	e7d9      	b.n	8008454 <update_main_screen+0x8c>
    		lv_label_set_text(cod_falha, "Fail 03");
 80084a0:	4b5f      	ldr	r3, [pc, #380]	; (8008620 <update_main_screen+0x258>)
 80084a2:	4966      	ldr	r1, [pc, #408]	; (800863c <update_main_screen+0x274>)
 80084a4:	6818      	ldr	r0, [r3, #0]
 80084a6:	f010 fbb1 	bl	8018c0c <lv_label_set_text>
    		lv_label_set_text(desc_falha, "Foldback");
 80084aa:	4965      	ldr	r1, [pc, #404]	; (8008640 <update_main_screen+0x278>)
 80084ac:	e7d2      	b.n	8008454 <update_main_screen+0x8c>
    		lv_label_set_text(cod_falha, "Fail 04");
 80084ae:	4b5c      	ldr	r3, [pc, #368]	; (8008620 <update_main_screen+0x258>)
 80084b0:	4964      	ldr	r1, [pc, #400]	; (8008644 <update_main_screen+0x27c>)
 80084b2:	6818      	ldr	r0, [r3, #0]
 80084b4:	f010 fbaa 	bl	8018c0c <lv_label_set_text>
    		lv_label_set_text(desc_falha, "Foldback IPA");
 80084b8:	4963      	ldr	r1, [pc, #396]	; (8008648 <update_main_screen+0x280>)
 80084ba:	e7cb      	b.n	8008454 <update_main_screen+0x8c>
    		lv_label_set_text(cod_falha, "Fail 05");
 80084bc:	4b58      	ldr	r3, [pc, #352]	; (8008620 <update_main_screen+0x258>)
 80084be:	4963      	ldr	r1, [pc, #396]	; (800864c <update_main_screen+0x284>)
 80084c0:	6818      	ldr	r0, [r3, #0]
 80084c2:	f010 fba3 	bl	8018c0c <lv_label_set_text>
    		lv_label_set_text(desc_falha, "IPA High");
 80084c6:	4962      	ldr	r1, [pc, #392]	; (8008650 <update_main_screen+0x288>)
 80084c8:	e7c4      	b.n	8008454 <update_main_screen+0x8c>
    		lv_label_set_text(cod_falha, "Fail 06");
 80084ca:	4b55      	ldr	r3, [pc, #340]	; (8008620 <update_main_screen+0x258>)
 80084cc:	4961      	ldr	r1, [pc, #388]	; (8008654 <update_main_screen+0x28c>)
 80084ce:	6818      	ldr	r0, [r3, #0]
 80084d0:	f010 fb9c 	bl	8018c0c <lv_label_set_text>
    		lv_label_set_text(desc_falha, "VIN Fail");
 80084d4:	4960      	ldr	r1, [pc, #384]	; (8008658 <update_main_screen+0x290>)
 80084d6:	e7bd      	b.n	8008454 <update_main_screen+0x8c>
    		lv_label_set_text(cod_falha, "Fail 07");
 80084d8:	4b51      	ldr	r3, [pc, #324]	; (8008620 <update_main_screen+0x258>)
 80084da:	4960      	ldr	r1, [pc, #384]	; (800865c <update_main_screen+0x294>)
 80084dc:	6818      	ldr	r0, [r3, #0]
 80084de:	f010 fb95 	bl	8018c0c <lv_label_set_text>
    		lv_label_set_text(desc_falha, "No Antenna");
 80084e2:	495f      	ldr	r1, [pc, #380]	; (8008660 <update_main_screen+0x298>)
 80084e4:	e7b6      	b.n	8008454 <update_main_screen+0x8c>
			bargraph_off(0);
 80084e6:	2000      	movs	r0, #0
			bargraph_off(18);
 80084e8:	f7ff ff52 	bl	8008390 <bargraph_off>
	if(!sent_hor) {
 80084ec:	4a5d      	ldr	r2, [pc, #372]	; (8008664 <update_main_screen+0x29c>)
 80084ee:	7813      	ldrb	r3, [r2, #0]
 80084f0:	2b00      	cmp	r3, #0
 80084f2:	f041 80f6 	bne.w	80096e2 <update_main_screen+0x131a>
		mpx++;
 80084f6:	682b      	ldr	r3, [r5, #0]
 80084f8:	1c59      	adds	r1, r3, #1
		if(mpx > 20) {
 80084fa:	2914      	cmp	r1, #20
		mpx++;
 80084fc:	6029      	str	r1, [r5, #0]
		if(mpx > 20) {
 80084fe:	f241 80f5 	bls.w	80096ec <update_main_screen+0x1324>
			sent_hor = 1;
 8008502:	2101      	movs	r1, #1
 8008504:	7011      	strb	r1, [r2, #0]
			mpx--;
 8008506:	602b      	str	r3, [r5, #0]
 8008508:	bd38      	pop	{r3, r4, r5, pc}
			lv_bar_set_style(bar[0], LV_BAR_STYLE_BG, &style_indic_vd);	lv_bar_set_style(bar[0], LV_BAR_STYLE_INDIC, &style_indic_vd);
 800850a:	4c57      	ldr	r4, [pc, #348]	; (8008668 <update_main_screen+0x2a0>)
 800850c:	4a57      	ldr	r2, [pc, #348]	; (800866c <update_main_screen+0x2a4>)
 800850e:	6820      	ldr	r0, [r4, #0]
 8008510:	2100      	movs	r1, #0
 8008512:	f00d fdfd 	bl	8016110 <lv_bar_set_style>
 8008516:	6820      	ldr	r0, [r4, #0]
 8008518:	4a54      	ldr	r2, [pc, #336]	; (800866c <update_main_screen+0x2a4>)
 800851a:	2101      	movs	r1, #1
 800851c:	f00d fdf8 	bl	8016110 <lv_bar_set_style>
			bargraph_off(1);
 8008520:	2001      	movs	r0, #1
 8008522:	e7e1      	b.n	80084e8 <update_main_screen+0x120>
			lv_bar_set_style(bar[0], LV_BAR_STYLE_BG, &style_indic_vd);	lv_bar_set_style(bar[0], LV_BAR_STYLE_INDIC, &style_indic_vd);
 8008524:	4c50      	ldr	r4, [pc, #320]	; (8008668 <update_main_screen+0x2a0>)
 8008526:	4a51      	ldr	r2, [pc, #324]	; (800866c <update_main_screen+0x2a4>)
 8008528:	6820      	ldr	r0, [r4, #0]
 800852a:	2100      	movs	r1, #0
 800852c:	f00d fdf0 	bl	8016110 <lv_bar_set_style>
 8008530:	4a4e      	ldr	r2, [pc, #312]	; (800866c <update_main_screen+0x2a4>)
 8008532:	6820      	ldr	r0, [r4, #0]
 8008534:	2101      	movs	r1, #1
 8008536:	f00d fdeb 	bl	8016110 <lv_bar_set_style>
			lv_bar_set_style(bar[1], LV_BAR_STYLE_BG, &style_indic_vd);	lv_bar_set_style(bar[1], LV_BAR_STYLE_INDIC, &style_indic_vd);
 800853a:	4a4c      	ldr	r2, [pc, #304]	; (800866c <update_main_screen+0x2a4>)
 800853c:	6860      	ldr	r0, [r4, #4]
 800853e:	2100      	movs	r1, #0
 8008540:	f00d fde6 	bl	8016110 <lv_bar_set_style>
 8008544:	6860      	ldr	r0, [r4, #4]
 8008546:	4a49      	ldr	r2, [pc, #292]	; (800866c <update_main_screen+0x2a4>)
 8008548:	2101      	movs	r1, #1
 800854a:	f00d fde1 	bl	8016110 <lv_bar_set_style>
			bargraph_off(2);
 800854e:	2002      	movs	r0, #2
 8008550:	e7ca      	b.n	80084e8 <update_main_screen+0x120>
			lv_bar_set_style(bar[0], LV_BAR_STYLE_BG, &style_indic_vd);	lv_bar_set_style(bar[0], LV_BAR_STYLE_INDIC, &style_indic_vd);
 8008552:	4c45      	ldr	r4, [pc, #276]	; (8008668 <update_main_screen+0x2a0>)
 8008554:	4a45      	ldr	r2, [pc, #276]	; (800866c <update_main_screen+0x2a4>)
 8008556:	6820      	ldr	r0, [r4, #0]
 8008558:	2100      	movs	r1, #0
 800855a:	f00d fdd9 	bl	8016110 <lv_bar_set_style>
 800855e:	4a43      	ldr	r2, [pc, #268]	; (800866c <update_main_screen+0x2a4>)
 8008560:	6820      	ldr	r0, [r4, #0]
 8008562:	2101      	movs	r1, #1
 8008564:	f00d fdd4 	bl	8016110 <lv_bar_set_style>
			lv_bar_set_style(bar[1], LV_BAR_STYLE_BG, &style_indic_vd);	lv_bar_set_style(bar[1], LV_BAR_STYLE_INDIC, &style_indic_vd);
 8008568:	4a40      	ldr	r2, [pc, #256]	; (800866c <update_main_screen+0x2a4>)
 800856a:	6860      	ldr	r0, [r4, #4]
 800856c:	2100      	movs	r1, #0
 800856e:	f00d fdcf 	bl	8016110 <lv_bar_set_style>
 8008572:	4a3e      	ldr	r2, [pc, #248]	; (800866c <update_main_screen+0x2a4>)
 8008574:	6860      	ldr	r0, [r4, #4]
 8008576:	2101      	movs	r1, #1
 8008578:	f00d fdca 	bl	8016110 <lv_bar_set_style>
			lv_bar_set_style(bar[2], LV_BAR_STYLE_BG, &style_indic_vd);	lv_bar_set_style(bar[2], LV_BAR_STYLE_INDIC, &style_indic_vd);
 800857c:	4a3b      	ldr	r2, [pc, #236]	; (800866c <update_main_screen+0x2a4>)
 800857e:	68a0      	ldr	r0, [r4, #8]
 8008580:	2100      	movs	r1, #0
 8008582:	f00d fdc5 	bl	8016110 <lv_bar_set_style>
 8008586:	68a0      	ldr	r0, [r4, #8]
 8008588:	4a38      	ldr	r2, [pc, #224]	; (800866c <update_main_screen+0x2a4>)
 800858a:	2101      	movs	r1, #1
 800858c:	f00d fdc0 	bl	8016110 <lv_bar_set_style>
			bargraph_off(3);
 8008590:	2003      	movs	r0, #3
 8008592:	e7a9      	b.n	80084e8 <update_main_screen+0x120>
			lv_bar_set_style(bar[0], LV_BAR_STYLE_BG, &style_indic_vd);	lv_bar_set_style(bar[0], LV_BAR_STYLE_INDIC, &style_indic_vd);
 8008594:	4c34      	ldr	r4, [pc, #208]	; (8008668 <update_main_screen+0x2a0>)
 8008596:	4a35      	ldr	r2, [pc, #212]	; (800866c <update_main_screen+0x2a4>)
 8008598:	6820      	ldr	r0, [r4, #0]
 800859a:	2100      	movs	r1, #0
 800859c:	f00d fdb8 	bl	8016110 <lv_bar_set_style>
 80085a0:	4a32      	ldr	r2, [pc, #200]	; (800866c <update_main_screen+0x2a4>)
 80085a2:	6820      	ldr	r0, [r4, #0]
 80085a4:	2101      	movs	r1, #1
 80085a6:	f00d fdb3 	bl	8016110 <lv_bar_set_style>
			lv_bar_set_style(bar[1], LV_BAR_STYLE_BG, &style_indic_vd);	lv_bar_set_style(bar[1], LV_BAR_STYLE_INDIC, &style_indic_vd);
 80085aa:	4a30      	ldr	r2, [pc, #192]	; (800866c <update_main_screen+0x2a4>)
 80085ac:	6860      	ldr	r0, [r4, #4]
 80085ae:	2100      	movs	r1, #0
 80085b0:	f00d fdae 	bl	8016110 <lv_bar_set_style>
 80085b4:	4a2d      	ldr	r2, [pc, #180]	; (800866c <update_main_screen+0x2a4>)
 80085b6:	6860      	ldr	r0, [r4, #4]
 80085b8:	2101      	movs	r1, #1
 80085ba:	f00d fda9 	bl	8016110 <lv_bar_set_style>
			lv_bar_set_style(bar[2], LV_BAR_STYLE_BG, &style_indic_vd);	lv_bar_set_style(bar[2], LV_BAR_STYLE_INDIC, &style_indic_vd);
 80085be:	4a2b      	ldr	r2, [pc, #172]	; (800866c <update_main_screen+0x2a4>)
 80085c0:	68a0      	ldr	r0, [r4, #8]
 80085c2:	2100      	movs	r1, #0
 80085c4:	f00d fda4 	bl	8016110 <lv_bar_set_style>
 80085c8:	4a28      	ldr	r2, [pc, #160]	; (800866c <update_main_screen+0x2a4>)
 80085ca:	68a0      	ldr	r0, [r4, #8]
 80085cc:	2101      	movs	r1, #1
 80085ce:	f00d fd9f 	bl	8016110 <lv_bar_set_style>
			lv_bar_set_style(bar[3], LV_BAR_STYLE_BG, &style_indic_vd);	lv_bar_set_style(bar[3], LV_BAR_STYLE_INDIC, &style_indic_vd);
 80085d2:	4a26      	ldr	r2, [pc, #152]	; (800866c <update_main_screen+0x2a4>)
 80085d4:	68e0      	ldr	r0, [r4, #12]
 80085d6:	2100      	movs	r1, #0
 80085d8:	f00d fd9a 	bl	8016110 <lv_bar_set_style>
 80085dc:	68e0      	ldr	r0, [r4, #12]
 80085de:	4a23      	ldr	r2, [pc, #140]	; (800866c <update_main_screen+0x2a4>)
 80085e0:	2101      	movs	r1, #1
 80085e2:	f00d fd95 	bl	8016110 <lv_bar_set_style>
			bargraph_off(4);
 80085e6:	2004      	movs	r0, #4
 80085e8:	e77e      	b.n	80084e8 <update_main_screen+0x120>
 80085ea:	bf00      	nop
 80085ec:	20004e2c 	.word	0x20004e2c
 80085f0:	200051a4 	.word	0x200051a4
 80085f4:	0802c714 	.word	0x0802c714
 80085f8:	20004e30 	.word	0x20004e30
 80085fc:	20004d48 	.word	0x20004d48
 8008600:	0802c719 	.word	0x0802c719
 8008604:	200051a8 	.word	0x200051a8
 8008608:	200051ac 	.word	0x200051ac
 800860c:	0802c720 	.word	0x0802c720
 8008610:	20004e3c 	.word	0x20004e3c
 8008614:	200051b0 	.word	0x200051b0
 8008618:	20000020 	.word	0x20000020
 800861c:	0802c72d 	.word	0x0802c72d
 8008620:	20004ec4 	.word	0x20004ec4
 8008624:	0802c676 	.word	0x0802c676
 8008628:	0802c67e 	.word	0x0802c67e
 800862c:	20004ec8 	.word	0x20004ec8
 8008630:	20004e38 	.word	0x20004e38
 8008634:	0802c68a 	.word	0x0802c68a
 8008638:	0802c692 	.word	0x0802c692
 800863c:	0802c6a1 	.word	0x0802c6a1
 8008640:	0802c6a9 	.word	0x0802c6a9
 8008644:	0802c6b2 	.word	0x0802c6b2
 8008648:	0802c6ba 	.word	0x0802c6ba
 800864c:	0802c6c7 	.word	0x0802c6c7
 8008650:	0802c6cf 	.word	0x0802c6cf
 8008654:	0802c6d8 	.word	0x0802c6d8
 8008658:	0802c6e0 	.word	0x0802c6e0
 800865c:	0802c6e9 	.word	0x0802c6e9
 8008660:	0802c6f1 	.word	0x0802c6f1
 8008664:	20004e40 	.word	0x20004e40
 8008668:	20004e74 	.word	0x20004e74
 800866c:	20004fc4 	.word	0x20004fc4
			lv_bar_set_style(bar[0], LV_BAR_STYLE_BG, &style_indic_vd);	lv_bar_set_style(bar[0], LV_BAR_STYLE_INDIC, &style_indic_vd);
 8008670:	4c87      	ldr	r4, [pc, #540]	; (8008890 <update_main_screen+0x4c8>)
 8008672:	4a88      	ldr	r2, [pc, #544]	; (8008894 <update_main_screen+0x4cc>)
 8008674:	6820      	ldr	r0, [r4, #0]
 8008676:	2100      	movs	r1, #0
 8008678:	f00d fd4a 	bl	8016110 <lv_bar_set_style>
 800867c:	4a85      	ldr	r2, [pc, #532]	; (8008894 <update_main_screen+0x4cc>)
 800867e:	6820      	ldr	r0, [r4, #0]
 8008680:	2101      	movs	r1, #1
 8008682:	f00d fd45 	bl	8016110 <lv_bar_set_style>
			lv_bar_set_style(bar[1], LV_BAR_STYLE_BG, &style_indic_vd);	lv_bar_set_style(bar[1], LV_BAR_STYLE_INDIC, &style_indic_vd);
 8008686:	4a83      	ldr	r2, [pc, #524]	; (8008894 <update_main_screen+0x4cc>)
 8008688:	6860      	ldr	r0, [r4, #4]
 800868a:	2100      	movs	r1, #0
 800868c:	f00d fd40 	bl	8016110 <lv_bar_set_style>
 8008690:	4a80      	ldr	r2, [pc, #512]	; (8008894 <update_main_screen+0x4cc>)
 8008692:	6860      	ldr	r0, [r4, #4]
 8008694:	2101      	movs	r1, #1
 8008696:	f00d fd3b 	bl	8016110 <lv_bar_set_style>
			lv_bar_set_style(bar[2], LV_BAR_STYLE_BG, &style_indic_vd);	lv_bar_set_style(bar[2], LV_BAR_STYLE_INDIC, &style_indic_vd);
 800869a:	4a7e      	ldr	r2, [pc, #504]	; (8008894 <update_main_screen+0x4cc>)
 800869c:	68a0      	ldr	r0, [r4, #8]
 800869e:	2100      	movs	r1, #0
 80086a0:	f00d fd36 	bl	8016110 <lv_bar_set_style>
 80086a4:	4a7b      	ldr	r2, [pc, #492]	; (8008894 <update_main_screen+0x4cc>)
 80086a6:	68a0      	ldr	r0, [r4, #8]
 80086a8:	2101      	movs	r1, #1
 80086aa:	f00d fd31 	bl	8016110 <lv_bar_set_style>
			lv_bar_set_style(bar[3], LV_BAR_STYLE_BG, &style_indic_vd);	lv_bar_set_style(bar[3], LV_BAR_STYLE_INDIC, &style_indic_vd);
 80086ae:	4a79      	ldr	r2, [pc, #484]	; (8008894 <update_main_screen+0x4cc>)
 80086b0:	68e0      	ldr	r0, [r4, #12]
 80086b2:	2100      	movs	r1, #0
 80086b4:	f00d fd2c 	bl	8016110 <lv_bar_set_style>
 80086b8:	4a76      	ldr	r2, [pc, #472]	; (8008894 <update_main_screen+0x4cc>)
 80086ba:	68e0      	ldr	r0, [r4, #12]
 80086bc:	2101      	movs	r1, #1
 80086be:	f00d fd27 	bl	8016110 <lv_bar_set_style>
			lv_bar_set_style(bar[4], LV_BAR_STYLE_BG, &style_indic_vd);	lv_bar_set_style(bar[4], LV_BAR_STYLE_INDIC, &style_indic_vd);
 80086c2:	4a74      	ldr	r2, [pc, #464]	; (8008894 <update_main_screen+0x4cc>)
 80086c4:	6920      	ldr	r0, [r4, #16]
 80086c6:	2100      	movs	r1, #0
 80086c8:	f00d fd22 	bl	8016110 <lv_bar_set_style>
 80086cc:	6920      	ldr	r0, [r4, #16]
 80086ce:	4a71      	ldr	r2, [pc, #452]	; (8008894 <update_main_screen+0x4cc>)
 80086d0:	2101      	movs	r1, #1
 80086d2:	f00d fd1d 	bl	8016110 <lv_bar_set_style>
			bargraph_off(5);
 80086d6:	2005      	movs	r0, #5
 80086d8:	e706      	b.n	80084e8 <update_main_screen+0x120>
			lv_bar_set_style(bar[0], LV_BAR_STYLE_BG, &style_indic_vd);	lv_bar_set_style(bar[0], LV_BAR_STYLE_INDIC, &style_indic_vd);
 80086da:	4c6d      	ldr	r4, [pc, #436]	; (8008890 <update_main_screen+0x4c8>)
 80086dc:	4a6d      	ldr	r2, [pc, #436]	; (8008894 <update_main_screen+0x4cc>)
 80086de:	6820      	ldr	r0, [r4, #0]
 80086e0:	2100      	movs	r1, #0
 80086e2:	f00d fd15 	bl	8016110 <lv_bar_set_style>
 80086e6:	4a6b      	ldr	r2, [pc, #428]	; (8008894 <update_main_screen+0x4cc>)
 80086e8:	6820      	ldr	r0, [r4, #0]
 80086ea:	2101      	movs	r1, #1
 80086ec:	f00d fd10 	bl	8016110 <lv_bar_set_style>
			lv_bar_set_style(bar[1], LV_BAR_STYLE_BG, &style_indic_vd);	lv_bar_set_style(bar[1], LV_BAR_STYLE_INDIC, &style_indic_vd);
 80086f0:	4a68      	ldr	r2, [pc, #416]	; (8008894 <update_main_screen+0x4cc>)
 80086f2:	6860      	ldr	r0, [r4, #4]
 80086f4:	2100      	movs	r1, #0
 80086f6:	f00d fd0b 	bl	8016110 <lv_bar_set_style>
 80086fa:	4a66      	ldr	r2, [pc, #408]	; (8008894 <update_main_screen+0x4cc>)
 80086fc:	6860      	ldr	r0, [r4, #4]
 80086fe:	2101      	movs	r1, #1
 8008700:	f00d fd06 	bl	8016110 <lv_bar_set_style>
			lv_bar_set_style(bar[2], LV_BAR_STYLE_BG, &style_indic_vd);	lv_bar_set_style(bar[2], LV_BAR_STYLE_INDIC, &style_indic_vd);
 8008704:	4a63      	ldr	r2, [pc, #396]	; (8008894 <update_main_screen+0x4cc>)
 8008706:	68a0      	ldr	r0, [r4, #8]
 8008708:	2100      	movs	r1, #0
 800870a:	f00d fd01 	bl	8016110 <lv_bar_set_style>
 800870e:	4a61      	ldr	r2, [pc, #388]	; (8008894 <update_main_screen+0x4cc>)
 8008710:	68a0      	ldr	r0, [r4, #8]
 8008712:	2101      	movs	r1, #1
 8008714:	f00d fcfc 	bl	8016110 <lv_bar_set_style>
			lv_bar_set_style(bar[3], LV_BAR_STYLE_BG, &style_indic_vd);	lv_bar_set_style(bar[3], LV_BAR_STYLE_INDIC, &style_indic_vd);
 8008718:	4a5e      	ldr	r2, [pc, #376]	; (8008894 <update_main_screen+0x4cc>)
 800871a:	68e0      	ldr	r0, [r4, #12]
 800871c:	2100      	movs	r1, #0
 800871e:	f00d fcf7 	bl	8016110 <lv_bar_set_style>
 8008722:	4a5c      	ldr	r2, [pc, #368]	; (8008894 <update_main_screen+0x4cc>)
 8008724:	68e0      	ldr	r0, [r4, #12]
 8008726:	2101      	movs	r1, #1
 8008728:	f00d fcf2 	bl	8016110 <lv_bar_set_style>
			lv_bar_set_style(bar[4], LV_BAR_STYLE_BG, &style_indic_vd);	lv_bar_set_style(bar[4], LV_BAR_STYLE_INDIC, &style_indic_vd);
 800872c:	4a59      	ldr	r2, [pc, #356]	; (8008894 <update_main_screen+0x4cc>)
 800872e:	6920      	ldr	r0, [r4, #16]
 8008730:	2100      	movs	r1, #0
 8008732:	f00d fced 	bl	8016110 <lv_bar_set_style>
 8008736:	4a57      	ldr	r2, [pc, #348]	; (8008894 <update_main_screen+0x4cc>)
 8008738:	6920      	ldr	r0, [r4, #16]
 800873a:	2101      	movs	r1, #1
 800873c:	f00d fce8 	bl	8016110 <lv_bar_set_style>
			lv_bar_set_style(bar[5], LV_BAR_STYLE_BG, &style_indic_vd);	lv_bar_set_style(bar[5], LV_BAR_STYLE_INDIC, &style_indic_vd);
 8008740:	4a54      	ldr	r2, [pc, #336]	; (8008894 <update_main_screen+0x4cc>)
 8008742:	6960      	ldr	r0, [r4, #20]
 8008744:	2100      	movs	r1, #0
 8008746:	f00d fce3 	bl	8016110 <lv_bar_set_style>
 800874a:	6960      	ldr	r0, [r4, #20]
 800874c:	4a51      	ldr	r2, [pc, #324]	; (8008894 <update_main_screen+0x4cc>)
 800874e:	2101      	movs	r1, #1
 8008750:	f00d fcde 	bl	8016110 <lv_bar_set_style>
			bargraph_off(6);
 8008754:	2006      	movs	r0, #6
 8008756:	e6c7      	b.n	80084e8 <update_main_screen+0x120>
			lv_bar_set_style(bar[0], LV_BAR_STYLE_BG, &style_indic_vd);	lv_bar_set_style(bar[0], LV_BAR_STYLE_INDIC, &style_indic_vd);
 8008758:	4c4d      	ldr	r4, [pc, #308]	; (8008890 <update_main_screen+0x4c8>)
 800875a:	4a4e      	ldr	r2, [pc, #312]	; (8008894 <update_main_screen+0x4cc>)
 800875c:	6820      	ldr	r0, [r4, #0]
 800875e:	2100      	movs	r1, #0
 8008760:	f00d fcd6 	bl	8016110 <lv_bar_set_style>
 8008764:	4a4b      	ldr	r2, [pc, #300]	; (8008894 <update_main_screen+0x4cc>)
 8008766:	6820      	ldr	r0, [r4, #0]
 8008768:	2101      	movs	r1, #1
 800876a:	f00d fcd1 	bl	8016110 <lv_bar_set_style>
			lv_bar_set_style(bar[1], LV_BAR_STYLE_BG, &style_indic_vd);	lv_bar_set_style(bar[1], LV_BAR_STYLE_INDIC, &style_indic_vd);
 800876e:	4a49      	ldr	r2, [pc, #292]	; (8008894 <update_main_screen+0x4cc>)
 8008770:	6860      	ldr	r0, [r4, #4]
 8008772:	2100      	movs	r1, #0
 8008774:	f00d fccc 	bl	8016110 <lv_bar_set_style>
 8008778:	4a46      	ldr	r2, [pc, #280]	; (8008894 <update_main_screen+0x4cc>)
 800877a:	6860      	ldr	r0, [r4, #4]
 800877c:	2101      	movs	r1, #1
 800877e:	f00d fcc7 	bl	8016110 <lv_bar_set_style>
			lv_bar_set_style(bar[2], LV_BAR_STYLE_BG, &style_indic_vd);	lv_bar_set_style(bar[2], LV_BAR_STYLE_INDIC, &style_indic_vd);
 8008782:	4a44      	ldr	r2, [pc, #272]	; (8008894 <update_main_screen+0x4cc>)
 8008784:	68a0      	ldr	r0, [r4, #8]
 8008786:	2100      	movs	r1, #0
 8008788:	f00d fcc2 	bl	8016110 <lv_bar_set_style>
 800878c:	4a41      	ldr	r2, [pc, #260]	; (8008894 <update_main_screen+0x4cc>)
 800878e:	68a0      	ldr	r0, [r4, #8]
 8008790:	2101      	movs	r1, #1
 8008792:	f00d fcbd 	bl	8016110 <lv_bar_set_style>
			lv_bar_set_style(bar[3], LV_BAR_STYLE_BG, &style_indic_vd);	lv_bar_set_style(bar[3], LV_BAR_STYLE_INDIC, &style_indic_vd);
 8008796:	4a3f      	ldr	r2, [pc, #252]	; (8008894 <update_main_screen+0x4cc>)
 8008798:	68e0      	ldr	r0, [r4, #12]
 800879a:	2100      	movs	r1, #0
 800879c:	f00d fcb8 	bl	8016110 <lv_bar_set_style>
 80087a0:	4a3c      	ldr	r2, [pc, #240]	; (8008894 <update_main_screen+0x4cc>)
 80087a2:	68e0      	ldr	r0, [r4, #12]
 80087a4:	2101      	movs	r1, #1
 80087a6:	f00d fcb3 	bl	8016110 <lv_bar_set_style>
			lv_bar_set_style(bar[4], LV_BAR_STYLE_BG, &style_indic_vd);	lv_bar_set_style(bar[4], LV_BAR_STYLE_INDIC, &style_indic_vd);
 80087aa:	4a3a      	ldr	r2, [pc, #232]	; (8008894 <update_main_screen+0x4cc>)
 80087ac:	6920      	ldr	r0, [r4, #16]
 80087ae:	2100      	movs	r1, #0
 80087b0:	f00d fcae 	bl	8016110 <lv_bar_set_style>
 80087b4:	4a37      	ldr	r2, [pc, #220]	; (8008894 <update_main_screen+0x4cc>)
 80087b6:	6920      	ldr	r0, [r4, #16]
 80087b8:	2101      	movs	r1, #1
 80087ba:	f00d fca9 	bl	8016110 <lv_bar_set_style>
			lv_bar_set_style(bar[5], LV_BAR_STYLE_BG, &style_indic_vd);	lv_bar_set_style(bar[5], LV_BAR_STYLE_INDIC, &style_indic_vd);
 80087be:	4a35      	ldr	r2, [pc, #212]	; (8008894 <update_main_screen+0x4cc>)
 80087c0:	6960      	ldr	r0, [r4, #20]
 80087c2:	2100      	movs	r1, #0
 80087c4:	f00d fca4 	bl	8016110 <lv_bar_set_style>
 80087c8:	4a32      	ldr	r2, [pc, #200]	; (8008894 <update_main_screen+0x4cc>)
 80087ca:	6960      	ldr	r0, [r4, #20]
 80087cc:	2101      	movs	r1, #1
 80087ce:	f00d fc9f 	bl	8016110 <lv_bar_set_style>
			lv_bar_set_style(bar[6], LV_BAR_STYLE_BG, &style_indic_vd);	lv_bar_set_style(bar[6], LV_BAR_STYLE_INDIC, &style_indic_vd);
 80087d2:	4a30      	ldr	r2, [pc, #192]	; (8008894 <update_main_screen+0x4cc>)
 80087d4:	69a0      	ldr	r0, [r4, #24]
 80087d6:	2100      	movs	r1, #0
 80087d8:	f00d fc9a 	bl	8016110 <lv_bar_set_style>
 80087dc:	69a0      	ldr	r0, [r4, #24]
 80087de:	4a2d      	ldr	r2, [pc, #180]	; (8008894 <update_main_screen+0x4cc>)
 80087e0:	2101      	movs	r1, #1
 80087e2:	f00d fc95 	bl	8016110 <lv_bar_set_style>
			bargraph_off(7);
 80087e6:	2007      	movs	r0, #7
 80087e8:	e67e      	b.n	80084e8 <update_main_screen+0x120>
			lv_bar_set_style(bar[0], LV_BAR_STYLE_BG, &style_indic_vd);	lv_bar_set_style(bar[0], LV_BAR_STYLE_INDIC, &style_indic_vd);
 80087ea:	4c29      	ldr	r4, [pc, #164]	; (8008890 <update_main_screen+0x4c8>)
 80087ec:	4a29      	ldr	r2, [pc, #164]	; (8008894 <update_main_screen+0x4cc>)
 80087ee:	6820      	ldr	r0, [r4, #0]
 80087f0:	2100      	movs	r1, #0
 80087f2:	f00d fc8d 	bl	8016110 <lv_bar_set_style>
 80087f6:	4a27      	ldr	r2, [pc, #156]	; (8008894 <update_main_screen+0x4cc>)
 80087f8:	6820      	ldr	r0, [r4, #0]
 80087fa:	2101      	movs	r1, #1
 80087fc:	f00d fc88 	bl	8016110 <lv_bar_set_style>
			lv_bar_set_style(bar[1], LV_BAR_STYLE_BG, &style_indic_vd);	lv_bar_set_style(bar[1], LV_BAR_STYLE_INDIC, &style_indic_vd);
 8008800:	4a24      	ldr	r2, [pc, #144]	; (8008894 <update_main_screen+0x4cc>)
 8008802:	6860      	ldr	r0, [r4, #4]
 8008804:	2100      	movs	r1, #0
 8008806:	f00d fc83 	bl	8016110 <lv_bar_set_style>
 800880a:	4a22      	ldr	r2, [pc, #136]	; (8008894 <update_main_screen+0x4cc>)
 800880c:	6860      	ldr	r0, [r4, #4]
 800880e:	2101      	movs	r1, #1
 8008810:	f00d fc7e 	bl	8016110 <lv_bar_set_style>
			lv_bar_set_style(bar[2], LV_BAR_STYLE_BG, &style_indic_vd);	lv_bar_set_style(bar[2], LV_BAR_STYLE_INDIC, &style_indic_vd);
 8008814:	4a1f      	ldr	r2, [pc, #124]	; (8008894 <update_main_screen+0x4cc>)
 8008816:	68a0      	ldr	r0, [r4, #8]
 8008818:	2100      	movs	r1, #0
 800881a:	f00d fc79 	bl	8016110 <lv_bar_set_style>
 800881e:	4a1d      	ldr	r2, [pc, #116]	; (8008894 <update_main_screen+0x4cc>)
 8008820:	68a0      	ldr	r0, [r4, #8]
 8008822:	2101      	movs	r1, #1
 8008824:	f00d fc74 	bl	8016110 <lv_bar_set_style>
			lv_bar_set_style(bar[3], LV_BAR_STYLE_BG, &style_indic_vd);	lv_bar_set_style(bar[3], LV_BAR_STYLE_INDIC, &style_indic_vd);
 8008828:	4a1a      	ldr	r2, [pc, #104]	; (8008894 <update_main_screen+0x4cc>)
 800882a:	68e0      	ldr	r0, [r4, #12]
 800882c:	2100      	movs	r1, #0
 800882e:	f00d fc6f 	bl	8016110 <lv_bar_set_style>
 8008832:	4a18      	ldr	r2, [pc, #96]	; (8008894 <update_main_screen+0x4cc>)
 8008834:	68e0      	ldr	r0, [r4, #12]
 8008836:	2101      	movs	r1, #1
 8008838:	f00d fc6a 	bl	8016110 <lv_bar_set_style>
			lv_bar_set_style(bar[4], LV_BAR_STYLE_BG, &style_indic_vd);	lv_bar_set_style(bar[4], LV_BAR_STYLE_INDIC, &style_indic_vd);
 800883c:	4a15      	ldr	r2, [pc, #84]	; (8008894 <update_main_screen+0x4cc>)
 800883e:	6920      	ldr	r0, [r4, #16]
 8008840:	2100      	movs	r1, #0
 8008842:	f00d fc65 	bl	8016110 <lv_bar_set_style>
 8008846:	4a13      	ldr	r2, [pc, #76]	; (8008894 <update_main_screen+0x4cc>)
 8008848:	6920      	ldr	r0, [r4, #16]
 800884a:	2101      	movs	r1, #1
 800884c:	f00d fc60 	bl	8016110 <lv_bar_set_style>
			lv_bar_set_style(bar[5], LV_BAR_STYLE_BG, &style_indic_vd);	lv_bar_set_style(bar[5], LV_BAR_STYLE_INDIC, &style_indic_vd);
 8008850:	4a10      	ldr	r2, [pc, #64]	; (8008894 <update_main_screen+0x4cc>)
 8008852:	6960      	ldr	r0, [r4, #20]
 8008854:	2100      	movs	r1, #0
 8008856:	f00d fc5b 	bl	8016110 <lv_bar_set_style>
 800885a:	4a0e      	ldr	r2, [pc, #56]	; (8008894 <update_main_screen+0x4cc>)
 800885c:	6960      	ldr	r0, [r4, #20]
 800885e:	2101      	movs	r1, #1
 8008860:	f00d fc56 	bl	8016110 <lv_bar_set_style>
			lv_bar_set_style(bar[6], LV_BAR_STYLE_BG, &style_indic_vd);	lv_bar_set_style(bar[6], LV_BAR_STYLE_INDIC, &style_indic_vd);
 8008864:	4a0b      	ldr	r2, [pc, #44]	; (8008894 <update_main_screen+0x4cc>)
 8008866:	69a0      	ldr	r0, [r4, #24]
 8008868:	2100      	movs	r1, #0
 800886a:	f00d fc51 	bl	8016110 <lv_bar_set_style>
 800886e:	4a09      	ldr	r2, [pc, #36]	; (8008894 <update_main_screen+0x4cc>)
 8008870:	69a0      	ldr	r0, [r4, #24]
 8008872:	2101      	movs	r1, #1
 8008874:	f00d fc4c 	bl	8016110 <lv_bar_set_style>
			lv_bar_set_style(bar[7], LV_BAR_STYLE_BG, &style_indic_vd);	lv_bar_set_style(bar[7], LV_BAR_STYLE_INDIC, &style_indic_vd);
 8008878:	4a06      	ldr	r2, [pc, #24]	; (8008894 <update_main_screen+0x4cc>)
 800887a:	69e0      	ldr	r0, [r4, #28]
 800887c:	2100      	movs	r1, #0
 800887e:	f00d fc47 	bl	8016110 <lv_bar_set_style>
 8008882:	69e0      	ldr	r0, [r4, #28]
 8008884:	4a03      	ldr	r2, [pc, #12]	; (8008894 <update_main_screen+0x4cc>)
 8008886:	2101      	movs	r1, #1
 8008888:	f00d fc42 	bl	8016110 <lv_bar_set_style>
			bargraph_off(8);
 800888c:	2008      	movs	r0, #8
 800888e:	e62b      	b.n	80084e8 <update_main_screen+0x120>
 8008890:	20004e74 	.word	0x20004e74
 8008894:	20004fc4 	.word	0x20004fc4
			lv_bar_set_style(bar[0], LV_BAR_STYLE_BG, &style_indic_vd);	lv_bar_set_style(bar[0], LV_BAR_STYLE_INDIC, &style_indic_vd);
 8008898:	4c9a      	ldr	r4, [pc, #616]	; (8008b04 <update_main_screen+0x73c>)
 800889a:	4a9b      	ldr	r2, [pc, #620]	; (8008b08 <update_main_screen+0x740>)
 800889c:	6820      	ldr	r0, [r4, #0]
 800889e:	2100      	movs	r1, #0
 80088a0:	f00d fc36 	bl	8016110 <lv_bar_set_style>
 80088a4:	4a98      	ldr	r2, [pc, #608]	; (8008b08 <update_main_screen+0x740>)
 80088a6:	6820      	ldr	r0, [r4, #0]
 80088a8:	2101      	movs	r1, #1
 80088aa:	f00d fc31 	bl	8016110 <lv_bar_set_style>
			lv_bar_set_style(bar[1], LV_BAR_STYLE_BG, &style_indic_vd);	lv_bar_set_style(bar[1], LV_BAR_STYLE_INDIC, &style_indic_vd);
 80088ae:	4a96      	ldr	r2, [pc, #600]	; (8008b08 <update_main_screen+0x740>)
 80088b0:	6860      	ldr	r0, [r4, #4]
 80088b2:	2100      	movs	r1, #0
 80088b4:	f00d fc2c 	bl	8016110 <lv_bar_set_style>
 80088b8:	4a93      	ldr	r2, [pc, #588]	; (8008b08 <update_main_screen+0x740>)
 80088ba:	6860      	ldr	r0, [r4, #4]
 80088bc:	2101      	movs	r1, #1
 80088be:	f00d fc27 	bl	8016110 <lv_bar_set_style>
			lv_bar_set_style(bar[2], LV_BAR_STYLE_BG, &style_indic_vd);	lv_bar_set_style(bar[2], LV_BAR_STYLE_INDIC, &style_indic_vd);
 80088c2:	4a91      	ldr	r2, [pc, #580]	; (8008b08 <update_main_screen+0x740>)
 80088c4:	68a0      	ldr	r0, [r4, #8]
 80088c6:	2100      	movs	r1, #0
 80088c8:	f00d fc22 	bl	8016110 <lv_bar_set_style>
 80088cc:	4a8e      	ldr	r2, [pc, #568]	; (8008b08 <update_main_screen+0x740>)
 80088ce:	68a0      	ldr	r0, [r4, #8]
 80088d0:	2101      	movs	r1, #1
 80088d2:	f00d fc1d 	bl	8016110 <lv_bar_set_style>
			lv_bar_set_style(bar[3], LV_BAR_STYLE_BG, &style_indic_vd);	lv_bar_set_style(bar[3], LV_BAR_STYLE_INDIC, &style_indic_vd);
 80088d6:	4a8c      	ldr	r2, [pc, #560]	; (8008b08 <update_main_screen+0x740>)
 80088d8:	68e0      	ldr	r0, [r4, #12]
 80088da:	2100      	movs	r1, #0
 80088dc:	f00d fc18 	bl	8016110 <lv_bar_set_style>
 80088e0:	4a89      	ldr	r2, [pc, #548]	; (8008b08 <update_main_screen+0x740>)
 80088e2:	68e0      	ldr	r0, [r4, #12]
 80088e4:	2101      	movs	r1, #1
 80088e6:	f00d fc13 	bl	8016110 <lv_bar_set_style>
			lv_bar_set_style(bar[4], LV_BAR_STYLE_BG, &style_indic_vd);	lv_bar_set_style(bar[4], LV_BAR_STYLE_INDIC, &style_indic_vd);
 80088ea:	4a87      	ldr	r2, [pc, #540]	; (8008b08 <update_main_screen+0x740>)
 80088ec:	6920      	ldr	r0, [r4, #16]
 80088ee:	2100      	movs	r1, #0
 80088f0:	f00d fc0e 	bl	8016110 <lv_bar_set_style>
 80088f4:	4a84      	ldr	r2, [pc, #528]	; (8008b08 <update_main_screen+0x740>)
 80088f6:	6920      	ldr	r0, [r4, #16]
 80088f8:	2101      	movs	r1, #1
 80088fa:	f00d fc09 	bl	8016110 <lv_bar_set_style>
			lv_bar_set_style(bar[5], LV_BAR_STYLE_BG, &style_indic_vd);	lv_bar_set_style(bar[5], LV_BAR_STYLE_INDIC, &style_indic_vd);
 80088fe:	4a82      	ldr	r2, [pc, #520]	; (8008b08 <update_main_screen+0x740>)
 8008900:	6960      	ldr	r0, [r4, #20]
 8008902:	2100      	movs	r1, #0
 8008904:	f00d fc04 	bl	8016110 <lv_bar_set_style>
 8008908:	4a7f      	ldr	r2, [pc, #508]	; (8008b08 <update_main_screen+0x740>)
 800890a:	6960      	ldr	r0, [r4, #20]
 800890c:	2101      	movs	r1, #1
 800890e:	f00d fbff 	bl	8016110 <lv_bar_set_style>
			lv_bar_set_style(bar[6], LV_BAR_STYLE_BG, &style_indic_vd);	lv_bar_set_style(bar[6], LV_BAR_STYLE_INDIC, &style_indic_vd);
 8008912:	4a7d      	ldr	r2, [pc, #500]	; (8008b08 <update_main_screen+0x740>)
 8008914:	69a0      	ldr	r0, [r4, #24]
 8008916:	2100      	movs	r1, #0
 8008918:	f00d fbfa 	bl	8016110 <lv_bar_set_style>
 800891c:	4a7a      	ldr	r2, [pc, #488]	; (8008b08 <update_main_screen+0x740>)
 800891e:	69a0      	ldr	r0, [r4, #24]
 8008920:	2101      	movs	r1, #1
 8008922:	f00d fbf5 	bl	8016110 <lv_bar_set_style>
			lv_bar_set_style(bar[7], LV_BAR_STYLE_BG, &style_indic_vd);	lv_bar_set_style(bar[7], LV_BAR_STYLE_INDIC, &style_indic_vd);
 8008926:	4a78      	ldr	r2, [pc, #480]	; (8008b08 <update_main_screen+0x740>)
 8008928:	69e0      	ldr	r0, [r4, #28]
 800892a:	2100      	movs	r1, #0
 800892c:	f00d fbf0 	bl	8016110 <lv_bar_set_style>
 8008930:	4a75      	ldr	r2, [pc, #468]	; (8008b08 <update_main_screen+0x740>)
 8008932:	69e0      	ldr	r0, [r4, #28]
 8008934:	2101      	movs	r1, #1
 8008936:	f00d fbeb 	bl	8016110 <lv_bar_set_style>
			lv_bar_set_style(bar[8], LV_BAR_STYLE_BG, &style_indic_vd);	lv_bar_set_style(bar[8], LV_BAR_STYLE_INDIC, &style_indic_vd);
 800893a:	4a73      	ldr	r2, [pc, #460]	; (8008b08 <update_main_screen+0x740>)
 800893c:	6a20      	ldr	r0, [r4, #32]
 800893e:	2100      	movs	r1, #0
 8008940:	f00d fbe6 	bl	8016110 <lv_bar_set_style>
 8008944:	6a20      	ldr	r0, [r4, #32]
 8008946:	4a70      	ldr	r2, [pc, #448]	; (8008b08 <update_main_screen+0x740>)
 8008948:	2101      	movs	r1, #1
 800894a:	f00d fbe1 	bl	8016110 <lv_bar_set_style>
			bargraph_off(9);
 800894e:	2009      	movs	r0, #9
 8008950:	e5ca      	b.n	80084e8 <update_main_screen+0x120>
			lv_bar_set_style(bar[0], LV_BAR_STYLE_BG, &style_indic_vd);	lv_bar_set_style(bar[0], LV_BAR_STYLE_INDIC, &style_indic_vd);
 8008952:	4c6c      	ldr	r4, [pc, #432]	; (8008b04 <update_main_screen+0x73c>)
 8008954:	4a6c      	ldr	r2, [pc, #432]	; (8008b08 <update_main_screen+0x740>)
 8008956:	6820      	ldr	r0, [r4, #0]
 8008958:	2100      	movs	r1, #0
 800895a:	f00d fbd9 	bl	8016110 <lv_bar_set_style>
 800895e:	4a6a      	ldr	r2, [pc, #424]	; (8008b08 <update_main_screen+0x740>)
 8008960:	6820      	ldr	r0, [r4, #0]
 8008962:	2101      	movs	r1, #1
 8008964:	f00d fbd4 	bl	8016110 <lv_bar_set_style>
			lv_bar_set_style(bar[1], LV_BAR_STYLE_BG, &style_indic_vd);	lv_bar_set_style(bar[1], LV_BAR_STYLE_INDIC, &style_indic_vd);
 8008968:	4a67      	ldr	r2, [pc, #412]	; (8008b08 <update_main_screen+0x740>)
 800896a:	6860      	ldr	r0, [r4, #4]
 800896c:	2100      	movs	r1, #0
 800896e:	f00d fbcf 	bl	8016110 <lv_bar_set_style>
 8008972:	4a65      	ldr	r2, [pc, #404]	; (8008b08 <update_main_screen+0x740>)
 8008974:	6860      	ldr	r0, [r4, #4]
 8008976:	2101      	movs	r1, #1
 8008978:	f00d fbca 	bl	8016110 <lv_bar_set_style>
			lv_bar_set_style(bar[2], LV_BAR_STYLE_BG, &style_indic_vd);	lv_bar_set_style(bar[2], LV_BAR_STYLE_INDIC, &style_indic_vd);
 800897c:	4a62      	ldr	r2, [pc, #392]	; (8008b08 <update_main_screen+0x740>)
 800897e:	68a0      	ldr	r0, [r4, #8]
 8008980:	2100      	movs	r1, #0
 8008982:	f00d fbc5 	bl	8016110 <lv_bar_set_style>
 8008986:	4a60      	ldr	r2, [pc, #384]	; (8008b08 <update_main_screen+0x740>)
 8008988:	68a0      	ldr	r0, [r4, #8]
 800898a:	2101      	movs	r1, #1
 800898c:	f00d fbc0 	bl	8016110 <lv_bar_set_style>
			lv_bar_set_style(bar[3], LV_BAR_STYLE_BG, &style_indic_vd);	lv_bar_set_style(bar[3], LV_BAR_STYLE_INDIC, &style_indic_vd);
 8008990:	4a5d      	ldr	r2, [pc, #372]	; (8008b08 <update_main_screen+0x740>)
 8008992:	68e0      	ldr	r0, [r4, #12]
 8008994:	2100      	movs	r1, #0
 8008996:	f00d fbbb 	bl	8016110 <lv_bar_set_style>
 800899a:	4a5b      	ldr	r2, [pc, #364]	; (8008b08 <update_main_screen+0x740>)
 800899c:	68e0      	ldr	r0, [r4, #12]
 800899e:	2101      	movs	r1, #1
 80089a0:	f00d fbb6 	bl	8016110 <lv_bar_set_style>
			lv_bar_set_style(bar[4], LV_BAR_STYLE_BG, &style_indic_vd);	lv_bar_set_style(bar[4], LV_BAR_STYLE_INDIC, &style_indic_vd);
 80089a4:	4a58      	ldr	r2, [pc, #352]	; (8008b08 <update_main_screen+0x740>)
 80089a6:	6920      	ldr	r0, [r4, #16]
 80089a8:	2100      	movs	r1, #0
 80089aa:	f00d fbb1 	bl	8016110 <lv_bar_set_style>
 80089ae:	4a56      	ldr	r2, [pc, #344]	; (8008b08 <update_main_screen+0x740>)
 80089b0:	6920      	ldr	r0, [r4, #16]
 80089b2:	2101      	movs	r1, #1
 80089b4:	f00d fbac 	bl	8016110 <lv_bar_set_style>
			lv_bar_set_style(bar[5], LV_BAR_STYLE_BG, &style_indic_vd);	lv_bar_set_style(bar[5], LV_BAR_STYLE_INDIC, &style_indic_vd);
 80089b8:	4a53      	ldr	r2, [pc, #332]	; (8008b08 <update_main_screen+0x740>)
 80089ba:	6960      	ldr	r0, [r4, #20]
 80089bc:	2100      	movs	r1, #0
 80089be:	f00d fba7 	bl	8016110 <lv_bar_set_style>
 80089c2:	4a51      	ldr	r2, [pc, #324]	; (8008b08 <update_main_screen+0x740>)
 80089c4:	6960      	ldr	r0, [r4, #20]
 80089c6:	2101      	movs	r1, #1
 80089c8:	f00d fba2 	bl	8016110 <lv_bar_set_style>
			lv_bar_set_style(bar[6], LV_BAR_STYLE_BG, &style_indic_vd);	lv_bar_set_style(bar[6], LV_BAR_STYLE_INDIC, &style_indic_vd);
 80089cc:	4a4e      	ldr	r2, [pc, #312]	; (8008b08 <update_main_screen+0x740>)
 80089ce:	69a0      	ldr	r0, [r4, #24]
 80089d0:	2100      	movs	r1, #0
 80089d2:	f00d fb9d 	bl	8016110 <lv_bar_set_style>
 80089d6:	4a4c      	ldr	r2, [pc, #304]	; (8008b08 <update_main_screen+0x740>)
 80089d8:	69a0      	ldr	r0, [r4, #24]
 80089da:	2101      	movs	r1, #1
 80089dc:	f00d fb98 	bl	8016110 <lv_bar_set_style>
			lv_bar_set_style(bar[7], LV_BAR_STYLE_BG, &style_indic_vd);	lv_bar_set_style(bar[7], LV_BAR_STYLE_INDIC, &style_indic_vd);
 80089e0:	4a49      	ldr	r2, [pc, #292]	; (8008b08 <update_main_screen+0x740>)
 80089e2:	69e0      	ldr	r0, [r4, #28]
 80089e4:	2100      	movs	r1, #0
 80089e6:	f00d fb93 	bl	8016110 <lv_bar_set_style>
 80089ea:	4a47      	ldr	r2, [pc, #284]	; (8008b08 <update_main_screen+0x740>)
 80089ec:	69e0      	ldr	r0, [r4, #28]
 80089ee:	2101      	movs	r1, #1
 80089f0:	f00d fb8e 	bl	8016110 <lv_bar_set_style>
			lv_bar_set_style(bar[8], LV_BAR_STYLE_BG, &style_indic_vd);	lv_bar_set_style(bar[8], LV_BAR_STYLE_INDIC, &style_indic_vd);
 80089f4:	4a44      	ldr	r2, [pc, #272]	; (8008b08 <update_main_screen+0x740>)
 80089f6:	6a20      	ldr	r0, [r4, #32]
 80089f8:	2100      	movs	r1, #0
 80089fa:	f00d fb89 	bl	8016110 <lv_bar_set_style>
 80089fe:	4a42      	ldr	r2, [pc, #264]	; (8008b08 <update_main_screen+0x740>)
 8008a00:	6a20      	ldr	r0, [r4, #32]
 8008a02:	2101      	movs	r1, #1
 8008a04:	f00d fb84 	bl	8016110 <lv_bar_set_style>
			lv_bar_set_style(bar[9], LV_BAR_STYLE_BG, &style_indic_vd);	lv_bar_set_style(bar[9], LV_BAR_STYLE_INDIC, &style_indic_vd);
 8008a08:	4a3f      	ldr	r2, [pc, #252]	; (8008b08 <update_main_screen+0x740>)
 8008a0a:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8008a0c:	2100      	movs	r1, #0
 8008a0e:	f00d fb7f 	bl	8016110 <lv_bar_set_style>
 8008a12:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8008a14:	4a3c      	ldr	r2, [pc, #240]	; (8008b08 <update_main_screen+0x740>)
 8008a16:	2101      	movs	r1, #1
 8008a18:	f00d fb7a 	bl	8016110 <lv_bar_set_style>
			bargraph_off(10);
 8008a1c:	200a      	movs	r0, #10
 8008a1e:	e563      	b.n	80084e8 <update_main_screen+0x120>
			lv_bar_set_style(bar[0], LV_BAR_STYLE_BG, &style_indic_vd);	lv_bar_set_style(bar[0], LV_BAR_STYLE_INDIC, &style_indic_vd);
 8008a20:	4c38      	ldr	r4, [pc, #224]	; (8008b04 <update_main_screen+0x73c>)
 8008a22:	4a39      	ldr	r2, [pc, #228]	; (8008b08 <update_main_screen+0x740>)
 8008a24:	6820      	ldr	r0, [r4, #0]
 8008a26:	2100      	movs	r1, #0
 8008a28:	f00d fb72 	bl	8016110 <lv_bar_set_style>
 8008a2c:	4a36      	ldr	r2, [pc, #216]	; (8008b08 <update_main_screen+0x740>)
 8008a2e:	6820      	ldr	r0, [r4, #0]
 8008a30:	2101      	movs	r1, #1
 8008a32:	f00d fb6d 	bl	8016110 <lv_bar_set_style>
			lv_bar_set_style(bar[1], LV_BAR_STYLE_BG, &style_indic_vd);	lv_bar_set_style(bar[1], LV_BAR_STYLE_INDIC, &style_indic_vd);
 8008a36:	4a34      	ldr	r2, [pc, #208]	; (8008b08 <update_main_screen+0x740>)
 8008a38:	6860      	ldr	r0, [r4, #4]
 8008a3a:	2100      	movs	r1, #0
 8008a3c:	f00d fb68 	bl	8016110 <lv_bar_set_style>
 8008a40:	4a31      	ldr	r2, [pc, #196]	; (8008b08 <update_main_screen+0x740>)
 8008a42:	6860      	ldr	r0, [r4, #4]
 8008a44:	2101      	movs	r1, #1
 8008a46:	f00d fb63 	bl	8016110 <lv_bar_set_style>
			lv_bar_set_style(bar[2], LV_BAR_STYLE_BG, &style_indic_vd);	lv_bar_set_style(bar[2], LV_BAR_STYLE_INDIC, &style_indic_vd);
 8008a4a:	4a2f      	ldr	r2, [pc, #188]	; (8008b08 <update_main_screen+0x740>)
 8008a4c:	68a0      	ldr	r0, [r4, #8]
 8008a4e:	2100      	movs	r1, #0
 8008a50:	f00d fb5e 	bl	8016110 <lv_bar_set_style>
 8008a54:	4a2c      	ldr	r2, [pc, #176]	; (8008b08 <update_main_screen+0x740>)
 8008a56:	68a0      	ldr	r0, [r4, #8]
 8008a58:	2101      	movs	r1, #1
 8008a5a:	f00d fb59 	bl	8016110 <lv_bar_set_style>
			lv_bar_set_style(bar[3], LV_BAR_STYLE_BG, &style_indic_vd);	lv_bar_set_style(bar[3], LV_BAR_STYLE_INDIC, &style_indic_vd);
 8008a5e:	4a2a      	ldr	r2, [pc, #168]	; (8008b08 <update_main_screen+0x740>)
 8008a60:	68e0      	ldr	r0, [r4, #12]
 8008a62:	2100      	movs	r1, #0
 8008a64:	f00d fb54 	bl	8016110 <lv_bar_set_style>
 8008a68:	4a27      	ldr	r2, [pc, #156]	; (8008b08 <update_main_screen+0x740>)
 8008a6a:	68e0      	ldr	r0, [r4, #12]
 8008a6c:	2101      	movs	r1, #1
 8008a6e:	f00d fb4f 	bl	8016110 <lv_bar_set_style>
			lv_bar_set_style(bar[4], LV_BAR_STYLE_BG, &style_indic_vd);	lv_bar_set_style(bar[4], LV_BAR_STYLE_INDIC, &style_indic_vd);
 8008a72:	4a25      	ldr	r2, [pc, #148]	; (8008b08 <update_main_screen+0x740>)
 8008a74:	6920      	ldr	r0, [r4, #16]
 8008a76:	2100      	movs	r1, #0
 8008a78:	f00d fb4a 	bl	8016110 <lv_bar_set_style>
 8008a7c:	4a22      	ldr	r2, [pc, #136]	; (8008b08 <update_main_screen+0x740>)
 8008a7e:	6920      	ldr	r0, [r4, #16]
 8008a80:	2101      	movs	r1, #1
 8008a82:	f00d fb45 	bl	8016110 <lv_bar_set_style>
			lv_bar_set_style(bar[5], LV_BAR_STYLE_BG, &style_indic_vd);	lv_bar_set_style(bar[5], LV_BAR_STYLE_INDIC, &style_indic_vd);
 8008a86:	4a20      	ldr	r2, [pc, #128]	; (8008b08 <update_main_screen+0x740>)
 8008a88:	6960      	ldr	r0, [r4, #20]
 8008a8a:	2100      	movs	r1, #0
 8008a8c:	f00d fb40 	bl	8016110 <lv_bar_set_style>
 8008a90:	4a1d      	ldr	r2, [pc, #116]	; (8008b08 <update_main_screen+0x740>)
 8008a92:	6960      	ldr	r0, [r4, #20]
 8008a94:	2101      	movs	r1, #1
 8008a96:	f00d fb3b 	bl	8016110 <lv_bar_set_style>
			lv_bar_set_style(bar[6], LV_BAR_STYLE_BG, &style_indic_vd);	lv_bar_set_style(bar[6], LV_BAR_STYLE_INDIC, &style_indic_vd);
 8008a9a:	4a1b      	ldr	r2, [pc, #108]	; (8008b08 <update_main_screen+0x740>)
 8008a9c:	69a0      	ldr	r0, [r4, #24]
 8008a9e:	2100      	movs	r1, #0
 8008aa0:	f00d fb36 	bl	8016110 <lv_bar_set_style>
 8008aa4:	4a18      	ldr	r2, [pc, #96]	; (8008b08 <update_main_screen+0x740>)
 8008aa6:	69a0      	ldr	r0, [r4, #24]
 8008aa8:	2101      	movs	r1, #1
 8008aaa:	f00d fb31 	bl	8016110 <lv_bar_set_style>
			lv_bar_set_style(bar[7], LV_BAR_STYLE_BG, &style_indic_vd);	lv_bar_set_style(bar[7], LV_BAR_STYLE_INDIC, &style_indic_vd);
 8008aae:	4a16      	ldr	r2, [pc, #88]	; (8008b08 <update_main_screen+0x740>)
 8008ab0:	69e0      	ldr	r0, [r4, #28]
 8008ab2:	2100      	movs	r1, #0
 8008ab4:	f00d fb2c 	bl	8016110 <lv_bar_set_style>
 8008ab8:	4a13      	ldr	r2, [pc, #76]	; (8008b08 <update_main_screen+0x740>)
 8008aba:	69e0      	ldr	r0, [r4, #28]
 8008abc:	2101      	movs	r1, #1
 8008abe:	f00d fb27 	bl	8016110 <lv_bar_set_style>
			lv_bar_set_style(bar[8], LV_BAR_STYLE_BG, &style_indic_vd);	lv_bar_set_style(bar[8], LV_BAR_STYLE_INDIC, &style_indic_vd);
 8008ac2:	4a11      	ldr	r2, [pc, #68]	; (8008b08 <update_main_screen+0x740>)
 8008ac4:	6a20      	ldr	r0, [r4, #32]
 8008ac6:	2100      	movs	r1, #0
 8008ac8:	f00d fb22 	bl	8016110 <lv_bar_set_style>
 8008acc:	4a0e      	ldr	r2, [pc, #56]	; (8008b08 <update_main_screen+0x740>)
 8008ace:	6a20      	ldr	r0, [r4, #32]
 8008ad0:	2101      	movs	r1, #1
 8008ad2:	f00d fb1d 	bl	8016110 <lv_bar_set_style>
			lv_bar_set_style(bar[9], LV_BAR_STYLE_BG, &style_indic_vd);	lv_bar_set_style(bar[9], LV_BAR_STYLE_INDIC, &style_indic_vd);
 8008ad6:	4a0c      	ldr	r2, [pc, #48]	; (8008b08 <update_main_screen+0x740>)
 8008ad8:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8008ada:	2100      	movs	r1, #0
 8008adc:	f00d fb18 	bl	8016110 <lv_bar_set_style>
 8008ae0:	4a09      	ldr	r2, [pc, #36]	; (8008b08 <update_main_screen+0x740>)
 8008ae2:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8008ae4:	2101      	movs	r1, #1
 8008ae6:	f00d fb13 	bl	8016110 <lv_bar_set_style>
			lv_bar_set_style(bar[10], LV_BAR_STYLE_BG, &style_indic_vd); lv_bar_set_style(bar[10], LV_BAR_STYLE_INDIC, &style_indic_vd);
 8008aea:	4a07      	ldr	r2, [pc, #28]	; (8008b08 <update_main_screen+0x740>)
 8008aec:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8008aee:	2100      	movs	r1, #0
 8008af0:	f00d fb0e 	bl	8016110 <lv_bar_set_style>
 8008af4:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8008af6:	4a04      	ldr	r2, [pc, #16]	; (8008b08 <update_main_screen+0x740>)
 8008af8:	2101      	movs	r1, #1
 8008afa:	f00d fb09 	bl	8016110 <lv_bar_set_style>
			bargraph_off(11);
 8008afe:	200b      	movs	r0, #11
 8008b00:	e4f2      	b.n	80084e8 <update_main_screen+0x120>
 8008b02:	bf00      	nop
 8008b04:	20004e74 	.word	0x20004e74
 8008b08:	20004fc4 	.word	0x20004fc4
			lv_bar_set_style(bar[0], LV_BAR_STYLE_BG, &style_indic_vd);	lv_bar_set_style(bar[0], LV_BAR_STYLE_INDIC, &style_indic_vd);
 8008b0c:	4c80      	ldr	r4, [pc, #512]	; (8008d10 <update_main_screen+0x948>)
 8008b0e:	4a81      	ldr	r2, [pc, #516]	; (8008d14 <update_main_screen+0x94c>)
 8008b10:	6820      	ldr	r0, [r4, #0]
 8008b12:	2100      	movs	r1, #0
 8008b14:	f00d fafc 	bl	8016110 <lv_bar_set_style>
 8008b18:	4a7e      	ldr	r2, [pc, #504]	; (8008d14 <update_main_screen+0x94c>)
 8008b1a:	6820      	ldr	r0, [r4, #0]
 8008b1c:	2101      	movs	r1, #1
 8008b1e:	f00d faf7 	bl	8016110 <lv_bar_set_style>
			lv_bar_set_style(bar[1], LV_BAR_STYLE_BG, &style_indic_vd);	lv_bar_set_style(bar[1], LV_BAR_STYLE_INDIC, &style_indic_vd);
 8008b22:	4a7c      	ldr	r2, [pc, #496]	; (8008d14 <update_main_screen+0x94c>)
 8008b24:	6860      	ldr	r0, [r4, #4]
 8008b26:	2100      	movs	r1, #0
 8008b28:	f00d faf2 	bl	8016110 <lv_bar_set_style>
 8008b2c:	4a79      	ldr	r2, [pc, #484]	; (8008d14 <update_main_screen+0x94c>)
 8008b2e:	6860      	ldr	r0, [r4, #4]
 8008b30:	2101      	movs	r1, #1
 8008b32:	f00d faed 	bl	8016110 <lv_bar_set_style>
			lv_bar_set_style(bar[2], LV_BAR_STYLE_BG, &style_indic_vd);	lv_bar_set_style(bar[2], LV_BAR_STYLE_INDIC, &style_indic_vd);
 8008b36:	4a77      	ldr	r2, [pc, #476]	; (8008d14 <update_main_screen+0x94c>)
 8008b38:	68a0      	ldr	r0, [r4, #8]
 8008b3a:	2100      	movs	r1, #0
 8008b3c:	f00d fae8 	bl	8016110 <lv_bar_set_style>
 8008b40:	4a74      	ldr	r2, [pc, #464]	; (8008d14 <update_main_screen+0x94c>)
 8008b42:	68a0      	ldr	r0, [r4, #8]
 8008b44:	2101      	movs	r1, #1
 8008b46:	f00d fae3 	bl	8016110 <lv_bar_set_style>
			lv_bar_set_style(bar[3], LV_BAR_STYLE_BG, &style_indic_vd);	lv_bar_set_style(bar[3], LV_BAR_STYLE_INDIC, &style_indic_vd);
 8008b4a:	4a72      	ldr	r2, [pc, #456]	; (8008d14 <update_main_screen+0x94c>)
 8008b4c:	68e0      	ldr	r0, [r4, #12]
 8008b4e:	2100      	movs	r1, #0
 8008b50:	f00d fade 	bl	8016110 <lv_bar_set_style>
 8008b54:	4a6f      	ldr	r2, [pc, #444]	; (8008d14 <update_main_screen+0x94c>)
 8008b56:	68e0      	ldr	r0, [r4, #12]
 8008b58:	2101      	movs	r1, #1
 8008b5a:	f00d fad9 	bl	8016110 <lv_bar_set_style>
			lv_bar_set_style(bar[4], LV_BAR_STYLE_BG, &style_indic_vd);	lv_bar_set_style(bar[4], LV_BAR_STYLE_INDIC, &style_indic_vd);
 8008b5e:	4a6d      	ldr	r2, [pc, #436]	; (8008d14 <update_main_screen+0x94c>)
 8008b60:	6920      	ldr	r0, [r4, #16]
 8008b62:	2100      	movs	r1, #0
 8008b64:	f00d fad4 	bl	8016110 <lv_bar_set_style>
 8008b68:	4a6a      	ldr	r2, [pc, #424]	; (8008d14 <update_main_screen+0x94c>)
 8008b6a:	6920      	ldr	r0, [r4, #16]
 8008b6c:	2101      	movs	r1, #1
 8008b6e:	f00d facf 	bl	8016110 <lv_bar_set_style>
			lv_bar_set_style(bar[5], LV_BAR_STYLE_BG, &style_indic_vd);	lv_bar_set_style(bar[5], LV_BAR_STYLE_INDIC, &style_indic_vd);
 8008b72:	4a68      	ldr	r2, [pc, #416]	; (8008d14 <update_main_screen+0x94c>)
 8008b74:	6960      	ldr	r0, [r4, #20]
 8008b76:	2100      	movs	r1, #0
 8008b78:	f00d faca 	bl	8016110 <lv_bar_set_style>
 8008b7c:	4a65      	ldr	r2, [pc, #404]	; (8008d14 <update_main_screen+0x94c>)
 8008b7e:	6960      	ldr	r0, [r4, #20]
 8008b80:	2101      	movs	r1, #1
 8008b82:	f00d fac5 	bl	8016110 <lv_bar_set_style>
			lv_bar_set_style(bar[6], LV_BAR_STYLE_BG, &style_indic_vd);	lv_bar_set_style(bar[6], LV_BAR_STYLE_INDIC, &style_indic_vd);
 8008b86:	4a63      	ldr	r2, [pc, #396]	; (8008d14 <update_main_screen+0x94c>)
 8008b88:	69a0      	ldr	r0, [r4, #24]
 8008b8a:	2100      	movs	r1, #0
 8008b8c:	f00d fac0 	bl	8016110 <lv_bar_set_style>
 8008b90:	4a60      	ldr	r2, [pc, #384]	; (8008d14 <update_main_screen+0x94c>)
 8008b92:	69a0      	ldr	r0, [r4, #24]
 8008b94:	2101      	movs	r1, #1
 8008b96:	f00d fabb 	bl	8016110 <lv_bar_set_style>
			lv_bar_set_style(bar[7], LV_BAR_STYLE_BG, &style_indic_vd);	lv_bar_set_style(bar[7], LV_BAR_STYLE_INDIC, &style_indic_vd);
 8008b9a:	4a5e      	ldr	r2, [pc, #376]	; (8008d14 <update_main_screen+0x94c>)
 8008b9c:	69e0      	ldr	r0, [r4, #28]
 8008b9e:	2100      	movs	r1, #0
 8008ba0:	f00d fab6 	bl	8016110 <lv_bar_set_style>
 8008ba4:	4a5b      	ldr	r2, [pc, #364]	; (8008d14 <update_main_screen+0x94c>)
 8008ba6:	69e0      	ldr	r0, [r4, #28]
 8008ba8:	2101      	movs	r1, #1
 8008baa:	f00d fab1 	bl	8016110 <lv_bar_set_style>
			lv_bar_set_style(bar[8], LV_BAR_STYLE_BG, &style_indic_vd);	lv_bar_set_style(bar[8], LV_BAR_STYLE_INDIC, &style_indic_vd);
 8008bae:	4a59      	ldr	r2, [pc, #356]	; (8008d14 <update_main_screen+0x94c>)
 8008bb0:	6a20      	ldr	r0, [r4, #32]
 8008bb2:	2100      	movs	r1, #0
 8008bb4:	f00d faac 	bl	8016110 <lv_bar_set_style>
 8008bb8:	4a56      	ldr	r2, [pc, #344]	; (8008d14 <update_main_screen+0x94c>)
 8008bba:	6a20      	ldr	r0, [r4, #32]
 8008bbc:	2101      	movs	r1, #1
 8008bbe:	f00d faa7 	bl	8016110 <lv_bar_set_style>
			lv_bar_set_style(bar[9], LV_BAR_STYLE_BG, &style_indic_vd);	lv_bar_set_style(bar[9], LV_BAR_STYLE_INDIC, &style_indic_vd);
 8008bc2:	4a54      	ldr	r2, [pc, #336]	; (8008d14 <update_main_screen+0x94c>)
 8008bc4:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8008bc6:	2100      	movs	r1, #0
 8008bc8:	f00d faa2 	bl	8016110 <lv_bar_set_style>
 8008bcc:	4a51      	ldr	r2, [pc, #324]	; (8008d14 <update_main_screen+0x94c>)
 8008bce:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8008bd0:	2101      	movs	r1, #1
 8008bd2:	f00d fa9d 	bl	8016110 <lv_bar_set_style>
			lv_bar_set_style(bar[10], LV_BAR_STYLE_BG, &style_indic_vd); lv_bar_set_style(bar[10], LV_BAR_STYLE_INDIC, &style_indic_vd);
 8008bd6:	4a4f      	ldr	r2, [pc, #316]	; (8008d14 <update_main_screen+0x94c>)
 8008bd8:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8008bda:	2100      	movs	r1, #0
 8008bdc:	f00d fa98 	bl	8016110 <lv_bar_set_style>
 8008be0:	4a4c      	ldr	r2, [pc, #304]	; (8008d14 <update_main_screen+0x94c>)
 8008be2:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8008be4:	2101      	movs	r1, #1
 8008be6:	f00d fa93 	bl	8016110 <lv_bar_set_style>
			lv_bar_set_style(bar[11], LV_BAR_STYLE_BG, &style_indic_vd); lv_bar_set_style(bar[11], LV_BAR_STYLE_INDIC, &style_indic_vd);
 8008bea:	4a4a      	ldr	r2, [pc, #296]	; (8008d14 <update_main_screen+0x94c>)
 8008bec:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8008bee:	2100      	movs	r1, #0
 8008bf0:	f00d fa8e 	bl	8016110 <lv_bar_set_style>
 8008bf4:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8008bf6:	4a47      	ldr	r2, [pc, #284]	; (8008d14 <update_main_screen+0x94c>)
 8008bf8:	2101      	movs	r1, #1
 8008bfa:	f00d fa89 	bl	8016110 <lv_bar_set_style>
			bargraph_off(12);
 8008bfe:	200c      	movs	r0, #12
 8008c00:	e472      	b.n	80084e8 <update_main_screen+0x120>
			lv_bar_set_style(bar[0], LV_BAR_STYLE_BG, &style_indic_vd);	lv_bar_set_style(bar[0], LV_BAR_STYLE_INDIC, &style_indic_vd);
 8008c02:	4c43      	ldr	r4, [pc, #268]	; (8008d10 <update_main_screen+0x948>)
 8008c04:	4a43      	ldr	r2, [pc, #268]	; (8008d14 <update_main_screen+0x94c>)
 8008c06:	6820      	ldr	r0, [r4, #0]
 8008c08:	2100      	movs	r1, #0
 8008c0a:	f00d fa81 	bl	8016110 <lv_bar_set_style>
 8008c0e:	4a41      	ldr	r2, [pc, #260]	; (8008d14 <update_main_screen+0x94c>)
 8008c10:	6820      	ldr	r0, [r4, #0]
 8008c12:	2101      	movs	r1, #1
 8008c14:	f00d fa7c 	bl	8016110 <lv_bar_set_style>
			lv_bar_set_style(bar[1], LV_BAR_STYLE_BG, &style_indic_vd);	lv_bar_set_style(bar[1], LV_BAR_STYLE_INDIC, &style_indic_vd);
 8008c18:	4a3e      	ldr	r2, [pc, #248]	; (8008d14 <update_main_screen+0x94c>)
 8008c1a:	6860      	ldr	r0, [r4, #4]
 8008c1c:	2100      	movs	r1, #0
 8008c1e:	f00d fa77 	bl	8016110 <lv_bar_set_style>
 8008c22:	4a3c      	ldr	r2, [pc, #240]	; (8008d14 <update_main_screen+0x94c>)
 8008c24:	6860      	ldr	r0, [r4, #4]
 8008c26:	2101      	movs	r1, #1
 8008c28:	f00d fa72 	bl	8016110 <lv_bar_set_style>
			lv_bar_set_style(bar[2], LV_BAR_STYLE_BG, &style_indic_vd);	lv_bar_set_style(bar[2], LV_BAR_STYLE_INDIC, &style_indic_vd);
 8008c2c:	4a39      	ldr	r2, [pc, #228]	; (8008d14 <update_main_screen+0x94c>)
 8008c2e:	68a0      	ldr	r0, [r4, #8]
 8008c30:	2100      	movs	r1, #0
 8008c32:	f00d fa6d 	bl	8016110 <lv_bar_set_style>
 8008c36:	4a37      	ldr	r2, [pc, #220]	; (8008d14 <update_main_screen+0x94c>)
 8008c38:	68a0      	ldr	r0, [r4, #8]
 8008c3a:	2101      	movs	r1, #1
 8008c3c:	f00d fa68 	bl	8016110 <lv_bar_set_style>
			lv_bar_set_style(bar[3], LV_BAR_STYLE_BG, &style_indic_vd);	lv_bar_set_style(bar[3], LV_BAR_STYLE_INDIC, &style_indic_vd);
 8008c40:	4a34      	ldr	r2, [pc, #208]	; (8008d14 <update_main_screen+0x94c>)
 8008c42:	68e0      	ldr	r0, [r4, #12]
 8008c44:	2100      	movs	r1, #0
 8008c46:	f00d fa63 	bl	8016110 <lv_bar_set_style>
 8008c4a:	4a32      	ldr	r2, [pc, #200]	; (8008d14 <update_main_screen+0x94c>)
 8008c4c:	68e0      	ldr	r0, [r4, #12]
 8008c4e:	2101      	movs	r1, #1
 8008c50:	f00d fa5e 	bl	8016110 <lv_bar_set_style>
			lv_bar_set_style(bar[4], LV_BAR_STYLE_BG, &style_indic_vd);	lv_bar_set_style(bar[4], LV_BAR_STYLE_INDIC, &style_indic_vd);
 8008c54:	4a2f      	ldr	r2, [pc, #188]	; (8008d14 <update_main_screen+0x94c>)
 8008c56:	6920      	ldr	r0, [r4, #16]
 8008c58:	2100      	movs	r1, #0
 8008c5a:	f00d fa59 	bl	8016110 <lv_bar_set_style>
 8008c5e:	4a2d      	ldr	r2, [pc, #180]	; (8008d14 <update_main_screen+0x94c>)
 8008c60:	6920      	ldr	r0, [r4, #16]
 8008c62:	2101      	movs	r1, #1
 8008c64:	f00d fa54 	bl	8016110 <lv_bar_set_style>
			lv_bar_set_style(bar[5], LV_BAR_STYLE_BG, &style_indic_vd);	lv_bar_set_style(bar[5], LV_BAR_STYLE_INDIC, &style_indic_vd);
 8008c68:	4a2a      	ldr	r2, [pc, #168]	; (8008d14 <update_main_screen+0x94c>)
 8008c6a:	6960      	ldr	r0, [r4, #20]
 8008c6c:	2100      	movs	r1, #0
 8008c6e:	f00d fa4f 	bl	8016110 <lv_bar_set_style>
 8008c72:	4a28      	ldr	r2, [pc, #160]	; (8008d14 <update_main_screen+0x94c>)
 8008c74:	6960      	ldr	r0, [r4, #20]
 8008c76:	2101      	movs	r1, #1
 8008c78:	f00d fa4a 	bl	8016110 <lv_bar_set_style>
			lv_bar_set_style(bar[6], LV_BAR_STYLE_BG, &style_indic_vd);	lv_bar_set_style(bar[6], LV_BAR_STYLE_INDIC, &style_indic_vd);
 8008c7c:	4a25      	ldr	r2, [pc, #148]	; (8008d14 <update_main_screen+0x94c>)
 8008c7e:	69a0      	ldr	r0, [r4, #24]
 8008c80:	2100      	movs	r1, #0
 8008c82:	f00d fa45 	bl	8016110 <lv_bar_set_style>
 8008c86:	4a23      	ldr	r2, [pc, #140]	; (8008d14 <update_main_screen+0x94c>)
 8008c88:	69a0      	ldr	r0, [r4, #24]
 8008c8a:	2101      	movs	r1, #1
 8008c8c:	f00d fa40 	bl	8016110 <lv_bar_set_style>
			lv_bar_set_style(bar[7], LV_BAR_STYLE_BG, &style_indic_vd);	lv_bar_set_style(bar[7], LV_BAR_STYLE_INDIC, &style_indic_vd);
 8008c90:	4a20      	ldr	r2, [pc, #128]	; (8008d14 <update_main_screen+0x94c>)
 8008c92:	69e0      	ldr	r0, [r4, #28]
 8008c94:	2100      	movs	r1, #0
 8008c96:	f00d fa3b 	bl	8016110 <lv_bar_set_style>
 8008c9a:	4a1e      	ldr	r2, [pc, #120]	; (8008d14 <update_main_screen+0x94c>)
 8008c9c:	69e0      	ldr	r0, [r4, #28]
 8008c9e:	2101      	movs	r1, #1
 8008ca0:	f00d fa36 	bl	8016110 <lv_bar_set_style>
			lv_bar_set_style(bar[8], LV_BAR_STYLE_BG, &style_indic_vd);	lv_bar_set_style(bar[8], LV_BAR_STYLE_INDIC, &style_indic_vd);
 8008ca4:	4a1b      	ldr	r2, [pc, #108]	; (8008d14 <update_main_screen+0x94c>)
 8008ca6:	6a20      	ldr	r0, [r4, #32]
 8008ca8:	2100      	movs	r1, #0
 8008caa:	f00d fa31 	bl	8016110 <lv_bar_set_style>
 8008cae:	4a19      	ldr	r2, [pc, #100]	; (8008d14 <update_main_screen+0x94c>)
 8008cb0:	6a20      	ldr	r0, [r4, #32]
 8008cb2:	2101      	movs	r1, #1
 8008cb4:	f00d fa2c 	bl	8016110 <lv_bar_set_style>
			lv_bar_set_style(bar[9], LV_BAR_STYLE_BG, &style_indic_vd);	lv_bar_set_style(bar[9], LV_BAR_STYLE_INDIC, &style_indic_vd);
 8008cb8:	4a16      	ldr	r2, [pc, #88]	; (8008d14 <update_main_screen+0x94c>)
 8008cba:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8008cbc:	2100      	movs	r1, #0
 8008cbe:	f00d fa27 	bl	8016110 <lv_bar_set_style>
 8008cc2:	4a14      	ldr	r2, [pc, #80]	; (8008d14 <update_main_screen+0x94c>)
 8008cc4:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8008cc6:	2101      	movs	r1, #1
 8008cc8:	f00d fa22 	bl	8016110 <lv_bar_set_style>
			lv_bar_set_style(bar[10], LV_BAR_STYLE_BG, &style_indic_vd); lv_bar_set_style(bar[10], LV_BAR_STYLE_INDIC, &style_indic_vd);
 8008ccc:	4a11      	ldr	r2, [pc, #68]	; (8008d14 <update_main_screen+0x94c>)
 8008cce:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8008cd0:	2100      	movs	r1, #0
 8008cd2:	f00d fa1d 	bl	8016110 <lv_bar_set_style>
 8008cd6:	4a0f      	ldr	r2, [pc, #60]	; (8008d14 <update_main_screen+0x94c>)
 8008cd8:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8008cda:	2101      	movs	r1, #1
 8008cdc:	f00d fa18 	bl	8016110 <lv_bar_set_style>
			lv_bar_set_style(bar[11], LV_BAR_STYLE_BG, &style_indic_vd); lv_bar_set_style(bar[11], LV_BAR_STYLE_INDIC, &style_indic_vd);
 8008ce0:	4a0c      	ldr	r2, [pc, #48]	; (8008d14 <update_main_screen+0x94c>)
 8008ce2:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8008ce4:	2100      	movs	r1, #0
 8008ce6:	f00d fa13 	bl	8016110 <lv_bar_set_style>
 8008cea:	4a0a      	ldr	r2, [pc, #40]	; (8008d14 <update_main_screen+0x94c>)
 8008cec:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8008cee:	2101      	movs	r1, #1
 8008cf0:	f00d fa0e 	bl	8016110 <lv_bar_set_style>
			lv_bar_set_style(bar[12], LV_BAR_STYLE_BG, &style_indic_vd); lv_bar_set_style(bar[12], LV_BAR_STYLE_INDIC, &style_indic_vd);
 8008cf4:	4a07      	ldr	r2, [pc, #28]	; (8008d14 <update_main_screen+0x94c>)
 8008cf6:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8008cf8:	2100      	movs	r1, #0
 8008cfa:	f00d fa09 	bl	8016110 <lv_bar_set_style>
 8008cfe:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8008d00:	4a04      	ldr	r2, [pc, #16]	; (8008d14 <update_main_screen+0x94c>)
 8008d02:	2101      	movs	r1, #1
 8008d04:	f00d fa04 	bl	8016110 <lv_bar_set_style>
			bargraph_off(13);
 8008d08:	200d      	movs	r0, #13
 8008d0a:	f7ff bbed 	b.w	80084e8 <update_main_screen+0x120>
 8008d0e:	bf00      	nop
 8008d10:	20004e74 	.word	0x20004e74
 8008d14:	20004fc4 	.word	0x20004fc4
			lv_bar_set_style(bar[0], LV_BAR_STYLE_BG, &style_indic_vd);	lv_bar_set_style(bar[0], LV_BAR_STYLE_INDIC, &style_indic_vd);
 8008d18:	4c94      	ldr	r4, [pc, #592]	; (8008f6c <update_main_screen+0xba4>)
 8008d1a:	4a95      	ldr	r2, [pc, #596]	; (8008f70 <update_main_screen+0xba8>)
 8008d1c:	6820      	ldr	r0, [r4, #0]
 8008d1e:	2100      	movs	r1, #0
 8008d20:	f00d f9f6 	bl	8016110 <lv_bar_set_style>
 8008d24:	4a92      	ldr	r2, [pc, #584]	; (8008f70 <update_main_screen+0xba8>)
 8008d26:	6820      	ldr	r0, [r4, #0]
 8008d28:	2101      	movs	r1, #1
 8008d2a:	f00d f9f1 	bl	8016110 <lv_bar_set_style>
			lv_bar_set_style(bar[1], LV_BAR_STYLE_BG, &style_indic_vd);	lv_bar_set_style(bar[1], LV_BAR_STYLE_INDIC, &style_indic_vd);
 8008d2e:	4a90      	ldr	r2, [pc, #576]	; (8008f70 <update_main_screen+0xba8>)
 8008d30:	6860      	ldr	r0, [r4, #4]
 8008d32:	2100      	movs	r1, #0
 8008d34:	f00d f9ec 	bl	8016110 <lv_bar_set_style>
 8008d38:	4a8d      	ldr	r2, [pc, #564]	; (8008f70 <update_main_screen+0xba8>)
 8008d3a:	6860      	ldr	r0, [r4, #4]
 8008d3c:	2101      	movs	r1, #1
 8008d3e:	f00d f9e7 	bl	8016110 <lv_bar_set_style>
			lv_bar_set_style(bar[2], LV_BAR_STYLE_BG, &style_indic_vd);	lv_bar_set_style(bar[2], LV_BAR_STYLE_INDIC, &style_indic_vd);
 8008d42:	4a8b      	ldr	r2, [pc, #556]	; (8008f70 <update_main_screen+0xba8>)
 8008d44:	68a0      	ldr	r0, [r4, #8]
 8008d46:	2100      	movs	r1, #0
 8008d48:	f00d f9e2 	bl	8016110 <lv_bar_set_style>
 8008d4c:	4a88      	ldr	r2, [pc, #544]	; (8008f70 <update_main_screen+0xba8>)
 8008d4e:	68a0      	ldr	r0, [r4, #8]
 8008d50:	2101      	movs	r1, #1
 8008d52:	f00d f9dd 	bl	8016110 <lv_bar_set_style>
			lv_bar_set_style(bar[3], LV_BAR_STYLE_BG, &style_indic_vd);	lv_bar_set_style(bar[3], LV_BAR_STYLE_INDIC, &style_indic_vd);
 8008d56:	4a86      	ldr	r2, [pc, #536]	; (8008f70 <update_main_screen+0xba8>)
 8008d58:	68e0      	ldr	r0, [r4, #12]
 8008d5a:	2100      	movs	r1, #0
 8008d5c:	f00d f9d8 	bl	8016110 <lv_bar_set_style>
 8008d60:	4a83      	ldr	r2, [pc, #524]	; (8008f70 <update_main_screen+0xba8>)
 8008d62:	68e0      	ldr	r0, [r4, #12]
 8008d64:	2101      	movs	r1, #1
 8008d66:	f00d f9d3 	bl	8016110 <lv_bar_set_style>
			lv_bar_set_style(bar[4], LV_BAR_STYLE_BG, &style_indic_vd);	lv_bar_set_style(bar[4], LV_BAR_STYLE_INDIC, &style_indic_vd);
 8008d6a:	4a81      	ldr	r2, [pc, #516]	; (8008f70 <update_main_screen+0xba8>)
 8008d6c:	6920      	ldr	r0, [r4, #16]
 8008d6e:	2100      	movs	r1, #0
 8008d70:	f00d f9ce 	bl	8016110 <lv_bar_set_style>
 8008d74:	4a7e      	ldr	r2, [pc, #504]	; (8008f70 <update_main_screen+0xba8>)
 8008d76:	6920      	ldr	r0, [r4, #16]
 8008d78:	2101      	movs	r1, #1
 8008d7a:	f00d f9c9 	bl	8016110 <lv_bar_set_style>
			lv_bar_set_style(bar[5], LV_BAR_STYLE_BG, &style_indic_vd);	lv_bar_set_style(bar[5], LV_BAR_STYLE_INDIC, &style_indic_vd);
 8008d7e:	4a7c      	ldr	r2, [pc, #496]	; (8008f70 <update_main_screen+0xba8>)
 8008d80:	6960      	ldr	r0, [r4, #20]
 8008d82:	2100      	movs	r1, #0
 8008d84:	f00d f9c4 	bl	8016110 <lv_bar_set_style>
 8008d88:	4a79      	ldr	r2, [pc, #484]	; (8008f70 <update_main_screen+0xba8>)
 8008d8a:	6960      	ldr	r0, [r4, #20]
 8008d8c:	2101      	movs	r1, #1
 8008d8e:	f00d f9bf 	bl	8016110 <lv_bar_set_style>
			lv_bar_set_style(bar[6], LV_BAR_STYLE_BG, &style_indic_vd);	lv_bar_set_style(bar[6], LV_BAR_STYLE_INDIC, &style_indic_vd);
 8008d92:	4a77      	ldr	r2, [pc, #476]	; (8008f70 <update_main_screen+0xba8>)
 8008d94:	69a0      	ldr	r0, [r4, #24]
 8008d96:	2100      	movs	r1, #0
 8008d98:	f00d f9ba 	bl	8016110 <lv_bar_set_style>
 8008d9c:	4a74      	ldr	r2, [pc, #464]	; (8008f70 <update_main_screen+0xba8>)
 8008d9e:	69a0      	ldr	r0, [r4, #24]
 8008da0:	2101      	movs	r1, #1
 8008da2:	f00d f9b5 	bl	8016110 <lv_bar_set_style>
			lv_bar_set_style(bar[7], LV_BAR_STYLE_BG, &style_indic_vd);	lv_bar_set_style(bar[7], LV_BAR_STYLE_INDIC, &style_indic_vd);
 8008da6:	4a72      	ldr	r2, [pc, #456]	; (8008f70 <update_main_screen+0xba8>)
 8008da8:	69e0      	ldr	r0, [r4, #28]
 8008daa:	2100      	movs	r1, #0
 8008dac:	f00d f9b0 	bl	8016110 <lv_bar_set_style>
 8008db0:	4a6f      	ldr	r2, [pc, #444]	; (8008f70 <update_main_screen+0xba8>)
 8008db2:	69e0      	ldr	r0, [r4, #28]
 8008db4:	2101      	movs	r1, #1
 8008db6:	f00d f9ab 	bl	8016110 <lv_bar_set_style>
			lv_bar_set_style(bar[8], LV_BAR_STYLE_BG, &style_indic_vd);	lv_bar_set_style(bar[8], LV_BAR_STYLE_INDIC, &style_indic_vd);
 8008dba:	4a6d      	ldr	r2, [pc, #436]	; (8008f70 <update_main_screen+0xba8>)
 8008dbc:	6a20      	ldr	r0, [r4, #32]
 8008dbe:	2100      	movs	r1, #0
 8008dc0:	f00d f9a6 	bl	8016110 <lv_bar_set_style>
 8008dc4:	4a6a      	ldr	r2, [pc, #424]	; (8008f70 <update_main_screen+0xba8>)
 8008dc6:	6a20      	ldr	r0, [r4, #32]
 8008dc8:	2101      	movs	r1, #1
 8008dca:	f00d f9a1 	bl	8016110 <lv_bar_set_style>
			lv_bar_set_style(bar[9], LV_BAR_STYLE_BG, &style_indic_vd);	lv_bar_set_style(bar[9], LV_BAR_STYLE_INDIC, &style_indic_vd);
 8008dce:	4a68      	ldr	r2, [pc, #416]	; (8008f70 <update_main_screen+0xba8>)
 8008dd0:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8008dd2:	2100      	movs	r1, #0
 8008dd4:	f00d f99c 	bl	8016110 <lv_bar_set_style>
 8008dd8:	4a65      	ldr	r2, [pc, #404]	; (8008f70 <update_main_screen+0xba8>)
 8008dda:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8008ddc:	2101      	movs	r1, #1
 8008dde:	f00d f997 	bl	8016110 <lv_bar_set_style>
			lv_bar_set_style(bar[10], LV_BAR_STYLE_BG, &style_indic_vd); lv_bar_set_style(bar[10], LV_BAR_STYLE_INDIC, &style_indic_vd);
 8008de2:	4a63      	ldr	r2, [pc, #396]	; (8008f70 <update_main_screen+0xba8>)
 8008de4:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8008de6:	2100      	movs	r1, #0
 8008de8:	f00d f992 	bl	8016110 <lv_bar_set_style>
 8008dec:	4a60      	ldr	r2, [pc, #384]	; (8008f70 <update_main_screen+0xba8>)
 8008dee:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8008df0:	2101      	movs	r1, #1
 8008df2:	f00d f98d 	bl	8016110 <lv_bar_set_style>
			lv_bar_set_style(bar[11], LV_BAR_STYLE_BG, &style_indic_vd); lv_bar_set_style(bar[11], LV_BAR_STYLE_INDIC, &style_indic_vd);
 8008df6:	4a5e      	ldr	r2, [pc, #376]	; (8008f70 <update_main_screen+0xba8>)
 8008df8:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8008dfa:	2100      	movs	r1, #0
 8008dfc:	f00d f988 	bl	8016110 <lv_bar_set_style>
 8008e00:	4a5b      	ldr	r2, [pc, #364]	; (8008f70 <update_main_screen+0xba8>)
 8008e02:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8008e04:	2101      	movs	r1, #1
 8008e06:	f00d f983 	bl	8016110 <lv_bar_set_style>
			lv_bar_set_style(bar[12], LV_BAR_STYLE_BG, &style_indic_vd); lv_bar_set_style(bar[12], LV_BAR_STYLE_INDIC, &style_indic_vd);
 8008e0a:	4a59      	ldr	r2, [pc, #356]	; (8008f70 <update_main_screen+0xba8>)
 8008e0c:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8008e0e:	2100      	movs	r1, #0
 8008e10:	f00d f97e 	bl	8016110 <lv_bar_set_style>
 8008e14:	4a56      	ldr	r2, [pc, #344]	; (8008f70 <update_main_screen+0xba8>)
 8008e16:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8008e18:	2101      	movs	r1, #1
 8008e1a:	f00d f979 	bl	8016110 <lv_bar_set_style>
			lv_bar_set_style(bar[13], LV_BAR_STYLE_BG, &style_indic_cy); lv_bar_set_style(bar[13], LV_BAR_STYLE_INDIC, &style_indic_cy);
 8008e1e:	4a55      	ldr	r2, [pc, #340]	; (8008f74 <update_main_screen+0xbac>)
 8008e20:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8008e22:	2100      	movs	r1, #0
 8008e24:	f00d f974 	bl	8016110 <lv_bar_set_style>
 8008e28:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8008e2a:	4a52      	ldr	r2, [pc, #328]	; (8008f74 <update_main_screen+0xbac>)
 8008e2c:	2101      	movs	r1, #1
 8008e2e:	f00d f96f 	bl	8016110 <lv_bar_set_style>
			bargraph_off(14);
 8008e32:	200e      	movs	r0, #14
 8008e34:	f7ff bb58 	b.w	80084e8 <update_main_screen+0x120>
			lv_bar_set_style(bar[0], LV_BAR_STYLE_BG, &style_indic_vd);	lv_bar_set_style(bar[0], LV_BAR_STYLE_INDIC, &style_indic_vd);
 8008e38:	4c4c      	ldr	r4, [pc, #304]	; (8008f6c <update_main_screen+0xba4>)
 8008e3a:	4a4d      	ldr	r2, [pc, #308]	; (8008f70 <update_main_screen+0xba8>)
 8008e3c:	6820      	ldr	r0, [r4, #0]
 8008e3e:	2100      	movs	r1, #0
 8008e40:	f00d f966 	bl	8016110 <lv_bar_set_style>
 8008e44:	4a4a      	ldr	r2, [pc, #296]	; (8008f70 <update_main_screen+0xba8>)
 8008e46:	6820      	ldr	r0, [r4, #0]
 8008e48:	2101      	movs	r1, #1
 8008e4a:	f00d f961 	bl	8016110 <lv_bar_set_style>
			lv_bar_set_style(bar[1], LV_BAR_STYLE_BG, &style_indic_vd);	lv_bar_set_style(bar[1], LV_BAR_STYLE_INDIC, &style_indic_vd);
 8008e4e:	4a48      	ldr	r2, [pc, #288]	; (8008f70 <update_main_screen+0xba8>)
 8008e50:	6860      	ldr	r0, [r4, #4]
 8008e52:	2100      	movs	r1, #0
 8008e54:	f00d f95c 	bl	8016110 <lv_bar_set_style>
 8008e58:	4a45      	ldr	r2, [pc, #276]	; (8008f70 <update_main_screen+0xba8>)
 8008e5a:	6860      	ldr	r0, [r4, #4]
 8008e5c:	2101      	movs	r1, #1
 8008e5e:	f00d f957 	bl	8016110 <lv_bar_set_style>
			lv_bar_set_style(bar[2], LV_BAR_STYLE_BG, &style_indic_vd);	lv_bar_set_style(bar[2], LV_BAR_STYLE_INDIC, &style_indic_vd);
 8008e62:	4a43      	ldr	r2, [pc, #268]	; (8008f70 <update_main_screen+0xba8>)
 8008e64:	68a0      	ldr	r0, [r4, #8]
 8008e66:	2100      	movs	r1, #0
 8008e68:	f00d f952 	bl	8016110 <lv_bar_set_style>
 8008e6c:	4a40      	ldr	r2, [pc, #256]	; (8008f70 <update_main_screen+0xba8>)
 8008e6e:	68a0      	ldr	r0, [r4, #8]
 8008e70:	2101      	movs	r1, #1
 8008e72:	f00d f94d 	bl	8016110 <lv_bar_set_style>
			lv_bar_set_style(bar[3], LV_BAR_STYLE_BG, &style_indic_vd);	lv_bar_set_style(bar[3], LV_BAR_STYLE_INDIC, &style_indic_vd);
 8008e76:	4a3e      	ldr	r2, [pc, #248]	; (8008f70 <update_main_screen+0xba8>)
 8008e78:	68e0      	ldr	r0, [r4, #12]
 8008e7a:	2100      	movs	r1, #0
 8008e7c:	f00d f948 	bl	8016110 <lv_bar_set_style>
 8008e80:	4a3b      	ldr	r2, [pc, #236]	; (8008f70 <update_main_screen+0xba8>)
 8008e82:	68e0      	ldr	r0, [r4, #12]
 8008e84:	2101      	movs	r1, #1
 8008e86:	f00d f943 	bl	8016110 <lv_bar_set_style>
			lv_bar_set_style(bar[4], LV_BAR_STYLE_BG, &style_indic_vd);	lv_bar_set_style(bar[4], LV_BAR_STYLE_INDIC, &style_indic_vd);
 8008e8a:	4a39      	ldr	r2, [pc, #228]	; (8008f70 <update_main_screen+0xba8>)
 8008e8c:	6920      	ldr	r0, [r4, #16]
 8008e8e:	2100      	movs	r1, #0
 8008e90:	f00d f93e 	bl	8016110 <lv_bar_set_style>
 8008e94:	4a36      	ldr	r2, [pc, #216]	; (8008f70 <update_main_screen+0xba8>)
 8008e96:	6920      	ldr	r0, [r4, #16]
 8008e98:	2101      	movs	r1, #1
 8008e9a:	f00d f939 	bl	8016110 <lv_bar_set_style>
			lv_bar_set_style(bar[5], LV_BAR_STYLE_BG, &style_indic_vd);	lv_bar_set_style(bar[5], LV_BAR_STYLE_INDIC, &style_indic_vd);
 8008e9e:	4a34      	ldr	r2, [pc, #208]	; (8008f70 <update_main_screen+0xba8>)
 8008ea0:	6960      	ldr	r0, [r4, #20]
 8008ea2:	2100      	movs	r1, #0
 8008ea4:	f00d f934 	bl	8016110 <lv_bar_set_style>
 8008ea8:	4a31      	ldr	r2, [pc, #196]	; (8008f70 <update_main_screen+0xba8>)
 8008eaa:	6960      	ldr	r0, [r4, #20]
 8008eac:	2101      	movs	r1, #1
 8008eae:	f00d f92f 	bl	8016110 <lv_bar_set_style>
			lv_bar_set_style(bar[6], LV_BAR_STYLE_BG, &style_indic_vd);	lv_bar_set_style(bar[6], LV_BAR_STYLE_INDIC, &style_indic_vd);
 8008eb2:	4a2f      	ldr	r2, [pc, #188]	; (8008f70 <update_main_screen+0xba8>)
 8008eb4:	69a0      	ldr	r0, [r4, #24]
 8008eb6:	2100      	movs	r1, #0
 8008eb8:	f00d f92a 	bl	8016110 <lv_bar_set_style>
 8008ebc:	4a2c      	ldr	r2, [pc, #176]	; (8008f70 <update_main_screen+0xba8>)
 8008ebe:	69a0      	ldr	r0, [r4, #24]
 8008ec0:	2101      	movs	r1, #1
 8008ec2:	f00d f925 	bl	8016110 <lv_bar_set_style>
			lv_bar_set_style(bar[7], LV_BAR_STYLE_BG, &style_indic_vd);	lv_bar_set_style(bar[7], LV_BAR_STYLE_INDIC, &style_indic_vd);
 8008ec6:	4a2a      	ldr	r2, [pc, #168]	; (8008f70 <update_main_screen+0xba8>)
 8008ec8:	69e0      	ldr	r0, [r4, #28]
 8008eca:	2100      	movs	r1, #0
 8008ecc:	f00d f920 	bl	8016110 <lv_bar_set_style>
 8008ed0:	4a27      	ldr	r2, [pc, #156]	; (8008f70 <update_main_screen+0xba8>)
 8008ed2:	69e0      	ldr	r0, [r4, #28]
 8008ed4:	2101      	movs	r1, #1
 8008ed6:	f00d f91b 	bl	8016110 <lv_bar_set_style>
			lv_bar_set_style(bar[8], LV_BAR_STYLE_BG, &style_indic_vd);	lv_bar_set_style(bar[8], LV_BAR_STYLE_INDIC, &style_indic_vd);
 8008eda:	4a25      	ldr	r2, [pc, #148]	; (8008f70 <update_main_screen+0xba8>)
 8008edc:	6a20      	ldr	r0, [r4, #32]
 8008ede:	2100      	movs	r1, #0
 8008ee0:	f00d f916 	bl	8016110 <lv_bar_set_style>
 8008ee4:	4a22      	ldr	r2, [pc, #136]	; (8008f70 <update_main_screen+0xba8>)
 8008ee6:	6a20      	ldr	r0, [r4, #32]
 8008ee8:	2101      	movs	r1, #1
 8008eea:	f00d f911 	bl	8016110 <lv_bar_set_style>
			lv_bar_set_style(bar[9], LV_BAR_STYLE_BG, &style_indic_vd);	lv_bar_set_style(bar[9], LV_BAR_STYLE_INDIC, &style_indic_vd);
 8008eee:	4a20      	ldr	r2, [pc, #128]	; (8008f70 <update_main_screen+0xba8>)
 8008ef0:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8008ef2:	2100      	movs	r1, #0
 8008ef4:	f00d f90c 	bl	8016110 <lv_bar_set_style>
 8008ef8:	4a1d      	ldr	r2, [pc, #116]	; (8008f70 <update_main_screen+0xba8>)
 8008efa:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8008efc:	2101      	movs	r1, #1
 8008efe:	f00d f907 	bl	8016110 <lv_bar_set_style>
			lv_bar_set_style(bar[10], LV_BAR_STYLE_BG, &style_indic_vd); lv_bar_set_style(bar[10], LV_BAR_STYLE_INDIC, &style_indic_vd);
 8008f02:	4a1b      	ldr	r2, [pc, #108]	; (8008f70 <update_main_screen+0xba8>)
 8008f04:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8008f06:	2100      	movs	r1, #0
 8008f08:	f00d f902 	bl	8016110 <lv_bar_set_style>
 8008f0c:	4a18      	ldr	r2, [pc, #96]	; (8008f70 <update_main_screen+0xba8>)
 8008f0e:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8008f10:	2101      	movs	r1, #1
 8008f12:	f00d f8fd 	bl	8016110 <lv_bar_set_style>
			lv_bar_set_style(bar[11], LV_BAR_STYLE_BG, &style_indic_vd); lv_bar_set_style(bar[11], LV_BAR_STYLE_INDIC, &style_indic_vd);
 8008f16:	4a16      	ldr	r2, [pc, #88]	; (8008f70 <update_main_screen+0xba8>)
 8008f18:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8008f1a:	2100      	movs	r1, #0
 8008f1c:	f00d f8f8 	bl	8016110 <lv_bar_set_style>
 8008f20:	4a13      	ldr	r2, [pc, #76]	; (8008f70 <update_main_screen+0xba8>)
 8008f22:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8008f24:	2101      	movs	r1, #1
 8008f26:	f00d f8f3 	bl	8016110 <lv_bar_set_style>
			lv_bar_set_style(bar[12], LV_BAR_STYLE_BG, &style_indic_vd); lv_bar_set_style(bar[12], LV_BAR_STYLE_INDIC, &style_indic_vd);
 8008f2a:	4a11      	ldr	r2, [pc, #68]	; (8008f70 <update_main_screen+0xba8>)
 8008f2c:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8008f2e:	2100      	movs	r1, #0
 8008f30:	f00d f8ee 	bl	8016110 <lv_bar_set_style>
 8008f34:	4a0e      	ldr	r2, [pc, #56]	; (8008f70 <update_main_screen+0xba8>)
 8008f36:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8008f38:	2101      	movs	r1, #1
 8008f3a:	f00d f8e9 	bl	8016110 <lv_bar_set_style>
			lv_bar_set_style(bar[13], LV_BAR_STYLE_BG, &style_indic_cy); lv_bar_set_style(bar[13], LV_BAR_STYLE_INDIC, &style_indic_cy);
 8008f3e:	4a0d      	ldr	r2, [pc, #52]	; (8008f74 <update_main_screen+0xbac>)
 8008f40:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8008f42:	2100      	movs	r1, #0
 8008f44:	f00d f8e4 	bl	8016110 <lv_bar_set_style>
 8008f48:	4a0a      	ldr	r2, [pc, #40]	; (8008f74 <update_main_screen+0xbac>)
 8008f4a:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8008f4c:	2101      	movs	r1, #1
 8008f4e:	f00d f8df 	bl	8016110 <lv_bar_set_style>
			lv_bar_set_style(bar[14], LV_BAR_STYLE_BG, &style_indic_am); lv_bar_set_style(bar[14], LV_BAR_STYLE_INDIC, &style_indic_am);
 8008f52:	4a09      	ldr	r2, [pc, #36]	; (8008f78 <update_main_screen+0xbb0>)
 8008f54:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8008f56:	2100      	movs	r1, #0
 8008f58:	f00d f8da 	bl	8016110 <lv_bar_set_style>
 8008f5c:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8008f5e:	4a06      	ldr	r2, [pc, #24]	; (8008f78 <update_main_screen+0xbb0>)
 8008f60:	2101      	movs	r1, #1
 8008f62:	f00d f8d5 	bl	8016110 <lv_bar_set_style>
			bargraph_off(15);
 8008f66:	200f      	movs	r0, #15
 8008f68:	f7ff babe 	b.w	80084e8 <update_main_screen+0x120>
 8008f6c:	20004e74 	.word	0x20004e74
 8008f70:	20004fc4 	.word	0x20004fc4
 8008f74:	20004f4c 	.word	0x20004f4c
 8008f78:	20004f10 	.word	0x20004f10
			lv_bar_set_style(bar[0], LV_BAR_STYLE_BG, &style_indic_vd);	lv_bar_set_style(bar[0], LV_BAR_STYLE_INDIC, &style_indic_vd);
 8008f7c:	4ca8      	ldr	r4, [pc, #672]	; (8009220 <update_main_screen+0xe58>)
 8008f7e:	4aa9      	ldr	r2, [pc, #676]	; (8009224 <update_main_screen+0xe5c>)
 8008f80:	6820      	ldr	r0, [r4, #0]
 8008f82:	2100      	movs	r1, #0
 8008f84:	f00d f8c4 	bl	8016110 <lv_bar_set_style>
 8008f88:	4aa6      	ldr	r2, [pc, #664]	; (8009224 <update_main_screen+0xe5c>)
 8008f8a:	6820      	ldr	r0, [r4, #0]
 8008f8c:	2101      	movs	r1, #1
 8008f8e:	f00d f8bf 	bl	8016110 <lv_bar_set_style>
			lv_bar_set_style(bar[1], LV_BAR_STYLE_BG, &style_indic_vd);	lv_bar_set_style(bar[1], LV_BAR_STYLE_INDIC, &style_indic_vd);
 8008f92:	4aa4      	ldr	r2, [pc, #656]	; (8009224 <update_main_screen+0xe5c>)
 8008f94:	6860      	ldr	r0, [r4, #4]
 8008f96:	2100      	movs	r1, #0
 8008f98:	f00d f8ba 	bl	8016110 <lv_bar_set_style>
 8008f9c:	4aa1      	ldr	r2, [pc, #644]	; (8009224 <update_main_screen+0xe5c>)
 8008f9e:	6860      	ldr	r0, [r4, #4]
 8008fa0:	2101      	movs	r1, #1
 8008fa2:	f00d f8b5 	bl	8016110 <lv_bar_set_style>
			lv_bar_set_style(bar[2], LV_BAR_STYLE_BG, &style_indic_vd);	lv_bar_set_style(bar[2], LV_BAR_STYLE_INDIC, &style_indic_vd);
 8008fa6:	4a9f      	ldr	r2, [pc, #636]	; (8009224 <update_main_screen+0xe5c>)
 8008fa8:	68a0      	ldr	r0, [r4, #8]
 8008faa:	2100      	movs	r1, #0
 8008fac:	f00d f8b0 	bl	8016110 <lv_bar_set_style>
 8008fb0:	4a9c      	ldr	r2, [pc, #624]	; (8009224 <update_main_screen+0xe5c>)
 8008fb2:	68a0      	ldr	r0, [r4, #8]
 8008fb4:	2101      	movs	r1, #1
 8008fb6:	f00d f8ab 	bl	8016110 <lv_bar_set_style>
			lv_bar_set_style(bar[3], LV_BAR_STYLE_BG, &style_indic_vd);	lv_bar_set_style(bar[3], LV_BAR_STYLE_INDIC, &style_indic_vd);
 8008fba:	4a9a      	ldr	r2, [pc, #616]	; (8009224 <update_main_screen+0xe5c>)
 8008fbc:	68e0      	ldr	r0, [r4, #12]
 8008fbe:	2100      	movs	r1, #0
 8008fc0:	f00d f8a6 	bl	8016110 <lv_bar_set_style>
 8008fc4:	4a97      	ldr	r2, [pc, #604]	; (8009224 <update_main_screen+0xe5c>)
 8008fc6:	68e0      	ldr	r0, [r4, #12]
 8008fc8:	2101      	movs	r1, #1
 8008fca:	f00d f8a1 	bl	8016110 <lv_bar_set_style>
			lv_bar_set_style(bar[4], LV_BAR_STYLE_BG, &style_indic_vd);	lv_bar_set_style(bar[4], LV_BAR_STYLE_INDIC, &style_indic_vd);
 8008fce:	4a95      	ldr	r2, [pc, #596]	; (8009224 <update_main_screen+0xe5c>)
 8008fd0:	6920      	ldr	r0, [r4, #16]
 8008fd2:	2100      	movs	r1, #0
 8008fd4:	f00d f89c 	bl	8016110 <lv_bar_set_style>
 8008fd8:	4a92      	ldr	r2, [pc, #584]	; (8009224 <update_main_screen+0xe5c>)
 8008fda:	6920      	ldr	r0, [r4, #16]
 8008fdc:	2101      	movs	r1, #1
 8008fde:	f00d f897 	bl	8016110 <lv_bar_set_style>
			lv_bar_set_style(bar[5], LV_BAR_STYLE_BG, &style_indic_vd);	lv_bar_set_style(bar[5], LV_BAR_STYLE_INDIC, &style_indic_vd);
 8008fe2:	4a90      	ldr	r2, [pc, #576]	; (8009224 <update_main_screen+0xe5c>)
 8008fe4:	6960      	ldr	r0, [r4, #20]
 8008fe6:	2100      	movs	r1, #0
 8008fe8:	f00d f892 	bl	8016110 <lv_bar_set_style>
 8008fec:	4a8d      	ldr	r2, [pc, #564]	; (8009224 <update_main_screen+0xe5c>)
 8008fee:	6960      	ldr	r0, [r4, #20]
 8008ff0:	2101      	movs	r1, #1
 8008ff2:	f00d f88d 	bl	8016110 <lv_bar_set_style>
			lv_bar_set_style(bar[6], LV_BAR_STYLE_BG, &style_indic_vd);	lv_bar_set_style(bar[6], LV_BAR_STYLE_INDIC, &style_indic_vd);
 8008ff6:	4a8b      	ldr	r2, [pc, #556]	; (8009224 <update_main_screen+0xe5c>)
 8008ff8:	69a0      	ldr	r0, [r4, #24]
 8008ffa:	2100      	movs	r1, #0
 8008ffc:	f00d f888 	bl	8016110 <lv_bar_set_style>
 8009000:	4a88      	ldr	r2, [pc, #544]	; (8009224 <update_main_screen+0xe5c>)
 8009002:	69a0      	ldr	r0, [r4, #24]
 8009004:	2101      	movs	r1, #1
 8009006:	f00d f883 	bl	8016110 <lv_bar_set_style>
			lv_bar_set_style(bar[7], LV_BAR_STYLE_BG, &style_indic_vd);	lv_bar_set_style(bar[7], LV_BAR_STYLE_INDIC, &style_indic_vd);
 800900a:	4a86      	ldr	r2, [pc, #536]	; (8009224 <update_main_screen+0xe5c>)
 800900c:	69e0      	ldr	r0, [r4, #28]
 800900e:	2100      	movs	r1, #0
 8009010:	f00d f87e 	bl	8016110 <lv_bar_set_style>
 8009014:	4a83      	ldr	r2, [pc, #524]	; (8009224 <update_main_screen+0xe5c>)
 8009016:	69e0      	ldr	r0, [r4, #28]
 8009018:	2101      	movs	r1, #1
 800901a:	f00d f879 	bl	8016110 <lv_bar_set_style>
			lv_bar_set_style(bar[8], LV_BAR_STYLE_BG, &style_indic_vd);	lv_bar_set_style(bar[8], LV_BAR_STYLE_INDIC, &style_indic_vd);
 800901e:	4a81      	ldr	r2, [pc, #516]	; (8009224 <update_main_screen+0xe5c>)
 8009020:	6a20      	ldr	r0, [r4, #32]
 8009022:	2100      	movs	r1, #0
 8009024:	f00d f874 	bl	8016110 <lv_bar_set_style>
 8009028:	4a7e      	ldr	r2, [pc, #504]	; (8009224 <update_main_screen+0xe5c>)
 800902a:	6a20      	ldr	r0, [r4, #32]
 800902c:	2101      	movs	r1, #1
 800902e:	f00d f86f 	bl	8016110 <lv_bar_set_style>
			lv_bar_set_style(bar[9], LV_BAR_STYLE_BG, &style_indic_vd);	lv_bar_set_style(bar[9], LV_BAR_STYLE_INDIC, &style_indic_vd);
 8009032:	4a7c      	ldr	r2, [pc, #496]	; (8009224 <update_main_screen+0xe5c>)
 8009034:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8009036:	2100      	movs	r1, #0
 8009038:	f00d f86a 	bl	8016110 <lv_bar_set_style>
 800903c:	4a79      	ldr	r2, [pc, #484]	; (8009224 <update_main_screen+0xe5c>)
 800903e:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8009040:	2101      	movs	r1, #1
 8009042:	f00d f865 	bl	8016110 <lv_bar_set_style>
			lv_bar_set_style(bar[10], LV_BAR_STYLE_BG, &style_indic_vd); lv_bar_set_style(bar[10], LV_BAR_STYLE_INDIC, &style_indic_vd);
 8009046:	4a77      	ldr	r2, [pc, #476]	; (8009224 <update_main_screen+0xe5c>)
 8009048:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 800904a:	2100      	movs	r1, #0
 800904c:	f00d f860 	bl	8016110 <lv_bar_set_style>
 8009050:	4a74      	ldr	r2, [pc, #464]	; (8009224 <update_main_screen+0xe5c>)
 8009052:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8009054:	2101      	movs	r1, #1
 8009056:	f00d f85b 	bl	8016110 <lv_bar_set_style>
			lv_bar_set_style(bar[11], LV_BAR_STYLE_BG, &style_indic_vd); lv_bar_set_style(bar[11], LV_BAR_STYLE_INDIC, &style_indic_vd);
 800905a:	4a72      	ldr	r2, [pc, #456]	; (8009224 <update_main_screen+0xe5c>)
 800905c:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 800905e:	2100      	movs	r1, #0
 8009060:	f00d f856 	bl	8016110 <lv_bar_set_style>
 8009064:	4a6f      	ldr	r2, [pc, #444]	; (8009224 <update_main_screen+0xe5c>)
 8009066:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8009068:	2101      	movs	r1, #1
 800906a:	f00d f851 	bl	8016110 <lv_bar_set_style>
			lv_bar_set_style(bar[12], LV_BAR_STYLE_BG, &style_indic_vd); lv_bar_set_style(bar[12], LV_BAR_STYLE_INDIC, &style_indic_vd);
 800906e:	4a6d      	ldr	r2, [pc, #436]	; (8009224 <update_main_screen+0xe5c>)
 8009070:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8009072:	2100      	movs	r1, #0
 8009074:	f00d f84c 	bl	8016110 <lv_bar_set_style>
 8009078:	4a6a      	ldr	r2, [pc, #424]	; (8009224 <update_main_screen+0xe5c>)
 800907a:	6b20      	ldr	r0, [r4, #48]	; 0x30
 800907c:	2101      	movs	r1, #1
 800907e:	f00d f847 	bl	8016110 <lv_bar_set_style>
			lv_bar_set_style(bar[13], LV_BAR_STYLE_BG, &style_indic_cy); lv_bar_set_style(bar[13], LV_BAR_STYLE_INDIC, &style_indic_cy);
 8009082:	4a69      	ldr	r2, [pc, #420]	; (8009228 <update_main_screen+0xe60>)
 8009084:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8009086:	2100      	movs	r1, #0
 8009088:	f00d f842 	bl	8016110 <lv_bar_set_style>
 800908c:	4a66      	ldr	r2, [pc, #408]	; (8009228 <update_main_screen+0xe60>)
 800908e:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8009090:	2101      	movs	r1, #1
 8009092:	f00d f83d 	bl	8016110 <lv_bar_set_style>
			lv_bar_set_style(bar[14], LV_BAR_STYLE_BG, &style_indic_am); lv_bar_set_style(bar[14], LV_BAR_STYLE_INDIC, &style_indic_am);
 8009096:	4a65      	ldr	r2, [pc, #404]	; (800922c <update_main_screen+0xe64>)
 8009098:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 800909a:	2100      	movs	r1, #0
 800909c:	f00d f838 	bl	8016110 <lv_bar_set_style>
 80090a0:	4a62      	ldr	r2, [pc, #392]	; (800922c <update_main_screen+0xe64>)
 80090a2:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 80090a4:	2101      	movs	r1, #1
 80090a6:	f00d f833 	bl	8016110 <lv_bar_set_style>
			lv_bar_set_style(bar[15], LV_BAR_STYLE_BG, &style_indic_am); lv_bar_set_style(bar[15], LV_BAR_STYLE_INDIC, &style_indic_am);
 80090aa:	4a60      	ldr	r2, [pc, #384]	; (800922c <update_main_screen+0xe64>)
 80090ac:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 80090ae:	2100      	movs	r1, #0
 80090b0:	f00d f82e 	bl	8016110 <lv_bar_set_style>
 80090b4:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 80090b6:	4a5d      	ldr	r2, [pc, #372]	; (800922c <update_main_screen+0xe64>)
 80090b8:	2101      	movs	r1, #1
 80090ba:	f00d f829 	bl	8016110 <lv_bar_set_style>
			bargraph_off(16);
 80090be:	2010      	movs	r0, #16
 80090c0:	f7ff ba12 	b.w	80084e8 <update_main_screen+0x120>
			lv_bar_set_style(bar[0], LV_BAR_STYLE_BG, &style_indic_vd);	lv_bar_set_style(bar[0], LV_BAR_STYLE_INDIC, &style_indic_vd);
 80090c4:	4c56      	ldr	r4, [pc, #344]	; (8009220 <update_main_screen+0xe58>)
 80090c6:	4a57      	ldr	r2, [pc, #348]	; (8009224 <update_main_screen+0xe5c>)
 80090c8:	6820      	ldr	r0, [r4, #0]
 80090ca:	2100      	movs	r1, #0
 80090cc:	f00d f820 	bl	8016110 <lv_bar_set_style>
 80090d0:	4a54      	ldr	r2, [pc, #336]	; (8009224 <update_main_screen+0xe5c>)
 80090d2:	6820      	ldr	r0, [r4, #0]
 80090d4:	2101      	movs	r1, #1
 80090d6:	f00d f81b 	bl	8016110 <lv_bar_set_style>
			lv_bar_set_style(bar[1], LV_BAR_STYLE_BG, &style_indic_vd);	lv_bar_set_style(bar[1], LV_BAR_STYLE_INDIC, &style_indic_vd);
 80090da:	4a52      	ldr	r2, [pc, #328]	; (8009224 <update_main_screen+0xe5c>)
 80090dc:	6860      	ldr	r0, [r4, #4]
 80090de:	2100      	movs	r1, #0
 80090e0:	f00d f816 	bl	8016110 <lv_bar_set_style>
 80090e4:	4a4f      	ldr	r2, [pc, #316]	; (8009224 <update_main_screen+0xe5c>)
 80090e6:	6860      	ldr	r0, [r4, #4]
 80090e8:	2101      	movs	r1, #1
 80090ea:	f00d f811 	bl	8016110 <lv_bar_set_style>
			lv_bar_set_style(bar[2], LV_BAR_STYLE_BG, &style_indic_vd);	lv_bar_set_style(bar[2], LV_BAR_STYLE_INDIC, &style_indic_vd);
 80090ee:	4a4d      	ldr	r2, [pc, #308]	; (8009224 <update_main_screen+0xe5c>)
 80090f0:	68a0      	ldr	r0, [r4, #8]
 80090f2:	2100      	movs	r1, #0
 80090f4:	f00d f80c 	bl	8016110 <lv_bar_set_style>
 80090f8:	4a4a      	ldr	r2, [pc, #296]	; (8009224 <update_main_screen+0xe5c>)
 80090fa:	68a0      	ldr	r0, [r4, #8]
 80090fc:	2101      	movs	r1, #1
 80090fe:	f00d f807 	bl	8016110 <lv_bar_set_style>
			lv_bar_set_style(bar[3], LV_BAR_STYLE_BG, &style_indic_vd);	lv_bar_set_style(bar[3], LV_BAR_STYLE_INDIC, &style_indic_vd);
 8009102:	4a48      	ldr	r2, [pc, #288]	; (8009224 <update_main_screen+0xe5c>)
 8009104:	68e0      	ldr	r0, [r4, #12]
 8009106:	2100      	movs	r1, #0
 8009108:	f00d f802 	bl	8016110 <lv_bar_set_style>
 800910c:	4a45      	ldr	r2, [pc, #276]	; (8009224 <update_main_screen+0xe5c>)
 800910e:	68e0      	ldr	r0, [r4, #12]
 8009110:	2101      	movs	r1, #1
 8009112:	f00c fffd 	bl	8016110 <lv_bar_set_style>
			lv_bar_set_style(bar[4], LV_BAR_STYLE_BG, &style_indic_vd);	lv_bar_set_style(bar[4], LV_BAR_STYLE_INDIC, &style_indic_vd);
 8009116:	4a43      	ldr	r2, [pc, #268]	; (8009224 <update_main_screen+0xe5c>)
 8009118:	6920      	ldr	r0, [r4, #16]
 800911a:	2100      	movs	r1, #0
 800911c:	f00c fff8 	bl	8016110 <lv_bar_set_style>
 8009120:	4a40      	ldr	r2, [pc, #256]	; (8009224 <update_main_screen+0xe5c>)
 8009122:	6920      	ldr	r0, [r4, #16]
 8009124:	2101      	movs	r1, #1
 8009126:	f00c fff3 	bl	8016110 <lv_bar_set_style>
			lv_bar_set_style(bar[5], LV_BAR_STYLE_BG, &style_indic_vd);	lv_bar_set_style(bar[5], LV_BAR_STYLE_INDIC, &style_indic_vd);
 800912a:	4a3e      	ldr	r2, [pc, #248]	; (8009224 <update_main_screen+0xe5c>)
 800912c:	6960      	ldr	r0, [r4, #20]
 800912e:	2100      	movs	r1, #0
 8009130:	f00c ffee 	bl	8016110 <lv_bar_set_style>
 8009134:	4a3b      	ldr	r2, [pc, #236]	; (8009224 <update_main_screen+0xe5c>)
 8009136:	6960      	ldr	r0, [r4, #20]
 8009138:	2101      	movs	r1, #1
 800913a:	f00c ffe9 	bl	8016110 <lv_bar_set_style>
			lv_bar_set_style(bar[6], LV_BAR_STYLE_BG, &style_indic_vd);	lv_bar_set_style(bar[6], LV_BAR_STYLE_INDIC, &style_indic_vd);
 800913e:	4a39      	ldr	r2, [pc, #228]	; (8009224 <update_main_screen+0xe5c>)
 8009140:	69a0      	ldr	r0, [r4, #24]
 8009142:	2100      	movs	r1, #0
 8009144:	f00c ffe4 	bl	8016110 <lv_bar_set_style>
 8009148:	4a36      	ldr	r2, [pc, #216]	; (8009224 <update_main_screen+0xe5c>)
 800914a:	69a0      	ldr	r0, [r4, #24]
 800914c:	2101      	movs	r1, #1
 800914e:	f00c ffdf 	bl	8016110 <lv_bar_set_style>
			lv_bar_set_style(bar[7], LV_BAR_STYLE_BG, &style_indic_vd);	lv_bar_set_style(bar[7], LV_BAR_STYLE_INDIC, &style_indic_vd);
 8009152:	4a34      	ldr	r2, [pc, #208]	; (8009224 <update_main_screen+0xe5c>)
 8009154:	69e0      	ldr	r0, [r4, #28]
 8009156:	2100      	movs	r1, #0
 8009158:	f00c ffda 	bl	8016110 <lv_bar_set_style>
 800915c:	4a31      	ldr	r2, [pc, #196]	; (8009224 <update_main_screen+0xe5c>)
 800915e:	69e0      	ldr	r0, [r4, #28]
 8009160:	2101      	movs	r1, #1
 8009162:	f00c ffd5 	bl	8016110 <lv_bar_set_style>
			lv_bar_set_style(bar[8], LV_BAR_STYLE_BG, &style_indic_vd);	lv_bar_set_style(bar[8], LV_BAR_STYLE_INDIC, &style_indic_vd);
 8009166:	4a2f      	ldr	r2, [pc, #188]	; (8009224 <update_main_screen+0xe5c>)
 8009168:	6a20      	ldr	r0, [r4, #32]
 800916a:	2100      	movs	r1, #0
 800916c:	f00c ffd0 	bl	8016110 <lv_bar_set_style>
 8009170:	4a2c      	ldr	r2, [pc, #176]	; (8009224 <update_main_screen+0xe5c>)
 8009172:	6a20      	ldr	r0, [r4, #32]
 8009174:	2101      	movs	r1, #1
 8009176:	f00c ffcb 	bl	8016110 <lv_bar_set_style>
			lv_bar_set_style(bar[9], LV_BAR_STYLE_BG, &style_indic_vd);	lv_bar_set_style(bar[9], LV_BAR_STYLE_INDIC, &style_indic_vd);
 800917a:	4a2a      	ldr	r2, [pc, #168]	; (8009224 <update_main_screen+0xe5c>)
 800917c:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800917e:	2100      	movs	r1, #0
 8009180:	f00c ffc6 	bl	8016110 <lv_bar_set_style>
 8009184:	4a27      	ldr	r2, [pc, #156]	; (8009224 <update_main_screen+0xe5c>)
 8009186:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8009188:	2101      	movs	r1, #1
 800918a:	f00c ffc1 	bl	8016110 <lv_bar_set_style>
			lv_bar_set_style(bar[10], LV_BAR_STYLE_BG, &style_indic_vd); lv_bar_set_style(bar[10], LV_BAR_STYLE_INDIC, &style_indic_vd);
 800918e:	4a25      	ldr	r2, [pc, #148]	; (8009224 <update_main_screen+0xe5c>)
 8009190:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8009192:	2100      	movs	r1, #0
 8009194:	f00c ffbc 	bl	8016110 <lv_bar_set_style>
 8009198:	4a22      	ldr	r2, [pc, #136]	; (8009224 <update_main_screen+0xe5c>)
 800919a:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 800919c:	2101      	movs	r1, #1
 800919e:	f00c ffb7 	bl	8016110 <lv_bar_set_style>
			lv_bar_set_style(bar[11], LV_BAR_STYLE_BG, &style_indic_vd); lv_bar_set_style(bar[11], LV_BAR_STYLE_INDIC, &style_indic_vd);
 80091a2:	4a20      	ldr	r2, [pc, #128]	; (8009224 <update_main_screen+0xe5c>)
 80091a4:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 80091a6:	2100      	movs	r1, #0
 80091a8:	f00c ffb2 	bl	8016110 <lv_bar_set_style>
 80091ac:	4a1d      	ldr	r2, [pc, #116]	; (8009224 <update_main_screen+0xe5c>)
 80091ae:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 80091b0:	2101      	movs	r1, #1
 80091b2:	f00c ffad 	bl	8016110 <lv_bar_set_style>
			lv_bar_set_style(bar[12], LV_BAR_STYLE_BG, &style_indic_vd); lv_bar_set_style(bar[12], LV_BAR_STYLE_INDIC, &style_indic_vd);
 80091b6:	4a1b      	ldr	r2, [pc, #108]	; (8009224 <update_main_screen+0xe5c>)
 80091b8:	6b20      	ldr	r0, [r4, #48]	; 0x30
 80091ba:	2100      	movs	r1, #0
 80091bc:	f00c ffa8 	bl	8016110 <lv_bar_set_style>
 80091c0:	4a18      	ldr	r2, [pc, #96]	; (8009224 <update_main_screen+0xe5c>)
 80091c2:	6b20      	ldr	r0, [r4, #48]	; 0x30
 80091c4:	2101      	movs	r1, #1
 80091c6:	f00c ffa3 	bl	8016110 <lv_bar_set_style>
			lv_bar_set_style(bar[13], LV_BAR_STYLE_BG, &style_indic_cy); lv_bar_set_style(bar[13], LV_BAR_STYLE_INDIC, &style_indic_cy);
 80091ca:	4a17      	ldr	r2, [pc, #92]	; (8009228 <update_main_screen+0xe60>)
 80091cc:	6b60      	ldr	r0, [r4, #52]	; 0x34
 80091ce:	2100      	movs	r1, #0
 80091d0:	f00c ff9e 	bl	8016110 <lv_bar_set_style>
 80091d4:	4a14      	ldr	r2, [pc, #80]	; (8009228 <update_main_screen+0xe60>)
 80091d6:	6b60      	ldr	r0, [r4, #52]	; 0x34
 80091d8:	2101      	movs	r1, #1
 80091da:	f00c ff99 	bl	8016110 <lv_bar_set_style>
			lv_bar_set_style(bar[14], LV_BAR_STYLE_BG, &style_indic_am); lv_bar_set_style(bar[14], LV_BAR_STYLE_INDIC, &style_indic_am);
 80091de:	4a13      	ldr	r2, [pc, #76]	; (800922c <update_main_screen+0xe64>)
 80091e0:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 80091e2:	2100      	movs	r1, #0
 80091e4:	f00c ff94 	bl	8016110 <lv_bar_set_style>
 80091e8:	4a10      	ldr	r2, [pc, #64]	; (800922c <update_main_screen+0xe64>)
 80091ea:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 80091ec:	2101      	movs	r1, #1
 80091ee:	f00c ff8f 	bl	8016110 <lv_bar_set_style>
			lv_bar_set_style(bar[15], LV_BAR_STYLE_BG, &style_indic_am); lv_bar_set_style(bar[15], LV_BAR_STYLE_INDIC, &style_indic_am);
 80091f2:	4a0e      	ldr	r2, [pc, #56]	; (800922c <update_main_screen+0xe64>)
 80091f4:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 80091f6:	2100      	movs	r1, #0
 80091f8:	f00c ff8a 	bl	8016110 <lv_bar_set_style>
 80091fc:	4a0b      	ldr	r2, [pc, #44]	; (800922c <update_main_screen+0xe64>)
 80091fe:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8009200:	2101      	movs	r1, #1
 8009202:	f00c ff85 	bl	8016110 <lv_bar_set_style>
			lv_bar_set_style(bar[16], LV_BAR_STYLE_BG, &style_indic_am); lv_bar_set_style(bar[16], LV_BAR_STYLE_INDIC, &style_indic_am);
 8009206:	4a09      	ldr	r2, [pc, #36]	; (800922c <update_main_screen+0xe64>)
 8009208:	6c20      	ldr	r0, [r4, #64]	; 0x40
 800920a:	2100      	movs	r1, #0
 800920c:	f00c ff80 	bl	8016110 <lv_bar_set_style>
 8009210:	6c20      	ldr	r0, [r4, #64]	; 0x40
 8009212:	4a06      	ldr	r2, [pc, #24]	; (800922c <update_main_screen+0xe64>)
 8009214:	2101      	movs	r1, #1
 8009216:	f00c ff7b 	bl	8016110 <lv_bar_set_style>
			bargraph_off(17);
 800921a:	2011      	movs	r0, #17
 800921c:	f7ff b964 	b.w	80084e8 <update_main_screen+0x120>
 8009220:	20004e74 	.word	0x20004e74
 8009224:	20004fc4 	.word	0x20004fc4
 8009228:	20004f4c 	.word	0x20004f4c
 800922c:	20004f10 	.word	0x20004f10
			lv_bar_set_style(bar[0], LV_BAR_STYLE_BG, &style_indic_vd);	lv_bar_set_style(bar[0], LV_BAR_STYLE_INDIC, &style_indic_vd);
 8009230:	4c5b      	ldr	r4, [pc, #364]	; (80093a0 <update_main_screen+0xfd8>)
 8009232:	4a5c      	ldr	r2, [pc, #368]	; (80093a4 <update_main_screen+0xfdc>)
 8009234:	6820      	ldr	r0, [r4, #0]
 8009236:	2100      	movs	r1, #0
 8009238:	f00c ff6a 	bl	8016110 <lv_bar_set_style>
 800923c:	4a59      	ldr	r2, [pc, #356]	; (80093a4 <update_main_screen+0xfdc>)
 800923e:	6820      	ldr	r0, [r4, #0]
 8009240:	2101      	movs	r1, #1
 8009242:	f00c ff65 	bl	8016110 <lv_bar_set_style>
			lv_bar_set_style(bar[1], LV_BAR_STYLE_BG, &style_indic_vd);	lv_bar_set_style(bar[1], LV_BAR_STYLE_INDIC, &style_indic_vd);
 8009246:	4a57      	ldr	r2, [pc, #348]	; (80093a4 <update_main_screen+0xfdc>)
 8009248:	6860      	ldr	r0, [r4, #4]
 800924a:	2100      	movs	r1, #0
 800924c:	f00c ff60 	bl	8016110 <lv_bar_set_style>
 8009250:	4a54      	ldr	r2, [pc, #336]	; (80093a4 <update_main_screen+0xfdc>)
 8009252:	6860      	ldr	r0, [r4, #4]
 8009254:	2101      	movs	r1, #1
 8009256:	f00c ff5b 	bl	8016110 <lv_bar_set_style>
			lv_bar_set_style(bar[2], LV_BAR_STYLE_BG, &style_indic_vd);	lv_bar_set_style(bar[2], LV_BAR_STYLE_INDIC, &style_indic_vd);
 800925a:	4a52      	ldr	r2, [pc, #328]	; (80093a4 <update_main_screen+0xfdc>)
 800925c:	68a0      	ldr	r0, [r4, #8]
 800925e:	2100      	movs	r1, #0
 8009260:	f00c ff56 	bl	8016110 <lv_bar_set_style>
 8009264:	4a4f      	ldr	r2, [pc, #316]	; (80093a4 <update_main_screen+0xfdc>)
 8009266:	68a0      	ldr	r0, [r4, #8]
 8009268:	2101      	movs	r1, #1
 800926a:	f00c ff51 	bl	8016110 <lv_bar_set_style>
			lv_bar_set_style(bar[3], LV_BAR_STYLE_BG, &style_indic_vd);	lv_bar_set_style(bar[3], LV_BAR_STYLE_INDIC, &style_indic_vd);
 800926e:	4a4d      	ldr	r2, [pc, #308]	; (80093a4 <update_main_screen+0xfdc>)
 8009270:	68e0      	ldr	r0, [r4, #12]
 8009272:	2100      	movs	r1, #0
 8009274:	f00c ff4c 	bl	8016110 <lv_bar_set_style>
 8009278:	4a4a      	ldr	r2, [pc, #296]	; (80093a4 <update_main_screen+0xfdc>)
 800927a:	68e0      	ldr	r0, [r4, #12]
 800927c:	2101      	movs	r1, #1
 800927e:	f00c ff47 	bl	8016110 <lv_bar_set_style>
			lv_bar_set_style(bar[4], LV_BAR_STYLE_BG, &style_indic_vd);	lv_bar_set_style(bar[4], LV_BAR_STYLE_INDIC, &style_indic_vd);
 8009282:	4a48      	ldr	r2, [pc, #288]	; (80093a4 <update_main_screen+0xfdc>)
 8009284:	6920      	ldr	r0, [r4, #16]
 8009286:	2100      	movs	r1, #0
 8009288:	f00c ff42 	bl	8016110 <lv_bar_set_style>
 800928c:	4a45      	ldr	r2, [pc, #276]	; (80093a4 <update_main_screen+0xfdc>)
 800928e:	6920      	ldr	r0, [r4, #16]
 8009290:	2101      	movs	r1, #1
 8009292:	f00c ff3d 	bl	8016110 <lv_bar_set_style>
			lv_bar_set_style(bar[5], LV_BAR_STYLE_BG, &style_indic_vd);	lv_bar_set_style(bar[5], LV_BAR_STYLE_INDIC, &style_indic_vd);
 8009296:	4a43      	ldr	r2, [pc, #268]	; (80093a4 <update_main_screen+0xfdc>)
 8009298:	6960      	ldr	r0, [r4, #20]
 800929a:	2100      	movs	r1, #0
 800929c:	f00c ff38 	bl	8016110 <lv_bar_set_style>
 80092a0:	4a40      	ldr	r2, [pc, #256]	; (80093a4 <update_main_screen+0xfdc>)
 80092a2:	6960      	ldr	r0, [r4, #20]
 80092a4:	2101      	movs	r1, #1
 80092a6:	f00c ff33 	bl	8016110 <lv_bar_set_style>
			lv_bar_set_style(bar[6], LV_BAR_STYLE_BG, &style_indic_vd);	lv_bar_set_style(bar[6], LV_BAR_STYLE_INDIC, &style_indic_vd);
 80092aa:	4a3e      	ldr	r2, [pc, #248]	; (80093a4 <update_main_screen+0xfdc>)
 80092ac:	69a0      	ldr	r0, [r4, #24]
 80092ae:	2100      	movs	r1, #0
 80092b0:	f00c ff2e 	bl	8016110 <lv_bar_set_style>
 80092b4:	4a3b      	ldr	r2, [pc, #236]	; (80093a4 <update_main_screen+0xfdc>)
 80092b6:	69a0      	ldr	r0, [r4, #24]
 80092b8:	2101      	movs	r1, #1
 80092ba:	f00c ff29 	bl	8016110 <lv_bar_set_style>
			lv_bar_set_style(bar[7], LV_BAR_STYLE_BG, &style_indic_vd);	lv_bar_set_style(bar[7], LV_BAR_STYLE_INDIC, &style_indic_vd);
 80092be:	4a39      	ldr	r2, [pc, #228]	; (80093a4 <update_main_screen+0xfdc>)
 80092c0:	69e0      	ldr	r0, [r4, #28]
 80092c2:	2100      	movs	r1, #0
 80092c4:	f00c ff24 	bl	8016110 <lv_bar_set_style>
 80092c8:	4a36      	ldr	r2, [pc, #216]	; (80093a4 <update_main_screen+0xfdc>)
 80092ca:	69e0      	ldr	r0, [r4, #28]
 80092cc:	2101      	movs	r1, #1
 80092ce:	f00c ff1f 	bl	8016110 <lv_bar_set_style>
			lv_bar_set_style(bar[8], LV_BAR_STYLE_BG, &style_indic_vd);	lv_bar_set_style(bar[8], LV_BAR_STYLE_INDIC, &style_indic_vd);
 80092d2:	4a34      	ldr	r2, [pc, #208]	; (80093a4 <update_main_screen+0xfdc>)
 80092d4:	6a20      	ldr	r0, [r4, #32]
 80092d6:	2100      	movs	r1, #0
 80092d8:	f00c ff1a 	bl	8016110 <lv_bar_set_style>
 80092dc:	4a31      	ldr	r2, [pc, #196]	; (80093a4 <update_main_screen+0xfdc>)
 80092de:	6a20      	ldr	r0, [r4, #32]
 80092e0:	2101      	movs	r1, #1
 80092e2:	f00c ff15 	bl	8016110 <lv_bar_set_style>
			lv_bar_set_style(bar[9], LV_BAR_STYLE_BG, &style_indic_vd);	lv_bar_set_style(bar[9], LV_BAR_STYLE_INDIC, &style_indic_vd);
 80092e6:	4a2f      	ldr	r2, [pc, #188]	; (80093a4 <update_main_screen+0xfdc>)
 80092e8:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80092ea:	2100      	movs	r1, #0
 80092ec:	f00c ff10 	bl	8016110 <lv_bar_set_style>
 80092f0:	4a2c      	ldr	r2, [pc, #176]	; (80093a4 <update_main_screen+0xfdc>)
 80092f2:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80092f4:	2101      	movs	r1, #1
 80092f6:	f00c ff0b 	bl	8016110 <lv_bar_set_style>
			lv_bar_set_style(bar[10], LV_BAR_STYLE_BG, &style_indic_vd); lv_bar_set_style(bar[10], LV_BAR_STYLE_INDIC, &style_indic_vd);
 80092fa:	4a2a      	ldr	r2, [pc, #168]	; (80093a4 <update_main_screen+0xfdc>)
 80092fc:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 80092fe:	2100      	movs	r1, #0
 8009300:	f00c ff06 	bl	8016110 <lv_bar_set_style>
 8009304:	4a27      	ldr	r2, [pc, #156]	; (80093a4 <update_main_screen+0xfdc>)
 8009306:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8009308:	2101      	movs	r1, #1
 800930a:	f00c ff01 	bl	8016110 <lv_bar_set_style>
			lv_bar_set_style(bar[11], LV_BAR_STYLE_BG, &style_indic_vd); lv_bar_set_style(bar[11], LV_BAR_STYLE_INDIC, &style_indic_vd);
 800930e:	4a25      	ldr	r2, [pc, #148]	; (80093a4 <update_main_screen+0xfdc>)
 8009310:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8009312:	2100      	movs	r1, #0
 8009314:	f00c fefc 	bl	8016110 <lv_bar_set_style>
 8009318:	4a22      	ldr	r2, [pc, #136]	; (80093a4 <update_main_screen+0xfdc>)
 800931a:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 800931c:	2101      	movs	r1, #1
 800931e:	f00c fef7 	bl	8016110 <lv_bar_set_style>
			lv_bar_set_style(bar[12], LV_BAR_STYLE_BG, &style_indic_vd); lv_bar_set_style(bar[12], LV_BAR_STYLE_INDIC, &style_indic_vd);
 8009322:	4a20      	ldr	r2, [pc, #128]	; (80093a4 <update_main_screen+0xfdc>)
 8009324:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8009326:	2100      	movs	r1, #0
 8009328:	f00c fef2 	bl	8016110 <lv_bar_set_style>
 800932c:	4a1d      	ldr	r2, [pc, #116]	; (80093a4 <update_main_screen+0xfdc>)
 800932e:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8009330:	2101      	movs	r1, #1
 8009332:	f00c feed 	bl	8016110 <lv_bar_set_style>
			lv_bar_set_style(bar[13], LV_BAR_STYLE_BG, &style_indic_cy); lv_bar_set_style(bar[13], LV_BAR_STYLE_INDIC, &style_indic_cy);
 8009336:	4a1c      	ldr	r2, [pc, #112]	; (80093a8 <update_main_screen+0xfe0>)
 8009338:	6b60      	ldr	r0, [r4, #52]	; 0x34
 800933a:	2100      	movs	r1, #0
 800933c:	f00c fee8 	bl	8016110 <lv_bar_set_style>
 8009340:	4a19      	ldr	r2, [pc, #100]	; (80093a8 <update_main_screen+0xfe0>)
 8009342:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8009344:	2101      	movs	r1, #1
 8009346:	f00c fee3 	bl	8016110 <lv_bar_set_style>
			lv_bar_set_style(bar[14], LV_BAR_STYLE_BG, &style_indic_am); lv_bar_set_style(bar[14], LV_BAR_STYLE_INDIC, &style_indic_am);
 800934a:	4a18      	ldr	r2, [pc, #96]	; (80093ac <update_main_screen+0xfe4>)
 800934c:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 800934e:	2100      	movs	r1, #0
 8009350:	f00c fede 	bl	8016110 <lv_bar_set_style>
 8009354:	4a15      	ldr	r2, [pc, #84]	; (80093ac <update_main_screen+0xfe4>)
 8009356:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8009358:	2101      	movs	r1, #1
 800935a:	f00c fed9 	bl	8016110 <lv_bar_set_style>
			lv_bar_set_style(bar[15], LV_BAR_STYLE_BG, &style_indic_am); lv_bar_set_style(bar[15], LV_BAR_STYLE_INDIC, &style_indic_am);
 800935e:	4a13      	ldr	r2, [pc, #76]	; (80093ac <update_main_screen+0xfe4>)
 8009360:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8009362:	2100      	movs	r1, #0
 8009364:	f00c fed4 	bl	8016110 <lv_bar_set_style>
 8009368:	4a10      	ldr	r2, [pc, #64]	; (80093ac <update_main_screen+0xfe4>)
 800936a:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 800936c:	2101      	movs	r1, #1
 800936e:	f00c fecf 	bl	8016110 <lv_bar_set_style>
			lv_bar_set_style(bar[16], LV_BAR_STYLE_BG, &style_indic_am); lv_bar_set_style(bar[16], LV_BAR_STYLE_INDIC, &style_indic_am);
 8009372:	4a0e      	ldr	r2, [pc, #56]	; (80093ac <update_main_screen+0xfe4>)
 8009374:	6c20      	ldr	r0, [r4, #64]	; 0x40
 8009376:	2100      	movs	r1, #0
 8009378:	f00c feca 	bl	8016110 <lv_bar_set_style>
 800937c:	4a0b      	ldr	r2, [pc, #44]	; (80093ac <update_main_screen+0xfe4>)
 800937e:	6c20      	ldr	r0, [r4, #64]	; 0x40
 8009380:	2101      	movs	r1, #1
 8009382:	f00c fec5 	bl	8016110 <lv_bar_set_style>
			lv_bar_set_style(bar[17], LV_BAR_STYLE_BG, &style_indic_vm); lv_bar_set_style(bar[17], LV_BAR_STYLE_INDIC, &style_indic_vm);
 8009386:	4a0a      	ldr	r2, [pc, #40]	; (80093b0 <update_main_screen+0xfe8>)
 8009388:	6c60      	ldr	r0, [r4, #68]	; 0x44
 800938a:	2100      	movs	r1, #0
 800938c:	f00c fec0 	bl	8016110 <lv_bar_set_style>
 8009390:	6c60      	ldr	r0, [r4, #68]	; 0x44
 8009392:	4a07      	ldr	r2, [pc, #28]	; (80093b0 <update_main_screen+0xfe8>)
 8009394:	2101      	movs	r1, #1
 8009396:	f00c febb 	bl	8016110 <lv_bar_set_style>
			bargraph_off(18);
 800939a:	2012      	movs	r0, #18
 800939c:	f7ff b8a4 	b.w	80084e8 <update_main_screen+0x120>
 80093a0:	20004e74 	.word	0x20004e74
 80093a4:	20004fc4 	.word	0x20004fc4
 80093a8:	20004f4c 	.word	0x20004f4c
 80093ac:	20004f10 	.word	0x20004f10
 80093b0:	20005000 	.word	0x20005000
			lv_bar_set_style(bar[0], LV_BAR_STYLE_BG, &style_indic_vd);	lv_bar_set_style(bar[0], LV_BAR_STYLE_INDIC, &style_indic_vd);
 80093b4:	4c60      	ldr	r4, [pc, #384]	; (8009538 <update_main_screen+0x1170>)
 80093b6:	4a61      	ldr	r2, [pc, #388]	; (800953c <update_main_screen+0x1174>)
 80093b8:	6820      	ldr	r0, [r4, #0]
 80093ba:	2100      	movs	r1, #0
 80093bc:	f00c fea8 	bl	8016110 <lv_bar_set_style>
 80093c0:	4a5e      	ldr	r2, [pc, #376]	; (800953c <update_main_screen+0x1174>)
 80093c2:	6820      	ldr	r0, [r4, #0]
 80093c4:	2101      	movs	r1, #1
 80093c6:	f00c fea3 	bl	8016110 <lv_bar_set_style>
			lv_bar_set_style(bar[1], LV_BAR_STYLE_BG, &style_indic_vd);	lv_bar_set_style(bar[1], LV_BAR_STYLE_INDIC, &style_indic_vd);
 80093ca:	4a5c      	ldr	r2, [pc, #368]	; (800953c <update_main_screen+0x1174>)
 80093cc:	6860      	ldr	r0, [r4, #4]
 80093ce:	2100      	movs	r1, #0
 80093d0:	f00c fe9e 	bl	8016110 <lv_bar_set_style>
 80093d4:	4a59      	ldr	r2, [pc, #356]	; (800953c <update_main_screen+0x1174>)
 80093d6:	6860      	ldr	r0, [r4, #4]
 80093d8:	2101      	movs	r1, #1
 80093da:	f00c fe99 	bl	8016110 <lv_bar_set_style>
			lv_bar_set_style(bar[2], LV_BAR_STYLE_BG, &style_indic_vd);	lv_bar_set_style(bar[2], LV_BAR_STYLE_INDIC, &style_indic_vd);
 80093de:	4a57      	ldr	r2, [pc, #348]	; (800953c <update_main_screen+0x1174>)
 80093e0:	68a0      	ldr	r0, [r4, #8]
 80093e2:	2100      	movs	r1, #0
 80093e4:	f00c fe94 	bl	8016110 <lv_bar_set_style>
 80093e8:	4a54      	ldr	r2, [pc, #336]	; (800953c <update_main_screen+0x1174>)
 80093ea:	68a0      	ldr	r0, [r4, #8]
 80093ec:	2101      	movs	r1, #1
 80093ee:	f00c fe8f 	bl	8016110 <lv_bar_set_style>
			lv_bar_set_style(bar[3], LV_BAR_STYLE_BG, &style_indic_vd);	lv_bar_set_style(bar[3], LV_BAR_STYLE_INDIC, &style_indic_vd);
 80093f2:	4a52      	ldr	r2, [pc, #328]	; (800953c <update_main_screen+0x1174>)
 80093f4:	68e0      	ldr	r0, [r4, #12]
 80093f6:	2100      	movs	r1, #0
 80093f8:	f00c fe8a 	bl	8016110 <lv_bar_set_style>
 80093fc:	4a4f      	ldr	r2, [pc, #316]	; (800953c <update_main_screen+0x1174>)
 80093fe:	68e0      	ldr	r0, [r4, #12]
 8009400:	2101      	movs	r1, #1
 8009402:	f00c fe85 	bl	8016110 <lv_bar_set_style>
			lv_bar_set_style(bar[4], LV_BAR_STYLE_BG, &style_indic_vd);	lv_bar_set_style(bar[4], LV_BAR_STYLE_INDIC, &style_indic_vd);
 8009406:	4a4d      	ldr	r2, [pc, #308]	; (800953c <update_main_screen+0x1174>)
 8009408:	6920      	ldr	r0, [r4, #16]
 800940a:	2100      	movs	r1, #0
 800940c:	f00c fe80 	bl	8016110 <lv_bar_set_style>
 8009410:	4a4a      	ldr	r2, [pc, #296]	; (800953c <update_main_screen+0x1174>)
 8009412:	6920      	ldr	r0, [r4, #16]
 8009414:	2101      	movs	r1, #1
 8009416:	f00c fe7b 	bl	8016110 <lv_bar_set_style>
			lv_bar_set_style(bar[5], LV_BAR_STYLE_BG, &style_indic_vd);	lv_bar_set_style(bar[5], LV_BAR_STYLE_INDIC, &style_indic_vd);
 800941a:	4a48      	ldr	r2, [pc, #288]	; (800953c <update_main_screen+0x1174>)
 800941c:	6960      	ldr	r0, [r4, #20]
 800941e:	2100      	movs	r1, #0
 8009420:	f00c fe76 	bl	8016110 <lv_bar_set_style>
 8009424:	4a45      	ldr	r2, [pc, #276]	; (800953c <update_main_screen+0x1174>)
 8009426:	6960      	ldr	r0, [r4, #20]
 8009428:	2101      	movs	r1, #1
 800942a:	f00c fe71 	bl	8016110 <lv_bar_set_style>
			lv_bar_set_style(bar[6], LV_BAR_STYLE_BG, &style_indic_vd);	lv_bar_set_style(bar[6], LV_BAR_STYLE_INDIC, &style_indic_vd);
 800942e:	4a43      	ldr	r2, [pc, #268]	; (800953c <update_main_screen+0x1174>)
 8009430:	69a0      	ldr	r0, [r4, #24]
 8009432:	2100      	movs	r1, #0
 8009434:	f00c fe6c 	bl	8016110 <lv_bar_set_style>
 8009438:	4a40      	ldr	r2, [pc, #256]	; (800953c <update_main_screen+0x1174>)
 800943a:	69a0      	ldr	r0, [r4, #24]
 800943c:	2101      	movs	r1, #1
 800943e:	f00c fe67 	bl	8016110 <lv_bar_set_style>
			lv_bar_set_style(bar[7], LV_BAR_STYLE_BG, &style_indic_vd);	lv_bar_set_style(bar[7], LV_BAR_STYLE_INDIC, &style_indic_vd);
 8009442:	4a3e      	ldr	r2, [pc, #248]	; (800953c <update_main_screen+0x1174>)
 8009444:	69e0      	ldr	r0, [r4, #28]
 8009446:	2100      	movs	r1, #0
 8009448:	f00c fe62 	bl	8016110 <lv_bar_set_style>
 800944c:	4a3b      	ldr	r2, [pc, #236]	; (800953c <update_main_screen+0x1174>)
 800944e:	69e0      	ldr	r0, [r4, #28]
 8009450:	2101      	movs	r1, #1
 8009452:	f00c fe5d 	bl	8016110 <lv_bar_set_style>
			lv_bar_set_style(bar[8], LV_BAR_STYLE_BG, &style_indic_vd);	lv_bar_set_style(bar[8], LV_BAR_STYLE_INDIC, &style_indic_vd);
 8009456:	4a39      	ldr	r2, [pc, #228]	; (800953c <update_main_screen+0x1174>)
 8009458:	6a20      	ldr	r0, [r4, #32]
 800945a:	2100      	movs	r1, #0
 800945c:	f00c fe58 	bl	8016110 <lv_bar_set_style>
 8009460:	4a36      	ldr	r2, [pc, #216]	; (800953c <update_main_screen+0x1174>)
 8009462:	6a20      	ldr	r0, [r4, #32]
 8009464:	2101      	movs	r1, #1
 8009466:	f00c fe53 	bl	8016110 <lv_bar_set_style>
			lv_bar_set_style(bar[9], LV_BAR_STYLE_BG, &style_indic_vd);	lv_bar_set_style(bar[9], LV_BAR_STYLE_INDIC, &style_indic_vd);
 800946a:	4a34      	ldr	r2, [pc, #208]	; (800953c <update_main_screen+0x1174>)
 800946c:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800946e:	2100      	movs	r1, #0
 8009470:	f00c fe4e 	bl	8016110 <lv_bar_set_style>
 8009474:	4a31      	ldr	r2, [pc, #196]	; (800953c <update_main_screen+0x1174>)
 8009476:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8009478:	2101      	movs	r1, #1
 800947a:	f00c fe49 	bl	8016110 <lv_bar_set_style>
			lv_bar_set_style(bar[10], LV_BAR_STYLE_BG, &style_indic_vd); lv_bar_set_style(bar[10], LV_BAR_STYLE_INDIC, &style_indic_vd);
 800947e:	4a2f      	ldr	r2, [pc, #188]	; (800953c <update_main_screen+0x1174>)
 8009480:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8009482:	2100      	movs	r1, #0
 8009484:	f00c fe44 	bl	8016110 <lv_bar_set_style>
 8009488:	4a2c      	ldr	r2, [pc, #176]	; (800953c <update_main_screen+0x1174>)
 800948a:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 800948c:	2101      	movs	r1, #1
 800948e:	f00c fe3f 	bl	8016110 <lv_bar_set_style>
			lv_bar_set_style(bar[11], LV_BAR_STYLE_BG, &style_indic_vd); lv_bar_set_style(bar[11], LV_BAR_STYLE_INDIC, &style_indic_vd);
 8009492:	4a2a      	ldr	r2, [pc, #168]	; (800953c <update_main_screen+0x1174>)
 8009494:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8009496:	2100      	movs	r1, #0
 8009498:	f00c fe3a 	bl	8016110 <lv_bar_set_style>
 800949c:	4a27      	ldr	r2, [pc, #156]	; (800953c <update_main_screen+0x1174>)
 800949e:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 80094a0:	2101      	movs	r1, #1
 80094a2:	f00c fe35 	bl	8016110 <lv_bar_set_style>
			lv_bar_set_style(bar[12], LV_BAR_STYLE_BG, &style_indic_vd); lv_bar_set_style(bar[12], LV_BAR_STYLE_INDIC, &style_indic_vd);
 80094a6:	4a25      	ldr	r2, [pc, #148]	; (800953c <update_main_screen+0x1174>)
 80094a8:	6b20      	ldr	r0, [r4, #48]	; 0x30
 80094aa:	2100      	movs	r1, #0
 80094ac:	f00c fe30 	bl	8016110 <lv_bar_set_style>
 80094b0:	4a22      	ldr	r2, [pc, #136]	; (800953c <update_main_screen+0x1174>)
 80094b2:	6b20      	ldr	r0, [r4, #48]	; 0x30
 80094b4:	2101      	movs	r1, #1
 80094b6:	f00c fe2b 	bl	8016110 <lv_bar_set_style>
			lv_bar_set_style(bar[13], LV_BAR_STYLE_BG, &style_indic_cy); lv_bar_set_style(bar[13], LV_BAR_STYLE_INDIC, &style_indic_cy);
 80094ba:	4a21      	ldr	r2, [pc, #132]	; (8009540 <update_main_screen+0x1178>)
 80094bc:	6b60      	ldr	r0, [r4, #52]	; 0x34
 80094be:	2100      	movs	r1, #0
 80094c0:	f00c fe26 	bl	8016110 <lv_bar_set_style>
 80094c4:	4a1e      	ldr	r2, [pc, #120]	; (8009540 <update_main_screen+0x1178>)
 80094c6:	6b60      	ldr	r0, [r4, #52]	; 0x34
 80094c8:	2101      	movs	r1, #1
 80094ca:	f00c fe21 	bl	8016110 <lv_bar_set_style>
			lv_bar_set_style(bar[14], LV_BAR_STYLE_BG, &style_indic_am); lv_bar_set_style(bar[14], LV_BAR_STYLE_INDIC, &style_indic_am);
 80094ce:	4a1d      	ldr	r2, [pc, #116]	; (8009544 <update_main_screen+0x117c>)
 80094d0:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 80094d2:	2100      	movs	r1, #0
 80094d4:	f00c fe1c 	bl	8016110 <lv_bar_set_style>
 80094d8:	4a1a      	ldr	r2, [pc, #104]	; (8009544 <update_main_screen+0x117c>)
 80094da:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 80094dc:	2101      	movs	r1, #1
 80094de:	f00c fe17 	bl	8016110 <lv_bar_set_style>
			lv_bar_set_style(bar[15], LV_BAR_STYLE_BG, &style_indic_am); lv_bar_set_style(bar[15], LV_BAR_STYLE_INDIC, &style_indic_am);
 80094e2:	4a18      	ldr	r2, [pc, #96]	; (8009544 <update_main_screen+0x117c>)
 80094e4:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 80094e6:	2100      	movs	r1, #0
 80094e8:	f00c fe12 	bl	8016110 <lv_bar_set_style>
 80094ec:	4a15      	ldr	r2, [pc, #84]	; (8009544 <update_main_screen+0x117c>)
 80094ee:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 80094f0:	2101      	movs	r1, #1
 80094f2:	f00c fe0d 	bl	8016110 <lv_bar_set_style>
			lv_bar_set_style(bar[16], LV_BAR_STYLE_BG, &style_indic_am); lv_bar_set_style(bar[16], LV_BAR_STYLE_INDIC, &style_indic_am);
 80094f6:	4a13      	ldr	r2, [pc, #76]	; (8009544 <update_main_screen+0x117c>)
 80094f8:	6c20      	ldr	r0, [r4, #64]	; 0x40
 80094fa:	2100      	movs	r1, #0
 80094fc:	f00c fe08 	bl	8016110 <lv_bar_set_style>
 8009500:	4a10      	ldr	r2, [pc, #64]	; (8009544 <update_main_screen+0x117c>)
 8009502:	6c20      	ldr	r0, [r4, #64]	; 0x40
 8009504:	2101      	movs	r1, #1
 8009506:	f00c fe03 	bl	8016110 <lv_bar_set_style>
			lv_bar_set_style(bar[17], LV_BAR_STYLE_BG, &style_indic_vm); lv_bar_set_style(bar[17], LV_BAR_STYLE_INDIC, &style_indic_vm);
 800950a:	4a0f      	ldr	r2, [pc, #60]	; (8009548 <update_main_screen+0x1180>)
 800950c:	6c60      	ldr	r0, [r4, #68]	; 0x44
 800950e:	2100      	movs	r1, #0
 8009510:	f00c fdfe 	bl	8016110 <lv_bar_set_style>
 8009514:	4a0c      	ldr	r2, [pc, #48]	; (8009548 <update_main_screen+0x1180>)
 8009516:	6c60      	ldr	r0, [r4, #68]	; 0x44
 8009518:	2101      	movs	r1, #1
 800951a:	f00c fdf9 	bl	8016110 <lv_bar_set_style>
			lv_bar_set_style(bar[18], LV_BAR_STYLE_BG, &style_indic_vm); lv_bar_set_style(bar[18], LV_BAR_STYLE_INDIC, &style_indic_vm);
 800951e:	4a0a      	ldr	r2, [pc, #40]	; (8009548 <update_main_screen+0x1180>)
 8009520:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 8009522:	2100      	movs	r1, #0
 8009524:	f00c fdf4 	bl	8016110 <lv_bar_set_style>
 8009528:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 800952a:	4a07      	ldr	r2, [pc, #28]	; (8009548 <update_main_screen+0x1180>)
 800952c:	2101      	movs	r1, #1
 800952e:	f00c fdef 	bl	8016110 <lv_bar_set_style>
			bargraph_off(19);
 8009532:	2013      	movs	r0, #19
 8009534:	f7fe bfd8 	b.w	80084e8 <update_main_screen+0x120>
 8009538:	20004e74 	.word	0x20004e74
 800953c:	20004fc4 	.word	0x20004fc4
 8009540:	20004f4c 	.word	0x20004f4c
 8009544:	20004f10 	.word	0x20004f10
 8009548:	20005000 	.word	0x20005000
			lv_bar_set_style(bar[0], LV_BAR_STYLE_BG, &style_indic_vd);	lv_bar_set_style(bar[0], LV_BAR_STYLE_INDIC, &style_indic_vd);
 800954c:	4c68      	ldr	r4, [pc, #416]	; (80096f0 <update_main_screen+0x1328>)
 800954e:	4a69      	ldr	r2, [pc, #420]	; (80096f4 <update_main_screen+0x132c>)
 8009550:	6820      	ldr	r0, [r4, #0]
 8009552:	2100      	movs	r1, #0
 8009554:	f00c fddc 	bl	8016110 <lv_bar_set_style>
 8009558:	6820      	ldr	r0, [r4, #0]
 800955a:	4a66      	ldr	r2, [pc, #408]	; (80096f4 <update_main_screen+0x132c>)
 800955c:	2101      	movs	r1, #1
 800955e:	f00c fdd7 	bl	8016110 <lv_bar_set_style>
			lv_bar_set_style(bar[1], LV_BAR_STYLE_BG, &style_indic_vd);	lv_bar_set_style(bar[1], LV_BAR_STYLE_INDIC, &style_indic_vd);
 8009562:	6860      	ldr	r0, [r4, #4]
 8009564:	4a63      	ldr	r2, [pc, #396]	; (80096f4 <update_main_screen+0x132c>)
 8009566:	2100      	movs	r1, #0
 8009568:	f00c fdd2 	bl	8016110 <lv_bar_set_style>
 800956c:	6860      	ldr	r0, [r4, #4]
 800956e:	4a61      	ldr	r2, [pc, #388]	; (80096f4 <update_main_screen+0x132c>)
 8009570:	2101      	movs	r1, #1
 8009572:	f00c fdcd 	bl	8016110 <lv_bar_set_style>
			lv_bar_set_style(bar[2], LV_BAR_STYLE_BG, &style_indic_vd);	lv_bar_set_style(bar[2], LV_BAR_STYLE_INDIC, &style_indic_vd);
 8009576:	68a0      	ldr	r0, [r4, #8]
 8009578:	4a5e      	ldr	r2, [pc, #376]	; (80096f4 <update_main_screen+0x132c>)
 800957a:	2100      	movs	r1, #0
 800957c:	f00c fdc8 	bl	8016110 <lv_bar_set_style>
 8009580:	68a0      	ldr	r0, [r4, #8]
 8009582:	4a5c      	ldr	r2, [pc, #368]	; (80096f4 <update_main_screen+0x132c>)
 8009584:	2101      	movs	r1, #1
 8009586:	f00c fdc3 	bl	8016110 <lv_bar_set_style>
			lv_bar_set_style(bar[3], LV_BAR_STYLE_BG, &style_indic_vd);	lv_bar_set_style(bar[3], LV_BAR_STYLE_INDIC, &style_indic_vd);
 800958a:	68e0      	ldr	r0, [r4, #12]
 800958c:	4a59      	ldr	r2, [pc, #356]	; (80096f4 <update_main_screen+0x132c>)
 800958e:	2100      	movs	r1, #0
 8009590:	f00c fdbe 	bl	8016110 <lv_bar_set_style>
 8009594:	68e0      	ldr	r0, [r4, #12]
 8009596:	4a57      	ldr	r2, [pc, #348]	; (80096f4 <update_main_screen+0x132c>)
 8009598:	2101      	movs	r1, #1
 800959a:	f00c fdb9 	bl	8016110 <lv_bar_set_style>
			lv_bar_set_style(bar[4], LV_BAR_STYLE_BG, &style_indic_vd);	lv_bar_set_style(bar[4], LV_BAR_STYLE_INDIC, &style_indic_vd);
 800959e:	6920      	ldr	r0, [r4, #16]
 80095a0:	4a54      	ldr	r2, [pc, #336]	; (80096f4 <update_main_screen+0x132c>)
 80095a2:	2100      	movs	r1, #0
 80095a4:	f00c fdb4 	bl	8016110 <lv_bar_set_style>
 80095a8:	6920      	ldr	r0, [r4, #16]
 80095aa:	4a52      	ldr	r2, [pc, #328]	; (80096f4 <update_main_screen+0x132c>)
 80095ac:	2101      	movs	r1, #1
 80095ae:	f00c fdaf 	bl	8016110 <lv_bar_set_style>
			lv_bar_set_style(bar[5], LV_BAR_STYLE_BG, &style_indic_vd);	lv_bar_set_style(bar[5], LV_BAR_STYLE_INDIC, &style_indic_vd);
 80095b2:	6960      	ldr	r0, [r4, #20]
 80095b4:	4a4f      	ldr	r2, [pc, #316]	; (80096f4 <update_main_screen+0x132c>)
 80095b6:	2100      	movs	r1, #0
 80095b8:	f00c fdaa 	bl	8016110 <lv_bar_set_style>
 80095bc:	6960      	ldr	r0, [r4, #20]
 80095be:	4a4d      	ldr	r2, [pc, #308]	; (80096f4 <update_main_screen+0x132c>)
 80095c0:	2101      	movs	r1, #1
 80095c2:	f00c fda5 	bl	8016110 <lv_bar_set_style>
			lv_bar_set_style(bar[6], LV_BAR_STYLE_BG, &style_indic_vd);	lv_bar_set_style(bar[6], LV_BAR_STYLE_INDIC, &style_indic_vd);
 80095c6:	69a0      	ldr	r0, [r4, #24]
 80095c8:	4a4a      	ldr	r2, [pc, #296]	; (80096f4 <update_main_screen+0x132c>)
 80095ca:	2100      	movs	r1, #0
 80095cc:	f00c fda0 	bl	8016110 <lv_bar_set_style>
 80095d0:	69a0      	ldr	r0, [r4, #24]
 80095d2:	4a48      	ldr	r2, [pc, #288]	; (80096f4 <update_main_screen+0x132c>)
 80095d4:	2101      	movs	r1, #1
 80095d6:	f00c fd9b 	bl	8016110 <lv_bar_set_style>
			lv_bar_set_style(bar[7], LV_BAR_STYLE_BG, &style_indic_vd);	lv_bar_set_style(bar[7], LV_BAR_STYLE_INDIC, &style_indic_vd);
 80095da:	69e0      	ldr	r0, [r4, #28]
 80095dc:	4a45      	ldr	r2, [pc, #276]	; (80096f4 <update_main_screen+0x132c>)
 80095de:	2100      	movs	r1, #0
 80095e0:	f00c fd96 	bl	8016110 <lv_bar_set_style>
 80095e4:	69e0      	ldr	r0, [r4, #28]
 80095e6:	4a43      	ldr	r2, [pc, #268]	; (80096f4 <update_main_screen+0x132c>)
 80095e8:	2101      	movs	r1, #1
 80095ea:	f00c fd91 	bl	8016110 <lv_bar_set_style>
			lv_bar_set_style(bar[8], LV_BAR_STYLE_BG, &style_indic_vd);	lv_bar_set_style(bar[8], LV_BAR_STYLE_INDIC, &style_indic_vd);
 80095ee:	6a20      	ldr	r0, [r4, #32]
 80095f0:	4a40      	ldr	r2, [pc, #256]	; (80096f4 <update_main_screen+0x132c>)
 80095f2:	2100      	movs	r1, #0
 80095f4:	f00c fd8c 	bl	8016110 <lv_bar_set_style>
 80095f8:	6a20      	ldr	r0, [r4, #32]
 80095fa:	4a3e      	ldr	r2, [pc, #248]	; (80096f4 <update_main_screen+0x132c>)
 80095fc:	2101      	movs	r1, #1
 80095fe:	f00c fd87 	bl	8016110 <lv_bar_set_style>
			lv_bar_set_style(bar[9], LV_BAR_STYLE_BG, &style_indic_vd);	lv_bar_set_style(bar[9], LV_BAR_STYLE_INDIC, &style_indic_vd);
 8009602:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8009604:	4a3b      	ldr	r2, [pc, #236]	; (80096f4 <update_main_screen+0x132c>)
 8009606:	2100      	movs	r1, #0
 8009608:	f00c fd82 	bl	8016110 <lv_bar_set_style>
 800960c:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800960e:	4a39      	ldr	r2, [pc, #228]	; (80096f4 <update_main_screen+0x132c>)
 8009610:	2101      	movs	r1, #1
 8009612:	f00c fd7d 	bl	8016110 <lv_bar_set_style>
			lv_bar_set_style(bar[10], LV_BAR_STYLE_BG, &style_indic_vd); lv_bar_set_style(bar[10], LV_BAR_STYLE_INDIC, &style_indic_vd);
 8009616:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8009618:	4a36      	ldr	r2, [pc, #216]	; (80096f4 <update_main_screen+0x132c>)
 800961a:	2100      	movs	r1, #0
 800961c:	f00c fd78 	bl	8016110 <lv_bar_set_style>
 8009620:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8009622:	4a34      	ldr	r2, [pc, #208]	; (80096f4 <update_main_screen+0x132c>)
 8009624:	2101      	movs	r1, #1
 8009626:	f00c fd73 	bl	8016110 <lv_bar_set_style>
			lv_bar_set_style(bar[11], LV_BAR_STYLE_BG, &style_indic_vd); lv_bar_set_style(bar[11], LV_BAR_STYLE_INDIC, &style_indic_vd);
 800962a:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 800962c:	4a31      	ldr	r2, [pc, #196]	; (80096f4 <update_main_screen+0x132c>)
 800962e:	2100      	movs	r1, #0
 8009630:	f00c fd6e 	bl	8016110 <lv_bar_set_style>
 8009634:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8009636:	4a2f      	ldr	r2, [pc, #188]	; (80096f4 <update_main_screen+0x132c>)
 8009638:	2101      	movs	r1, #1
 800963a:	f00c fd69 	bl	8016110 <lv_bar_set_style>
			lv_bar_set_style(bar[12], LV_BAR_STYLE_BG, &style_indic_vd); lv_bar_set_style(bar[12], LV_BAR_STYLE_INDIC, &style_indic_vd);
 800963e:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8009640:	4a2c      	ldr	r2, [pc, #176]	; (80096f4 <update_main_screen+0x132c>)
 8009642:	2100      	movs	r1, #0
 8009644:	f00c fd64 	bl	8016110 <lv_bar_set_style>
 8009648:	6b20      	ldr	r0, [r4, #48]	; 0x30
 800964a:	4a2a      	ldr	r2, [pc, #168]	; (80096f4 <update_main_screen+0x132c>)
 800964c:	2101      	movs	r1, #1
 800964e:	f00c fd5f 	bl	8016110 <lv_bar_set_style>
			lv_bar_set_style(bar[13], LV_BAR_STYLE_BG, &style_indic_cy); lv_bar_set_style(bar[13], LV_BAR_STYLE_INDIC, &style_indic_cy);
 8009652:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8009654:	4a28      	ldr	r2, [pc, #160]	; (80096f8 <update_main_screen+0x1330>)
 8009656:	2100      	movs	r1, #0
 8009658:	f00c fd5a 	bl	8016110 <lv_bar_set_style>
 800965c:	6b60      	ldr	r0, [r4, #52]	; 0x34
 800965e:	4a26      	ldr	r2, [pc, #152]	; (80096f8 <update_main_screen+0x1330>)
 8009660:	2101      	movs	r1, #1
 8009662:	f00c fd55 	bl	8016110 <lv_bar_set_style>
			lv_bar_set_style(bar[14], LV_BAR_STYLE_BG, &style_indic_am); lv_bar_set_style(bar[14], LV_BAR_STYLE_INDIC, &style_indic_am);
 8009666:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8009668:	4a24      	ldr	r2, [pc, #144]	; (80096fc <update_main_screen+0x1334>)
 800966a:	2100      	movs	r1, #0
 800966c:	f00c fd50 	bl	8016110 <lv_bar_set_style>
 8009670:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8009672:	4a22      	ldr	r2, [pc, #136]	; (80096fc <update_main_screen+0x1334>)
 8009674:	2101      	movs	r1, #1
 8009676:	f00c fd4b 	bl	8016110 <lv_bar_set_style>
			lv_bar_set_style(bar[15], LV_BAR_STYLE_BG, &style_indic_am); lv_bar_set_style(bar[15], LV_BAR_STYLE_INDIC, &style_indic_am);
 800967a:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 800967c:	4a1f      	ldr	r2, [pc, #124]	; (80096fc <update_main_screen+0x1334>)
 800967e:	2100      	movs	r1, #0
 8009680:	f00c fd46 	bl	8016110 <lv_bar_set_style>
 8009684:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8009686:	4a1d      	ldr	r2, [pc, #116]	; (80096fc <update_main_screen+0x1334>)
 8009688:	2101      	movs	r1, #1
 800968a:	f00c fd41 	bl	8016110 <lv_bar_set_style>
			lv_bar_set_style(bar[16], LV_BAR_STYLE_BG, &style_indic_am); lv_bar_set_style(bar[16], LV_BAR_STYLE_INDIC, &style_indic_am);
 800968e:	6c20      	ldr	r0, [r4, #64]	; 0x40
 8009690:	4a1a      	ldr	r2, [pc, #104]	; (80096fc <update_main_screen+0x1334>)
 8009692:	2100      	movs	r1, #0
 8009694:	f00c fd3c 	bl	8016110 <lv_bar_set_style>
 8009698:	6c20      	ldr	r0, [r4, #64]	; 0x40
 800969a:	4a18      	ldr	r2, [pc, #96]	; (80096fc <update_main_screen+0x1334>)
 800969c:	2101      	movs	r1, #1
 800969e:	f00c fd37 	bl	8016110 <lv_bar_set_style>
			lv_bar_set_style(bar[17], LV_BAR_STYLE_BG, &style_indic_vm); lv_bar_set_style(bar[17], LV_BAR_STYLE_INDIC, &style_indic_vm);
 80096a2:	6c60      	ldr	r0, [r4, #68]	; 0x44
 80096a4:	4a16      	ldr	r2, [pc, #88]	; (8009700 <update_main_screen+0x1338>)
 80096a6:	2100      	movs	r1, #0
 80096a8:	f00c fd32 	bl	8016110 <lv_bar_set_style>
 80096ac:	6c60      	ldr	r0, [r4, #68]	; 0x44
 80096ae:	4a14      	ldr	r2, [pc, #80]	; (8009700 <update_main_screen+0x1338>)
 80096b0:	2101      	movs	r1, #1
 80096b2:	f00c fd2d 	bl	8016110 <lv_bar_set_style>
			lv_bar_set_style(bar[18], LV_BAR_STYLE_BG, &style_indic_vm); lv_bar_set_style(bar[18], LV_BAR_STYLE_INDIC, &style_indic_vm);
 80096b6:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 80096b8:	4a11      	ldr	r2, [pc, #68]	; (8009700 <update_main_screen+0x1338>)
 80096ba:	2100      	movs	r1, #0
 80096bc:	f00c fd28 	bl	8016110 <lv_bar_set_style>
 80096c0:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 80096c2:	4a0f      	ldr	r2, [pc, #60]	; (8009700 <update_main_screen+0x1338>)
 80096c4:	2101      	movs	r1, #1
 80096c6:	f00c fd23 	bl	8016110 <lv_bar_set_style>
			lv_bar_set_style(bar[19], LV_BAR_STYLE_BG, &style_indic_vm); lv_bar_set_style(bar[19], LV_BAR_STYLE_INDIC, &style_indic_vm);
 80096ca:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 80096cc:	4a0c      	ldr	r2, [pc, #48]	; (8009700 <update_main_screen+0x1338>)
 80096ce:	2100      	movs	r1, #0
 80096d0:	f00c fd1e 	bl	8016110 <lv_bar_set_style>
 80096d4:	4a0a      	ldr	r2, [pc, #40]	; (8009700 <update_main_screen+0x1338>)
 80096d6:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 80096d8:	2101      	movs	r1, #1
 80096da:	f00c fd19 	bl	8016110 <lv_bar_set_style>
 80096de:	f7fe bf05 	b.w	80084ec <update_main_screen+0x124>
		}
	}
	else {
		mpx--;
 80096e2:	682b      	ldr	r3, [r5, #0]
 80096e4:	3b01      	subs	r3, #1
 80096e6:	602b      	str	r3, [r5, #0]
		if(mpx == 0) {
 80096e8:	b903      	cbnz	r3, 80096ec <update_main_screen+0x1324>
			sent_hor = 0;
 80096ea:	7013      	strb	r3, [r2, #0]
 80096ec:	bd38      	pop	{r3, r4, r5, pc}
 80096ee:	bf00      	nop
 80096f0:	20004e74 	.word	0x20004e74
 80096f4:	20004fc4 	.word	0x20004fc4
 80096f8:	20004f4c 	.word	0x20004f4c
 80096fc:	20004f10 	.word	0x20004f10
 8009700:	20005000 	.word	0x20005000

08009704 <btn_audio>:
	}
}

static void btn_audio(lv_obj_t * btn, lv_event_t event)
{
	if(event == LV_EVENT_RELEASED) {
 8009704:	2907      	cmp	r1, #7
{
 8009706:	b537      	push	{r0, r1, r2, r4, r5, lr}
	if(event == LV_EVENT_RELEASED) {
 8009708:	d140      	bne.n	800978c <btn_audio+0x88>
		uint32_t id = lv_obj_get_user_data(btn);
 800970a:	f006 ff3a 	bl	8010582 <lv_obj_get_user_data>
		logI("Button Audio %d Released\n" , id);
 800970e:	4601      	mov	r1, r0
		uint32_t id = lv_obj_get_user_data(btn);
 8009710:	4605      	mov	r5, r0
		logI("Button Audio %d Released\n" , id);
 8009712:	481f      	ldr	r0, [pc, #124]	; (8009790 <btn_audio+0x8c>)
 8009714:	4c1f      	ldr	r4, [pc, #124]	; (8009794 <btn_audio+0x90>)
 8009716:	f7f7 ffa9 	bl	800166c <logI>
		switch(id) {
 800971a:	2d03      	cmp	r5, #3
 800971c:	d80e      	bhi.n	800973c <btn_audio+0x38>
 800971e:	e8df f005 	tbb	[pc, r5]
 8009722:	1402      	.short	0x1402
 8009724:	2a1f      	.short	0x2a1f
			case 0:
				lv_obj_align(bar[1], NULL, LV_ALIGN_IN_TOP_LEFT, 131, 52);
 8009726:	2334      	movs	r3, #52	; 0x34
 8009728:	481b      	ldr	r0, [pc, #108]	; (8009798 <btn_audio+0x94>)
 800972a:	9300      	str	r3, [sp, #0]
 800972c:	2201      	movs	r2, #1
 800972e:	2383      	movs	r3, #131	; 0x83
 8009730:	2100      	movs	r1, #0
 8009732:	6840      	ldr	r0, [r0, #4]
 8009734:	f006 f92c 	bl	800f990 <lv_obj_align>
				Cfg_Audio = 0;
 8009738:	2300      	movs	r3, #0
				lv_obj_align(bar[1], NULL, LV_ALIGN_IN_TOP_LEFT, 132, 92);
				Cfg_Audio = 2;
				break;
			case 3:
				lv_obj_align(bar[1], NULL, LV_ALIGN_IN_TOP_LEFT, 132, 111);
				Cfg_Audio = 3;
 800973a:	7023      	strb	r3, [r4, #0]
				break;
		}
		logI("Cfg_Audio: %d\n", Cfg_Audio);
 800973c:	7821      	ldrb	r1, [r4, #0]
 800973e:	4817      	ldr	r0, [pc, #92]	; (800979c <btn_audio+0x98>)
	}
}
 8009740:	b003      	add	sp, #12
 8009742:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
		logI("Cfg_Audio: %d\n", Cfg_Audio);
 8009746:	f7f7 bf91 	b.w	800166c <logI>
				lv_obj_align(bar[1], NULL, LV_ALIGN_IN_TOP_LEFT, 132, 72);
 800974a:	2348      	movs	r3, #72	; 0x48
 800974c:	4812      	ldr	r0, [pc, #72]	; (8009798 <btn_audio+0x94>)
 800974e:	9300      	str	r3, [sp, #0]
 8009750:	2201      	movs	r2, #1
 8009752:	2384      	movs	r3, #132	; 0x84
 8009754:	2100      	movs	r1, #0
 8009756:	6840      	ldr	r0, [r0, #4]
 8009758:	f006 f91a 	bl	800f990 <lv_obj_align>
				Cfg_Audio = 1;
 800975c:	2301      	movs	r3, #1
 800975e:	e7ec      	b.n	800973a <btn_audio+0x36>
				lv_obj_align(bar[1], NULL, LV_ALIGN_IN_TOP_LEFT, 132, 92);
 8009760:	235c      	movs	r3, #92	; 0x5c
 8009762:	480d      	ldr	r0, [pc, #52]	; (8009798 <btn_audio+0x94>)
 8009764:	9300      	str	r3, [sp, #0]
 8009766:	2201      	movs	r2, #1
 8009768:	2384      	movs	r3, #132	; 0x84
 800976a:	2100      	movs	r1, #0
 800976c:	6840      	ldr	r0, [r0, #4]
 800976e:	f006 f90f 	bl	800f990 <lv_obj_align>
				Cfg_Audio = 2;
 8009772:	2302      	movs	r3, #2
 8009774:	e7e1      	b.n	800973a <btn_audio+0x36>
				lv_obj_align(bar[1], NULL, LV_ALIGN_IN_TOP_LEFT, 132, 111);
 8009776:	236f      	movs	r3, #111	; 0x6f
 8009778:	4807      	ldr	r0, [pc, #28]	; (8009798 <btn_audio+0x94>)
 800977a:	9300      	str	r3, [sp, #0]
 800977c:	2201      	movs	r2, #1
 800977e:	2384      	movs	r3, #132	; 0x84
 8009780:	2100      	movs	r1, #0
 8009782:	6840      	ldr	r0, [r0, #4]
 8009784:	f006 f904 	bl	800f990 <lv_obj_align>
				Cfg_Audio = 3;
 8009788:	2303      	movs	r3, #3
 800978a:	e7d6      	b.n	800973a <btn_audio+0x36>
}
 800978c:	b003      	add	sp, #12
 800978e:	bd30      	pop	{r4, r5, pc}
 8009790:	0802c7ea 	.word	0x0802c7ea
 8009794:	2000343a 	.word	0x2000343a
 8009798:	200051dc 	.word	0x200051dc
 800979c:	0802c804 	.word	0x0802c804

080097a0 <btn_stereo>:
	if(event == LV_EVENT_RELEASED) {
 80097a0:	2907      	cmp	r1, #7
{
 80097a2:	b537      	push	{r0, r1, r2, r4, r5, lr}
	if(event == LV_EVENT_RELEASED) {
 80097a4:	d127      	bne.n	80097f6 <btn_stereo+0x56>
		uint32_t id = lv_obj_get_user_data(btn);
 80097a6:	f006 feec 	bl	8010582 <lv_obj_get_user_data>
		logI("Button Stereo %d Released\n" , id);
 80097aa:	4601      	mov	r1, r0
		uint32_t id = lv_obj_get_user_data(btn);
 80097ac:	4604      	mov	r4, r0
		logI("Button Stereo %d Released\n" , id);
 80097ae:	4813      	ldr	r0, [pc, #76]	; (80097fc <btn_stereo+0x5c>)
 80097b0:	4d13      	ldr	r5, [pc, #76]	; (8009800 <btn_stereo+0x60>)
 80097b2:	f7f7 ff5b 	bl	800166c <logI>
		if(id == 0) {
 80097b6:	b98c      	cbnz	r4, 80097dc <btn_stereo+0x3c>
			lv_obj_align(bar[0], NULL, LV_ALIGN_IN_TOP_LEFT, 54, 68);
 80097b8:	2344      	movs	r3, #68	; 0x44
 80097ba:	4812      	ldr	r0, [pc, #72]	; (8009804 <btn_stereo+0x64>)
 80097bc:	9300      	str	r3, [sp, #0]
 80097be:	2201      	movs	r2, #1
 80097c0:	2336      	movs	r3, #54	; 0x36
 80097c2:	4621      	mov	r1, r4
 80097c4:	6800      	ldr	r0, [r0, #0]
 80097c6:	f006 f8e3 	bl	800f990 <lv_obj_align>
			Cfg_Stereo = 1;
 80097ca:	2301      	movs	r3, #1
			Cfg_Stereo = 0;
 80097cc:	702b      	strb	r3, [r5, #0]
		logI("Cfg_Stereo: %d\n", Cfg_Stereo);
 80097ce:	7829      	ldrb	r1, [r5, #0]
 80097d0:	480d      	ldr	r0, [pc, #52]	; (8009808 <btn_stereo+0x68>)
}
 80097d2:	b003      	add	sp, #12
 80097d4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
		logI("Cfg_Stereo: %d\n", Cfg_Stereo);
 80097d8:	f7f7 bf48 	b.w	800166c <logI>
		else if(id == 1) {
 80097dc:	2c01      	cmp	r4, #1
 80097de:	d1f6      	bne.n	80097ce <btn_stereo+0x2e>
			lv_obj_align(bar[0], NULL, LV_ALIGN_IN_TOP_LEFT, 54, 88);
 80097e0:	2358      	movs	r3, #88	; 0x58
 80097e2:	4808      	ldr	r0, [pc, #32]	; (8009804 <btn_stereo+0x64>)
 80097e4:	9300      	str	r3, [sp, #0]
 80097e6:	4622      	mov	r2, r4
 80097e8:	2336      	movs	r3, #54	; 0x36
 80097ea:	2100      	movs	r1, #0
 80097ec:	6800      	ldr	r0, [r0, #0]
 80097ee:	f006 f8cf 	bl	800f990 <lv_obj_align>
			Cfg_Stereo = 0;
 80097f2:	2300      	movs	r3, #0
 80097f4:	e7ea      	b.n	80097cc <btn_stereo+0x2c>
}
 80097f6:	b003      	add	sp, #12
 80097f8:	bd30      	pop	{r4, r5, pc}
 80097fa:	bf00      	nop
 80097fc:	0802c920 	.word	0x0802c920
 8009800:	20000000 	.word	0x20000000
 8009804:	200051dc 	.word	0x200051dc
 8009808:	0802c93b 	.word	0x0802c93b

0800980c <btn_processador>:
	}
}

static void btn_processador(lv_obj_t * btn, lv_event_t event)
{
	if(event == LV_EVENT_RELEASED) {
 800980c:	2907      	cmp	r1, #7
{
 800980e:	b537      	push	{r0, r1, r2, r4, r5, lr}
	if(event == LV_EVENT_RELEASED) {
 8009810:	d127      	bne.n	8009862 <btn_processador+0x56>
		uint32_t id = lv_obj_get_user_data(btn);
 8009812:	f006 feb6 	bl	8010582 <lv_obj_get_user_data>
		logI("Button Processador %d Released\n" , id);
 8009816:	4601      	mov	r1, r0
		uint32_t id = lv_obj_get_user_data(btn);
 8009818:	4604      	mov	r4, r0
		logI("Button Processador %d Released\n" , id);
 800981a:	4813      	ldr	r0, [pc, #76]	; (8009868 <btn_processador+0x5c>)
 800981c:	4d13      	ldr	r5, [pc, #76]	; (800986c <btn_processador+0x60>)
 800981e:	f7f7 ff25 	bl	800166c <logI>
		if(id == 0) {
 8009822:	b98c      	cbnz	r4, 8009848 <btn_processador+0x3c>
			lv_obj_align(bar[1], NULL, LV_ALIGN_IN_TOP_LEFT, 132, 68);
 8009824:	2344      	movs	r3, #68	; 0x44
 8009826:	4812      	ldr	r0, [pc, #72]	; (8009870 <btn_processador+0x64>)
 8009828:	9300      	str	r3, [sp, #0]
 800982a:	2201      	movs	r2, #1
 800982c:	2384      	movs	r3, #132	; 0x84
 800982e:	4621      	mov	r1, r4
 8009830:	6840      	ldr	r0, [r0, #4]
 8009832:	f006 f8ad 	bl	800f990 <lv_obj_align>
			Cfg_Processador = 1;
 8009836:	2301      	movs	r3, #1
		}
		else if(id == 1) {
			lv_obj_align(bar[1], NULL, LV_ALIGN_IN_TOP_LEFT, 132, 88);
			Cfg_Processador = 0;
 8009838:	702b      	strb	r3, [r5, #0]
		}
		logI("Cfg_Processador: %d\n", Cfg_Processador);
 800983a:	7829      	ldrb	r1, [r5, #0]
 800983c:	480d      	ldr	r0, [pc, #52]	; (8009874 <btn_processador+0x68>)
	}
}
 800983e:	b003      	add	sp, #12
 8009840:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
		logI("Cfg_Processador: %d\n", Cfg_Processador);
 8009844:	f7f7 bf12 	b.w	800166c <logI>
		else if(id == 1) {
 8009848:	2c01      	cmp	r4, #1
 800984a:	d1f6      	bne.n	800983a <btn_processador+0x2e>
			lv_obj_align(bar[1], NULL, LV_ALIGN_IN_TOP_LEFT, 132, 88);
 800984c:	2358      	movs	r3, #88	; 0x58
 800984e:	4808      	ldr	r0, [pc, #32]	; (8009870 <btn_processador+0x64>)
 8009850:	9300      	str	r3, [sp, #0]
 8009852:	4622      	mov	r2, r4
 8009854:	2384      	movs	r3, #132	; 0x84
 8009856:	2100      	movs	r1, #0
 8009858:	6840      	ldr	r0, [r0, #4]
 800985a:	f006 f899 	bl	800f990 <lv_obj_align>
			Cfg_Processador = 0;
 800985e:	2300      	movs	r3, #0
 8009860:	e7ea      	b.n	8009838 <btn_processador+0x2c>
}
 8009862:	b003      	add	sp, #12
 8009864:	bd30      	pop	{r4, r5, pc}
 8009866:	bf00      	nop
 8009868:	0802c8eb 	.word	0x0802c8eb
 800986c:	2000343d 	.word	0x2000343d
 8009870:	200051dc 	.word	0x200051dc
 8009874:	0802c90b 	.word	0x0802c90b

08009878 <btn_emphase>:
	if(event == LV_EVENT_RELEASED) {
 8009878:	2907      	cmp	r1, #7
{
 800987a:	b537      	push	{r0, r1, r2, r4, r5, lr}
	if(event == LV_EVENT_RELEASED) {
 800987c:	d127      	bne.n	80098ce <btn_emphase+0x56>
		uint32_t id = lv_obj_get_user_data(btn);
 800987e:	f006 fe80 	bl	8010582 <lv_obj_get_user_data>
		logI("Button Emphase %d Released\n" , id);
 8009882:	4601      	mov	r1, r0
		uint32_t id = lv_obj_get_user_data(btn);
 8009884:	4604      	mov	r4, r0
		logI("Button Emphase %d Released\n" , id);
 8009886:	4813      	ldr	r0, [pc, #76]	; (80098d4 <btn_emphase+0x5c>)
 8009888:	4d13      	ldr	r5, [pc, #76]	; (80098d8 <btn_emphase+0x60>)
 800988a:	f7f7 feef 	bl	800166c <logI>
		if(id == 0) {
 800988e:	b98c      	cbnz	r4, 80098b4 <btn_emphase+0x3c>
			lv_obj_align(bar[0], NULL, LV_ALIGN_IN_TOP_LEFT, 54, 68);
 8009890:	2344      	movs	r3, #68	; 0x44
 8009892:	4812      	ldr	r0, [pc, #72]	; (80098dc <btn_emphase+0x64>)
 8009894:	9300      	str	r3, [sp, #0]
 8009896:	2201      	movs	r2, #1
 8009898:	2336      	movs	r3, #54	; 0x36
 800989a:	4621      	mov	r1, r4
 800989c:	6800      	ldr	r0, [r0, #0]
 800989e:	f006 f877 	bl	800f990 <lv_obj_align>
			Cfg_Emphase = 1;
 80098a2:	2301      	movs	r3, #1
			Cfg_Emphase = 0;
 80098a4:	702b      	strb	r3, [r5, #0]
		logI("Cfg_Emphase: %d\n", Cfg_Emphase);
 80098a6:	7829      	ldrb	r1, [r5, #0]
 80098a8:	480d      	ldr	r0, [pc, #52]	; (80098e0 <btn_emphase+0x68>)
}
 80098aa:	b003      	add	sp, #12
 80098ac:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
		logI("Cfg_Emphase: %d\n", Cfg_Emphase);
 80098b0:	f7f7 bedc 	b.w	800166c <logI>
		else if(id == 1) {
 80098b4:	2c01      	cmp	r4, #1
 80098b6:	d1f6      	bne.n	80098a6 <btn_emphase+0x2e>
			lv_obj_align(bar[0], NULL, LV_ALIGN_IN_TOP_LEFT, 54, 88);
 80098b8:	2358      	movs	r3, #88	; 0x58
 80098ba:	4808      	ldr	r0, [pc, #32]	; (80098dc <btn_emphase+0x64>)
 80098bc:	9300      	str	r3, [sp, #0]
 80098be:	4622      	mov	r2, r4
 80098c0:	2336      	movs	r3, #54	; 0x36
 80098c2:	2100      	movs	r1, #0
 80098c4:	6800      	ldr	r0, [r0, #0]
 80098c6:	f006 f863 	bl	800f990 <lv_obj_align>
			Cfg_Emphase = 0;
 80098ca:	2300      	movs	r3, #0
 80098cc:	e7ea      	b.n	80098a4 <btn_emphase+0x2c>
}
 80098ce:	b003      	add	sp, #12
 80098d0:	bd30      	pop	{r4, r5, pc}
 80098d2:	bf00      	nop
 80098d4:	0802c840 	.word	0x0802c840
 80098d8:	2000343c 	.word	0x2000343c
 80098dc:	200051dc 	.word	0x200051dc
 80098e0:	0802c85c 	.word	0x0802c85c

080098e4 <btn_clipper>:

static void btn_clipper(lv_obj_t * btn, lv_event_t event)
{
	if(event == LV_EVENT_RELEASED) {
 80098e4:	2907      	cmp	r1, #7
{
 80098e6:	b537      	push	{r0, r1, r2, r4, r5, lr}
	if(event == LV_EVENT_RELEASED) {
 80098e8:	d127      	bne.n	800993a <btn_clipper+0x56>
		uint32_t id = lv_obj_get_user_data(btn);
 80098ea:	f006 fe4a 	bl	8010582 <lv_obj_get_user_data>
		logI("Button Clipper %d Released\n" , id);
 80098ee:	4601      	mov	r1, r0
		uint32_t id = lv_obj_get_user_data(btn);
 80098f0:	4604      	mov	r4, r0
		logI("Button Clipper %d Released\n" , id);
 80098f2:	4813      	ldr	r0, [pc, #76]	; (8009940 <btn_clipper+0x5c>)
 80098f4:	4d13      	ldr	r5, [pc, #76]	; (8009944 <btn_clipper+0x60>)
 80098f6:	f7f7 feb9 	bl	800166c <logI>
		if(id == 0) {
 80098fa:	b98c      	cbnz	r4, 8009920 <btn_clipper+0x3c>
			lv_obj_align(bar[0], NULL, LV_ALIGN_IN_TOP_LEFT, 54, 68);
 80098fc:	2344      	movs	r3, #68	; 0x44
 80098fe:	4812      	ldr	r0, [pc, #72]	; (8009948 <btn_clipper+0x64>)
 8009900:	9300      	str	r3, [sp, #0]
 8009902:	2201      	movs	r2, #1
 8009904:	2336      	movs	r3, #54	; 0x36
 8009906:	4621      	mov	r1, r4
 8009908:	6800      	ldr	r0, [r0, #0]
 800990a:	f006 f841 	bl	800f990 <lv_obj_align>
			Cfg_Clipper = 1;
 800990e:	2301      	movs	r3, #1
		}
		else if(id == 1) {
			lv_obj_align(bar[0], NULL, LV_ALIGN_IN_TOP_LEFT, 54, 88);
			Cfg_Clipper = 0;
 8009910:	702b      	strb	r3, [r5, #0]
		}
		logI("Cfg_Clipper: %d\n", Cfg_Clipper);
 8009912:	7829      	ldrb	r1, [r5, #0]
 8009914:	480d      	ldr	r0, [pc, #52]	; (800994c <btn_clipper+0x68>)
	}
}
 8009916:	b003      	add	sp, #12
 8009918:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
		logI("Cfg_Clipper: %d\n", Cfg_Clipper);
 800991c:	f7f7 bea6 	b.w	800166c <logI>
		else if(id == 1) {
 8009920:	2c01      	cmp	r4, #1
 8009922:	d1f6      	bne.n	8009912 <btn_clipper+0x2e>
			lv_obj_align(bar[0], NULL, LV_ALIGN_IN_TOP_LEFT, 54, 88);
 8009924:	2358      	movs	r3, #88	; 0x58
 8009926:	4808      	ldr	r0, [pc, #32]	; (8009948 <btn_clipper+0x64>)
 8009928:	9300      	str	r3, [sp, #0]
 800992a:	4622      	mov	r2, r4
 800992c:	2336      	movs	r3, #54	; 0x36
 800992e:	2100      	movs	r1, #0
 8009930:	6800      	ldr	r0, [r0, #0]
 8009932:	f006 f82d 	bl	800f990 <lv_obj_align>
			Cfg_Clipper = 0;
 8009936:	2300      	movs	r3, #0
 8009938:	e7ea      	b.n	8009910 <btn_clipper+0x2c>
}
 800993a:	b003      	add	sp, #12
 800993c:	bd30      	pop	{r4, r5, pc}
 800993e:	bf00      	nop
 8009940:	0802c813 	.word	0x0802c813
 8009944:	2000343b 	.word	0x2000343b
 8009948:	200051dc 	.word	0x200051dc
 800994c:	0802c82f 	.word	0x0802c82f

08009950 <btn_event_esc>:
	if(event == LV_EVENT_APPLY) {
 8009950:	2911      	cmp	r1, #17
{
 8009952:	b508      	push	{r3, lr}
	if(event == LV_EVENT_APPLY) {
 8009954:	d107      	bne.n	8009966 <btn_event_esc+0x16>
		lv_obj_del(Tela_Audio);
 8009956:	4b04      	ldr	r3, [pc, #16]	; (8009968 <btn_event_esc+0x18>)
 8009958:	6818      	ldr	r0, [r3, #0]
 800995a:	f006 fc2c 	bl	80101b6 <lv_obj_del>
}
 800995e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		screen_sel();
 8009962:	f005 b8d5 	b.w	800eb10 <screen_sel>
 8009966:	bd08      	pop	{r3, pc}
 8009968:	200051d0 	.word	0x200051d0

0800996c <btn_mp3>:

static void btn_mp3(lv_obj_t * btn, lv_event_t event)
{
	if(event == LV_EVENT_RELEASED) {
 800996c:	2907      	cmp	r1, #7
{
 800996e:	b510      	push	{r4, lr}
	if(event == LV_EVENT_RELEASED) {
 8009970:	d143      	bne.n	80099fa <btn_mp3+0x8e>
		uint32_t id = lv_obj_get_user_data(btn);
 8009972:	f006 fe06 	bl	8010582 <lv_obj_get_user_data>
 8009976:	4604      	mov	r4, r0
		logI("Button MP3 %d Released\n" , id);
 8009978:	4601      	mov	r1, r0
 800997a:	4820      	ldr	r0, [pc, #128]	; (80099fc <btn_mp3+0x90>)
 800997c:	f7f7 fe76 	bl	800166c <logI>
		switch(id) {
 8009980:	2c03      	cmp	r4, #3
 8009982:	d820      	bhi.n	80099c6 <btn_mp3+0x5a>
 8009984:	e8df f004 	tbb	[pc, r4]
 8009988:	2f250e02 	.word	0x2f250e02
			case 0:
				logI("MP3 Function: PREV\n");
 800998c:	481c      	ldr	r0, [pc, #112]	; (8009a00 <btn_mp3+0x94>)
 800998e:	f7f7 fe6d 	bl	800166c <logI>
 * @param imgbtn pointer to an image button object
 * @param state the new state of the button (from lv_btn_state_t enum)
 */
static inline void lv_imgbtn_set_state(lv_obj_t * imgbtn, lv_btn_state_t state)
{
    lv_btn_set_state(imgbtn, state);
 8009992:	4b1c      	ldr	r3, [pc, #112]	; (8009a04 <btn_mp3+0x98>)
 8009994:	2101      	movs	r1, #1
 8009996:	6818      	ldr	r0, [r3, #0]
 8009998:	f00c fdb2 	bl	8016500 <lv_btn_set_state>
				lv_imgbtn_set_state(imgbtn2[0], LV_BTN_STATE_PR);
				mp3_status = 3;
 800999c:	2203      	movs	r2, #3
				mp3_status = 4;
				break;
			case 3:
				logI("MP3 Function: STOP\n");
				lv_imgbtn_set_state(imgbtn2[3], LV_BTN_STATE_PR);
				mp3_status = 0;
 800999e:	4b1a      	ldr	r3, [pc, #104]	; (8009a08 <btn_mp3+0x9c>)
 80099a0:	701a      	strb	r2, [r3, #0]
 80099a2:	e010      	b.n	80099c6 <btn_mp3+0x5a>
				logI("MP3 Function: PLAY-PAUSE\n");
 80099a4:	4819      	ldr	r0, [pc, #100]	; (8009a0c <btn_mp3+0xa0>)
 80099a6:	f7f7 fe61 	bl	800166c <logI>
				if(mp3_status == 1) {
 80099aa:	4b17      	ldr	r3, [pc, #92]	; (8009a08 <btn_mp3+0x9c>)
 80099ac:	781a      	ldrb	r2, [r3, #0]
 80099ae:	2a01      	cmp	r2, #1
 80099b0:	4a14      	ldr	r2, [pc, #80]	; (8009a04 <btn_mp3+0x98>)
					mp3_status = 2;
 80099b2:	bf05      	ittet	eq
 80099b4:	2102      	moveq	r1, #2
 80099b6:	7019      	strbeq	r1, [r3, #0]
					mp3_status = 1;
 80099b8:	2101      	movne	r1, #1
 80099ba:	2104      	moveq	r1, #4
 80099bc:	6850      	ldr	r0, [r2, #4]
 80099be:	bf18      	it	ne
 80099c0:	7019      	strbne	r1, [r3, #0]
 80099c2:	f00c fd9d 	bl	8016500 <lv_btn_set_state>
				break;
		}
		logI("MP3 Button: %d\n", id);
 80099c6:	4621      	mov	r1, r4
 80099c8:	4811      	ldr	r0, [pc, #68]	; (8009a10 <btn_mp3+0xa4>)
	}
}
 80099ca:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		logI("MP3 Button: %d\n", id);
 80099ce:	f7f7 be4d 	b.w	800166c <logI>
				logI("MP3 Function: NEXT\n");
 80099d2:	4810      	ldr	r0, [pc, #64]	; (8009a14 <btn_mp3+0xa8>)
 80099d4:	f7f7 fe4a 	bl	800166c <logI>
 80099d8:	4b0a      	ldr	r3, [pc, #40]	; (8009a04 <btn_mp3+0x98>)
 80099da:	2101      	movs	r1, #1
 80099dc:	6898      	ldr	r0, [r3, #8]
 80099de:	f00c fd8f 	bl	8016500 <lv_btn_set_state>
				mp3_status = 4;
 80099e2:	2204      	movs	r2, #4
 80099e4:	e7db      	b.n	800999e <btn_mp3+0x32>
				logI("MP3 Function: STOP\n");
 80099e6:	480c      	ldr	r0, [pc, #48]	; (8009a18 <btn_mp3+0xac>)
 80099e8:	f7f7 fe40 	bl	800166c <logI>
 80099ec:	4b05      	ldr	r3, [pc, #20]	; (8009a04 <btn_mp3+0x98>)
 80099ee:	2101      	movs	r1, #1
 80099f0:	68d8      	ldr	r0, [r3, #12]
 80099f2:	f00c fd85 	bl	8016500 <lv_btn_set_state>
				mp3_status = 0;
 80099f6:	2200      	movs	r2, #0
 80099f8:	e7d1      	b.n	800999e <btn_mp3+0x32>
 80099fa:	bd10      	pop	{r4, pc}
 80099fc:	0802c86d 	.word	0x0802c86d
 8009a00:	0802c885 	.word	0x0802c885
 8009a04:	200051f0 	.word	0x200051f0
 8009a08:	20004e34 	.word	0x20004e34
 8009a0c:	0802c899 	.word	0x0802c899
 8009a10:	0802c8db 	.word	0x0802c8db
 8009a14:	0802c8b3 	.word	0x0802c8b3
 8009a18:	0802c8c7 	.word	0x0802c8c7

08009a1c <btn_next>:
{
 8009a1c:	b538      	push	{r3, r4, r5, lr}
	imgbtn_next[0] = lv_imgbtn_create(Tela_Audio, NULL);
 8009a1e:	4b15      	ldr	r3, [pc, #84]	; (8009a74 <btn_next+0x58>)
	lv_imgbtn_set_src(imgbtn_next[0], LV_BTN_STATE_REL, &Btn_next);
 8009a20:	4d15      	ldr	r5, [pc, #84]	; (8009a78 <btn_next+0x5c>)
	imgbtn_next[0] = lv_imgbtn_create(Tela_Audio, NULL);
 8009a22:	6818      	ldr	r0, [r3, #0]
 8009a24:	4c15      	ldr	r4, [pc, #84]	; (8009a7c <btn_next+0x60>)
 8009a26:	2100      	movs	r1, #0
 8009a28:	f00e fbf6 	bl	8018218 <lv_imgbtn_create>
	lv_imgbtn_set_src(imgbtn_next[0], LV_BTN_STATE_REL, &Btn_next);
 8009a2c:	462a      	mov	r2, r5
 8009a2e:	2100      	movs	r1, #0
	imgbtn_next[0] = lv_imgbtn_create(Tela_Audio, NULL);
 8009a30:	6020      	str	r0, [r4, #0]
	lv_imgbtn_set_src(imgbtn_next[0], LV_BTN_STATE_REL, &Btn_next);
 8009a32:	f00e fc39 	bl	80182a8 <lv_imgbtn_set_src>
	lv_imgbtn_set_src(imgbtn_next[0], LV_BTN_STATE_TGL_REL, &Btn_next);
 8009a36:	462a      	mov	r2, r5
 8009a38:	6820      	ldr	r0, [r4, #0]
 8009a3a:	2102      	movs	r1, #2
 8009a3c:	f00e fc34 	bl	80182a8 <lv_imgbtn_set_src>
	lv_imgbtn_set_src(imgbtn_next[0], LV_BTN_STATE_TGL_PR, &Btn_next);
 8009a40:	462a      	mov	r2, r5
 8009a42:	6820      	ldr	r0, [r4, #0]
 8009a44:	2103      	movs	r1, #3
 8009a46:	f00e fc2f 	bl	80182a8 <lv_imgbtn_set_src>
	lv_imgbtn_set_src(imgbtn_next[0], LV_BTN_STATE_PR, &Btn_next);
 8009a4a:	462a      	mov	r2, r5
 8009a4c:	6820      	ldr	r0, [r4, #0]
 8009a4e:	2101      	movs	r1, #1
 8009a50:	f00e fc2a 	bl	80182a8 <lv_imgbtn_set_src>
	lv_imgbtn_set_src(imgbtn_next[0], LV_BTN_STATE_INA, &Btn_next);
 8009a54:	462a      	mov	r2, r5
 8009a56:	6820      	ldr	r0, [r4, #0]
 8009a58:	2104      	movs	r1, #4
 8009a5a:	f00e fc25 	bl	80182a8 <lv_imgbtn_set_src>
	lv_obj_set_event_cb(imgbtn_next[0], btn_event_next);
 8009a5e:	6820      	ldr	r0, [r4, #0]
 8009a60:	4907      	ldr	r1, [pc, #28]	; (8009a80 <btn_next+0x64>)
 8009a62:	f005 fdf6 	bl	800f652 <lv_obj_set_event_cb>
	lv_obj_set_pos(imgbtn_next[0], 112, 18);
 8009a66:	6820      	ldr	r0, [r4, #0]
 8009a68:	2212      	movs	r2, #18
 8009a6a:	2170      	movs	r1, #112	; 0x70
}
 8009a6c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	lv_obj_set_pos(imgbtn_next[0], 112, 18);
 8009a70:	f005 bf39 	b.w	800f8e6 <lv_obj_set_pos>
 8009a74:	200051d0 	.word	0x200051d0
 8009a78:	20001b20 	.word	0x20001b20
 8009a7c:	20005200 	.word	0x20005200
 8009a80:	0800a391 	.word	0x0800a391

08009a84 <screen_audio>:
{
 8009a84:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	Tela_Audio = lv_obj_create(NULL, NULL);
 8009a86:	2100      	movs	r1, #0
 8009a88:	4608      	mov	r0, r1
 8009a8a:	f006 f9a3 	bl	800fdd4 <lv_obj_create>
 8009a8e:	4fbe      	ldr	r7, [pc, #760]	; (8009d88 <screen_audio+0x304>)
	img_fundo = lv_img_create(Tela_Audio, NULL);
 8009a90:	4cbe      	ldr	r4, [pc, #760]	; (8009d8c <screen_audio+0x308>)
	Tela_Audio = lv_obj_create(NULL, NULL);
 8009a92:	6038      	str	r0, [r7, #0]
	img_fundo = lv_img_create(Tela_Audio, NULL);
 8009a94:	2100      	movs	r1, #0
 8009a96:	f00e fa95 	bl	8017fc4 <lv_img_create>
    lv_img_set_src(img_fundo, &tela_audio);
 8009a9a:	49bd      	ldr	r1, [pc, #756]	; (8009d90 <screen_audio+0x30c>)
	img_fundo = lv_img_create(Tela_Audio, NULL);
 8009a9c:	6020      	str	r0, [r4, #0]
    lv_img_set_src(img_fundo, &tela_audio);
 8009a9e:	f00e fa01 	bl	8017ea4 <lv_img_set_src>
    lv_obj_set_protect(img_fundo, LV_PROTECT_POS);
 8009aa2:	6820      	ldr	r0, [r4, #0]
	lv_style_copy(&style_indic_vd, &lv_style_pretty);
 8009aa4:	4dbb      	ldr	r5, [pc, #748]	; (8009d94 <screen_audio+0x310>)
	lv_style_copy(&style_indic_am, &lv_style_pretty);
 8009aa6:	4ebc      	ldr	r6, [pc, #752]	; (8009d98 <screen_audio+0x314>)
    lv_obj_set_protect(img_fundo, LV_PROTECT_POS);
 8009aa8:	2104      	movs	r1, #4
 8009aaa:	f005 fdc5 	bl	800f638 <lv_obj_set_protect>
	lv_obj_set_event_cb(img_fundo, btn_event_esc);
 8009aae:	6820      	ldr	r0, [r4, #0]
 8009ab0:	49ba      	ldr	r1, [pc, #744]	; (8009d9c <screen_audio+0x318>)
 8009ab2:	f005 fdce 	bl	800f652 <lv_obj_set_event_cb>
	lv_obj_set_click(img_fundo, 1);
 8009ab6:	6820      	ldr	r0, [r4, #0]
 8009ab8:	2101      	movs	r1, #1
 8009aba:	f005 fda1 	bl	800f600 <lv_obj_set_click>
	btn_next();
 8009abe:	f7ff ffad 	bl	8009a1c <btn_next>
	lv_style_copy(&style_indic_vd, &lv_style_pretty);
 8009ac2:	4628      	mov	r0, r5
 8009ac4:	49b6      	ldr	r1, [pc, #728]	; (8009da0 <screen_audio+0x31c>)
 8009ac6:	f007 f8cf 	bl	8010c68 <lv_style_copy>
	style_indic_vd.body.grad_color = LV_COLOR_LIME;
 8009aca:	792b      	ldrb	r3, [r5, #4]
	lv_style_copy(&style_indic_am, &lv_style_pretty);
 8009acc:	49b4      	ldr	r1, [pc, #720]	; (8009da0 <screen_audio+0x31c>)
	style_indic_vd.body.radius = 0;
 8009ace:	2400      	movs	r4, #0
	style_indic_vd.body.grad_color = LV_COLOR_LIME;
 8009ad0:	f364 0304 	bfi	r3, r4, #0, #5
 8009ad4:	712b      	strb	r3, [r5, #4]
 8009ad6:	88ab      	ldrh	r3, [r5, #4]
	style_indic_vd.body.radius = 0;
 8009ad8:	80ec      	strh	r4, [r5, #6]
	style_indic_vd.body.grad_color = LV_COLOR_LIME;
 8009ada:	f443 63fc 	orr.w	r3, r3, #2016	; 0x7e0
 8009ade:	80ab      	strh	r3, [r5, #4]
 8009ae0:	0a1b      	lsrs	r3, r3, #8
 8009ae2:	f364 03c7 	bfi	r3, r4, #3, #5
 8009ae6:	716b      	strb	r3, [r5, #5]
	style_indic_vd.body.main_color = LV_COLOR_LIME;
 8009ae8:	78ab      	ldrb	r3, [r5, #2]
 8009aea:	f364 0304 	bfi	r3, r4, #0, #5
 8009aee:	70ab      	strb	r3, [r5, #2]
 8009af0:	886b      	ldrh	r3, [r5, #2]
 8009af2:	f443 63fc 	orr.w	r3, r3, #2016	; 0x7e0
 8009af6:	806b      	strh	r3, [r5, #2]
 8009af8:	0a1b      	lsrs	r3, r3, #8
 8009afa:	f364 03c7 	bfi	r3, r4, #3, #5
 8009afe:	70eb      	strb	r3, [r5, #3]
	style_indic_vd.body.border.color = LV_COLOR_LIME;
 8009b00:	7aab      	ldrb	r3, [r5, #10]
 8009b02:	f364 0304 	bfi	r3, r4, #0, #5
 8009b06:	72ab      	strb	r3, [r5, #10]
 8009b08:	896b      	ldrh	r3, [r5, #10]
 8009b0a:	f443 63fc 	orr.w	r3, r3, #2016	; 0x7e0
 8009b0e:	816b      	strh	r3, [r5, #10]
 8009b10:	0a1b      	lsrs	r3, r3, #8
 8009b12:	f364 03c7 	bfi	r3, r4, #3, #5
 8009b16:	72eb      	strb	r3, [r5, #11]
	lv_style_copy(&style_indic_am, &lv_style_pretty);
 8009b18:	4630      	mov	r0, r6
 8009b1a:	f007 f8a5 	bl	8010c68 <lv_style_copy>
	style_indic_am.body.grad_color = LV_COLOR_YELLOW;
 8009b1e:	7933      	ldrb	r3, [r6, #4]
	style_indic_am.body.radius = 0;
 8009b20:	80f4      	strh	r4, [r6, #6]
	style_indic_am.body.grad_color = LV_COLOR_YELLOW;
 8009b22:	f364 0304 	bfi	r3, r4, #0, #5
 8009b26:	7133      	strb	r3, [r6, #4]
 8009b28:	88b3      	ldrh	r3, [r6, #4]
	lv_style_copy(&style_indic, &lv_style_pretty);
 8009b2a:	499d      	ldr	r1, [pc, #628]	; (8009da0 <screen_audio+0x31c>)
	style_indic_am.body.grad_color = LV_COLOR_YELLOW;
 8009b2c:	f443 63fc 	orr.w	r3, r3, #2016	; 0x7e0
 8009b30:	80b3      	strh	r3, [r6, #4]
 8009b32:	0a1b      	lsrs	r3, r3, #8
 8009b34:	f043 03f8 	orr.w	r3, r3, #248	; 0xf8
 8009b38:	7173      	strb	r3, [r6, #5]
	style_indic_am.body.main_color = LV_COLOR_YELLOW;
 8009b3a:	78b3      	ldrb	r3, [r6, #2]
 8009b3c:	f364 0304 	bfi	r3, r4, #0, #5
 8009b40:	70b3      	strb	r3, [r6, #2]
 8009b42:	8873      	ldrh	r3, [r6, #2]
 8009b44:	f443 63fc 	orr.w	r3, r3, #2016	; 0x7e0
 8009b48:	8073      	strh	r3, [r6, #2]
 8009b4a:	0a1b      	lsrs	r3, r3, #8
 8009b4c:	f043 03f8 	orr.w	r3, r3, #248	; 0xf8
 8009b50:	70f3      	strb	r3, [r6, #3]
	style_indic_am.body.border.color = LV_COLOR_YELLOW;
 8009b52:	7ab3      	ldrb	r3, [r6, #10]
 8009b54:	f364 0304 	bfi	r3, r4, #0, #5
 8009b58:	72b3      	strb	r3, [r6, #10]
 8009b5a:	8973      	ldrh	r3, [r6, #10]
 8009b5c:	f443 63fc 	orr.w	r3, r3, #2016	; 0x7e0
 8009b60:	8173      	strh	r3, [r6, #10]
 8009b62:	0a1b      	lsrs	r3, r3, #8
 8009b64:	f043 03f8 	orr.w	r3, r3, #248	; 0xf8
 8009b68:	72f3      	strb	r3, [r6, #11]
	lv_style_copy(&style_indic, &lv_style_pretty);
 8009b6a:	4e8e      	ldr	r6, [pc, #568]	; (8009da4 <screen_audio+0x320>)
 8009b6c:	4630      	mov	r0, r6
 8009b6e:	f007 f87b 	bl	8010c68 <lv_style_copy>
	style_indic.body.grad_color = LV_COLOR_BLACK;
 8009b72:	7933      	ldrb	r3, [r6, #4]
	style_indic.body.radius = 0;
 8009b74:	80f4      	strh	r4, [r6, #6]
	style_indic.body.grad_color = LV_COLOR_BLACK;
 8009b76:	f364 0304 	bfi	r3, r4, #0, #5
 8009b7a:	7133      	strb	r3, [r6, #4]
 8009b7c:	88b3      	ldrh	r3, [r6, #4]
 8009b7e:	f364 134a 	bfi	r3, r4, #5, #6
 8009b82:	80b3      	strh	r3, [r6, #4]
 8009b84:	0a1b      	lsrs	r3, r3, #8
 8009b86:	f364 03c7 	bfi	r3, r4, #3, #5
 8009b8a:	7173      	strb	r3, [r6, #5]
	style_indic.body.main_color = LV_COLOR_BLACK;
 8009b8c:	78b3      	ldrb	r3, [r6, #2]
 8009b8e:	f364 0304 	bfi	r3, r4, #0, #5
 8009b92:	70b3      	strb	r3, [r6, #2]
 8009b94:	8873      	ldrh	r3, [r6, #2]
 8009b96:	f364 134a 	bfi	r3, r4, #5, #6
 8009b9a:	8073      	strh	r3, [r6, #2]
 8009b9c:	0a1b      	lsrs	r3, r3, #8
 8009b9e:	f364 03c7 	bfi	r3, r4, #3, #5
 8009ba2:	70f3      	strb	r3, [r6, #3]
	style_indic.body.border.color = LV_COLOR_BLACK;
 8009ba4:	7ab3      	ldrb	r3, [r6, #10]
 8009ba6:	f364 0304 	bfi	r3, r4, #0, #5
 8009baa:	72b3      	strb	r3, [r6, #10]
 8009bac:	8973      	ldrh	r3, [r6, #10]
 8009bae:	f364 134a 	bfi	r3, r4, #5, #6
 8009bb2:	8173      	strh	r3, [r6, #10]
 8009bb4:	0a1b      	lsrs	r3, r3, #8
 8009bb6:	f364 03c7 	bfi	r3, r4, #3, #5
 8009bba:	72f3      	strb	r3, [r6, #11]
	imgbtn1[0] = lv_imgbtn_create(Tela_Audio, NULL);
 8009bbc:	4621      	mov	r1, r4
 8009bbe:	6838      	ldr	r0, [r7, #0]
 8009bc0:	4e79      	ldr	r6, [pc, #484]	; (8009da8 <screen_audio+0x324>)
 8009bc2:	f00e fb29 	bl	8018218 <lv_imgbtn_create>
	lv_obj_set_user_data(imgbtn1[0], 0);
 8009bc6:	4621      	mov	r1, r4
	imgbtn1[0] = lv_imgbtn_create(Tela_Audio, NULL);
 8009bc8:	6030      	str	r0, [r6, #0]
	lv_obj_set_user_data(imgbtn1[0], 0);
 8009bca:	f006 fcdc 	bl	8010586 <lv_obj_set_user_data>
	lv_imgbtn_set_src(imgbtn1[0], LV_BTN_STATE_REL, &Btn_stereo);
 8009bce:	6830      	ldr	r0, [r6, #0]
 8009bd0:	4a76      	ldr	r2, [pc, #472]	; (8009dac <screen_audio+0x328>)
 8009bd2:	4621      	mov	r1, r4
 8009bd4:	f00e fb68 	bl	80182a8 <lv_imgbtn_set_src>
	lv_imgbtn_set_src(imgbtn1[0], LV_BTN_STATE_TGL_REL, &Btn_stereo);
 8009bd8:	6830      	ldr	r0, [r6, #0]
 8009bda:	4a74      	ldr	r2, [pc, #464]	; (8009dac <screen_audio+0x328>)
 8009bdc:	2102      	movs	r1, #2
 8009bde:	f00e fb63 	bl	80182a8 <lv_imgbtn_set_src>
	lv_imgbtn_set_src(imgbtn1[0], LV_BTN_STATE_TGL_PR, &Btn_stereo_am);
 8009be2:	6830      	ldr	r0, [r6, #0]
 8009be4:	4a72      	ldr	r2, [pc, #456]	; (8009db0 <screen_audio+0x32c>)
 8009be6:	2103      	movs	r1, #3
 8009be8:	f00e fb5e 	bl	80182a8 <lv_imgbtn_set_src>
	lv_imgbtn_set_src(imgbtn1[0], LV_BTN_STATE_PR, &Btn_stereo_am);
 8009bec:	6830      	ldr	r0, [r6, #0]
 8009bee:	4a70      	ldr	r2, [pc, #448]	; (8009db0 <screen_audio+0x32c>)
 8009bf0:	2101      	movs	r1, #1
 8009bf2:	f00e fb59 	bl	80182a8 <lv_imgbtn_set_src>
	lv_imgbtn_set_src(imgbtn1[0], LV_BTN_STATE_INA, &Btn_stereo_am);
 8009bf6:	4a6e      	ldr	r2, [pc, #440]	; (8009db0 <screen_audio+0x32c>)
 8009bf8:	6830      	ldr	r0, [r6, #0]
 8009bfa:	2104      	movs	r1, #4
 8009bfc:	f00e fb54 	bl	80182a8 <lv_imgbtn_set_src>
	lv_obj_set_event_cb(imgbtn1[0], btn_stereo);
 8009c00:	6830      	ldr	r0, [r6, #0]
 8009c02:	496c      	ldr	r1, [pc, #432]	; (8009db4 <screen_audio+0x330>)
 8009c04:	f005 fd25 	bl	800f652 <lv_obj_set_event_cb>
	lv_obj_set_pos(imgbtn1[0], 5, 63);
 8009c08:	223f      	movs	r2, #63	; 0x3f
 8009c0a:	6830      	ldr	r0, [r6, #0]
 8009c0c:	2105      	movs	r1, #5
 8009c0e:	f005 fe6a 	bl	800f8e6 <lv_obj_set_pos>
	imgbtn1[1] = lv_imgbtn_create(Tela_Audio, imgbtn1[0]);
 8009c12:	6831      	ldr	r1, [r6, #0]
 8009c14:	6838      	ldr	r0, [r7, #0]
 8009c16:	f00e faff 	bl	8018218 <lv_imgbtn_create>
	lv_obj_set_user_data(imgbtn1[1], 1);
 8009c1a:	2101      	movs	r1, #1
	imgbtn1[1] = lv_imgbtn_create(Tela_Audio, imgbtn1[0]);
 8009c1c:	6070      	str	r0, [r6, #4]
	lv_obj_set_user_data(imgbtn1[1], 1);
 8009c1e:	f006 fcb2 	bl	8010586 <lv_obj_set_user_data>
	lv_imgbtn_set_src(imgbtn1[1], LV_BTN_STATE_REL, &Btn_mono);
 8009c22:	6870      	ldr	r0, [r6, #4]
 8009c24:	4a64      	ldr	r2, [pc, #400]	; (8009db8 <screen_audio+0x334>)
 8009c26:	4621      	mov	r1, r4
 8009c28:	f00e fb3e 	bl	80182a8 <lv_imgbtn_set_src>
	lv_imgbtn_set_src(imgbtn1[1], LV_BTN_STATE_TGL_REL, &Btn_mono);
 8009c2c:	6870      	ldr	r0, [r6, #4]
 8009c2e:	4a62      	ldr	r2, [pc, #392]	; (8009db8 <screen_audio+0x334>)
 8009c30:	2102      	movs	r1, #2
 8009c32:	f00e fb39 	bl	80182a8 <lv_imgbtn_set_src>
	lv_imgbtn_set_src(imgbtn1[1], LV_BTN_STATE_TGL_PR, &Btn_mono_am);
 8009c36:	6870      	ldr	r0, [r6, #4]
 8009c38:	4a60      	ldr	r2, [pc, #384]	; (8009dbc <screen_audio+0x338>)
 8009c3a:	2103      	movs	r1, #3
 8009c3c:	f00e fb34 	bl	80182a8 <lv_imgbtn_set_src>
	lv_imgbtn_set_src(imgbtn1[1], LV_BTN_STATE_PR, &Btn_mono_am);
 8009c40:	6870      	ldr	r0, [r6, #4]
 8009c42:	4a5e      	ldr	r2, [pc, #376]	; (8009dbc <screen_audio+0x338>)
 8009c44:	2101      	movs	r1, #1
 8009c46:	f00e fb2f 	bl	80182a8 <lv_imgbtn_set_src>
	lv_imgbtn_set_src(imgbtn1[1], LV_BTN_STATE_INA, &Btn_mono_am);
 8009c4a:	6870      	ldr	r0, [r6, #4]
 8009c4c:	4a5b      	ldr	r2, [pc, #364]	; (8009dbc <screen_audio+0x338>)
 8009c4e:	2104      	movs	r1, #4
 8009c50:	f00e fb2a 	bl	80182a8 <lv_imgbtn_set_src>
	lv_obj_set_pos(imgbtn1[1], 5, 83);
 8009c54:	2253      	movs	r2, #83	; 0x53
 8009c56:	6870      	ldr	r0, [r6, #4]
	bar[0] = lv_bar_create(Tela_Audio, NULL);
 8009c58:	4e59      	ldr	r6, [pc, #356]	; (8009dc0 <screen_audio+0x33c>)
	lv_obj_set_pos(imgbtn1[1], 5, 83);
 8009c5a:	2105      	movs	r1, #5
 8009c5c:	f005 fe43 	bl	800f8e6 <lv_obj_set_pos>
	bar[0] = lv_bar_create(Tela_Audio, NULL);
 8009c60:	4621      	mov	r1, r4
 8009c62:	6838      	ldr	r0, [r7, #0]
 8009c64:	f00c fa6a 	bl	801613c <lv_bar_create>
	lv_obj_set_size(bar[0], 16, 8);
 8009c68:	2208      	movs	r2, #8
 8009c6a:	2110      	movs	r1, #16
	bar[0] = lv_bar_create(Tela_Audio, NULL);
 8009c6c:	6030      	str	r0, [r6, #0]
	lv_obj_set_size(bar[0], 16, 8);
 8009c6e:	f006 fa2f 	bl	80100d0 <lv_obj_set_size>
	lv_bar_set_style(bar[0], LV_BAR_STYLE_BG, &style_indic_vd);
 8009c72:	462a      	mov	r2, r5
 8009c74:	4621      	mov	r1, r4
 8009c76:	6830      	ldr	r0, [r6, #0]
 8009c78:	f00c fa4a 	bl	8016110 <lv_bar_set_style>
	lv_bar_set_style(bar[0], LV_BAR_STYLE_INDIC, &style_indic_vd);
 8009c7c:	462a      	mov	r2, r5
 8009c7e:	2101      	movs	r1, #1
 8009c80:	6830      	ldr	r0, [r6, #0]
	lv_obj_align(bar[0], NULL, LV_ALIGN_IN_TOP_LEFT, 54, 88);
 8009c82:	2558      	movs	r5, #88	; 0x58
	lv_bar_set_style(bar[0], LV_BAR_STYLE_INDIC, &style_indic_vd);
 8009c84:	f00c fa44 	bl	8016110 <lv_bar_set_style>
	lv_obj_align(bar[0], NULL, LV_ALIGN_IN_TOP_LEFT, 54, 88);
 8009c88:	9500      	str	r5, [sp, #0]
 8009c8a:	2336      	movs	r3, #54	; 0x36
 8009c8c:	2201      	movs	r2, #1
 8009c8e:	4621      	mov	r1, r4
 8009c90:	6830      	ldr	r0, [r6, #0]
 8009c92:	f005 fe7d 	bl	800f990 <lv_obj_align>
	lv_bar_set_value(bar[0], 100, 0);
 8009c96:	2164      	movs	r1, #100	; 0x64
 8009c98:	4622      	mov	r2, r4
 8009c9a:	6830      	ldr	r0, [r6, #0]
 8009c9c:	f00c f9dc 	bl	8016058 <lv_bar_set_value>
	if(Cfg_Stereo) {
 8009ca0:	4b48      	ldr	r3, [pc, #288]	; (8009dc4 <screen_audio+0x340>)
 8009ca2:	7819      	ldrb	r1, [r3, #0]
 8009ca4:	2900      	cmp	r1, #0
 8009ca6:	f000 80fe 	beq.w	8009ea6 <screen_audio+0x422>
		lv_obj_align(bar[0], NULL, LV_ALIGN_IN_TOP_LEFT, 54, 68);
 8009caa:	2344      	movs	r3, #68	; 0x44
 8009cac:	9300      	str	r3, [sp, #0]
 8009cae:	2201      	movs	r2, #1
 8009cb0:	2336      	movs	r3, #54	; 0x36
 8009cb2:	4621      	mov	r1, r4
		lv_obj_align(bar[0], NULL, LV_ALIGN_IN_TOP_LEFT, 54, 88);
 8009cb4:	6830      	ldr	r0, [r6, #0]
	imgbtn2[0] = lv_imgbtn_create(Tela_Audio, NULL);
 8009cb6:	4c44      	ldr	r4, [pc, #272]	; (8009dc8 <screen_audio+0x344>)
		lv_obj_align(bar[0], NULL, LV_ALIGN_IN_TOP_LEFT, 54, 88);
 8009cb8:	f005 fe6a 	bl	800f990 <lv_obj_align>
	imgbtn2[0] = lv_imgbtn_create(Tela_Audio, NULL);
 8009cbc:	2100      	movs	r1, #0
 8009cbe:	6838      	ldr	r0, [r7, #0]
 8009cc0:	f00e faaa 	bl	8018218 <lv_imgbtn_create>
	lv_obj_set_user_data(imgbtn2[0], 0);
 8009cc4:	2100      	movs	r1, #0
	imgbtn2[0] = lv_imgbtn_create(Tela_Audio, NULL);
 8009cc6:	6020      	str	r0, [r4, #0]
	lv_obj_set_user_data(imgbtn2[0], 0);
 8009cc8:	f006 fc5d 	bl	8010586 <lv_obj_set_user_data>
	lv_imgbtn_set_src(imgbtn2[0], LV_BTN_STATE_REL, &Btn_mpxint);
 8009ccc:	4a3f      	ldr	r2, [pc, #252]	; (8009dcc <screen_audio+0x348>)
 8009cce:	6820      	ldr	r0, [r4, #0]
 8009cd0:	2100      	movs	r1, #0
 8009cd2:	f00e fae9 	bl	80182a8 <lv_imgbtn_set_src>
	lv_imgbtn_set_src(imgbtn2[0], LV_BTN_STATE_TGL_REL, &Btn_mpxint);
 8009cd6:	4a3d      	ldr	r2, [pc, #244]	; (8009dcc <screen_audio+0x348>)
 8009cd8:	6820      	ldr	r0, [r4, #0]
 8009cda:	2102      	movs	r1, #2
 8009cdc:	f00e fae4 	bl	80182a8 <lv_imgbtn_set_src>
	lv_imgbtn_set_src(imgbtn2[0], LV_BTN_STATE_TGL_PR, &Btn_mpxint_am);
 8009ce0:	4a3b      	ldr	r2, [pc, #236]	; (8009dd0 <screen_audio+0x34c>)
 8009ce2:	6820      	ldr	r0, [r4, #0]
 8009ce4:	2103      	movs	r1, #3
 8009ce6:	f00e fadf 	bl	80182a8 <lv_imgbtn_set_src>
	lv_imgbtn_set_src(imgbtn2[0], LV_BTN_STATE_PR, &Btn_mpxint_am);
 8009cea:	4a39      	ldr	r2, [pc, #228]	; (8009dd0 <screen_audio+0x34c>)
 8009cec:	6820      	ldr	r0, [r4, #0]
 8009cee:	2101      	movs	r1, #1
 8009cf0:	f00e fada 	bl	80182a8 <lv_imgbtn_set_src>
	lv_imgbtn_set_src(imgbtn2[0], LV_BTN_STATE_INA, &Btn_mpxint_am);
 8009cf4:	4a36      	ldr	r2, [pc, #216]	; (8009dd0 <screen_audio+0x34c>)
 8009cf6:	6820      	ldr	r0, [r4, #0]
 8009cf8:	2104      	movs	r1, #4
 8009cfa:	f00e fad5 	bl	80182a8 <lv_imgbtn_set_src>
	lv_obj_set_event_cb(imgbtn2[0], btn_audio);
 8009cfe:	4935      	ldr	r1, [pc, #212]	; (8009dd4 <screen_audio+0x350>)
 8009d00:	6820      	ldr	r0, [r4, #0]
 8009d02:	f005 fca6 	bl	800f652 <lv_obj_set_event_cb>
	lv_obj_set_pos(imgbtn2[0], 82, 47);
 8009d06:	222f      	movs	r2, #47	; 0x2f
 8009d08:	2152      	movs	r1, #82	; 0x52
 8009d0a:	6820      	ldr	r0, [r4, #0]
 8009d0c:	f005 fdeb 	bl	800f8e6 <lv_obj_set_pos>
	imgbtn2[1] = lv_imgbtn_create(Tela_Audio, imgbtn2[0]);
 8009d10:	6821      	ldr	r1, [r4, #0]
 8009d12:	6838      	ldr	r0, [r7, #0]
 8009d14:	f00e fa80 	bl	8018218 <lv_imgbtn_create>
	lv_obj_set_user_data(imgbtn2[1], 1);
 8009d18:	2101      	movs	r1, #1
	imgbtn2[1] = lv_imgbtn_create(Tela_Audio, imgbtn2[0]);
 8009d1a:	6060      	str	r0, [r4, #4]
	lv_obj_set_user_data(imgbtn2[1], 1);
 8009d1c:	f006 fc33 	bl	8010586 <lv_obj_set_user_data>
	lv_imgbtn_set_src(imgbtn2[1], LV_BTN_STATE_REL, &Btn_mpxext);
 8009d20:	4a2d      	ldr	r2, [pc, #180]	; (8009dd8 <screen_audio+0x354>)
 8009d22:	6860      	ldr	r0, [r4, #4]
 8009d24:	2100      	movs	r1, #0
 8009d26:	f00e fabf 	bl	80182a8 <lv_imgbtn_set_src>
	lv_imgbtn_set_src(imgbtn2[1], LV_BTN_STATE_TGL_REL, &Btn_mpxext);
 8009d2a:	4a2b      	ldr	r2, [pc, #172]	; (8009dd8 <screen_audio+0x354>)
 8009d2c:	6860      	ldr	r0, [r4, #4]
 8009d2e:	2102      	movs	r1, #2
 8009d30:	f00e faba 	bl	80182a8 <lv_imgbtn_set_src>
	lv_imgbtn_set_src(imgbtn2[1], LV_BTN_STATE_TGL_PR, &Btn_mpxext_am);
 8009d34:	4a29      	ldr	r2, [pc, #164]	; (8009ddc <screen_audio+0x358>)
 8009d36:	6860      	ldr	r0, [r4, #4]
 8009d38:	2103      	movs	r1, #3
 8009d3a:	f00e fab5 	bl	80182a8 <lv_imgbtn_set_src>
	lv_imgbtn_set_src(imgbtn2[1], LV_BTN_STATE_PR, &Btn_mpxext_am);
 8009d3e:	4a27      	ldr	r2, [pc, #156]	; (8009ddc <screen_audio+0x358>)
 8009d40:	6860      	ldr	r0, [r4, #4]
 8009d42:	2101      	movs	r1, #1
 8009d44:	f00e fab0 	bl	80182a8 <lv_imgbtn_set_src>
	lv_imgbtn_set_src(imgbtn2[1], LV_BTN_STATE_INA, &Btn_mpxext_am);
 8009d48:	4a24      	ldr	r2, [pc, #144]	; (8009ddc <screen_audio+0x358>)
 8009d4a:	6860      	ldr	r0, [r4, #4]
 8009d4c:	2104      	movs	r1, #4
 8009d4e:	f00e faab 	bl	80182a8 <lv_imgbtn_set_src>
	lv_obj_set_pos(imgbtn2[1], 83, 67);
 8009d52:	2243      	movs	r2, #67	; 0x43
 8009d54:	2153      	movs	r1, #83	; 0x53
 8009d56:	6860      	ldr	r0, [r4, #4]
 8009d58:	f005 fdc5 	bl	800f8e6 <lv_obj_set_pos>
	imgbtn2[2] = lv_imgbtn_create(Tela_Audio, imgbtn2[0]);
 8009d5c:	6821      	ldr	r1, [r4, #0]
 8009d5e:	6838      	ldr	r0, [r7, #0]
 8009d60:	f00e fa5a 	bl	8018218 <lv_imgbtn_create>
	lv_obj_set_user_data(imgbtn2[2], 2);
 8009d64:	2102      	movs	r1, #2
	imgbtn2[2] = lv_imgbtn_create(Tela_Audio, imgbtn2[0]);
 8009d66:	60a0      	str	r0, [r4, #8]
	lv_obj_set_user_data(imgbtn2[2], 2);
 8009d68:	f006 fc0d 	bl	8010586 <lv_obj_set_user_data>
	lv_imgbtn_set_src(imgbtn2[2], LV_BTN_STATE_REL, &Btn_mp3);
 8009d6c:	4a1c      	ldr	r2, [pc, #112]	; (8009de0 <screen_audio+0x35c>)
 8009d6e:	68a0      	ldr	r0, [r4, #8]
 8009d70:	2100      	movs	r1, #0
 8009d72:	f00e fa99 	bl	80182a8 <lv_imgbtn_set_src>
	lv_imgbtn_set_src(imgbtn2[2], LV_BTN_STATE_TGL_REL, &Btn_mp3);
 8009d76:	4a1a      	ldr	r2, [pc, #104]	; (8009de0 <screen_audio+0x35c>)
 8009d78:	68a0      	ldr	r0, [r4, #8]
 8009d7a:	2102      	movs	r1, #2
 8009d7c:	f00e fa94 	bl	80182a8 <lv_imgbtn_set_src>
	lv_imgbtn_set_src(imgbtn2[2], LV_BTN_STATE_TGL_PR, &Btn_mp3_am);
 8009d80:	4a18      	ldr	r2, [pc, #96]	; (8009de4 <screen_audio+0x360>)
 8009d82:	68a0      	ldr	r0, [r4, #8]
 8009d84:	2103      	movs	r1, #3
 8009d86:	e02f      	b.n	8009de8 <screen_audio+0x364>
 8009d88:	200051d0 	.word	0x200051d0
 8009d8c:	200051e4 	.word	0x200051e4
 8009d90:	20001bec 	.word	0x20001bec
 8009d94:	2000528c 	.word	0x2000528c
 8009d98:	20005250 	.word	0x20005250
 8009d9c:	08009951 	.word	0x08009951
 8009da0:	2000c5b8 	.word	0x2000c5b8
 8009da4:	20005214 	.word	0x20005214
 8009da8:	200051e8 	.word	0x200051e8
 8009dac:	20001bb0 	.word	0x20001bb0
 8009db0:	20001bbc 	.word	0x20001bbc
 8009db4:	080097a1 	.word	0x080097a1
 8009db8:	20001a24 	.word	0x20001a24
 8009dbc:	20001a30 	.word	0x20001a30
 8009dc0:	200051dc 	.word	0x200051dc
 8009dc4:	20000000 	.word	0x20000000
 8009dc8:	200051f0 	.word	0x200051f0
 8009dcc:	20001b08 	.word	0x20001b08
 8009dd0:	20001b14 	.word	0x20001b14
 8009dd4:	08009705 	.word	0x08009705
 8009dd8:	20001af0 	.word	0x20001af0
 8009ddc:	20001afc 	.word	0x20001afc
 8009de0:	20001a3c 	.word	0x20001a3c
 8009de4:	20001ae4 	.word	0x20001ae4
 8009de8:	f00e fa5e 	bl	80182a8 <lv_imgbtn_set_src>
	lv_imgbtn_set_src(imgbtn2[2], LV_BTN_STATE_PR, &Btn_mp3_am);
 8009dec:	4a3c      	ldr	r2, [pc, #240]	; (8009ee0 <screen_audio+0x45c>)
 8009dee:	68a0      	ldr	r0, [r4, #8]
 8009df0:	2101      	movs	r1, #1
 8009df2:	f00e fa59 	bl	80182a8 <lv_imgbtn_set_src>
	lv_imgbtn_set_src(imgbtn2[2], LV_BTN_STATE_INA, &Btn_mp3_am);
 8009df6:	4a3a      	ldr	r2, [pc, #232]	; (8009ee0 <screen_audio+0x45c>)
 8009df8:	68a0      	ldr	r0, [r4, #8]
 8009dfa:	2104      	movs	r1, #4
 8009dfc:	f00e fa54 	bl	80182a8 <lv_imgbtn_set_src>
	lv_obj_set_pos(imgbtn2[2], 83, 87);
 8009e00:	2257      	movs	r2, #87	; 0x57
 8009e02:	2153      	movs	r1, #83	; 0x53
 8009e04:	68a0      	ldr	r0, [r4, #8]
 8009e06:	f005 fd6e 	bl	800f8e6 <lv_obj_set_pos>
	imgbtn2[3] = lv_imgbtn_create(Tela_Audio, imgbtn2[0]);
 8009e0a:	6821      	ldr	r1, [r4, #0]
 8009e0c:	6838      	ldr	r0, [r7, #0]
 8009e0e:	f00e fa03 	bl	8018218 <lv_imgbtn_create>
	lv_obj_set_user_data(imgbtn2[3], 3);
 8009e12:	2103      	movs	r1, #3
	imgbtn2[3] = lv_imgbtn_create(Tela_Audio, imgbtn2[0]);
 8009e14:	60e0      	str	r0, [r4, #12]
	lv_obj_set_user_data(imgbtn2[3], 3);
 8009e16:	f006 fbb6 	bl	8010586 <lv_obj_set_user_data>
	lv_imgbtn_set_src(imgbtn2[3], LV_BTN_STATE_REL, &Btn_mic);
 8009e1a:	4a32      	ldr	r2, [pc, #200]	; (8009ee4 <screen_audio+0x460>)
 8009e1c:	68e0      	ldr	r0, [r4, #12]
 8009e1e:	2100      	movs	r1, #0
 8009e20:	f00e fa42 	bl	80182a8 <lv_imgbtn_set_src>
	lv_imgbtn_set_src(imgbtn2[3], LV_BTN_STATE_TGL_REL, &Btn_mic);
 8009e24:	4a2f      	ldr	r2, [pc, #188]	; (8009ee4 <screen_audio+0x460>)
 8009e26:	68e0      	ldr	r0, [r4, #12]
 8009e28:	2102      	movs	r1, #2
 8009e2a:	f00e fa3d 	bl	80182a8 <lv_imgbtn_set_src>
	lv_imgbtn_set_src(imgbtn2[3], LV_BTN_STATE_TGL_PR, &Btn_mic_am);
 8009e2e:	4a2e      	ldr	r2, [pc, #184]	; (8009ee8 <screen_audio+0x464>)
 8009e30:	68e0      	ldr	r0, [r4, #12]
 8009e32:	2103      	movs	r1, #3
 8009e34:	f00e fa38 	bl	80182a8 <lv_imgbtn_set_src>
	lv_imgbtn_set_src(imgbtn2[3], LV_BTN_STATE_PR, &Btn_mic_am);
 8009e38:	4a2b      	ldr	r2, [pc, #172]	; (8009ee8 <screen_audio+0x464>)
 8009e3a:	68e0      	ldr	r0, [r4, #12]
 8009e3c:	2101      	movs	r1, #1
 8009e3e:	f00e fa33 	bl	80182a8 <lv_imgbtn_set_src>
	lv_imgbtn_set_src(imgbtn2[3], LV_BTN_STATE_INA, &Btn_mic_am);
 8009e42:	4a29      	ldr	r2, [pc, #164]	; (8009ee8 <screen_audio+0x464>)
 8009e44:	68e0      	ldr	r0, [r4, #12]
 8009e46:	2104      	movs	r1, #4
 8009e48:	f00e fa2e 	bl	80182a8 <lv_imgbtn_set_src>
	lv_obj_set_pos(imgbtn2[3], 83, 106);
 8009e4c:	226a      	movs	r2, #106	; 0x6a
 8009e4e:	2153      	movs	r1, #83	; 0x53
 8009e50:	68e0      	ldr	r0, [r4, #12]
 8009e52:	f005 fd48 	bl	800f8e6 <lv_obj_set_pos>
	bar[1] = lv_bar_create(Tela_Audio, NULL);
 8009e56:	2100      	movs	r1, #0
 8009e58:	6838      	ldr	r0, [r7, #0]
 8009e5a:	f00c f96f 	bl	801613c <lv_bar_create>
	lv_obj_set_size(bar[1], 16, 8);
 8009e5e:	2208      	movs	r2, #8
 8009e60:	2110      	movs	r1, #16
	bar[1] = lv_bar_create(Tela_Audio, NULL);
 8009e62:	6070      	str	r0, [r6, #4]
	lv_obj_set_size(bar[1], 16, 8);
 8009e64:	f006 f934 	bl	80100d0 <lv_obj_set_size>
	lv_bar_set_style(bar[1], LV_BAR_STYLE_BG, &style_indic_vd);
 8009e68:	4a20      	ldr	r2, [pc, #128]	; (8009eec <screen_audio+0x468>)
 8009e6a:	6870      	ldr	r0, [r6, #4]
 8009e6c:	2100      	movs	r1, #0
 8009e6e:	f00c f94f 	bl	8016110 <lv_bar_set_style>
	lv_bar_set_style(bar[1], LV_BAR_STYLE_INDIC, &style_indic_vd);
 8009e72:	4a1e      	ldr	r2, [pc, #120]	; (8009eec <screen_audio+0x468>)
 8009e74:	6870      	ldr	r0, [r6, #4]
 8009e76:	2101      	movs	r1, #1
 8009e78:	f00c f94a 	bl	8016110 <lv_bar_set_style>
	lv_obj_align(bar[1], NULL, LV_ALIGN_IN_TOP_LEFT, 132, 51);
 8009e7c:	2333      	movs	r3, #51	; 0x33
 8009e7e:	9300      	str	r3, [sp, #0]
 8009e80:	2201      	movs	r2, #1
 8009e82:	2384      	movs	r3, #132	; 0x84
 8009e84:	2100      	movs	r1, #0
 8009e86:	6870      	ldr	r0, [r6, #4]
 8009e88:	f005 fd82 	bl	800f990 <lv_obj_align>
	lv_bar_set_value(bar[1], 100, 0);
 8009e8c:	2200      	movs	r2, #0
 8009e8e:	2164      	movs	r1, #100	; 0x64
 8009e90:	6870      	ldr	r0, [r6, #4]
 8009e92:	f00c f8e1 	bl	8016058 <lv_bar_set_value>
	switch(Cfg_Audio) {
 8009e96:	4b16      	ldr	r3, [pc, #88]	; (8009ef0 <screen_audio+0x46c>)
 8009e98:	781b      	ldrb	r3, [r3, #0]
 8009e9a:	2b03      	cmp	r3, #3
 8009e9c:	d80f      	bhi.n	8009ebe <screen_audio+0x43a>
 8009e9e:	e8df f003 	tbb	[pc, r3]
 8009ea2:	1606      	.short	0x1606
 8009ea4:	1c1a      	.short	0x1c1a
		lv_obj_align(bar[0], NULL, LV_ALIGN_IN_TOP_LEFT, 54, 88);
 8009ea6:	9500      	str	r5, [sp, #0]
 8009ea8:	2336      	movs	r3, #54	; 0x36
 8009eaa:	2201      	movs	r2, #1
 8009eac:	e702      	b.n	8009cb4 <screen_audio+0x230>
			lv_obj_align(bar[1], NULL, LV_ALIGN_IN_TOP_LEFT, 131, 52);
 8009eae:	2334      	movs	r3, #52	; 0x34
 8009eb0:	9300      	str	r3, [sp, #0]
 8009eb2:	2383      	movs	r3, #131	; 0x83
			lv_obj_align(bar[1], NULL, LV_ALIGN_IN_TOP_LEFT, 132, 111);
 8009eb4:	2201      	movs	r2, #1
 8009eb6:	2100      	movs	r1, #0
 8009eb8:	6870      	ldr	r0, [r6, #4]
 8009eba:	f005 fd69 	bl	800f990 <lv_obj_align>
 8009ebe:	6838      	ldr	r0, [r7, #0]
 8009ec0:	f005 f974 	bl	800f1ac <lv_disp_load_scr>
	TelaAtiva = TelaAudio;
 8009ec4:	4b0b      	ldr	r3, [pc, #44]	; (8009ef4 <screen_audio+0x470>)
 8009ec6:	2203      	movs	r2, #3
 8009ec8:	601a      	str	r2, [r3, #0]
}
 8009eca:	b003      	add	sp, #12
 8009ecc:	bdf0      	pop	{r4, r5, r6, r7, pc}
			lv_obj_align(bar[1], NULL, LV_ALIGN_IN_TOP_LEFT, 132, 72);
 8009ece:	2348      	movs	r3, #72	; 0x48
			lv_obj_align(bar[1], NULL, LV_ALIGN_IN_TOP_LEFT, 132, 111);
 8009ed0:	9300      	str	r3, [sp, #0]
 8009ed2:	2384      	movs	r3, #132	; 0x84
 8009ed4:	e7ee      	b.n	8009eb4 <screen_audio+0x430>
			lv_obj_align(bar[1], NULL, LV_ALIGN_IN_TOP_LEFT, 132, 92);
 8009ed6:	235c      	movs	r3, #92	; 0x5c
 8009ed8:	e7fa      	b.n	8009ed0 <screen_audio+0x44c>
			lv_obj_align(bar[1], NULL, LV_ALIGN_IN_TOP_LEFT, 132, 111);
 8009eda:	236f      	movs	r3, #111	; 0x6f
 8009edc:	e7f8      	b.n	8009ed0 <screen_audio+0x44c>
 8009ede:	bf00      	nop
 8009ee0:	20001ae4 	.word	0x20001ae4
 8009ee4:	20001a0c 	.word	0x20001a0c
 8009ee8:	20001a18 	.word	0x20001a18
 8009eec:	2000528c 	.word	0x2000528c
 8009ef0:	2000343a 	.word	0x2000343a
 8009ef4:	20003444 	.word	0x20003444

08009ef8 <btn_event_prev1>:
	if(event == LV_EVENT_APPLY) {
 8009ef8:	2911      	cmp	r1, #17
{
 8009efa:	b508      	push	{r3, lr}
	if(event == LV_EVENT_APPLY) {
 8009efc:	d107      	bne.n	8009f0e <btn_event_prev1+0x16>
		lv_obj_del(Tela_Audio_1);
 8009efe:	4b04      	ldr	r3, [pc, #16]	; (8009f10 <btn_event_prev1+0x18>)
 8009f00:	6818      	ldr	r0, [r3, #0]
 8009f02:	f006 f958 	bl	80101b6 <lv_obj_del>
}
 8009f06:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		screen_audio();
 8009f0a:	f7ff bdbb 	b.w	8009a84 <screen_audio>
 8009f0e:	bd08      	pop	{r3, pc}
 8009f10:	200051d4 	.word	0x200051d4

08009f14 <btn_next1>:
{
 8009f14:	b538      	push	{r3, r4, r5, lr}
	imgbtn_next[1] = lv_imgbtn_create(Tela_Audio, NULL);
 8009f16:	4b15      	ldr	r3, [pc, #84]	; (8009f6c <btn_next1+0x58>)
	lv_imgbtn_set_src(imgbtn_next[1], LV_BTN_STATE_REL, &Btn_next);
 8009f18:	4d15      	ldr	r5, [pc, #84]	; (8009f70 <btn_next1+0x5c>)
	imgbtn_next[1] = lv_imgbtn_create(Tela_Audio, NULL);
 8009f1a:	6818      	ldr	r0, [r3, #0]
 8009f1c:	4c15      	ldr	r4, [pc, #84]	; (8009f74 <btn_next1+0x60>)
 8009f1e:	2100      	movs	r1, #0
 8009f20:	f00e f97a 	bl	8018218 <lv_imgbtn_create>
	lv_imgbtn_set_src(imgbtn_next[1], LV_BTN_STATE_REL, &Btn_next);
 8009f24:	462a      	mov	r2, r5
 8009f26:	2100      	movs	r1, #0
	imgbtn_next[1] = lv_imgbtn_create(Tela_Audio, NULL);
 8009f28:	6060      	str	r0, [r4, #4]
	lv_imgbtn_set_src(imgbtn_next[1], LV_BTN_STATE_REL, &Btn_next);
 8009f2a:	f00e f9bd 	bl	80182a8 <lv_imgbtn_set_src>
	lv_imgbtn_set_src(imgbtn_next[1], LV_BTN_STATE_TGL_REL, &Btn_next);
 8009f2e:	462a      	mov	r2, r5
 8009f30:	6860      	ldr	r0, [r4, #4]
 8009f32:	2102      	movs	r1, #2
 8009f34:	f00e f9b8 	bl	80182a8 <lv_imgbtn_set_src>
	lv_imgbtn_set_src(imgbtn_next[1], LV_BTN_STATE_TGL_PR, &Btn_next);
 8009f38:	462a      	mov	r2, r5
 8009f3a:	6860      	ldr	r0, [r4, #4]
 8009f3c:	2103      	movs	r1, #3
 8009f3e:	f00e f9b3 	bl	80182a8 <lv_imgbtn_set_src>
	lv_imgbtn_set_src(imgbtn_next[1], LV_BTN_STATE_PR, &Btn_next);
 8009f42:	462a      	mov	r2, r5
 8009f44:	6860      	ldr	r0, [r4, #4]
 8009f46:	2101      	movs	r1, #1
 8009f48:	f00e f9ae 	bl	80182a8 <lv_imgbtn_set_src>
	lv_imgbtn_set_src(imgbtn_next[1], LV_BTN_STATE_INA, &Btn_next);
 8009f4c:	462a      	mov	r2, r5
 8009f4e:	6860      	ldr	r0, [r4, #4]
 8009f50:	2104      	movs	r1, #4
 8009f52:	f00e f9a9 	bl	80182a8 <lv_imgbtn_set_src>
	lv_obj_set_event_cb(imgbtn_next[1], btn_event_next1);
 8009f56:	6860      	ldr	r0, [r4, #4]
 8009f58:	4907      	ldr	r1, [pc, #28]	; (8009f78 <btn_next1+0x64>)
 8009f5a:	f005 fb7a 	bl	800f652 <lv_obj_set_event_cb>
	lv_obj_set_pos(imgbtn_next[1], 112, 18);
 8009f5e:	6860      	ldr	r0, [r4, #4]
 8009f60:	2212      	movs	r2, #18
 8009f62:	2170      	movs	r1, #112	; 0x70
}
 8009f64:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	lv_obj_set_pos(imgbtn_next[1], 112, 18);
 8009f68:	f005 bcbd 	b.w	800f8e6 <lv_obj_set_pos>
 8009f6c:	200051d0 	.word	0x200051d0
 8009f70:	20001b20 	.word	0x20001b20
 8009f74:	20005200 	.word	0x20005200
 8009f78:	0800a865 	.word	0x0800a865

08009f7c <btn_prev1>:
{
 8009f7c:	b538      	push	{r3, r4, r5, lr}
	imgbtn_prev[1] = lv_imgbtn_create(Tela_Audio, NULL);
 8009f7e:	4b15      	ldr	r3, [pc, #84]	; (8009fd4 <btn_prev1+0x58>)
	lv_imgbtn_set_src(imgbtn_prev[1], LV_BTN_STATE_REL, &Btn_prev);
 8009f80:	4d15      	ldr	r5, [pc, #84]	; (8009fd8 <btn_prev1+0x5c>)
	imgbtn_prev[1] = lv_imgbtn_create(Tela_Audio, NULL);
 8009f82:	6818      	ldr	r0, [r3, #0]
 8009f84:	4c15      	ldr	r4, [pc, #84]	; (8009fdc <btn_prev1+0x60>)
 8009f86:	2100      	movs	r1, #0
 8009f88:	f00e f946 	bl	8018218 <lv_imgbtn_create>
	lv_imgbtn_set_src(imgbtn_prev[1], LV_BTN_STATE_REL, &Btn_prev);
 8009f8c:	462a      	mov	r2, r5
 8009f8e:	2100      	movs	r1, #0
	imgbtn_prev[1] = lv_imgbtn_create(Tela_Audio, NULL);
 8009f90:	6060      	str	r0, [r4, #4]
	lv_imgbtn_set_src(imgbtn_prev[1], LV_BTN_STATE_REL, &Btn_prev);
 8009f92:	f00e f989 	bl	80182a8 <lv_imgbtn_set_src>
	lv_imgbtn_set_src(imgbtn_prev[1], LV_BTN_STATE_TGL_REL, &Btn_prev);
 8009f96:	462a      	mov	r2, r5
 8009f98:	6860      	ldr	r0, [r4, #4]
 8009f9a:	2102      	movs	r1, #2
 8009f9c:	f00e f984 	bl	80182a8 <lv_imgbtn_set_src>
	lv_imgbtn_set_src(imgbtn_prev[1], LV_BTN_STATE_TGL_PR, &Btn_prev);
 8009fa0:	462a      	mov	r2, r5
 8009fa2:	6860      	ldr	r0, [r4, #4]
 8009fa4:	2103      	movs	r1, #3
 8009fa6:	f00e f97f 	bl	80182a8 <lv_imgbtn_set_src>
	lv_imgbtn_set_src(imgbtn_prev[1], LV_BTN_STATE_PR, &Btn_prev);
 8009faa:	462a      	mov	r2, r5
 8009fac:	6860      	ldr	r0, [r4, #4]
 8009fae:	2101      	movs	r1, #1
 8009fb0:	f00e f97a 	bl	80182a8 <lv_imgbtn_set_src>
	lv_imgbtn_set_src(imgbtn_prev[1], LV_BTN_STATE_INA, &Btn_prev);
 8009fb4:	462a      	mov	r2, r5
 8009fb6:	6860      	ldr	r0, [r4, #4]
 8009fb8:	2104      	movs	r1, #4
 8009fba:	f00e f975 	bl	80182a8 <lv_imgbtn_set_src>
	lv_obj_set_event_cb(imgbtn_prev[1], btn_event_prev1);
 8009fbe:	6860      	ldr	r0, [r4, #4]
 8009fc0:	4907      	ldr	r1, [pc, #28]	; (8009fe0 <btn_prev1+0x64>)
 8009fc2:	f005 fb46 	bl	800f652 <lv_obj_set_event_cb>
	lv_obj_set_pos(imgbtn_prev[1], 32, 18);
 8009fc6:	6860      	ldr	r0, [r4, #4]
 8009fc8:	2212      	movs	r2, #18
 8009fca:	2120      	movs	r1, #32
}
 8009fcc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	lv_obj_set_pos(imgbtn_prev[1], 32, 18);
 8009fd0:	f005 bc89 	b.w	800f8e6 <lv_obj_set_pos>
 8009fd4:	200051d0 	.word	0x200051d0
 8009fd8:	20001ba4 	.word	0x20001ba4
 8009fdc:	20005208 	.word	0x20005208
 8009fe0:	08009ef9 	.word	0x08009ef9

08009fe4 <screen_audio_1>:
{
 8009fe4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	Tela_Audio_1 = lv_obj_create(NULL, NULL);
 8009fe6:	2100      	movs	r1, #0
 8009fe8:	4608      	mov	r0, r1
 8009fea:	f005 fef3 	bl	800fdd4 <lv_obj_create>
	lv_style_copy(&style_indic_vd, &lv_style_pretty);
 8009fee:	4dc0      	ldr	r5, [pc, #768]	; (800a2f0 <screen_audio_1+0x30c>)
	Tela_Audio_1 = lv_obj_create(NULL, NULL);
 8009ff0:	4fc0      	ldr	r7, [pc, #768]	; (800a2f4 <screen_audio_1+0x310>)
	lv_style_copy(&style_indic_vd, &lv_style_pretty);
 8009ff2:	49c1      	ldr	r1, [pc, #772]	; (800a2f8 <screen_audio_1+0x314>)
	Tela_Audio_1 = lv_obj_create(NULL, NULL);
 8009ff4:	6038      	str	r0, [r7, #0]
	lv_style_copy(&style_indic_vd, &lv_style_pretty);
 8009ff6:	4628      	mov	r0, r5
 8009ff8:	f006 fe36 	bl	8010c68 <lv_style_copy>
	style_indic_vd.body.grad_color = LV_COLOR_LIME;
 8009ffc:	792b      	ldrb	r3, [r5, #4]
	lv_style_copy(&style_indic_am, &lv_style_pretty);
 8009ffe:	4ebf      	ldr	r6, [pc, #764]	; (800a2fc <screen_audio_1+0x318>)
 800a000:	49bd      	ldr	r1, [pc, #756]	; (800a2f8 <screen_audio_1+0x314>)
	style_indic_vd.body.radius = 0;
 800a002:	2400      	movs	r4, #0
	style_indic_vd.body.grad_color = LV_COLOR_LIME;
 800a004:	f364 0304 	bfi	r3, r4, #0, #5
 800a008:	712b      	strb	r3, [r5, #4]
 800a00a:	88ab      	ldrh	r3, [r5, #4]
	style_indic_vd.body.radius = 0;
 800a00c:	80ec      	strh	r4, [r5, #6]
	style_indic_vd.body.grad_color = LV_COLOR_LIME;
 800a00e:	f443 63fc 	orr.w	r3, r3, #2016	; 0x7e0
 800a012:	80ab      	strh	r3, [r5, #4]
 800a014:	0a1b      	lsrs	r3, r3, #8
 800a016:	f364 03c7 	bfi	r3, r4, #3, #5
 800a01a:	716b      	strb	r3, [r5, #5]
	style_indic_vd.body.main_color = LV_COLOR_LIME;
 800a01c:	78ab      	ldrb	r3, [r5, #2]
 800a01e:	f364 0304 	bfi	r3, r4, #0, #5
 800a022:	70ab      	strb	r3, [r5, #2]
 800a024:	886b      	ldrh	r3, [r5, #2]
 800a026:	f443 63fc 	orr.w	r3, r3, #2016	; 0x7e0
 800a02a:	806b      	strh	r3, [r5, #2]
 800a02c:	0a1b      	lsrs	r3, r3, #8
 800a02e:	f364 03c7 	bfi	r3, r4, #3, #5
 800a032:	70eb      	strb	r3, [r5, #3]
	style_indic_vd.body.border.color = LV_COLOR_LIME;
 800a034:	7aab      	ldrb	r3, [r5, #10]
 800a036:	f364 0304 	bfi	r3, r4, #0, #5
 800a03a:	72ab      	strb	r3, [r5, #10]
 800a03c:	896b      	ldrh	r3, [r5, #10]
 800a03e:	f443 63fc 	orr.w	r3, r3, #2016	; 0x7e0
 800a042:	816b      	strh	r3, [r5, #10]
 800a044:	0a1b      	lsrs	r3, r3, #8
 800a046:	f364 03c7 	bfi	r3, r4, #3, #5
	lv_style_copy(&style_indic_am, &lv_style_pretty);
 800a04a:	4630      	mov	r0, r6
	style_indic_vd.body.border.color = LV_COLOR_LIME;
 800a04c:	72eb      	strb	r3, [r5, #11]
	lv_style_copy(&style_indic_am, &lv_style_pretty);
 800a04e:	f006 fe0b 	bl	8010c68 <lv_style_copy>
	style_indic_am.body.grad_color = LV_COLOR_YELLOW;
 800a052:	7933      	ldrb	r3, [r6, #4]
	style_indic_am.body.radius = 0;
 800a054:	80f4      	strh	r4, [r6, #6]
	style_indic_am.body.grad_color = LV_COLOR_YELLOW;
 800a056:	f364 0304 	bfi	r3, r4, #0, #5
 800a05a:	7133      	strb	r3, [r6, #4]
 800a05c:	88b3      	ldrh	r3, [r6, #4]
	lv_style_copy(&style_indic, &lv_style_pretty);
 800a05e:	49a6      	ldr	r1, [pc, #664]	; (800a2f8 <screen_audio_1+0x314>)
	style_indic_am.body.grad_color = LV_COLOR_YELLOW;
 800a060:	f443 63fc 	orr.w	r3, r3, #2016	; 0x7e0
 800a064:	80b3      	strh	r3, [r6, #4]
 800a066:	0a1b      	lsrs	r3, r3, #8
 800a068:	f043 03f8 	orr.w	r3, r3, #248	; 0xf8
 800a06c:	7173      	strb	r3, [r6, #5]
	style_indic_am.body.main_color = LV_COLOR_YELLOW;
 800a06e:	78b3      	ldrb	r3, [r6, #2]
 800a070:	f364 0304 	bfi	r3, r4, #0, #5
 800a074:	70b3      	strb	r3, [r6, #2]
 800a076:	8873      	ldrh	r3, [r6, #2]
 800a078:	f443 63fc 	orr.w	r3, r3, #2016	; 0x7e0
 800a07c:	8073      	strh	r3, [r6, #2]
 800a07e:	0a1b      	lsrs	r3, r3, #8
 800a080:	f043 03f8 	orr.w	r3, r3, #248	; 0xf8
 800a084:	70f3      	strb	r3, [r6, #3]
	style_indic_am.body.border.color = LV_COLOR_YELLOW;
 800a086:	7ab3      	ldrb	r3, [r6, #10]
 800a088:	f364 0304 	bfi	r3, r4, #0, #5
 800a08c:	72b3      	strb	r3, [r6, #10]
 800a08e:	8973      	ldrh	r3, [r6, #10]
 800a090:	f443 63fc 	orr.w	r3, r3, #2016	; 0x7e0
 800a094:	8173      	strh	r3, [r6, #10]
 800a096:	0a1b      	lsrs	r3, r3, #8
 800a098:	f043 03f8 	orr.w	r3, r3, #248	; 0xf8
 800a09c:	72f3      	strb	r3, [r6, #11]
	lv_style_copy(&style_indic, &lv_style_pretty);
 800a09e:	4e98      	ldr	r6, [pc, #608]	; (800a300 <screen_audio_1+0x31c>)
 800a0a0:	4630      	mov	r0, r6
 800a0a2:	f006 fde1 	bl	8010c68 <lv_style_copy>
	style_indic.body.grad_color = LV_COLOR_BLACK;
 800a0a6:	7933      	ldrb	r3, [r6, #4]
	style_indic.body.radius = 0;
 800a0a8:	80f4      	strh	r4, [r6, #6]
	style_indic.body.grad_color = LV_COLOR_BLACK;
 800a0aa:	f364 0304 	bfi	r3, r4, #0, #5
 800a0ae:	7133      	strb	r3, [r6, #4]
 800a0b0:	88b3      	ldrh	r3, [r6, #4]
 800a0b2:	f364 134a 	bfi	r3, r4, #5, #6
 800a0b6:	80b3      	strh	r3, [r6, #4]
 800a0b8:	0a1b      	lsrs	r3, r3, #8
 800a0ba:	f364 03c7 	bfi	r3, r4, #3, #5
 800a0be:	7173      	strb	r3, [r6, #5]
	style_indic.body.main_color = LV_COLOR_BLACK;
 800a0c0:	78b3      	ldrb	r3, [r6, #2]
 800a0c2:	f364 0304 	bfi	r3, r4, #0, #5
 800a0c6:	70b3      	strb	r3, [r6, #2]
 800a0c8:	8873      	ldrh	r3, [r6, #2]
 800a0ca:	f364 134a 	bfi	r3, r4, #5, #6
 800a0ce:	8073      	strh	r3, [r6, #2]
 800a0d0:	0a1b      	lsrs	r3, r3, #8
 800a0d2:	f364 03c7 	bfi	r3, r4, #3, #5
 800a0d6:	70f3      	strb	r3, [r6, #3]
	style_indic.body.border.color = LV_COLOR_BLACK;
 800a0d8:	7ab3      	ldrb	r3, [r6, #10]
 800a0da:	f364 0304 	bfi	r3, r4, #0, #5
 800a0de:	72b3      	strb	r3, [r6, #10]
 800a0e0:	8973      	ldrh	r3, [r6, #10]
 800a0e2:	f364 134a 	bfi	r3, r4, #5, #6
 800a0e6:	8173      	strh	r3, [r6, #10]
 800a0e8:	0a1b      	lsrs	r3, r3, #8
 800a0ea:	f364 03c7 	bfi	r3, r4, #3, #5
 800a0ee:	72f3      	strb	r3, [r6, #11]
	img_fundo = lv_img_create(Tela_Audio_1, NULL);
 800a0f0:	4621      	mov	r1, r4
 800a0f2:	6838      	ldr	r0, [r7, #0]
 800a0f4:	4e83      	ldr	r6, [pc, #524]	; (800a304 <screen_audio_1+0x320>)
 800a0f6:	f00d ff65 	bl	8017fc4 <lv_img_create>
    lv_img_set_src(img_fundo, &tela_audio_1);
 800a0fa:	4983      	ldr	r1, [pc, #524]	; (800a308 <screen_audio_1+0x324>)
	img_fundo = lv_img_create(Tela_Audio_1, NULL);
 800a0fc:	6030      	str	r0, [r6, #0]
    lv_img_set_src(img_fundo, &tela_audio_1);
 800a0fe:	f00d fed1 	bl	8017ea4 <lv_img_set_src>
    lv_obj_set_protect(img_fundo, LV_PROTECT_POS);
 800a102:	6830      	ldr	r0, [r6, #0]
	imgbtn1[0] = lv_imgbtn_create(Tela_Audio_1, NULL);
 800a104:	4e81      	ldr	r6, [pc, #516]	; (800a30c <screen_audio_1+0x328>)
    lv_obj_set_protect(img_fundo, LV_PROTECT_POS);
 800a106:	2104      	movs	r1, #4
 800a108:	f005 fa96 	bl	800f638 <lv_obj_set_protect>
	btn_next1();
 800a10c:	f7ff ff02 	bl	8009f14 <btn_next1>
	btn_prev1();
 800a110:	f7ff ff34 	bl	8009f7c <btn_prev1>
	imgbtn1[0] = lv_imgbtn_create(Tela_Audio_1, NULL);
 800a114:	4621      	mov	r1, r4
 800a116:	6838      	ldr	r0, [r7, #0]
 800a118:	f00e f87e 	bl	8018218 <lv_imgbtn_create>
	lv_obj_set_user_data(imgbtn1[0], 0);
 800a11c:	4621      	mov	r1, r4
	imgbtn1[0] = lv_imgbtn_create(Tela_Audio_1, NULL);
 800a11e:	6030      	str	r0, [r6, #0]
	lv_obj_set_user_data(imgbtn1[0], 0);
 800a120:	f006 fa31 	bl	8010586 <lv_obj_set_user_data>
	lv_imgbtn_set_src(imgbtn1[0], LV_BTN_STATE_REL, &Btn_75u);
 800a124:	6830      	ldr	r0, [r6, #0]
 800a126:	4a7a      	ldr	r2, [pc, #488]	; (800a310 <screen_audio_1+0x32c>)
 800a128:	4621      	mov	r1, r4
 800a12a:	f00e f8bd 	bl	80182a8 <lv_imgbtn_set_src>
	lv_imgbtn_set_src(imgbtn1[0], LV_BTN_STATE_TGL_REL, &Btn_75u);
 800a12e:	6830      	ldr	r0, [r6, #0]
 800a130:	4a77      	ldr	r2, [pc, #476]	; (800a310 <screen_audio_1+0x32c>)
 800a132:	2102      	movs	r1, #2
 800a134:	f00e f8b8 	bl	80182a8 <lv_imgbtn_set_src>
	lv_imgbtn_set_src(imgbtn1[0], LV_BTN_STATE_TGL_PR, &Btn_75u_am);
 800a138:	6830      	ldr	r0, [r6, #0]
 800a13a:	4a76      	ldr	r2, [pc, #472]	; (800a314 <screen_audio_1+0x330>)
 800a13c:	2103      	movs	r1, #3
 800a13e:	f00e f8b3 	bl	80182a8 <lv_imgbtn_set_src>
	lv_imgbtn_set_src(imgbtn1[0], LV_BTN_STATE_PR, &Btn_75u_am);
 800a142:	6830      	ldr	r0, [r6, #0]
 800a144:	4a73      	ldr	r2, [pc, #460]	; (800a314 <screen_audio_1+0x330>)
 800a146:	2101      	movs	r1, #1
 800a148:	f00e f8ae 	bl	80182a8 <lv_imgbtn_set_src>
	lv_imgbtn_set_src(imgbtn1[0], LV_BTN_STATE_INA, &Btn_75u_am);
 800a14c:	4a71      	ldr	r2, [pc, #452]	; (800a314 <screen_audio_1+0x330>)
 800a14e:	6830      	ldr	r0, [r6, #0]
 800a150:	2104      	movs	r1, #4
 800a152:	f00e f8a9 	bl	80182a8 <lv_imgbtn_set_src>
	lv_obj_set_event_cb(imgbtn1[0], btn_emphase);
 800a156:	6830      	ldr	r0, [r6, #0]
 800a158:	496f      	ldr	r1, [pc, #444]	; (800a318 <screen_audio_1+0x334>)
 800a15a:	f005 fa7a 	bl	800f652 <lv_obj_set_event_cb>
	lv_obj_set_pos(imgbtn1[0], 5, 63);
 800a15e:	223f      	movs	r2, #63	; 0x3f
 800a160:	6830      	ldr	r0, [r6, #0]
 800a162:	2105      	movs	r1, #5
 800a164:	f005 fbbf 	bl	800f8e6 <lv_obj_set_pos>
	imgbtn1[1] = lv_imgbtn_create(Tela_Audio_1, imgbtn1[0]);
 800a168:	6831      	ldr	r1, [r6, #0]
 800a16a:	6838      	ldr	r0, [r7, #0]
 800a16c:	f00e f854 	bl	8018218 <lv_imgbtn_create>
	lv_obj_set_user_data(imgbtn1[1], 1);
 800a170:	2101      	movs	r1, #1
	imgbtn1[1] = lv_imgbtn_create(Tela_Audio_1, imgbtn1[0]);
 800a172:	6070      	str	r0, [r6, #4]
	lv_obj_set_user_data(imgbtn1[1], 1);
 800a174:	f006 fa07 	bl	8010586 <lv_obj_set_user_data>
	lv_imgbtn_set_src(imgbtn1[1], LV_BTN_STATE_REL, &Btn_50u);
 800a178:	6870      	ldr	r0, [r6, #4]
 800a17a:	4a68      	ldr	r2, [pc, #416]	; (800a31c <screen_audio_1+0x338>)
 800a17c:	4621      	mov	r1, r4
 800a17e:	f00e f893 	bl	80182a8 <lv_imgbtn_set_src>
	lv_imgbtn_set_src(imgbtn1[1], LV_BTN_STATE_TGL_REL, &Btn_50u);
 800a182:	6870      	ldr	r0, [r6, #4]
 800a184:	4a65      	ldr	r2, [pc, #404]	; (800a31c <screen_audio_1+0x338>)
 800a186:	2102      	movs	r1, #2
 800a188:	f00e f88e 	bl	80182a8 <lv_imgbtn_set_src>
	lv_imgbtn_set_src(imgbtn1[1], LV_BTN_STATE_TGL_PR, &Btn_50u_am);
 800a18c:	6870      	ldr	r0, [r6, #4]
 800a18e:	4a64      	ldr	r2, [pc, #400]	; (800a320 <screen_audio_1+0x33c>)
 800a190:	2103      	movs	r1, #3
 800a192:	f00e f889 	bl	80182a8 <lv_imgbtn_set_src>
	lv_imgbtn_set_src(imgbtn1[1], LV_BTN_STATE_PR, &Btn_50u_am);
 800a196:	6870      	ldr	r0, [r6, #4]
 800a198:	4a61      	ldr	r2, [pc, #388]	; (800a320 <screen_audio_1+0x33c>)
 800a19a:	2101      	movs	r1, #1
 800a19c:	f00e f884 	bl	80182a8 <lv_imgbtn_set_src>
	lv_imgbtn_set_src(imgbtn1[1], LV_BTN_STATE_INA, &Btn_50u_am);
 800a1a0:	6870      	ldr	r0, [r6, #4]
 800a1a2:	4a5f      	ldr	r2, [pc, #380]	; (800a320 <screen_audio_1+0x33c>)
 800a1a4:	2104      	movs	r1, #4
 800a1a6:	f00e f87f 	bl	80182a8 <lv_imgbtn_set_src>
	lv_obj_set_pos(imgbtn1[1], 5, 83);
 800a1aa:	2253      	movs	r2, #83	; 0x53
 800a1ac:	6870      	ldr	r0, [r6, #4]
	bar[0] = lv_bar_create(Tela_Audio, NULL);
 800a1ae:	4e5d      	ldr	r6, [pc, #372]	; (800a324 <screen_audio_1+0x340>)
	lv_obj_set_pos(imgbtn1[1], 5, 83);
 800a1b0:	2105      	movs	r1, #5
 800a1b2:	f005 fb98 	bl	800f8e6 <lv_obj_set_pos>
	bar[0] = lv_bar_create(Tela_Audio, NULL);
 800a1b6:	4b5c      	ldr	r3, [pc, #368]	; (800a328 <screen_audio_1+0x344>)
 800a1b8:	4621      	mov	r1, r4
 800a1ba:	6818      	ldr	r0, [r3, #0]
 800a1bc:	f00b ffbe 	bl	801613c <lv_bar_create>
	lv_obj_set_size(bar[0], 16, 8);
 800a1c0:	2208      	movs	r2, #8
 800a1c2:	2110      	movs	r1, #16
	bar[0] = lv_bar_create(Tela_Audio, NULL);
 800a1c4:	6030      	str	r0, [r6, #0]
	lv_obj_set_size(bar[0], 16, 8);
 800a1c6:	f005 ff83 	bl	80100d0 <lv_obj_set_size>
	lv_bar_set_style(bar[0], LV_BAR_STYLE_BG, &style_indic_vd);
 800a1ca:	462a      	mov	r2, r5
 800a1cc:	4621      	mov	r1, r4
 800a1ce:	6830      	ldr	r0, [r6, #0]
 800a1d0:	f00b ff9e 	bl	8016110 <lv_bar_set_style>
	lv_bar_set_style(bar[0], LV_BAR_STYLE_INDIC, &style_indic_vd);
 800a1d4:	462a      	mov	r2, r5
 800a1d6:	2101      	movs	r1, #1
 800a1d8:	6830      	ldr	r0, [r6, #0]
 800a1da:	f00b ff99 	bl	8016110 <lv_bar_set_style>
	lv_obj_align(bar[0], NULL, LV_ALIGN_IN_TOP_LEFT, 54, 67);
 800a1de:	2343      	movs	r3, #67	; 0x43
 800a1e0:	9300      	str	r3, [sp, #0]
 800a1e2:	2201      	movs	r2, #1
 800a1e4:	2336      	movs	r3, #54	; 0x36
 800a1e6:	4621      	mov	r1, r4
 800a1e8:	6830      	ldr	r0, [r6, #0]
 800a1ea:	f005 fbd1 	bl	800f990 <lv_obj_align>
	lv_bar_set_value(bar[0], 100, 0);
 800a1ee:	2164      	movs	r1, #100	; 0x64
 800a1f0:	4622      	mov	r2, r4
 800a1f2:	6830      	ldr	r0, [r6, #0]
 800a1f4:	f00b ff30 	bl	8016058 <lv_bar_set_value>
	if(Cfg_Emphase) {
 800a1f8:	4b4c      	ldr	r3, [pc, #304]	; (800a32c <screen_audio_1+0x348>)
 800a1fa:	7819      	ldrb	r1, [r3, #0]
 800a1fc:	2900      	cmp	r1, #0
 800a1fe:	f000 80b9 	beq.w	800a374 <screen_audio_1+0x390>
		lv_obj_align(bar[0], NULL, LV_ALIGN_IN_TOP_LEFT, 54, 68);
 800a202:	2344      	movs	r3, #68	; 0x44
 800a204:	9300      	str	r3, [sp, #0]
 800a206:	2201      	movs	r2, #1
 800a208:	2336      	movs	r3, #54	; 0x36
 800a20a:	4621      	mov	r1, r4
		lv_obj_align(bar[0], NULL, LV_ALIGN_IN_TOP_LEFT, 54, 88);
 800a20c:	6830      	ldr	r0, [r6, #0]
	imgbtn2[0] = lv_imgbtn_create(Tela_Audio_1, NULL);
 800a20e:	4c48      	ldr	r4, [pc, #288]	; (800a330 <screen_audio_1+0x34c>)
		lv_obj_align(bar[0], NULL, LV_ALIGN_IN_TOP_LEFT, 54, 88);
 800a210:	f005 fbbe 	bl	800f990 <lv_obj_align>
	imgbtn2[0] = lv_imgbtn_create(Tela_Audio_1, NULL);
 800a214:	2100      	movs	r1, #0
 800a216:	6838      	ldr	r0, [r7, #0]
 800a218:	f00d fffe 	bl	8018218 <lv_imgbtn_create>
	lv_obj_set_user_data(imgbtn2[0], 0);
 800a21c:	2100      	movs	r1, #0
	imgbtn2[0] = lv_imgbtn_create(Tela_Audio_1, NULL);
 800a21e:	6020      	str	r0, [r4, #0]
	lv_obj_set_user_data(imgbtn2[0], 0);
 800a220:	f006 f9b1 	bl	8010586 <lv_obj_set_user_data>
	lv_imgbtn_set_src(imgbtn2[0], LV_BTN_STATE_REL, &Btn_on);
 800a224:	6820      	ldr	r0, [r4, #0]
 800a226:	4a43      	ldr	r2, [pc, #268]	; (800a334 <screen_audio_1+0x350>)
 800a228:	2100      	movs	r1, #0
 800a22a:	f00e f83d 	bl	80182a8 <lv_imgbtn_set_src>
	lv_imgbtn_set_src(imgbtn2[0], LV_BTN_STATE_TGL_REL, &Btn_on);
 800a22e:	6820      	ldr	r0, [r4, #0]
 800a230:	4a40      	ldr	r2, [pc, #256]	; (800a334 <screen_audio_1+0x350>)
 800a232:	2102      	movs	r1, #2
 800a234:	f00e f838 	bl	80182a8 <lv_imgbtn_set_src>
	lv_imgbtn_set_src(imgbtn2[0], LV_BTN_STATE_TGL_PR, &Btn_on_am);
 800a238:	6820      	ldr	r0, [r4, #0]
 800a23a:	4a3f      	ldr	r2, [pc, #252]	; (800a338 <screen_audio_1+0x354>)
 800a23c:	2103      	movs	r1, #3
 800a23e:	f00e f833 	bl	80182a8 <lv_imgbtn_set_src>
	lv_imgbtn_set_src(imgbtn2[0], LV_BTN_STATE_PR, &Btn_on_am);
 800a242:	6820      	ldr	r0, [r4, #0]
 800a244:	4a3c      	ldr	r2, [pc, #240]	; (800a338 <screen_audio_1+0x354>)
 800a246:	2101      	movs	r1, #1
 800a248:	f00e f82e 	bl	80182a8 <lv_imgbtn_set_src>
	lv_imgbtn_set_src(imgbtn2[0], LV_BTN_STATE_INA, &Btn_on_am);
 800a24c:	4a3a      	ldr	r2, [pc, #232]	; (800a338 <screen_audio_1+0x354>)
 800a24e:	6820      	ldr	r0, [r4, #0]
 800a250:	2104      	movs	r1, #4
 800a252:	f00e f829 	bl	80182a8 <lv_imgbtn_set_src>
	lv_obj_set_event_cb(imgbtn2[0], btn_processador);
 800a256:	6820      	ldr	r0, [r4, #0]
 800a258:	4938      	ldr	r1, [pc, #224]	; (800a33c <screen_audio_1+0x358>)
 800a25a:	f005 f9fa 	bl	800f652 <lv_obj_set_event_cb>
	lv_obj_set_pos(imgbtn2[0], 83, 63);
 800a25e:	223f      	movs	r2, #63	; 0x3f
 800a260:	6820      	ldr	r0, [r4, #0]
 800a262:	2153      	movs	r1, #83	; 0x53
 800a264:	f005 fb3f 	bl	800f8e6 <lv_obj_set_pos>
	imgbtn2[1] = lv_imgbtn_create(Tela_Audio_1, imgbtn2[0]);
 800a268:	6821      	ldr	r1, [r4, #0]
 800a26a:	6838      	ldr	r0, [r7, #0]
 800a26c:	f00d ffd4 	bl	8018218 <lv_imgbtn_create>
	lv_obj_set_user_data(imgbtn2[1], 1);
 800a270:	2101      	movs	r1, #1
	imgbtn2[1] = lv_imgbtn_create(Tela_Audio_1, imgbtn2[0]);
 800a272:	6060      	str	r0, [r4, #4]
	lv_obj_set_user_data(imgbtn2[1], 1);
 800a274:	f006 f987 	bl	8010586 <lv_obj_set_user_data>
	lv_imgbtn_set_src(imgbtn2[1], LV_BTN_STATE_REL, &Btn_off);
 800a278:	6860      	ldr	r0, [r4, #4]
 800a27a:	4a31      	ldr	r2, [pc, #196]	; (800a340 <screen_audio_1+0x35c>)
 800a27c:	2100      	movs	r1, #0
 800a27e:	f00e f813 	bl	80182a8 <lv_imgbtn_set_src>
	lv_imgbtn_set_src(imgbtn2[1], LV_BTN_STATE_TGL_REL, &Btn_off);
 800a282:	6860      	ldr	r0, [r4, #4]
 800a284:	4a2e      	ldr	r2, [pc, #184]	; (800a340 <screen_audio_1+0x35c>)
 800a286:	2102      	movs	r1, #2
 800a288:	f00e f80e 	bl	80182a8 <lv_imgbtn_set_src>
	lv_imgbtn_set_src(imgbtn2[1], LV_BTN_STATE_TGL_PR, &Btn_off_am);
 800a28c:	6860      	ldr	r0, [r4, #4]
 800a28e:	4a2d      	ldr	r2, [pc, #180]	; (800a344 <screen_audio_1+0x360>)
 800a290:	2103      	movs	r1, #3
 800a292:	f00e f809 	bl	80182a8 <lv_imgbtn_set_src>
	lv_imgbtn_set_src(imgbtn2[1], LV_BTN_STATE_PR, &Btn_off_am);
 800a296:	6860      	ldr	r0, [r4, #4]
 800a298:	4a2a      	ldr	r2, [pc, #168]	; (800a344 <screen_audio_1+0x360>)
 800a29a:	2101      	movs	r1, #1
 800a29c:	f00e f804 	bl	80182a8 <lv_imgbtn_set_src>
	lv_imgbtn_set_src(imgbtn2[1], LV_BTN_STATE_INA, &Btn_off_am);
 800a2a0:	6860      	ldr	r0, [r4, #4]
 800a2a2:	4a28      	ldr	r2, [pc, #160]	; (800a344 <screen_audio_1+0x360>)
 800a2a4:	2104      	movs	r1, #4
 800a2a6:	f00d ffff 	bl	80182a8 <lv_imgbtn_set_src>
	lv_obj_set_pos(imgbtn2[1], 83, 83);
 800a2aa:	2253      	movs	r2, #83	; 0x53
 800a2ac:	4611      	mov	r1, r2
 800a2ae:	6860      	ldr	r0, [r4, #4]
 800a2b0:	f005 fb19 	bl	800f8e6 <lv_obj_set_pos>
	bar[1] = lv_bar_create(Tela_Audio_1, NULL);
 800a2b4:	2100      	movs	r1, #0
 800a2b6:	6838      	ldr	r0, [r7, #0]
 800a2b8:	f00b ff40 	bl	801613c <lv_bar_create>
	lv_obj_set_size(bar[1], 16, 8);
 800a2bc:	2208      	movs	r2, #8
 800a2be:	2110      	movs	r1, #16
	bar[1] = lv_bar_create(Tela_Audio_1, NULL);
 800a2c0:	6070      	str	r0, [r6, #4]
	lv_obj_set_size(bar[1], 16, 8);
 800a2c2:	f005 ff05 	bl	80100d0 <lv_obj_set_size>
	lv_bar_set_style(bar[1], LV_BAR_STYLE_BG, &style_indic_vd);
 800a2c6:	4a0a      	ldr	r2, [pc, #40]	; (800a2f0 <screen_audio_1+0x30c>)
 800a2c8:	6870      	ldr	r0, [r6, #4]
 800a2ca:	2100      	movs	r1, #0
 800a2cc:	f00b ff20 	bl	8016110 <lv_bar_set_style>
	lv_obj_align(bar[1], NULL, LV_ALIGN_IN_TOP_LEFT, 132, 68);
 800a2d0:	2444      	movs	r4, #68	; 0x44
	lv_bar_set_style(bar[1], LV_BAR_STYLE_INDIC, &style_indic_vd);
 800a2d2:	4a07      	ldr	r2, [pc, #28]	; (800a2f0 <screen_audio_1+0x30c>)
 800a2d4:	6870      	ldr	r0, [r6, #4]
 800a2d6:	2101      	movs	r1, #1
 800a2d8:	f00b ff1a 	bl	8016110 <lv_bar_set_style>
	lv_obj_align(bar[1], NULL, LV_ALIGN_IN_TOP_LEFT, 132, 68);
 800a2dc:	9400      	str	r4, [sp, #0]
 800a2de:	2384      	movs	r3, #132	; 0x84
 800a2e0:	2201      	movs	r2, #1
 800a2e2:	2100      	movs	r1, #0
 800a2e4:	6870      	ldr	r0, [r6, #4]
 800a2e6:	f005 fb53 	bl	800f990 <lv_obj_align>
	lv_bar_set_value(bar[1], 100, 0);
 800a2ea:	2164      	movs	r1, #100	; 0x64
 800a2ec:	e02c      	b.n	800a348 <screen_audio_1+0x364>
 800a2ee:	bf00      	nop
 800a2f0:	2000528c 	.word	0x2000528c
 800a2f4:	200051d4 	.word	0x200051d4
 800a2f8:	2000c5b8 	.word	0x2000c5b8
 800a2fc:	20005250 	.word	0x20005250
 800a300:	20005214 	.word	0x20005214
 800a304:	200051e4 	.word	0x200051e4
 800a308:	20001bf8 	.word	0x20001bf8
 800a30c:	200051e8 	.word	0x200051e8
 800a310:	20001994 	.word	0x20001994
 800a314:	200019a0 	.word	0x200019a0
 800a318:	08009879 	.word	0x08009879
 800a31c:	2000197c 	.word	0x2000197c
 800a320:	20001988 	.word	0x20001988
 800a324:	200051dc 	.word	0x200051dc
 800a328:	200051d0 	.word	0x200051d0
 800a32c:	2000343c 	.word	0x2000343c
 800a330:	200051f0 	.word	0x200051f0
 800a334:	20001b44 	.word	0x20001b44
 800a338:	20001b50 	.word	0x20001b50
 800a33c:	0800980d 	.word	0x0800980d
 800a340:	20001b2c 	.word	0x20001b2c
 800a344:	20001b38 	.word	0x20001b38
 800a348:	2200      	movs	r2, #0
 800a34a:	6870      	ldr	r0, [r6, #4]
 800a34c:	f00b fe84 	bl	8016058 <lv_bar_set_value>
	if(Cfg_Processador) {
 800a350:	4b0d      	ldr	r3, [pc, #52]	; (800a388 <screen_audio_1+0x3a4>)
 800a352:	7819      	ldrb	r1, [r3, #0]
 800a354:	b199      	cbz	r1, 800a37e <screen_audio_1+0x39a>
		lv_obj_align(bar[1], NULL, LV_ALIGN_IN_TOP_LEFT, 132, 68);
 800a356:	9400      	str	r4, [sp, #0]
 800a358:	2384      	movs	r3, #132	; 0x84
 800a35a:	2201      	movs	r2, #1
 800a35c:	2100      	movs	r1, #0
		lv_obj_align(bar[1], NULL, LV_ALIGN_IN_TOP_LEFT, 132, 88);
 800a35e:	6870      	ldr	r0, [r6, #4]
 800a360:	f005 fb16 	bl	800f990 <lv_obj_align>
 800a364:	6838      	ldr	r0, [r7, #0]
 800a366:	f004 ff21 	bl	800f1ac <lv_disp_load_scr>
	TelaAtiva = TelaAudio_1;
 800a36a:	4b08      	ldr	r3, [pc, #32]	; (800a38c <screen_audio_1+0x3a8>)
 800a36c:	2204      	movs	r2, #4
 800a36e:	601a      	str	r2, [r3, #0]
}
 800a370:	b003      	add	sp, #12
 800a372:	bdf0      	pop	{r4, r5, r6, r7, pc}
		lv_obj_align(bar[0], NULL, LV_ALIGN_IN_TOP_LEFT, 54, 88);
 800a374:	2358      	movs	r3, #88	; 0x58
 800a376:	9300      	str	r3, [sp, #0]
 800a378:	2201      	movs	r2, #1
 800a37a:	2336      	movs	r3, #54	; 0x36
 800a37c:	e746      	b.n	800a20c <screen_audio_1+0x228>
		lv_obj_align(bar[1], NULL, LV_ALIGN_IN_TOP_LEFT, 132, 88);
 800a37e:	2358      	movs	r3, #88	; 0x58
 800a380:	9300      	str	r3, [sp, #0]
 800a382:	2201      	movs	r2, #1
 800a384:	2384      	movs	r3, #132	; 0x84
 800a386:	e7ea      	b.n	800a35e <screen_audio_1+0x37a>
 800a388:	2000343d 	.word	0x2000343d
 800a38c:	20003444 	.word	0x20003444

0800a390 <btn_event_next>:
	if(event == LV_EVENT_APPLY) {
 800a390:	2911      	cmp	r1, #17
{
 800a392:	b508      	push	{r3, lr}
	if(event == LV_EVENT_APPLY) {
 800a394:	d107      	bne.n	800a3a6 <btn_event_next+0x16>
		lv_obj_del(Tela_Audio);
 800a396:	4b04      	ldr	r3, [pc, #16]	; (800a3a8 <btn_event_next+0x18>)
 800a398:	6818      	ldr	r0, [r3, #0]
 800a39a:	f005 ff0c 	bl	80101b6 <lv_obj_del>
}
 800a39e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		screen_audio_1();
 800a3a2:	f7ff be1f 	b.w	8009fe4 <screen_audio_1>
 800a3a6:	bd08      	pop	{r3, pc}
 800a3a8:	200051d0 	.word	0x200051d0

0800a3ac <btn_event_prev2>:
	if(event == LV_EVENT_APPLY) {
 800a3ac:	2911      	cmp	r1, #17
{
 800a3ae:	b508      	push	{r3, lr}
	if(event == LV_EVENT_APPLY) {
 800a3b0:	d107      	bne.n	800a3c2 <btn_event_prev2+0x16>
		lv_obj_del(Tela_Audio_2);
 800a3b2:	4b04      	ldr	r3, [pc, #16]	; (800a3c4 <btn_event_prev2+0x18>)
 800a3b4:	6818      	ldr	r0, [r3, #0]
 800a3b6:	f005 fefe 	bl	80101b6 <lv_obj_del>
}
 800a3ba:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		screen_audio_1();
 800a3be:	f7ff be11 	b.w	8009fe4 <screen_audio_1>
 800a3c2:	bd08      	pop	{r3, pc}
 800a3c4:	200051d8 	.word	0x200051d8

0800a3c8 <btn_prev2>:
{
 800a3c8:	b538      	push	{r3, r4, r5, lr}
	imgbtn_prev[2] = lv_imgbtn_create(Tela_Audio, NULL);
 800a3ca:	4b15      	ldr	r3, [pc, #84]	; (800a420 <btn_prev2+0x58>)
	lv_imgbtn_set_src(imgbtn_prev[2], LV_BTN_STATE_REL, &Btn_prev);
 800a3cc:	4d15      	ldr	r5, [pc, #84]	; (800a424 <btn_prev2+0x5c>)
	imgbtn_prev[2] = lv_imgbtn_create(Tela_Audio, NULL);
 800a3ce:	6818      	ldr	r0, [r3, #0]
 800a3d0:	4c15      	ldr	r4, [pc, #84]	; (800a428 <btn_prev2+0x60>)
 800a3d2:	2100      	movs	r1, #0
 800a3d4:	f00d ff20 	bl	8018218 <lv_imgbtn_create>
	lv_imgbtn_set_src(imgbtn_prev[2], LV_BTN_STATE_REL, &Btn_prev);
 800a3d8:	462a      	mov	r2, r5
 800a3da:	2100      	movs	r1, #0
	imgbtn_prev[2] = lv_imgbtn_create(Tela_Audio, NULL);
 800a3dc:	60a0      	str	r0, [r4, #8]
	lv_imgbtn_set_src(imgbtn_prev[2], LV_BTN_STATE_REL, &Btn_prev);
 800a3de:	f00d ff63 	bl	80182a8 <lv_imgbtn_set_src>
	lv_imgbtn_set_src(imgbtn_prev[2], LV_BTN_STATE_TGL_REL, &Btn_prev);
 800a3e2:	462a      	mov	r2, r5
 800a3e4:	68a0      	ldr	r0, [r4, #8]
 800a3e6:	2102      	movs	r1, #2
 800a3e8:	f00d ff5e 	bl	80182a8 <lv_imgbtn_set_src>
	lv_imgbtn_set_src(imgbtn_prev[2], LV_BTN_STATE_TGL_PR, &Btn_prev);
 800a3ec:	462a      	mov	r2, r5
 800a3ee:	68a0      	ldr	r0, [r4, #8]
 800a3f0:	2103      	movs	r1, #3
 800a3f2:	f00d ff59 	bl	80182a8 <lv_imgbtn_set_src>
	lv_imgbtn_set_src(imgbtn_prev[2], LV_BTN_STATE_PR, &Btn_prev);
 800a3f6:	462a      	mov	r2, r5
 800a3f8:	68a0      	ldr	r0, [r4, #8]
 800a3fa:	2101      	movs	r1, #1
 800a3fc:	f00d ff54 	bl	80182a8 <lv_imgbtn_set_src>
	lv_imgbtn_set_src(imgbtn_prev[2], LV_BTN_STATE_INA, &Btn_prev);
 800a400:	462a      	mov	r2, r5
 800a402:	68a0      	ldr	r0, [r4, #8]
 800a404:	2104      	movs	r1, #4
 800a406:	f00d ff4f 	bl	80182a8 <lv_imgbtn_set_src>
	lv_obj_set_event_cb(imgbtn_prev[2], btn_event_prev2);
 800a40a:	68a0      	ldr	r0, [r4, #8]
 800a40c:	4907      	ldr	r1, [pc, #28]	; (800a42c <btn_prev2+0x64>)
 800a40e:	f005 f920 	bl	800f652 <lv_obj_set_event_cb>
	lv_obj_set_pos(imgbtn_prev[2], 32, 18);
 800a412:	68a0      	ldr	r0, [r4, #8]
 800a414:	2212      	movs	r2, #18
 800a416:	2120      	movs	r1, #32
}
 800a418:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	lv_obj_set_pos(imgbtn_prev[2], 32, 18);
 800a41c:	f005 ba63 	b.w	800f8e6 <lv_obj_set_pos>
 800a420:	200051d0 	.word	0x200051d0
 800a424:	20001ba4 	.word	0x20001ba4
 800a428:	20005208 	.word	0x20005208
 800a42c:	0800a3ad 	.word	0x0800a3ad

0800a430 <screen_audio_2>:
{
 800a430:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	Tela_Audio_2 = lv_obj_create(NULL, NULL);
 800a432:	2100      	movs	r1, #0
 800a434:	4608      	mov	r0, r1
 800a436:	f005 fccd 	bl	800fdd4 <lv_obj_create>
	lv_style_copy(&style_indic_vd, &lv_style_pretty);
 800a43a:	4dbe      	ldr	r5, [pc, #760]	; (800a734 <screen_audio_2+0x304>)
	Tela_Audio_2 = lv_obj_create(NULL, NULL);
 800a43c:	4fbe      	ldr	r7, [pc, #760]	; (800a738 <screen_audio_2+0x308>)
	lv_style_copy(&style_indic_vd, &lv_style_pretty);
 800a43e:	49bf      	ldr	r1, [pc, #764]	; (800a73c <screen_audio_2+0x30c>)
	Tela_Audio_2 = lv_obj_create(NULL, NULL);
 800a440:	6038      	str	r0, [r7, #0]
	lv_style_copy(&style_indic_vd, &lv_style_pretty);
 800a442:	4628      	mov	r0, r5
 800a444:	f006 fc10 	bl	8010c68 <lv_style_copy>
	style_indic_vd.body.grad_color = LV_COLOR_LIME;
 800a448:	792b      	ldrb	r3, [r5, #4]
	lv_style_copy(&style_indic_am, &lv_style_pretty);
 800a44a:	4ebd      	ldr	r6, [pc, #756]	; (800a740 <screen_audio_2+0x310>)
 800a44c:	49bb      	ldr	r1, [pc, #748]	; (800a73c <screen_audio_2+0x30c>)
	style_indic_vd.body.radius = 0;
 800a44e:	2400      	movs	r4, #0
	style_indic_vd.body.grad_color = LV_COLOR_LIME;
 800a450:	f364 0304 	bfi	r3, r4, #0, #5
 800a454:	712b      	strb	r3, [r5, #4]
 800a456:	88ab      	ldrh	r3, [r5, #4]
	style_indic_vd.body.radius = 0;
 800a458:	80ec      	strh	r4, [r5, #6]
	style_indic_vd.body.grad_color = LV_COLOR_LIME;
 800a45a:	f443 63fc 	orr.w	r3, r3, #2016	; 0x7e0
 800a45e:	80ab      	strh	r3, [r5, #4]
 800a460:	0a1b      	lsrs	r3, r3, #8
 800a462:	f364 03c7 	bfi	r3, r4, #3, #5
 800a466:	716b      	strb	r3, [r5, #5]
	style_indic_vd.body.main_color = LV_COLOR_LIME;
 800a468:	78ab      	ldrb	r3, [r5, #2]
 800a46a:	f364 0304 	bfi	r3, r4, #0, #5
 800a46e:	70ab      	strb	r3, [r5, #2]
 800a470:	886b      	ldrh	r3, [r5, #2]
 800a472:	f443 63fc 	orr.w	r3, r3, #2016	; 0x7e0
 800a476:	806b      	strh	r3, [r5, #2]
 800a478:	0a1b      	lsrs	r3, r3, #8
 800a47a:	f364 03c7 	bfi	r3, r4, #3, #5
 800a47e:	70eb      	strb	r3, [r5, #3]
	style_indic_vd.body.border.color = LV_COLOR_LIME;
 800a480:	7aab      	ldrb	r3, [r5, #10]
 800a482:	f364 0304 	bfi	r3, r4, #0, #5
 800a486:	72ab      	strb	r3, [r5, #10]
 800a488:	896b      	ldrh	r3, [r5, #10]
 800a48a:	f443 63fc 	orr.w	r3, r3, #2016	; 0x7e0
 800a48e:	816b      	strh	r3, [r5, #10]
 800a490:	0a1b      	lsrs	r3, r3, #8
 800a492:	f364 03c7 	bfi	r3, r4, #3, #5
	lv_style_copy(&style_indic_am, &lv_style_pretty);
 800a496:	4630      	mov	r0, r6
	style_indic_vd.body.border.color = LV_COLOR_LIME;
 800a498:	72eb      	strb	r3, [r5, #11]
	lv_style_copy(&style_indic_am, &lv_style_pretty);
 800a49a:	f006 fbe5 	bl	8010c68 <lv_style_copy>
	style_indic_am.body.grad_color = LV_COLOR_YELLOW;
 800a49e:	7933      	ldrb	r3, [r6, #4]
	style_indic_am.body.radius = 0;
 800a4a0:	80f4      	strh	r4, [r6, #6]
	style_indic_am.body.grad_color = LV_COLOR_YELLOW;
 800a4a2:	f364 0304 	bfi	r3, r4, #0, #5
 800a4a6:	7133      	strb	r3, [r6, #4]
 800a4a8:	88b3      	ldrh	r3, [r6, #4]
	lv_style_copy(&style_indic, &lv_style_pretty);
 800a4aa:	49a4      	ldr	r1, [pc, #656]	; (800a73c <screen_audio_2+0x30c>)
	style_indic_am.body.grad_color = LV_COLOR_YELLOW;
 800a4ac:	f443 63fc 	orr.w	r3, r3, #2016	; 0x7e0
 800a4b0:	80b3      	strh	r3, [r6, #4]
 800a4b2:	0a1b      	lsrs	r3, r3, #8
 800a4b4:	f043 03f8 	orr.w	r3, r3, #248	; 0xf8
 800a4b8:	7173      	strb	r3, [r6, #5]
	style_indic_am.body.main_color = LV_COLOR_YELLOW;
 800a4ba:	78b3      	ldrb	r3, [r6, #2]
 800a4bc:	f364 0304 	bfi	r3, r4, #0, #5
 800a4c0:	70b3      	strb	r3, [r6, #2]
 800a4c2:	8873      	ldrh	r3, [r6, #2]
 800a4c4:	f443 63fc 	orr.w	r3, r3, #2016	; 0x7e0
 800a4c8:	8073      	strh	r3, [r6, #2]
 800a4ca:	0a1b      	lsrs	r3, r3, #8
 800a4cc:	f043 03f8 	orr.w	r3, r3, #248	; 0xf8
 800a4d0:	70f3      	strb	r3, [r6, #3]
	style_indic_am.body.border.color = LV_COLOR_YELLOW;
 800a4d2:	7ab3      	ldrb	r3, [r6, #10]
 800a4d4:	f364 0304 	bfi	r3, r4, #0, #5
 800a4d8:	72b3      	strb	r3, [r6, #10]
 800a4da:	8973      	ldrh	r3, [r6, #10]
 800a4dc:	f443 63fc 	orr.w	r3, r3, #2016	; 0x7e0
 800a4e0:	8173      	strh	r3, [r6, #10]
 800a4e2:	0a1b      	lsrs	r3, r3, #8
 800a4e4:	f043 03f8 	orr.w	r3, r3, #248	; 0xf8
 800a4e8:	72f3      	strb	r3, [r6, #11]
	lv_style_copy(&style_indic, &lv_style_pretty);
 800a4ea:	4e96      	ldr	r6, [pc, #600]	; (800a744 <screen_audio_2+0x314>)
 800a4ec:	4630      	mov	r0, r6
 800a4ee:	f006 fbbb 	bl	8010c68 <lv_style_copy>
	style_indic.body.grad_color = LV_COLOR_BLACK;
 800a4f2:	7933      	ldrb	r3, [r6, #4]
	style_indic.body.radius = 0;
 800a4f4:	80f4      	strh	r4, [r6, #6]
	style_indic.body.grad_color = LV_COLOR_BLACK;
 800a4f6:	f364 0304 	bfi	r3, r4, #0, #5
 800a4fa:	7133      	strb	r3, [r6, #4]
 800a4fc:	88b3      	ldrh	r3, [r6, #4]
 800a4fe:	f364 134a 	bfi	r3, r4, #5, #6
 800a502:	80b3      	strh	r3, [r6, #4]
 800a504:	0a1b      	lsrs	r3, r3, #8
 800a506:	f364 03c7 	bfi	r3, r4, #3, #5
 800a50a:	7173      	strb	r3, [r6, #5]
	style_indic.body.main_color = LV_COLOR_BLACK;
 800a50c:	78b3      	ldrb	r3, [r6, #2]
 800a50e:	f364 0304 	bfi	r3, r4, #0, #5
 800a512:	70b3      	strb	r3, [r6, #2]
 800a514:	8873      	ldrh	r3, [r6, #2]
 800a516:	f364 134a 	bfi	r3, r4, #5, #6
 800a51a:	8073      	strh	r3, [r6, #2]
 800a51c:	0a1b      	lsrs	r3, r3, #8
 800a51e:	f364 03c7 	bfi	r3, r4, #3, #5
 800a522:	70f3      	strb	r3, [r6, #3]
	style_indic.body.border.color = LV_COLOR_BLACK;
 800a524:	7ab3      	ldrb	r3, [r6, #10]
 800a526:	f364 0304 	bfi	r3, r4, #0, #5
 800a52a:	72b3      	strb	r3, [r6, #10]
 800a52c:	8973      	ldrh	r3, [r6, #10]
 800a52e:	f364 134a 	bfi	r3, r4, #5, #6
 800a532:	8173      	strh	r3, [r6, #10]
 800a534:	0a1b      	lsrs	r3, r3, #8
 800a536:	f364 03c7 	bfi	r3, r4, #3, #5
 800a53a:	72f3      	strb	r3, [r6, #11]
	img_fundo = lv_img_create(Tela_Audio_2, NULL);
 800a53c:	4621      	mov	r1, r4
 800a53e:	6838      	ldr	r0, [r7, #0]
 800a540:	4e81      	ldr	r6, [pc, #516]	; (800a748 <screen_audio_2+0x318>)
 800a542:	f00d fd3f 	bl	8017fc4 <lv_img_create>
    lv_img_set_src(img_fundo, &tela_audio_2);
 800a546:	4981      	ldr	r1, [pc, #516]	; (800a74c <screen_audio_2+0x31c>)
	img_fundo = lv_img_create(Tela_Audio_2, NULL);
 800a548:	6030      	str	r0, [r6, #0]
    lv_img_set_src(img_fundo, &tela_audio_2);
 800a54a:	f00d fcab 	bl	8017ea4 <lv_img_set_src>
    lv_obj_set_protect(img_fundo, LV_PROTECT_POS);
 800a54e:	6830      	ldr	r0, [r6, #0]
	imgbtn1[0] = lv_imgbtn_create(Tela_Audio_2, NULL);
 800a550:	4e7f      	ldr	r6, [pc, #508]	; (800a750 <screen_audio_2+0x320>)
    lv_obj_set_protect(img_fundo, LV_PROTECT_POS);
 800a552:	2104      	movs	r1, #4
 800a554:	f005 f870 	bl	800f638 <lv_obj_set_protect>
	btn_prev2();
 800a558:	f7ff ff36 	bl	800a3c8 <btn_prev2>
	imgbtn1[0] = lv_imgbtn_create(Tela_Audio_2, NULL);
 800a55c:	4621      	mov	r1, r4
 800a55e:	6838      	ldr	r0, [r7, #0]
 800a560:	f00d fe5a 	bl	8018218 <lv_imgbtn_create>
	lv_obj_set_user_data(imgbtn1[0], 0);
 800a564:	4621      	mov	r1, r4
	imgbtn1[0] = lv_imgbtn_create(Tela_Audio_2, NULL);
 800a566:	6030      	str	r0, [r6, #0]
	lv_obj_set_user_data(imgbtn1[0], 0);
 800a568:	f006 f80d 	bl	8010586 <lv_obj_set_user_data>
	lv_imgbtn_set_src(imgbtn1[0], LV_BTN_STATE_REL, &Btn_on);
 800a56c:	6830      	ldr	r0, [r6, #0]
 800a56e:	4a79      	ldr	r2, [pc, #484]	; (800a754 <screen_audio_2+0x324>)
 800a570:	4621      	mov	r1, r4
 800a572:	f00d fe99 	bl	80182a8 <lv_imgbtn_set_src>
	lv_imgbtn_set_src(imgbtn1[0], LV_BTN_STATE_TGL_REL, &Btn_on);
 800a576:	6830      	ldr	r0, [r6, #0]
 800a578:	4a76      	ldr	r2, [pc, #472]	; (800a754 <screen_audio_2+0x324>)
 800a57a:	2102      	movs	r1, #2
 800a57c:	f00d fe94 	bl	80182a8 <lv_imgbtn_set_src>
	lv_imgbtn_set_src(imgbtn1[0], LV_BTN_STATE_TGL_PR, &Btn_on_am);
 800a580:	6830      	ldr	r0, [r6, #0]
 800a582:	4a75      	ldr	r2, [pc, #468]	; (800a758 <screen_audio_2+0x328>)
 800a584:	2103      	movs	r1, #3
 800a586:	f00d fe8f 	bl	80182a8 <lv_imgbtn_set_src>
	lv_imgbtn_set_src(imgbtn1[0], LV_BTN_STATE_PR, &Btn_on_am);
 800a58a:	6830      	ldr	r0, [r6, #0]
 800a58c:	4a72      	ldr	r2, [pc, #456]	; (800a758 <screen_audio_2+0x328>)
 800a58e:	2101      	movs	r1, #1
 800a590:	f00d fe8a 	bl	80182a8 <lv_imgbtn_set_src>
	lv_imgbtn_set_src(imgbtn1[0], LV_BTN_STATE_INA, &Btn_on_am);
 800a594:	4a70      	ldr	r2, [pc, #448]	; (800a758 <screen_audio_2+0x328>)
 800a596:	6830      	ldr	r0, [r6, #0]
 800a598:	2104      	movs	r1, #4
 800a59a:	f00d fe85 	bl	80182a8 <lv_imgbtn_set_src>
	lv_obj_set_event_cb(imgbtn1[0], btn_clipper);
 800a59e:	6830      	ldr	r0, [r6, #0]
 800a5a0:	496e      	ldr	r1, [pc, #440]	; (800a75c <screen_audio_2+0x32c>)
 800a5a2:	f005 f856 	bl	800f652 <lv_obj_set_event_cb>
	lv_obj_set_pos(imgbtn1[0], 5, 63);
 800a5a6:	223f      	movs	r2, #63	; 0x3f
 800a5a8:	6830      	ldr	r0, [r6, #0]
 800a5aa:	2105      	movs	r1, #5
 800a5ac:	f005 f99b 	bl	800f8e6 <lv_obj_set_pos>
	imgbtn1[1] = lv_imgbtn_create(Tela_Audio_2, imgbtn1[0]);
 800a5b0:	6831      	ldr	r1, [r6, #0]
 800a5b2:	6838      	ldr	r0, [r7, #0]
 800a5b4:	f00d fe30 	bl	8018218 <lv_imgbtn_create>
	lv_obj_set_user_data(imgbtn1[1], 1);
 800a5b8:	2101      	movs	r1, #1
	imgbtn1[1] = lv_imgbtn_create(Tela_Audio_2, imgbtn1[0]);
 800a5ba:	6070      	str	r0, [r6, #4]
	lv_obj_set_user_data(imgbtn1[1], 1);
 800a5bc:	f005 ffe3 	bl	8010586 <lv_obj_set_user_data>
	lv_imgbtn_set_src(imgbtn1[1], LV_BTN_STATE_REL, &Btn_off);
 800a5c0:	6870      	ldr	r0, [r6, #4]
 800a5c2:	4a67      	ldr	r2, [pc, #412]	; (800a760 <screen_audio_2+0x330>)
 800a5c4:	4621      	mov	r1, r4
 800a5c6:	f00d fe6f 	bl	80182a8 <lv_imgbtn_set_src>
	lv_imgbtn_set_src(imgbtn1[1], LV_BTN_STATE_TGL_REL, &Btn_off);
 800a5ca:	6870      	ldr	r0, [r6, #4]
 800a5cc:	4a64      	ldr	r2, [pc, #400]	; (800a760 <screen_audio_2+0x330>)
 800a5ce:	2102      	movs	r1, #2
 800a5d0:	f00d fe6a 	bl	80182a8 <lv_imgbtn_set_src>
	lv_imgbtn_set_src(imgbtn1[1], LV_BTN_STATE_TGL_PR, &Btn_off_am);
 800a5d4:	6870      	ldr	r0, [r6, #4]
 800a5d6:	4a63      	ldr	r2, [pc, #396]	; (800a764 <screen_audio_2+0x334>)
 800a5d8:	2103      	movs	r1, #3
 800a5da:	f00d fe65 	bl	80182a8 <lv_imgbtn_set_src>
	lv_imgbtn_set_src(imgbtn1[1], LV_BTN_STATE_PR, &Btn_off_am);
 800a5de:	6870      	ldr	r0, [r6, #4]
 800a5e0:	4a60      	ldr	r2, [pc, #384]	; (800a764 <screen_audio_2+0x334>)
 800a5e2:	2101      	movs	r1, #1
 800a5e4:	f00d fe60 	bl	80182a8 <lv_imgbtn_set_src>
	lv_imgbtn_set_src(imgbtn1[1], LV_BTN_STATE_INA, &Btn_off_am);
 800a5e8:	6870      	ldr	r0, [r6, #4]
 800a5ea:	4a5e      	ldr	r2, [pc, #376]	; (800a764 <screen_audio_2+0x334>)
 800a5ec:	2104      	movs	r1, #4
 800a5ee:	f00d fe5b 	bl	80182a8 <lv_imgbtn_set_src>
	lv_obj_set_pos(imgbtn1[1], 5, 83);
 800a5f2:	2253      	movs	r2, #83	; 0x53
 800a5f4:	6870      	ldr	r0, [r6, #4]
	bar[0] = lv_bar_create(Tela_Audio_2, NULL);
 800a5f6:	4e5c      	ldr	r6, [pc, #368]	; (800a768 <screen_audio_2+0x338>)
	lv_obj_set_pos(imgbtn1[1], 5, 83);
 800a5f8:	2105      	movs	r1, #5
 800a5fa:	f005 f974 	bl	800f8e6 <lv_obj_set_pos>
	bar[0] = lv_bar_create(Tela_Audio_2, NULL);
 800a5fe:	4621      	mov	r1, r4
 800a600:	6838      	ldr	r0, [r7, #0]
 800a602:	f00b fd9b 	bl	801613c <lv_bar_create>
	lv_obj_set_size(bar[0], 16, 8);
 800a606:	2208      	movs	r2, #8
 800a608:	2110      	movs	r1, #16
	bar[0] = lv_bar_create(Tela_Audio_2, NULL);
 800a60a:	6030      	str	r0, [r6, #0]
	lv_obj_set_size(bar[0], 16, 8);
 800a60c:	f005 fd60 	bl	80100d0 <lv_obj_set_size>
	lv_bar_set_style(bar[0], LV_BAR_STYLE_BG, &style_indic_vd);
 800a610:	462a      	mov	r2, r5
 800a612:	4621      	mov	r1, r4
 800a614:	6830      	ldr	r0, [r6, #0]
 800a616:	f00b fd7b 	bl	8016110 <lv_bar_set_style>
	lv_bar_set_style(bar[0], LV_BAR_STYLE_INDIC, &style_indic_vd);
 800a61a:	462a      	mov	r2, r5
 800a61c:	2101      	movs	r1, #1
 800a61e:	6830      	ldr	r0, [r6, #0]
 800a620:	f00b fd76 	bl	8016110 <lv_bar_set_style>
	lv_obj_align(bar[0], NULL, LV_ALIGN_IN_TOP_LEFT, 54, 67);
 800a624:	2343      	movs	r3, #67	; 0x43
 800a626:	9300      	str	r3, [sp, #0]
 800a628:	2201      	movs	r2, #1
 800a62a:	2336      	movs	r3, #54	; 0x36
 800a62c:	4621      	mov	r1, r4
 800a62e:	6830      	ldr	r0, [r6, #0]
 800a630:	f005 f9ae 	bl	800f990 <lv_obj_align>
	lv_bar_set_value(bar[0], 100, 0);
 800a634:	2164      	movs	r1, #100	; 0x64
 800a636:	4622      	mov	r2, r4
 800a638:	6830      	ldr	r0, [r6, #0]
 800a63a:	f00b fd0d 	bl	8016058 <lv_bar_set_value>
	if(Cfg_Clipper) {
 800a63e:	4b4b      	ldr	r3, [pc, #300]	; (800a76c <screen_audio_2+0x33c>)
 800a640:	7819      	ldrb	r1, [r3, #0]
 800a642:	2900      	cmp	r1, #0
 800a644:	f000 80e5 	beq.w	800a812 <screen_audio_2+0x3e2>
		lv_obj_align(bar[0], NULL, LV_ALIGN_IN_TOP_LEFT, 54, 68);
 800a648:	2344      	movs	r3, #68	; 0x44
 800a64a:	9300      	str	r3, [sp, #0]
 800a64c:	2201      	movs	r2, #1
 800a64e:	2336      	movs	r3, #54	; 0x36
 800a650:	4621      	mov	r1, r4
		lv_obj_align(bar[0], NULL, LV_ALIGN_IN_TOP_LEFT, 54, 88);
 800a652:	6830      	ldr	r0, [r6, #0]
	imgbtn2[0] = lv_imgbtn_create(Tela_Audio_2, NULL);
 800a654:	4c46      	ldr	r4, [pc, #280]	; (800a770 <screen_audio_2+0x340>)
		lv_obj_align(bar[0], NULL, LV_ALIGN_IN_TOP_LEFT, 54, 88);
 800a656:	f005 f99b 	bl	800f990 <lv_obj_align>
	imgbtn2[0] = lv_imgbtn_create(Tela_Audio_2, NULL);
 800a65a:	2100      	movs	r1, #0
 800a65c:	6838      	ldr	r0, [r7, #0]
 800a65e:	f00d fddb 	bl	8018218 <lv_imgbtn_create>
	lv_obj_set_user_data(imgbtn2[0], 0);
 800a662:	2100      	movs	r1, #0
	imgbtn2[0] = lv_imgbtn_create(Tela_Audio_2, NULL);
 800a664:	6020      	str	r0, [r4, #0]
	lv_obj_set_user_data(imgbtn2[0], 0);
 800a666:	f005 ff8e 	bl	8010586 <lv_obj_set_user_data>
	lv_imgbtn_set_src(imgbtn2[0], LV_BTN_STATE_REL, &Btn_mp3Prev);
 800a66a:	4a42      	ldr	r2, [pc, #264]	; (800a774 <screen_audio_2+0x344>)
 800a66c:	6820      	ldr	r0, [r4, #0]
 800a66e:	2100      	movs	r1, #0
 800a670:	f00d fe1a 	bl	80182a8 <lv_imgbtn_set_src>
	lv_imgbtn_set_src(imgbtn2[0], LV_BTN_STATE_TGL_REL, &Btn_mp3Prev);
 800a674:	4a3f      	ldr	r2, [pc, #252]	; (800a774 <screen_audio_2+0x344>)
 800a676:	6820      	ldr	r0, [r4, #0]
 800a678:	2102      	movs	r1, #2
 800a67a:	f00d fe15 	bl	80182a8 <lv_imgbtn_set_src>
	lv_imgbtn_set_src(imgbtn2[0], LV_BTN_STATE_TGL_PR, &Btn_mp3Prev_am);
 800a67e:	4a3e      	ldr	r2, [pc, #248]	; (800a778 <screen_audio_2+0x348>)
 800a680:	6820      	ldr	r0, [r4, #0]
 800a682:	2103      	movs	r1, #3
 800a684:	f00d fe10 	bl	80182a8 <lv_imgbtn_set_src>
	lv_imgbtn_set_src(imgbtn2[0], LV_BTN_STATE_PR, &Btn_mp3Prev_vd);
 800a688:	4a3c      	ldr	r2, [pc, #240]	; (800a77c <screen_audio_2+0x34c>)
 800a68a:	6820      	ldr	r0, [r4, #0]
 800a68c:	2101      	movs	r1, #1
 800a68e:	f00d fe0b 	bl	80182a8 <lv_imgbtn_set_src>
	lv_imgbtn_set_src(imgbtn2[0], LV_BTN_STATE_INA, &Btn_mp3Prev_am);
 800a692:	4a39      	ldr	r2, [pc, #228]	; (800a778 <screen_audio_2+0x348>)
 800a694:	6820      	ldr	r0, [r4, #0]
 800a696:	2104      	movs	r1, #4
 800a698:	f00d fe06 	bl	80182a8 <lv_imgbtn_set_src>
	lv_obj_set_event_cb(imgbtn2[0], btn_mp3);
 800a69c:	4938      	ldr	r1, [pc, #224]	; (800a780 <screen_audio_2+0x350>)
 800a69e:	6820      	ldr	r0, [r4, #0]
 800a6a0:	f004 ffd7 	bl	800f652 <lv_obj_set_event_cb>
	lv_obj_set_pos(imgbtn2[0], 83, 48);
 800a6a4:	2230      	movs	r2, #48	; 0x30
 800a6a6:	2153      	movs	r1, #83	; 0x53
 800a6a8:	6820      	ldr	r0, [r4, #0]
 800a6aa:	f005 f91c 	bl	800f8e6 <lv_obj_set_pos>
	imgbtn2[1] = lv_imgbtn_create(Tela_Audio_2, imgbtn2[0]);
 800a6ae:	6821      	ldr	r1, [r4, #0]
 800a6b0:	6838      	ldr	r0, [r7, #0]
 800a6b2:	f00d fdb1 	bl	8018218 <lv_imgbtn_create>
	lv_obj_set_user_data(imgbtn2[1], 1);
 800a6b6:	2101      	movs	r1, #1
	imgbtn2[1] = lv_imgbtn_create(Tela_Audio_2, imgbtn2[0]);
 800a6b8:	6060      	str	r0, [r4, #4]
	lv_obj_set_user_data(imgbtn2[1], 1);
 800a6ba:	f005 ff64 	bl	8010586 <lv_obj_set_user_data>
	lv_imgbtn_set_src(imgbtn2[1], LV_BTN_STATE_REL, &Btn_mp3Play);
 800a6be:	4a31      	ldr	r2, [pc, #196]	; (800a784 <screen_audio_2+0x354>)
 800a6c0:	6860      	ldr	r0, [r4, #4]
 800a6c2:	2100      	movs	r1, #0
 800a6c4:	f00d fdf0 	bl	80182a8 <lv_imgbtn_set_src>
	lv_imgbtn_set_src(imgbtn2[1], LV_BTN_STATE_TGL_REL, &Btn_mp3Play);
 800a6c8:	4a2e      	ldr	r2, [pc, #184]	; (800a784 <screen_audio_2+0x354>)
 800a6ca:	6860      	ldr	r0, [r4, #4]
 800a6cc:	2102      	movs	r1, #2
 800a6ce:	f00d fdeb 	bl	80182a8 <lv_imgbtn_set_src>
	lv_imgbtn_set_src(imgbtn2[1], LV_BTN_STATE_TGL_PR, &Btn_mp3Play_am);
 800a6d2:	4a2d      	ldr	r2, [pc, #180]	; (800a788 <screen_audio_2+0x358>)
 800a6d4:	6860      	ldr	r0, [r4, #4]
 800a6d6:	2103      	movs	r1, #3
 800a6d8:	f00d fde6 	bl	80182a8 <lv_imgbtn_set_src>
	lv_imgbtn_set_src(imgbtn2[1], LV_BTN_STATE_PR, &Btn_mp3Play_vd);
 800a6dc:	4a2b      	ldr	r2, [pc, #172]	; (800a78c <screen_audio_2+0x35c>)
 800a6de:	6860      	ldr	r0, [r4, #4]
 800a6e0:	2101      	movs	r1, #1
 800a6e2:	f00d fde1 	bl	80182a8 <lv_imgbtn_set_src>
	lv_imgbtn_set_src(imgbtn2[1], LV_BTN_STATE_INA, &Btn_mp3Pause_vd);
 800a6e6:	4a2a      	ldr	r2, [pc, #168]	; (800a790 <screen_audio_2+0x360>)
 800a6e8:	6860      	ldr	r0, [r4, #4]
 800a6ea:	2104      	movs	r1, #4
 800a6ec:	f00d fddc 	bl	80182a8 <lv_imgbtn_set_src>
	lv_obj_set_pos(imgbtn2[1], 83, 67);
 800a6f0:	2243      	movs	r2, #67	; 0x43
 800a6f2:	2153      	movs	r1, #83	; 0x53
 800a6f4:	6860      	ldr	r0, [r4, #4]
 800a6f6:	f005 f8f6 	bl	800f8e6 <lv_obj_set_pos>
	imgbtn2[2] = lv_imgbtn_create(Tela_Audio_2, imgbtn2[0]);
 800a6fa:	6821      	ldr	r1, [r4, #0]
 800a6fc:	6838      	ldr	r0, [r7, #0]
 800a6fe:	f00d fd8b 	bl	8018218 <lv_imgbtn_create>
	lv_obj_set_user_data(imgbtn2[2], 2);
 800a702:	2102      	movs	r1, #2
	imgbtn2[2] = lv_imgbtn_create(Tela_Audio_2, imgbtn2[0]);
 800a704:	60a0      	str	r0, [r4, #8]
	lv_obj_set_user_data(imgbtn2[2], 2);
 800a706:	f005 ff3e 	bl	8010586 <lv_obj_set_user_data>
	lv_imgbtn_set_src(imgbtn2[2], LV_BTN_STATE_REL, &Btn_mp3Next);
 800a70a:	4a22      	ldr	r2, [pc, #136]	; (800a794 <screen_audio_2+0x364>)
 800a70c:	68a0      	ldr	r0, [r4, #8]
 800a70e:	2100      	movs	r1, #0
 800a710:	f00d fdca 	bl	80182a8 <lv_imgbtn_set_src>
	lv_imgbtn_set_src(imgbtn2[2], LV_BTN_STATE_TGL_REL, &Btn_mp3Next);
 800a714:	4a1f      	ldr	r2, [pc, #124]	; (800a794 <screen_audio_2+0x364>)
 800a716:	68a0      	ldr	r0, [r4, #8]
 800a718:	2102      	movs	r1, #2
 800a71a:	f00d fdc5 	bl	80182a8 <lv_imgbtn_set_src>
	lv_imgbtn_set_src(imgbtn2[2], LV_BTN_STATE_TGL_PR, &Btn_mp3Next_am);
 800a71e:	4a1e      	ldr	r2, [pc, #120]	; (800a798 <screen_audio_2+0x368>)
 800a720:	68a0      	ldr	r0, [r4, #8]
 800a722:	2103      	movs	r1, #3
 800a724:	f00d fdc0 	bl	80182a8 <lv_imgbtn_set_src>
	lv_imgbtn_set_src(imgbtn2[2], LV_BTN_STATE_PR, &Btn_mp3Next_vd);
 800a728:	4a1c      	ldr	r2, [pc, #112]	; (800a79c <screen_audio_2+0x36c>)
 800a72a:	68a0      	ldr	r0, [r4, #8]
 800a72c:	2101      	movs	r1, #1
 800a72e:	f00d fdbb 	bl	80182a8 <lv_imgbtn_set_src>
 800a732:	e035      	b.n	800a7a0 <screen_audio_2+0x370>
 800a734:	2000528c 	.word	0x2000528c
 800a738:	200051d8 	.word	0x200051d8
 800a73c:	2000c5b8 	.word	0x2000c5b8
 800a740:	20005250 	.word	0x20005250
 800a744:	20005214 	.word	0x20005214
 800a748:	200051e4 	.word	0x200051e4
 800a74c:	20001c04 	.word	0x20001c04
 800a750:	200051e8 	.word	0x200051e8
 800a754:	20001b44 	.word	0x20001b44
 800a758:	20001b50 	.word	0x20001b50
 800a75c:	080098e5 	.word	0x080098e5
 800a760:	20001b2c 	.word	0x20001b2c
 800a764:	20001b38 	.word	0x20001b38
 800a768:	200051dc 	.word	0x200051dc
 800a76c:	2000343b 	.word	0x2000343b
 800a770:	200051f0 	.word	0x200051f0
 800a774:	20001a9c 	.word	0x20001a9c
 800a778:	20001aa8 	.word	0x20001aa8
 800a77c:	20001ab4 	.word	0x20001ab4
 800a780:	0800996d 	.word	0x0800996d
 800a784:	20001a78 	.word	0x20001a78
 800a788:	20001a84 	.word	0x20001a84
 800a78c:	20001a90 	.word	0x20001a90
 800a790:	20001a6c 	.word	0x20001a6c
 800a794:	20001a48 	.word	0x20001a48
 800a798:	20001a54 	.word	0x20001a54
 800a79c:	20001a60 	.word	0x20001a60
	lv_imgbtn_set_src(imgbtn2[2], LV_BTN_STATE_INA, &Btn_mp3Next_am);
 800a7a0:	4a2a      	ldr	r2, [pc, #168]	; (800a84c <screen_audio_2+0x41c>)
 800a7a2:	68a0      	ldr	r0, [r4, #8]
 800a7a4:	2104      	movs	r1, #4
 800a7a6:	f00d fd7f 	bl	80182a8 <lv_imgbtn_set_src>
	lv_obj_set_pos(imgbtn2[2], 83, 86);
 800a7aa:	2256      	movs	r2, #86	; 0x56
 800a7ac:	2153      	movs	r1, #83	; 0x53
 800a7ae:	68a0      	ldr	r0, [r4, #8]
 800a7b0:	f005 f899 	bl	800f8e6 <lv_obj_set_pos>
	imgbtn2[3] = lv_imgbtn_create(Tela_Audio_2, imgbtn2[0]);
 800a7b4:	6821      	ldr	r1, [r4, #0]
 800a7b6:	6838      	ldr	r0, [r7, #0]
 800a7b8:	f00d fd2e 	bl	8018218 <lv_imgbtn_create>
	lv_obj_set_user_data(imgbtn2[3], 3);
 800a7bc:	2103      	movs	r1, #3
	imgbtn2[3] = lv_imgbtn_create(Tela_Audio_2, imgbtn2[0]);
 800a7be:	60e0      	str	r0, [r4, #12]
	lv_obj_set_user_data(imgbtn2[3], 3);
 800a7c0:	f005 fee1 	bl	8010586 <lv_obj_set_user_data>
	lv_imgbtn_set_src(imgbtn2[3], LV_BTN_STATE_REL, &Btn_mp3Stop);
 800a7c4:	4a22      	ldr	r2, [pc, #136]	; (800a850 <screen_audio_2+0x420>)
 800a7c6:	68e0      	ldr	r0, [r4, #12]
 800a7c8:	2100      	movs	r1, #0
 800a7ca:	f00d fd6d 	bl	80182a8 <lv_imgbtn_set_src>
	lv_imgbtn_set_src(imgbtn2[3], LV_BTN_STATE_TGL_REL, &Btn_mp3Stop);
 800a7ce:	4a20      	ldr	r2, [pc, #128]	; (800a850 <screen_audio_2+0x420>)
 800a7d0:	68e0      	ldr	r0, [r4, #12]
 800a7d2:	2102      	movs	r1, #2
 800a7d4:	f00d fd68 	bl	80182a8 <lv_imgbtn_set_src>
	lv_imgbtn_set_src(imgbtn2[3], LV_BTN_STATE_TGL_PR, &Btn_mp3Stop_am);
 800a7d8:	4a1e      	ldr	r2, [pc, #120]	; (800a854 <screen_audio_2+0x424>)
 800a7da:	68e0      	ldr	r0, [r4, #12]
 800a7dc:	2103      	movs	r1, #3
 800a7de:	f00d fd63 	bl	80182a8 <lv_imgbtn_set_src>
	lv_imgbtn_set_src(imgbtn2[3], LV_BTN_STATE_PR, &Btn_mp3Stop_vd);
 800a7e2:	4a1d      	ldr	r2, [pc, #116]	; (800a858 <screen_audio_2+0x428>)
 800a7e4:	68e0      	ldr	r0, [r4, #12]
 800a7e6:	2101      	movs	r1, #1
 800a7e8:	f00d fd5e 	bl	80182a8 <lv_imgbtn_set_src>
	lv_imgbtn_set_src(imgbtn2[3], LV_BTN_STATE_INA, &Btn_mp3Stop_am);
 800a7ec:	4a19      	ldr	r2, [pc, #100]	; (800a854 <screen_audio_2+0x424>)
 800a7ee:	68e0      	ldr	r0, [r4, #12]
 800a7f0:	2104      	movs	r1, #4
 800a7f2:	f00d fd59 	bl	80182a8 <lv_imgbtn_set_src>
	lv_obj_set_pos(imgbtn2[3], 83, 105);
 800a7f6:	2269      	movs	r2, #105	; 0x69
 800a7f8:	2153      	movs	r1, #83	; 0x53
 800a7fa:	68e0      	ldr	r0, [r4, #12]
 800a7fc:	f005 f873 	bl	800f8e6 <lv_obj_set_pos>
	switch(mp3_status) {
 800a800:	4b16      	ldr	r3, [pc, #88]	; (800a85c <screen_audio_2+0x42c>)
 800a802:	781b      	ldrb	r3, [r3, #0]
 800a804:	2b04      	cmp	r3, #4
 800a806:	d80d      	bhi.n	800a824 <screen_audio_2+0x3f4>
 800a808:	e8df f003 	tbb	[pc, r3]
 800a80c:	19171408 	.word	0x19171408
 800a810:	1c          	.byte	0x1c
 800a811:	00          	.byte	0x00
		lv_obj_align(bar[0], NULL, LV_ALIGN_IN_TOP_LEFT, 54, 88);
 800a812:	2358      	movs	r3, #88	; 0x58
 800a814:	9300      	str	r3, [sp, #0]
 800a816:	2201      	movs	r2, #1
 800a818:	2336      	movs	r3, #54	; 0x36
 800a81a:	e71a      	b.n	800a652 <screen_audio_2+0x222>
 800a81c:	68e0      	ldr	r0, [r4, #12]
 800a81e:	2101      	movs	r1, #1
 800a820:	f00b fe6e 	bl	8016500 <lv_btn_set_state>
 800a824:	6838      	ldr	r0, [r7, #0]
 800a826:	f004 fcc1 	bl	800f1ac <lv_disp_load_scr>
	TelaAtiva = TelaAudio_2;
 800a82a:	4b0d      	ldr	r3, [pc, #52]	; (800a860 <screen_audio_2+0x430>)
 800a82c:	2205      	movs	r2, #5
 800a82e:	601a      	str	r2, [r3, #0]
}
 800a830:	b003      	add	sp, #12
 800a832:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a834:	2101      	movs	r1, #1
 800a836:	6860      	ldr	r0, [r4, #4]
 800a838:	e7f2      	b.n	800a820 <screen_audio_2+0x3f0>
 800a83a:	2104      	movs	r1, #4
 800a83c:	e7fb      	b.n	800a836 <screen_audio_2+0x406>
 800a83e:	2101      	movs	r1, #1
 800a840:	6820      	ldr	r0, [r4, #0]
 800a842:	e7ed      	b.n	800a820 <screen_audio_2+0x3f0>
 800a844:	2101      	movs	r1, #1
 800a846:	68a0      	ldr	r0, [r4, #8]
 800a848:	e7ea      	b.n	800a820 <screen_audio_2+0x3f0>
 800a84a:	bf00      	nop
 800a84c:	20001a54 	.word	0x20001a54
 800a850:	20001ac0 	.word	0x20001ac0
 800a854:	20001acc 	.word	0x20001acc
 800a858:	20001ad8 	.word	0x20001ad8
 800a85c:	20004e34 	.word	0x20004e34
 800a860:	20003444 	.word	0x20003444

0800a864 <btn_event_next1>:
	if(event == LV_EVENT_APPLY) {
 800a864:	2911      	cmp	r1, #17
{
 800a866:	b508      	push	{r3, lr}
	if(event == LV_EVENT_APPLY) {
 800a868:	d107      	bne.n	800a87a <btn_event_next1+0x16>
		lv_obj_del(Tela_Audio_1);
 800a86a:	4b04      	ldr	r3, [pc, #16]	; (800a87c <btn_event_next1+0x18>)
 800a86c:	6818      	ldr	r0, [r3, #0]
 800a86e:	f005 fca2 	bl	80101b6 <lv_obj_del>
}
 800a872:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		screen_audio_2();
 800a876:	f7ff bddb 	b.w	800a430 <screen_audio_2>
 800a87a:	bd08      	pop	{r3, pc}
 800a87c:	200051d4 	.word	0x200051d4

0800a880 <update_sel_button_Audio>:

void update_sel_button_Audio(uint8_t idx)
{
 800a880:	b510      	push	{r4, lr}
	switch(idx) {
 800a882:	2806      	cmp	r0, #6
 800a884:	d873      	bhi.n	800a96e <update_sel_button_Audio+0xee>
 800a886:	e8df f000 	tbb	[pc, r0]
 800a88a:	2004      	.short	0x2004
 800a88c:	46362a23 	.word	0x46362a23
 800a890:	5a          	.byte	0x5a
 800a891:	00          	.byte	0x00
		case 0:
			lv_imgbtn_set_state(imgbtn1[0], LV_BTN_STATE_TGL_REL);
 800a892:	4c37      	ldr	r4, [pc, #220]	; (800a970 <update_sel_button_Audio+0xf0>)
 800a894:	2102      	movs	r1, #2
 800a896:	6820      	ldr	r0, [r4, #0]
 800a898:	f00b fe32 	bl	8016500 <lv_btn_set_state>
 800a89c:	2102      	movs	r1, #2
 800a89e:	6860      	ldr	r0, [r4, #4]
			lv_imgbtn_set_state(imgbtn2[3], LV_BTN_STATE_TGL_REL);
			break;
		case 1:
			lv_imgbtn_set_state(imgbtn1[0], LV_BTN_STATE_TGL_PR);
			lv_imgbtn_set_state(imgbtn1[1], LV_BTN_STATE_TGL_REL);
			lv_imgbtn_set_state(imgbtn2[0], LV_BTN_STATE_TGL_REL);
 800a8a0:	4c34      	ldr	r4, [pc, #208]	; (800a974 <update_sel_button_Audio+0xf4>)
 800a8a2:	f00b fe2d 	bl	8016500 <lv_btn_set_state>
 800a8a6:	2102      	movs	r1, #2
 800a8a8:	6820      	ldr	r0, [r4, #0]
 800a8aa:	f00b fe29 	bl	8016500 <lv_btn_set_state>
 800a8ae:	2102      	movs	r1, #2
 800a8b0:	6860      	ldr	r0, [r4, #4]
 800a8b2:	f00b fe25 	bl	8016500 <lv_btn_set_state>
 800a8b6:	2102      	movs	r1, #2
 800a8b8:	68a0      	ldr	r0, [r4, #8]
 800a8ba:	f00b fe21 	bl	8016500 <lv_btn_set_state>
 800a8be:	2102      	movs	r1, #2
 800a8c0:	68e0      	ldr	r0, [r4, #12]
			lv_imgbtn_set_state(imgbtn2[1], LV_BTN_STATE_TGL_REL);
			lv_imgbtn_set_state(imgbtn2[2], LV_BTN_STATE_TGL_REL);
			lv_imgbtn_set_state(imgbtn2[3], LV_BTN_STATE_TGL_PR);
			break;
	}
}
 800a8c2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a8c6:	f00b be1b 	b.w	8016500 <lv_btn_set_state>
			lv_imgbtn_set_state(imgbtn1[0], LV_BTN_STATE_TGL_PR);
 800a8ca:	4c29      	ldr	r4, [pc, #164]	; (800a970 <update_sel_button_Audio+0xf0>)
 800a8cc:	2103      	movs	r1, #3
 800a8ce:	e7e2      	b.n	800a896 <update_sel_button_Audio+0x16>
			lv_imgbtn_set_state(imgbtn1[0], LV_BTN_STATE_TGL_REL);
 800a8d0:	4c27      	ldr	r4, [pc, #156]	; (800a970 <update_sel_button_Audio+0xf0>)
 800a8d2:	2102      	movs	r1, #2
 800a8d4:	6820      	ldr	r0, [r4, #0]
 800a8d6:	f00b fe13 	bl	8016500 <lv_btn_set_state>
 800a8da:	2103      	movs	r1, #3
 800a8dc:	e7df      	b.n	800a89e <update_sel_button_Audio+0x1e>
			lv_imgbtn_set_state(imgbtn1[0], LV_BTN_STATE_TGL_REL);
 800a8de:	4c24      	ldr	r4, [pc, #144]	; (800a970 <update_sel_button_Audio+0xf0>)
 800a8e0:	2102      	movs	r1, #2
 800a8e2:	6820      	ldr	r0, [r4, #0]
 800a8e4:	f00b fe0c 	bl	8016500 <lv_btn_set_state>
 800a8e8:	2102      	movs	r1, #2
 800a8ea:	6860      	ldr	r0, [r4, #4]
			lv_imgbtn_set_state(imgbtn2[0], LV_BTN_STATE_TGL_PR);
 800a8ec:	4c21      	ldr	r4, [pc, #132]	; (800a974 <update_sel_button_Audio+0xf4>)
 800a8ee:	f00b fe07 	bl	8016500 <lv_btn_set_state>
 800a8f2:	2103      	movs	r1, #3
 800a8f4:	e7d8      	b.n	800a8a8 <update_sel_button_Audio+0x28>
			lv_imgbtn_set_state(imgbtn1[0], LV_BTN_STATE_TGL_REL);
 800a8f6:	4c1e      	ldr	r4, [pc, #120]	; (800a970 <update_sel_button_Audio+0xf0>)
 800a8f8:	2102      	movs	r1, #2
 800a8fa:	6820      	ldr	r0, [r4, #0]
 800a8fc:	f00b fe00 	bl	8016500 <lv_btn_set_state>
 800a900:	6860      	ldr	r0, [r4, #4]
			lv_imgbtn_set_state(imgbtn2[0], LV_BTN_STATE_TGL_REL);
 800a902:	4c1c      	ldr	r4, [pc, #112]	; (800a974 <update_sel_button_Audio+0xf4>)
 800a904:	2102      	movs	r1, #2
 800a906:	f00b fdfb 	bl	8016500 <lv_btn_set_state>
 800a90a:	2102      	movs	r1, #2
 800a90c:	6820      	ldr	r0, [r4, #0]
 800a90e:	f00b fdf7 	bl	8016500 <lv_btn_set_state>
 800a912:	2103      	movs	r1, #3
 800a914:	e7cc      	b.n	800a8b0 <update_sel_button_Audio+0x30>
			lv_imgbtn_set_state(imgbtn1[0], LV_BTN_STATE_TGL_REL);
 800a916:	4c16      	ldr	r4, [pc, #88]	; (800a970 <update_sel_button_Audio+0xf0>)
 800a918:	2102      	movs	r1, #2
 800a91a:	6820      	ldr	r0, [r4, #0]
 800a91c:	f00b fdf0 	bl	8016500 <lv_btn_set_state>
 800a920:	6860      	ldr	r0, [r4, #4]
			lv_imgbtn_set_state(imgbtn2[0], LV_BTN_STATE_TGL_REL);
 800a922:	4c14      	ldr	r4, [pc, #80]	; (800a974 <update_sel_button_Audio+0xf4>)
 800a924:	2102      	movs	r1, #2
 800a926:	f00b fdeb 	bl	8016500 <lv_btn_set_state>
 800a92a:	2102      	movs	r1, #2
 800a92c:	6820      	ldr	r0, [r4, #0]
 800a92e:	f00b fde7 	bl	8016500 <lv_btn_set_state>
 800a932:	2102      	movs	r1, #2
 800a934:	6860      	ldr	r0, [r4, #4]
 800a936:	f00b fde3 	bl	8016500 <lv_btn_set_state>
 800a93a:	2103      	movs	r1, #3
 800a93c:	e7bc      	b.n	800a8b8 <update_sel_button_Audio+0x38>
			lv_imgbtn_set_state(imgbtn1[0], LV_BTN_STATE_TGL_REL);
 800a93e:	4c0c      	ldr	r4, [pc, #48]	; (800a970 <update_sel_button_Audio+0xf0>)
 800a940:	2102      	movs	r1, #2
 800a942:	6820      	ldr	r0, [r4, #0]
 800a944:	f00b fddc 	bl	8016500 <lv_btn_set_state>
 800a948:	6860      	ldr	r0, [r4, #4]
			lv_imgbtn_set_state(imgbtn2[0], LV_BTN_STATE_TGL_REL);
 800a94a:	4c0a      	ldr	r4, [pc, #40]	; (800a974 <update_sel_button_Audio+0xf4>)
 800a94c:	2102      	movs	r1, #2
 800a94e:	f00b fdd7 	bl	8016500 <lv_btn_set_state>
 800a952:	2102      	movs	r1, #2
 800a954:	6820      	ldr	r0, [r4, #0]
 800a956:	f00b fdd3 	bl	8016500 <lv_btn_set_state>
 800a95a:	2102      	movs	r1, #2
 800a95c:	6860      	ldr	r0, [r4, #4]
 800a95e:	f00b fdcf 	bl	8016500 <lv_btn_set_state>
 800a962:	2102      	movs	r1, #2
 800a964:	68a0      	ldr	r0, [r4, #8]
 800a966:	f00b fdcb 	bl	8016500 <lv_btn_set_state>
 800a96a:	2103      	movs	r1, #3
 800a96c:	e7a8      	b.n	800a8c0 <update_sel_button_Audio+0x40>
 800a96e:	bd10      	pop	{r4, pc}
 800a970:	200051e8 	.word	0x200051e8
 800a974:	200051f0 	.word	0x200051f0

0800a978 <update_sel_button_Audio_1>:

void update_sel_button_Audio_1(uint8_t idx)
{
 800a978:	b510      	push	{r4, lr}
	switch(idx) {
 800a97a:	2804      	cmp	r0, #4
 800a97c:	d83e      	bhi.n	800a9fc <update_sel_button_Audio_1+0x84>
 800a97e:	e8df f000 	tbb	[pc, r0]
 800a982:	1703      	.short	0x1703
 800a984:	211a      	.short	0x211a
 800a986:	2d          	.byte	0x2d
 800a987:	00          	.byte	0x00
		case 0:
			lv_imgbtn_set_state(imgbtn1[0], LV_BTN_STATE_TGL_REL);
 800a988:	4c1d      	ldr	r4, [pc, #116]	; (800aa00 <update_sel_button_Audio_1+0x88>)
 800a98a:	2102      	movs	r1, #2
 800a98c:	6820      	ldr	r0, [r4, #0]
 800a98e:	f00b fdb7 	bl	8016500 <lv_btn_set_state>
 800a992:	2102      	movs	r1, #2
 800a994:	6860      	ldr	r0, [r4, #4]
			lv_imgbtn_set_state(imgbtn2[1], LV_BTN_STATE_TGL_REL);
			break;
		case 1:
			lv_imgbtn_set_state(imgbtn1[0], LV_BTN_STATE_TGL_PR);
			lv_imgbtn_set_state(imgbtn1[1], LV_BTN_STATE_TGL_REL);
			lv_imgbtn_set_state(imgbtn2[0], LV_BTN_STATE_TGL_REL);
 800a996:	4c1b      	ldr	r4, [pc, #108]	; (800aa04 <update_sel_button_Audio_1+0x8c>)
 800a998:	f00b fdb2 	bl	8016500 <lv_btn_set_state>
 800a99c:	2102      	movs	r1, #2
 800a99e:	6820      	ldr	r0, [r4, #0]
 800a9a0:	f00b fdae 	bl	8016500 <lv_btn_set_state>
 800a9a4:	2102      	movs	r1, #2
 800a9a6:	6860      	ldr	r0, [r4, #4]
			lv_imgbtn_set_state(imgbtn1[1], LV_BTN_STATE_TGL_REL);
			lv_imgbtn_set_state(imgbtn2[0], LV_BTN_STATE_TGL_REL);
			lv_imgbtn_set_state(imgbtn2[1], LV_BTN_STATE_TGL_PR);
			break;
	}
}
 800a9a8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a9ac:	f00b bda8 	b.w	8016500 <lv_btn_set_state>
			lv_imgbtn_set_state(imgbtn1[0], LV_BTN_STATE_TGL_PR);
 800a9b0:	4c13      	ldr	r4, [pc, #76]	; (800aa00 <update_sel_button_Audio_1+0x88>)
 800a9b2:	2103      	movs	r1, #3
 800a9b4:	e7ea      	b.n	800a98c <update_sel_button_Audio_1+0x14>
			lv_imgbtn_set_state(imgbtn1[0], LV_BTN_STATE_TGL_REL);
 800a9b6:	4c12      	ldr	r4, [pc, #72]	; (800aa00 <update_sel_button_Audio_1+0x88>)
 800a9b8:	2102      	movs	r1, #2
 800a9ba:	6820      	ldr	r0, [r4, #0]
 800a9bc:	f00b fda0 	bl	8016500 <lv_btn_set_state>
 800a9c0:	2103      	movs	r1, #3
 800a9c2:	e7e7      	b.n	800a994 <update_sel_button_Audio_1+0x1c>
			lv_imgbtn_set_state(imgbtn1[0], LV_BTN_STATE_TGL_REL);
 800a9c4:	4c0e      	ldr	r4, [pc, #56]	; (800aa00 <update_sel_button_Audio_1+0x88>)
 800a9c6:	2102      	movs	r1, #2
 800a9c8:	6820      	ldr	r0, [r4, #0]
 800a9ca:	f00b fd99 	bl	8016500 <lv_btn_set_state>
 800a9ce:	2102      	movs	r1, #2
 800a9d0:	6860      	ldr	r0, [r4, #4]
			lv_imgbtn_set_state(imgbtn2[0], LV_BTN_STATE_TGL_PR);
 800a9d2:	4c0c      	ldr	r4, [pc, #48]	; (800aa04 <update_sel_button_Audio_1+0x8c>)
 800a9d4:	f00b fd94 	bl	8016500 <lv_btn_set_state>
 800a9d8:	2103      	movs	r1, #3
 800a9da:	e7e0      	b.n	800a99e <update_sel_button_Audio_1+0x26>
			lv_imgbtn_set_state(imgbtn1[0], LV_BTN_STATE_TGL_REL);
 800a9dc:	4c08      	ldr	r4, [pc, #32]	; (800aa00 <update_sel_button_Audio_1+0x88>)
 800a9de:	2102      	movs	r1, #2
 800a9e0:	6820      	ldr	r0, [r4, #0]
 800a9e2:	f00b fd8d 	bl	8016500 <lv_btn_set_state>
 800a9e6:	6860      	ldr	r0, [r4, #4]
			lv_imgbtn_set_state(imgbtn2[0], LV_BTN_STATE_TGL_REL);
 800a9e8:	4c06      	ldr	r4, [pc, #24]	; (800aa04 <update_sel_button_Audio_1+0x8c>)
 800a9ea:	2102      	movs	r1, #2
 800a9ec:	f00b fd88 	bl	8016500 <lv_btn_set_state>
 800a9f0:	2102      	movs	r1, #2
 800a9f2:	6820      	ldr	r0, [r4, #0]
 800a9f4:	f00b fd84 	bl	8016500 <lv_btn_set_state>
 800a9f8:	2103      	movs	r1, #3
 800a9fa:	e7d4      	b.n	800a9a6 <update_sel_button_Audio_1+0x2e>
 800a9fc:	bd10      	pop	{r4, pc}
 800a9fe:	bf00      	nop
 800aa00:	200051e8 	.word	0x200051e8
 800aa04:	200051f0 	.word	0x200051f0

0800aa08 <update_sel_button_Audio_2>:

void update_sel_button_Audio_2(uint8_t idx)
{
 800aa08:	b510      	push	{r4, lr}
	switch(idx) {
 800aa0a:	2806      	cmp	r0, #6
 800aa0c:	f200 808b 	bhi.w	800ab26 <update_sel_button_Audio_2+0x11e>
 800aa10:	e8df f000 	tbb	[pc, r0]
 800aa14:	312a2704 	.word	0x312a2704
 800aa18:	5d4d      	.short	0x5d4d
 800aa1a:	71          	.byte	0x71
 800aa1b:	00          	.byte	0x00
		case 0:
			lv_imgbtn_set_state(imgbtn1[0], LV_BTN_STATE_TGL_REL);
 800aa1c:	4c4c      	ldr	r4, [pc, #304]	; (800ab50 <update_sel_button_Audio_2+0x148>)
 800aa1e:	2102      	movs	r1, #2
 800aa20:	6820      	ldr	r0, [r4, #0]
 800aa22:	f00b fd6d 	bl	8016500 <lv_btn_set_state>
 800aa26:	2102      	movs	r1, #2
 800aa28:	6860      	ldr	r0, [r4, #4]
			lv_imgbtn_set_state(imgbtn2[3], LV_BTN_STATE_TGL_REL);
			break;
		case 1:
			lv_imgbtn_set_state(imgbtn1[0], LV_BTN_STATE_TGL_PR);
			lv_imgbtn_set_state(imgbtn1[1], LV_BTN_STATE_TGL_REL);
			lv_imgbtn_set_state(imgbtn2[0], LV_BTN_STATE_TGL_REL);
 800aa2a:	4c4a      	ldr	r4, [pc, #296]	; (800ab54 <update_sel_button_Audio_2+0x14c>)
 800aa2c:	f00b fd68 	bl	8016500 <lv_btn_set_state>
 800aa30:	2102      	movs	r1, #2
 800aa32:	6820      	ldr	r0, [r4, #0]
 800aa34:	f00b fd64 	bl	8016500 <lv_btn_set_state>
 800aa38:	2102      	movs	r1, #2
 800aa3a:	6860      	ldr	r0, [r4, #4]
 800aa3c:	f00b fd60 	bl	8016500 <lv_btn_set_state>
 800aa40:	2102      	movs	r1, #2
 800aa42:	68a0      	ldr	r0, [r4, #8]
 800aa44:	f00b fd5c 	bl	8016500 <lv_btn_set_state>
 800aa48:	2102      	movs	r1, #2
 800aa4a:	68e0      	ldr	r0, [r4, #12]
 800aa4c:	f00b fd58 	bl	8016500 <lv_btn_set_state>
			lv_imgbtn_set_state(imgbtn2[3], LV_BTN_STATE_TGL_PR);
			break;
	}
	// Re-Update MP3 Button
	if(idx < 3) {
		switch(mp3_status) {
 800aa50:	4b41      	ldr	r3, [pc, #260]	; (800ab58 <update_sel_button_Audio_2+0x150>)
 800aa52:	781b      	ldrb	r3, [r3, #0]
 800aa54:	2b04      	cmp	r3, #4
 800aa56:	d868      	bhi.n	800ab2a <update_sel_button_Audio_2+0x122>
 800aa58:	e8df f003 	tbb	[pc, r3]
 800aa5c:	72706c68 	.word	0x72706c68
 800aa60:	76          	.byte	0x76
 800aa61:	00          	.byte	0x00
			lv_imgbtn_set_state(imgbtn1[0], LV_BTN_STATE_TGL_PR);
 800aa62:	4c3b      	ldr	r4, [pc, #236]	; (800ab50 <update_sel_button_Audio_2+0x148>)
 800aa64:	2103      	movs	r1, #3
 800aa66:	e7db      	b.n	800aa20 <update_sel_button_Audio_2+0x18>
			lv_imgbtn_set_state(imgbtn1[0], LV_BTN_STATE_TGL_REL);
 800aa68:	4c39      	ldr	r4, [pc, #228]	; (800ab50 <update_sel_button_Audio_2+0x148>)
 800aa6a:	2102      	movs	r1, #2
 800aa6c:	6820      	ldr	r0, [r4, #0]
 800aa6e:	f00b fd47 	bl	8016500 <lv_btn_set_state>
 800aa72:	2103      	movs	r1, #3
 800aa74:	e7d8      	b.n	800aa28 <update_sel_button_Audio_2+0x20>
			lv_imgbtn_set_state(imgbtn1[0], LV_BTN_STATE_TGL_REL);
 800aa76:	4c36      	ldr	r4, [pc, #216]	; (800ab50 <update_sel_button_Audio_2+0x148>)
 800aa78:	2102      	movs	r1, #2
 800aa7a:	6820      	ldr	r0, [r4, #0]
 800aa7c:	f00b fd40 	bl	8016500 <lv_btn_set_state>
 800aa80:	6860      	ldr	r0, [r4, #4]
			lv_imgbtn_set_state(imgbtn2[0], LV_BTN_STATE_TGL_PR);
 800aa82:	4c34      	ldr	r4, [pc, #208]	; (800ab54 <update_sel_button_Audio_2+0x14c>)
 800aa84:	2102      	movs	r1, #2
 800aa86:	f00b fd3b 	bl	8016500 <lv_btn_set_state>
 800aa8a:	2103      	movs	r1, #3
 800aa8c:	6820      	ldr	r0, [r4, #0]
 800aa8e:	f00b fd37 	bl	8016500 <lv_btn_set_state>
 800aa92:	2102      	movs	r1, #2
 800aa94:	6860      	ldr	r0, [r4, #4]
 800aa96:	f00b fd33 	bl	8016500 <lv_btn_set_state>
 800aa9a:	2102      	movs	r1, #2
 800aa9c:	68a0      	ldr	r0, [r4, #8]
 800aa9e:	f00b fd2f 	bl	8016500 <lv_btn_set_state>
 800aaa2:	2102      	movs	r1, #2
 800aaa4:	68e0      	ldr	r0, [r4, #12]
			case 4:
				lv_imgbtn_set_state(imgbtn2[2], LV_BTN_STATE_PR);
				break;
		}
	}
}
 800aaa6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800aaaa:	f00b bd29 	b.w	8016500 <lv_btn_set_state>
			lv_imgbtn_set_state(imgbtn1[0], LV_BTN_STATE_TGL_REL);
 800aaae:	4c28      	ldr	r4, [pc, #160]	; (800ab50 <update_sel_button_Audio_2+0x148>)
 800aab0:	2102      	movs	r1, #2
 800aab2:	6820      	ldr	r0, [r4, #0]
 800aab4:	f00b fd24 	bl	8016500 <lv_btn_set_state>
 800aab8:	6860      	ldr	r0, [r4, #4]
			lv_imgbtn_set_state(imgbtn2[0], LV_BTN_STATE_TGL_REL);
 800aaba:	4c26      	ldr	r4, [pc, #152]	; (800ab54 <update_sel_button_Audio_2+0x14c>)
 800aabc:	2102      	movs	r1, #2
 800aabe:	f00b fd1f 	bl	8016500 <lv_btn_set_state>
 800aac2:	2102      	movs	r1, #2
 800aac4:	6820      	ldr	r0, [r4, #0]
 800aac6:	f00b fd1b 	bl	8016500 <lv_btn_set_state>
 800aaca:	2103      	movs	r1, #3
 800aacc:	e7e2      	b.n	800aa94 <update_sel_button_Audio_2+0x8c>
			lv_imgbtn_set_state(imgbtn1[0], LV_BTN_STATE_TGL_REL);
 800aace:	4c20      	ldr	r4, [pc, #128]	; (800ab50 <update_sel_button_Audio_2+0x148>)
 800aad0:	2102      	movs	r1, #2
 800aad2:	6820      	ldr	r0, [r4, #0]
 800aad4:	f00b fd14 	bl	8016500 <lv_btn_set_state>
 800aad8:	6860      	ldr	r0, [r4, #4]
			lv_imgbtn_set_state(imgbtn2[0], LV_BTN_STATE_TGL_REL);
 800aada:	4c1e      	ldr	r4, [pc, #120]	; (800ab54 <update_sel_button_Audio_2+0x14c>)
 800aadc:	2102      	movs	r1, #2
 800aade:	f00b fd0f 	bl	8016500 <lv_btn_set_state>
 800aae2:	2102      	movs	r1, #2
 800aae4:	6820      	ldr	r0, [r4, #0]
 800aae6:	f00b fd0b 	bl	8016500 <lv_btn_set_state>
 800aaea:	2102      	movs	r1, #2
 800aaec:	6860      	ldr	r0, [r4, #4]
 800aaee:	f00b fd07 	bl	8016500 <lv_btn_set_state>
 800aaf2:	2103      	movs	r1, #3
 800aaf4:	e7d2      	b.n	800aa9c <update_sel_button_Audio_2+0x94>
			lv_imgbtn_set_state(imgbtn1[0], LV_BTN_STATE_TGL_REL);
 800aaf6:	4c16      	ldr	r4, [pc, #88]	; (800ab50 <update_sel_button_Audio_2+0x148>)
 800aaf8:	2102      	movs	r1, #2
 800aafa:	6820      	ldr	r0, [r4, #0]
 800aafc:	f00b fd00 	bl	8016500 <lv_btn_set_state>
 800ab00:	6860      	ldr	r0, [r4, #4]
			lv_imgbtn_set_state(imgbtn2[0], LV_BTN_STATE_TGL_REL);
 800ab02:	4c14      	ldr	r4, [pc, #80]	; (800ab54 <update_sel_button_Audio_2+0x14c>)
 800ab04:	2102      	movs	r1, #2
 800ab06:	f00b fcfb 	bl	8016500 <lv_btn_set_state>
 800ab0a:	2102      	movs	r1, #2
 800ab0c:	6820      	ldr	r0, [r4, #0]
 800ab0e:	f00b fcf7 	bl	8016500 <lv_btn_set_state>
 800ab12:	2102      	movs	r1, #2
 800ab14:	6860      	ldr	r0, [r4, #4]
 800ab16:	f00b fcf3 	bl	8016500 <lv_btn_set_state>
 800ab1a:	2102      	movs	r1, #2
 800ab1c:	68a0      	ldr	r0, [r4, #8]
 800ab1e:	f00b fcef 	bl	8016500 <lv_btn_set_state>
 800ab22:	2103      	movs	r1, #3
 800ab24:	e7be      	b.n	800aaa4 <update_sel_button_Audio_2+0x9c>
	if(idx < 3) {
 800ab26:	2802      	cmp	r0, #2
 800ab28:	d992      	bls.n	800aa50 <update_sel_button_Audio_2+0x48>
 800ab2a:	bd10      	pop	{r4, pc}
 800ab2c:	4b09      	ldr	r3, [pc, #36]	; (800ab54 <update_sel_button_Audio_2+0x14c>)
 800ab2e:	2101      	movs	r1, #1
 800ab30:	68d8      	ldr	r0, [r3, #12]
 800ab32:	e7b8      	b.n	800aaa6 <update_sel_button_Audio_2+0x9e>
 800ab34:	2101      	movs	r1, #1
 800ab36:	4b07      	ldr	r3, [pc, #28]	; (800ab54 <update_sel_button_Audio_2+0x14c>)
 800ab38:	6858      	ldr	r0, [r3, #4]
 800ab3a:	e7b4      	b.n	800aaa6 <update_sel_button_Audio_2+0x9e>
 800ab3c:	2104      	movs	r1, #4
 800ab3e:	e7fa      	b.n	800ab36 <update_sel_button_Audio_2+0x12e>
 800ab40:	4b04      	ldr	r3, [pc, #16]	; (800ab54 <update_sel_button_Audio_2+0x14c>)
 800ab42:	2101      	movs	r1, #1
 800ab44:	6818      	ldr	r0, [r3, #0]
 800ab46:	e7ae      	b.n	800aaa6 <update_sel_button_Audio_2+0x9e>
 800ab48:	4b02      	ldr	r3, [pc, #8]	; (800ab54 <update_sel_button_Audio_2+0x14c>)
 800ab4a:	2101      	movs	r1, #1
 800ab4c:	6898      	ldr	r0, [r3, #8]
 800ab4e:	e7aa      	b.n	800aaa6 <update_sel_button_Audio_2+0x9e>
 800ab50:	200051e8 	.word	0x200051e8
 800ab54:	200051f0 	.word	0x200051f0
 800ab58:	20004e34 	.word	0x20004e34

0800ab5c <ButtonEventTelaAudio>:

void ButtonEventTelaAudio(uint8_t event, uint8_t tipo, uint8_t id)
{
	uint32_t x;

	if(event == EVT_PBTN_INPUT) {
 800ab5c:	2810      	cmp	r0, #16
{
 800ab5e:	b538      	push	{r3, r4, r5, lr}
	if(event == EVT_PBTN_INPUT) {
 800ab60:	d14d      	bne.n	800abfe <ButtonEventTelaAudio+0xa2>
		if(tipo == PBTN_SCLK) {	// Single Click
 800ab62:	2901      	cmp	r1, #1
 800ab64:	d14b      	bne.n	800abfe <ButtonEventTelaAudio+0xa2>
			switch(id) {
 800ab66:	2a03      	cmp	r2, #3
 800ab68:	d849      	bhi.n	800abfe <ButtonEventTelaAudio+0xa2>
 800ab6a:	e8df f002 	tbb	[pc, r2]
 800ab6e:	1802      	.short	0x1802
 800ab70:	4225      	.short	0x4225
				case KEY_DN:
					if(TelaAudioProg == 0) {
 800ab72:	4b23      	ldr	r3, [pc, #140]	; (800ac00 <ButtonEventTelaAudio+0xa4>)
 800ab74:	681a      	ldr	r2, [r3, #0]
 800ab76:	b932      	cbnz	r2, 800ab86 <ButtonEventTelaAudio+0x2a>
						lv_event_send(img_fundo, LV_EVENT_APPLY, NULL);
 800ab78:	4b22      	ldr	r3, [pc, #136]	; (800ac04 <ButtonEventTelaAudio+0xa8>)
 800ab7a:	2111      	movs	r1, #17
						update_sel_button_Audio(IndiceAudio+1);
					}
					break;
				case KEY_UP:
					if(TelaAudioProg == 0) {
						lv_event_send(imgbtn_next[0], LV_EVENT_APPLY, NULL);
 800ab7c:	6818      	ldr	r0, [r3, #0]
					update_sel_button_Audio(0);
					break;
			}
		}
	}
}
 800ab7e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
						lv_event_send(imgbtn_next[0], LV_EVENT_APPLY, NULL);
 800ab82:	f004 bdad 	b.w	800f6e0 <lv_event_send>
						if(IndiceAudio >= 1) IndiceAudio--;
 800ab86:	4b20      	ldr	r3, [pc, #128]	; (800ac08 <ButtonEventTelaAudio+0xac>)
 800ab88:	681a      	ldr	r2, [r3, #0]
 800ab8a:	b10a      	cbz	r2, 800ab90 <ButtonEventTelaAudio+0x34>
 800ab8c:	3a01      	subs	r2, #1
 800ab8e:	601a      	str	r2, [r3, #0]
						update_sel_button_Audio(IndiceAudio+1);
 800ab90:	6818      	ldr	r0, [r3, #0]
 800ab92:	3001      	adds	r0, #1
 800ab94:	b2c0      	uxtb	r0, r0
}
 800ab96:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
					update_sel_button_Audio(0);
 800ab9a:	f7ff be71 	b.w	800a880 <update_sel_button_Audio>
					if(TelaAudioProg == 0) {
 800ab9e:	4b18      	ldr	r3, [pc, #96]	; (800ac00 <ButtonEventTelaAudio+0xa4>)
 800aba0:	681a      	ldr	r2, [r3, #0]
 800aba2:	b912      	cbnz	r2, 800abaa <ButtonEventTelaAudio+0x4e>
						lv_event_send(imgbtn_next[0], LV_EVENT_APPLY, NULL);
 800aba4:	2111      	movs	r1, #17
 800aba6:	4b19      	ldr	r3, [pc, #100]	; (800ac0c <ButtonEventTelaAudio+0xb0>)
 800aba8:	e7e8      	b.n	800ab7c <ButtonEventTelaAudio+0x20>
						IndiceAudio++;
 800abaa:	4b17      	ldr	r3, [pc, #92]	; (800ac08 <ButtonEventTelaAudio+0xac>)
 800abac:	681a      	ldr	r2, [r3, #0]
 800abae:	3201      	adds	r2, #1
						if(IndiceAudio > 5) IndiceAudio = 0;
 800abb0:	2a05      	cmp	r2, #5
 800abb2:	bf88      	it	hi
 800abb4:	2200      	movhi	r2, #0
 800abb6:	e7ea      	b.n	800ab8e <ButtonEventTelaAudio+0x32>
					if(TelaAudioProg == 0) {
 800abb8:	4b11      	ldr	r3, [pc, #68]	; (800ac00 <ButtonEventTelaAudio+0xa4>)
 800abba:	681a      	ldr	r2, [r3, #0]
 800abbc:	b922      	cbnz	r2, 800abc8 <ButtonEventTelaAudio+0x6c>
						TelaAudioProg = 1;
 800abbe:	2001      	movs	r0, #1
 800abc0:	6018      	str	r0, [r3, #0]
						IndiceAudio = 0;
 800abc2:	4b11      	ldr	r3, [pc, #68]	; (800ac08 <ButtonEventTelaAudio+0xac>)
 800abc4:	601a      	str	r2, [r3, #0]
 800abc6:	e7e6      	b.n	800ab96 <ButtonEventTelaAudio+0x3a>
					else if(TelaAudioProg == 1) {
 800abc8:	2a01      	cmp	r2, #1
 800abca:	d118      	bne.n	800abfe <ButtonEventTelaAudio+0xa2>
						TelaAudioProg = 2;
 800abcc:	2202      	movs	r2, #2
 800abce:	601a      	str	r2, [r3, #0]
						if(IndiceAudio == 0 || IndiceAudio == 1) {
 800abd0:	4b0d      	ldr	r3, [pc, #52]	; (800ac08 <ButtonEventTelaAudio+0xac>)
 800abd2:	681c      	ldr	r4, [r3, #0]
 800abd4:	2c01      	cmp	r4, #1
							x = (uint32_t)IndiceAudio - 2;
 800abd6:	bf8a      	itet	hi
 800abd8:	3c02      	subhi	r4, #2
							lv_obj_set_user_data(imgbtn1[x], x);
 800abda:	4d0d      	ldrls	r5, [pc, #52]	; (800ac10 <ButtonEventTelaAudio+0xb4>)
							lv_obj_set_user_data(imgbtn2[x], x);
 800abdc:	4d0d      	ldrhi	r5, [pc, #52]	; (800ac14 <ButtonEventTelaAudio+0xb8>)
 800abde:	4621      	mov	r1, r4
 800abe0:	f855 0024 	ldr.w	r0, [r5, r4, lsl #2]
 800abe4:	f005 fccf 	bl	8010586 <lv_obj_set_user_data>
							lv_event_send(imgbtn2[x], LV_EVENT_RELEASED, NULL);
 800abe8:	2200      	movs	r2, #0
 800abea:	2107      	movs	r1, #7
 800abec:	f855 0024 	ldr.w	r0, [r5, r4, lsl #2]
 800abf0:	e7c5      	b.n	800ab7e <ButtonEventTelaAudio+0x22>
					TelaAudioProg = 0;
 800abf2:	4b03      	ldr	r3, [pc, #12]	; (800ac00 <ButtonEventTelaAudio+0xa4>)
 800abf4:	2000      	movs	r0, #0
 800abf6:	6018      	str	r0, [r3, #0]
					IndiceAudio = 0;
 800abf8:	4b03      	ldr	r3, [pc, #12]	; (800ac08 <ButtonEventTelaAudio+0xac>)
 800abfa:	6018      	str	r0, [r3, #0]
 800abfc:	e7cb      	b.n	800ab96 <ButtonEventTelaAudio+0x3a>
 800abfe:	bd38      	pop	{r3, r4, r5, pc}
 800ac00:	200051c4 	.word	0x200051c4
 800ac04:	200051e4 	.word	0x200051e4
 800ac08:	200051b8 	.word	0x200051b8
 800ac0c:	20005200 	.word	0x20005200
 800ac10:	200051e8 	.word	0x200051e8
 800ac14:	200051f0 	.word	0x200051f0

0800ac18 <ButtonEventTelaAudio_1>:

void ButtonEventTelaAudio_1(uint8_t event, uint8_t tipo, uint8_t id)
{
	uint32_t x;

	if(event == EVT_PBTN_INPUT) {
 800ac18:	2810      	cmp	r0, #16
{
 800ac1a:	b538      	push	{r3, r4, r5, lr}
	if(event == EVT_PBTN_INPUT) {
 800ac1c:	d150      	bne.n	800acc0 <ButtonEventTelaAudio_1+0xa8>
		if(tipo == PBTN_SCLK) {	// Single Click
 800ac1e:	2901      	cmp	r1, #1
 800ac20:	d14e      	bne.n	800acc0 <ButtonEventTelaAudio_1+0xa8>
			switch(id) {
 800ac22:	2a03      	cmp	r2, #3
 800ac24:	d84c      	bhi.n	800acc0 <ButtonEventTelaAudio_1+0xa8>
 800ac26:	e8df f002 	tbb	[pc, r2]
 800ac2a:	1802      	.short	0x1802
 800ac2c:	4525      	.short	0x4525
				case KEY_DN:
					if(TelaAudioProg_1 == 0) {
 800ac2e:	4b25      	ldr	r3, [pc, #148]	; (800acc4 <ButtonEventTelaAudio_1+0xac>)
 800ac30:	681a      	ldr	r2, [r3, #0]
 800ac32:	b932      	cbnz	r2, 800ac42 <ButtonEventTelaAudio_1+0x2a>
						lv_event_send(imgbtn_prev[1], LV_EVENT_APPLY, NULL);
 800ac34:	4b24      	ldr	r3, [pc, #144]	; (800acc8 <ButtonEventTelaAudio_1+0xb0>)
 800ac36:	2111      	movs	r1, #17
						update_sel_button_Audio_1(IndiceAudio_1 + 1);
					}
					break;
				case KEY_UP:
					if(TelaAudioProg_1 == 0) {
						lv_event_send(imgbtn_next[1], LV_EVENT_APPLY, NULL);
 800ac38:	6858      	ldr	r0, [r3, #4]
					update_sel_button_Audio_1(0);
					break;
			}
		}
	}
}
 800ac3a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
						lv_event_send(imgbtn_next[1], LV_EVENT_APPLY, NULL);
 800ac3e:	f004 bd4f 	b.w	800f6e0 <lv_event_send>
						if(IndiceAudio_1 >= 1) IndiceAudio_1--;
 800ac42:	4b22      	ldr	r3, [pc, #136]	; (800accc <ButtonEventTelaAudio_1+0xb4>)
 800ac44:	681a      	ldr	r2, [r3, #0]
 800ac46:	b10a      	cbz	r2, 800ac4c <ButtonEventTelaAudio_1+0x34>
 800ac48:	3a01      	subs	r2, #1
 800ac4a:	601a      	str	r2, [r3, #0]
						update_sel_button_Audio_1(IndiceAudio_1 + 1);
 800ac4c:	6818      	ldr	r0, [r3, #0]
 800ac4e:	3001      	adds	r0, #1
 800ac50:	b2c0      	uxtb	r0, r0
}
 800ac52:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
					update_sel_button_Audio_1(0);
 800ac56:	f7ff be8f 	b.w	800a978 <update_sel_button_Audio_1>
					if(TelaAudioProg_1 == 0) {
 800ac5a:	4b1a      	ldr	r3, [pc, #104]	; (800acc4 <ButtonEventTelaAudio_1+0xac>)
 800ac5c:	681a      	ldr	r2, [r3, #0]
 800ac5e:	b912      	cbnz	r2, 800ac66 <ButtonEventTelaAudio_1+0x4e>
						lv_event_send(imgbtn_next[1], LV_EVENT_APPLY, NULL);
 800ac60:	2111      	movs	r1, #17
 800ac62:	4b1b      	ldr	r3, [pc, #108]	; (800acd0 <ButtonEventTelaAudio_1+0xb8>)
 800ac64:	e7e8      	b.n	800ac38 <ButtonEventTelaAudio_1+0x20>
						IndiceAudio_1++;
 800ac66:	4b19      	ldr	r3, [pc, #100]	; (800accc <ButtonEventTelaAudio_1+0xb4>)
 800ac68:	681a      	ldr	r2, [r3, #0]
 800ac6a:	3201      	adds	r2, #1
						if(IndiceAudio_1 > 3) IndiceAudio_1 = 0;
 800ac6c:	2a03      	cmp	r2, #3
 800ac6e:	bf88      	it	hi
 800ac70:	2200      	movhi	r2, #0
 800ac72:	e7ea      	b.n	800ac4a <ButtonEventTelaAudio_1+0x32>
					if(TelaAudioProg_1 == 0) {
 800ac74:	4b13      	ldr	r3, [pc, #76]	; (800acc4 <ButtonEventTelaAudio_1+0xac>)
 800ac76:	681a      	ldr	r2, [r3, #0]
 800ac78:	b922      	cbnz	r2, 800ac84 <ButtonEventTelaAudio_1+0x6c>
						TelaAudioProg_1 = 1;
 800ac7a:	2001      	movs	r0, #1
 800ac7c:	6018      	str	r0, [r3, #0]
						IndiceAudio_1 = 0;
 800ac7e:	4b13      	ldr	r3, [pc, #76]	; (800accc <ButtonEventTelaAudio_1+0xb4>)
 800ac80:	601a      	str	r2, [r3, #0]
 800ac82:	e7e6      	b.n	800ac52 <ButtonEventTelaAudio_1+0x3a>
					else if(TelaAudioProg_1 == 1) {
 800ac84:	2a01      	cmp	r2, #1
 800ac86:	d11b      	bne.n	800acc0 <ButtonEventTelaAudio_1+0xa8>
						TelaAudioProg_1 = 2;
 800ac88:	2202      	movs	r2, #2
 800ac8a:	601a      	str	r2, [r3, #0]
						if(IndiceAudio_1 == 0 || IndiceAudio_1 == 1) {
 800ac8c:	4b0f      	ldr	r3, [pc, #60]	; (800accc <ButtonEventTelaAudio_1+0xb4>)
 800ac8e:	681c      	ldr	r4, [r3, #0]
 800ac90:	2c01      	cmp	r4, #1
 800ac92:	d80a      	bhi.n	800acaa <ButtonEventTelaAudio_1+0x92>
							lv_obj_set_user_data(imgbtn1[x], x);
 800ac94:	4d0f      	ldr	r5, [pc, #60]	; (800acd4 <ButtonEventTelaAudio_1+0xbc>)
							lv_obj_set_user_data(imgbtn2[x], x);
 800ac96:	f855 0024 	ldr.w	r0, [r5, r4, lsl #2]
 800ac9a:	4621      	mov	r1, r4
 800ac9c:	f005 fc73 	bl	8010586 <lv_obj_set_user_data>
							lv_event_send(imgbtn2[x], LV_EVENT_RELEASED, NULL);
 800aca0:	2200      	movs	r2, #0
 800aca2:	2107      	movs	r1, #7
 800aca4:	f855 0024 	ldr.w	r0, [r5, r4, lsl #2]
 800aca8:	e7c7      	b.n	800ac3a <ButtonEventTelaAudio_1+0x22>
						else if(IndiceAudio_1 == 2 || IndiceAudio_1 == 3) {
 800acaa:	3c02      	subs	r4, #2
 800acac:	2c01      	cmp	r4, #1
 800acae:	d807      	bhi.n	800acc0 <ButtonEventTelaAudio_1+0xa8>
							lv_obj_set_user_data(imgbtn2[x], x);
 800acb0:	4d09      	ldr	r5, [pc, #36]	; (800acd8 <ButtonEventTelaAudio_1+0xc0>)
 800acb2:	e7f0      	b.n	800ac96 <ButtonEventTelaAudio_1+0x7e>
					TelaAudioProg_1 = 0;
 800acb4:	4b03      	ldr	r3, [pc, #12]	; (800acc4 <ButtonEventTelaAudio_1+0xac>)
 800acb6:	2000      	movs	r0, #0
 800acb8:	6018      	str	r0, [r3, #0]
					IndiceAudio_1 = 0;
 800acba:	4b04      	ldr	r3, [pc, #16]	; (800accc <ButtonEventTelaAudio_1+0xb4>)
 800acbc:	6018      	str	r0, [r3, #0]
 800acbe:	e7c8      	b.n	800ac52 <ButtonEventTelaAudio_1+0x3a>
 800acc0:	bd38      	pop	{r3, r4, r5, pc}
 800acc2:	bf00      	nop
 800acc4:	200051c8 	.word	0x200051c8
 800acc8:	20005208 	.word	0x20005208
 800accc:	200051bc 	.word	0x200051bc
 800acd0:	20005200 	.word	0x20005200
 800acd4:	200051e8 	.word	0x200051e8
 800acd8:	200051f0 	.word	0x200051f0

0800acdc <ButtonEventTelaAudio_2>:

void ButtonEventTelaAudio_2(uint8_t event, uint8_t tipo, uint8_t id)
{
	uint32_t x;

	if(event == EVT_PBTN_INPUT) {
 800acdc:	2810      	cmp	r0, #16
{
 800acde:	b537      	push	{r0, r1, r2, r4, r5, lr}
	if(event == EVT_PBTN_INPUT) {
 800ace0:	d10f      	bne.n	800ad02 <ButtonEventTelaAudio_2+0x26>
		if(tipo == PBTN_SCLK) {	// Single Click
 800ace2:	2901      	cmp	r1, #1
 800ace4:	d10d      	bne.n	800ad02 <ButtonEventTelaAudio_2+0x26>
			switch(id) {
 800ace6:	2a03      	cmp	r2, #3
 800ace8:	d80b      	bhi.n	800ad02 <ButtonEventTelaAudio_2+0x26>
 800acea:	e8df f002 	tbb	[pc, r2]
 800acee:	1702      	.short	0x1702
 800acf0:	5722      	.short	0x5722
				case KEY_DN:
					if(TelaAudioProg_2 == 0) {
 800acf2:	4b2d      	ldr	r3, [pc, #180]	; (800ada8 <ButtonEventTelaAudio_2+0xcc>)
 800acf4:	681a      	ldr	r2, [r3, #0]
 800acf6:	b932      	cbnz	r2, 800ad06 <ButtonEventTelaAudio_2+0x2a>
						lv_event_send(imgbtn_prev[2], LV_EVENT_APPLY, NULL);
 800acf8:	4b2c      	ldr	r3, [pc, #176]	; (800adac <ButtonEventTelaAudio_2+0xd0>)
 800acfa:	6898      	ldr	r0, [r3, #8]
 800acfc:	2111      	movs	r1, #17
					else if(TelaAudioProg_2 == 1) {
						TelaAudioProg_2 = 2;
						if(IndiceAudio_2 == 0 || IndiceAudio_2 == 1) {
							x = (uint32_t) IndiceAudio_2;
							lv_obj_set_user_data(imgbtn1[x], x);
							lv_event_send(imgbtn1[x], LV_EVENT_RELEASED, &x);
 800acfe:	f004 fcef 	bl	800f6e0 <lv_event_send>
					update_sel_button_Audio_2(0);
					break;
			}
		}
	}
}
 800ad02:	b003      	add	sp, #12
 800ad04:	bd30      	pop	{r4, r5, pc}
						if(IndiceAudio_2 >= 1) IndiceAudio_2--;
 800ad06:	4b2a      	ldr	r3, [pc, #168]	; (800adb0 <ButtonEventTelaAudio_2+0xd4>)
 800ad08:	681a      	ldr	r2, [r3, #0]
 800ad0a:	b10a      	cbz	r2, 800ad10 <ButtonEventTelaAudio_2+0x34>
 800ad0c:	3a01      	subs	r2, #1
 800ad0e:	601a      	str	r2, [r3, #0]
						update_sel_button_Audio_2(IndiceAudio_2 + 1);
 800ad10:	6818      	ldr	r0, [r3, #0]
 800ad12:	3001      	adds	r0, #1
 800ad14:	b2c0      	uxtb	r0, r0
					update_sel_button_Audio_2(0);
 800ad16:	f7ff fe77 	bl	800aa08 <update_sel_button_Audio_2>
}
 800ad1a:	e7f2      	b.n	800ad02 <ButtonEventTelaAudio_2+0x26>
					if(TelaAudioProg_2 != 0) {
 800ad1c:	4b22      	ldr	r3, [pc, #136]	; (800ada8 <ButtonEventTelaAudio_2+0xcc>)
 800ad1e:	681b      	ldr	r3, [r3, #0]
 800ad20:	2b00      	cmp	r3, #0
 800ad22:	d0ee      	beq.n	800ad02 <ButtonEventTelaAudio_2+0x26>
						IndiceAudio_2++;
 800ad24:	4b22      	ldr	r3, [pc, #136]	; (800adb0 <ButtonEventTelaAudio_2+0xd4>)
 800ad26:	681a      	ldr	r2, [r3, #0]
 800ad28:	3201      	adds	r2, #1
						if(IndiceAudio_2 > 5) IndiceAudio_2 = 0;
 800ad2a:	2a05      	cmp	r2, #5
 800ad2c:	bf88      	it	hi
 800ad2e:	2200      	movhi	r2, #0
 800ad30:	e7ed      	b.n	800ad0e <ButtonEventTelaAudio_2+0x32>
					logI("Tela Audio_2 - Key_Enter Var: %ld Idx: %ld\n", TelaAudioProg_2, IndiceAudio_2);
 800ad32:	4c1d      	ldr	r4, [pc, #116]	; (800ada8 <ButtonEventTelaAudio_2+0xcc>)
 800ad34:	4d1e      	ldr	r5, [pc, #120]	; (800adb0 <ButtonEventTelaAudio_2+0xd4>)
 800ad36:	6821      	ldr	r1, [r4, #0]
 800ad38:	682a      	ldr	r2, [r5, #0]
 800ad3a:	481e      	ldr	r0, [pc, #120]	; (800adb4 <ButtonEventTelaAudio_2+0xd8>)
 800ad3c:	f7f6 fc96 	bl	800166c <logI>
					if(TelaAudioProg_2 == 0) {
 800ad40:	6823      	ldr	r3, [r4, #0]
 800ad42:	b91b      	cbnz	r3, 800ad4c <ButtonEventTelaAudio_2+0x70>
						TelaAudioProg_2 = 1;
 800ad44:	2001      	movs	r0, #1
 800ad46:	6020      	str	r0, [r4, #0]
						IndiceAudio_2 = 0;
 800ad48:	602b      	str	r3, [r5, #0]
 800ad4a:	e7e4      	b.n	800ad16 <ButtonEventTelaAudio_2+0x3a>
					else if(TelaAudioProg_2 == 1) {
 800ad4c:	2b01      	cmp	r3, #1
 800ad4e:	d1d8      	bne.n	800ad02 <ButtonEventTelaAudio_2+0x26>
						if(IndiceAudio_2 == 0 || IndiceAudio_2 == 1) {
 800ad50:	6829      	ldr	r1, [r5, #0]
						TelaAudioProg_2 = 2;
 800ad52:	2302      	movs	r3, #2
						if(IndiceAudio_2 == 0 || IndiceAudio_2 == 1) {
 800ad54:	2901      	cmp	r1, #1
						TelaAudioProg_2 = 2;
 800ad56:	6023      	str	r3, [r4, #0]
						if(IndiceAudio_2 == 0 || IndiceAudio_2 == 1) {
 800ad58:	d80b      	bhi.n	800ad72 <ButtonEventTelaAudio_2+0x96>
							lv_obj_set_user_data(imgbtn1[x], x);
 800ad5a:	4c17      	ldr	r4, [pc, #92]	; (800adb8 <ButtonEventTelaAudio_2+0xdc>)
							x = (uint32_t) IndiceAudio_2;
 800ad5c:	9101      	str	r1, [sp, #4]
							lv_obj_set_user_data(imgbtn1[x], x);
 800ad5e:	f854 0021 	ldr.w	r0, [r4, r1, lsl #2]
 800ad62:	f005 fc10 	bl	8010586 <lv_obj_set_user_data>
							lv_event_send(imgbtn1[x], LV_EVENT_RELEASED, &x);
 800ad66:	9b01      	ldr	r3, [sp, #4]
 800ad68:	aa01      	add	r2, sp, #4
 800ad6a:	2107      	movs	r1, #7
 800ad6c:	f854 0023 	ldr.w	r0, [r4, r3, lsl #2]
 800ad70:	e7c5      	b.n	800acfe <ButtonEventTelaAudio_2+0x22>
							x = (uint32_t) IndiceAudio_2 - 2;
 800ad72:	3902      	subs	r1, #2
							lv_obj_set_user_data(imgbtn2[x], x);
 800ad74:	4d11      	ldr	r5, [pc, #68]	; (800adbc <ButtonEventTelaAudio_2+0xe0>)
							x = (uint32_t) IndiceAudio_2 - 2;
 800ad76:	9101      	str	r1, [sp, #4]
							lv_obj_set_user_data(imgbtn2[x], x);
 800ad78:	f855 0021 	ldr.w	r0, [r5, r1, lsl #2]
 800ad7c:	f005 fc03 	bl	8010586 <lv_obj_set_user_data>
							lv_event_send(imgbtn2[x], LV_EVENT_RELEASED, &x);
 800ad80:	9b01      	ldr	r3, [sp, #4]
 800ad82:	aa01      	add	r2, sp, #4
 800ad84:	f855 0023 	ldr.w	r0, [r5, r3, lsl #2]
 800ad88:	2107      	movs	r1, #7
 800ad8a:	f004 fca9 	bl	800f6e0 <lv_event_send>
							logI("Debug: MP3  DBG: %ld\n", x);
 800ad8e:	9901      	ldr	r1, [sp, #4]
 800ad90:	480b      	ldr	r0, [pc, #44]	; (800adc0 <ButtonEventTelaAudio_2+0xe4>)
 800ad92:	f7f6 fc6b 	bl	800166c <logI>
							TelaAudioProg_2 = 0;
 800ad96:	2300      	movs	r3, #0
 800ad98:	6023      	str	r3, [r4, #0]
 800ad9a:	e7b2      	b.n	800ad02 <ButtonEventTelaAudio_2+0x26>
					TelaAudioProg_2 = 0;
 800ad9c:	4b02      	ldr	r3, [pc, #8]	; (800ada8 <ButtonEventTelaAudio_2+0xcc>)
 800ad9e:	2000      	movs	r0, #0
 800ada0:	6018      	str	r0, [r3, #0]
					IndiceAudio_2 = 0;
 800ada2:	4b03      	ldr	r3, [pc, #12]	; (800adb0 <ButtonEventTelaAudio_2+0xd4>)
 800ada4:	6018      	str	r0, [r3, #0]
 800ada6:	e7b6      	b.n	800ad16 <ButtonEventTelaAudio_2+0x3a>
 800ada8:	200051cc 	.word	0x200051cc
 800adac:	20005208 	.word	0x20005208
 800adb0:	200051c0 	.word	0x200051c0
 800adb4:	0802c7a8 	.word	0x0802c7a8
 800adb8:	200051e8 	.word	0x200051e8
 800adbc:	200051f0 	.word	0x200051f0
 800adc0:	0802c7d4 	.word	0x0802c7d4

0800adc4 <btn_event_esc_freq>:
	lv_bar_set_style(bar[pos], LV_BAR_STYLE_INDIC, &style_indic_bar_vd);
}

static void btn_event_esc_freq(lv_obj_t * btn, lv_event_t event)
{
	if(event == LV_EVENT_APPLY) {
 800adc4:	2911      	cmp	r1, #17
{
 800adc6:	b508      	push	{r3, lr}
	if(event == LV_EVENT_APPLY) {
 800adc8:	d107      	bne.n	800adda <btn_event_esc_freq+0x16>
		//printf("Button ESC Released\n");
		lv_obj_del(Tela_Freq);
 800adca:	4b04      	ldr	r3, [pc, #16]	; (800addc <btn_event_esc_freq+0x18>)
 800adcc:	6818      	ldr	r0, [r3, #0]
 800adce:	f005 f9f2 	bl	80101b6 <lv_obj_del>
		screen_sel();
	}
}
 800add2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		screen_sel();
 800add6:	f003 be9b 	b.w	800eb10 <screen_sel>
 800adda:	bd08      	pop	{r3, pc}
 800addc:	200052d0 	.word	0x200052d0

0800ade0 <event_handler>:

static void event_handler(lv_obj_t * obj, lv_event_t event)
{
 800ade0:	b530      	push	{r4, r5, lr}
    if(event == LV_EVENT_CLICKED) {
 800ade2:	2906      	cmp	r1, #6
{
 800ade4:	b089      	sub	sp, #36	; 0x24
 800ade6:	4605      	mov	r5, r0
    if(event == LV_EVENT_CLICKED) {
 800ade8:	d140      	bne.n	800ae6c <event_handler+0x8c>
        char buf[32];
        char out[6];

        uint32_t id = lv_obj_get_user_data(obj);
 800adea:	f005 fbca 	bl	8010582 <lv_obj_get_user_data>
 * @param buf pointer to an array to store the string
 * @param buf_size size of `buf` in bytes. 0: to ignore it.
 */
static inline void lv_roller_get_selected_str(const lv_obj_t * roller, char * buf, uint16_t buf_size)
{
    lv_ddlist_get_selected_str(roller, buf, buf_size);
 800adee:	2220      	movs	r2, #32
 800adf0:	4604      	mov	r4, r0
 800adf2:	4669      	mov	r1, sp
 800adf4:	4628      	mov	r0, r5
 800adf6:	f00c fdfa 	bl	80179ee <lv_ddlist_get_selected_str>

        lv_roller_get_selected_str(obj, buf, sizeof(buf));
        if(id == 4 && (atoi(buf) == 8 || atoi(buf) == 9)) {
 800adfa:	2c04      	cmp	r4, #4
 800adfc:	4c1f      	ldr	r4, [pc, #124]	; (800ae7c <event_handler+0x9c>)
 800adfe:	d11c      	bne.n	800ae3a <event_handler+0x5a>
 800ae00:	4668      	mov	r0, sp
 800ae02:	f00f fd70 	bl	801a8e6 <atoi>
 800ae06:	2808      	cmp	r0, #8
 800ae08:	d132      	bne.n	800ae70 <event_handler+0x90>
        	lv_roller_set_options(rollerfreq[5], "0", LV_ROLLER_MODE_INIFINITE);
 800ae0a:	2201      	movs	r2, #1
 800ae0c:	491c      	ldr	r1, [pc, #112]	; (800ae80 <event_handler+0xa0>)
 800ae0e:	6960      	ldr	r0, [r4, #20]
 800ae10:	f00f fce6 	bl	801a7e0 <lv_roller_set_options>
        	lv_roller_set_selected(rollerfreq[5], 0, true);
 800ae14:	2201      	movs	r2, #1
 800ae16:	2100      	movs	r1, #0
 800ae18:	6960      	ldr	r0, [r4, #20]
 800ae1a:	f00f fc3d 	bl	801a698 <lv_roller_set_selected>
        }
        if(id == 4 &&  atoi(buf) == 0) {
 800ae1e:	4668      	mov	r0, sp
 800ae20:	f00f fd61 	bl	801a8e6 <atoi>
 800ae24:	b948      	cbnz	r0, 800ae3a <event_handler+0x5a>
        	lv_roller_set_options(rollerfreq[5], "0\n1", LV_ROLLER_MODE_INIFINITE);
 800ae26:	2201      	movs	r2, #1
 800ae28:	4916      	ldr	r1, [pc, #88]	; (800ae84 <event_handler+0xa4>)
 800ae2a:	6960      	ldr	r0, [r4, #20]
 800ae2c:	f00f fcd8 	bl	801a7e0 <lv_roller_set_options>
        	lv_roller_set_selected(rollerfreq[5], 1, true);
 800ae30:	2201      	movs	r2, #1
 800ae32:	4611      	mov	r1, r2
 800ae34:	6960      	ldr	r0, [r4, #20]
 800ae36:	f00f fc2f 	bl	801a698 <lv_roller_set_selected>
 800ae3a:	2220      	movs	r2, #32
 800ae3c:	4669      	mov	r1, sp
 800ae3e:	6960      	ldr	r0, [r4, #20]
 800ae40:	f00c fdd5 	bl	80179ee <lv_ddlist_get_selected_str>
 800ae44:	2220      	movs	r2, #32
 800ae46:	4669      	mov	r1, sp
 800ae48:	6920      	ldr	r0, [r4, #16]
 800ae4a:	f00c fdd0 	bl	80179ee <lv_ddlist_get_selected_str>
 800ae4e:	2220      	movs	r2, #32
 800ae50:	4669      	mov	r1, sp
 800ae52:	68e0      	ldr	r0, [r4, #12]
 800ae54:	f00c fdcb 	bl	80179ee <lv_ddlist_get_selected_str>
 800ae58:	2220      	movs	r2, #32
 800ae5a:	4669      	mov	r1, sp
 800ae5c:	68a0      	ldr	r0, [r4, #8]
 800ae5e:	f00c fdc6 	bl	80179ee <lv_ddlist_get_selected_str>
 800ae62:	2220      	movs	r2, #32
 800ae64:	4669      	mov	r1, sp
 800ae66:	6860      	ldr	r0, [r4, #4]
 800ae68:	f00c fdc1 	bl	80179ee <lv_ddlist_get_selected_str>
        out[4] = buf[0];
        out[5] = 0;

        //printf("Selected Roller: %d Digit: %s  Frequencia: %d\n", id, buf, atoi(out));
    }
}
 800ae6c:	b009      	add	sp, #36	; 0x24
 800ae6e:	bd30      	pop	{r4, r5, pc}
        if(id == 4 && (atoi(buf) == 8 || atoi(buf) == 9)) {
 800ae70:	4668      	mov	r0, sp
 800ae72:	f00f fd38 	bl	801a8e6 <atoi>
 800ae76:	2809      	cmp	r0, #9
 800ae78:	d1d1      	bne.n	800ae1e <event_handler+0x3e>
 800ae7a:	e7c6      	b.n	800ae0a <event_handler+0x2a>
 800ae7c:	2000532c 	.word	0x2000532c
 800ae80:	0802c9e2 	.word	0x0802c9e2
 800ae84:	0802c9e4 	.word	0x0802c9e4

0800ae88 <create_vumeter_freq>:
{
 800ae88:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	lv_style_copy(&style_indic_bar, &lv_style_pretty);
 800ae8a:	4e30      	ldr	r6, [pc, #192]	; (800af4c <create_vumeter_freq+0xc4>)
 800ae8c:	4930      	ldr	r1, [pc, #192]	; (800af50 <create_vumeter_freq+0xc8>)
	lv_style_copy(&style_indic_bar_vd, &lv_style_pretty);
 800ae8e:	4c31      	ldr	r4, [pc, #196]	; (800af54 <create_vumeter_freq+0xcc>)
		bar[x] = lv_bar_create(Tela_Freq, NULL);
 800ae90:	4f31      	ldr	r7, [pc, #196]	; (800af58 <create_vumeter_freq+0xd0>)
	lv_style_copy(&style_indic_bar, &lv_style_pretty);
 800ae92:	4630      	mov	r0, r6
 800ae94:	f005 fee8 	bl	8010c68 <lv_style_copy>
	style_indic_bar.body.grad_color = LV_COLOR_MAKE(105, 105, 105);
 800ae98:	4b30      	ldr	r3, [pc, #192]	; (800af5c <create_vumeter_freq+0xd4>)
	lv_style_copy(&style_indic_bar_vd, &lv_style_pretty);
 800ae9a:	492d      	ldr	r1, [pc, #180]	; (800af50 <create_vumeter_freq+0xc8>)
	style_indic_bar.body.grad_color = LV_COLOR_MAKE(105, 105, 105);
 800ae9c:	881b      	ldrh	r3, [r3, #0]
 800ae9e:	80b3      	strh	r3, [r6, #4]
	style_indic_bar.body.radius = 0;
 800aea0:	2500      	movs	r5, #0
	lv_style_copy(&style_indic_bar_vd, &lv_style_pretty);
 800aea2:	4620      	mov	r0, r4
	style_indic_bar.body.main_color = LV_COLOR_MAKE(105, 105, 105);
 800aea4:	8073      	strh	r3, [r6, #2]
	style_indic_bar.body.border.color = LV_COLOR_MAKE(105, 105, 105);
 800aea6:	8173      	strh	r3, [r6, #10]
	style_indic_bar.body.radius = 0;
 800aea8:	80f5      	strh	r5, [r6, #6]
	lv_style_copy(&style_indic_bar_vd, &lv_style_pretty);
 800aeaa:	f005 fedd 	bl	8010c68 <lv_style_copy>
	style_indic_bar_vd.body.grad_color = LV_COLOR_MAKE(0, 255, 0);
 800aeae:	7923      	ldrb	r3, [r4, #4]
	style_indic_bar_vd.body.radius = 0;
 800aeb0:	80e5      	strh	r5, [r4, #6]
	style_indic_bar_vd.body.grad_color = LV_COLOR_MAKE(0, 255, 0);
 800aeb2:	f365 0304 	bfi	r3, r5, #0, #5
 800aeb6:	7123      	strb	r3, [r4, #4]
 800aeb8:	88a3      	ldrh	r3, [r4, #4]
 800aeba:	f443 63fc 	orr.w	r3, r3, #2016	; 0x7e0
 800aebe:	80a3      	strh	r3, [r4, #4]
 800aec0:	0a1b      	lsrs	r3, r3, #8
 800aec2:	f365 03c7 	bfi	r3, r5, #3, #5
 800aec6:	7163      	strb	r3, [r4, #5]
	style_indic_bar_vd.body.main_color = LV_COLOR_MAKE(0, 255, 0);
 800aec8:	78a3      	ldrb	r3, [r4, #2]
 800aeca:	f365 0304 	bfi	r3, r5, #0, #5
 800aece:	70a3      	strb	r3, [r4, #2]
 800aed0:	8863      	ldrh	r3, [r4, #2]
 800aed2:	f443 63fc 	orr.w	r3, r3, #2016	; 0x7e0
 800aed6:	8063      	strh	r3, [r4, #2]
 800aed8:	0a1b      	lsrs	r3, r3, #8
 800aeda:	f365 03c7 	bfi	r3, r5, #3, #5
 800aede:	70e3      	strb	r3, [r4, #3]
	style_indic_bar_vd.body.border.color = LV_COLOR_MAKE(0, 255, 0);
 800aee0:	7aa3      	ldrb	r3, [r4, #10]
 800aee2:	f365 0304 	bfi	r3, r5, #0, #5
 800aee6:	72a3      	strb	r3, [r4, #10]
 800aee8:	8963      	ldrh	r3, [r4, #10]
 800aeea:	f443 63fc 	orr.w	r3, r3, #2016	; 0x7e0
 800aeee:	8163      	strh	r3, [r4, #10]
 800aef0:	0a1b      	lsrs	r3, r3, #8
 800aef2:	f365 03c7 	bfi	r3, r5, #3, #5
 800aef6:	72e3      	strb	r3, [r4, #11]
 800aef8:	4c19      	ldr	r4, [pc, #100]	; (800af60 <create_vumeter_freq+0xd8>)
		bar[x] = lv_bar_create(Tela_Freq, NULL);
 800aefa:	6838      	ldr	r0, [r7, #0]
 800aefc:	2100      	movs	r1, #0
 800aefe:	f00b f91d 	bl	801613c <lv_bar_create>
		lv_obj_set_size(bar[x], 4, 20);
 800af02:	2214      	movs	r2, #20
		bar[x] = lv_bar_create(Tela_Freq, NULL);
 800af04:	6060      	str	r0, [r4, #4]
		lv_obj_set_size(bar[x], 4, 20);
 800af06:	2104      	movs	r1, #4
 800af08:	f005 f8e2 	bl	80100d0 <lv_obj_set_size>
		lv_bar_set_style(bar[x], LV_BAR_STYLE_BG, &style_indic_bar);
 800af0c:	6860      	ldr	r0, [r4, #4]
 800af0e:	4632      	mov	r2, r6
 800af10:	2100      	movs	r1, #0
 800af12:	f00b f8fd 	bl	8016110 <lv_bar_set_style>
		lv_bar_set_style(bar[x], LV_BAR_STYLE_INDIC, &style_indic_bar);
 800af16:	6860      	ldr	r0, [r4, #4]
 800af18:	4632      	mov	r2, r6
 800af1a:	2101      	movs	r1, #1
 800af1c:	f00b f8f8 	bl	8016110 <lv_bar_set_style>
		lv_obj_align(bar[x], NULL, LV_ALIGN_IN_TOP_LEFT, freq_pos_x[x], 90);
 800af20:	225a      	movs	r2, #90	; 0x5a
 800af22:	4b10      	ldr	r3, [pc, #64]	; (800af64 <create_vumeter_freq+0xdc>)
 800af24:	9200      	str	r2, [sp, #0]
 800af26:	f933 3025 	ldrsh.w	r3, [r3, r5, lsl #2]
 800af2a:	6860      	ldr	r0, [r4, #4]
 800af2c:	2201      	movs	r2, #1
 800af2e:	2100      	movs	r1, #0
 800af30:	f004 fd2e 	bl	800f990 <lv_obj_align>
 800af34:	3501      	adds	r5, #1
		lv_bar_set_value(bar[x], 100, 0);
 800af36:	2200      	movs	r2, #0
 800af38:	2164      	movs	r1, #100	; 0x64
 800af3a:	f854 0f04 	ldr.w	r0, [r4, #4]!
 800af3e:	f00b f88b 	bl	8016058 <lv_bar_set_value>
	for(uint8_t x = 0; x < 21; x++) {
 800af42:	2d15      	cmp	r5, #21
 800af44:	d1d9      	bne.n	800aefa <create_vumeter_freq+0x72>
}
 800af46:	b003      	add	sp, #12
 800af48:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800af4a:	bf00      	nop
 800af4c:	2000536c 	.word	0x2000536c
 800af50:	2000c5b8 	.word	0x2000c5b8
 800af54:	200053a8 	.word	0x200053a8
 800af58:	200052d0 	.word	0x200052d0
 800af5c:	0801d8c4 	.word	0x0801d8c4
 800af60:	200052d0 	.word	0x200052d0
 800af64:	0802c9e8 	.word	0x0802c9e8

0800af68 <update_vumeter>:
{
 800af68:	b570      	push	{r4, r5, r6, lr}
	style_indic_bar_vd.body.grad_color = LV_COLOR_MAKE(0, 255, 0);
 800af6a:	4c1c      	ldr	r4, [pc, #112]	; (800afdc <update_vumeter+0x74>)
	lv_bar_set_style(bar[pos], LV_BAR_STYLE_BG, &style_indic_bar_vd);
 800af6c:	4e1c      	ldr	r6, [pc, #112]	; (800afe0 <update_vumeter+0x78>)
	style_indic_bar_vd.body.grad_color = LV_COLOR_MAKE(0, 255, 0);
 800af6e:	7923      	ldrb	r3, [r4, #4]
 800af70:	f36f 0304 	bfc	r3, #0, #5
 800af74:	7123      	strb	r3, [r4, #4]
 800af76:	88a3      	ldrh	r3, [r4, #4]
 800af78:	f443 63fc 	orr.w	r3, r3, #2016	; 0x7e0
 800af7c:	80a3      	strh	r3, [r4, #4]
 800af7e:	0a1b      	lsrs	r3, r3, #8
 800af80:	f36f 03c7 	bfc	r3, #3, #5
 800af84:	7163      	strb	r3, [r4, #5]
	style_indic_bar_vd.body.main_color = LV_COLOR_MAKE(0, 255, 0);
 800af86:	78a3      	ldrb	r3, [r4, #2]
 800af88:	f36f 0304 	bfc	r3, #0, #5
 800af8c:	70a3      	strb	r3, [r4, #2]
 800af8e:	8863      	ldrh	r3, [r4, #2]
 800af90:	f443 63fc 	orr.w	r3, r3, #2016	; 0x7e0
 800af94:	8063      	strh	r3, [r4, #2]
 800af96:	0a1b      	lsrs	r3, r3, #8
 800af98:	f36f 03c7 	bfc	r3, #3, #5
 800af9c:	70e3      	strb	r3, [r4, #3]
	style_indic_bar_vd.body.border.color = LV_COLOR_MAKE(0, 255, 0);
 800af9e:	7aa3      	ldrb	r3, [r4, #10]
 800afa0:	f36f 0304 	bfc	r3, #0, #5
 800afa4:	72a3      	strb	r3, [r4, #10]
 800afa6:	8963      	ldrh	r3, [r4, #10]
	uint32_t pos = ((freq / 100) - 87) - 1;
 800afa8:	2564      	movs	r5, #100	; 0x64
	style_indic_bar_vd.body.border.color = LV_COLOR_MAKE(0, 255, 0);
 800afaa:	f443 63fc 	orr.w	r3, r3, #2016	; 0x7e0
	uint32_t pos = ((freq / 100) - 87) - 1;
 800afae:	fb90 f5f5 	sdiv	r5, r0, r5
 800afb2:	3d58      	subs	r5, #88	; 0x58
	style_indic_bar_vd.body.border.color = LV_COLOR_MAKE(0, 255, 0);
 800afb4:	8163      	strh	r3, [r4, #10]
 800afb6:	0a1b      	lsrs	r3, r3, #8
	lv_bar_set_style(bar[pos], LV_BAR_STYLE_BG, &style_indic_bar_vd);
 800afb8:	4622      	mov	r2, r4
 800afba:	f856 0025 	ldr.w	r0, [r6, r5, lsl #2]
	style_indic_bar_vd.body.border.color = LV_COLOR_MAKE(0, 255, 0);
 800afbe:	f36f 03c7 	bfc	r3, #3, #5
	lv_bar_set_style(bar[pos], LV_BAR_STYLE_BG, &style_indic_bar_vd);
 800afc2:	2100      	movs	r1, #0
	style_indic_bar_vd.body.border.color = LV_COLOR_MAKE(0, 255, 0);
 800afc4:	72e3      	strb	r3, [r4, #11]
	lv_bar_set_style(bar[pos], LV_BAR_STYLE_BG, &style_indic_bar_vd);
 800afc6:	f00b f8a3 	bl	8016110 <lv_bar_set_style>
	lv_bar_set_style(bar[pos], LV_BAR_STYLE_INDIC, &style_indic_bar_vd);
 800afca:	4622      	mov	r2, r4
 800afcc:	f856 0025 	ldr.w	r0, [r6, r5, lsl #2]
 800afd0:	2101      	movs	r1, #1
}
 800afd2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	lv_bar_set_style(bar[pos], LV_BAR_STYLE_INDIC, &style_indic_bar_vd);
 800afd6:	f00b b89b 	b.w	8016110 <lv_bar_set_style>
 800afda:	bf00      	nop
 800afdc:	200053a8 	.word	0x200053a8
 800afe0:	200052d4 	.word	0x200052d4

0800afe4 <prog_freq>:

void prog_freq(void)
{
 800afe4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	lv_style_copy(&style_roller, &lv_style_plain_color);
 800afe8:	4dd2      	ldr	r5, [pc, #840]	; (800b334 <prog_freq+0x350>)
 800afea:	f8df b370 	ldr.w	fp, [pc, #880]	; 800b35c <prog_freq+0x378>
	style_roller.text.font = &lv_font_eurostile_24;
	style_roller.text.letter_space = 2;
	style_roller.text.line_space = 24;
	style_roller.text.color = LV_COLOR_WHITE;

	lv_style_copy(&style_roller_anim, &lv_style_plain_color);
 800afee:	4fd2      	ldr	r7, [pc, #840]	; (800b338 <prog_freq+0x354>)
	style_roller.text.font = &lv_font_eurostile_24;
 800aff0:	f8df a36c 	ldr.w	sl, [pc, #876]	; 800b360 <prog_freq+0x37c>
	style_roller_bg.text.font = &lv_font_eurostile_24;
	style_roller_bg.text.letter_space = 2;
	style_roller_bg.text.line_space = 24;
	style_roller_bg.text.color = LV_COLOR_BLACK;

	lv_style_copy(&style_roller_s, &lv_style_plain_color);
 800aff4:	4ed1      	ldr	r6, [pc, #836]	; (800b33c <prog_freq+0x358>)
	lv_style_copy(&style_roller, &lv_style_plain_color);
 800aff6:	4659      	mov	r1, fp
 800aff8:	4628      	mov	r0, r5
 800affa:	f005 fe35 	bl	8010c68 <lv_style_copy>
	style_roller.body.main_color = LV_COLOR_BLACK;
 800affe:	78ab      	ldrb	r3, [r5, #2]
	style_roller.text.font = &lv_font_eurostile_24;
 800b000:	f8c5 a024 	str.w	sl, [r5, #36]	; 0x24
	style_roller.body.main_color = LV_COLOR_BLACK;
 800b004:	f36f 0304 	bfc	r3, #0, #5
 800b008:	70ab      	strb	r3, [r5, #2]
 800b00a:	886b      	ldrh	r3, [r5, #2]
 800b00c:	f36f 134a 	bfc	r3, #5, #6
 800b010:	806b      	strh	r3, [r5, #2]
 800b012:	0a1b      	lsrs	r3, r3, #8
 800b014:	f36f 03c7 	bfc	r3, #3, #5
 800b018:	70eb      	strb	r3, [r5, #3]
	style_roller.body.grad_color = LV_COLOR_BLACK;
 800b01a:	792b      	ldrb	r3, [r5, #4]
 800b01c:	f36f 0304 	bfc	r3, #0, #5
 800b020:	712b      	strb	r3, [r5, #4]
 800b022:	88ab      	ldrh	r3, [r5, #4]
 800b024:	f36f 134a 	bfc	r3, #5, #6
 800b028:	80ab      	strh	r3, [r5, #4]
 800b02a:	0a1b      	lsrs	r3, r3, #8
 800b02c:	f36f 03c7 	bfc	r3, #3, #5
 800b030:	716b      	strb	r3, [r5, #5]
	style_roller.text.color = LV_COLOR_WHITE;
 800b032:	4bc3      	ldr	r3, [pc, #780]	; (800b340 <prog_freq+0x35c>)
	style_roller.text.letter_space = 2;
 800b034:	f04f 0802 	mov.w	r8, #2
	style_roller.text.line_space = 24;
 800b038:	f04f 0918 	mov.w	r9, #24
	style_roller.text.color = LV_COLOR_WHITE;
 800b03c:	885c      	ldrh	r4, [r3, #2]
	style_roller.text.line_space = 24;
 800b03e:	f8a5 902a 	strh.w	r9, [r5, #42]	; 0x2a
	lv_style_copy(&style_roller_anim, &lv_style_plain_color);
 800b042:	4659      	mov	r1, fp
 800b044:	4638      	mov	r0, r7
	style_roller.text.color = LV_COLOR_WHITE;
 800b046:	842c      	strh	r4, [r5, #32]
	style_roller.text.letter_space = 2;
 800b048:	f8a5 8028 	strh.w	r8, [r5, #40]	; 0x28
	lv_style_copy(&style_roller_anim, &lv_style_plain_color);
 800b04c:	f005 fe0c 	bl	8010c68 <lv_style_copy>
	style_roller_anim.body.main_color = LV_COLOR_BLACK;
 800b050:	78bb      	ldrb	r3, [r7, #2]
	style_roller_anim.text.color = LV_COLOR_WHITE;
 800b052:	843c      	strh	r4, [r7, #32]
	style_roller_anim.body.main_color = LV_COLOR_BLACK;
 800b054:	f36f 0304 	bfc	r3, #0, #5
 800b058:	70bb      	strb	r3, [r7, #2]
 800b05a:	887b      	ldrh	r3, [r7, #2]
	lv_style_copy(&style_roller_bg, &lv_style_plain_color);
 800b05c:	4cb9      	ldr	r4, [pc, #740]	; (800b344 <prog_freq+0x360>)
	style_roller_anim.text.font = &lv_font_eurostile_24;
 800b05e:	f8c7 a024 	str.w	sl, [r7, #36]	; 0x24
	style_roller_anim.body.main_color = LV_COLOR_BLACK;
 800b062:	f36f 134a 	bfc	r3, #5, #6
 800b066:	807b      	strh	r3, [r7, #2]
 800b068:	0a1b      	lsrs	r3, r3, #8
 800b06a:	f36f 03c7 	bfc	r3, #3, #5
 800b06e:	70fb      	strb	r3, [r7, #3]
	style_roller_anim.body.grad_color = LV_COLOR_BLACK;
 800b070:	793b      	ldrb	r3, [r7, #4]
	style_roller_anim.text.letter_space = 2;
 800b072:	f8a7 8028 	strh.w	r8, [r7, #40]	; 0x28
	style_roller_anim.body.grad_color = LV_COLOR_BLACK;
 800b076:	f36f 0304 	bfc	r3, #0, #5
 800b07a:	713b      	strb	r3, [r7, #4]
 800b07c:	88bb      	ldrh	r3, [r7, #4]
	style_roller_anim.text.line_space = 24;
 800b07e:	f8a7 902a 	strh.w	r9, [r7, #42]	; 0x2a
	style_roller_anim.body.grad_color = LV_COLOR_BLACK;
 800b082:	f36f 134a 	bfc	r3, #5, #6
 800b086:	80bb      	strh	r3, [r7, #4]
 800b088:	0a1b      	lsrs	r3, r3, #8
 800b08a:	f36f 03c7 	bfc	r3, #3, #5
 800b08e:	717b      	strb	r3, [r7, #5]
	lv_style_copy(&style_roller_bg, &lv_style_plain_color);
 800b090:	4659      	mov	r1, fp
 800b092:	4620      	mov	r0, r4
 800b094:	f005 fde8 	bl	8010c68 <lv_style_copy>
	style_roller_bg.body.main_color = LV_COLOR_YELLOW;
 800b098:	78a3      	ldrb	r3, [r4, #2]
	style_roller_bg.text.font = &lv_font_eurostile_24;
 800b09a:	f8c4 a024 	str.w	sl, [r4, #36]	; 0x24
	style_roller_bg.body.main_color = LV_COLOR_YELLOW;
 800b09e:	f36f 0304 	bfc	r3, #0, #5
 800b0a2:	70a3      	strb	r3, [r4, #2]
 800b0a4:	8863      	ldrh	r3, [r4, #2]
	style_roller_bg.text.letter_space = 2;
 800b0a6:	f8a4 8028 	strh.w	r8, [r4, #40]	; 0x28
	style_roller_bg.body.main_color = LV_COLOR_YELLOW;
 800b0aa:	f443 63fc 	orr.w	r3, r3, #2016	; 0x7e0
 800b0ae:	8063      	strh	r3, [r4, #2]
 800b0b0:	0a1b      	lsrs	r3, r3, #8
 800b0b2:	f043 03f8 	orr.w	r3, r3, #248	; 0xf8
 800b0b6:	70e3      	strb	r3, [r4, #3]
	style_roller_bg.body.grad_color = LV_COLOR_YELLOW;
 800b0b8:	7923      	ldrb	r3, [r4, #4]
	style_roller_bg.text.line_space = 24;
 800b0ba:	f8a4 902a 	strh.w	r9, [r4, #42]	; 0x2a
	style_roller_bg.body.grad_color = LV_COLOR_YELLOW;
 800b0be:	f36f 0304 	bfc	r3, #0, #5
 800b0c2:	7123      	strb	r3, [r4, #4]
 800b0c4:	88a3      	ldrh	r3, [r4, #4]
 800b0c6:	f443 63fc 	orr.w	r3, r3, #2016	; 0x7e0
 800b0ca:	80a3      	strh	r3, [r4, #4]
 800b0cc:	0a1b      	lsrs	r3, r3, #8
 800b0ce:	f043 03f8 	orr.w	r3, r3, #248	; 0xf8
 800b0d2:	7163      	strb	r3, [r4, #5]
	style_roller_bg.text.color = LV_COLOR_BLACK;
 800b0d4:	f894 3020 	ldrb.w	r3, [r4, #32]
 800b0d8:	f36f 0304 	bfc	r3, #0, #5
 800b0dc:	f884 3020 	strb.w	r3, [r4, #32]
 800b0e0:	8c23      	ldrh	r3, [r4, #32]
 800b0e2:	f36f 134a 	bfc	r3, #5, #6
 800b0e6:	8423      	strh	r3, [r4, #32]
 800b0e8:	0a1b      	lsrs	r3, r3, #8
 800b0ea:	f36f 03c7 	bfc	r3, #3, #5
	lv_style_copy(&style_roller_s, &lv_style_plain_color);
 800b0ee:	4659      	mov	r1, fp
	style_roller_bg.text.color = LV_COLOR_BLACK;
 800b0f0:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
	lv_style_copy(&style_roller_s, &lv_style_plain_color);
 800b0f4:	4630      	mov	r0, r6
 800b0f6:	f005 fdb7 	bl	8010c68 <lv_style_copy>
	style_roller_s.body.main_color = LV_COLOR_BLACK;
 800b0fa:	78b3      	ldrb	r3, [r6, #2]
	style_roller_s.body.grad_color = LV_COLOR_BLACK;
	style_roller_s.text.font = &lv_font_eurostile_24;
 800b0fc:	f8c6 a024 	str.w	sl, [r6, #36]	; 0x24
	style_roller_s.body.main_color = LV_COLOR_BLACK;
 800b100:	f36f 0304 	bfc	r3, #0, #5
 800b104:	70b3      	strb	r3, [r6, #2]
 800b106:	8873      	ldrh	r3, [r6, #2]
	style_roller_s.text.letter_space = 2;
 800b108:	f8a6 8028 	strh.w	r8, [r6, #40]	; 0x28
	style_roller_s.body.main_color = LV_COLOR_BLACK;
 800b10c:	f36f 134a 	bfc	r3, #5, #6
 800b110:	8073      	strh	r3, [r6, #2]
 800b112:	0a1b      	lsrs	r3, r3, #8
 800b114:	f36f 03c7 	bfc	r3, #3, #5
 800b118:	70f3      	strb	r3, [r6, #3]
	style_roller_s.body.grad_color = LV_COLOR_BLACK;
 800b11a:	7933      	ldrb	r3, [r6, #4]
	style_roller_s.text.line_space = 24;
 800b11c:	f8a6 902a 	strh.w	r9, [r6, #42]	; 0x2a
	style_roller_s.body.grad_color = LV_COLOR_BLACK;
 800b120:	f36f 0304 	bfc	r3, #0, #5
 800b124:	7133      	strb	r3, [r6, #4]
 800b126:	88b3      	ldrh	r3, [r6, #4]
	lv_style_anim_set_playback(&sf, 500);
	lv_style_anim_set_repeat(&sf, 500);
	lv_style_anim_create(&sf);

	// Milhar
	rollerfreq[5] = lv_roller_create(Tela_Freq, NULL);
 800b128:	f8df 9238 	ldr.w	r9, [pc, #568]	; 800b364 <prog_freq+0x380>
    lv_obj_align(rollerfreq[4], NULL, LV_ALIGN_IN_TOP_LEFT, 33, 48);
    lv_obj_set_event_cb(rollerfreq[4], event_handler);
    // Dezena
    rollerfreq[3] = lv_roller_create(Tela_Freq, NULL);
    lv_obj_set_user_data(rollerfreq[3], 3);
    lv_roller_set_options(rollerfreq[3], "0\n1\n2\n3\n4\n5\n6\n7\n8\n9", LV_ROLLER_MODE_INIFINITE);
 800b12c:	f8df a238 	ldr.w	sl, [pc, #568]	; 800b368 <prog_freq+0x384>
	style_roller_s.body.grad_color = LV_COLOR_BLACK;
 800b130:	f36f 134a 	bfc	r3, #5, #6
 800b134:	80b3      	strh	r3, [r6, #4]
 800b136:	0a1b      	lsrs	r3, r3, #8
 800b138:	f36f 03c7 	bfc	r3, #3, #5
 800b13c:	7173      	strb	r3, [r6, #5]
	style_roller_s.text.color = LV_COLOR_LIME;
 800b13e:	f896 3020 	ldrb.w	r3, [r6, #32]
 800b142:	f36f 0304 	bfc	r3, #0, #5
 800b146:	f886 3020 	strb.w	r3, [r6, #32]
 800b14a:	8c33      	ldrh	r3, [r6, #32]
 800b14c:	f443 63fc 	orr.w	r3, r3, #2016	; 0x7e0
 800b150:	8433      	strh	r3, [r6, #32]
 800b152:	0a1b      	lsrs	r3, r3, #8
 800b154:	f36f 03c7 	bfc	r3, #3, #5
 800b158:	f886 3021 	strb.w	r3, [r6, #33]	; 0x21
	lv_style_anim_init(&sf);
 800b15c:	4e7a      	ldr	r6, [pc, #488]	; (800b348 <prog_freq+0x364>)
 800b15e:	4630      	mov	r0, r6
 800b160:	f006 fa66 	bl	8011630 <lv_style_anim_init>
	lv_style_anim_set_styles(&sf, &style_roller_anim, &style_roller, &style_roller_bg);
 800b164:	4639      	mov	r1, r7
 800b166:	4623      	mov	r3, r4
 800b168:	462a      	mov	r2, r5
 800b16a:	4630      	mov	r0, r6
 800b16c:	f006 fa8a 	bl	8011684 <lv_style_anim_set_styles>
 * @param delay delay before the animation in milliseconds
 */
static inline void lv_anim_set_time(lv_anim_t * a, uint16_t duration, uint16_t delay)
{
    a->time     = duration;
    a->act_time = -delay;
 800b170:	f64f 620c 	movw	r2, #65036	; 0xfe0c
 800b174:	8372      	strh	r2, [r6, #26]
 * @param a pointer to an initialized `lv_anim_t` variable
 * @param wait_time time in milliseconds to wait before starting the back direction
 */
static inline void lv_anim_set_playback(lv_anim_t * a, uint16_t wait_time)
{
    a->playback       = 1;
 800b176:	f896 2024 	ldrb.w	r2, [r6, #36]	; 0x24
	rollerfreq[5] = lv_roller_create(Tela_Freq, NULL);
 800b17a:	4c74      	ldr	r4, [pc, #464]	; (800b34c <prog_freq+0x368>)
    a->time     = duration;
 800b17c:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 * @param a pointer to an initialized `lv_anim_t` variable
 * @param wait_time time in milliseconds to wait before starting the animation again
 */
static inline void lv_anim_set_repeat(lv_anim_t * a, uint16_t wait_time)
{
    a->repeat       = 1;
 800b180:	f042 0203 	orr.w	r2, r2, #3
 * Create an animation
 * @param a an initialized 'anim_t' variable. Not required after call.
 */
static inline void lv_style_anim_create(lv_anim_t * a)
{
    lv_anim_create(a);
 800b184:	4630      	mov	r0, r6
    a->time     = duration;
 800b186:	8333      	strh	r3, [r6, #24]
    a->playback_pause = wait_time;
 800b188:	83b3      	strh	r3, [r6, #28]
    a->repeat_pause = wait_time;
 800b18a:	83f3      	strh	r3, [r6, #30]
    a->repeat       = 1;
 800b18c:	f886 2024 	strb.w	r2, [r6, #36]	; 0x24
 800b190:	f00a f840 	bl	8015214 <lv_anim_create>
 800b194:	2100      	movs	r1, #0
 800b196:	f8d9 0000 	ldr.w	r0, [r9]
    lv_obj_set_event_cb(rollerfreq[5], event_handler);
 800b19a:	4e6d      	ldr	r6, [pc, #436]	; (800b350 <prog_freq+0x36c>)
	rollerfreq[5] = lv_roller_create(Tela_Freq, NULL);
 800b19c:	f00f f9c6 	bl	801a52c <lv_roller_create>
	lv_obj_set_user_data(rollerfreq[5], 5);
 800b1a0:	2105      	movs	r1, #5
	rollerfreq[5] = lv_roller_create(Tela_Freq, NULL);
 800b1a2:	6160      	str	r0, [r4, #20]
	lv_obj_set_user_data(rollerfreq[5], 5);
 800b1a4:	f005 f9ef 	bl	8010586 <lv_obj_set_user_data>
    lv_roller_set_options(rollerfreq[5], "0\n1", LV_ROLLER_MODE_INIFINITE);
 800b1a8:	2201      	movs	r2, #1
 800b1aa:	6960      	ldr	r0, [r4, #20]
 800b1ac:	4969      	ldr	r1, [pc, #420]	; (800b354 <prog_freq+0x370>)
 800b1ae:	f00f fb17 	bl	801a7e0 <lv_roller_set_options>
    lv_roller_set_visible_row_count(rollerfreq[5], 1);
 800b1b2:	6960      	ldr	r0, [r4, #20]
 800b1b4:	2101      	movs	r1, #1
 800b1b6:	f00f f99d 	bl	801a4f4 <lv_roller_set_visible_row_count>
    lv_roller_set_selected(rollerfreq[5], 1, true);
 800b1ba:	2201      	movs	r2, #1
 800b1bc:	4611      	mov	r1, r2
 800b1be:	6960      	ldr	r0, [r4, #20]
 800b1c0:	f00f fa6a 	bl	801a698 <lv_roller_set_selected>
    lv_ddlist_set_fix_width(roller, w);
 800b1c4:	6960      	ldr	r0, [r4, #20]
 800b1c6:	2113      	movs	r1, #19
 800b1c8:	f00c fadd 	bl	8017786 <lv_ddlist_set_fix_width>
    lv_roller_set_style(rollerfreq[5], LV_ROLLER_STYLE_BG, &style_roller);
 800b1cc:	462a      	mov	r2, r5
 800b1ce:	6960      	ldr	r0, [r4, #20]
 800b1d0:	2100      	movs	r1, #0
 800b1d2:	f00f fa37 	bl	801a644 <lv_roller_set_style>
    lv_obj_align(rollerfreq[5], NULL, LV_ALIGN_IN_TOP_LEFT, 10, 48);
 800b1d6:	2730      	movs	r7, #48	; 0x30
    lv_roller_set_style(rollerfreq[5], LV_ROLLER_STYLE_SEL, &style_roller);
 800b1d8:	462a      	mov	r2, r5
 800b1da:	6960      	ldr	r0, [r4, #20]
 800b1dc:	2101      	movs	r1, #1
 800b1de:	f00f fa31 	bl	801a644 <lv_roller_set_style>
    lv_obj_align(rollerfreq[5], NULL, LV_ALIGN_IN_TOP_LEFT, 10, 48);
 800b1e2:	9700      	str	r7, [sp, #0]
 800b1e4:	230a      	movs	r3, #10
 800b1e6:	2201      	movs	r2, #1
 800b1e8:	6960      	ldr	r0, [r4, #20]
 800b1ea:	2100      	movs	r1, #0
 800b1ec:	f004 fbd0 	bl	800f990 <lv_obj_align>
    lv_obj_set_event_cb(rollerfreq[5], event_handler);
 800b1f0:	4631      	mov	r1, r6
 800b1f2:	6960      	ldr	r0, [r4, #20]
 800b1f4:	f004 fa2d 	bl	800f652 <lv_obj_set_event_cb>
    rollerfreq[4] = lv_roller_create(Tela_Freq, NULL);
 800b1f8:	2100      	movs	r1, #0
 800b1fa:	f8d9 0000 	ldr.w	r0, [r9]
 800b1fe:	f00f f995 	bl	801a52c <lv_roller_create>
    lv_obj_set_user_data(rollerfreq[4], 4);
 800b202:	2104      	movs	r1, #4
    rollerfreq[4] = lv_roller_create(Tela_Freq, NULL);
 800b204:	6120      	str	r0, [r4, #16]
    lv_obj_set_user_data(rollerfreq[4], 4);
 800b206:	f005 f9be 	bl	8010586 <lv_obj_set_user_data>
    lv_roller_set_options(rollerfreq[4], "0\n8\n9", LV_ROLLER_MODE_INIFINITE);
 800b20a:	2201      	movs	r2, #1
 800b20c:	6920      	ldr	r0, [r4, #16]
 800b20e:	4952      	ldr	r1, [pc, #328]	; (800b358 <prog_freq+0x374>)
 800b210:	f00f fae6 	bl	801a7e0 <lv_roller_set_options>
    lv_roller_set_visible_row_count(rollerfreq[4], 1);
 800b214:	6920      	ldr	r0, [r4, #16]
 800b216:	2101      	movs	r1, #1
 800b218:	f00f f96c 	bl	801a4f4 <lv_roller_set_visible_row_count>
    lv_roller_set_selected(rollerfreq[4], 0, true);
 800b21c:	2201      	movs	r2, #1
 800b21e:	6920      	ldr	r0, [r4, #16]
 800b220:	2100      	movs	r1, #0
 800b222:	f00f fa39 	bl	801a698 <lv_roller_set_selected>
 800b226:	6920      	ldr	r0, [r4, #16]
 800b228:	2113      	movs	r1, #19
 800b22a:	f00c faac 	bl	8017786 <lv_ddlist_set_fix_width>
    lv_roller_set_style(rollerfreq[4], LV_ROLLER_STYLE_BG, &style_roller);
 800b22e:	462a      	mov	r2, r5
 800b230:	6920      	ldr	r0, [r4, #16]
 800b232:	2100      	movs	r1, #0
 800b234:	f00f fa06 	bl	801a644 <lv_roller_set_style>
    lv_roller_set_style(rollerfreq[4], LV_ROLLER_STYLE_SEL, &style_roller);
 800b238:	462a      	mov	r2, r5
 800b23a:	6920      	ldr	r0, [r4, #16]
 800b23c:	2101      	movs	r1, #1
 800b23e:	f00f fa01 	bl	801a644 <lv_roller_set_style>
    lv_obj_align(rollerfreq[4], NULL, LV_ALIGN_IN_TOP_LEFT, 33, 48);
 800b242:	9700      	str	r7, [sp, #0]
 800b244:	2321      	movs	r3, #33	; 0x21
 800b246:	2201      	movs	r2, #1
 800b248:	6920      	ldr	r0, [r4, #16]
 800b24a:	2100      	movs	r1, #0
 800b24c:	f004 fba0 	bl	800f990 <lv_obj_align>
    lv_obj_set_event_cb(rollerfreq[4], event_handler);
 800b250:	4631      	mov	r1, r6
 800b252:	6920      	ldr	r0, [r4, #16]
 800b254:	f004 f9fd 	bl	800f652 <lv_obj_set_event_cb>
    rollerfreq[3] = lv_roller_create(Tela_Freq, NULL);
 800b258:	2100      	movs	r1, #0
 800b25a:	f8d9 0000 	ldr.w	r0, [r9]
 800b25e:	f00f f965 	bl	801a52c <lv_roller_create>
    lv_obj_set_user_data(rollerfreq[3], 3);
 800b262:	2103      	movs	r1, #3
    rollerfreq[3] = lv_roller_create(Tela_Freq, NULL);
 800b264:	60e0      	str	r0, [r4, #12]
    lv_obj_set_user_data(rollerfreq[3], 3);
 800b266:	f005 f98e 	bl	8010586 <lv_obj_set_user_data>
    lv_roller_set_options(rollerfreq[3], "0\n1\n2\n3\n4\n5\n6\n7\n8\n9", LV_ROLLER_MODE_INIFINITE);
 800b26a:	2201      	movs	r2, #1
 800b26c:	4651      	mov	r1, sl
 800b26e:	68e0      	ldr	r0, [r4, #12]
 800b270:	f00f fab6 	bl	801a7e0 <lv_roller_set_options>
    lv_roller_set_visible_row_count(rollerfreq[3], 1);
 800b274:	68e0      	ldr	r0, [r4, #12]
 800b276:	2101      	movs	r1, #1
 800b278:	f00f f93c 	bl	801a4f4 <lv_roller_set_visible_row_count>
    lv_roller_set_selected(rollerfreq[3], 3, true);
 800b27c:	2201      	movs	r2, #1
 800b27e:	68e0      	ldr	r0, [r4, #12]
 800b280:	2103      	movs	r1, #3
 800b282:	f00f fa09 	bl	801a698 <lv_roller_set_selected>
 800b286:	68e0      	ldr	r0, [r4, #12]
 800b288:	2113      	movs	r1, #19
 800b28a:	f00c fa7c 	bl	8017786 <lv_ddlist_set_fix_width>
    lv_roller_set_fix_width(rollerfreq[3], 19);
    lv_roller_set_style(rollerfreq[3], LV_ROLLER_STYLE_BG, &style_roller);
 800b28e:	462a      	mov	r2, r5
 800b290:	68e0      	ldr	r0, [r4, #12]
 800b292:	2100      	movs	r1, #0
 800b294:	f00f f9d6 	bl	801a644 <lv_roller_set_style>
    lv_roller_set_style(rollerfreq[3], LV_ROLLER_STYLE_SEL, &style_roller);
 800b298:	462a      	mov	r2, r5
 800b29a:	68e0      	ldr	r0, [r4, #12]
 800b29c:	2101      	movs	r1, #1
 800b29e:	f00f f9d1 	bl	801a644 <lv_roller_set_style>
    lv_obj_align(rollerfreq[3], NULL, LV_ALIGN_IN_TOP_LEFT, 57, 48);
 800b2a2:	9700      	str	r7, [sp, #0]
 800b2a4:	2339      	movs	r3, #57	; 0x39
 800b2a6:	2201      	movs	r2, #1
 800b2a8:	68e0      	ldr	r0, [r4, #12]
 800b2aa:	2100      	movs	r1, #0
 800b2ac:	f004 fb70 	bl	800f990 <lv_obj_align>
    lv_obj_set_event_cb(rollerfreq[3], event_handler);
 800b2b0:	4631      	mov	r1, r6
 800b2b2:	68e0      	ldr	r0, [r4, #12]
 800b2b4:	f004 f9cd 	bl	800f652 <lv_obj_set_event_cb>
    // Casa 1
    rollerfreq[2] = lv_roller_create(Tela_Freq, NULL);
 800b2b8:	2100      	movs	r1, #0
 800b2ba:	f8d9 0000 	ldr.w	r0, [r9]
 800b2be:	f00f f935 	bl	801a52c <lv_roller_create>
    lv_obj_set_user_data(rollerfreq[2], 2);
 800b2c2:	4641      	mov	r1, r8
    rollerfreq[2] = lv_roller_create(Tela_Freq, NULL);
 800b2c4:	60a0      	str	r0, [r4, #8]
    lv_obj_set_user_data(rollerfreq[2], 2);
 800b2c6:	f005 f95e 	bl	8010586 <lv_obj_set_user_data>
    lv_roller_set_options(rollerfreq[2], "0\n1\n2\n3\n4\n5\n6\n7\n8\n9", LV_ROLLER_MODE_INIFINITE);
 800b2ca:	2201      	movs	r2, #1
 800b2cc:	4651      	mov	r1, sl
 800b2ce:	68a0      	ldr	r0, [r4, #8]
 800b2d0:	f00f fa86 	bl	801a7e0 <lv_roller_set_options>
    lv_roller_set_visible_row_count(rollerfreq[2], 1);
 800b2d4:	68a0      	ldr	r0, [r4, #8]
 800b2d6:	2101      	movs	r1, #1
 800b2d8:	f00f f90c 	bl	801a4f4 <lv_roller_set_visible_row_count>
    lv_roller_set_selected(rollerfreq[2], 1, true);
 800b2dc:	2201      	movs	r2, #1
 800b2de:	4611      	mov	r1, r2
 800b2e0:	68a0      	ldr	r0, [r4, #8]
 800b2e2:	f00f f9d9 	bl	801a698 <lv_roller_set_selected>
 800b2e6:	68a0      	ldr	r0, [r4, #8]
 800b2e8:	2113      	movs	r1, #19
 800b2ea:	f00c fa4c 	bl	8017786 <lv_ddlist_set_fix_width>
    lv_roller_set_fix_width(rollerfreq[2], 19);
    lv_roller_set_style(rollerfreq[2], LV_ROLLER_STYLE_BG, &style_roller);
 800b2ee:	462a      	mov	r2, r5
 800b2f0:	68a0      	ldr	r0, [r4, #8]
 800b2f2:	2100      	movs	r1, #0
 800b2f4:	f00f f9a6 	bl	801a644 <lv_roller_set_style>
    lv_roller_set_style(rollerfreq[2], LV_ROLLER_STYLE_SEL, &style_roller);
 800b2f8:	462a      	mov	r2, r5
 800b2fa:	68a0      	ldr	r0, [r4, #8]
 800b2fc:	2101      	movs	r1, #1
 800b2fe:	f00f f9a1 	bl	801a644 <lv_roller_set_style>
    lv_obj_align(rollerfreq[2], NULL, LV_ALIGN_IN_TOP_LEFT, 84, 48);
 800b302:	9700      	str	r7, [sp, #0]
 800b304:	2354      	movs	r3, #84	; 0x54
 800b306:	2201      	movs	r2, #1
 800b308:	68a0      	ldr	r0, [r4, #8]
 800b30a:	2100      	movs	r1, #0
 800b30c:	f004 fb40 	bl	800f990 <lv_obj_align>
    lv_obj_set_event_cb(rollerfreq[2], event_handler);
 800b310:	4631      	mov	r1, r6
 800b312:	68a0      	ldr	r0, [r4, #8]
 800b314:	f004 f99d 	bl	800f652 <lv_obj_set_event_cb>
    // Casa 2
    rollerfreq[1] = lv_roller_create(Tela_Freq, NULL);
 800b318:	2100      	movs	r1, #0
 800b31a:	f8d9 0000 	ldr.w	r0, [r9]
 800b31e:	f00f f905 	bl	801a52c <lv_roller_create>
    lv_obj_set_user_data(rollerfreq[1], 1);
 800b322:	2101      	movs	r1, #1
    rollerfreq[1] = lv_roller_create(Tela_Freq, NULL);
 800b324:	6060      	str	r0, [r4, #4]
    lv_obj_set_user_data(rollerfreq[1], 1);
 800b326:	f005 f92e 	bl	8010586 <lv_obj_set_user_data>
    lv_roller_set_options(rollerfreq[1], "0\n1\n2\n3\n4\n5\n6\n7\n8\n9", LV_ROLLER_MODE_INIFINITE);
 800b32a:	2201      	movs	r2, #1
 800b32c:	4651      	mov	r1, sl
 800b32e:	6860      	ldr	r0, [r4, #4]
 800b330:	e01c      	b.n	800b36c <prog_freq+0x388>
 800b332:	bf00      	nop
 800b334:	200053e4 	.word	0x200053e4
 800b338:	20005420 	.word	0x20005420
 800b33c:	20005498 	.word	0x20005498
 800b340:	0801d8c4 	.word	0x0801d8c4
 800b344:	2000545c 	.word	0x2000545c
 800b348:	20005344 	.word	0x20005344
 800b34c:	2000532c 	.word	0x2000532c
 800b350:	0800ade1 	.word	0x0800ade1
 800b354:	0802c9e4 	.word	0x0802c9e4
 800b358:	0802ca3c 	.word	0x0802ca3c
 800b35c:	2000c798 	.word	0x2000c798
 800b360:	20001338 	.word	0x20001338
 800b364:	200052d0 	.word	0x200052d0
 800b368:	0802ca42 	.word	0x0802ca42
 800b36c:	f00f fa38 	bl	801a7e0 <lv_roller_set_options>
    lv_roller_set_visible_row_count(rollerfreq[1], 1);
 800b370:	6860      	ldr	r0, [r4, #4]
 800b372:	2101      	movs	r1, #1
 800b374:	f00f f8be 	bl	801a4f4 <lv_roller_set_visible_row_count>
    lv_roller_set_selected(rollerfreq[1], 0, true);
 800b378:	2201      	movs	r2, #1
 800b37a:	6860      	ldr	r0, [r4, #4]
 800b37c:	2100      	movs	r1, #0
 800b37e:	f00f f98b 	bl	801a698 <lv_roller_set_selected>
 800b382:	6860      	ldr	r0, [r4, #4]
 800b384:	2113      	movs	r1, #19
 800b386:	f00c f9fe 	bl	8017786 <lv_ddlist_set_fix_width>
    lv_roller_set_fix_width(rollerfreq[1], 19);
    lv_roller_set_style(rollerfreq[1], LV_ROLLER_STYLE_BG, &style_roller);
 800b38a:	462a      	mov	r2, r5
 800b38c:	6860      	ldr	r0, [r4, #4]
 800b38e:	2100      	movs	r1, #0
 800b390:	f00f f958 	bl	801a644 <lv_roller_set_style>
    lv_roller_set_style(rollerfreq[1], LV_ROLLER_STYLE_SEL, &style_roller);
 800b394:	462a      	mov	r2, r5
 800b396:	6860      	ldr	r0, [r4, #4]
 800b398:	2101      	movs	r1, #1
 800b39a:	f00f f953 	bl	801a644 <lv_roller_set_style>
    lv_obj_align(rollerfreq[1], NULL, LV_ALIGN_IN_TOP_LEFT, 107, 48);
 800b39e:	9700      	str	r7, [sp, #0]
 800b3a0:	236b      	movs	r3, #107	; 0x6b
 800b3a2:	2201      	movs	r2, #1
 800b3a4:	6860      	ldr	r0, [r4, #4]
 800b3a6:	2100      	movs	r1, #0
 800b3a8:	f004 faf2 	bl	800f990 <lv_obj_align>
    lv_obj_set_event_cb(rollerfreq[1], event_handler);
 800b3ac:	4631      	mov	r1, r6
 800b3ae:	6860      	ldr	r0, [r4, #4]
 800b3b0:	f004 f94f 	bl	800f652 <lv_obj_set_event_cb>
    // Casa 3
    rollerfreq[0] = lv_roller_create(Tela_Freq, NULL);
 800b3b4:	2100      	movs	r1, #0
 800b3b6:	f8d9 0000 	ldr.w	r0, [r9]
 800b3ba:	f00f f8b7 	bl	801a52c <lv_roller_create>
    lv_obj_set_user_data(rollerfreq[0], 0);
 800b3be:	2100      	movs	r1, #0
    rollerfreq[0] = lv_roller_create(Tela_Freq, NULL);
 800b3c0:	6020      	str	r0, [r4, #0]
    lv_obj_set_user_data(rollerfreq[0], 0);
 800b3c2:	f005 f8e0 	bl	8010586 <lv_obj_set_user_data>
    lv_roller_set_options(rollerfreq[0], "0", LV_ROLLER_MODE_INIFINITE);
 800b3c6:	2201      	movs	r2, #1
 800b3c8:	6820      	ldr	r0, [r4, #0]
 800b3ca:	4914      	ldr	r1, [pc, #80]	; (800b41c <prog_freq+0x438>)
 800b3cc:	f00f fa08 	bl	801a7e0 <lv_roller_set_options>
    lv_roller_set_visible_row_count(rollerfreq[0], 1);
 800b3d0:	6820      	ldr	r0, [r4, #0]
 800b3d2:	2101      	movs	r1, #1
 800b3d4:	f00f f88e 	bl	801a4f4 <lv_roller_set_visible_row_count>
    lv_roller_set_selected(rollerfreq[0], 0, true);
 800b3d8:	2201      	movs	r2, #1
 800b3da:	6820      	ldr	r0, [r4, #0]
 800b3dc:	2100      	movs	r1, #0
 800b3de:	f00f f95b 	bl	801a698 <lv_roller_set_selected>
 800b3e2:	6820      	ldr	r0, [r4, #0]
 800b3e4:	2113      	movs	r1, #19
 800b3e6:	f00c f9ce 	bl	8017786 <lv_ddlist_set_fix_width>
    lv_roller_set_fix_width(rollerfreq[0], 19);
    lv_roller_set_style(rollerfreq[0], LV_ROLLER_STYLE_BG, &style_roller);
 800b3ea:	462a      	mov	r2, r5
 800b3ec:	6820      	ldr	r0, [r4, #0]
 800b3ee:	2100      	movs	r1, #0
 800b3f0:	f00f f928 	bl	801a644 <lv_roller_set_style>
    lv_roller_set_style(rollerfreq[0], LV_ROLLER_STYLE_SEL, &style_roller);
 800b3f4:	462a      	mov	r2, r5
 800b3f6:	6820      	ldr	r0, [r4, #0]
 800b3f8:	2101      	movs	r1, #1
 800b3fa:	f00f f923 	bl	801a644 <lv_roller_set_style>
    lv_obj_align(rollerfreq[0], NULL, LV_ALIGN_IN_TOP_LEFT, 131, 48);
 800b3fe:	9700      	str	r7, [sp, #0]
 800b400:	6820      	ldr	r0, [r4, #0]
 800b402:	2383      	movs	r3, #131	; 0x83
 800b404:	2201      	movs	r2, #1
 800b406:	2100      	movs	r1, #0
 800b408:	f004 fac2 	bl	800f990 <lv_obj_align>
    lv_obj_set_event_cb(rollerfreq[0], event_handler);
 800b40c:	6820      	ldr	r0, [r4, #0]
 800b40e:	4631      	mov	r1, r6
}
 800b410:	b003      	add	sp, #12
 800b412:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    lv_obj_set_event_cb(rollerfreq[0], event_handler);
 800b416:	f004 b91c 	b.w	800f652 <lv_obj_set_event_cb>
 800b41a:	bf00      	nop
 800b41c:	0802c9e2 	.word	0x0802c9e2

0800b420 <screen_freq>:
	Tela_Freq = lv_obj_create(NULL, NULL);
 800b420:	2100      	movs	r1, #0
{
 800b422:	b538      	push	{r3, r4, r5, lr}
	Tela_Freq = lv_obj_create(NULL, NULL);
 800b424:	4608      	mov	r0, r1
 800b426:	f004 fcd5 	bl	800fdd4 <lv_obj_create>
 800b42a:	4d12      	ldr	r5, [pc, #72]	; (800b474 <screen_freq+0x54>)
	img_fundo = lv_img_create(Tela_Freq, NULL);
 800b42c:	4c12      	ldr	r4, [pc, #72]	; (800b478 <screen_freq+0x58>)
	Tela_Freq = lv_obj_create(NULL, NULL);
 800b42e:	6028      	str	r0, [r5, #0]
	img_fundo = lv_img_create(Tela_Freq, NULL);
 800b430:	2100      	movs	r1, #0
 800b432:	f00c fdc7 	bl	8017fc4 <lv_img_create>
	lv_img_set_src(img_fundo, &tela_freq);
 800b436:	4911      	ldr	r1, [pc, #68]	; (800b47c <screen_freq+0x5c>)
	img_fundo = lv_img_create(Tela_Freq, NULL);
 800b438:	6020      	str	r0, [r4, #0]
	lv_img_set_src(img_fundo, &tela_freq);
 800b43a:	f00c fd33 	bl	8017ea4 <lv_img_set_src>
	lv_obj_set_protect(img_fundo, LV_PROTECT_POS);
 800b43e:	2104      	movs	r1, #4
 800b440:	6820      	ldr	r0, [r4, #0]
 800b442:	f004 f8f9 	bl	800f638 <lv_obj_set_protect>
	lv_obj_set_event_cb(img_fundo, btn_event_esc_freq);
 800b446:	490e      	ldr	r1, [pc, #56]	; (800b480 <screen_freq+0x60>)
 800b448:	6820      	ldr	r0, [r4, #0]
 800b44a:	f004 f902 	bl	800f652 <lv_obj_set_event_cb>
	lv_obj_set_click(img_fundo, 1);
 800b44e:	2101      	movs	r1, #1
 800b450:	6820      	ldr	r0, [r4, #0]
 800b452:	f004 f8d5 	bl	800f600 <lv_obj_set_click>
	create_vumeter_freq();
 800b456:	f7ff fd17 	bl	800ae88 <create_vumeter_freq>
	update_vumeter(frequencia);
 800b45a:	4b0a      	ldr	r3, [pc, #40]	; (800b484 <screen_freq+0x64>)
 800b45c:	6818      	ldr	r0, [r3, #0]
 800b45e:	f7ff fd83 	bl	800af68 <update_vumeter>
	prog_freq();
 800b462:	f7ff fdbf 	bl	800afe4 <prog_freq>
 800b466:	6828      	ldr	r0, [r5, #0]
 800b468:	f003 fea0 	bl	800f1ac <lv_disp_load_scr>
	TelaAtiva = TelaFrequencia;
 800b46c:	4b06      	ldr	r3, [pc, #24]	; (800b488 <screen_freq+0x68>)
 800b46e:	2202      	movs	r2, #2
 800b470:	601a      	str	r2, [r3, #0]
 800b472:	bd38      	pop	{r3, r4, r5, pc}
 800b474:	200052d0 	.word	0x200052d0
 800b478:	20005328 	.word	0x20005328
 800b47c:	20001c10 	.word	0x20001c10
 800b480:	0800adc5 	.word	0x0800adc5
 800b484:	20000010 	.word	0x20000010
 800b488:	20003444 	.word	0x20003444

0800b48c <update_style_roller_freq>:

void update_style_roller_freq(uint32_t idx)
{
 800b48c:	b510      	push	{r4, lr}
	switch(idx) {
 800b48e:	2806      	cmp	r0, #6
 800b490:	f200 810e 	bhi.w	800b6b0 <update_style_roller_freq+0x224>
 800b494:	e8df f010 	tbh	[pc, r0, lsl #1]
 800b498:	00460007 	.word	0x00460007
 800b49c:	0060004e 	.word	0x0060004e
 800b4a0:	00a2007c 	.word	0x00a2007c
 800b4a4:	00d2      	.short	0x00d2
		case 0:
			lv_roller_set_style(rollerfreq[0], LV_ROLLER_STYLE_BG, &style_roller);
 800b4a6:	4c83      	ldr	r4, [pc, #524]	; (800b6b4 <update_style_roller_freq+0x228>)
 800b4a8:	4a83      	ldr	r2, [pc, #524]	; (800b6b8 <update_style_roller_freq+0x22c>)
 800b4aa:	6820      	ldr	r0, [r4, #0]
 800b4ac:	2100      	movs	r1, #0
 800b4ae:	f00f f8c9 	bl	801a644 <lv_roller_set_style>
		    lv_roller_set_style(rollerfreq[0], LV_ROLLER_STYLE_SEL, &style_roller);
 800b4b2:	4a81      	ldr	r2, [pc, #516]	; (800b6b8 <update_style_roller_freq+0x22c>)
		    lv_roller_set_style(rollerfreq[5], LV_ROLLER_STYLE_BG, &style_roller);
		    lv_roller_set_style(rollerfreq[5], LV_ROLLER_STYLE_SEL, &style_roller);
			break;
		case 1:
			lv_roller_set_style(rollerfreq[0], LV_ROLLER_STYLE_BG, &style_roller_bg);
		    lv_roller_set_style(rollerfreq[0], LV_ROLLER_STYLE_SEL, &style_roller_bg);
 800b4b4:	6820      	ldr	r0, [r4, #0]
 800b4b6:	2101      	movs	r1, #1
 800b4b8:	f00f f8c4 	bl	801a644 <lv_roller_set_style>
		    lv_roller_set_style(rollerfreq[1], LV_ROLLER_STYLE_BG, &style_roller);
 800b4bc:	4a7e      	ldr	r2, [pc, #504]	; (800b6b8 <update_style_roller_freq+0x22c>)
 800b4be:	6860      	ldr	r0, [r4, #4]
 800b4c0:	2100      	movs	r1, #0
 800b4c2:	f00f f8bf 	bl	801a644 <lv_roller_set_style>
		    lv_roller_set_style(rollerfreq[1], LV_ROLLER_STYLE_SEL, &style_roller);
 800b4c6:	4a7c      	ldr	r2, [pc, #496]	; (800b6b8 <update_style_roller_freq+0x22c>)
 800b4c8:	6860      	ldr	r0, [r4, #4]
 800b4ca:	2101      	movs	r1, #1
 800b4cc:	f00f f8ba 	bl	801a644 <lv_roller_set_style>
		    lv_roller_set_style(rollerfreq[2], LV_ROLLER_STYLE_BG, &style_roller);
 800b4d0:	4a79      	ldr	r2, [pc, #484]	; (800b6b8 <update_style_roller_freq+0x22c>)
 800b4d2:	68a0      	ldr	r0, [r4, #8]
 800b4d4:	2100      	movs	r1, #0
 800b4d6:	f00f f8b5 	bl	801a644 <lv_roller_set_style>
		    lv_roller_set_style(rollerfreq[2], LV_ROLLER_STYLE_SEL, &style_roller);
 800b4da:	4a77      	ldr	r2, [pc, #476]	; (800b6b8 <update_style_roller_freq+0x22c>)
 800b4dc:	68a0      	ldr	r0, [r4, #8]
 800b4de:	2101      	movs	r1, #1
 800b4e0:	f00f f8b0 	bl	801a644 <lv_roller_set_style>
		    lv_roller_set_style(rollerfreq[3], LV_ROLLER_STYLE_BG, &style_roller);
 800b4e4:	4a74      	ldr	r2, [pc, #464]	; (800b6b8 <update_style_roller_freq+0x22c>)
 800b4e6:	68e0      	ldr	r0, [r4, #12]
 800b4e8:	2100      	movs	r1, #0
 800b4ea:	f00f f8ab 	bl	801a644 <lv_roller_set_style>
		    lv_roller_set_style(rollerfreq[3], LV_ROLLER_STYLE_SEL, &style_roller);
 800b4ee:	4a72      	ldr	r2, [pc, #456]	; (800b6b8 <update_style_roller_freq+0x22c>)
 800b4f0:	68e0      	ldr	r0, [r4, #12]
 800b4f2:	2101      	movs	r1, #1
 800b4f4:	f00f f8a6 	bl	801a644 <lv_roller_set_style>
		    lv_roller_set_style(rollerfreq[4], LV_ROLLER_STYLE_BG, &style_roller);
 800b4f8:	4a6f      	ldr	r2, [pc, #444]	; (800b6b8 <update_style_roller_freq+0x22c>)
 800b4fa:	6920      	ldr	r0, [r4, #16]
 800b4fc:	2100      	movs	r1, #0
 800b4fe:	f00f f8a1 	bl	801a644 <lv_roller_set_style>
		    lv_roller_set_style(rollerfreq[4], LV_ROLLER_STYLE_SEL, &style_roller);
 800b502:	4a6d      	ldr	r2, [pc, #436]	; (800b6b8 <update_style_roller_freq+0x22c>)
 800b504:	6920      	ldr	r0, [r4, #16]
 800b506:	2101      	movs	r1, #1
 800b508:	f00f f89c 	bl	801a644 <lv_roller_set_style>
		    lv_roller_set_style(rollerfreq[5], LV_ROLLER_STYLE_BG, &style_roller);
 800b50c:	4a6a      	ldr	r2, [pc, #424]	; (800b6b8 <update_style_roller_freq+0x22c>)
 800b50e:	6960      	ldr	r0, [r4, #20]
 800b510:	2100      	movs	r1, #0
 800b512:	f00f f897 	bl	801a644 <lv_roller_set_style>
		    lv_roller_set_style(rollerfreq[5], LV_ROLLER_STYLE_SEL, &style_roller);
 800b516:	4a68      	ldr	r2, [pc, #416]	; (800b6b8 <update_style_roller_freq+0x22c>)
		    lv_roller_set_style(rollerfreq[3], LV_ROLLER_STYLE_BG, &style_roller);
		    lv_roller_set_style(rollerfreq[3], LV_ROLLER_STYLE_SEL, &style_roller);
		    lv_roller_set_style(rollerfreq[4], LV_ROLLER_STYLE_BG, &style_roller);
		    lv_roller_set_style(rollerfreq[4], LV_ROLLER_STYLE_SEL, &style_roller);
		    lv_roller_set_style(rollerfreq[5], LV_ROLLER_STYLE_BG, &style_roller_bg);
		    lv_roller_set_style(rollerfreq[5], LV_ROLLER_STYLE_SEL, &style_roller_bg);
 800b518:	6960      	ldr	r0, [r4, #20]
 800b51a:	2101      	movs	r1, #1
		    break;
	}
}
 800b51c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		    lv_roller_set_style(rollerfreq[5], LV_ROLLER_STYLE_SEL, &style_roller_bg);
 800b520:	f00f b890 	b.w	801a644 <lv_roller_set_style>
			lv_roller_set_style(rollerfreq[0], LV_ROLLER_STYLE_BG, &style_roller_bg);
 800b524:	4c63      	ldr	r4, [pc, #396]	; (800b6b4 <update_style_roller_freq+0x228>)
 800b526:	4a65      	ldr	r2, [pc, #404]	; (800b6bc <update_style_roller_freq+0x230>)
 800b528:	6820      	ldr	r0, [r4, #0]
 800b52a:	2100      	movs	r1, #0
 800b52c:	f00f f88a 	bl	801a644 <lv_roller_set_style>
		    lv_roller_set_style(rollerfreq[0], LV_ROLLER_STYLE_SEL, &style_roller_bg);
 800b530:	4a62      	ldr	r2, [pc, #392]	; (800b6bc <update_style_roller_freq+0x230>)
 800b532:	e7bf      	b.n	800b4b4 <update_style_roller_freq+0x28>
			lv_roller_set_style(rollerfreq[0], LV_ROLLER_STYLE_BG, &style_roller);
 800b534:	4c5f      	ldr	r4, [pc, #380]	; (800b6b4 <update_style_roller_freq+0x228>)
 800b536:	4a60      	ldr	r2, [pc, #384]	; (800b6b8 <update_style_roller_freq+0x22c>)
 800b538:	6820      	ldr	r0, [r4, #0]
 800b53a:	2100      	movs	r1, #0
 800b53c:	f00f f882 	bl	801a644 <lv_roller_set_style>
		    lv_roller_set_style(rollerfreq[0], LV_ROLLER_STYLE_SEL, &style_roller);
 800b540:	4a5d      	ldr	r2, [pc, #372]	; (800b6b8 <update_style_roller_freq+0x22c>)
 800b542:	6820      	ldr	r0, [r4, #0]
 800b544:	2101      	movs	r1, #1
 800b546:	f00f f87d 	bl	801a644 <lv_roller_set_style>
		    lv_roller_set_style(rollerfreq[1], LV_ROLLER_STYLE_BG, &style_roller_bg);
 800b54a:	4a5c      	ldr	r2, [pc, #368]	; (800b6bc <update_style_roller_freq+0x230>)
 800b54c:	6860      	ldr	r0, [r4, #4]
 800b54e:	2100      	movs	r1, #0
 800b550:	f00f f878 	bl	801a644 <lv_roller_set_style>
		    lv_roller_set_style(rollerfreq[1], LV_ROLLER_STYLE_SEL, &style_roller_bg);
 800b554:	4a59      	ldr	r2, [pc, #356]	; (800b6bc <update_style_roller_freq+0x230>)
 800b556:	e7b7      	b.n	800b4c8 <update_style_roller_freq+0x3c>
			lv_roller_set_style(rollerfreq[0], LV_ROLLER_STYLE_BG, &style_roller);
 800b558:	4c56      	ldr	r4, [pc, #344]	; (800b6b4 <update_style_roller_freq+0x228>)
 800b55a:	4a57      	ldr	r2, [pc, #348]	; (800b6b8 <update_style_roller_freq+0x22c>)
 800b55c:	6820      	ldr	r0, [r4, #0]
 800b55e:	2100      	movs	r1, #0
 800b560:	f00f f870 	bl	801a644 <lv_roller_set_style>
		    lv_roller_set_style(rollerfreq[0], LV_ROLLER_STYLE_SEL, &style_roller);
 800b564:	4a54      	ldr	r2, [pc, #336]	; (800b6b8 <update_style_roller_freq+0x22c>)
 800b566:	6820      	ldr	r0, [r4, #0]
 800b568:	2101      	movs	r1, #1
 800b56a:	f00f f86b 	bl	801a644 <lv_roller_set_style>
		    lv_roller_set_style(rollerfreq[1], LV_ROLLER_STYLE_BG, &style_roller);
 800b56e:	4a52      	ldr	r2, [pc, #328]	; (800b6b8 <update_style_roller_freq+0x22c>)
 800b570:	6860      	ldr	r0, [r4, #4]
 800b572:	2100      	movs	r1, #0
 800b574:	f00f f866 	bl	801a644 <lv_roller_set_style>
		    lv_roller_set_style(rollerfreq[1], LV_ROLLER_STYLE_SEL, &style_roller);
 800b578:	4a4f      	ldr	r2, [pc, #316]	; (800b6b8 <update_style_roller_freq+0x22c>)
 800b57a:	6860      	ldr	r0, [r4, #4]
 800b57c:	2101      	movs	r1, #1
 800b57e:	f00f f861 	bl	801a644 <lv_roller_set_style>
		    lv_roller_set_style(rollerfreq[2], LV_ROLLER_STYLE_BG, &style_roller_bg);
 800b582:	4a4e      	ldr	r2, [pc, #312]	; (800b6bc <update_style_roller_freq+0x230>)
 800b584:	68a0      	ldr	r0, [r4, #8]
 800b586:	2100      	movs	r1, #0
 800b588:	f00f f85c 	bl	801a644 <lv_roller_set_style>
		    lv_roller_set_style(rollerfreq[2], LV_ROLLER_STYLE_SEL, &style_roller_bg);
 800b58c:	4a4b      	ldr	r2, [pc, #300]	; (800b6bc <update_style_roller_freq+0x230>)
 800b58e:	e7a5      	b.n	800b4dc <update_style_roller_freq+0x50>
			lv_roller_set_style(rollerfreq[0], LV_ROLLER_STYLE_BG, &style_roller);
 800b590:	4c48      	ldr	r4, [pc, #288]	; (800b6b4 <update_style_roller_freq+0x228>)
 800b592:	4a49      	ldr	r2, [pc, #292]	; (800b6b8 <update_style_roller_freq+0x22c>)
 800b594:	6820      	ldr	r0, [r4, #0]
 800b596:	2100      	movs	r1, #0
 800b598:	f00f f854 	bl	801a644 <lv_roller_set_style>
		    lv_roller_set_style(rollerfreq[0], LV_ROLLER_STYLE_SEL, &style_roller);
 800b59c:	4a46      	ldr	r2, [pc, #280]	; (800b6b8 <update_style_roller_freq+0x22c>)
 800b59e:	6820      	ldr	r0, [r4, #0]
 800b5a0:	2101      	movs	r1, #1
 800b5a2:	f00f f84f 	bl	801a644 <lv_roller_set_style>
		    lv_roller_set_style(rollerfreq[1], LV_ROLLER_STYLE_BG, &style_roller);
 800b5a6:	4a44      	ldr	r2, [pc, #272]	; (800b6b8 <update_style_roller_freq+0x22c>)
 800b5a8:	6860      	ldr	r0, [r4, #4]
 800b5aa:	2100      	movs	r1, #0
 800b5ac:	f00f f84a 	bl	801a644 <lv_roller_set_style>
		    lv_roller_set_style(rollerfreq[1], LV_ROLLER_STYLE_SEL, &style_roller);
 800b5b0:	4a41      	ldr	r2, [pc, #260]	; (800b6b8 <update_style_roller_freq+0x22c>)
 800b5b2:	6860      	ldr	r0, [r4, #4]
 800b5b4:	2101      	movs	r1, #1
 800b5b6:	f00f f845 	bl	801a644 <lv_roller_set_style>
		    lv_roller_set_style(rollerfreq[2], LV_ROLLER_STYLE_BG, &style_roller);
 800b5ba:	4a3f      	ldr	r2, [pc, #252]	; (800b6b8 <update_style_roller_freq+0x22c>)
 800b5bc:	68a0      	ldr	r0, [r4, #8]
 800b5be:	2100      	movs	r1, #0
 800b5c0:	f00f f840 	bl	801a644 <lv_roller_set_style>
		    lv_roller_set_style(rollerfreq[2], LV_ROLLER_STYLE_SEL, &style_roller);
 800b5c4:	4a3c      	ldr	r2, [pc, #240]	; (800b6b8 <update_style_roller_freq+0x22c>)
 800b5c6:	68a0      	ldr	r0, [r4, #8]
 800b5c8:	2101      	movs	r1, #1
 800b5ca:	f00f f83b 	bl	801a644 <lv_roller_set_style>
		    lv_roller_set_style(rollerfreq[3], LV_ROLLER_STYLE_BG, &style_roller_bg);
 800b5ce:	4a3b      	ldr	r2, [pc, #236]	; (800b6bc <update_style_roller_freq+0x230>)
 800b5d0:	68e0      	ldr	r0, [r4, #12]
 800b5d2:	2100      	movs	r1, #0
 800b5d4:	f00f f836 	bl	801a644 <lv_roller_set_style>
		    lv_roller_set_style(rollerfreq[3], LV_ROLLER_STYLE_SEL, &style_roller_bg);
 800b5d8:	4a38      	ldr	r2, [pc, #224]	; (800b6bc <update_style_roller_freq+0x230>)
 800b5da:	e789      	b.n	800b4f0 <update_style_roller_freq+0x64>
			lv_roller_set_style(rollerfreq[0], LV_ROLLER_STYLE_BG, &style_roller);
 800b5dc:	4c35      	ldr	r4, [pc, #212]	; (800b6b4 <update_style_roller_freq+0x228>)
 800b5de:	4a36      	ldr	r2, [pc, #216]	; (800b6b8 <update_style_roller_freq+0x22c>)
 800b5e0:	6820      	ldr	r0, [r4, #0]
 800b5e2:	2100      	movs	r1, #0
 800b5e4:	f00f f82e 	bl	801a644 <lv_roller_set_style>
		    lv_roller_set_style(rollerfreq[0], LV_ROLLER_STYLE_SEL, &style_roller);
 800b5e8:	4a33      	ldr	r2, [pc, #204]	; (800b6b8 <update_style_roller_freq+0x22c>)
 800b5ea:	6820      	ldr	r0, [r4, #0]
 800b5ec:	2101      	movs	r1, #1
 800b5ee:	f00f f829 	bl	801a644 <lv_roller_set_style>
		    lv_roller_set_style(rollerfreq[1], LV_ROLLER_STYLE_BG, &style_roller);
 800b5f2:	4a31      	ldr	r2, [pc, #196]	; (800b6b8 <update_style_roller_freq+0x22c>)
 800b5f4:	6860      	ldr	r0, [r4, #4]
 800b5f6:	2100      	movs	r1, #0
 800b5f8:	f00f f824 	bl	801a644 <lv_roller_set_style>
		    lv_roller_set_style(rollerfreq[1], LV_ROLLER_STYLE_SEL, &style_roller);
 800b5fc:	4a2e      	ldr	r2, [pc, #184]	; (800b6b8 <update_style_roller_freq+0x22c>)
 800b5fe:	6860      	ldr	r0, [r4, #4]
 800b600:	2101      	movs	r1, #1
 800b602:	f00f f81f 	bl	801a644 <lv_roller_set_style>
		    lv_roller_set_style(rollerfreq[2], LV_ROLLER_STYLE_BG, &style_roller);
 800b606:	4a2c      	ldr	r2, [pc, #176]	; (800b6b8 <update_style_roller_freq+0x22c>)
 800b608:	68a0      	ldr	r0, [r4, #8]
 800b60a:	2100      	movs	r1, #0
 800b60c:	f00f f81a 	bl	801a644 <lv_roller_set_style>
		    lv_roller_set_style(rollerfreq[2], LV_ROLLER_STYLE_SEL, &style_roller);
 800b610:	4a29      	ldr	r2, [pc, #164]	; (800b6b8 <update_style_roller_freq+0x22c>)
 800b612:	68a0      	ldr	r0, [r4, #8]
 800b614:	2101      	movs	r1, #1
 800b616:	f00f f815 	bl	801a644 <lv_roller_set_style>
		    lv_roller_set_style(rollerfreq[3], LV_ROLLER_STYLE_BG, &style_roller);
 800b61a:	4a27      	ldr	r2, [pc, #156]	; (800b6b8 <update_style_roller_freq+0x22c>)
 800b61c:	68e0      	ldr	r0, [r4, #12]
 800b61e:	2100      	movs	r1, #0
 800b620:	f00f f810 	bl	801a644 <lv_roller_set_style>
		    lv_roller_set_style(rollerfreq[3], LV_ROLLER_STYLE_SEL, &style_roller);
 800b624:	4a24      	ldr	r2, [pc, #144]	; (800b6b8 <update_style_roller_freq+0x22c>)
 800b626:	68e0      	ldr	r0, [r4, #12]
 800b628:	2101      	movs	r1, #1
 800b62a:	f00f f80b 	bl	801a644 <lv_roller_set_style>
		    lv_roller_set_style(rollerfreq[4], LV_ROLLER_STYLE_BG, &style_roller_bg);
 800b62e:	4a23      	ldr	r2, [pc, #140]	; (800b6bc <update_style_roller_freq+0x230>)
 800b630:	6920      	ldr	r0, [r4, #16]
 800b632:	2100      	movs	r1, #0
 800b634:	f00f f806 	bl	801a644 <lv_roller_set_style>
		    lv_roller_set_style(rollerfreq[4], LV_ROLLER_STYLE_SEL, &style_roller_bg);
 800b638:	4a20      	ldr	r2, [pc, #128]	; (800b6bc <update_style_roller_freq+0x230>)
 800b63a:	e763      	b.n	800b504 <update_style_roller_freq+0x78>
			lv_roller_set_style(rollerfreq[0], LV_ROLLER_STYLE_BG, &style_roller);
 800b63c:	4c1d      	ldr	r4, [pc, #116]	; (800b6b4 <update_style_roller_freq+0x228>)
 800b63e:	4a1e      	ldr	r2, [pc, #120]	; (800b6b8 <update_style_roller_freq+0x22c>)
 800b640:	6820      	ldr	r0, [r4, #0]
 800b642:	2100      	movs	r1, #0
 800b644:	f00e fffe 	bl	801a644 <lv_roller_set_style>
		    lv_roller_set_style(rollerfreq[0], LV_ROLLER_STYLE_SEL, &style_roller);
 800b648:	4a1b      	ldr	r2, [pc, #108]	; (800b6b8 <update_style_roller_freq+0x22c>)
 800b64a:	6820      	ldr	r0, [r4, #0]
 800b64c:	2101      	movs	r1, #1
 800b64e:	f00e fff9 	bl	801a644 <lv_roller_set_style>
		    lv_roller_set_style(rollerfreq[1], LV_ROLLER_STYLE_BG, &style_roller);
 800b652:	4a19      	ldr	r2, [pc, #100]	; (800b6b8 <update_style_roller_freq+0x22c>)
 800b654:	6860      	ldr	r0, [r4, #4]
 800b656:	2100      	movs	r1, #0
 800b658:	f00e fff4 	bl	801a644 <lv_roller_set_style>
		    lv_roller_set_style(rollerfreq[1], LV_ROLLER_STYLE_SEL, &style_roller);
 800b65c:	4a16      	ldr	r2, [pc, #88]	; (800b6b8 <update_style_roller_freq+0x22c>)
 800b65e:	6860      	ldr	r0, [r4, #4]
 800b660:	2101      	movs	r1, #1
 800b662:	f00e ffef 	bl	801a644 <lv_roller_set_style>
		    lv_roller_set_style(rollerfreq[2], LV_ROLLER_STYLE_BG, &style_roller);
 800b666:	4a14      	ldr	r2, [pc, #80]	; (800b6b8 <update_style_roller_freq+0x22c>)
 800b668:	68a0      	ldr	r0, [r4, #8]
 800b66a:	2100      	movs	r1, #0
 800b66c:	f00e ffea 	bl	801a644 <lv_roller_set_style>
		    lv_roller_set_style(rollerfreq[2], LV_ROLLER_STYLE_SEL, &style_roller);
 800b670:	4a11      	ldr	r2, [pc, #68]	; (800b6b8 <update_style_roller_freq+0x22c>)
 800b672:	68a0      	ldr	r0, [r4, #8]
 800b674:	2101      	movs	r1, #1
 800b676:	f00e ffe5 	bl	801a644 <lv_roller_set_style>
		    lv_roller_set_style(rollerfreq[3], LV_ROLLER_STYLE_BG, &style_roller);
 800b67a:	4a0f      	ldr	r2, [pc, #60]	; (800b6b8 <update_style_roller_freq+0x22c>)
 800b67c:	68e0      	ldr	r0, [r4, #12]
 800b67e:	2100      	movs	r1, #0
 800b680:	f00e ffe0 	bl	801a644 <lv_roller_set_style>
		    lv_roller_set_style(rollerfreq[3], LV_ROLLER_STYLE_SEL, &style_roller);
 800b684:	4a0c      	ldr	r2, [pc, #48]	; (800b6b8 <update_style_roller_freq+0x22c>)
 800b686:	68e0      	ldr	r0, [r4, #12]
 800b688:	2101      	movs	r1, #1
 800b68a:	f00e ffdb 	bl	801a644 <lv_roller_set_style>
		    lv_roller_set_style(rollerfreq[4], LV_ROLLER_STYLE_BG, &style_roller);
 800b68e:	4a0a      	ldr	r2, [pc, #40]	; (800b6b8 <update_style_roller_freq+0x22c>)
 800b690:	6920      	ldr	r0, [r4, #16]
 800b692:	2100      	movs	r1, #0
 800b694:	f00e ffd6 	bl	801a644 <lv_roller_set_style>
		    lv_roller_set_style(rollerfreq[4], LV_ROLLER_STYLE_SEL, &style_roller);
 800b698:	4a07      	ldr	r2, [pc, #28]	; (800b6b8 <update_style_roller_freq+0x22c>)
 800b69a:	6920      	ldr	r0, [r4, #16]
 800b69c:	2101      	movs	r1, #1
 800b69e:	f00e ffd1 	bl	801a644 <lv_roller_set_style>
		    lv_roller_set_style(rollerfreq[5], LV_ROLLER_STYLE_BG, &style_roller_bg);
 800b6a2:	4a06      	ldr	r2, [pc, #24]	; (800b6bc <update_style_roller_freq+0x230>)
 800b6a4:	6960      	ldr	r0, [r4, #20]
 800b6a6:	2100      	movs	r1, #0
 800b6a8:	f00e ffcc 	bl	801a644 <lv_roller_set_style>
		    lv_roller_set_style(rollerfreq[5], LV_ROLLER_STYLE_SEL, &style_roller_bg);
 800b6ac:	4a03      	ldr	r2, [pc, #12]	; (800b6bc <update_style_roller_freq+0x230>)
 800b6ae:	e733      	b.n	800b518 <update_style_roller_freq+0x8c>
 800b6b0:	bd10      	pop	{r4, pc}
 800b6b2:	bf00      	nop
 800b6b4:	2000532c 	.word	0x2000532c
 800b6b8:	200053e4 	.word	0x200053e4
 800b6bc:	2000545c 	.word	0x2000545c

0800b6c0 <ButtonEventTelaFrequencia>:

void ButtonEventTelaFrequencia(uint8_t event, uint8_t tipo, uint8_t id)
{
 800b6c0:	b570      	push	{r4, r5, r6, lr}
	uint8_t x;
	char buf[32];
	char out[8];

	if(event == EVT_PBTN_INPUT) {
 800b6c2:	2810      	cmp	r0, #16
{
 800b6c4:	b08a      	sub	sp, #40	; 0x28
	if(event == EVT_PBTN_INPUT) {
 800b6c6:	d10f      	bne.n	800b6e8 <ButtonEventTelaFrequencia+0x28>
		if(tipo == PBTN_SCLK) {	// Single Click
 800b6c8:	2901      	cmp	r1, #1
 800b6ca:	d10d      	bne.n	800b6e8 <ButtonEventTelaFrequencia+0x28>
			switch(id) {
 800b6cc:	2a03      	cmp	r2, #3
 800b6ce:	d80b      	bhi.n	800b6e8 <ButtonEventTelaFrequencia+0x28>
 800b6d0:	e8df f002 	tbb	[pc, r2]
 800b6d4:	a22c1e02 	.word	0xa22c1e02
				case KEY_DN:
					if(TelaProgFREQ == 0) {
 800b6d8:	4b52      	ldr	r3, [pc, #328]	; (800b824 <ButtonEventTelaFrequencia+0x164>)
 800b6da:	681a      	ldr	r2, [r3, #0]
 800b6dc:	b932      	cbnz	r2, 800b6ec <ButtonEventTelaFrequencia+0x2c>
						lv_event_send(img_fundo, LV_EVENT_APPLY, NULL);
 800b6de:	4b52      	ldr	r3, [pc, #328]	; (800b828 <ButtonEventTelaFrequencia+0x168>)
 800b6e0:	2111      	movs	r1, #17
 800b6e2:	6818      	ldr	r0, [r3, #0]
 800b6e4:	f003 fffc 	bl	800f6e0 <lv_event_send>
					update_style_roller_freq(0);
					break;
			}
		}
	}
}
 800b6e8:	b00a      	add	sp, #40	; 0x28
 800b6ea:	bd70      	pop	{r4, r5, r6, pc}
					else if(TelaProgFREQ == 1) {
 800b6ec:	2a01      	cmp	r2, #1
 800b6ee:	d1fb      	bne.n	800b6e8 <ButtonEventTelaFrequencia+0x28>
						IndiceFREQ++;
 800b6f0:	4c4e      	ldr	r4, [pc, #312]	; (800b82c <ButtonEventTelaFrequencia+0x16c>)
						logI("TelaFrequencia - KEY_DN - IndiceFREQ: %ld\n", IndiceFREQ);
 800b6f2:	484f      	ldr	r0, [pc, #316]	; (800b830 <ButtonEventTelaFrequencia+0x170>)
						IndiceFREQ++;
 800b6f4:	6823      	ldr	r3, [r4, #0]
 800b6f6:	3301      	adds	r3, #1
						if(IndiceFREQ > 5) IndiceFREQ = 5;
 800b6f8:	2b05      	cmp	r3, #5
 800b6fa:	bf88      	it	hi
 800b6fc:	2305      	movhi	r3, #5
 800b6fe:	6023      	str	r3, [r4, #0]
						logI("TelaFrequencia - KEY_DN - IndiceFREQ: %ld\n", IndiceFREQ);
 800b700:	6821      	ldr	r1, [r4, #0]
 800b702:	f7f5 ffb3 	bl	800166c <logI>
						update_style_roller_freq(IndiceFREQ + 1);
 800b706:	6820      	ldr	r0, [r4, #0]
 800b708:	3001      	adds	r0, #1
					update_style_roller_freq(0);
 800b70a:	f7ff febf 	bl	800b48c <update_style_roller_freq>
}
 800b70e:	e7eb      	b.n	800b6e8 <ButtonEventTelaFrequencia+0x28>
					if(TelaProgFREQ == 0) {
 800b710:	4b44      	ldr	r3, [pc, #272]	; (800b824 <ButtonEventTelaFrequencia+0x164>)
					else if(TelaProgFREQ == 1) {
 800b712:	681b      	ldr	r3, [r3, #0]
 800b714:	2b01      	cmp	r3, #1
 800b716:	d1e7      	bne.n	800b6e8 <ButtonEventTelaFrequencia+0x28>
						if(IndiceFREQ > 1) IndiceFREQ--;
 800b718:	4c44      	ldr	r4, [pc, #272]	; (800b82c <ButtonEventTelaFrequencia+0x16c>)
						logI("TelaFrequencia - KEY_UP - IndiceFREQ: %ld\n", IndiceFREQ);
 800b71a:	4846      	ldr	r0, [pc, #280]	; (800b834 <ButtonEventTelaFrequencia+0x174>)
						if(IndiceFREQ > 1) IndiceFREQ--;
 800b71c:	6823      	ldr	r3, [r4, #0]
 800b71e:	2b01      	cmp	r3, #1
 800b720:	bf84      	itt	hi
 800b722:	f103 33ff 	addhi.w	r3, r3, #4294967295	; 0xffffffff
 800b726:	6023      	strhi	r3, [r4, #0]
						logI("TelaFrequencia - KEY_UP - IndiceFREQ: %ld\n", IndiceFREQ);
 800b728:	6821      	ldr	r1, [r4, #0]
 800b72a:	e7ea      	b.n	800b702 <ButtonEventTelaFrequencia+0x42>
					if(TelaProgFREQ == 0) {
 800b72c:	4c3d      	ldr	r4, [pc, #244]	; (800b824 <ButtonEventTelaFrequencia+0x164>)
 800b72e:	6825      	ldr	r5, [r4, #0]
 800b730:	b935      	cbnz	r5, 800b740 <ButtonEventTelaFrequencia+0x80>
						TelaProgFREQ = 1;
 800b732:	2301      	movs	r3, #1
 800b734:	6023      	str	r3, [r4, #0]
						IndiceFREQ = 5;
 800b736:	4b3d      	ldr	r3, [pc, #244]	; (800b82c <ButtonEventTelaFrequencia+0x16c>)
 800b738:	2205      	movs	r2, #5
 800b73a:	601a      	str	r2, [r3, #0]
						update_style_roller_freq(IndiceFREQ + 1);
 800b73c:	2006      	movs	r0, #6
 800b73e:	e7e4      	b.n	800b70a <ButtonEventTelaFrequencia+0x4a>
					else if(TelaProgFREQ == 1) {
 800b740:	2d01      	cmp	r5, #1
 800b742:	d112      	bne.n	800b76a <ButtonEventTelaFrequencia+0xaa>
						lv_roller_set_style(rollerfreq[IndiceFREQ], LV_ROLLER_STYLE_BG, &style_roller_anim);
 800b744:	4e39      	ldr	r6, [pc, #228]	; (800b82c <ButtonEventTelaFrequencia+0x16c>)
 800b746:	4a3c      	ldr	r2, [pc, #240]	; (800b838 <ButtonEventTelaFrequencia+0x178>)
						TelaProgFREQ = 2;
 800b748:	2302      	movs	r3, #2
 800b74a:	6023      	str	r3, [r4, #0]
						lv_roller_set_style(rollerfreq[IndiceFREQ], LV_ROLLER_STYLE_BG, &style_roller_anim);
 800b74c:	6833      	ldr	r3, [r6, #0]
 800b74e:	4c3b      	ldr	r4, [pc, #236]	; (800b83c <ButtonEventTelaFrequencia+0x17c>)
 800b750:	2100      	movs	r1, #0
 800b752:	f854 0023 	ldr.w	r0, [r4, r3, lsl #2]
 800b756:	f00e ff75 	bl	801a644 <lv_roller_set_style>
						lv_roller_set_style(rollerfreq[IndiceFREQ], LV_ROLLER_STYLE_SEL, &style_roller_anim);
 800b75a:	6833      	ldr	r3, [r6, #0]
 800b75c:	4a36      	ldr	r2, [pc, #216]	; (800b838 <ButtonEventTelaFrequencia+0x178>)
 800b75e:	f854 0023 	ldr.w	r0, [r4, r3, lsl #2]
 800b762:	4629      	mov	r1, r5
 800b764:	f00e ff6e 	bl	801a644 <lv_roller_set_style>
 800b768:	e7be      	b.n	800b6e8 <ButtonEventTelaFrequencia+0x28>
					else if(TelaProgFREQ == 2) {
 800b76a:	2d02      	cmp	r5, #2
 800b76c:	d1bc      	bne.n	800b6e8 <ButtonEventTelaFrequencia+0x28>
						logI("Salva Frequencia\n");
 800b76e:	4834      	ldr	r0, [pc, #208]	; (800b840 <ButtonEventTelaFrequencia+0x180>)
							lv_roller_set_style(rollerfreq[x], LV_ROLLER_STYLE_BG, &style_roller_s);
 800b770:	4d34      	ldr	r5, [pc, #208]	; (800b844 <ButtonEventTelaFrequencia+0x184>)
						logI("Salva Frequencia\n");
 800b772:	f7f5 ff7b 	bl	800166c <logI>
						IndiceFREQ = 0;
 800b776:	4b2d      	ldr	r3, [pc, #180]	; (800b82c <ButtonEventTelaFrequencia+0x16c>)
						TelaProgFREQ = 0;
 800b778:	2000      	movs	r0, #0
 800b77a:	6020      	str	r0, [r4, #0]
						IndiceFREQ = 0;
 800b77c:	6018      	str	r0, [r3, #0]
 800b77e:	4c32      	ldr	r4, [pc, #200]	; (800b848 <ButtonEventTelaFrequencia+0x188>)
						update_style_roller_freq(0);
 800b780:	f7ff fe84 	bl	800b48c <update_style_roller_freq>
 800b784:	f104 0618 	add.w	r6, r4, #24
							lv_roller_set_style(rollerfreq[x], LV_ROLLER_STYLE_BG, &style_roller_s);
 800b788:	462a      	mov	r2, r5
 800b78a:	2100      	movs	r1, #0
 800b78c:	6860      	ldr	r0, [r4, #4]
 800b78e:	f00e ff59 	bl	801a644 <lv_roller_set_style>
						    lv_roller_set_style(rollerfreq[x], LV_ROLLER_STYLE_SEL, &style_roller_s);
 800b792:	f854 0f04 	ldr.w	r0, [r4, #4]!
 800b796:	462a      	mov	r2, r5
 800b798:	2101      	movs	r1, #1
 800b79a:	f00e ff53 	bl	801a644 <lv_roller_set_style>
						for(x = 0; x < 6; x++) {
 800b79e:	42b4      	cmp	r4, r6
 800b7a0:	d1f2      	bne.n	800b788 <ButtonEventTelaFrequencia+0xc8>
				        lv_roller_get_selected_str(rollerfreq[5], buf, sizeof(buf));
 800b7a2:	4c26      	ldr	r4, [pc, #152]	; (800b83c <ButtonEventTelaFrequencia+0x17c>)
    lv_ddlist_get_selected_str(roller, buf, buf_size);
 800b7a4:	a902      	add	r1, sp, #8
 800b7a6:	6960      	ldr	r0, [r4, #20]
 800b7a8:	2220      	movs	r2, #32
 800b7aa:	f00c f920 	bl	80179ee <lv_ddlist_get_selected_str>
				        out[0] = buf[0];
 800b7ae:	f89d 3008 	ldrb.w	r3, [sp, #8]
 800b7b2:	6920      	ldr	r0, [r4, #16]
 800b7b4:	f88d 3000 	strb.w	r3, [sp]
 800b7b8:	a902      	add	r1, sp, #8
 800b7ba:	2220      	movs	r2, #32
 800b7bc:	f00c f917 	bl	80179ee <lv_ddlist_get_selected_str>
				        out[1] = buf[0];
 800b7c0:	f89d 3008 	ldrb.w	r3, [sp, #8]
 800b7c4:	68e0      	ldr	r0, [r4, #12]
 800b7c6:	f88d 3001 	strb.w	r3, [sp, #1]
 800b7ca:	a902      	add	r1, sp, #8
 800b7cc:	2220      	movs	r2, #32
 800b7ce:	f00c f90e 	bl	80179ee <lv_ddlist_get_selected_str>
				        out[2] = buf[0];
 800b7d2:	f89d 3008 	ldrb.w	r3, [sp, #8]
 800b7d6:	68a0      	ldr	r0, [r4, #8]
 800b7d8:	f88d 3002 	strb.w	r3, [sp, #2]
 800b7dc:	a902      	add	r1, sp, #8
 800b7de:	2220      	movs	r2, #32
 800b7e0:	f00c f905 	bl	80179ee <lv_ddlist_get_selected_str>
				        out[3] = buf[0];
 800b7e4:	f89d 3008 	ldrb.w	r3, [sp, #8]
 800b7e8:	6860      	ldr	r0, [r4, #4]
 800b7ea:	f88d 3003 	strb.w	r3, [sp, #3]
 800b7ee:	a902      	add	r1, sp, #8
 800b7f0:	2220      	movs	r2, #32
 800b7f2:	f00c f8fc 	bl	80179ee <lv_ddlist_get_selected_str>
				        out[4] = buf[0];
 800b7f6:	f89d 3008 	ldrb.w	r3, [sp, #8]
 800b7fa:	f88d 3004 	strb.w	r3, [sp, #4]
				        logI("Selected Roller: %d Digit: %s  Frequencia: %d\n", id, buf, atoi(out));
 800b7fe:	4668      	mov	r0, sp
				        out[5] = 0;
 800b800:	2300      	movs	r3, #0
 800b802:	f88d 3005 	strb.w	r3, [sp, #5]
				        logI("Selected Roller: %d Digit: %s  Frequencia: %d\n", id, buf, atoi(out));
 800b806:	f00f f86e 	bl	801a8e6 <atoi>
 800b80a:	aa02      	add	r2, sp, #8
 800b80c:	4603      	mov	r3, r0
 800b80e:	2102      	movs	r1, #2
 800b810:	480e      	ldr	r0, [pc, #56]	; (800b84c <ButtonEventTelaFrequencia+0x18c>)
 800b812:	f7f5 ff2b 	bl	800166c <logI>
 800b816:	e767      	b.n	800b6e8 <ButtonEventTelaFrequencia+0x28>
					TelaProgFREQ = 0;
 800b818:	4b02      	ldr	r3, [pc, #8]	; (800b824 <ButtonEventTelaFrequencia+0x164>)
 800b81a:	2000      	movs	r0, #0
 800b81c:	6018      	str	r0, [r3, #0]
					IndiceFREQ = 0;
 800b81e:	4b03      	ldr	r3, [pc, #12]	; (800b82c <ButtonEventTelaFrequencia+0x16c>)
 800b820:	6018      	str	r0, [r3, #0]
 800b822:	e772      	b.n	800b70a <ButtonEventTelaFrequencia+0x4a>
 800b824:	200052cc 	.word	0x200052cc
 800b828:	20005328 	.word	0x20005328
 800b82c:	200052c8 	.word	0x200052c8
 800b830:	0802c94b 	.word	0x0802c94b
 800b834:	0802c976 	.word	0x0802c976
 800b838:	20005420 	.word	0x20005420
 800b83c:	2000532c 	.word	0x2000532c
 800b840:	0802c9a1 	.word	0x0802c9a1
 800b844:	20005498 	.word	0x20005498
 800b848:	20005328 	.word	0x20005328
 800b84c:	0802c9b3 	.word	0x0802c9b3

0800b850 <btn_event_esc_audio>:
	lv_obj_set_pos(imgbtn_prev, 2, 18);
}

static void btn_event_esc_audio(lv_obj_t * btn, lv_event_t event)
{
	if(event == LV_EVENT_APPLY) {
 800b850:	2911      	cmp	r1, #17
{
 800b852:	b508      	push	{r3, lr}
	if(event == LV_EVENT_APPLY) {
 800b854:	d107      	bne.n	800b866 <btn_event_esc_audio+0x16>
		//printf("Button ESC Released\n");
		lv_obj_del(Tela_Reading_MPX);
 800b856:	4b04      	ldr	r3, [pc, #16]	; (800b868 <btn_event_esc_audio+0x18>)
 800b858:	6818      	ldr	r0, [r3, #0]
 800b85a:	f004 fcac 	bl	80101b6 <lv_obj_del>
		screen_readings();
	}
}
 800b85e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		screen_readings();
 800b862:	f001 bd05 	b.w	800d270 <screen_readings>
 800b866:	bd08      	pop	{r3, pc}
 800b868:	200054d4 	.word	0x200054d4

0800b86c <btn_event_next_audio>:
	if(event == LV_EVENT_APPLY) {
 800b86c:	2911      	cmp	r1, #17
{
 800b86e:	b508      	push	{r3, lr}
	if(event == LV_EVENT_APPLY) {
 800b870:	d107      	bne.n	800b882 <btn_event_next_audio+0x16>
		lv_obj_del(Tela_Reading_MPX);
 800b872:	4b04      	ldr	r3, [pc, #16]	; (800b884 <btn_event_next_audio+0x18>)
 800b874:	6818      	ldr	r0, [r3, #0]
 800b876:	f004 fc9e 	bl	80101b6 <lv_obj_del>
}
 800b87a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		screen_reading_temp();
 800b87e:	f000 bf0d 	b.w	800c69c <screen_reading_temp>
 800b882:	bd08      	pop	{r3, pc}
 800b884:	200054d4 	.word	0x200054d4

0800b888 <create_vumeter_m>:
{
 800b888:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	lv_style_copy(&style_indic_bar, &lv_style_pretty);
 800b88a:	4e30      	ldr	r6, [pc, #192]	; (800b94c <create_vumeter_m+0xc4>)
 800b88c:	4930      	ldr	r1, [pc, #192]	; (800b950 <create_vumeter_m+0xc8>)
	lv_style_copy(&style_indic_bar_vd, &lv_style_pretty);
 800b88e:	4c31      	ldr	r4, [pc, #196]	; (800b954 <create_vumeter_m+0xcc>)
		bar_m[x] = lv_bar_create(Tela_Reading_MPX, NULL);
 800b890:	4f31      	ldr	r7, [pc, #196]	; (800b958 <create_vumeter_m+0xd0>)
	lv_style_copy(&style_indic_bar, &lv_style_pretty);
 800b892:	4630      	mov	r0, r6
 800b894:	f005 f9e8 	bl	8010c68 <lv_style_copy>
	style_indic_bar.body.grad_color = LV_COLOR_MAKE(105, 105, 105);
 800b898:	4b30      	ldr	r3, [pc, #192]	; (800b95c <create_vumeter_m+0xd4>)
	lv_style_copy(&style_indic_bar_vd, &lv_style_pretty);
 800b89a:	492d      	ldr	r1, [pc, #180]	; (800b950 <create_vumeter_m+0xc8>)
	style_indic_bar.body.grad_color = LV_COLOR_MAKE(105, 105, 105);
 800b89c:	881b      	ldrh	r3, [r3, #0]
 800b89e:	80b3      	strh	r3, [r6, #4]
	style_indic_bar.body.radius = 0;
 800b8a0:	2500      	movs	r5, #0
	lv_style_copy(&style_indic_bar_vd, &lv_style_pretty);
 800b8a2:	4620      	mov	r0, r4
	style_indic_bar.body.main_color = LV_COLOR_MAKE(105, 105, 105);
 800b8a4:	8073      	strh	r3, [r6, #2]
	style_indic_bar.body.border.color = LV_COLOR_MAKE(105, 105, 105);
 800b8a6:	8173      	strh	r3, [r6, #10]
	style_indic_bar.body.radius = 0;
 800b8a8:	80f5      	strh	r5, [r6, #6]
	lv_style_copy(&style_indic_bar_vd, &lv_style_pretty);
 800b8aa:	f005 f9dd 	bl	8010c68 <lv_style_copy>
	style_indic_bar_vd.body.grad_color = LV_COLOR_MAKE(0, 255, 0);
 800b8ae:	7923      	ldrb	r3, [r4, #4]
	style_indic_bar_vd.body.radius = 0;
 800b8b0:	80e5      	strh	r5, [r4, #6]
	style_indic_bar_vd.body.grad_color = LV_COLOR_MAKE(0, 255, 0);
 800b8b2:	f365 0304 	bfi	r3, r5, #0, #5
 800b8b6:	7123      	strb	r3, [r4, #4]
 800b8b8:	88a3      	ldrh	r3, [r4, #4]
 800b8ba:	f443 63fc 	orr.w	r3, r3, #2016	; 0x7e0
 800b8be:	80a3      	strh	r3, [r4, #4]
 800b8c0:	0a1b      	lsrs	r3, r3, #8
 800b8c2:	f365 03c7 	bfi	r3, r5, #3, #5
 800b8c6:	7163      	strb	r3, [r4, #5]
	style_indic_bar_vd.body.main_color = LV_COLOR_MAKE(0, 255, 0);
 800b8c8:	78a3      	ldrb	r3, [r4, #2]
 800b8ca:	f365 0304 	bfi	r3, r5, #0, #5
 800b8ce:	70a3      	strb	r3, [r4, #2]
 800b8d0:	8863      	ldrh	r3, [r4, #2]
 800b8d2:	f443 63fc 	orr.w	r3, r3, #2016	; 0x7e0
 800b8d6:	8063      	strh	r3, [r4, #2]
 800b8d8:	0a1b      	lsrs	r3, r3, #8
 800b8da:	f365 03c7 	bfi	r3, r5, #3, #5
 800b8de:	70e3      	strb	r3, [r4, #3]
	style_indic_bar_vd.body.border.color = LV_COLOR_MAKE(0, 255, 0);
 800b8e0:	7aa3      	ldrb	r3, [r4, #10]
 800b8e2:	f365 0304 	bfi	r3, r5, #0, #5
 800b8e6:	72a3      	strb	r3, [r4, #10]
 800b8e8:	8963      	ldrh	r3, [r4, #10]
 800b8ea:	f443 63fc 	orr.w	r3, r3, #2016	; 0x7e0
 800b8ee:	8163      	strh	r3, [r4, #10]
 800b8f0:	0a1b      	lsrs	r3, r3, #8
 800b8f2:	f365 03c7 	bfi	r3, r5, #3, #5
 800b8f6:	72e3      	strb	r3, [r4, #11]
 800b8f8:	4c19      	ldr	r4, [pc, #100]	; (800b960 <create_vumeter_m+0xd8>)
		bar_m[x] = lv_bar_create(Tela_Reading_MPX, NULL);
 800b8fa:	6838      	ldr	r0, [r7, #0]
 800b8fc:	2100      	movs	r1, #0
 800b8fe:	f00a fc1d 	bl	801613c <lv_bar_create>
		lv_obj_set_size(bar_m[x], 4, 11);
 800b902:	220b      	movs	r2, #11
		bar_m[x] = lv_bar_create(Tela_Reading_MPX, NULL);
 800b904:	6060      	str	r0, [r4, #4]
		lv_obj_set_size(bar_m[x], 4, 11);
 800b906:	2104      	movs	r1, #4
 800b908:	f004 fbe2 	bl	80100d0 <lv_obj_set_size>
		lv_bar_set_style(bar_m[x], LV_BAR_STYLE_BG, &style_indic_bar);
 800b90c:	6860      	ldr	r0, [r4, #4]
 800b90e:	4632      	mov	r2, r6
 800b910:	2100      	movs	r1, #0
 800b912:	f00a fbfd 	bl	8016110 <lv_bar_set_style>
		lv_bar_set_style(bar_m[x], LV_BAR_STYLE_INDIC, &style_indic_bar);
 800b916:	6860      	ldr	r0, [r4, #4]
 800b918:	4632      	mov	r2, r6
 800b91a:	2101      	movs	r1, #1
 800b91c:	f00a fbf8 	bl	8016110 <lv_bar_set_style>
		lv_obj_align(bar_m[x], NULL, LV_ALIGN_IN_TOP_LEFT, m_pos_x[x], 48);
 800b920:	2230      	movs	r2, #48	; 0x30
 800b922:	4b10      	ldr	r3, [pc, #64]	; (800b964 <create_vumeter_m+0xdc>)
 800b924:	9200      	str	r2, [sp, #0]
 800b926:	f933 3025 	ldrsh.w	r3, [r3, r5, lsl #2]
 800b92a:	6860      	ldr	r0, [r4, #4]
 800b92c:	2201      	movs	r2, #1
 800b92e:	2100      	movs	r1, #0
 800b930:	f004 f82e 	bl	800f990 <lv_obj_align>
 800b934:	3501      	adds	r5, #1
		lv_bar_set_value(bar_m[x], 100, 0);
 800b936:	2200      	movs	r2, #0
 800b938:	2164      	movs	r1, #100	; 0x64
 800b93a:	f854 0f04 	ldr.w	r0, [r4, #4]!
 800b93e:	f00a fb8b 	bl	8016058 <lv_bar_set_value>
	for(uint8_t x = 0; x < 24; x++) {
 800b942:	2d18      	cmp	r5, #24
 800b944:	d1d9      	bne.n	800b8fa <create_vumeter_m+0x72>
}
 800b946:	b003      	add	sp, #12
 800b948:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b94a:	bf00      	nop
 800b94c:	20005600 	.word	0x20005600
 800b950:	2000c5b8 	.word	0x2000c5b8
 800b954:	2000563c 	.word	0x2000563c
 800b958:	200054d4 	.word	0x200054d4
 800b95c:	0801d8c8 	.word	0x0801d8c8
 800b960:	20005534 	.word	0x20005534
 800b964:	0802cab8 	.word	0x0802cab8

0800b968 <create_vumeter_r>:
{
 800b968:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	lv_style_copy(&style_indic_bar, &lv_style_pretty);
 800b96a:	4e30      	ldr	r6, [pc, #192]	; (800ba2c <create_vumeter_r+0xc4>)
 800b96c:	4930      	ldr	r1, [pc, #192]	; (800ba30 <create_vumeter_r+0xc8>)
	lv_style_copy(&style_indic_bar_vd, &lv_style_pretty);
 800b96e:	4c31      	ldr	r4, [pc, #196]	; (800ba34 <create_vumeter_r+0xcc>)
		bar_r[x] = lv_bar_create(Tela_Reading_MPX, NULL);
 800b970:	4f31      	ldr	r7, [pc, #196]	; (800ba38 <create_vumeter_r+0xd0>)
	lv_style_copy(&style_indic_bar, &lv_style_pretty);
 800b972:	4630      	mov	r0, r6
 800b974:	f005 f978 	bl	8010c68 <lv_style_copy>
	style_indic_bar.body.grad_color = LV_COLOR_MAKE(105, 105, 105);
 800b978:	4b30      	ldr	r3, [pc, #192]	; (800ba3c <create_vumeter_r+0xd4>)
	lv_style_copy(&style_indic_bar_vd, &lv_style_pretty);
 800b97a:	492d      	ldr	r1, [pc, #180]	; (800ba30 <create_vumeter_r+0xc8>)
	style_indic_bar.body.grad_color = LV_COLOR_MAKE(105, 105, 105);
 800b97c:	881b      	ldrh	r3, [r3, #0]
 800b97e:	80b3      	strh	r3, [r6, #4]
	style_indic_bar.body.radius = 0;
 800b980:	2500      	movs	r5, #0
	lv_style_copy(&style_indic_bar_vd, &lv_style_pretty);
 800b982:	4620      	mov	r0, r4
	style_indic_bar.body.main_color = LV_COLOR_MAKE(105, 105, 105);
 800b984:	8073      	strh	r3, [r6, #2]
	style_indic_bar.body.border.color = LV_COLOR_MAKE(105, 105, 105);
 800b986:	8173      	strh	r3, [r6, #10]
	style_indic_bar.body.radius = 0;
 800b988:	80f5      	strh	r5, [r6, #6]
	lv_style_copy(&style_indic_bar_vd, &lv_style_pretty);
 800b98a:	f005 f96d 	bl	8010c68 <lv_style_copy>
	style_indic_bar_vd.body.grad_color = LV_COLOR_MAKE(0, 255, 0);
 800b98e:	7923      	ldrb	r3, [r4, #4]
	style_indic_bar_vd.body.radius = 0;
 800b990:	80e5      	strh	r5, [r4, #6]
	style_indic_bar_vd.body.grad_color = LV_COLOR_MAKE(0, 255, 0);
 800b992:	f365 0304 	bfi	r3, r5, #0, #5
 800b996:	7123      	strb	r3, [r4, #4]
 800b998:	88a3      	ldrh	r3, [r4, #4]
 800b99a:	f443 63fc 	orr.w	r3, r3, #2016	; 0x7e0
 800b99e:	80a3      	strh	r3, [r4, #4]
 800b9a0:	0a1b      	lsrs	r3, r3, #8
 800b9a2:	f365 03c7 	bfi	r3, r5, #3, #5
 800b9a6:	7163      	strb	r3, [r4, #5]
	style_indic_bar_vd.body.main_color = LV_COLOR_MAKE(0, 255, 0);
 800b9a8:	78a3      	ldrb	r3, [r4, #2]
 800b9aa:	f365 0304 	bfi	r3, r5, #0, #5
 800b9ae:	70a3      	strb	r3, [r4, #2]
 800b9b0:	8863      	ldrh	r3, [r4, #2]
 800b9b2:	f443 63fc 	orr.w	r3, r3, #2016	; 0x7e0
 800b9b6:	8063      	strh	r3, [r4, #2]
 800b9b8:	0a1b      	lsrs	r3, r3, #8
 800b9ba:	f365 03c7 	bfi	r3, r5, #3, #5
 800b9be:	70e3      	strb	r3, [r4, #3]
	style_indic_bar_vd.body.border.color = LV_COLOR_MAKE(0, 255, 0);
 800b9c0:	7aa3      	ldrb	r3, [r4, #10]
 800b9c2:	f365 0304 	bfi	r3, r5, #0, #5
 800b9c6:	72a3      	strb	r3, [r4, #10]
 800b9c8:	8963      	ldrh	r3, [r4, #10]
 800b9ca:	f443 63fc 	orr.w	r3, r3, #2016	; 0x7e0
 800b9ce:	8163      	strh	r3, [r4, #10]
 800b9d0:	0a1b      	lsrs	r3, r3, #8
 800b9d2:	f365 03c7 	bfi	r3, r5, #3, #5
 800b9d6:	72e3      	strb	r3, [r4, #11]
 800b9d8:	4c19      	ldr	r4, [pc, #100]	; (800ba40 <create_vumeter_r+0xd8>)
		bar_r[x] = lv_bar_create(Tela_Reading_MPX, NULL);
 800b9da:	6838      	ldr	r0, [r7, #0]
 800b9dc:	2100      	movs	r1, #0
 800b9de:	f00a fbad 	bl	801613c <lv_bar_create>
		lv_obj_set_size(bar_r[x], 4, 21);
 800b9e2:	2215      	movs	r2, #21
		bar_r[x] = lv_bar_create(Tela_Reading_MPX, NULL);
 800b9e4:	6060      	str	r0, [r4, #4]
		lv_obj_set_size(bar_r[x], 4, 21);
 800b9e6:	2104      	movs	r1, #4
 800b9e8:	f004 fb72 	bl	80100d0 <lv_obj_set_size>
		lv_bar_set_style(bar_r[x], LV_BAR_STYLE_BG, &style_indic_bar);
 800b9ec:	6860      	ldr	r0, [r4, #4]
 800b9ee:	4632      	mov	r2, r6
 800b9f0:	2100      	movs	r1, #0
 800b9f2:	f00a fb8d 	bl	8016110 <lv_bar_set_style>
		lv_bar_set_style(bar_r[x], LV_BAR_STYLE_INDIC, &style_indic_bar);
 800b9f6:	6860      	ldr	r0, [r4, #4]
 800b9f8:	4632      	mov	r2, r6
 800b9fa:	2101      	movs	r1, #1
 800b9fc:	f00a fb88 	bl	8016110 <lv_bar_set_style>
		lv_obj_align(bar_r[x], NULL, LV_ALIGN_IN_TOP_LEFT, r_pos_x[x], 71);
 800ba00:	2247      	movs	r2, #71	; 0x47
 800ba02:	4b10      	ldr	r3, [pc, #64]	; (800ba44 <create_vumeter_r+0xdc>)
 800ba04:	9200      	str	r2, [sp, #0]
 800ba06:	f933 3025 	ldrsh.w	r3, [r3, r5, lsl #2]
 800ba0a:	6860      	ldr	r0, [r4, #4]
 800ba0c:	2201      	movs	r2, #1
 800ba0e:	2100      	movs	r1, #0
 800ba10:	f003 ffbe 	bl	800f990 <lv_obj_align>
 800ba14:	3501      	adds	r5, #1
		lv_bar_set_value(bar_r[x], 100, 0);
 800ba16:	2200      	movs	r2, #0
 800ba18:	2164      	movs	r1, #100	; 0x64
 800ba1a:	f854 0f04 	ldr.w	r0, [r4, #4]!
 800ba1e:	f00a fb1b 	bl	8016058 <lv_bar_set_value>
	for(uint8_t x = 0; x < 24; x++) {
 800ba22:	2d18      	cmp	r5, #24
 800ba24:	d1d9      	bne.n	800b9da <create_vumeter_r+0x72>
}
 800ba26:	b003      	add	sp, #12
 800ba28:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ba2a:	bf00      	nop
 800ba2c:	20005600 	.word	0x20005600
 800ba30:	2000c5b8 	.word	0x2000c5b8
 800ba34:	2000563c 	.word	0x2000563c
 800ba38:	200054d4 	.word	0x200054d4
 800ba3c:	0801d8c8 	.word	0x0801d8c8
 800ba40:	20005594 	.word	0x20005594
 800ba44:	0802cb18 	.word	0x0802cb18

0800ba48 <create_vumeter_l>:
{
 800ba48:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	lv_style_copy(&style_indic_bar, &lv_style_pretty);
 800ba4a:	4e30      	ldr	r6, [pc, #192]	; (800bb0c <create_vumeter_l+0xc4>)
 800ba4c:	4930      	ldr	r1, [pc, #192]	; (800bb10 <create_vumeter_l+0xc8>)
	lv_style_copy(&style_indic_bar_vd, &lv_style_pretty);
 800ba4e:	4c31      	ldr	r4, [pc, #196]	; (800bb14 <create_vumeter_l+0xcc>)
		bar_l[x] = lv_bar_create(Tela_Reading_MPX, NULL);
 800ba50:	4f31      	ldr	r7, [pc, #196]	; (800bb18 <create_vumeter_l+0xd0>)
	lv_style_copy(&style_indic_bar, &lv_style_pretty);
 800ba52:	4630      	mov	r0, r6
 800ba54:	f005 f908 	bl	8010c68 <lv_style_copy>
	style_indic_bar.body.grad_color = LV_COLOR_MAKE(105, 105, 105);
 800ba58:	4b30      	ldr	r3, [pc, #192]	; (800bb1c <create_vumeter_l+0xd4>)
	lv_style_copy(&style_indic_bar_vd, &lv_style_pretty);
 800ba5a:	492d      	ldr	r1, [pc, #180]	; (800bb10 <create_vumeter_l+0xc8>)
	style_indic_bar.body.grad_color = LV_COLOR_MAKE(105, 105, 105);
 800ba5c:	881b      	ldrh	r3, [r3, #0]
 800ba5e:	80b3      	strh	r3, [r6, #4]
	style_indic_bar.body.radius = 0;
 800ba60:	2500      	movs	r5, #0
	lv_style_copy(&style_indic_bar_vd, &lv_style_pretty);
 800ba62:	4620      	mov	r0, r4
	style_indic_bar.body.main_color = LV_COLOR_MAKE(105, 105, 105);
 800ba64:	8073      	strh	r3, [r6, #2]
	style_indic_bar.body.border.color = LV_COLOR_MAKE(105, 105, 105);
 800ba66:	8173      	strh	r3, [r6, #10]
	style_indic_bar.body.radius = 0;
 800ba68:	80f5      	strh	r5, [r6, #6]
	lv_style_copy(&style_indic_bar_vd, &lv_style_pretty);
 800ba6a:	f005 f8fd 	bl	8010c68 <lv_style_copy>
	style_indic_bar_vd.body.grad_color = LV_COLOR_MAKE(0, 255, 0);
 800ba6e:	7923      	ldrb	r3, [r4, #4]
	style_indic_bar_vd.body.radius = 0;
 800ba70:	80e5      	strh	r5, [r4, #6]
	style_indic_bar_vd.body.grad_color = LV_COLOR_MAKE(0, 255, 0);
 800ba72:	f365 0304 	bfi	r3, r5, #0, #5
 800ba76:	7123      	strb	r3, [r4, #4]
 800ba78:	88a3      	ldrh	r3, [r4, #4]
 800ba7a:	f443 63fc 	orr.w	r3, r3, #2016	; 0x7e0
 800ba7e:	80a3      	strh	r3, [r4, #4]
 800ba80:	0a1b      	lsrs	r3, r3, #8
 800ba82:	f365 03c7 	bfi	r3, r5, #3, #5
 800ba86:	7163      	strb	r3, [r4, #5]
	style_indic_bar_vd.body.main_color = LV_COLOR_MAKE(0, 255, 0);
 800ba88:	78a3      	ldrb	r3, [r4, #2]
 800ba8a:	f365 0304 	bfi	r3, r5, #0, #5
 800ba8e:	70a3      	strb	r3, [r4, #2]
 800ba90:	8863      	ldrh	r3, [r4, #2]
 800ba92:	f443 63fc 	orr.w	r3, r3, #2016	; 0x7e0
 800ba96:	8063      	strh	r3, [r4, #2]
 800ba98:	0a1b      	lsrs	r3, r3, #8
 800ba9a:	f365 03c7 	bfi	r3, r5, #3, #5
 800ba9e:	70e3      	strb	r3, [r4, #3]
	style_indic_bar_vd.body.border.color = LV_COLOR_MAKE(0, 255, 0);
 800baa0:	7aa3      	ldrb	r3, [r4, #10]
 800baa2:	f365 0304 	bfi	r3, r5, #0, #5
 800baa6:	72a3      	strb	r3, [r4, #10]
 800baa8:	8963      	ldrh	r3, [r4, #10]
 800baaa:	f443 63fc 	orr.w	r3, r3, #2016	; 0x7e0
 800baae:	8163      	strh	r3, [r4, #10]
 800bab0:	0a1b      	lsrs	r3, r3, #8
 800bab2:	f365 03c7 	bfi	r3, r5, #3, #5
 800bab6:	72e3      	strb	r3, [r4, #11]
 800bab8:	4c19      	ldr	r4, [pc, #100]	; (800bb20 <create_vumeter_l+0xd8>)
		bar_l[x] = lv_bar_create(Tela_Reading_MPX, NULL);
 800baba:	6838      	ldr	r0, [r7, #0]
 800babc:	2100      	movs	r1, #0
 800babe:	f00a fb3d 	bl	801613c <lv_bar_create>
		lv_obj_set_size(bar_l[x], 4, 21);
 800bac2:	2215      	movs	r2, #21
		bar_l[x] = lv_bar_create(Tela_Reading_MPX, NULL);
 800bac4:	6060      	str	r0, [r4, #4]
		lv_obj_set_size(bar_l[x], 4, 21);
 800bac6:	2104      	movs	r1, #4
 800bac8:	f004 fb02 	bl	80100d0 <lv_obj_set_size>
		lv_bar_set_style(bar_l[x], LV_BAR_STYLE_BG, &style_indic_bar);
 800bacc:	6860      	ldr	r0, [r4, #4]
 800bace:	4632      	mov	r2, r6
 800bad0:	2100      	movs	r1, #0
 800bad2:	f00a fb1d 	bl	8016110 <lv_bar_set_style>
		lv_bar_set_style(bar_l[x], LV_BAR_STYLE_INDIC, &style_indic_bar);
 800bad6:	6860      	ldr	r0, [r4, #4]
 800bad8:	4632      	mov	r2, r6
 800bada:	2101      	movs	r1, #1
 800badc:	f00a fb18 	bl	8016110 <lv_bar_set_style>
		lv_obj_align(bar_l[x], NULL, LV_ALIGN_IN_TOP_LEFT, l_pos_x[x], 103);
 800bae0:	2267      	movs	r2, #103	; 0x67
 800bae2:	4b10      	ldr	r3, [pc, #64]	; (800bb24 <create_vumeter_l+0xdc>)
 800bae4:	9200      	str	r2, [sp, #0]
 800bae6:	f933 3025 	ldrsh.w	r3, [r3, r5, lsl #2]
 800baea:	6860      	ldr	r0, [r4, #4]
 800baec:	2201      	movs	r2, #1
 800baee:	2100      	movs	r1, #0
 800baf0:	f003 ff4e 	bl	800f990 <lv_obj_align>
 800baf4:	3501      	adds	r5, #1
		lv_bar_set_value(bar_l[x], 100, 0);
 800baf6:	2200      	movs	r2, #0
 800baf8:	2164      	movs	r1, #100	; 0x64
 800bafa:	f854 0f04 	ldr.w	r0, [r4, #4]!
 800bafe:	f00a faab 	bl	8016058 <lv_bar_set_value>
	for(uint8_t x = 0; x < 24; x++) {
 800bb02:	2d18      	cmp	r5, #24
 800bb04:	d1d9      	bne.n	800baba <create_vumeter_l+0x72>
}
 800bb06:	b003      	add	sp, #12
 800bb08:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bb0a:	bf00      	nop
 800bb0c:	20005600 	.word	0x20005600
 800bb10:	2000c5b8 	.word	0x2000c5b8
 800bb14:	2000563c 	.word	0x2000563c
 800bb18:	200054d4 	.word	0x200054d4
 800bb1c:	0801d8c8 	.word	0x0801d8c8
 800bb20:	200054d4 	.word	0x200054d4
 800bb24:	0802ca58 	.word	0x0802ca58

0800bb28 <btn_next_audio>:
{
 800bb28:	b538      	push	{r3, r4, r5, lr}
	imgbtn_next = lv_imgbtn_create(Tela_Reading_MPX, NULL);
 800bb2a:	4b15      	ldr	r3, [pc, #84]	; (800bb80 <btn_next_audio+0x58>)
	lv_imgbtn_set_src(imgbtn_next, LV_BTN_STATE_REL, &Btn_next);
 800bb2c:	4d15      	ldr	r5, [pc, #84]	; (800bb84 <btn_next_audio+0x5c>)
	imgbtn_next = lv_imgbtn_create(Tela_Reading_MPX, NULL);
 800bb2e:	6818      	ldr	r0, [r3, #0]
 800bb30:	4c15      	ldr	r4, [pc, #84]	; (800bb88 <btn_next_audio+0x60>)
 800bb32:	2100      	movs	r1, #0
 800bb34:	f00c fb70 	bl	8018218 <lv_imgbtn_create>
	lv_imgbtn_set_src(imgbtn_next, LV_BTN_STATE_REL, &Btn_next);
 800bb38:	462a      	mov	r2, r5
 800bb3a:	2100      	movs	r1, #0
	imgbtn_next = lv_imgbtn_create(Tela_Reading_MPX, NULL);
 800bb3c:	6020      	str	r0, [r4, #0]
	lv_imgbtn_set_src(imgbtn_next, LV_BTN_STATE_REL, &Btn_next);
 800bb3e:	f00c fbb3 	bl	80182a8 <lv_imgbtn_set_src>
	lv_imgbtn_set_src(imgbtn_next, LV_BTN_STATE_TGL_REL, &Btn_next);
 800bb42:	462a      	mov	r2, r5
 800bb44:	6820      	ldr	r0, [r4, #0]
 800bb46:	2102      	movs	r1, #2
 800bb48:	f00c fbae 	bl	80182a8 <lv_imgbtn_set_src>
	lv_imgbtn_set_src(imgbtn_next, LV_BTN_STATE_TGL_PR, &Btn_next);
 800bb4c:	462a      	mov	r2, r5
 800bb4e:	6820      	ldr	r0, [r4, #0]
 800bb50:	2103      	movs	r1, #3
 800bb52:	f00c fba9 	bl	80182a8 <lv_imgbtn_set_src>
	lv_imgbtn_set_src(imgbtn_next, LV_BTN_STATE_PR, &Btn_next);
 800bb56:	462a      	mov	r2, r5
 800bb58:	6820      	ldr	r0, [r4, #0]
 800bb5a:	2101      	movs	r1, #1
 800bb5c:	f00c fba4 	bl	80182a8 <lv_imgbtn_set_src>
	lv_imgbtn_set_src(imgbtn_next, LV_BTN_STATE_INA, &Btn_next);
 800bb60:	462a      	mov	r2, r5
 800bb62:	6820      	ldr	r0, [r4, #0]
 800bb64:	2104      	movs	r1, #4
 800bb66:	f00c fb9f 	bl	80182a8 <lv_imgbtn_set_src>
	lv_obj_set_event_cb(imgbtn_next, btn_event_next_audio);
 800bb6a:	6820      	ldr	r0, [r4, #0]
 800bb6c:	4907      	ldr	r1, [pc, #28]	; (800bb8c <btn_next_audio+0x64>)
 800bb6e:	f003 fd70 	bl	800f652 <lv_obj_set_event_cb>
	lv_obj_set_pos(imgbtn_next, 112, 18);
 800bb72:	6820      	ldr	r0, [r4, #0]
 800bb74:	2212      	movs	r2, #18
 800bb76:	2170      	movs	r1, #112	; 0x70
}
 800bb78:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	lv_obj_set_pos(imgbtn_next, 112, 18);
 800bb7c:	f003 beb3 	b.w	800f8e6 <lv_obj_set_pos>
 800bb80:	200054d4 	.word	0x200054d4
 800bb84:	20001b20 	.word	0x20001b20
 800bb88:	200055fc 	.word	0x200055fc
 800bb8c:	0800b86d 	.word	0x0800b86d

0800bb90 <screen_reading_mpx>:
	Tela_Reading_MPX = lv_obj_create(NULL, NULL);
 800bb90:	2100      	movs	r1, #0
{
 800bb92:	b538      	push	{r3, r4, r5, lr}
	Tela_Reading_MPX = lv_obj_create(NULL, NULL);
 800bb94:	4608      	mov	r0, r1
 800bb96:	f004 f91d 	bl	800fdd4 <lv_obj_create>
 800bb9a:	4d12      	ldr	r5, [pc, #72]	; (800bbe4 <screen_reading_mpx+0x54>)
	img_fundo = lv_img_create(Tela_Reading_MPX, NULL);
 800bb9c:	4c12      	ldr	r4, [pc, #72]	; (800bbe8 <screen_reading_mpx+0x58>)
	Tela_Reading_MPX = lv_obj_create(NULL, NULL);
 800bb9e:	6028      	str	r0, [r5, #0]
	img_fundo = lv_img_create(Tela_Reading_MPX, NULL);
 800bba0:	2100      	movs	r1, #0
 800bba2:	f00c fa0f 	bl	8017fc4 <lv_img_create>
    lv_img_set_src(img_fundo, &tela_reading_audio);
 800bba6:	4911      	ldr	r1, [pc, #68]	; (800bbec <screen_reading_mpx+0x5c>)
	img_fundo = lv_img_create(Tela_Reading_MPX, NULL);
 800bba8:	6020      	str	r0, [r4, #0]
    lv_img_set_src(img_fundo, &tela_reading_audio);
 800bbaa:	f00c f97b 	bl	8017ea4 <lv_img_set_src>
    lv_obj_set_protect(img_fundo, LV_PROTECT_POS);
 800bbae:	2104      	movs	r1, #4
 800bbb0:	6820      	ldr	r0, [r4, #0]
 800bbb2:	f003 fd41 	bl	800f638 <lv_obj_set_protect>
	lv_obj_set_event_cb(img_fundo, btn_event_esc_audio);
 800bbb6:	490e      	ldr	r1, [pc, #56]	; (800bbf0 <screen_reading_mpx+0x60>)
 800bbb8:	6820      	ldr	r0, [r4, #0]
 800bbba:	f003 fd4a 	bl	800f652 <lv_obj_set_event_cb>
	lv_obj_set_click(img_fundo, 1);
 800bbbe:	2101      	movs	r1, #1
 800bbc0:	6820      	ldr	r0, [r4, #0]
 800bbc2:	f003 fd1d 	bl	800f600 <lv_obj_set_click>
	create_vumeter_m();
 800bbc6:	f7ff fe5f 	bl	800b888 <create_vumeter_m>
	create_vumeter_r();
 800bbca:	f7ff fecd 	bl	800b968 <create_vumeter_r>
	create_vumeter_l();
 800bbce:	f7ff ff3b 	bl	800ba48 <create_vumeter_l>
	btn_next_audio();
 800bbd2:	f7ff ffa9 	bl	800bb28 <btn_next_audio>
 800bbd6:	6828      	ldr	r0, [r5, #0]
 800bbd8:	f003 fae8 	bl	800f1ac <lv_disp_load_scr>
	TelaAtiva = TelaMpx;
 800bbdc:	4b05      	ldr	r3, [pc, #20]	; (800bbf4 <screen_reading_mpx+0x64>)
 800bbde:	220a      	movs	r2, #10
 800bbe0:	601a      	str	r2, [r3, #0]
 800bbe2:	bd38      	pop	{r3, r4, r5, pc}
 800bbe4:	200054d4 	.word	0x200054d4
 800bbe8:	200055f8 	.word	0x200055f8
 800bbec:	20001c1c 	.word	0x20001c1c
 800bbf0:	0800b851 	.word	0x0800b851
 800bbf4:	20003444 	.word	0x20003444

0800bbf8 <ButtonEventTelaMpx>:

void ButtonEventTelaMpx(uint8_t event, uint8_t tipo, uint8_t id)
{
	if(event == EVT_PBTN_INPUT) {
 800bbf8:	2810      	cmp	r0, #16
 800bbfa:	d10e      	bne.n	800bc1a <ButtonEventTelaMpx+0x22>
		if(tipo == PBTN_SCLK) {	// Single Click
 800bbfc:	2901      	cmp	r1, #1
 800bbfe:	d10c      	bne.n	800bc1a <ButtonEventTelaMpx+0x22>
			switch(id) {
 800bc00:	b112      	cbz	r2, 800bc08 <ButtonEventTelaMpx+0x10>
 800bc02:	2a01      	cmp	r2, #1
 800bc04:	d005      	beq.n	800bc12 <ButtonEventTelaMpx+0x1a>
 800bc06:	4770      	bx	lr
				case KEY_DN:
					lv_event_send(img_fundo, LV_EVENT_APPLY, NULL);
 800bc08:	4b04      	ldr	r3, [pc, #16]	; (800bc1c <ButtonEventTelaMpx+0x24>)
 800bc0a:	2111      	movs	r1, #17
					break;
				case KEY_UP:
					lv_event_send(imgbtn_next, LV_EVENT_APPLY, NULL);
 800bc0c:	6818      	ldr	r0, [r3, #0]
 800bc0e:	f003 bd67 	b.w	800f6e0 <lv_event_send>
 800bc12:	2200      	movs	r2, #0
 800bc14:	2111      	movs	r1, #17
 800bc16:	4b02      	ldr	r3, [pc, #8]	; (800bc20 <ButtonEventTelaMpx+0x28>)
 800bc18:	e7f8      	b.n	800bc0c <ButtonEventTelaMpx+0x14>
 800bc1a:	4770      	bx	lr
 800bc1c:	200055f8 	.word	0x200055f8
 800bc20:	200055fc 	.word	0x200055fc

0800bc24 <btn_event_next_efic>:
	lv_obj_set_pos(imgbtn_next, 112, 18);
}

static void btn_event_next_efic(lv_obj_t * btn, lv_event_t event)
{
	if(event == LV_EVENT_APPLY) {
 800bc24:	2911      	cmp	r1, #17
{
 800bc26:	b508      	push	{r3, lr}
	if(event == LV_EVENT_APPLY) {
 800bc28:	d10b      	bne.n	800bc42 <btn_event_next_efic+0x1e>
		//printf("Button Next Released SCREEN_READING_STATUS\n");
		lv_task_del(Task_Reading_EFIC);
 800bc2a:	4b06      	ldr	r3, [pc, #24]	; (800bc44 <btn_event_next_efic+0x20>)
 800bc2c:	6818      	ldr	r0, [r3, #0]
 800bc2e:	f009 fe7f 	bl	8015930 <lv_task_del>
		lv_obj_del(Tela_Reading_EFIC);
 800bc32:	4b05      	ldr	r3, [pc, #20]	; (800bc48 <btn_event_next_efic+0x24>)
 800bc34:	6818      	ldr	r0, [r3, #0]
 800bc36:	f004 fabe 	bl	80101b6 <lv_obj_del>
		screen_reading_status();
	}
}
 800bc3a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		screen_reading_status();
 800bc3e:	f000 bb73 	b.w	800c328 <screen_reading_status>
 800bc42:	bd08      	pop	{r3, pc}
 800bc44:	20005678 	.word	0x20005678
 800bc48:	2000567c 	.word	0x2000567c

0800bc4c <btn_event_prev_efic>:
	lv_obj_set_pos(imgbtn_prev, 32, 18);
}

static void btn_event_prev_efic(lv_obj_t * btn, lv_event_t event)
{
	if(event == LV_EVENT_APPLY) {
 800bc4c:	2911      	cmp	r1, #17
{
 800bc4e:	b508      	push	{r3, lr}
	if(event == LV_EVENT_APPLY) {
 800bc50:	d10b      	bne.n	800bc6a <btn_event_prev_efic+0x1e>
		//printf("Button ESC Released\n");
		lv_task_del(Task_Reading_EFIC);
 800bc52:	4b06      	ldr	r3, [pc, #24]	; (800bc6c <btn_event_prev_efic+0x20>)
 800bc54:	6818      	ldr	r0, [r3, #0]
 800bc56:	f009 fe6b 	bl	8015930 <lv_task_del>
		lv_obj_del(Tela_Reading_EFIC);
 800bc5a:	4b05      	ldr	r3, [pc, #20]	; (800bc70 <btn_event_prev_efic+0x24>)
 800bc5c:	6818      	ldr	r0, [r3, #0]
 800bc5e:	f004 faaa 	bl	80101b6 <lv_obj_del>
		screen_reading_vpa();
	}
}
 800bc62:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		screen_reading_vpa();
 800bc66:	f000 bffd 	b.w	800cc64 <screen_reading_vpa>
 800bc6a:	bd08      	pop	{r3, pc}
 800bc6c:	20005678 	.word	0x20005678
 800bc70:	2000567c 	.word	0x2000567c

0800bc74 <btn_next_efic>:
{
 800bc74:	b538      	push	{r3, r4, r5, lr}
	imgbtn_next = lv_imgbtn_create(Tela_Reading_EFIC, NULL);
 800bc76:	4b15      	ldr	r3, [pc, #84]	; (800bccc <btn_next_efic+0x58>)
	lv_imgbtn_set_src(imgbtn_next, LV_BTN_STATE_REL, &Btn_next);
 800bc78:	4d15      	ldr	r5, [pc, #84]	; (800bcd0 <btn_next_efic+0x5c>)
	imgbtn_next = lv_imgbtn_create(Tela_Reading_EFIC, NULL);
 800bc7a:	6818      	ldr	r0, [r3, #0]
 800bc7c:	4c15      	ldr	r4, [pc, #84]	; (800bcd4 <btn_next_efic+0x60>)
 800bc7e:	2100      	movs	r1, #0
 800bc80:	f00c faca 	bl	8018218 <lv_imgbtn_create>
	lv_imgbtn_set_src(imgbtn_next, LV_BTN_STATE_REL, &Btn_next);
 800bc84:	462a      	mov	r2, r5
 800bc86:	2100      	movs	r1, #0
	imgbtn_next = lv_imgbtn_create(Tela_Reading_EFIC, NULL);
 800bc88:	6020      	str	r0, [r4, #0]
	lv_imgbtn_set_src(imgbtn_next, LV_BTN_STATE_REL, &Btn_next);
 800bc8a:	f00c fb0d 	bl	80182a8 <lv_imgbtn_set_src>
	lv_imgbtn_set_src(imgbtn_next, LV_BTN_STATE_TGL_REL, &Btn_next);
 800bc8e:	462a      	mov	r2, r5
 800bc90:	6820      	ldr	r0, [r4, #0]
 800bc92:	2102      	movs	r1, #2
 800bc94:	f00c fb08 	bl	80182a8 <lv_imgbtn_set_src>
	lv_imgbtn_set_src(imgbtn_next, LV_BTN_STATE_TGL_PR, &Btn_next);
 800bc98:	462a      	mov	r2, r5
 800bc9a:	6820      	ldr	r0, [r4, #0]
 800bc9c:	2103      	movs	r1, #3
 800bc9e:	f00c fb03 	bl	80182a8 <lv_imgbtn_set_src>
	lv_imgbtn_set_src(imgbtn_next, LV_BTN_STATE_PR, &Btn_next);
 800bca2:	462a      	mov	r2, r5
 800bca4:	6820      	ldr	r0, [r4, #0]
 800bca6:	2101      	movs	r1, #1
 800bca8:	f00c fafe 	bl	80182a8 <lv_imgbtn_set_src>
	lv_imgbtn_set_src(imgbtn_next, LV_BTN_STATE_INA, &Btn_next);
 800bcac:	462a      	mov	r2, r5
 800bcae:	6820      	ldr	r0, [r4, #0]
 800bcb0:	2104      	movs	r1, #4
 800bcb2:	f00c faf9 	bl	80182a8 <lv_imgbtn_set_src>
	lv_obj_set_event_cb(imgbtn_next, btn_event_next_efic);
 800bcb6:	6820      	ldr	r0, [r4, #0]
 800bcb8:	4907      	ldr	r1, [pc, #28]	; (800bcd8 <btn_next_efic+0x64>)
 800bcba:	f003 fcca 	bl	800f652 <lv_obj_set_event_cb>
	lv_obj_set_pos(imgbtn_next, 112, 18);
 800bcbe:	6820      	ldr	r0, [r4, #0]
 800bcc0:	2212      	movs	r2, #18
 800bcc2:	2170      	movs	r1, #112	; 0x70
}
 800bcc4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	lv_obj_set_pos(imgbtn_next, 112, 18);
 800bcc8:	f003 be0d 	b.w	800f8e6 <lv_obj_set_pos>
 800bccc:	2000567c 	.word	0x2000567c
 800bcd0:	20001b20 	.word	0x20001b20
 800bcd4:	200056c4 	.word	0x200056c4
 800bcd8:	0800bc25 	.word	0x0800bc25

0800bcdc <btn_prev_efic>:
{
 800bcdc:	b538      	push	{r3, r4, r5, lr}
	imgbtn_prev = lv_imgbtn_create(Tela_Reading_EFIC, NULL);
 800bcde:	4b15      	ldr	r3, [pc, #84]	; (800bd34 <btn_prev_efic+0x58>)
	lv_imgbtn_set_src(imgbtn_prev, LV_BTN_STATE_REL, &Btn_prev);
 800bce0:	4d15      	ldr	r5, [pc, #84]	; (800bd38 <btn_prev_efic+0x5c>)
	imgbtn_prev = lv_imgbtn_create(Tela_Reading_EFIC, NULL);
 800bce2:	6818      	ldr	r0, [r3, #0]
 800bce4:	4c15      	ldr	r4, [pc, #84]	; (800bd3c <btn_prev_efic+0x60>)
 800bce6:	2100      	movs	r1, #0
 800bce8:	f00c fa96 	bl	8018218 <lv_imgbtn_create>
	lv_imgbtn_set_src(imgbtn_prev, LV_BTN_STATE_REL, &Btn_prev);
 800bcec:	462a      	mov	r2, r5
 800bcee:	2100      	movs	r1, #0
	imgbtn_prev = lv_imgbtn_create(Tela_Reading_EFIC, NULL);
 800bcf0:	6020      	str	r0, [r4, #0]
	lv_imgbtn_set_src(imgbtn_prev, LV_BTN_STATE_REL, &Btn_prev);
 800bcf2:	f00c fad9 	bl	80182a8 <lv_imgbtn_set_src>
	lv_imgbtn_set_src(imgbtn_prev, LV_BTN_STATE_TGL_REL, &Btn_prev);
 800bcf6:	462a      	mov	r2, r5
 800bcf8:	6820      	ldr	r0, [r4, #0]
 800bcfa:	2102      	movs	r1, #2
 800bcfc:	f00c fad4 	bl	80182a8 <lv_imgbtn_set_src>
	lv_imgbtn_set_src(imgbtn_prev, LV_BTN_STATE_TGL_PR, &Btn_prev);
 800bd00:	462a      	mov	r2, r5
 800bd02:	6820      	ldr	r0, [r4, #0]
 800bd04:	2103      	movs	r1, #3
 800bd06:	f00c facf 	bl	80182a8 <lv_imgbtn_set_src>
	lv_imgbtn_set_src(imgbtn_prev, LV_BTN_STATE_PR, &Btn_prev);
 800bd0a:	462a      	mov	r2, r5
 800bd0c:	6820      	ldr	r0, [r4, #0]
 800bd0e:	2101      	movs	r1, #1
 800bd10:	f00c faca 	bl	80182a8 <lv_imgbtn_set_src>
	lv_imgbtn_set_src(imgbtn_prev, LV_BTN_STATE_INA, &Btn_prev);
 800bd14:	462a      	mov	r2, r5
 800bd16:	6820      	ldr	r0, [r4, #0]
 800bd18:	2104      	movs	r1, #4
 800bd1a:	f00c fac5 	bl	80182a8 <lv_imgbtn_set_src>
	lv_obj_set_event_cb(imgbtn_prev, btn_event_prev_efic);
 800bd1e:	6820      	ldr	r0, [r4, #0]
 800bd20:	4907      	ldr	r1, [pc, #28]	; (800bd40 <btn_prev_efic+0x64>)
 800bd22:	f003 fc96 	bl	800f652 <lv_obj_set_event_cb>
	lv_obj_set_pos(imgbtn_prev, 32, 18);
 800bd26:	6820      	ldr	r0, [r4, #0]
 800bd28:	2212      	movs	r2, #18
 800bd2a:	2120      	movs	r1, #32
}
 800bd2c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	lv_obj_set_pos(imgbtn_prev, 32, 18);
 800bd30:	f003 bdd9 	b.w	800f8e6 <lv_obj_set_pos>
 800bd34:	2000567c 	.word	0x2000567c
 800bd38:	20001ba4 	.word	0x20001ba4
 800bd3c:	200056c8 	.word	0x200056c8
 800bd40:	0800bc4d 	.word	0x0800bc4d

0800bd44 <create_vumeter_eficiencia>:

void create_vumeter_eficiencia(void)
{
 800bd44:	b573      	push	{r0, r1, r4, r5, r6, lr}
	// Area do Barguraph Frequency
	// Indicador OFF
	lv_style_copy(&style_indic_bar, &lv_style_pretty_color);
 800bd46:	4e36      	ldr	r6, [pc, #216]	; (800be20 <create_vumeter_eficiencia+0xdc>)
 800bd48:	4936      	ldr	r1, [pc, #216]	; (800be24 <create_vumeter_eficiencia+0xe0>)
	style_indic_bar.body.main_color = LV_COLOR_MAKE(105, 105, 105);
	style_indic_bar.body.border.color = LV_COLOR_MAKE(105, 105, 105);
	style_indic_bar.body.shadow.color = LV_COLOR_MAKE(105, 105, 105);


	lv_style_copy(&style_indic_bar_vd, &lv_style_pretty_color);
 800bd4a:	4c37      	ldr	r4, [pc, #220]	; (800be28 <create_vumeter_eficiencia+0xe4>)
	lv_style_copy(&style_indic_bar, &lv_style_pretty_color);
 800bd4c:	4630      	mov	r0, r6
 800bd4e:	f004 ff8b 	bl	8010c68 <lv_style_copy>
	style_indic_bar.body.grad_color = LV_COLOR_MAKE(105, 105, 105);
 800bd52:	4b36      	ldr	r3, [pc, #216]	; (800be2c <create_vumeter_eficiencia+0xe8>)
	lv_style_copy(&style_indic_bar_vd, &lv_style_pretty_color);
 800bd54:	4933      	ldr	r1, [pc, #204]	; (800be24 <create_vumeter_eficiencia+0xe0>)
	style_indic_bar.body.grad_color = LV_COLOR_MAKE(105, 105, 105);
 800bd56:	881b      	ldrh	r3, [r3, #0]
 800bd58:	80b3      	strh	r3, [r6, #4]
	style_indic_bar.body.radius = 0;
 800bd5a:	2500      	movs	r5, #0
	lv_style_copy(&style_indic_bar_vd, &lv_style_pretty_color);
 800bd5c:	4620      	mov	r0, r4
	style_indic_bar.body.main_color = LV_COLOR_MAKE(105, 105, 105);
 800bd5e:	8073      	strh	r3, [r6, #2]
	style_indic_bar.body.border.color = LV_COLOR_MAKE(105, 105, 105);
 800bd60:	8173      	strh	r3, [r6, #10]
	style_indic_bar.body.shadow.color = LV_COLOR_MAKE(105, 105, 105);
 800bd62:	8233      	strh	r3, [r6, #16]
	style_indic_bar.body.radius = 0;
 800bd64:	80f5      	strh	r5, [r6, #6]
	lv_style_copy(&style_indic_bar_vd, &lv_style_pretty_color);
 800bd66:	f004 ff7f 	bl	8010c68 <lv_style_copy>
	style_indic_bar_vd.body.radius = 0;
	style_indic_bar_vd.body.grad_color = LV_COLOR_MAKE(0, 255, 0);
 800bd6a:	7923      	ldrb	r3, [r4, #4]
	style_indic_bar_vd.body.radius = 0;
 800bd6c:	80e5      	strh	r5, [r4, #6]
	style_indic_bar_vd.body.grad_color = LV_COLOR_MAKE(0, 255, 0);
 800bd6e:	f365 0304 	bfi	r3, r5, #0, #5
 800bd72:	7123      	strb	r3, [r4, #4]
 800bd74:	88a3      	ldrh	r3, [r4, #4]
 800bd76:	f443 63fc 	orr.w	r3, r3, #2016	; 0x7e0
 800bd7a:	80a3      	strh	r3, [r4, #4]
 800bd7c:	0a1b      	lsrs	r3, r3, #8
 800bd7e:	f365 03c7 	bfi	r3, r5, #3, #5
 800bd82:	7163      	strb	r3, [r4, #5]
	style_indic_bar_vd.body.main_color = LV_COLOR_MAKE(0, 255, 0);
 800bd84:	78a3      	ldrb	r3, [r4, #2]
 800bd86:	f365 0304 	bfi	r3, r5, #0, #5
 800bd8a:	70a3      	strb	r3, [r4, #2]
 800bd8c:	8863      	ldrh	r3, [r4, #2]
 800bd8e:	f443 63fc 	orr.w	r3, r3, #2016	; 0x7e0
 800bd92:	8063      	strh	r3, [r4, #2]
 800bd94:	0a1b      	lsrs	r3, r3, #8
 800bd96:	f365 03c7 	bfi	r3, r5, #3, #5
 800bd9a:	70e3      	strb	r3, [r4, #3]
	style_indic_bar_vd.body.border.color = LV_COLOR_MAKE(0, 255, 0);
 800bd9c:	7aa3      	ldrb	r3, [r4, #10]
 800bd9e:	f365 0304 	bfi	r3, r5, #0, #5
 800bda2:	72a3      	strb	r3, [r4, #10]
 800bda4:	8963      	ldrh	r3, [r4, #10]
 800bda6:	f443 63fc 	orr.w	r3, r3, #2016	; 0x7e0
 800bdaa:	8163      	strh	r3, [r4, #10]
 800bdac:	0a1b      	lsrs	r3, r3, #8
 800bdae:	f365 03c7 	bfi	r3, r5, #3, #5
 800bdb2:	72e3      	strb	r3, [r4, #11]
	style_indic_bar_vd.body.shadow.color = LV_COLOR_MAKE(0, 255, 0);
 800bdb4:	7c23      	ldrb	r3, [r4, #16]
 800bdb6:	f365 0304 	bfi	r3, r5, #0, #5
 800bdba:	7423      	strb	r3, [r4, #16]
 800bdbc:	8a23      	ldrh	r3, [r4, #16]
 800bdbe:	f443 63fc 	orr.w	r3, r3, #2016	; 0x7e0
 800bdc2:	8223      	strh	r3, [r4, #16]
 800bdc4:	0a1b      	lsrs	r3, r3, #8
 800bdc6:	f365 03c7 	bfi	r3, r5, #3, #5
 800bdca:	7463      	strb	r3, [r4, #17]
 800bdcc:	4c18      	ldr	r4, [pc, #96]	; (800be30 <create_vumeter_eficiencia+0xec>)

	// Create a default bar
	for(uint8_t x = 0; x < 16; x++) {
		bar_e[x] = lv_bar_create(Tela_Reading_EFIC, NULL);
 800bdce:	4b19      	ldr	r3, [pc, #100]	; (800be34 <create_vumeter_eficiencia+0xf0>)
 800bdd0:	2100      	movs	r1, #0
 800bdd2:	6818      	ldr	r0, [r3, #0]
 800bdd4:	f00a f9b2 	bl	801613c <lv_bar_create>
		lv_obj_set_size(bar_e[x], 5, 19);
 800bdd8:	2213      	movs	r2, #19
		bar_e[x] = lv_bar_create(Tela_Reading_EFIC, NULL);
 800bdda:	6060      	str	r0, [r4, #4]
		lv_obj_set_size(bar_e[x], 5, 19);
 800bddc:	2105      	movs	r1, #5
 800bdde:	f004 f977 	bl	80100d0 <lv_obj_set_size>
		lv_bar_set_style(bar_e[x], LV_BAR_STYLE_BG, &style_indic_bar);
 800bde2:	6860      	ldr	r0, [r4, #4]
 800bde4:	4632      	mov	r2, r6
 800bde6:	2100      	movs	r1, #0
 800bde8:	f00a f992 	bl	8016110 <lv_bar_set_style>
		lv_bar_set_style(bar_e[x], LV_BAR_STYLE_INDIC, &style_indic_bar);
 800bdec:	6860      	ldr	r0, [r4, #4]
 800bdee:	4632      	mov	r2, r6
 800bdf0:	2101      	movs	r1, #1
 800bdf2:	f00a f98d 	bl	8016110 <lv_bar_set_style>
		lv_obj_align(bar_e[x], NULL, LV_ALIGN_IN_TOP_LEFT, e_pos_x[x], 76);
 800bdf6:	224c      	movs	r2, #76	; 0x4c
 800bdf8:	4b0f      	ldr	r3, [pc, #60]	; (800be38 <create_vumeter_eficiencia+0xf4>)
 800bdfa:	9200      	str	r2, [sp, #0]
 800bdfc:	f933 3025 	ldrsh.w	r3, [r3, r5, lsl #2]
 800be00:	6860      	ldr	r0, [r4, #4]
 800be02:	2201      	movs	r2, #1
 800be04:	2100      	movs	r1, #0
 800be06:	f003 fdc3 	bl	800f990 <lv_obj_align>
 800be0a:	3501      	adds	r5, #1
		lv_bar_set_value(bar_e[x], 100, 1);
 800be0c:	2201      	movs	r2, #1
 800be0e:	2164      	movs	r1, #100	; 0x64
 800be10:	f854 0f04 	ldr.w	r0, [r4, #4]!
 800be14:	f00a f920 	bl	8016058 <lv_bar_set_value>
	for(uint8_t x = 0; x < 16; x++) {
 800be18:	2d10      	cmp	r5, #16
 800be1a:	d1d8      	bne.n	800bdce <create_vumeter_eficiencia+0x8a>
	}
}
 800be1c:	b002      	add	sp, #8
 800be1e:	bd70      	pop	{r4, r5, r6, pc}
 800be20:	200056cc 	.word	0x200056cc
 800be24:	2000c4c8 	.word	0x2000c4c8
 800be28:	20005708 	.word	0x20005708
 800be2c:	0801d8ca 	.word	0x0801d8ca
 800be30:	2000567c 	.word	0x2000567c
 800be34:	2000567c 	.word	0x2000567c
 800be38:	0802cb78 	.word	0x0802cb78

0800be3c <update_vumeter_eficiencia>:

void update_vumeter_eficiencia(void)
{
 800be3c:	b570      	push	{r4, r5, r6, lr}
	float f_ipa = 1.6f;

	float resul = (((f_fwd / (f_vpa * f_ipa)) * 100) / 5) - 1;

	for(x = 0; x <= resul; x++) {
		lv_bar_set_style(bar_e[x], LV_BAR_STYLE_BG, &style_indic_bar_vd);
 800be3e:	4d0a      	ldr	r5, [pc, #40]	; (800be68 <update_vumeter_eficiencia+0x2c>)
 800be40:	4e0a      	ldr	r6, [pc, #40]	; (800be6c <update_vumeter_eficiencia+0x30>)
	for(x = 0; x <= resul; x++) {
 800be42:	2400      	movs	r4, #0
 800be44:	2c0b      	cmp	r4, #11
 800be46:	d100      	bne.n	800be4a <update_vumeter_eficiencia+0xe>
		lv_bar_set_style(bar_e[x], LV_BAR_STYLE_INDIC, &style_indic_bar_vd);
	}
}
 800be48:	bd70      	pop	{r4, r5, r6, pc}
		lv_bar_set_style(bar_e[x], LV_BAR_STYLE_BG, &style_indic_bar_vd);
 800be4a:	f855 0024 	ldr.w	r0, [r5, r4, lsl #2]
 800be4e:	4632      	mov	r2, r6
 800be50:	2100      	movs	r1, #0
 800be52:	f00a f95d 	bl	8016110 <lv_bar_set_style>
		lv_bar_set_style(bar_e[x], LV_BAR_STYLE_INDIC, &style_indic_bar_vd);
 800be56:	f855 0024 	ldr.w	r0, [r5, r4, lsl #2]
 800be5a:	4632      	mov	r2, r6
 800be5c:	2101      	movs	r1, #1
 800be5e:	f00a f957 	bl	8016110 <lv_bar_set_style>
	for(x = 0; x <= resul; x++) {
 800be62:	3401      	adds	r4, #1
 800be64:	e7ee      	b.n	800be44 <update_vumeter_eficiencia+0x8>
 800be66:	bf00      	nop
 800be68:	20005680 	.word	0x20005680
 800be6c:	20005708 	.word	0x20005708

0800be70 <update_screen_efic>:
	lv_obj_align(txt_efic, NULL, LV_ALIGN_IN_TOP_RIGHT, -70, 45); 	// Alinha ao centro
}


static void update_screen_efic(lv_task_t * param)
{
 800be70:	b510      	push	{r4, lr}
	float f_vpa = (3900 * (3.30 / 4095.0)) * 5;
	float f_ipa = (2000 * (3.30 / 4095.0)) * 0.98;

	float resul = (f_fwd / (f_vpa * f_ipa)) * 100;

	sprintf(buffer, "%0.1f", resul);
 800be72:	4c0b      	ldr	r4, [pc, #44]	; (800bea0 <update_screen_efic+0x30>)
 800be74:	490b      	ldr	r1, [pc, #44]	; (800bea4 <update_screen_efic+0x34>)
 800be76:	a308      	add	r3, pc, #32	; (adr r3, 800be98 <update_screen_efic+0x28>)
 800be78:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be7c:	4620      	mov	r0, r4
 800be7e:	f00e ffcb 	bl	801ae18 <sprintf>
	lv_label_set_text(txt_efic, buffer);
 800be82:	4b09      	ldr	r3, [pc, #36]	; (800bea8 <update_screen_efic+0x38>)
 800be84:	4621      	mov	r1, r4
 800be86:	6818      	ldr	r0, [r3, #0]
 800be88:	f00c fec0 	bl	8018c0c <lv_label_set_text>
	update_vumeter_eficiencia();

}
 800be8c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	update_vumeter_eficiencia();
 800be90:	f7ff bfd4 	b.w	800be3c <update_vumeter_eficiencia>
 800be94:	f3af 8000 	nop.w
 800be98:	80000000 	.word	0x80000000
 800be9c:	404e3789 	.word	0x404e3789
 800bea0:	20004d48 	.word	0x20004d48
 800bea4:	0802cbb8 	.word	0x0802cbb8
 800bea8:	20005780 	.word	0x20005780
 800beac:	00000000 	.word	0x00000000

0800beb0 <print_eficiencia>:
{
 800beb0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	sprintf(buffer, "%0.1f", resul);
 800beb2:	4f27      	ldr	r7, [pc, #156]	; (800bf50 <print_eficiencia+0xa0>)
	lv_style_copy(&style_txt1, &lv_style_plain);
 800beb4:	4c27      	ldr	r4, [pc, #156]	; (800bf54 <print_eficiencia+0xa4>)
	sprintf(buffer, "%0.1f", resul);
 800beb6:	4928      	ldr	r1, [pc, #160]	; (800bf58 <print_eficiencia+0xa8>)
	txt_efic = lv_label_create(Tela_Reading_EFIC, NULL);
 800beb8:	4d28      	ldr	r5, [pc, #160]	; (800bf5c <print_eficiencia+0xac>)
	sprintf(buffer, "%0.1f", resul);
 800beba:	a323      	add	r3, pc, #140	; (adr r3, 800bf48 <print_eficiencia+0x98>)
 800bebc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bec0:	4638      	mov	r0, r7
 800bec2:	f00e ffa9 	bl	801ae18 <sprintf>
	lv_style_copy(&style_txt1, &lv_style_plain);
 800bec6:	4620      	mov	r0, r4
 800bec8:	4925      	ldr	r1, [pc, #148]	; (800bf60 <print_eficiencia+0xb0>)
 800beca:	f004 fecd 	bl	8010c68 <lv_style_copy>
	style_txt1.text.font = &lv_font_eurostile_28;
 800bece:	4b25      	ldr	r3, [pc, #148]	; (800bf64 <print_eficiencia+0xb4>)
 800bed0:	6263      	str	r3, [r4, #36]	; 0x24
	style_txt1.text.color = LV_COLOR_CYAN;
 800bed2:	f894 3020 	ldrb.w	r3, [r4, #32]
 800bed6:	f043 031f 	orr.w	r3, r3, #31
 800beda:	f884 3020 	strb.w	r3, [r4, #32]
 800bede:	8c23      	ldrh	r3, [r4, #32]
 800bee0:	f443 63fc 	orr.w	r3, r3, #2016	; 0x7e0
 800bee4:	8423      	strh	r3, [r4, #32]
 800bee6:	0a1b      	lsrs	r3, r3, #8
 800bee8:	f36f 03c7 	bfc	r3, #3, #5
 800beec:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
	txt_efic = lv_label_create(Tela_Reading_EFIC, NULL);
 800bef0:	4b1d      	ldr	r3, [pc, #116]	; (800bf68 <print_eficiencia+0xb8>)
	style_txt1.text.letter_space = 1;
 800bef2:	2601      	movs	r6, #1
	txt_efic = lv_label_create(Tela_Reading_EFIC, NULL);
 800bef4:	6818      	ldr	r0, [r3, #0]
	style_txt1.text.letter_space = 1;
 800bef6:	8526      	strh	r6, [r4, #40]	; 0x28
	txt_efic = lv_label_create(Tela_Reading_EFIC, NULL);
 800bef8:	2100      	movs	r1, #0
	style_txt1.text.line_space = 1;
 800befa:	8566      	strh	r6, [r4, #42]	; 0x2a
	txt_efic = lv_label_create(Tela_Reading_EFIC, NULL);
 800befc:	f00c ff30 	bl	8018d60 <lv_label_create>
	lv_obj_set_style(txt_efic, &style_txt1); 						// Configura o estilo criado
 800bf00:	4621      	mov	r1, r4
	txt_efic = lv_label_create(Tela_Reading_EFIC, NULL);
 800bf02:	6028      	str	r0, [r5, #0]
	lv_obj_set_style(txt_efic, &style_txt1); 						// Configura o estilo criado
 800bf04:	f004 f9e6 	bl	80102d4 <lv_obj_set_style>
	lv_label_set_long_mode(txt_efic, LV_LABEL_LONG_EXPAND); 		// Quebra as linhas longas
 800bf08:	6828      	ldr	r0, [r5, #0]
 800bf0a:	2100      	movs	r1, #0
 800bf0c:	f00c fed2 	bl	8018cb4 <lv_label_set_long_mode>
	lv_label_set_recolor(txt_efic, true); 							// Ativa recolorizar por comandos no texto
 800bf10:	4631      	mov	r1, r6
 800bf12:	6828      	ldr	r0, [r5, #0]
 800bf14:	f00c ff10 	bl	8018d38 <lv_label_set_recolor>
	lv_label_set_align(txt_efic, LV_ALIGN_IN_TOP_RIGHT); 			// Centraliza linhas alinhadas
 800bf18:	6828      	ldr	r0, [r5, #0]
 800bf1a:	2103      	movs	r1, #3
 800bf1c:	f00c fb69 	bl	80185f2 <lv_label_set_align>
	lv_label_set_text(txt_efic, buffer);
 800bf20:	4639      	mov	r1, r7
 800bf22:	6828      	ldr	r0, [r5, #0]
 800bf24:	f00c fe72 	bl	8018c0c <lv_label_set_text>
	lv_obj_set_width(txt_efic, 300); 								// Configuura o comprimento
 800bf28:	6828      	ldr	r0, [r5, #0]
 800bf2a:	f44f 7196 	mov.w	r1, #300	; 0x12c
 800bf2e:	f004 f919 	bl	8010164 <lv_obj_set_width>
	lv_obj_align(txt_efic, NULL, LV_ALIGN_IN_TOP_RIGHT, -70, 45); 	// Alinha ao centro
 800bf32:	232d      	movs	r3, #45	; 0x2d
 800bf34:	9300      	str	r3, [sp, #0]
 800bf36:	2203      	movs	r2, #3
 800bf38:	f06f 0345 	mvn.w	r3, #69	; 0x45
 800bf3c:	2100      	movs	r1, #0
 800bf3e:	6828      	ldr	r0, [r5, #0]
 800bf40:	f003 fd26 	bl	800f990 <lv_obj_align>
}
 800bf44:	b003      	add	sp, #12
 800bf46:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bf48:	80000000 	.word	0x80000000
 800bf4c:	404e3789 	.word	0x404e3789
 800bf50:	20004d48 	.word	0x20004d48
 800bf54:	20005744 	.word	0x20005744
 800bf58:	0802cbb8 	.word	0x0802cbb8
 800bf5c:	20005780 	.word	0x20005780
 800bf60:	2000c6a8 	.word	0x2000c6a8
 800bf64:	20001958 	.word	0x20001958
 800bf68:	2000567c 	.word	0x2000567c

0800bf6c <screen_reading_efic>:
	Tela_Reading_EFIC = lv_obj_create(NULL, NULL);
 800bf6c:	2100      	movs	r1, #0
{
 800bf6e:	b538      	push	{r3, r4, r5, lr}
	Tela_Reading_EFIC = lv_obj_create(NULL, NULL);
 800bf70:	4608      	mov	r0, r1
 800bf72:	f003 ff2f 	bl	800fdd4 <lv_obj_create>
 800bf76:	4c14      	ldr	r4, [pc, #80]	; (800bfc8 <screen_reading_efic+0x5c>)
	img_fundo = lv_img_create(Tela_Reading_EFIC, NULL);
 800bf78:	4d14      	ldr	r5, [pc, #80]	; (800bfcc <screen_reading_efic+0x60>)
	Tela_Reading_EFIC = lv_obj_create(NULL, NULL);
 800bf7a:	6020      	str	r0, [r4, #0]
	img_fundo = lv_img_create(Tela_Reading_EFIC, NULL);
 800bf7c:	2100      	movs	r1, #0
 800bf7e:	f00c f821 	bl	8017fc4 <lv_img_create>
	lv_img_set_src(img_fundo, &tela_reading_efic);
 800bf82:	4913      	ldr	r1, [pc, #76]	; (800bfd0 <screen_reading_efic+0x64>)
	img_fundo = lv_img_create(Tela_Reading_EFIC, NULL);
 800bf84:	6028      	str	r0, [r5, #0]
	lv_img_set_src(img_fundo, &tela_reading_efic);
 800bf86:	f00b ff8d 	bl	8017ea4 <lv_img_set_src>
	lv_obj_set_protect(img_fundo, LV_PROTECT_POS);
 800bf8a:	2104      	movs	r1, #4
 800bf8c:	6828      	ldr	r0, [r5, #0]
 800bf8e:	f003 fb53 	bl	800f638 <lv_obj_set_protect>
	btn_next_efic();
 800bf92:	f7ff fe6f 	bl	800bc74 <btn_next_efic>
	btn_prev_efic();
 800bf96:	f7ff fea1 	bl	800bcdc <btn_prev_efic>
	create_vumeter_eficiencia();
 800bf9a:	f7ff fed3 	bl	800bd44 <create_vumeter_eficiencia>
	print_eficiencia();
 800bf9e:	f7ff ff87 	bl	800beb0 <print_eficiencia>
	update_vumeter_eficiencia();
 800bfa2:	f7ff ff4b 	bl	800be3c <update_vumeter_eficiencia>
 800bfa6:	6820      	ldr	r0, [r4, #0]
 800bfa8:	f003 f900 	bl	800f1ac <lv_disp_load_scr>
    Task_Reading_EFIC = lv_task_create(update_screen_efic, 500, LV_TASK_PRIO_MID, NULL);
 800bfac:	2300      	movs	r3, #0
 800bfae:	2203      	movs	r2, #3
 800bfb0:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 800bfb4:	4807      	ldr	r0, [pc, #28]	; (800bfd4 <screen_reading_efic+0x68>)
 800bfb6:	f009 fdab 	bl	8015b10 <lv_task_create>
 800bfba:	4b07      	ldr	r3, [pc, #28]	; (800bfd8 <screen_reading_efic+0x6c>)
 800bfbc:	6018      	str	r0, [r3, #0]
    TelaAtiva = TelaReading_Efic;
 800bfbe:	4b07      	ldr	r3, [pc, #28]	; (800bfdc <screen_reading_efic+0x70>)
 800bfc0:	220d      	movs	r2, #13
 800bfc2:	601a      	str	r2, [r3, #0]
 800bfc4:	bd38      	pop	{r3, r4, r5, pc}
 800bfc6:	bf00      	nop
 800bfc8:	2000567c 	.word	0x2000567c
 800bfcc:	200056c0 	.word	0x200056c0
 800bfd0:	20001c28 	.word	0x20001c28
 800bfd4:	0800be71 	.word	0x0800be71
 800bfd8:	20005678 	.word	0x20005678
 800bfdc:	20003444 	.word	0x20003444

0800bfe0 <ButtonEventTelaReading_Efic>:

void ButtonEventTelaReading_Efic(uint8_t event, uint8_t tipo, uint8_t id)
{
	if(event == EVT_PBTN_INPUT) {
 800bfe0:	2810      	cmp	r0, #16
 800bfe2:	d10e      	bne.n	800c002 <ButtonEventTelaReading_Efic+0x22>
		if(tipo == PBTN_SCLK) {	// Single Click
 800bfe4:	2901      	cmp	r1, #1
 800bfe6:	d10c      	bne.n	800c002 <ButtonEventTelaReading_Efic+0x22>
			switch(id) {
 800bfe8:	b112      	cbz	r2, 800bff0 <ButtonEventTelaReading_Efic+0x10>
 800bfea:	2a01      	cmp	r2, #1
 800bfec:	d005      	beq.n	800bffa <ButtonEventTelaReading_Efic+0x1a>
 800bfee:	4770      	bx	lr
				case KEY_DN:
					lv_event_send(imgbtn_prev, LV_EVENT_APPLY, NULL);
 800bff0:	4b04      	ldr	r3, [pc, #16]	; (800c004 <ButtonEventTelaReading_Efic+0x24>)
 800bff2:	2111      	movs	r1, #17
					break;
				case KEY_UP:
					lv_event_send(imgbtn_next, LV_EVENT_APPLY, NULL);
 800bff4:	6818      	ldr	r0, [r3, #0]
 800bff6:	f003 bb73 	b.w	800f6e0 <lv_event_send>
 800bffa:	2200      	movs	r2, #0
 800bffc:	2111      	movs	r1, #17
 800bffe:	4b02      	ldr	r3, [pc, #8]	; (800c008 <ButtonEventTelaReading_Efic+0x28>)
 800c000:	e7f8      	b.n	800bff4 <ButtonEventTelaReading_Efic+0x14>
 800c002:	4770      	bx	lr
 800c004:	200056c8 	.word	0x200056c8
 800c008:	200056c4 	.word	0x200056c4

0800c00c <update_screen_status>:
	lv_obj_set_width(txt_version, 300); 								// Configuura o comprimento
	lv_obj_align(txt_version, NULL, LV_ALIGN_IN_TOP_RIGHT, -8, 110); 	// Alinha ao centro
}

static void update_screen_status(lv_task_t * param)
{
 800c00c:	b508      	push	{r3, lr}
	// PLL LOCK
	if(pll_status)
 800c00e:	4b1a      	ldr	r3, [pc, #104]	; (800c078 <update_screen_status+0x6c>)
 800c010:	781b      	ldrb	r3, [r3, #0]
 800c012:	2b00      	cmp	r3, #0
 800c014:	d02d      	beq.n	800c072 <update_screen_status+0x66>
		sprintf(buffer, "OFF");
 800c016:	4919      	ldr	r1, [pc, #100]	; (800c07c <update_screen_status+0x70>)
	else
		sprintf(buffer, "ON");
 800c018:	4819      	ldr	r0, [pc, #100]	; (800c080 <update_screen_status+0x74>)
 800c01a:	f00e ff21 	bl	801ae60 <strcpy>

	lv_label_set_text(txt_pll, buffer);
 800c01e:	4b19      	ldr	r3, [pc, #100]	; (800c084 <update_screen_status+0x78>)
 800c020:	4917      	ldr	r1, [pc, #92]	; (800c080 <update_screen_status+0x74>)
 800c022:	6818      	ldr	r0, [r3, #0]
 800c024:	f00c fdf2 	bl	8018c0c <lv_label_set_text>

	// Temperatura
	sprintf(buffer, "%0.1f°C", temperatura);
 800c028:	4b17      	ldr	r3, [pc, #92]	; (800c088 <update_screen_status+0x7c>)
 800c02a:	6818      	ldr	r0, [r3, #0]
 800c02c:	f7f4 fa8c 	bl	8000548 <__aeabi_f2d>
 800c030:	4602      	mov	r2, r0
 800c032:	460b      	mov	r3, r1
 800c034:	4812      	ldr	r0, [pc, #72]	; (800c080 <update_screen_status+0x74>)
 800c036:	4915      	ldr	r1, [pc, #84]	; (800c08c <update_screen_status+0x80>)
 800c038:	f00e feee 	bl	801ae18 <sprintf>
	lv_label_set_text(txt_temp, buffer);
 800c03c:	4b14      	ldr	r3, [pc, #80]	; (800c090 <update_screen_status+0x84>)
 800c03e:	4910      	ldr	r1, [pc, #64]	; (800c080 <update_screen_status+0x74>)
 800c040:	6818      	ldr	r0, [r3, #0]
 800c042:	f00c fde3 	bl	8018c0c <lv_label_set_text>

	// VSWR
	if((float)reflected >= MAX_RFL)
 800c046:	4b13      	ldr	r3, [pc, #76]	; (800c094 <update_screen_status+0x88>)
		sprintf(buffer, "Falha");
	else
		sprintf(buffer, "OK");
 800c048:	480d      	ldr	r0, [pc, #52]	; (800c080 <update_screen_status+0x74>)
	if((float)reflected >= MAX_RFL)
 800c04a:	ed93 7a00 	vldr	s14, [r3]
 800c04e:	eef7 7a08 	vmov.f32	s15, #120	; 0x3fc00000  1.5
 800c052:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800c056:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
		sprintf(buffer, "Falha");
 800c05a:	bfac      	ite	ge
 800c05c:	490e      	ldrge	r1, [pc, #56]	; (800c098 <update_screen_status+0x8c>)
		sprintf(buffer, "OK");
 800c05e:	490f      	ldrlt	r1, [pc, #60]	; (800c09c <update_screen_status+0x90>)
 800c060:	f00e fefe 	bl	801ae60 <strcpy>

	lv_label_set_text(txt_vswr, buffer);
 800c064:	4b0e      	ldr	r3, [pc, #56]	; (800c0a0 <update_screen_status+0x94>)
 800c066:	4906      	ldr	r1, [pc, #24]	; (800c080 <update_screen_status+0x74>)
 800c068:	6818      	ldr	r0, [r3, #0]
}
 800c06a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	lv_label_set_text(txt_vswr, buffer);
 800c06e:	f00c bdcd 	b.w	8018c0c <lv_label_set_text>
		sprintf(buffer, "ON");
 800c072:	490c      	ldr	r1, [pc, #48]	; (800c0a4 <update_screen_status+0x98>)
 800c074:	e7d0      	b.n	800c018 <update_screen_status+0xc>
 800c076:	bf00      	nop
 800c078:	20000018 	.word	0x20000018
 800c07c:	0802cbc9 	.word	0x0802cbc9
 800c080:	20004d48 	.word	0x20004d48
 800c084:	200057d0 	.word	0x200057d0
 800c088:	20000020 	.word	0x20000020
 800c08c:	0802cbd0 	.word	0x0802cbd0
 800c090:	200057d4 	.word	0x200057d4
 800c094:	20004e3c 	.word	0x20004e3c
 800c098:	0802cbd9 	.word	0x0802cbd9
 800c09c:	0802c725 	.word	0x0802c725
 800c0a0:	200057d8 	.word	0x200057d8
 800c0a4:	0802cbcd 	.word	0x0802cbcd

0800c0a8 <btn_event_prev_status>:
	if(event == LV_EVENT_APPLY) {
 800c0a8:	2911      	cmp	r1, #17
{
 800c0aa:	b508      	push	{r3, lr}
	if(event == LV_EVENT_APPLY) {
 800c0ac:	d10b      	bne.n	800c0c6 <btn_event_prev_status+0x1e>
		lv_task_del(Task_Status);
 800c0ae:	4b06      	ldr	r3, [pc, #24]	; (800c0c8 <btn_event_prev_status+0x20>)
 800c0b0:	6818      	ldr	r0, [r3, #0]
 800c0b2:	f009 fc3d 	bl	8015930 <lv_task_del>
		lv_obj_del(Tela_Reading_STS);
 800c0b6:	4b05      	ldr	r3, [pc, #20]	; (800c0cc <btn_event_prev_status+0x24>)
 800c0b8:	6818      	ldr	r0, [r3, #0]
 800c0ba:	f004 f87c 	bl	80101b6 <lv_obj_del>
}
 800c0be:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		screen_reading_efic();
 800c0c2:	f7ff bf53 	b.w	800bf6c <screen_reading_efic>
 800c0c6:	bd08      	pop	{r3, pc}
 800c0c8:	20005784 	.word	0x20005784
 800c0cc:	20005788 	.word	0x20005788

0800c0d0 <btn_prev_status>:
{
 800c0d0:	b538      	push	{r3, r4, r5, lr}
	imgbtn2 = lv_imgbtn_create(Tela_Reading_STS, NULL);
 800c0d2:	4b15      	ldr	r3, [pc, #84]	; (800c128 <btn_prev_status+0x58>)
	lv_imgbtn_set_src(imgbtn2, LV_BTN_STATE_REL, &Btn_prev);
 800c0d4:	4d15      	ldr	r5, [pc, #84]	; (800c12c <btn_prev_status+0x5c>)
	imgbtn2 = lv_imgbtn_create(Tela_Reading_STS, NULL);
 800c0d6:	6818      	ldr	r0, [r3, #0]
 800c0d8:	4c15      	ldr	r4, [pc, #84]	; (800c130 <btn_prev_status+0x60>)
 800c0da:	2100      	movs	r1, #0
 800c0dc:	f00c f89c 	bl	8018218 <lv_imgbtn_create>
	lv_imgbtn_set_src(imgbtn2, LV_BTN_STATE_REL, &Btn_prev);
 800c0e0:	462a      	mov	r2, r5
 800c0e2:	2100      	movs	r1, #0
	imgbtn2 = lv_imgbtn_create(Tela_Reading_STS, NULL);
 800c0e4:	6020      	str	r0, [r4, #0]
	lv_imgbtn_set_src(imgbtn2, LV_BTN_STATE_REL, &Btn_prev);
 800c0e6:	f00c f8df 	bl	80182a8 <lv_imgbtn_set_src>
	lv_imgbtn_set_src(imgbtn2, LV_BTN_STATE_TGL_REL, &Btn_prev);
 800c0ea:	462a      	mov	r2, r5
 800c0ec:	6820      	ldr	r0, [r4, #0]
 800c0ee:	2102      	movs	r1, #2
 800c0f0:	f00c f8da 	bl	80182a8 <lv_imgbtn_set_src>
	lv_imgbtn_set_src(imgbtn2, LV_BTN_STATE_TGL_PR, &Btn_prev);
 800c0f4:	462a      	mov	r2, r5
 800c0f6:	6820      	ldr	r0, [r4, #0]
 800c0f8:	2103      	movs	r1, #3
 800c0fa:	f00c f8d5 	bl	80182a8 <lv_imgbtn_set_src>
	lv_imgbtn_set_src(imgbtn2, LV_BTN_STATE_PR, &Btn_prev);
 800c0fe:	462a      	mov	r2, r5
 800c100:	6820      	ldr	r0, [r4, #0]
 800c102:	2101      	movs	r1, #1
 800c104:	f00c f8d0 	bl	80182a8 <lv_imgbtn_set_src>
	lv_imgbtn_set_src(imgbtn2, LV_BTN_STATE_INA, &Btn_prev);
 800c108:	462a      	mov	r2, r5
 800c10a:	6820      	ldr	r0, [r4, #0]
 800c10c:	2104      	movs	r1, #4
 800c10e:	f00c f8cb 	bl	80182a8 <lv_imgbtn_set_src>
	lv_obj_set_event_cb(imgbtn2, btn_event_prev_status);
 800c112:	6820      	ldr	r0, [r4, #0]
 800c114:	4907      	ldr	r1, [pc, #28]	; (800c134 <btn_prev_status+0x64>)
 800c116:	f003 fa9c 	bl	800f652 <lv_obj_set_event_cb>
	lv_obj_set_pos(imgbtn2, 32, 18);
 800c11a:	6820      	ldr	r0, [r4, #0]
 800c11c:	2212      	movs	r2, #18
 800c11e:	2120      	movs	r1, #32
}
 800c120:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	lv_obj_set_pos(imgbtn2, 32, 18);
 800c124:	f003 bbdf 	b.w	800f8e6 <lv_obj_set_pos>
 800c128:	20005788 	.word	0x20005788
 800c12c:	20001ba4 	.word	0x20001ba4
 800c130:	20005790 	.word	0x20005790
 800c134:	0800c0a9 	.word	0x0800c0a9

0800c138 <print_reading_status>:
{
 800c138:	b537      	push	{r0, r1, r2, r4, r5, lr}
	lv_style_copy(&style_txt1, &lv_style_plain);
 800c13a:	4c69      	ldr	r4, [pc, #420]	; (800c2e0 <print_reading_status+0x1a8>)
 800c13c:	4969      	ldr	r1, [pc, #420]	; (800c2e4 <print_reading_status+0x1ac>)
 800c13e:	4620      	mov	r0, r4
 800c140:	f004 fd92 	bl	8010c68 <lv_style_copy>
	style_txt1.text.font = &lv_font_eurostile_10;
 800c144:	4b68      	ldr	r3, [pc, #416]	; (800c2e8 <print_reading_status+0x1b0>)
 800c146:	6263      	str	r3, [r4, #36]	; 0x24
	style_txt1.text.letter_space = 1;
 800c148:	2301      	movs	r3, #1
 800c14a:	8523      	strh	r3, [r4, #40]	; 0x28
	style_txt1.text.line_space = 1;
 800c14c:	8563      	strh	r3, [r4, #42]	; 0x2a
	style_txt1.text.color = LV_COLOR_WHITE;
 800c14e:	4b67      	ldr	r3, [pc, #412]	; (800c2ec <print_reading_status+0x1b4>)
 800c150:	881b      	ldrh	r3, [r3, #0]
 800c152:	8423      	strh	r3, [r4, #32]
	if(pll_status)
 800c154:	4b66      	ldr	r3, [pc, #408]	; (800c2f0 <print_reading_status+0x1b8>)
 800c156:	781b      	ldrb	r3, [r3, #0]
 800c158:	2b00      	cmp	r3, #0
 800c15a:	f000 80bf 	beq.w	800c2dc <print_reading_status+0x1a4>
		sprintf(buffer, "OFF");
 800c15e:	4965      	ldr	r1, [pc, #404]	; (800c2f4 <print_reading_status+0x1bc>)
	txt_pll = lv_label_create(Tela_Reading_STS, NULL);
 800c160:	4d65      	ldr	r5, [pc, #404]	; (800c2f8 <print_reading_status+0x1c0>)
		sprintf(buffer, "ON");
 800c162:	4866      	ldr	r0, [pc, #408]	; (800c2fc <print_reading_status+0x1c4>)
	txt_pll = lv_label_create(Tela_Reading_STS, NULL);
 800c164:	4c66      	ldr	r4, [pc, #408]	; (800c300 <print_reading_status+0x1c8>)
		sprintf(buffer, "ON");
 800c166:	f00e fe7b 	bl	801ae60 <strcpy>
	txt_pll = lv_label_create(Tela_Reading_STS, NULL);
 800c16a:	2100      	movs	r1, #0
 800c16c:	6828      	ldr	r0, [r5, #0]
 800c16e:	f00c fdf7 	bl	8018d60 <lv_label_create>
	lv_obj_set_style(txt_pll, &style_txt1); 						// Configura o estilo criado
 800c172:	495b      	ldr	r1, [pc, #364]	; (800c2e0 <print_reading_status+0x1a8>)
	txt_pll = lv_label_create(Tela_Reading_STS, NULL);
 800c174:	6020      	str	r0, [r4, #0]
	lv_obj_set_style(txt_pll, &style_txt1); 						// Configura o estilo criado
 800c176:	f004 f8ad 	bl	80102d4 <lv_obj_set_style>
	lv_label_set_long_mode(txt_pll, LV_LABEL_LONG_EXPAND); 			// Quebra as linhas longas
 800c17a:	6820      	ldr	r0, [r4, #0]
 800c17c:	2100      	movs	r1, #0
 800c17e:	f00c fd99 	bl	8018cb4 <lv_label_set_long_mode>
	lv_label_set_recolor(txt_pll, true); 							// Ativa recolorizar por comandos no texto
 800c182:	6820      	ldr	r0, [r4, #0]
 800c184:	2101      	movs	r1, #1
 800c186:	f00c fdd7 	bl	8018d38 <lv_label_set_recolor>
	lv_label_set_align(txt_pll, LV_ALIGN_IN_TOP_RIGHT); 			// Centraliza linhas alinhadas
 800c18a:	6820      	ldr	r0, [r4, #0]
 800c18c:	2103      	movs	r1, #3
 800c18e:	f00c fa30 	bl	80185f2 <lv_label_set_align>
	lv_label_set_text(txt_pll, buffer);
 800c192:	6820      	ldr	r0, [r4, #0]
 800c194:	4959      	ldr	r1, [pc, #356]	; (800c2fc <print_reading_status+0x1c4>)
 800c196:	f00c fd39 	bl	8018c0c <lv_label_set_text>
	lv_obj_set_width(txt_pll, 300); 								// Configuura o comprimento
 800c19a:	6820      	ldr	r0, [r4, #0]
 800c19c:	f44f 7196 	mov.w	r1, #300	; 0x12c
 800c1a0:	f003 ffe0 	bl	8010164 <lv_obj_set_width>
	lv_obj_align(txt_pll, NULL, LV_ALIGN_IN_TOP_RIGHT, -18, 40); 	// Alinha ao centro
 800c1a4:	2328      	movs	r3, #40	; 0x28
 800c1a6:	9300      	str	r3, [sp, #0]
 800c1a8:	2203      	movs	r2, #3
 800c1aa:	6820      	ldr	r0, [r4, #0]
	txt_temp = lv_label_create(Tela_Reading_STS, NULL);
 800c1ac:	4c55      	ldr	r4, [pc, #340]	; (800c304 <print_reading_status+0x1cc>)
	lv_obj_align(txt_pll, NULL, LV_ALIGN_IN_TOP_RIGHT, -18, 40); 	// Alinha ao centro
 800c1ae:	f06f 0311 	mvn.w	r3, #17
 800c1b2:	2100      	movs	r1, #0
 800c1b4:	f003 fbec 	bl	800f990 <lv_obj_align>
	sprintf(buffer, "%0.1f°C", temperatura);
 800c1b8:	4b53      	ldr	r3, [pc, #332]	; (800c308 <print_reading_status+0x1d0>)
 800c1ba:	6818      	ldr	r0, [r3, #0]
 800c1bc:	f7f4 f9c4 	bl	8000548 <__aeabi_f2d>
 800c1c0:	4602      	mov	r2, r0
 800c1c2:	460b      	mov	r3, r1
 800c1c4:	484d      	ldr	r0, [pc, #308]	; (800c2fc <print_reading_status+0x1c4>)
 800c1c6:	4951      	ldr	r1, [pc, #324]	; (800c30c <print_reading_status+0x1d4>)
 800c1c8:	f00e fe26 	bl	801ae18 <sprintf>
	txt_temp = lv_label_create(Tela_Reading_STS, NULL);
 800c1cc:	2100      	movs	r1, #0
 800c1ce:	6828      	ldr	r0, [r5, #0]
 800c1d0:	f00c fdc6 	bl	8018d60 <lv_label_create>
	lv_obj_set_style(txt_temp, &style_txt1); 						// Configura o estilo criado
 800c1d4:	4942      	ldr	r1, [pc, #264]	; (800c2e0 <print_reading_status+0x1a8>)
	txt_temp = lv_label_create(Tela_Reading_STS, NULL);
 800c1d6:	6020      	str	r0, [r4, #0]
	lv_obj_set_style(txt_temp, &style_txt1); 						// Configura o estilo criado
 800c1d8:	f004 f87c 	bl	80102d4 <lv_obj_set_style>
	lv_label_set_long_mode(txt_temp, LV_LABEL_LONG_EXPAND); 		// Quebra as linhas longas
 800c1dc:	6820      	ldr	r0, [r4, #0]
 800c1de:	2100      	movs	r1, #0
 800c1e0:	f00c fd68 	bl	8018cb4 <lv_label_set_long_mode>
	lv_label_set_recolor(txt_temp, true); 							// Ativa recolorizar por comandos no texto
 800c1e4:	6820      	ldr	r0, [r4, #0]
 800c1e6:	2101      	movs	r1, #1
 800c1e8:	f00c fda6 	bl	8018d38 <lv_label_set_recolor>
	lv_label_set_align(txt_temp, LV_ALIGN_IN_TOP_RIGHT); 			// Centraliza linhas alinhadas
 800c1ec:	6820      	ldr	r0, [r4, #0]
 800c1ee:	2103      	movs	r1, #3
 800c1f0:	f00c f9ff 	bl	80185f2 <lv_label_set_align>
	lv_label_set_text(txt_temp, buffer);
 800c1f4:	6820      	ldr	r0, [r4, #0]
 800c1f6:	4941      	ldr	r1, [pc, #260]	; (800c2fc <print_reading_status+0x1c4>)
 800c1f8:	f00c fd08 	bl	8018c0c <lv_label_set_text>
	lv_obj_set_width(txt_temp, 300); 								// Configuura o comprimento
 800c1fc:	6820      	ldr	r0, [r4, #0]
 800c1fe:	f44f 7196 	mov.w	r1, #300	; 0x12c
 800c202:	f003 ffaf 	bl	8010164 <lv_obj_set_width>
	lv_obj_align(txt_temp, NULL, LV_ALIGN_IN_TOP_RIGHT, -18, 64); 	// Alinha ao centro
 800c206:	2340      	movs	r3, #64	; 0x40
 800c208:	9300      	str	r3, [sp, #0]
 800c20a:	2203      	movs	r2, #3
 800c20c:	2100      	movs	r1, #0
 800c20e:	6820      	ldr	r0, [r4, #0]
	txt_vswr = lv_label_create(Tela_Reading_STS, NULL);
 800c210:	4c3f      	ldr	r4, [pc, #252]	; (800c310 <print_reading_status+0x1d8>)
	lv_obj_align(txt_temp, NULL, LV_ALIGN_IN_TOP_RIGHT, -18, 64); 	// Alinha ao centro
 800c212:	f06f 0311 	mvn.w	r3, #17
 800c216:	f003 fbbb 	bl	800f990 <lv_obj_align>
	if((float)reflected >= MAX_RFL)
 800c21a:	4b3e      	ldr	r3, [pc, #248]	; (800c314 <print_reading_status+0x1dc>)
		sprintf(buffer, "OK");
 800c21c:	4837      	ldr	r0, [pc, #220]	; (800c2fc <print_reading_status+0x1c4>)
	if((float)reflected >= MAX_RFL)
 800c21e:	ed93 7a00 	vldr	s14, [r3]
 800c222:	eef7 7a08 	vmov.f32	s15, #120	; 0x3fc00000  1.5
 800c226:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800c22a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
		sprintf(buffer, "Falha");
 800c22e:	bfac      	ite	ge
 800c230:	4939      	ldrge	r1, [pc, #228]	; (800c318 <print_reading_status+0x1e0>)
		sprintf(buffer, "OK");
 800c232:	493a      	ldrlt	r1, [pc, #232]	; (800c31c <print_reading_status+0x1e4>)
 800c234:	f00e fe14 	bl	801ae60 <strcpy>
	txt_vswr = lv_label_create(Tela_Reading_STS, NULL);
 800c238:	2100      	movs	r1, #0
 800c23a:	6828      	ldr	r0, [r5, #0]
 800c23c:	f00c fd90 	bl	8018d60 <lv_label_create>
	lv_obj_set_style(txt_vswr, &style_txt1); 						// Configura o estilo criado
 800c240:	4927      	ldr	r1, [pc, #156]	; (800c2e0 <print_reading_status+0x1a8>)
	txt_vswr = lv_label_create(Tela_Reading_STS, NULL);
 800c242:	6020      	str	r0, [r4, #0]
	lv_obj_set_style(txt_vswr, &style_txt1); 						// Configura o estilo criado
 800c244:	f004 f846 	bl	80102d4 <lv_obj_set_style>
	lv_label_set_long_mode(txt_vswr, LV_LABEL_LONG_EXPAND); 		// Quebra as linhas longas
 800c248:	6820      	ldr	r0, [r4, #0]
 800c24a:	2100      	movs	r1, #0
 800c24c:	f00c fd32 	bl	8018cb4 <lv_label_set_long_mode>
	lv_label_set_recolor(txt_vswr, true); 							// Ativa recolorizar por comandos no texto
 800c250:	6820      	ldr	r0, [r4, #0]
 800c252:	2101      	movs	r1, #1
 800c254:	f00c fd70 	bl	8018d38 <lv_label_set_recolor>
	lv_label_set_align(txt_vswr, LV_ALIGN_IN_TOP_RIGHT); 			// Centraliza linhas alinhadas
 800c258:	6820      	ldr	r0, [r4, #0]
 800c25a:	2103      	movs	r1, #3
 800c25c:	f00c f9c9 	bl	80185f2 <lv_label_set_align>
	lv_label_set_text(txt_vswr, buffer);
 800c260:	6820      	ldr	r0, [r4, #0]
 800c262:	4926      	ldr	r1, [pc, #152]	; (800c2fc <print_reading_status+0x1c4>)
 800c264:	f00c fcd2 	bl	8018c0c <lv_label_set_text>
	lv_obj_set_width(txt_vswr, 300); 								// Configuura o comprimento
 800c268:	6820      	ldr	r0, [r4, #0]
 800c26a:	f44f 7196 	mov.w	r1, #300	; 0x12c
 800c26e:	f003 ff79 	bl	8010164 <lv_obj_set_width>
	lv_obj_align(txt_vswr, NULL, LV_ALIGN_IN_TOP_RIGHT, -18, 87); 	// Alinha ao centro
 800c272:	2357      	movs	r3, #87	; 0x57
 800c274:	9300      	str	r3, [sp, #0]
 800c276:	2203      	movs	r2, #3
 800c278:	f06f 0311 	mvn.w	r3, #17
 800c27c:	6820      	ldr	r0, [r4, #0]
 800c27e:	2100      	movs	r1, #0
 800c280:	f003 fb86 	bl	800f990 <lv_obj_align>
	sprintf(buffer, "1.0.0/2019");
 800c284:	4926      	ldr	r1, [pc, #152]	; (800c320 <print_reading_status+0x1e8>)
 800c286:	481d      	ldr	r0, [pc, #116]	; (800c2fc <print_reading_status+0x1c4>)
 800c288:	f00e fdea 	bl	801ae60 <strcpy>
	lv_obj_t * txt_version = lv_label_create(Tela_Reading_STS, NULL);
 800c28c:	2100      	movs	r1, #0
 800c28e:	6828      	ldr	r0, [r5, #0]
 800c290:	f00c fd66 	bl	8018d60 <lv_label_create>
	lv_obj_set_style(txt_version, &style_txt1); 						// Configura o estilo criado
 800c294:	4912      	ldr	r1, [pc, #72]	; (800c2e0 <print_reading_status+0x1a8>)
	lv_obj_t * txt_version = lv_label_create(Tela_Reading_STS, NULL);
 800c296:	4604      	mov	r4, r0
	lv_obj_set_style(txt_version, &style_txt1); 						// Configura o estilo criado
 800c298:	f004 f81c 	bl	80102d4 <lv_obj_set_style>
	lv_label_set_long_mode(txt_version, LV_LABEL_LONG_EXPAND); 			// Quebra as linhas longas
 800c29c:	4620      	mov	r0, r4
 800c29e:	2100      	movs	r1, #0
 800c2a0:	f00c fd08 	bl	8018cb4 <lv_label_set_long_mode>
	lv_label_set_recolor(txt_version, true); 							// Ativa recolorizar por comandos no texto
 800c2a4:	4620      	mov	r0, r4
 800c2a6:	2101      	movs	r1, #1
 800c2a8:	f00c fd46 	bl	8018d38 <lv_label_set_recolor>
	lv_label_set_align(txt_version, LV_ALIGN_IN_TOP_RIGHT); 			// Centraliza linhas alinhadas
 800c2ac:	4620      	mov	r0, r4
 800c2ae:	2103      	movs	r1, #3
 800c2b0:	f00c f99f 	bl	80185f2 <lv_label_set_align>
	lv_label_set_text(txt_version, buffer);
 800c2b4:	4620      	mov	r0, r4
 800c2b6:	4911      	ldr	r1, [pc, #68]	; (800c2fc <print_reading_status+0x1c4>)
 800c2b8:	f00c fca8 	bl	8018c0c <lv_label_set_text>
	lv_obj_set_width(txt_version, 300); 								// Configuura o comprimento
 800c2bc:	4620      	mov	r0, r4
 800c2be:	f44f 7196 	mov.w	r1, #300	; 0x12c
 800c2c2:	f003 ff4f 	bl	8010164 <lv_obj_set_width>
	lv_obj_align(txt_version, NULL, LV_ALIGN_IN_TOP_RIGHT, -8, 110); 	// Alinha ao centro
 800c2c6:	236e      	movs	r3, #110	; 0x6e
 800c2c8:	9300      	str	r3, [sp, #0]
 800c2ca:	2203      	movs	r2, #3
 800c2cc:	f06f 0307 	mvn.w	r3, #7
 800c2d0:	2100      	movs	r1, #0
 800c2d2:	4620      	mov	r0, r4
 800c2d4:	f003 fb5c 	bl	800f990 <lv_obj_align>
}
 800c2d8:	b003      	add	sp, #12
 800c2da:	bd30      	pop	{r4, r5, pc}
		sprintf(buffer, "ON");
 800c2dc:	4911      	ldr	r1, [pc, #68]	; (800c324 <print_reading_status+0x1ec>)
 800c2de:	e73f      	b.n	800c160 <print_reading_status+0x28>
 800c2e0:	20005794 	.word	0x20005794
 800c2e4:	2000c6a8 	.word	0x2000c6a8
 800c2e8:	200006f8 	.word	0x200006f8
 800c2ec:	0801d8cc 	.word	0x0801d8cc
 800c2f0:	20000018 	.word	0x20000018
 800c2f4:	0802cbc9 	.word	0x0802cbc9
 800c2f8:	20005788 	.word	0x20005788
 800c2fc:	20004d48 	.word	0x20004d48
 800c300:	200057d0 	.word	0x200057d0
 800c304:	200057d4 	.word	0x200057d4
 800c308:	20000020 	.word	0x20000020
 800c30c:	0802cbd0 	.word	0x0802cbd0
 800c310:	200057d8 	.word	0x200057d8
 800c314:	20004e3c 	.word	0x20004e3c
 800c318:	0802cbd9 	.word	0x0802cbd9
 800c31c:	0802c725 	.word	0x0802c725
 800c320:	0802cbbe 	.word	0x0802cbbe
 800c324:	0802cbcd 	.word	0x0802cbcd

0800c328 <screen_reading_status>:
	Tela_Reading_STS = lv_obj_create(NULL, NULL);
 800c328:	2100      	movs	r1, #0
{
 800c32a:	b538      	push	{r3, r4, r5, lr}
	Tela_Reading_STS = lv_obj_create(NULL, NULL);
 800c32c:	4608      	mov	r0, r1
 800c32e:	f003 fd51 	bl	800fdd4 <lv_obj_create>
 800c332:	4c11      	ldr	r4, [pc, #68]	; (800c378 <screen_reading_status+0x50>)
	img_fundo = lv_img_create(Tela_Reading_STS, NULL);
 800c334:	4d11      	ldr	r5, [pc, #68]	; (800c37c <screen_reading_status+0x54>)
	Tela_Reading_STS = lv_obj_create(NULL, NULL);
 800c336:	6020      	str	r0, [r4, #0]
	img_fundo = lv_img_create(Tela_Reading_STS, NULL);
 800c338:	2100      	movs	r1, #0
 800c33a:	f00b fe43 	bl	8017fc4 <lv_img_create>
    lv_img_set_src(img_fundo, &tela_status);
 800c33e:	4910      	ldr	r1, [pc, #64]	; (800c380 <screen_reading_status+0x58>)
	img_fundo = lv_img_create(Tela_Reading_STS, NULL);
 800c340:	6028      	str	r0, [r5, #0]
    lv_img_set_src(img_fundo, &tela_status);
 800c342:	f00b fdaf 	bl	8017ea4 <lv_img_set_src>
    lv_obj_set_protect(img_fundo, LV_PROTECT_POS);
 800c346:	2104      	movs	r1, #4
 800c348:	6828      	ldr	r0, [r5, #0]
 800c34a:	f003 f975 	bl	800f638 <lv_obj_set_protect>
	btn_prev_status();
 800c34e:	f7ff febf 	bl	800c0d0 <btn_prev_status>
	print_reading_status();
 800c352:	f7ff fef1 	bl	800c138 <print_reading_status>
 800c356:	6820      	ldr	r0, [r4, #0]
 800c358:	f002 ff28 	bl	800f1ac <lv_disp_load_scr>
	Task_Status = lv_task_create(update_screen_status, 500, LV_TASK_PRIO_MID, NULL);
 800c35c:	2300      	movs	r3, #0
 800c35e:	2203      	movs	r2, #3
 800c360:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 800c364:	4807      	ldr	r0, [pc, #28]	; (800c384 <screen_reading_status+0x5c>)
 800c366:	f009 fbd3 	bl	8015b10 <lv_task_create>
 800c36a:	4b07      	ldr	r3, [pc, #28]	; (800c388 <screen_reading_status+0x60>)
 800c36c:	6018      	str	r0, [r3, #0]
	TelaAtiva = TelaReading_Status;
 800c36e:	4b07      	ldr	r3, [pc, #28]	; (800c38c <screen_reading_status+0x64>)
 800c370:	220e      	movs	r2, #14
 800c372:	601a      	str	r2, [r3, #0]
 800c374:	bd38      	pop	{r3, r4, r5, pc}
 800c376:	bf00      	nop
 800c378:	20005788 	.word	0x20005788
 800c37c:	2000578c 	.word	0x2000578c
 800c380:	20001c88 	.word	0x20001c88
 800c384:	0800c00d 	.word	0x0800c00d
 800c388:	20005784 	.word	0x20005784
 800c38c:	20003444 	.word	0x20003444

0800c390 <ButtonEventTelaReading_Status>:

void ButtonEventTelaReading_Status(uint8_t event, uint8_t tipo, uint8_t id)
{
	if(event == EVT_PBTN_INPUT) {
 800c390:	2810      	cmp	r0, #16
 800c392:	d107      	bne.n	800c3a4 <ButtonEventTelaReading_Status+0x14>
		if(tipo == PBTN_SCLK) {	// Single Click
 800c394:	2901      	cmp	r1, #1
 800c396:	d105      	bne.n	800c3a4 <ButtonEventTelaReading_Status+0x14>
			switch(id) {
 800c398:	b922      	cbnz	r2, 800c3a4 <ButtonEventTelaReading_Status+0x14>
				case KEY_DN:
					lv_event_send(imgbtn2, LV_EVENT_APPLY, NULL);
 800c39a:	4b03      	ldr	r3, [pc, #12]	; (800c3a8 <ButtonEventTelaReading_Status+0x18>)
 800c39c:	2111      	movs	r1, #17
 800c39e:	6818      	ldr	r0, [r3, #0]
 800c3a0:	f003 b99e 	b.w	800f6e0 <lv_event_send>
 800c3a4:	4770      	bx	lr
 800c3a6:	bf00      	nop
 800c3a8:	20005790 	.word	0x20005790

0800c3ac <btn_event_next_temp>:
	lv_obj_set_pos(imgbtn_next, 112, 18);
}

static void btn_event_next_temp(lv_obj_t * btn, lv_event_t event)
{
	if(event == LV_EVENT_APPLY) {
 800c3ac:	2911      	cmp	r1, #17
{
 800c3ae:	b508      	push	{r3, lr}
	if(event == LV_EVENT_APPLY) {
 800c3b0:	d10b      	bne.n	800c3ca <btn_event_next_temp+0x1e>
		//printf("Button Next Released SCREEN_READING_VPA\n");
		lv_task_del(Task_Reading_TEMP);
 800c3b2:	4b06      	ldr	r3, [pc, #24]	; (800c3cc <btn_event_next_temp+0x20>)
 800c3b4:	6818      	ldr	r0, [r3, #0]
 800c3b6:	f009 fabb 	bl	8015930 <lv_task_del>
		lv_obj_del(Tela_Reading_TEMP);
 800c3ba:	4b05      	ldr	r3, [pc, #20]	; (800c3d0 <btn_event_next_temp+0x24>)
 800c3bc:	6818      	ldr	r0, [r3, #0]
 800c3be:	f003 fefa 	bl	80101b6 <lv_obj_del>
		screen_reading_vpa();
	}
}
 800c3c2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		screen_reading_vpa();
 800c3c6:	f000 bc4d 	b.w	800cc64 <screen_reading_vpa>
 800c3ca:	bd08      	pop	{r3, pc}
 800c3cc:	200057dc 	.word	0x200057dc
 800c3d0:	200057e0 	.word	0x200057e0

0800c3d4 <btn_event_prev_temp>:
	lv_obj_set_pos(imgbtn_prev, 32, 18);
}

static void btn_event_prev_temp(lv_obj_t * btn, lv_event_t event)
{
	if(event == LV_EVENT_APPLY) {
 800c3d4:	2911      	cmp	r1, #17
{
 800c3d6:	b508      	push	{r3, lr}
	if(event == LV_EVENT_APPLY) {
 800c3d8:	d10b      	bne.n	800c3f2 <btn_event_prev_temp+0x1e>
		//printf("Button ESC Released\n");
        lv_task_del(Task_Reading_TEMP);
 800c3da:	4b06      	ldr	r3, [pc, #24]	; (800c3f4 <btn_event_prev_temp+0x20>)
 800c3dc:	6818      	ldr	r0, [r3, #0]
 800c3de:	f009 faa7 	bl	8015930 <lv_task_del>
		lv_obj_del(Tela_Reading_TEMP);
 800c3e2:	4b05      	ldr	r3, [pc, #20]	; (800c3f8 <btn_event_prev_temp+0x24>)
 800c3e4:	6818      	ldr	r0, [r3, #0]
 800c3e6:	f003 fee6 	bl	80101b6 <lv_obj_del>
		screen_reading_mpx();
	}
}
 800c3ea:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		screen_reading_mpx();
 800c3ee:	f7ff bbcf 	b.w	800bb90 <screen_reading_mpx>
 800c3f2:	bd08      	pop	{r3, pc}
 800c3f4:	200057dc 	.word	0x200057dc
 800c3f8:	200057e0 	.word	0x200057e0

0800c3fc <btn_next_temp>:
{
 800c3fc:	b538      	push	{r3, r4, r5, lr}
	imgbtn_next = lv_imgbtn_create(Tela_Reading_TEMP, NULL);
 800c3fe:	4b15      	ldr	r3, [pc, #84]	; (800c454 <btn_next_temp+0x58>)
	lv_imgbtn_set_src(imgbtn_next, LV_BTN_STATE_REL, &Btn_next);
 800c400:	4d15      	ldr	r5, [pc, #84]	; (800c458 <btn_next_temp+0x5c>)
	imgbtn_next = lv_imgbtn_create(Tela_Reading_TEMP, NULL);
 800c402:	6818      	ldr	r0, [r3, #0]
 800c404:	4c15      	ldr	r4, [pc, #84]	; (800c45c <btn_next_temp+0x60>)
 800c406:	2100      	movs	r1, #0
 800c408:	f00b ff06 	bl	8018218 <lv_imgbtn_create>
	lv_imgbtn_set_src(imgbtn_next, LV_BTN_STATE_REL, &Btn_next);
 800c40c:	462a      	mov	r2, r5
 800c40e:	2100      	movs	r1, #0
	imgbtn_next = lv_imgbtn_create(Tela_Reading_TEMP, NULL);
 800c410:	6020      	str	r0, [r4, #0]
	lv_imgbtn_set_src(imgbtn_next, LV_BTN_STATE_REL, &Btn_next);
 800c412:	f00b ff49 	bl	80182a8 <lv_imgbtn_set_src>
	lv_imgbtn_set_src(imgbtn_next, LV_BTN_STATE_TGL_REL, &Btn_next);
 800c416:	462a      	mov	r2, r5
 800c418:	6820      	ldr	r0, [r4, #0]
 800c41a:	2102      	movs	r1, #2
 800c41c:	f00b ff44 	bl	80182a8 <lv_imgbtn_set_src>
	lv_imgbtn_set_src(imgbtn_next, LV_BTN_STATE_TGL_PR, &Btn_next);
 800c420:	462a      	mov	r2, r5
 800c422:	6820      	ldr	r0, [r4, #0]
 800c424:	2103      	movs	r1, #3
 800c426:	f00b ff3f 	bl	80182a8 <lv_imgbtn_set_src>
	lv_imgbtn_set_src(imgbtn_next, LV_BTN_STATE_PR, &Btn_next);
 800c42a:	462a      	mov	r2, r5
 800c42c:	6820      	ldr	r0, [r4, #0]
 800c42e:	2101      	movs	r1, #1
 800c430:	f00b ff3a 	bl	80182a8 <lv_imgbtn_set_src>
	lv_imgbtn_set_src(imgbtn_next, LV_BTN_STATE_INA, &Btn_next);
 800c434:	462a      	mov	r2, r5
 800c436:	6820      	ldr	r0, [r4, #0]
 800c438:	2104      	movs	r1, #4
 800c43a:	f00b ff35 	bl	80182a8 <lv_imgbtn_set_src>
	lv_obj_set_event_cb(imgbtn_next, btn_event_next_temp);
 800c43e:	6820      	ldr	r0, [r4, #0]
 800c440:	4907      	ldr	r1, [pc, #28]	; (800c460 <btn_next_temp+0x64>)
 800c442:	f003 f906 	bl	800f652 <lv_obj_set_event_cb>
	lv_obj_set_pos(imgbtn_next, 112, 18);
 800c446:	6820      	ldr	r0, [r4, #0]
 800c448:	2212      	movs	r2, #18
 800c44a:	2170      	movs	r1, #112	; 0x70
}
 800c44c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	lv_obj_set_pos(imgbtn_next, 112, 18);
 800c450:	f003 ba49 	b.w	800f8e6 <lv_obj_set_pos>
 800c454:	200057e0 	.word	0x200057e0
 800c458:	20001b20 	.word	0x20001b20
 800c45c:	20005838 	.word	0x20005838
 800c460:	0800c3ad 	.word	0x0800c3ad

0800c464 <btn_prev_temp>:
{
 800c464:	b538      	push	{r3, r4, r5, lr}
	imgbtn_prev = lv_imgbtn_create(Tela_Reading_TEMP, NULL);
 800c466:	4b15      	ldr	r3, [pc, #84]	; (800c4bc <btn_prev_temp+0x58>)
	lv_imgbtn_set_src(imgbtn_prev, LV_BTN_STATE_REL, &Btn_prev);
 800c468:	4d15      	ldr	r5, [pc, #84]	; (800c4c0 <btn_prev_temp+0x5c>)
	imgbtn_prev = lv_imgbtn_create(Tela_Reading_TEMP, NULL);
 800c46a:	6818      	ldr	r0, [r3, #0]
 800c46c:	4c15      	ldr	r4, [pc, #84]	; (800c4c4 <btn_prev_temp+0x60>)
 800c46e:	2100      	movs	r1, #0
 800c470:	f00b fed2 	bl	8018218 <lv_imgbtn_create>
	lv_imgbtn_set_src(imgbtn_prev, LV_BTN_STATE_REL, &Btn_prev);
 800c474:	462a      	mov	r2, r5
 800c476:	2100      	movs	r1, #0
	imgbtn_prev = lv_imgbtn_create(Tela_Reading_TEMP, NULL);
 800c478:	6020      	str	r0, [r4, #0]
	lv_imgbtn_set_src(imgbtn_prev, LV_BTN_STATE_REL, &Btn_prev);
 800c47a:	f00b ff15 	bl	80182a8 <lv_imgbtn_set_src>
	lv_imgbtn_set_src(imgbtn_prev, LV_BTN_STATE_TGL_REL, &Btn_prev);
 800c47e:	462a      	mov	r2, r5
 800c480:	6820      	ldr	r0, [r4, #0]
 800c482:	2102      	movs	r1, #2
 800c484:	f00b ff10 	bl	80182a8 <lv_imgbtn_set_src>
	lv_imgbtn_set_src(imgbtn_prev, LV_BTN_STATE_TGL_PR, &Btn_prev);
 800c488:	462a      	mov	r2, r5
 800c48a:	6820      	ldr	r0, [r4, #0]
 800c48c:	2103      	movs	r1, #3
 800c48e:	f00b ff0b 	bl	80182a8 <lv_imgbtn_set_src>
	lv_imgbtn_set_src(imgbtn_prev, LV_BTN_STATE_PR, &Btn_prev);
 800c492:	462a      	mov	r2, r5
 800c494:	6820      	ldr	r0, [r4, #0]
 800c496:	2101      	movs	r1, #1
 800c498:	f00b ff06 	bl	80182a8 <lv_imgbtn_set_src>
	lv_imgbtn_set_src(imgbtn_prev, LV_BTN_STATE_INA, &Btn_prev);
 800c49c:	462a      	mov	r2, r5
 800c49e:	6820      	ldr	r0, [r4, #0]
 800c4a0:	2104      	movs	r1, #4
 800c4a2:	f00b ff01 	bl	80182a8 <lv_imgbtn_set_src>
	lv_obj_set_event_cb(imgbtn_prev, btn_event_prev_temp);
 800c4a6:	6820      	ldr	r0, [r4, #0]
 800c4a8:	4907      	ldr	r1, [pc, #28]	; (800c4c8 <btn_prev_temp+0x64>)
 800c4aa:	f003 f8d2 	bl	800f652 <lv_obj_set_event_cb>
	lv_obj_set_pos(imgbtn_prev, 32, 18);
 800c4ae:	6820      	ldr	r0, [r4, #0]
 800c4b0:	2212      	movs	r2, #18
 800c4b2:	2120      	movs	r1, #32
}
 800c4b4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	lv_obj_set_pos(imgbtn_prev, 32, 18);
 800c4b8:	f003 ba15 	b.w	800f8e6 <lv_obj_set_pos>
 800c4bc:	200057e0 	.word	0x200057e0
 800c4c0:	20001ba4 	.word	0x20001ba4
 800c4c4:	2000583c 	.word	0x2000583c
 800c4c8:	0800c3d5 	.word	0x0800c3d5
 800c4cc:	00000000 	.word	0x00000000

0800c4d0 <print_temp_1>:


void print_temp_1(float temp)
{
 800c4d0:	b573      	push	{r0, r1, r4, r5, r6, lr}
	temp = 43.3f;

	// Area de Refletida
	static lv_style_t style_txt1;
	lv_style_copy(&style_txt1, &lv_style_plain);
 800c4d2:	4c27      	ldr	r4, [pc, #156]	; (800c570 <print_temp_1+0xa0>)
 800c4d4:	4927      	ldr	r1, [pc, #156]	; (800c574 <print_temp_1+0xa4>)
	style_txt1.text.letter_space = 1;
	style_txt1.text.line_space = 1;
	style_txt1.text.color = LV_COLOR_CYAN;

	// Cria um novo rotulo
	txt_temp = lv_label_create(Tela_Reading_TEMP, NULL);
 800c4d6:	4d28      	ldr	r5, [pc, #160]	; (800c578 <print_temp_1+0xa8>)
	lv_style_copy(&style_txt1, &lv_style_plain);
 800c4d8:	4620      	mov	r0, r4
 800c4da:	f004 fbc5 	bl	8010c68 <lv_style_copy>
	style_txt1.text.font = &lv_font_eurostile_28;
 800c4de:	4b27      	ldr	r3, [pc, #156]	; (800c57c <print_temp_1+0xac>)
 800c4e0:	6263      	str	r3, [r4, #36]	; 0x24
	style_txt1.text.color = LV_COLOR_CYAN;
 800c4e2:	f894 3020 	ldrb.w	r3, [r4, #32]
 800c4e6:	f043 031f 	orr.w	r3, r3, #31
 800c4ea:	f884 3020 	strb.w	r3, [r4, #32]
 800c4ee:	8c23      	ldrh	r3, [r4, #32]
 800c4f0:	f443 63fc 	orr.w	r3, r3, #2016	; 0x7e0
 800c4f4:	8423      	strh	r3, [r4, #32]
 800c4f6:	0a1b      	lsrs	r3, r3, #8
 800c4f8:	f36f 03c7 	bfc	r3, #3, #5
 800c4fc:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
	txt_temp = lv_label_create(Tela_Reading_TEMP, NULL);
 800c500:	4b1f      	ldr	r3, [pc, #124]	; (800c580 <print_temp_1+0xb0>)
	style_txt1.text.letter_space = 1;
 800c502:	2601      	movs	r6, #1
	txt_temp = lv_label_create(Tela_Reading_TEMP, NULL);
 800c504:	6818      	ldr	r0, [r3, #0]
	style_txt1.text.letter_space = 1;
 800c506:	8526      	strh	r6, [r4, #40]	; 0x28
	txt_temp = lv_label_create(Tela_Reading_TEMP, NULL);
 800c508:	2100      	movs	r1, #0
	style_txt1.text.line_space = 1;
 800c50a:	8566      	strh	r6, [r4, #42]	; 0x2a
	txt_temp = lv_label_create(Tela_Reading_TEMP, NULL);
 800c50c:	f00c fc28 	bl	8018d60 <lv_label_create>
	lv_obj_set_style(txt_temp, &style_txt1); 						// Configura o estilo criado
 800c510:	4621      	mov	r1, r4
	txt_temp = lv_label_create(Tela_Reading_TEMP, NULL);
 800c512:	6028      	str	r0, [r5, #0]
	lv_obj_set_style(txt_temp, &style_txt1); 						// Configura o estilo criado
 800c514:	f003 fede 	bl	80102d4 <lv_obj_set_style>
	lv_label_set_long_mode(txt_temp, LV_LABEL_LONG_EXPAND); 			// Quebra as linhas longas
 800c518:	6828      	ldr	r0, [r5, #0]
	lv_label_set_recolor(txt_temp, true); 							// Ativa recolorizar por comandos no texto
	lv_label_set_align(txt_temp, LV_ALIGN_IN_TOP_RIGHT); 				// Centraliza linhas alinhadas
	sprintf(buffer, "%0.1f", temp);
 800c51a:	4c1a      	ldr	r4, [pc, #104]	; (800c584 <print_temp_1+0xb4>)
	lv_label_set_long_mode(txt_temp, LV_LABEL_LONG_EXPAND); 			// Quebra as linhas longas
 800c51c:	2100      	movs	r1, #0
 800c51e:	f00c fbc9 	bl	8018cb4 <lv_label_set_long_mode>
	lv_label_set_recolor(txt_temp, true); 							// Ativa recolorizar por comandos no texto
 800c522:	4631      	mov	r1, r6
 800c524:	6828      	ldr	r0, [r5, #0]
 800c526:	f00c fc07 	bl	8018d38 <lv_label_set_recolor>
	lv_label_set_align(txt_temp, LV_ALIGN_IN_TOP_RIGHT); 				// Centraliza linhas alinhadas
 800c52a:	6828      	ldr	r0, [r5, #0]
 800c52c:	2103      	movs	r1, #3
 800c52e:	f00c f860 	bl	80185f2 <lv_label_set_align>
	sprintf(buffer, "%0.1f", temp);
 800c532:	a30d      	add	r3, pc, #52	; (adr r3, 800c568 <print_temp_1+0x98>)
 800c534:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c538:	4913      	ldr	r1, [pc, #76]	; (800c588 <print_temp_1+0xb8>)
 800c53a:	4620      	mov	r0, r4
 800c53c:	f00e fc6c 	bl	801ae18 <sprintf>
	lv_label_set_text(txt_temp, buffer);
 800c540:	4621      	mov	r1, r4
 800c542:	6828      	ldr	r0, [r5, #0]
 800c544:	f00c fb62 	bl	8018c0c <lv_label_set_text>
	lv_obj_set_width(txt_temp, 300); 								// Configuura o comprimento
 800c548:	6828      	ldr	r0, [r5, #0]
 800c54a:	f44f 7196 	mov.w	r1, #300	; 0x12c
 800c54e:	f003 fe09 	bl	8010164 <lv_obj_set_width>
	lv_obj_align(txt_temp, NULL, LV_ALIGN_IN_TOP_RIGHT, -70, 45); 	// Alinha ao centro
 800c552:	232d      	movs	r3, #45	; 0x2d
 800c554:	9300      	str	r3, [sp, #0]
 800c556:	2203      	movs	r2, #3
 800c558:	f06f 0345 	mvn.w	r3, #69	; 0x45
 800c55c:	2100      	movs	r1, #0
 800c55e:	6828      	ldr	r0, [r5, #0]
 800c560:	f003 fa16 	bl	800f990 <lv_obj_align>
}
 800c564:	b002      	add	sp, #8
 800c566:	bd70      	pop	{r4, r5, r6, pc}
 800c568:	60000000 	.word	0x60000000
 800c56c:	4045a666 	.word	0x4045a666
 800c570:	200058b8 	.word	0x200058b8
 800c574:	2000c6a8 	.word	0x2000c6a8
 800c578:	200058f4 	.word	0x200058f4
 800c57c:	20001958 	.word	0x20001958
 800c580:	200057e0 	.word	0x200057e0
 800c584:	20004d48 	.word	0x20004d48
 800c588:	0802cbb8 	.word	0x0802cbb8

0800c58c <create_vumeter_temperatura>:

void create_vumeter_temperatura(void)
{
 800c58c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	// Area do Barguraph Frequency
	// Indicador OFF
	lv_style_copy(&style_indic_bar, &lv_style_pretty);
 800c58e:	4e30      	ldr	r6, [pc, #192]	; (800c650 <create_vumeter_temperatura+0xc4>)
 800c590:	4930      	ldr	r1, [pc, #192]	; (800c654 <create_vumeter_temperatura+0xc8>)
	style_indic_bar.body.radius = 0;
	style_indic_bar.body.grad_color = LV_COLOR_MAKE(105, 105, 105);
	style_indic_bar.body.main_color = LV_COLOR_MAKE(105, 105, 105);
	style_indic_bar.body.border.color = LV_COLOR_MAKE(105, 105, 105);

	lv_style_copy(&style_indic_bar_vd, &lv_style_pretty);
 800c592:	4c31      	ldr	r4, [pc, #196]	; (800c658 <create_vumeter_temperatura+0xcc>)
	style_indic_bar_vd.body.main_color = LV_COLOR_MAKE(0, 255, 0);
	style_indic_bar_vd.body.border.color = LV_COLOR_MAKE(0, 255, 0);

	// Create a default bar
	for(uint8_t x = 0; x < 20; x++) {
		bar_t[x] = lv_bar_create(Tela_Reading_TEMP, NULL);
 800c594:	4f31      	ldr	r7, [pc, #196]	; (800c65c <create_vumeter_temperatura+0xd0>)
	lv_style_copy(&style_indic_bar, &lv_style_pretty);
 800c596:	4630      	mov	r0, r6
 800c598:	f004 fb66 	bl	8010c68 <lv_style_copy>
	style_indic_bar.body.grad_color = LV_COLOR_MAKE(105, 105, 105);
 800c59c:	4b30      	ldr	r3, [pc, #192]	; (800c660 <create_vumeter_temperatura+0xd4>)
	lv_style_copy(&style_indic_bar_vd, &lv_style_pretty);
 800c59e:	492d      	ldr	r1, [pc, #180]	; (800c654 <create_vumeter_temperatura+0xc8>)
	style_indic_bar.body.grad_color = LV_COLOR_MAKE(105, 105, 105);
 800c5a0:	881b      	ldrh	r3, [r3, #0]
 800c5a2:	80b3      	strh	r3, [r6, #4]
	style_indic_bar.body.radius = 0;
 800c5a4:	2500      	movs	r5, #0
	lv_style_copy(&style_indic_bar_vd, &lv_style_pretty);
 800c5a6:	4620      	mov	r0, r4
	style_indic_bar.body.main_color = LV_COLOR_MAKE(105, 105, 105);
 800c5a8:	8073      	strh	r3, [r6, #2]
	style_indic_bar.body.border.color = LV_COLOR_MAKE(105, 105, 105);
 800c5aa:	8173      	strh	r3, [r6, #10]
	style_indic_bar.body.radius = 0;
 800c5ac:	80f5      	strh	r5, [r6, #6]
	lv_style_copy(&style_indic_bar_vd, &lv_style_pretty);
 800c5ae:	f004 fb5b 	bl	8010c68 <lv_style_copy>
	style_indic_bar_vd.body.grad_color = LV_COLOR_MAKE(0, 255, 0);
 800c5b2:	7923      	ldrb	r3, [r4, #4]
	style_indic_bar_vd.body.radius = 0;
 800c5b4:	80e5      	strh	r5, [r4, #6]
	style_indic_bar_vd.body.grad_color = LV_COLOR_MAKE(0, 255, 0);
 800c5b6:	f365 0304 	bfi	r3, r5, #0, #5
 800c5ba:	7123      	strb	r3, [r4, #4]
 800c5bc:	88a3      	ldrh	r3, [r4, #4]
 800c5be:	f443 63fc 	orr.w	r3, r3, #2016	; 0x7e0
 800c5c2:	80a3      	strh	r3, [r4, #4]
 800c5c4:	0a1b      	lsrs	r3, r3, #8
 800c5c6:	f365 03c7 	bfi	r3, r5, #3, #5
 800c5ca:	7163      	strb	r3, [r4, #5]
	style_indic_bar_vd.body.main_color = LV_COLOR_MAKE(0, 255, 0);
 800c5cc:	78a3      	ldrb	r3, [r4, #2]
 800c5ce:	f365 0304 	bfi	r3, r5, #0, #5
 800c5d2:	70a3      	strb	r3, [r4, #2]
 800c5d4:	8863      	ldrh	r3, [r4, #2]
 800c5d6:	f443 63fc 	orr.w	r3, r3, #2016	; 0x7e0
 800c5da:	8063      	strh	r3, [r4, #2]
 800c5dc:	0a1b      	lsrs	r3, r3, #8
 800c5de:	f365 03c7 	bfi	r3, r5, #3, #5
 800c5e2:	70e3      	strb	r3, [r4, #3]
	style_indic_bar_vd.body.border.color = LV_COLOR_MAKE(0, 255, 0);
 800c5e4:	7aa3      	ldrb	r3, [r4, #10]
 800c5e6:	f365 0304 	bfi	r3, r5, #0, #5
 800c5ea:	72a3      	strb	r3, [r4, #10]
 800c5ec:	8963      	ldrh	r3, [r4, #10]
 800c5ee:	f443 63fc 	orr.w	r3, r3, #2016	; 0x7e0
 800c5f2:	8163      	strh	r3, [r4, #10]
 800c5f4:	0a1b      	lsrs	r3, r3, #8
 800c5f6:	f365 03c7 	bfi	r3, r5, #3, #5
 800c5fa:	72e3      	strb	r3, [r4, #11]
 800c5fc:	4c19      	ldr	r4, [pc, #100]	; (800c664 <create_vumeter_temperatura+0xd8>)
		bar_t[x] = lv_bar_create(Tela_Reading_TEMP, NULL);
 800c5fe:	6838      	ldr	r0, [r7, #0]
 800c600:	2100      	movs	r1, #0
 800c602:	f009 fd9b 	bl	801613c <lv_bar_create>
		lv_obj_set_size(bar_t[x], 4, 19);
 800c606:	2213      	movs	r2, #19
		bar_t[x] = lv_bar_create(Tela_Reading_TEMP, NULL);
 800c608:	6060      	str	r0, [r4, #4]
		lv_obj_set_size(bar_t[x], 4, 19);
 800c60a:	2104      	movs	r1, #4
 800c60c:	f003 fd60 	bl	80100d0 <lv_obj_set_size>
		lv_bar_set_style(bar_t[x], LV_BAR_STYLE_BG, &style_indic_bar);
 800c610:	6860      	ldr	r0, [r4, #4]
 800c612:	4632      	mov	r2, r6
 800c614:	2100      	movs	r1, #0
 800c616:	f009 fd7b 	bl	8016110 <lv_bar_set_style>
		lv_bar_set_style(bar_t[x], LV_BAR_STYLE_INDIC, &style_indic_bar);
 800c61a:	6860      	ldr	r0, [r4, #4]
 800c61c:	4632      	mov	r2, r6
 800c61e:	2101      	movs	r1, #1
 800c620:	f009 fd76 	bl	8016110 <lv_bar_set_style>
		lv_obj_align(bar_t[x], NULL, LV_ALIGN_IN_TOP_LEFT, t_pos_x[x], 76);
 800c624:	224c      	movs	r2, #76	; 0x4c
 800c626:	4b10      	ldr	r3, [pc, #64]	; (800c668 <create_vumeter_temperatura+0xdc>)
 800c628:	9200      	str	r2, [sp, #0]
 800c62a:	f933 3025 	ldrsh.w	r3, [r3, r5, lsl #2]
 800c62e:	6860      	ldr	r0, [r4, #4]
 800c630:	2201      	movs	r2, #1
 800c632:	2100      	movs	r1, #0
 800c634:	f003 f9ac 	bl	800f990 <lv_obj_align>
 800c638:	3501      	adds	r5, #1
		lv_bar_set_value(bar_t[x], 100, 0);
 800c63a:	2200      	movs	r2, #0
 800c63c:	2164      	movs	r1, #100	; 0x64
 800c63e:	f854 0f04 	ldr.w	r0, [r4, #4]!
 800c642:	f009 fd09 	bl	8016058 <lv_bar_set_value>
	for(uint8_t x = 0; x < 20; x++) {
 800c646:	2d14      	cmp	r5, #20
 800c648:	d1d9      	bne.n	800c5fe <create_vumeter_temperatura+0x72>
	}
}
 800c64a:	b003      	add	sp, #12
 800c64c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c64e:	bf00      	nop
 800c650:	20005840 	.word	0x20005840
 800c654:	2000c5b8 	.word	0x2000c5b8
 800c658:	2000587c 	.word	0x2000587c
 800c65c:	200057e0 	.word	0x200057e0
 800c660:	0801d8ce 	.word	0x0801d8ce
 800c664:	200057e0 	.word	0x200057e0
 800c668:	0802cbe0 	.word	0x0802cbe0

0800c66c <update_vumeter_temperatura>:

void update_vumeter_temperatura(float temp)
{
 800c66c:	b570      	push	{r4, r5, r6, lr}
	temp = 43.3f;
	uint32_t x;
	uint32_t resul = (uint32_t)( ((temp - 10.0) / 2.50));

	for(x = 0; x <= resul; x++) {
		lv_bar_set_style(bar_t[x], LV_BAR_STYLE_BG, &style_indic_bar_vd);
 800c66e:	4d09      	ldr	r5, [pc, #36]	; (800c694 <update_vumeter_temperatura+0x28>)
 800c670:	4e09      	ldr	r6, [pc, #36]	; (800c698 <update_vumeter_temperatura+0x2c>)
	for(x = 0; x <= resul; x++) {
 800c672:	2400      	movs	r4, #0
		lv_bar_set_style(bar_t[x], LV_BAR_STYLE_BG, &style_indic_bar_vd);
 800c674:	f855 0024 	ldr.w	r0, [r5, r4, lsl #2]
 800c678:	4632      	mov	r2, r6
 800c67a:	2100      	movs	r1, #0
 800c67c:	f009 fd48 	bl	8016110 <lv_bar_set_style>
		lv_bar_set_style(bar_t[x], LV_BAR_STYLE_INDIC, &style_indic_bar_vd);
 800c680:	f855 0024 	ldr.w	r0, [r5, r4, lsl #2]
 800c684:	4632      	mov	r2, r6
 800c686:	2101      	movs	r1, #1
	for(x = 0; x <= resul; x++) {
 800c688:	3401      	adds	r4, #1
		lv_bar_set_style(bar_t[x], LV_BAR_STYLE_INDIC, &style_indic_bar_vd);
 800c68a:	f009 fd41 	bl	8016110 <lv_bar_set_style>
	for(x = 0; x <= resul; x++) {
 800c68e:	2c0e      	cmp	r4, #14
 800c690:	d1f0      	bne.n	800c674 <update_vumeter_temperatura+0x8>
	}
}
 800c692:	bd70      	pop	{r4, r5, r6, pc}
 800c694:	200057e4 	.word	0x200057e4
 800c698:	2000587c 	.word	0x2000587c

0800c69c <screen_reading_temp>:
{
 800c69c:	b538      	push	{r3, r4, r5, lr}
	Tela_Reading_TEMP = lv_obj_create(NULL, NULL);
 800c69e:	2100      	movs	r1, #0
{
 800c6a0:	ed2d 8b02 	vpush	{d8}
    temperatura = temp;
 800c6a4:	4b1a      	ldr	r3, [pc, #104]	; (800c710 <screen_reading_temp+0x74>)
 800c6a6:	ed9f 8a1b 	vldr	s16, [pc, #108]	; 800c714 <screen_reading_temp+0x78>
	Tela_Reading_TEMP = lv_obj_create(NULL, NULL);
 800c6aa:	4c1b      	ldr	r4, [pc, #108]	; (800c718 <screen_reading_temp+0x7c>)
    temperatura = temp;
 800c6ac:	ed83 8a00 	vstr	s16, [r3]
	Tela_Reading_TEMP = lv_obj_create(NULL, NULL);
 800c6b0:	4608      	mov	r0, r1
 800c6b2:	f003 fb8f 	bl	800fdd4 <lv_obj_create>
	img_fundo = lv_img_create(Tela_Reading_TEMP, NULL);
 800c6b6:	2100      	movs	r1, #0
	Tela_Reading_TEMP = lv_obj_create(NULL, NULL);
 800c6b8:	6020      	str	r0, [r4, #0]
	img_fundo = lv_img_create(Tela_Reading_TEMP, NULL);
 800c6ba:	f00b fc83 	bl	8017fc4 <lv_img_create>
 800c6be:	4d17      	ldr	r5, [pc, #92]	; (800c71c <screen_reading_temp+0x80>)
    lv_img_set_src(img_fundo, &tela_reading_temp);
 800c6c0:	4917      	ldr	r1, [pc, #92]	; (800c720 <screen_reading_temp+0x84>)
	img_fundo = lv_img_create(Tela_Reading_TEMP, NULL);
 800c6c2:	6028      	str	r0, [r5, #0]
    lv_img_set_src(img_fundo, &tela_reading_temp);
 800c6c4:	f00b fbee 	bl	8017ea4 <lv_img_set_src>
    lv_obj_set_protect(img_fundo, LV_PROTECT_POS);
 800c6c8:	2104      	movs	r1, #4
 800c6ca:	6828      	ldr	r0, [r5, #0]
 800c6cc:	f002 ffb4 	bl	800f638 <lv_obj_set_protect>
	btn_next_temp();
 800c6d0:	f7ff fe94 	bl	800c3fc <btn_next_temp>
	btn_prev_temp();
 800c6d4:	f7ff fec6 	bl	800c464 <btn_prev_temp>
	print_temp_1(temp);
 800c6d8:	eeb0 0a48 	vmov.f32	s0, s16
 800c6dc:	f7ff fef8 	bl	800c4d0 <print_temp_1>
	create_vumeter_temperatura();
 800c6e0:	f7ff ff54 	bl	800c58c <create_vumeter_temperatura>
	update_vumeter_temperatura(temp);
 800c6e4:	eeb0 0a48 	vmov.f32	s0, s16
 800c6e8:	f7ff ffc0 	bl	800c66c <update_vumeter_temperatura>
 800c6ec:	6820      	ldr	r0, [r4, #0]
 800c6ee:	f002 fd5d 	bl	800f1ac <lv_disp_load_scr>
	Task_Reading_TEMP = lv_task_create(update_reading_temp, 500, LV_TASK_PRIO_MID, NULL);
 800c6f2:	2300      	movs	r3, #0
 800c6f4:	2203      	movs	r2, #3
 800c6f6:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 800c6fa:	480a      	ldr	r0, [pc, #40]	; (800c724 <screen_reading_temp+0x88>)
 800c6fc:	f009 fa08 	bl	8015b10 <lv_task_create>
}
 800c700:	ecbd 8b02 	vpop	{d8}
	Task_Reading_TEMP = lv_task_create(update_reading_temp, 500, LV_TASK_PRIO_MID, NULL);
 800c704:	4b08      	ldr	r3, [pc, #32]	; (800c728 <screen_reading_temp+0x8c>)
 800c706:	6018      	str	r0, [r3, #0]
	TelaAtiva = TelaReading_Temp;
 800c708:	4b08      	ldr	r3, [pc, #32]	; (800c72c <screen_reading_temp+0x90>)
 800c70a:	220b      	movs	r2, #11
 800c70c:	601a      	str	r2, [r3, #0]
}
 800c70e:	bd38      	pop	{r3, r4, r5, pc}
 800c710:	20000020 	.word	0x20000020
 800c714:	422d3333 	.word	0x422d3333
 800c718:	200057e0 	.word	0x200057e0
 800c71c:	20005834 	.word	0x20005834
 800c720:	20001c40 	.word	0x20001c40
 800c724:	0800c731 	.word	0x0800c731
 800c728:	200057dc 	.word	0x200057dc
 800c72c:	20003444 	.word	0x20003444

0800c730 <update_reading_temp>:

static void update_reading_temp(lv_task_t * param)
{
 800c730:	b538      	push	{r3, r4, r5, lr}
	sprintf(buffer, "%0.1f", temperatura);
 800c732:	4c0b      	ldr	r4, [pc, #44]	; (800c760 <update_reading_temp+0x30>)
 800c734:	4d0b      	ldr	r5, [pc, #44]	; (800c764 <update_reading_temp+0x34>)
 800c736:	6820      	ldr	r0, [r4, #0]
 800c738:	f7f3 ff06 	bl	8000548 <__aeabi_f2d>
 800c73c:	4602      	mov	r2, r0
 800c73e:	460b      	mov	r3, r1
 800c740:	4628      	mov	r0, r5
 800c742:	4909      	ldr	r1, [pc, #36]	; (800c768 <update_reading_temp+0x38>)
 800c744:	f00e fb68 	bl	801ae18 <sprintf>
	lv_label_set_text(txt_temp, buffer);
 800c748:	4b08      	ldr	r3, [pc, #32]	; (800c76c <update_reading_temp+0x3c>)
 800c74a:	4629      	mov	r1, r5
 800c74c:	6818      	ldr	r0, [r3, #0]
 800c74e:	f00c fa5d 	bl	8018c0c <lv_label_set_text>
	update_vumeter_temperatura(temperatura);
 800c752:	ed94 0a00 	vldr	s0, [r4]
}
 800c756:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	update_vumeter_temperatura(temperatura);
 800c75a:	f7ff bf87 	b.w	800c66c <update_vumeter_temperatura>
 800c75e:	bf00      	nop
 800c760:	20000020 	.word	0x20000020
 800c764:	20004d48 	.word	0x20004d48
 800c768:	0802cbb8 	.word	0x0802cbb8
 800c76c:	200058f4 	.word	0x200058f4

0800c770 <ButtonEventTelaReading_Temp>:

void ButtonEventTelaReading_Temp(uint8_t event, uint8_t tipo, uint8_t id)
{
	if(event == EVT_PBTN_INPUT) {
 800c770:	2810      	cmp	r0, #16
 800c772:	d10e      	bne.n	800c792 <ButtonEventTelaReading_Temp+0x22>
		if(tipo == PBTN_SCLK) {	// Single Click
 800c774:	2901      	cmp	r1, #1
 800c776:	d10c      	bne.n	800c792 <ButtonEventTelaReading_Temp+0x22>
			switch(id) {
 800c778:	b112      	cbz	r2, 800c780 <ButtonEventTelaReading_Temp+0x10>
 800c77a:	2a01      	cmp	r2, #1
 800c77c:	d005      	beq.n	800c78a <ButtonEventTelaReading_Temp+0x1a>
 800c77e:	4770      	bx	lr
				case KEY_DN:
					lv_event_send(imgbtn_prev, LV_EVENT_APPLY, NULL);
 800c780:	4b04      	ldr	r3, [pc, #16]	; (800c794 <ButtonEventTelaReading_Temp+0x24>)
 800c782:	2111      	movs	r1, #17
					break;
				case KEY_UP:
					lv_event_send(imgbtn_next, LV_EVENT_APPLY, NULL);
 800c784:	6818      	ldr	r0, [r3, #0]
 800c786:	f002 bfab 	b.w	800f6e0 <lv_event_send>
 800c78a:	2200      	movs	r2, #0
 800c78c:	2111      	movs	r1, #17
 800c78e:	4b02      	ldr	r3, [pc, #8]	; (800c798 <ButtonEventTelaReading_Temp+0x28>)
 800c790:	e7f8      	b.n	800c784 <ButtonEventTelaReading_Temp+0x14>
 800c792:	4770      	bx	lr
 800c794:	2000583c 	.word	0x2000583c
 800c798:	20005838 	.word	0x20005838

0800c79c <btn_event_next_vpa>:
	lv_obj_set_pos(imgbtn_next, 112, 18);
}

static void btn_event_next_vpa(lv_obj_t * btn, lv_event_t event)
{
	if(event == LV_EVENT_APPLY) {
 800c79c:	2911      	cmp	r1, #17
{
 800c79e:	b508      	push	{r3, lr}
	if(event == LV_EVENT_APPLY) {
 800c7a0:	d10b      	bne.n	800c7ba <btn_event_next_vpa+0x1e>
		//printf("Button Next Released SCREEN_READING_VPA\n");
		lv_task_del(Task_Reading_VPA);
 800c7a2:	4b06      	ldr	r3, [pc, #24]	; (800c7bc <btn_event_next_vpa+0x20>)
 800c7a4:	6818      	ldr	r0, [r3, #0]
 800c7a6:	f009 f8c3 	bl	8015930 <lv_task_del>
		lv_obj_del(Tela_Reading_VPA);
 800c7aa:	4b05      	ldr	r3, [pc, #20]	; (800c7c0 <btn_event_next_vpa+0x24>)
 800c7ac:	6818      	ldr	r0, [r3, #0]
 800c7ae:	f003 fd02 	bl	80101b6 <lv_obj_del>
		screen_reading_efic();
	}
}
 800c7b2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		screen_reading_efic();
 800c7b6:	f7ff bbd9 	b.w	800bf6c <screen_reading_efic>
 800c7ba:	bd08      	pop	{r3, pc}
 800c7bc:	200058f8 	.word	0x200058f8
 800c7c0:	200058fc 	.word	0x200058fc

0800c7c4 <btn_event_prev_vpa>:
	lv_obj_set_pos(imgbtn_prev, 32, 18);
}

static void btn_event_prev_vpa(lv_obj_t * btn, lv_event_t event)
{
	if(event == LV_EVENT_APPLY) {
 800c7c4:	2911      	cmp	r1, #17
{
 800c7c6:	b508      	push	{r3, lr}
	if(event == LV_EVENT_APPLY) {
 800c7c8:	d10b      	bne.n	800c7e2 <btn_event_prev_vpa+0x1e>
		//printf("Button ESC Released\n");
		lv_task_del(Task_Reading_VPA);
 800c7ca:	4b06      	ldr	r3, [pc, #24]	; (800c7e4 <btn_event_prev_vpa+0x20>)
 800c7cc:	6818      	ldr	r0, [r3, #0]
 800c7ce:	f009 f8af 	bl	8015930 <lv_task_del>
		lv_obj_del(Tela_Reading_VPA);
 800c7d2:	4b05      	ldr	r3, [pc, #20]	; (800c7e8 <btn_event_prev_vpa+0x24>)
 800c7d4:	6818      	ldr	r0, [r3, #0]
 800c7d6:	f003 fcee 	bl	80101b6 <lv_obj_del>
		screen_reading_temp();
	}
}
 800c7da:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		screen_reading_temp();
 800c7de:	f7ff bf5d 	b.w	800c69c <screen_reading_temp>
 800c7e2:	bd08      	pop	{r3, pc}
 800c7e4:	200058f8 	.word	0x200058f8
 800c7e8:	200058fc 	.word	0x200058fc

0800c7ec <btn_next_vpa>:
{
 800c7ec:	b538      	push	{r3, r4, r5, lr}
	imgbtn_next = lv_imgbtn_create(Tela_Reading_VPA, NULL);
 800c7ee:	4b15      	ldr	r3, [pc, #84]	; (800c844 <btn_next_vpa+0x58>)
	lv_imgbtn_set_src(imgbtn_next, LV_BTN_STATE_REL, &Btn_next);
 800c7f0:	4d15      	ldr	r5, [pc, #84]	; (800c848 <btn_next_vpa+0x5c>)
	imgbtn_next = lv_imgbtn_create(Tela_Reading_VPA, NULL);
 800c7f2:	6818      	ldr	r0, [r3, #0]
 800c7f4:	4c15      	ldr	r4, [pc, #84]	; (800c84c <btn_next_vpa+0x60>)
 800c7f6:	2100      	movs	r1, #0
 800c7f8:	f00b fd0e 	bl	8018218 <lv_imgbtn_create>
	lv_imgbtn_set_src(imgbtn_next, LV_BTN_STATE_REL, &Btn_next);
 800c7fc:	462a      	mov	r2, r5
 800c7fe:	2100      	movs	r1, #0
	imgbtn_next = lv_imgbtn_create(Tela_Reading_VPA, NULL);
 800c800:	6020      	str	r0, [r4, #0]
	lv_imgbtn_set_src(imgbtn_next, LV_BTN_STATE_REL, &Btn_next);
 800c802:	f00b fd51 	bl	80182a8 <lv_imgbtn_set_src>
	lv_imgbtn_set_src(imgbtn_next, LV_BTN_STATE_TGL_REL, &Btn_next);
 800c806:	462a      	mov	r2, r5
 800c808:	6820      	ldr	r0, [r4, #0]
 800c80a:	2102      	movs	r1, #2
 800c80c:	f00b fd4c 	bl	80182a8 <lv_imgbtn_set_src>
	lv_imgbtn_set_src(imgbtn_next, LV_BTN_STATE_TGL_PR, &Btn_next);
 800c810:	462a      	mov	r2, r5
 800c812:	6820      	ldr	r0, [r4, #0]
 800c814:	2103      	movs	r1, #3
 800c816:	f00b fd47 	bl	80182a8 <lv_imgbtn_set_src>
	lv_imgbtn_set_src(imgbtn_next, LV_BTN_STATE_PR, &Btn_next);
 800c81a:	462a      	mov	r2, r5
 800c81c:	6820      	ldr	r0, [r4, #0]
 800c81e:	2101      	movs	r1, #1
 800c820:	f00b fd42 	bl	80182a8 <lv_imgbtn_set_src>
	lv_imgbtn_set_src(imgbtn_next, LV_BTN_STATE_INA, &Btn_next);
 800c824:	462a      	mov	r2, r5
 800c826:	6820      	ldr	r0, [r4, #0]
 800c828:	2104      	movs	r1, #4
 800c82a:	f00b fd3d 	bl	80182a8 <lv_imgbtn_set_src>
	lv_obj_set_event_cb(imgbtn_next, btn_event_next_vpa);
 800c82e:	6820      	ldr	r0, [r4, #0]
 800c830:	4907      	ldr	r1, [pc, #28]	; (800c850 <btn_next_vpa+0x64>)
 800c832:	f002 ff0e 	bl	800f652 <lv_obj_set_event_cb>
	lv_obj_set_pos(imgbtn_next, 112, 18);
 800c836:	6820      	ldr	r0, [r4, #0]
 800c838:	2212      	movs	r2, #18
 800c83a:	2170      	movs	r1, #112	; 0x70
}
 800c83c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	lv_obj_set_pos(imgbtn_next, 112, 18);
 800c840:	f003 b851 	b.w	800f8e6 <lv_obj_set_pos>
 800c844:	200058fc 	.word	0x200058fc
 800c848:	20001b20 	.word	0x20001b20
 800c84c:	200059ac 	.word	0x200059ac
 800c850:	0800c79d 	.word	0x0800c79d

0800c854 <btn_prev_vpa>:
{
 800c854:	b538      	push	{r3, r4, r5, lr}
	imgbtn_prev = lv_imgbtn_create(Tela_Reading_VPA, NULL);
 800c856:	4b15      	ldr	r3, [pc, #84]	; (800c8ac <btn_prev_vpa+0x58>)
	lv_imgbtn_set_src(imgbtn_prev, LV_BTN_STATE_REL, &Btn_prev);
 800c858:	4d15      	ldr	r5, [pc, #84]	; (800c8b0 <btn_prev_vpa+0x5c>)
	imgbtn_prev = lv_imgbtn_create(Tela_Reading_VPA, NULL);
 800c85a:	6818      	ldr	r0, [r3, #0]
 800c85c:	4c15      	ldr	r4, [pc, #84]	; (800c8b4 <btn_prev_vpa+0x60>)
 800c85e:	2100      	movs	r1, #0
 800c860:	f00b fcda 	bl	8018218 <lv_imgbtn_create>
	lv_imgbtn_set_src(imgbtn_prev, LV_BTN_STATE_REL, &Btn_prev);
 800c864:	462a      	mov	r2, r5
 800c866:	2100      	movs	r1, #0
	imgbtn_prev = lv_imgbtn_create(Tela_Reading_VPA, NULL);
 800c868:	6020      	str	r0, [r4, #0]
	lv_imgbtn_set_src(imgbtn_prev, LV_BTN_STATE_REL, &Btn_prev);
 800c86a:	f00b fd1d 	bl	80182a8 <lv_imgbtn_set_src>
	lv_imgbtn_set_src(imgbtn_prev, LV_BTN_STATE_TGL_REL, &Btn_prev);
 800c86e:	462a      	mov	r2, r5
 800c870:	6820      	ldr	r0, [r4, #0]
 800c872:	2102      	movs	r1, #2
 800c874:	f00b fd18 	bl	80182a8 <lv_imgbtn_set_src>
	lv_imgbtn_set_src(imgbtn_prev, LV_BTN_STATE_TGL_PR, &Btn_prev);
 800c878:	462a      	mov	r2, r5
 800c87a:	6820      	ldr	r0, [r4, #0]
 800c87c:	2103      	movs	r1, #3
 800c87e:	f00b fd13 	bl	80182a8 <lv_imgbtn_set_src>
	lv_imgbtn_set_src(imgbtn_prev, LV_BTN_STATE_PR, &Btn_prev);
 800c882:	462a      	mov	r2, r5
 800c884:	6820      	ldr	r0, [r4, #0]
 800c886:	2101      	movs	r1, #1
 800c888:	f00b fd0e 	bl	80182a8 <lv_imgbtn_set_src>
	lv_imgbtn_set_src(imgbtn_prev, LV_BTN_STATE_INA, &Btn_prev);
 800c88c:	462a      	mov	r2, r5
 800c88e:	6820      	ldr	r0, [r4, #0]
 800c890:	2104      	movs	r1, #4
 800c892:	f00b fd09 	bl	80182a8 <lv_imgbtn_set_src>
	lv_obj_set_event_cb(imgbtn_prev, btn_event_prev_vpa);
 800c896:	6820      	ldr	r0, [r4, #0]
 800c898:	4907      	ldr	r1, [pc, #28]	; (800c8b8 <btn_prev_vpa+0x64>)
 800c89a:	f002 feda 	bl	800f652 <lv_obj_set_event_cb>
	lv_obj_set_pos(imgbtn_prev, 32, 18);
 800c89e:	6820      	ldr	r0, [r4, #0]
 800c8a0:	2212      	movs	r2, #18
 800c8a2:	2120      	movs	r1, #32
}
 800c8a4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	lv_obj_set_pos(imgbtn_prev, 32, 18);
 800c8a8:	f003 b81d 	b.w	800f8e6 <lv_obj_set_pos>
 800c8ac:	200058fc 	.word	0x200058fc
 800c8b0:	20001ba4 	.word	0x20001ba4
 800c8b4:	200059b0 	.word	0x200059b0
 800c8b8:	0800c7c5 	.word	0x0800c7c5
 800c8bc:	00000000 	.word	0x00000000

0800c8c0 <print_vpa_1>:

void print_vpa_1(uint32_t vpa)
{
 800c8c0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	vpa = 3900;
	float resul = (float) ( vpa * (3.30 / 4095.0)) * 5;
	sprintf(buffer, "%0.1f", resul);
 800c8c2:	4f27      	ldr	r7, [pc, #156]	; (800c960 <print_vpa_1+0xa0>)

	// Area de VPA
	static lv_style_t style_txt1;
	lv_style_copy(&style_txt1, &lv_style_plain);
 800c8c4:	4c27      	ldr	r4, [pc, #156]	; (800c964 <print_vpa_1+0xa4>)
	sprintf(buffer, "%0.1f", resul);
 800c8c6:	4928      	ldr	r1, [pc, #160]	; (800c968 <print_vpa_1+0xa8>)
	style_txt1.text.letter_space = 1;
	style_txt1.text.line_space = 1;
	style_txt1.text.color = LV_COLOR_CYAN;

	// Cria um novo rotulo
	txt_vpa = lv_label_create(Tela_Reading_VPA, NULL);
 800c8c8:	4d28      	ldr	r5, [pc, #160]	; (800c96c <print_vpa_1+0xac>)
	sprintf(buffer, "%0.1f", resul);
 800c8ca:	a323      	add	r3, pc, #140	; (adr r3, 800c958 <print_vpa_1+0x98>)
 800c8cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c8d0:	4638      	mov	r0, r7
 800c8d2:	f00e faa1 	bl	801ae18 <sprintf>
	lv_style_copy(&style_txt1, &lv_style_plain);
 800c8d6:	4620      	mov	r0, r4
 800c8d8:	4925      	ldr	r1, [pc, #148]	; (800c970 <print_vpa_1+0xb0>)
 800c8da:	f004 f9c5 	bl	8010c68 <lv_style_copy>
	style_txt1.text.font = &lv_font_eurostile_24;
 800c8de:	4b25      	ldr	r3, [pc, #148]	; (800c974 <print_vpa_1+0xb4>)
 800c8e0:	6263      	str	r3, [r4, #36]	; 0x24
	style_txt1.text.color = LV_COLOR_CYAN;
 800c8e2:	f894 3020 	ldrb.w	r3, [r4, #32]
 800c8e6:	f043 031f 	orr.w	r3, r3, #31
 800c8ea:	f884 3020 	strb.w	r3, [r4, #32]
 800c8ee:	8c23      	ldrh	r3, [r4, #32]
 800c8f0:	f443 63fc 	orr.w	r3, r3, #2016	; 0x7e0
 800c8f4:	8423      	strh	r3, [r4, #32]
 800c8f6:	0a1b      	lsrs	r3, r3, #8
 800c8f8:	f36f 03c7 	bfc	r3, #3, #5
 800c8fc:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
	txt_vpa = lv_label_create(Tela_Reading_VPA, NULL);
 800c900:	4b1d      	ldr	r3, [pc, #116]	; (800c978 <print_vpa_1+0xb8>)
	style_txt1.text.letter_space = 1;
 800c902:	2601      	movs	r6, #1
	txt_vpa = lv_label_create(Tela_Reading_VPA, NULL);
 800c904:	6818      	ldr	r0, [r3, #0]
	style_txt1.text.letter_space = 1;
 800c906:	8526      	strh	r6, [r4, #40]	; 0x28
	txt_vpa = lv_label_create(Tela_Reading_VPA, NULL);
 800c908:	2100      	movs	r1, #0
	style_txt1.text.line_space = 1;
 800c90a:	8566      	strh	r6, [r4, #42]	; 0x2a
	txt_vpa = lv_label_create(Tela_Reading_VPA, NULL);
 800c90c:	f00c fa28 	bl	8018d60 <lv_label_create>
	lv_obj_set_style(txt_vpa, &style_txt1); 						// Configura o estilo criado
 800c910:	4621      	mov	r1, r4
	txt_vpa = lv_label_create(Tela_Reading_VPA, NULL);
 800c912:	6028      	str	r0, [r5, #0]
	lv_obj_set_style(txt_vpa, &style_txt1); 						// Configura o estilo criado
 800c914:	f003 fcde 	bl	80102d4 <lv_obj_set_style>
	lv_label_set_long_mode(txt_vpa, LV_LABEL_LONG_EXPAND); 			// Quebra as linhas longas
 800c918:	6828      	ldr	r0, [r5, #0]
 800c91a:	2100      	movs	r1, #0
 800c91c:	f00c f9ca 	bl	8018cb4 <lv_label_set_long_mode>
	lv_label_set_recolor(txt_vpa, true); 							// Ativa recolorizar por comandos no texto
 800c920:	4631      	mov	r1, r6
 800c922:	6828      	ldr	r0, [r5, #0]
 800c924:	f00c fa08 	bl	8018d38 <lv_label_set_recolor>
	lv_label_set_align(txt_vpa, LV_ALIGN_IN_TOP_RIGHT); 			// Centraliza linhas alinhadas
 800c928:	6828      	ldr	r0, [r5, #0]
 800c92a:	2103      	movs	r1, #3
 800c92c:	f00b fe61 	bl	80185f2 <lv_label_set_align>
	lv_label_set_text(txt_vpa, buffer);
 800c930:	4639      	mov	r1, r7
 800c932:	6828      	ldr	r0, [r5, #0]
 800c934:	f00c f96a 	bl	8018c0c <lv_label_set_text>
	lv_obj_set_width(txt_vpa, 300); 								// Configuura o comprimento
 800c938:	6828      	ldr	r0, [r5, #0]
 800c93a:	f44f 7196 	mov.w	r1, #300	; 0x12c
 800c93e:	f003 fc11 	bl	8010164 <lv_obj_set_width>
	lv_obj_align(txt_vpa, NULL, LV_ALIGN_IN_TOP_RIGHT, -70, 34); 	// Alinha ao centro
 800c942:	2322      	movs	r3, #34	; 0x22
 800c944:	9300      	str	r3, [sp, #0]
 800c946:	2203      	movs	r2, #3
 800c948:	f06f 0345 	mvn.w	r3, #69	; 0x45
 800c94c:	2100      	movs	r1, #0
 800c94e:	6828      	ldr	r0, [r5, #0]
 800c950:	f003 f81e 	bl	800f990 <lv_obj_align>
}
 800c954:	b003      	add	sp, #12
 800c956:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c958:	c0000000 	.word	0xc0000000
 800c95c:	402f6db6 	.word	0x402f6db6
 800c960:	20004d48 	.word	0x20004d48
 800c964:	20005a2c 	.word	0x20005a2c
 800c968:	0802cbb8 	.word	0x0802cbb8
 800c96c:	20005aa8 	.word	0x20005aa8
 800c970:	2000c6a8 	.word	0x2000c6a8
 800c974:	20001338 	.word	0x20001338
 800c978:	200058fc 	.word	0x200058fc
 800c97c:	00000000 	.word	0x00000000

0800c980 <print_ipa_1>:

void print_ipa_1(uint32_t ipa)
{
 800c980:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	ipa = 2000;
	float resul = (float) ( ipa * (3.30 / 4095.0)) * 0.98;
	sprintf(buffer, "%0.1f", resul);
 800c982:	4f27      	ldr	r7, [pc, #156]	; (800ca20 <print_ipa_1+0xa0>)

	// Area de VPA
	static lv_style_t style_txt1;
	lv_style_copy(&style_txt1, &lv_style_plain);
 800c984:	4c27      	ldr	r4, [pc, #156]	; (800ca24 <print_ipa_1+0xa4>)
	sprintf(buffer, "%0.1f", resul);
 800c986:	4928      	ldr	r1, [pc, #160]	; (800ca28 <print_ipa_1+0xa8>)
	style_txt1.text.letter_space = 1;
	style_txt1.text.line_space = 1;
	style_txt1.text.color = LV_COLOR_CYAN;

	// Cria um novo rotulo
	txt_ipa = lv_label_create(Tela_Reading_VPA, NULL);
 800c988:	4d28      	ldr	r5, [pc, #160]	; (800ca2c <print_ipa_1+0xac>)
	sprintf(buffer, "%0.1f", resul);
 800c98a:	a323      	add	r3, pc, #140	; (adr r3, 800ca18 <print_ipa_1+0x98>)
 800c98c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c990:	4638      	mov	r0, r7
 800c992:	f00e fa41 	bl	801ae18 <sprintf>
	lv_style_copy(&style_txt1, &lv_style_plain);
 800c996:	4620      	mov	r0, r4
 800c998:	4925      	ldr	r1, [pc, #148]	; (800ca30 <print_ipa_1+0xb0>)
 800c99a:	f004 f965 	bl	8010c68 <lv_style_copy>
	style_txt1.text.font = &lv_font_eurostile_24;
 800c99e:	4b25      	ldr	r3, [pc, #148]	; (800ca34 <print_ipa_1+0xb4>)
 800c9a0:	6263      	str	r3, [r4, #36]	; 0x24
	style_txt1.text.color = LV_COLOR_CYAN;
 800c9a2:	f894 3020 	ldrb.w	r3, [r4, #32]
 800c9a6:	f043 031f 	orr.w	r3, r3, #31
 800c9aa:	f884 3020 	strb.w	r3, [r4, #32]
 800c9ae:	8c23      	ldrh	r3, [r4, #32]
 800c9b0:	f443 63fc 	orr.w	r3, r3, #2016	; 0x7e0
 800c9b4:	8423      	strh	r3, [r4, #32]
 800c9b6:	0a1b      	lsrs	r3, r3, #8
 800c9b8:	f36f 03c7 	bfc	r3, #3, #5
 800c9bc:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
	txt_ipa = lv_label_create(Tela_Reading_VPA, NULL);
 800c9c0:	4b1d      	ldr	r3, [pc, #116]	; (800ca38 <print_ipa_1+0xb8>)
	style_txt1.text.letter_space = 1;
 800c9c2:	2601      	movs	r6, #1
	txt_ipa = lv_label_create(Tela_Reading_VPA, NULL);
 800c9c4:	6818      	ldr	r0, [r3, #0]
	style_txt1.text.letter_space = 1;
 800c9c6:	8526      	strh	r6, [r4, #40]	; 0x28
	txt_ipa = lv_label_create(Tela_Reading_VPA, NULL);
 800c9c8:	2100      	movs	r1, #0
	style_txt1.text.line_space = 1;
 800c9ca:	8566      	strh	r6, [r4, #42]	; 0x2a
	txt_ipa = lv_label_create(Tela_Reading_VPA, NULL);
 800c9cc:	f00c f9c8 	bl	8018d60 <lv_label_create>
	lv_obj_set_style(txt_ipa, &style_txt1); 						// Configura o estilo criado
 800c9d0:	4621      	mov	r1, r4
	txt_ipa = lv_label_create(Tela_Reading_VPA, NULL);
 800c9d2:	6028      	str	r0, [r5, #0]
	lv_obj_set_style(txt_ipa, &style_txt1); 						// Configura o estilo criado
 800c9d4:	f003 fc7e 	bl	80102d4 <lv_obj_set_style>
	lv_label_set_long_mode(txt_ipa, LV_LABEL_LONG_EXPAND); 			// Quebra as linhas longas
 800c9d8:	6828      	ldr	r0, [r5, #0]
 800c9da:	2100      	movs	r1, #0
 800c9dc:	f00c f96a 	bl	8018cb4 <lv_label_set_long_mode>
	lv_label_set_recolor(txt_ipa, true); 							// Ativa recolorizar por comandos no texto
 800c9e0:	4631      	mov	r1, r6
 800c9e2:	6828      	ldr	r0, [r5, #0]
 800c9e4:	f00c f9a8 	bl	8018d38 <lv_label_set_recolor>
	lv_label_set_align(txt_ipa, LV_ALIGN_IN_TOP_RIGHT); 			// Centraliza linhas alinhadas
 800c9e8:	6828      	ldr	r0, [r5, #0]
 800c9ea:	2103      	movs	r1, #3
 800c9ec:	f00b fe01 	bl	80185f2 <lv_label_set_align>
	lv_label_set_text(txt_ipa, buffer);
 800c9f0:	4639      	mov	r1, r7
 800c9f2:	6828      	ldr	r0, [r5, #0]
 800c9f4:	f00c f90a 	bl	8018c0c <lv_label_set_text>
	lv_obj_set_width(txt_ipa, 300); 								// Configuura o comprimento
 800c9f8:	6828      	ldr	r0, [r5, #0]
 800c9fa:	f44f 7196 	mov.w	r1, #300	; 0x12c
 800c9fe:	f003 fbb1 	bl	8010164 <lv_obj_set_width>
	lv_obj_align(txt_ipa, NULL, LV_ALIGN_IN_TOP_RIGHT, -70, 77); 	// Alinha ao centro
 800ca02:	234d      	movs	r3, #77	; 0x4d
 800ca04:	9300      	str	r3, [sp, #0]
 800ca06:	2203      	movs	r2, #3
 800ca08:	f06f 0345 	mvn.w	r3, #69	; 0x45
 800ca0c:	2100      	movs	r1, #0
 800ca0e:	6828      	ldr	r0, [r5, #0]
 800ca10:	f002 ffbe 	bl	800f990 <lv_obj_align>
}
 800ca14:	b003      	add	sp, #12
 800ca16:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ca18:	60000000 	.word	0x60000000
 800ca1c:	3ff94594 	.word	0x3ff94594
 800ca20:	20004d48 	.word	0x20004d48
 800ca24:	20005a68 	.word	0x20005a68
 800ca28:	0802cbb8 	.word	0x0802cbb8
 800ca2c:	20005aa4 	.word	0x20005aa4
 800ca30:	2000c6a8 	.word	0x2000c6a8
 800ca34:	20001338 	.word	0x20001338
 800ca38:	200058fc 	.word	0x200058fc

0800ca3c <create_vumeter_vpa_1>:

void create_vumeter_vpa_1(void)
{
 800ca3c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	// Area do Barguraph
	// Indicador OFF
	lv_style_copy(&style_indic_bar, &lv_style_pretty);
 800ca3e:	4e30      	ldr	r6, [pc, #192]	; (800cb00 <create_vumeter_vpa_1+0xc4>)
 800ca40:	4930      	ldr	r1, [pc, #192]	; (800cb04 <create_vumeter_vpa_1+0xc8>)
	style_indic_bar.body.radius = 0;
	style_indic_bar.body.grad_color = LV_COLOR_MAKE(105, 105, 105);
	style_indic_bar.body.main_color = LV_COLOR_MAKE(105, 105, 105);
	style_indic_bar.body.border.color = LV_COLOR_MAKE(105, 105, 105);

	lv_style_copy(&style_indic_bar_vd, &lv_style_pretty);
 800ca42:	4c31      	ldr	r4, [pc, #196]	; (800cb08 <create_vumeter_vpa_1+0xcc>)
	style_indic_bar_vd.body.main_color = LV_COLOR_MAKE(0, 255, 0);
	style_indic_bar_vd.body.border.color = LV_COLOR_MAKE(0, 255, 0);

	// Create a default bar
	for(uint8_t x = 0; x < 21; x++) {
		bar_vpa[x] = lv_bar_create(Tela_Reading_VPA, NULL);
 800ca44:	4f31      	ldr	r7, [pc, #196]	; (800cb0c <create_vumeter_vpa_1+0xd0>)
	lv_style_copy(&style_indic_bar, &lv_style_pretty);
 800ca46:	4630      	mov	r0, r6
 800ca48:	f004 f90e 	bl	8010c68 <lv_style_copy>
	style_indic_bar.body.grad_color = LV_COLOR_MAKE(105, 105, 105);
 800ca4c:	4b30      	ldr	r3, [pc, #192]	; (800cb10 <create_vumeter_vpa_1+0xd4>)
	lv_style_copy(&style_indic_bar_vd, &lv_style_pretty);
 800ca4e:	492d      	ldr	r1, [pc, #180]	; (800cb04 <create_vumeter_vpa_1+0xc8>)
	style_indic_bar.body.grad_color = LV_COLOR_MAKE(105, 105, 105);
 800ca50:	881b      	ldrh	r3, [r3, #0]
 800ca52:	80b3      	strh	r3, [r6, #4]
	style_indic_bar.body.radius = 0;
 800ca54:	2500      	movs	r5, #0
	lv_style_copy(&style_indic_bar_vd, &lv_style_pretty);
 800ca56:	4620      	mov	r0, r4
	style_indic_bar.body.main_color = LV_COLOR_MAKE(105, 105, 105);
 800ca58:	8073      	strh	r3, [r6, #2]
	style_indic_bar.body.border.color = LV_COLOR_MAKE(105, 105, 105);
 800ca5a:	8173      	strh	r3, [r6, #10]
	style_indic_bar.body.radius = 0;
 800ca5c:	80f5      	strh	r5, [r6, #6]
	lv_style_copy(&style_indic_bar_vd, &lv_style_pretty);
 800ca5e:	f004 f903 	bl	8010c68 <lv_style_copy>
	style_indic_bar_vd.body.grad_color = LV_COLOR_MAKE(0, 255, 0);
 800ca62:	7923      	ldrb	r3, [r4, #4]
	style_indic_bar_vd.body.radius = 0;
 800ca64:	80e5      	strh	r5, [r4, #6]
	style_indic_bar_vd.body.grad_color = LV_COLOR_MAKE(0, 255, 0);
 800ca66:	f365 0304 	bfi	r3, r5, #0, #5
 800ca6a:	7123      	strb	r3, [r4, #4]
 800ca6c:	88a3      	ldrh	r3, [r4, #4]
 800ca6e:	f443 63fc 	orr.w	r3, r3, #2016	; 0x7e0
 800ca72:	80a3      	strh	r3, [r4, #4]
 800ca74:	0a1b      	lsrs	r3, r3, #8
 800ca76:	f365 03c7 	bfi	r3, r5, #3, #5
 800ca7a:	7163      	strb	r3, [r4, #5]
	style_indic_bar_vd.body.main_color = LV_COLOR_MAKE(0, 255, 0);
 800ca7c:	78a3      	ldrb	r3, [r4, #2]
 800ca7e:	f365 0304 	bfi	r3, r5, #0, #5
 800ca82:	70a3      	strb	r3, [r4, #2]
 800ca84:	8863      	ldrh	r3, [r4, #2]
 800ca86:	f443 63fc 	orr.w	r3, r3, #2016	; 0x7e0
 800ca8a:	8063      	strh	r3, [r4, #2]
 800ca8c:	0a1b      	lsrs	r3, r3, #8
 800ca8e:	f365 03c7 	bfi	r3, r5, #3, #5
 800ca92:	70e3      	strb	r3, [r4, #3]
	style_indic_bar_vd.body.border.color = LV_COLOR_MAKE(0, 255, 0);
 800ca94:	7aa3      	ldrb	r3, [r4, #10]
 800ca96:	f365 0304 	bfi	r3, r5, #0, #5
 800ca9a:	72a3      	strb	r3, [r4, #10]
 800ca9c:	8963      	ldrh	r3, [r4, #10]
 800ca9e:	f443 63fc 	orr.w	r3, r3, #2016	; 0x7e0
 800caa2:	8163      	strh	r3, [r4, #10]
 800caa4:	0a1b      	lsrs	r3, r3, #8
 800caa6:	f365 03c7 	bfi	r3, r5, #3, #5
 800caaa:	72e3      	strb	r3, [r4, #11]
 800caac:	4c19      	ldr	r4, [pc, #100]	; (800cb14 <create_vumeter_vpa_1+0xd8>)
		bar_vpa[x] = lv_bar_create(Tela_Reading_VPA, NULL);
 800caae:	6838      	ldr	r0, [r7, #0]
 800cab0:	2100      	movs	r1, #0
 800cab2:	f009 fb43 	bl	801613c <lv_bar_create>
		lv_obj_set_size(bar_vpa[x], 4, 13);
 800cab6:	220d      	movs	r2, #13
		bar_vpa[x] = lv_bar_create(Tela_Reading_VPA, NULL);
 800cab8:	6060      	str	r0, [r4, #4]
		lv_obj_set_size(bar_vpa[x], 4, 13);
 800caba:	2104      	movs	r1, #4
 800cabc:	f003 fb08 	bl	80100d0 <lv_obj_set_size>
		lv_bar_set_style(bar_vpa[x], LV_BAR_STYLE_BG, &style_indic_bar);
 800cac0:	6860      	ldr	r0, [r4, #4]
 800cac2:	4632      	mov	r2, r6
 800cac4:	2100      	movs	r1, #0
 800cac6:	f009 fb23 	bl	8016110 <lv_bar_set_style>
		lv_bar_set_style(bar_vpa[x], LV_BAR_STYLE_INDIC, &style_indic_bar);
 800caca:	6860      	ldr	r0, [r4, #4]
 800cacc:	4632      	mov	r2, r6
 800cace:	2101      	movs	r1, #1
 800cad0:	f009 fb1e 	bl	8016110 <lv_bar_set_style>
		lv_obj_align(bar_vpa[x], NULL, LV_ALIGN_IN_TOP_LEFT, vpa_pos_x[x], 57);
 800cad4:	2239      	movs	r2, #57	; 0x39
 800cad6:	4b10      	ldr	r3, [pc, #64]	; (800cb18 <create_vumeter_vpa_1+0xdc>)
 800cad8:	9200      	str	r2, [sp, #0]
 800cada:	f933 3025 	ldrsh.w	r3, [r3, r5, lsl #2]
 800cade:	6860      	ldr	r0, [r4, #4]
 800cae0:	2201      	movs	r2, #1
 800cae2:	2100      	movs	r1, #0
 800cae4:	f002 ff54 	bl	800f990 <lv_obj_align>
 800cae8:	3501      	adds	r5, #1
		lv_bar_set_value(bar_vpa[x], 100, 0);
 800caea:	2200      	movs	r2, #0
 800caec:	2164      	movs	r1, #100	; 0x64
 800caee:	f854 0f04 	ldr.w	r0, [r4, #4]!
 800caf2:	f009 fab1 	bl	8016058 <lv_bar_set_value>
	for(uint8_t x = 0; x < 21; x++) {
 800caf6:	2d15      	cmp	r5, #21
 800caf8:	d1d9      	bne.n	800caae <create_vumeter_vpa_1+0x72>
	}
}
 800cafa:	b003      	add	sp, #12
 800cafc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800cafe:	bf00      	nop
 800cb00:	200059b4 	.word	0x200059b4
 800cb04:	2000c5b8 	.word	0x2000c5b8
 800cb08:	200059f0 	.word	0x200059f0
 800cb0c:	200058fc 	.word	0x200058fc
 800cb10:	0801d8d0 	.word	0x0801d8d0
 800cb14:	20005950 	.word	0x20005950
 800cb18:	0802cc84 	.word	0x0802cc84

0800cb1c <create_vumeter_ipa_1>:

void create_vumeter_ipa_1(void)
{
 800cb1c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	// Area do Barguraph
	// Indicador OFF
	lv_style_copy(&style_indic_bar, &lv_style_pretty);
 800cb1e:	4e30      	ldr	r6, [pc, #192]	; (800cbe0 <create_vumeter_ipa_1+0xc4>)
 800cb20:	4930      	ldr	r1, [pc, #192]	; (800cbe4 <create_vumeter_ipa_1+0xc8>)
	style_indic_bar.body.radius = 0;
	style_indic_bar.body.grad_color = LV_COLOR_MAKE(105, 105, 105);
	style_indic_bar.body.main_color = LV_COLOR_MAKE(105, 105, 105);
	style_indic_bar.body.border.color = LV_COLOR_MAKE(105, 105, 105);

	lv_style_copy(&style_indic_bar_vd, &lv_style_pretty);
 800cb22:	4c31      	ldr	r4, [pc, #196]	; (800cbe8 <create_vumeter_ipa_1+0xcc>)
	style_indic_bar_vd.body.main_color = LV_COLOR_MAKE(0, 255, 0);
	style_indic_bar_vd.body.border.color = LV_COLOR_MAKE(0, 255, 0);

	// Create a default bar
	for(uint8_t x = 0; x < 21; x++) {
		bar_ipa[x] = lv_bar_create(Tela_Reading_VPA, NULL);
 800cb24:	4f31      	ldr	r7, [pc, #196]	; (800cbec <create_vumeter_ipa_1+0xd0>)
	lv_style_copy(&style_indic_bar, &lv_style_pretty);
 800cb26:	4630      	mov	r0, r6
 800cb28:	f004 f89e 	bl	8010c68 <lv_style_copy>
	style_indic_bar.body.grad_color = LV_COLOR_MAKE(105, 105, 105);
 800cb2c:	4b30      	ldr	r3, [pc, #192]	; (800cbf0 <create_vumeter_ipa_1+0xd4>)
	lv_style_copy(&style_indic_bar_vd, &lv_style_pretty);
 800cb2e:	492d      	ldr	r1, [pc, #180]	; (800cbe4 <create_vumeter_ipa_1+0xc8>)
	style_indic_bar.body.grad_color = LV_COLOR_MAKE(105, 105, 105);
 800cb30:	881b      	ldrh	r3, [r3, #0]
 800cb32:	80b3      	strh	r3, [r6, #4]
	style_indic_bar.body.radius = 0;
 800cb34:	2500      	movs	r5, #0
	lv_style_copy(&style_indic_bar_vd, &lv_style_pretty);
 800cb36:	4620      	mov	r0, r4
	style_indic_bar.body.main_color = LV_COLOR_MAKE(105, 105, 105);
 800cb38:	8073      	strh	r3, [r6, #2]
	style_indic_bar.body.border.color = LV_COLOR_MAKE(105, 105, 105);
 800cb3a:	8173      	strh	r3, [r6, #10]
	style_indic_bar.body.radius = 0;
 800cb3c:	80f5      	strh	r5, [r6, #6]
	lv_style_copy(&style_indic_bar_vd, &lv_style_pretty);
 800cb3e:	f004 f893 	bl	8010c68 <lv_style_copy>
	style_indic_bar_vd.body.grad_color = LV_COLOR_MAKE(0, 255, 0);
 800cb42:	7923      	ldrb	r3, [r4, #4]
	style_indic_bar_vd.body.radius = 0;
 800cb44:	80e5      	strh	r5, [r4, #6]
	style_indic_bar_vd.body.grad_color = LV_COLOR_MAKE(0, 255, 0);
 800cb46:	f365 0304 	bfi	r3, r5, #0, #5
 800cb4a:	7123      	strb	r3, [r4, #4]
 800cb4c:	88a3      	ldrh	r3, [r4, #4]
 800cb4e:	f443 63fc 	orr.w	r3, r3, #2016	; 0x7e0
 800cb52:	80a3      	strh	r3, [r4, #4]
 800cb54:	0a1b      	lsrs	r3, r3, #8
 800cb56:	f365 03c7 	bfi	r3, r5, #3, #5
 800cb5a:	7163      	strb	r3, [r4, #5]
	style_indic_bar_vd.body.main_color = LV_COLOR_MAKE(0, 255, 0);
 800cb5c:	78a3      	ldrb	r3, [r4, #2]
 800cb5e:	f365 0304 	bfi	r3, r5, #0, #5
 800cb62:	70a3      	strb	r3, [r4, #2]
 800cb64:	8863      	ldrh	r3, [r4, #2]
 800cb66:	f443 63fc 	orr.w	r3, r3, #2016	; 0x7e0
 800cb6a:	8063      	strh	r3, [r4, #2]
 800cb6c:	0a1b      	lsrs	r3, r3, #8
 800cb6e:	f365 03c7 	bfi	r3, r5, #3, #5
 800cb72:	70e3      	strb	r3, [r4, #3]
	style_indic_bar_vd.body.border.color = LV_COLOR_MAKE(0, 255, 0);
 800cb74:	7aa3      	ldrb	r3, [r4, #10]
 800cb76:	f365 0304 	bfi	r3, r5, #0, #5
 800cb7a:	72a3      	strb	r3, [r4, #10]
 800cb7c:	8963      	ldrh	r3, [r4, #10]
 800cb7e:	f443 63fc 	orr.w	r3, r3, #2016	; 0x7e0
 800cb82:	8163      	strh	r3, [r4, #10]
 800cb84:	0a1b      	lsrs	r3, r3, #8
 800cb86:	f365 03c7 	bfi	r3, r5, #3, #5
 800cb8a:	72e3      	strb	r3, [r4, #11]
 800cb8c:	4c19      	ldr	r4, [pc, #100]	; (800cbf4 <create_vumeter_ipa_1+0xd8>)
		bar_ipa[x] = lv_bar_create(Tela_Reading_VPA, NULL);
 800cb8e:	6838      	ldr	r0, [r7, #0]
 800cb90:	2100      	movs	r1, #0
 800cb92:	f009 fad3 	bl	801613c <lv_bar_create>
		lv_obj_set_size(bar_ipa[x], 4, 13);
 800cb96:	220d      	movs	r2, #13
		bar_ipa[x] = lv_bar_create(Tela_Reading_VPA, NULL);
 800cb98:	6060      	str	r0, [r4, #4]
		lv_obj_set_size(bar_ipa[x], 4, 13);
 800cb9a:	2104      	movs	r1, #4
 800cb9c:	f003 fa98 	bl	80100d0 <lv_obj_set_size>
		lv_bar_set_style(bar_ipa[x], LV_BAR_STYLE_BG, &style_indic_bar);
 800cba0:	6860      	ldr	r0, [r4, #4]
 800cba2:	4632      	mov	r2, r6
 800cba4:	2100      	movs	r1, #0
 800cba6:	f009 fab3 	bl	8016110 <lv_bar_set_style>
		lv_bar_set_style(bar_ipa[x], LV_BAR_STYLE_INDIC, &style_indic_bar);
 800cbaa:	6860      	ldr	r0, [r4, #4]
 800cbac:	4632      	mov	r2, r6
 800cbae:	2101      	movs	r1, #1
 800cbb0:	f009 faae 	bl	8016110 <lv_bar_set_style>
		lv_obj_align(bar_ipa[x], NULL, LV_ALIGN_IN_TOP_LEFT, ipa_pos_x[x], 99);
 800cbb4:	2263      	movs	r2, #99	; 0x63
 800cbb6:	4b10      	ldr	r3, [pc, #64]	; (800cbf8 <create_vumeter_ipa_1+0xdc>)
 800cbb8:	9200      	str	r2, [sp, #0]
 800cbba:	f933 3025 	ldrsh.w	r3, [r3, r5, lsl #2]
 800cbbe:	6860      	ldr	r0, [r4, #4]
 800cbc0:	2201      	movs	r2, #1
 800cbc2:	2100      	movs	r1, #0
 800cbc4:	f002 fee4 	bl	800f990 <lv_obj_align>
 800cbc8:	3501      	adds	r5, #1
		lv_bar_set_value(bar_ipa[x], 100, 0);
 800cbca:	2200      	movs	r2, #0
 800cbcc:	2164      	movs	r1, #100	; 0x64
 800cbce:	f854 0f04 	ldr.w	r0, [r4, #4]!
 800cbd2:	f009 fa41 	bl	8016058 <lv_bar_set_value>
	for(uint8_t x = 0; x < 21; x++) {
 800cbd6:	2d15      	cmp	r5, #21
 800cbd8:	d1d9      	bne.n	800cb8e <create_vumeter_ipa_1+0x72>
	}
}
 800cbda:	b003      	add	sp, #12
 800cbdc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800cbde:	bf00      	nop
 800cbe0:	200059b4 	.word	0x200059b4
 800cbe4:	2000c5b8 	.word	0x2000c5b8
 800cbe8:	200059f0 	.word	0x200059f0
 800cbec:	200058fc 	.word	0x200058fc
 800cbf0:	0801d8d0 	.word	0x0801d8d0
 800cbf4:	200058fc 	.word	0x200058fc
 800cbf8:	0802cc30 	.word	0x0802cc30

0800cbfc <update_vumeter_vpa_1>:

void update_vumeter_vpa_1(uint32_t value)
{
 800cbfc:	b570      	push	{r4, r5, r6, lr}
	uint32_t x;
	value = 3900;
	float resul = (float) ( (value * (3.30 / 4095.0)) * 5) / 0.75;

	for(x = 0; x <= resul; x++) {
		lv_bar_set_style(bar_vpa[x], LV_BAR_STYLE_BG, &style_indic_bar_vd);
 800cbfe:	4d0a      	ldr	r5, [pc, #40]	; (800cc28 <update_vumeter_vpa_1+0x2c>)
 800cc00:	4e0a      	ldr	r6, [pc, #40]	; (800cc2c <update_vumeter_vpa_1+0x30>)
	for(x = 0; x <= resul; x++) {
 800cc02:	2400      	movs	r4, #0
 800cc04:	2c15      	cmp	r4, #21
 800cc06:	d100      	bne.n	800cc0a <update_vumeter_vpa_1+0xe>
		lv_bar_set_style(bar_vpa[x], LV_BAR_STYLE_INDIC, &style_indic_bar_vd);
	}
}
 800cc08:	bd70      	pop	{r4, r5, r6, pc}
		lv_bar_set_style(bar_vpa[x], LV_BAR_STYLE_BG, &style_indic_bar_vd);
 800cc0a:	f855 0024 	ldr.w	r0, [r5, r4, lsl #2]
 800cc0e:	4632      	mov	r2, r6
 800cc10:	2100      	movs	r1, #0
 800cc12:	f009 fa7d 	bl	8016110 <lv_bar_set_style>
		lv_bar_set_style(bar_vpa[x], LV_BAR_STYLE_INDIC, &style_indic_bar_vd);
 800cc16:	f855 0024 	ldr.w	r0, [r5, r4, lsl #2]
 800cc1a:	4632      	mov	r2, r6
 800cc1c:	2101      	movs	r1, #1
 800cc1e:	f009 fa77 	bl	8016110 <lv_bar_set_style>
	for(x = 0; x <= resul; x++) {
 800cc22:	3401      	adds	r4, #1
 800cc24:	e7ee      	b.n	800cc04 <update_vumeter_vpa_1+0x8>
 800cc26:	bf00      	nop
 800cc28:	20005954 	.word	0x20005954
 800cc2c:	200059f0 	.word	0x200059f0

0800cc30 <update_vumeter_ipa_1>:

void update_vumeter_ipa_1(uint32_t value)
{
 800cc30:	b570      	push	{r4, r5, r6, lr}
	uint32_t x;
	value = 2000;
	float resul = (float) (( value * (3.30 / 4095.0)) * 0.98) / 0.10;

	for(x = 0; x <= resul; x++) {
		lv_bar_set_style(bar_ipa[x], LV_BAR_STYLE_BG, &style_indic_bar_vd);
 800cc32:	4d0a      	ldr	r5, [pc, #40]	; (800cc5c <update_vumeter_ipa_1+0x2c>)
 800cc34:	4e0a      	ldr	r6, [pc, #40]	; (800cc60 <update_vumeter_ipa_1+0x30>)
	for(x = 0; x <= resul; x++) {
 800cc36:	2400      	movs	r4, #0
 800cc38:	2c10      	cmp	r4, #16
 800cc3a:	d100      	bne.n	800cc3e <update_vumeter_ipa_1+0xe>
		lv_bar_set_style(bar_ipa[x], LV_BAR_STYLE_INDIC, &style_indic_bar_vd);
	}
}
 800cc3c:	bd70      	pop	{r4, r5, r6, pc}
		lv_bar_set_style(bar_ipa[x], LV_BAR_STYLE_BG, &style_indic_bar_vd);
 800cc3e:	f855 0024 	ldr.w	r0, [r5, r4, lsl #2]
 800cc42:	4632      	mov	r2, r6
 800cc44:	2100      	movs	r1, #0
 800cc46:	f009 fa63 	bl	8016110 <lv_bar_set_style>
		lv_bar_set_style(bar_ipa[x], LV_BAR_STYLE_INDIC, &style_indic_bar_vd);
 800cc4a:	f855 0024 	ldr.w	r0, [r5, r4, lsl #2]
 800cc4e:	4632      	mov	r2, r6
 800cc50:	2101      	movs	r1, #1
 800cc52:	f009 fa5d 	bl	8016110 <lv_bar_set_style>
	for(x = 0; x <= resul; x++) {
 800cc56:	3401      	adds	r4, #1
 800cc58:	e7ee      	b.n	800cc38 <update_vumeter_ipa_1+0x8>
 800cc5a:	bf00      	nop
 800cc5c:	20005900 	.word	0x20005900
 800cc60:	200059f0 	.word	0x200059f0

0800cc64 <screen_reading_vpa>:
	Tela_Reading_VPA = lv_obj_create(NULL, NULL);
 800cc64:	2100      	movs	r1, #0
{
 800cc66:	b538      	push	{r3, r4, r5, lr}
	Tela_Reading_VPA = lv_obj_create(NULL, NULL);
 800cc68:	4608      	mov	r0, r1
 800cc6a:	f003 f8b3 	bl	800fdd4 <lv_obj_create>
 800cc6e:	4c1b      	ldr	r4, [pc, #108]	; (800ccdc <screen_reading_vpa+0x78>)
	img_fundo = lv_img_create(Tela_Reading_VPA, NULL);
 800cc70:	4d1b      	ldr	r5, [pc, #108]	; (800cce0 <screen_reading_vpa+0x7c>)
	Tela_Reading_VPA = lv_obj_create(NULL, NULL);
 800cc72:	6020      	str	r0, [r4, #0]
	img_fundo = lv_img_create(Tela_Reading_VPA, NULL);
 800cc74:	2100      	movs	r1, #0
 800cc76:	f00b f9a5 	bl	8017fc4 <lv_img_create>
	lv_img_set_src(img_fundo, &tela_reading_vpa);
 800cc7a:	491a      	ldr	r1, [pc, #104]	; (800cce4 <screen_reading_vpa+0x80>)
	img_fundo = lv_img_create(Tela_Reading_VPA, NULL);
 800cc7c:	6028      	str	r0, [r5, #0]
	lv_img_set_src(img_fundo, &tela_reading_vpa);
 800cc7e:	f00b f911 	bl	8017ea4 <lv_img_set_src>
	lv_obj_set_protect(img_fundo, LV_PROTECT_POS);
 800cc82:	2104      	movs	r1, #4
 800cc84:	6828      	ldr	r0, [r5, #0]
 800cc86:	f002 fcd7 	bl	800f638 <lv_obj_set_protect>
	btn_next_vpa();
 800cc8a:	f7ff fdaf 	bl	800c7ec <btn_next_vpa>
	btn_prev_vpa();
 800cc8e:	f7ff fde1 	bl	800c854 <btn_prev_vpa>
	create_vumeter_vpa_1();
 800cc92:	f7ff fed3 	bl	800ca3c <create_vumeter_vpa_1>
	create_vumeter_ipa_1();
 800cc96:	f7ff ff41 	bl	800cb1c <create_vumeter_ipa_1>
	print_vpa_1(2000);
 800cc9a:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800cc9e:	f7ff fe0f 	bl	800c8c0 <print_vpa_1>
	print_ipa_1(2000);
 800cca2:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800cca6:	f7ff fe6b 	bl	800c980 <print_ipa_1>
	update_vumeter_vpa_1(2000);
 800ccaa:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800ccae:	f7ff ffa5 	bl	800cbfc <update_vumeter_vpa_1>
	update_vumeter_ipa_1(2000);
 800ccb2:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800ccb6:	f7ff ffbb 	bl	800cc30 <update_vumeter_ipa_1>
 800ccba:	6820      	ldr	r0, [r4, #0]
 800ccbc:	f002 fa76 	bl	800f1ac <lv_disp_load_scr>
    Task_Reading_VPA = lv_task_create(update_screen_vpa, 500, LV_TASK_PRIO_MID, NULL);
 800ccc0:	2300      	movs	r3, #0
 800ccc2:	2203      	movs	r2, #3
 800ccc4:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 800ccc8:	4807      	ldr	r0, [pc, #28]	; (800cce8 <screen_reading_vpa+0x84>)
 800ccca:	f008 ff21 	bl	8015b10 <lv_task_create>
 800ccce:	4b07      	ldr	r3, [pc, #28]	; (800ccec <screen_reading_vpa+0x88>)
 800ccd0:	6018      	str	r0, [r3, #0]
    TelaAtiva = TelaReading_Vpa;
 800ccd2:	4b07      	ldr	r3, [pc, #28]	; (800ccf0 <screen_reading_vpa+0x8c>)
 800ccd4:	220c      	movs	r2, #12
 800ccd6:	601a      	str	r2, [r3, #0]
 800ccd8:	bd38      	pop	{r3, r4, r5, pc}
 800ccda:	bf00      	nop
 800ccdc:	200058fc 	.word	0x200058fc
 800cce0:	200059a8 	.word	0x200059a8
 800cce4:	20001c4c 	.word	0x20001c4c
 800cce8:	0800ccf9 	.word	0x0800ccf9
 800ccec:	200058f8 	.word	0x200058f8
 800ccf0:	20003444 	.word	0x20003444
 800ccf4:	00000000 	.word	0x00000000

0800ccf8 <update_screen_vpa>:

static void update_screen_vpa(lv_task_t * param)
{
 800ccf8:	b538      	push	{r3, r4, r5, lr}
	uint32_t vpa = 3900;
	float resul = (float) ( vpa * (3.30 / 4095.0)) * 5;
	sprintf(buffer, "%0.1f", resul);
 800ccfa:	4c17      	ldr	r4, [pc, #92]	; (800cd58 <update_screen_vpa+0x60>)
 800ccfc:	4d17      	ldr	r5, [pc, #92]	; (800cd5c <update_screen_vpa+0x64>)
 800ccfe:	a312      	add	r3, pc, #72	; (adr r3, 800cd48 <update_screen_vpa+0x50>)
 800cd00:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cd04:	4629      	mov	r1, r5
 800cd06:	4620      	mov	r0, r4
 800cd08:	f00e f886 	bl	801ae18 <sprintf>
	lv_label_set_text(txt_vpa, buffer);
 800cd0c:	4b14      	ldr	r3, [pc, #80]	; (800cd60 <update_screen_vpa+0x68>)
 800cd0e:	4621      	mov	r1, r4
 800cd10:	6818      	ldr	r0, [r3, #0]
 800cd12:	f00b ff7b 	bl	8018c0c <lv_label_set_text>
	update_vumeter_vpa_1(vpa);
 800cd16:	f640 703c 	movw	r0, #3900	; 0xf3c
 800cd1a:	f7ff ff6f 	bl	800cbfc <update_vumeter_vpa_1>

	uint32_t ipa = 2000;
	resul = (float) ( ipa * (3.30 / 4095.0)) * 0.98;
	sprintf(buffer, "%0.1f", resul);
 800cd1e:	a30c      	add	r3, pc, #48	; (adr r3, 800cd50 <update_screen_vpa+0x58>)
 800cd20:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cd24:	4629      	mov	r1, r5
 800cd26:	4620      	mov	r0, r4
 800cd28:	f00e f876 	bl	801ae18 <sprintf>
	lv_label_set_text(txt_ipa, buffer);
 800cd2c:	4b0d      	ldr	r3, [pc, #52]	; (800cd64 <update_screen_vpa+0x6c>)
 800cd2e:	4621      	mov	r1, r4
 800cd30:	6818      	ldr	r0, [r3, #0]
 800cd32:	f00b ff6b 	bl	8018c0c <lv_label_set_text>
	update_vumeter_ipa_1(ipa);
 800cd36:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
}
 800cd3a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	update_vumeter_ipa_1(ipa);
 800cd3e:	f7ff bf77 	b.w	800cc30 <update_vumeter_ipa_1>
 800cd42:	bf00      	nop
 800cd44:	f3af 8000 	nop.w
 800cd48:	c0000000 	.word	0xc0000000
 800cd4c:	402f6db6 	.word	0x402f6db6
 800cd50:	60000000 	.word	0x60000000
 800cd54:	3ff94594 	.word	0x3ff94594
 800cd58:	20004d48 	.word	0x20004d48
 800cd5c:	0802cbb8 	.word	0x0802cbb8
 800cd60:	20005aa8 	.word	0x20005aa8
 800cd64:	20005aa4 	.word	0x20005aa4

0800cd68 <ButtonEventTelaReading_Vpa>:

void ButtonEventTelaReading_Vpa(uint8_t event, uint8_t tipo, uint8_t id)
{
	if(event == EVT_PBTN_INPUT) {
 800cd68:	2810      	cmp	r0, #16
 800cd6a:	d10e      	bne.n	800cd8a <ButtonEventTelaReading_Vpa+0x22>
		if(tipo == PBTN_SCLK) {	// Single Click
 800cd6c:	2901      	cmp	r1, #1
 800cd6e:	d10c      	bne.n	800cd8a <ButtonEventTelaReading_Vpa+0x22>
			switch(id) {
 800cd70:	b112      	cbz	r2, 800cd78 <ButtonEventTelaReading_Vpa+0x10>
 800cd72:	2a01      	cmp	r2, #1
 800cd74:	d005      	beq.n	800cd82 <ButtonEventTelaReading_Vpa+0x1a>
 800cd76:	4770      	bx	lr
				case KEY_DN:
					lv_event_send(imgbtn_prev, LV_EVENT_APPLY, NULL);
 800cd78:	4b04      	ldr	r3, [pc, #16]	; (800cd8c <ButtonEventTelaReading_Vpa+0x24>)
 800cd7a:	2111      	movs	r1, #17
					break;
				case KEY_UP:
					lv_event_send(imgbtn_next, LV_EVENT_APPLY, NULL);
 800cd7c:	6818      	ldr	r0, [r3, #0]
 800cd7e:	f002 bcaf 	b.w	800f6e0 <lv_event_send>
 800cd82:	2200      	movs	r2, #0
 800cd84:	2111      	movs	r1, #17
 800cd86:	4b02      	ldr	r3, [pc, #8]	; (800cd90 <ButtonEventTelaReading_Vpa+0x28>)
 800cd88:	e7f8      	b.n	800cd7c <ButtonEventTelaReading_Vpa+0x14>
 800cd8a:	4770      	bx	lr
 800cd8c:	200059b0 	.word	0x200059b0
 800cd90:	200059ac 	.word	0x200059ac

0800cd94 <btn_event_esc_r>:
	lv_obj_set_click(imgbtn_prev, 1);
}

static void btn_event_esc_r(lv_obj_t * btn, lv_event_t event)
{
	if(event == LV_EVENT_APPLY) {
 800cd94:	2911      	cmp	r1, #17
{
 800cd96:	b508      	push	{r3, lr}
	if(event == LV_EVENT_APPLY) {
 800cd98:	d10b      	bne.n	800cdb2 <btn_event_esc_r+0x1e>
		//printf("Button ESC Released\n");
		lv_task_del(Task_Readings);
 800cd9a:	4b06      	ldr	r3, [pc, #24]	; (800cdb4 <btn_event_esc_r+0x20>)
 800cd9c:	6818      	ldr	r0, [r3, #0]
 800cd9e:	f008 fdc7 	bl	8015930 <lv_task_del>
		lv_obj_del(Tela_Readings);
 800cda2:	4b05      	ldr	r3, [pc, #20]	; (800cdb8 <btn_event_esc_r+0x24>)
 800cda4:	6818      	ldr	r0, [r3, #0]
 800cda6:	f003 fa06 	bl	80101b6 <lv_obj_del>
		screen_sel();
	}
}
 800cdaa:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		screen_sel();
 800cdae:	f001 beaf 	b.w	800eb10 <screen_sel>
 800cdb2:	bd08      	pop	{r3, pc}
 800cdb4:	20005aac 	.word	0x20005aac
 800cdb8:	20005ab0 	.word	0x20005ab0

0800cdbc <btn_event_next_r>:
	if(event == LV_EVENT_APPLY) {
 800cdbc:	2911      	cmp	r1, #17
{
 800cdbe:	b508      	push	{r3, lr}
	if(event == LV_EVENT_APPLY) {
 800cdc0:	d10b      	bne.n	800cdda <btn_event_next_r+0x1e>
        lv_task_del(Task_Readings);
 800cdc2:	4b06      	ldr	r3, [pc, #24]	; (800cddc <btn_event_next_r+0x20>)
 800cdc4:	6818      	ldr	r0, [r3, #0]
 800cdc6:	f008 fdb3 	bl	8015930 <lv_task_del>
		lv_obj_del(Tela_Readings);
 800cdca:	4b05      	ldr	r3, [pc, #20]	; (800cde0 <btn_event_next_r+0x24>)
 800cdcc:	6818      	ldr	r0, [r3, #0]
 800cdce:	f003 f9f2 	bl	80101b6 <lv_obj_del>
}
 800cdd2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		screen_reading_mpx();
 800cdd6:	f7fe bedb 	b.w	800bb90 <screen_reading_mpx>
 800cdda:	bd08      	pop	{r3, pc}
 800cddc:	20005aac 	.word	0x20005aac
 800cde0:	20005ab0 	.word	0x20005ab0

0800cde4 <create_vumeter_swr_1>:
{
 800cde4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	lv_style_copy(&style_indic_bar, &lv_style_pretty);
 800cde6:	4e30      	ldr	r6, [pc, #192]	; (800cea8 <create_vumeter_swr_1+0xc4>)
 800cde8:	4930      	ldr	r1, [pc, #192]	; (800ceac <create_vumeter_swr_1+0xc8>)
	lv_style_copy(&style_indic_bar_vd, &lv_style_pretty);
 800cdea:	4c31      	ldr	r4, [pc, #196]	; (800ceb0 <create_vumeter_swr_1+0xcc>)
		bar_swr[x] = lv_bar_create(Tela_Readings, NULL);
 800cdec:	4f31      	ldr	r7, [pc, #196]	; (800ceb4 <create_vumeter_swr_1+0xd0>)
	lv_style_copy(&style_indic_bar, &lv_style_pretty);
 800cdee:	4630      	mov	r0, r6
 800cdf0:	f003 ff3a 	bl	8010c68 <lv_style_copy>
	style_indic_bar.body.grad_color = LV_COLOR_MAKE(105, 105, 105);
 800cdf4:	4b30      	ldr	r3, [pc, #192]	; (800ceb8 <create_vumeter_swr_1+0xd4>)
	lv_style_copy(&style_indic_bar_vd, &lv_style_pretty);
 800cdf6:	492d      	ldr	r1, [pc, #180]	; (800ceac <create_vumeter_swr_1+0xc8>)
	style_indic_bar.body.grad_color = LV_COLOR_MAKE(105, 105, 105);
 800cdf8:	881b      	ldrh	r3, [r3, #0]
 800cdfa:	80b3      	strh	r3, [r6, #4]
	style_indic_bar.body.radius = 0;
 800cdfc:	2500      	movs	r5, #0
	lv_style_copy(&style_indic_bar_vd, &lv_style_pretty);
 800cdfe:	4620      	mov	r0, r4
	style_indic_bar.body.main_color = LV_COLOR_MAKE(105, 105, 105);
 800ce00:	8073      	strh	r3, [r6, #2]
	style_indic_bar.body.border.color = LV_COLOR_MAKE(105, 105, 105);
 800ce02:	8173      	strh	r3, [r6, #10]
	style_indic_bar.body.radius = 0;
 800ce04:	80f5      	strh	r5, [r6, #6]
	lv_style_copy(&style_indic_bar_vd, &lv_style_pretty);
 800ce06:	f003 ff2f 	bl	8010c68 <lv_style_copy>
	style_indic_bar_vd.body.grad_color = LV_COLOR_MAKE(0, 255, 0);
 800ce0a:	7923      	ldrb	r3, [r4, #4]
	style_indic_bar_vd.body.radius = 0;
 800ce0c:	80e5      	strh	r5, [r4, #6]
	style_indic_bar_vd.body.grad_color = LV_COLOR_MAKE(0, 255, 0);
 800ce0e:	f365 0304 	bfi	r3, r5, #0, #5
 800ce12:	7123      	strb	r3, [r4, #4]
 800ce14:	88a3      	ldrh	r3, [r4, #4]
 800ce16:	f443 63fc 	orr.w	r3, r3, #2016	; 0x7e0
 800ce1a:	80a3      	strh	r3, [r4, #4]
 800ce1c:	0a1b      	lsrs	r3, r3, #8
 800ce1e:	f365 03c7 	bfi	r3, r5, #3, #5
 800ce22:	7163      	strb	r3, [r4, #5]
	style_indic_bar_vd.body.main_color = LV_COLOR_MAKE(0, 255, 0);
 800ce24:	78a3      	ldrb	r3, [r4, #2]
 800ce26:	f365 0304 	bfi	r3, r5, #0, #5
 800ce2a:	70a3      	strb	r3, [r4, #2]
 800ce2c:	8863      	ldrh	r3, [r4, #2]
 800ce2e:	f443 63fc 	orr.w	r3, r3, #2016	; 0x7e0
 800ce32:	8063      	strh	r3, [r4, #2]
 800ce34:	0a1b      	lsrs	r3, r3, #8
 800ce36:	f365 03c7 	bfi	r3, r5, #3, #5
 800ce3a:	70e3      	strb	r3, [r4, #3]
	style_indic_bar_vd.body.border.color = LV_COLOR_MAKE(0, 255, 0);
 800ce3c:	7aa3      	ldrb	r3, [r4, #10]
 800ce3e:	f365 0304 	bfi	r3, r5, #0, #5
 800ce42:	72a3      	strb	r3, [r4, #10]
 800ce44:	8963      	ldrh	r3, [r4, #10]
 800ce46:	f443 63fc 	orr.w	r3, r3, #2016	; 0x7e0
 800ce4a:	8163      	strh	r3, [r4, #10]
 800ce4c:	0a1b      	lsrs	r3, r3, #8
 800ce4e:	f365 03c7 	bfi	r3, r5, #3, #5
 800ce52:	72e3      	strb	r3, [r4, #11]
 800ce54:	4c19      	ldr	r4, [pc, #100]	; (800cebc <create_vumeter_swr_1+0xd8>)
		bar_swr[x] = lv_bar_create(Tela_Readings, NULL);
 800ce56:	6838      	ldr	r0, [r7, #0]
 800ce58:	2100      	movs	r1, #0
 800ce5a:	f009 f96f 	bl	801613c <lv_bar_create>
		lv_obj_set_size(bar_swr[x], 4, 14);
 800ce5e:	220e      	movs	r2, #14
		bar_swr[x] = lv_bar_create(Tela_Readings, NULL);
 800ce60:	6060      	str	r0, [r4, #4]
		lv_obj_set_size(bar_swr[x], 4, 14);
 800ce62:	2104      	movs	r1, #4
 800ce64:	f003 f934 	bl	80100d0 <lv_obj_set_size>
		lv_bar_set_style(bar_swr[x], LV_BAR_STYLE_BG, &style_indic_bar);
 800ce68:	6860      	ldr	r0, [r4, #4]
 800ce6a:	4632      	mov	r2, r6
 800ce6c:	2100      	movs	r1, #0
 800ce6e:	f009 f94f 	bl	8016110 <lv_bar_set_style>
		lv_bar_set_style(bar_swr[x], LV_BAR_STYLE_INDIC, &style_indic_bar);
 800ce72:	6860      	ldr	r0, [r4, #4]
 800ce74:	4632      	mov	r2, r6
 800ce76:	2101      	movs	r1, #1
 800ce78:	f009 f94a 	bl	8016110 <lv_bar_set_style>
		lv_obj_align(bar_swr[x], NULL, LV_ALIGN_IN_TOP_LEFT, swr1_pos_x[x], 99);
 800ce7c:	2263      	movs	r2, #99	; 0x63
 800ce7e:	4b10      	ldr	r3, [pc, #64]	; (800cec0 <create_vumeter_swr_1+0xdc>)
 800ce80:	9200      	str	r2, [sp, #0]
 800ce82:	f933 3025 	ldrsh.w	r3, [r3, r5, lsl #2]
 800ce86:	6860      	ldr	r0, [r4, #4]
 800ce88:	2201      	movs	r2, #1
 800ce8a:	2100      	movs	r1, #0
 800ce8c:	f002 fd80 	bl	800f990 <lv_obj_align>
 800ce90:	3501      	adds	r5, #1
		lv_bar_set_value(bar_swr[x], 100, 0);
 800ce92:	2200      	movs	r2, #0
 800ce94:	2164      	movs	r1, #100	; 0x64
 800ce96:	f854 0f04 	ldr.w	r0, [r4, #4]!
 800ce9a:	f009 f8dd 	bl	8016058 <lv_bar_set_value>
	for(uint8_t x = 0; x < 21; x++) {
 800ce9e:	2d15      	cmp	r5, #21
 800cea0:	d1d9      	bne.n	800ce56 <create_vumeter_swr_1+0x72>
}
 800cea2:	b003      	add	sp, #12
 800cea4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800cea6:	bf00      	nop
 800cea8:	20005b64 	.word	0x20005b64
 800ceac:	2000c5b8 	.word	0x2000c5b8
 800ceb0:	20005ba0 	.word	0x20005ba0
 800ceb4:	20005ab0 	.word	0x20005ab0
 800ceb8:	0801d8d2 	.word	0x0801d8d2
 800cebc:	20005b04 	.word	0x20005b04
 800cec0:	0802cd2c 	.word	0x0802cd2c

0800cec4 <create_vumeter_fwd_1>:
{
 800cec4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	lv_style_copy(&style_indic_bar, &lv_style_pretty);
 800cec6:	4e30      	ldr	r6, [pc, #192]	; (800cf88 <create_vumeter_fwd_1+0xc4>)
 800cec8:	4930      	ldr	r1, [pc, #192]	; (800cf8c <create_vumeter_fwd_1+0xc8>)
	lv_style_copy(&style_indic_bar_vd, &lv_style_pretty);
 800ceca:	4c31      	ldr	r4, [pc, #196]	; (800cf90 <create_vumeter_fwd_1+0xcc>)
		bar_fwd[x] = lv_bar_create(Tela_Readings, NULL);
 800cecc:	4f31      	ldr	r7, [pc, #196]	; (800cf94 <create_vumeter_fwd_1+0xd0>)
	lv_style_copy(&style_indic_bar, &lv_style_pretty);
 800cece:	4630      	mov	r0, r6
 800ced0:	f003 feca 	bl	8010c68 <lv_style_copy>
	style_indic_bar.body.grad_color = LV_COLOR_MAKE(105, 105, 105);
 800ced4:	4b30      	ldr	r3, [pc, #192]	; (800cf98 <create_vumeter_fwd_1+0xd4>)
	lv_style_copy(&style_indic_bar_vd, &lv_style_pretty);
 800ced6:	492d      	ldr	r1, [pc, #180]	; (800cf8c <create_vumeter_fwd_1+0xc8>)
	style_indic_bar.body.grad_color = LV_COLOR_MAKE(105, 105, 105);
 800ced8:	881b      	ldrh	r3, [r3, #0]
 800ceda:	80b3      	strh	r3, [r6, #4]
	style_indic_bar.body.radius = 0;
 800cedc:	2500      	movs	r5, #0
	lv_style_copy(&style_indic_bar_vd, &lv_style_pretty);
 800cede:	4620      	mov	r0, r4
	style_indic_bar.body.main_color = LV_COLOR_MAKE(105, 105, 105);
 800cee0:	8073      	strh	r3, [r6, #2]
	style_indic_bar.body.border.color = LV_COLOR_MAKE(105, 105, 105);
 800cee2:	8173      	strh	r3, [r6, #10]
	style_indic_bar.body.radius = 0;
 800cee4:	80f5      	strh	r5, [r6, #6]
	lv_style_copy(&style_indic_bar_vd, &lv_style_pretty);
 800cee6:	f003 febf 	bl	8010c68 <lv_style_copy>
	style_indic_bar_vd.body.grad_color = LV_COLOR_MAKE(0, 255, 0);
 800ceea:	7923      	ldrb	r3, [r4, #4]
	style_indic_bar_vd.body.radius = 0;
 800ceec:	80e5      	strh	r5, [r4, #6]
	style_indic_bar_vd.body.grad_color = LV_COLOR_MAKE(0, 255, 0);
 800ceee:	f365 0304 	bfi	r3, r5, #0, #5
 800cef2:	7123      	strb	r3, [r4, #4]
 800cef4:	88a3      	ldrh	r3, [r4, #4]
 800cef6:	f443 63fc 	orr.w	r3, r3, #2016	; 0x7e0
 800cefa:	80a3      	strh	r3, [r4, #4]
 800cefc:	0a1b      	lsrs	r3, r3, #8
 800cefe:	f365 03c7 	bfi	r3, r5, #3, #5
 800cf02:	7163      	strb	r3, [r4, #5]
	style_indic_bar_vd.body.main_color = LV_COLOR_MAKE(0, 255, 0);
 800cf04:	78a3      	ldrb	r3, [r4, #2]
 800cf06:	f365 0304 	bfi	r3, r5, #0, #5
 800cf0a:	70a3      	strb	r3, [r4, #2]
 800cf0c:	8863      	ldrh	r3, [r4, #2]
 800cf0e:	f443 63fc 	orr.w	r3, r3, #2016	; 0x7e0
 800cf12:	8063      	strh	r3, [r4, #2]
 800cf14:	0a1b      	lsrs	r3, r3, #8
 800cf16:	f365 03c7 	bfi	r3, r5, #3, #5
 800cf1a:	70e3      	strb	r3, [r4, #3]
	style_indic_bar_vd.body.border.color = LV_COLOR_MAKE(0, 255, 0);
 800cf1c:	7aa3      	ldrb	r3, [r4, #10]
 800cf1e:	f365 0304 	bfi	r3, r5, #0, #5
 800cf22:	72a3      	strb	r3, [r4, #10]
 800cf24:	8963      	ldrh	r3, [r4, #10]
 800cf26:	f443 63fc 	orr.w	r3, r3, #2016	; 0x7e0
 800cf2a:	8163      	strh	r3, [r4, #10]
 800cf2c:	0a1b      	lsrs	r3, r3, #8
 800cf2e:	f365 03c7 	bfi	r3, r5, #3, #5
 800cf32:	72e3      	strb	r3, [r4, #11]
 800cf34:	4c19      	ldr	r4, [pc, #100]	; (800cf9c <create_vumeter_fwd_1+0xd8>)
		bar_fwd[x] = lv_bar_create(Tela_Readings, NULL);
 800cf36:	6838      	ldr	r0, [r7, #0]
 800cf38:	2100      	movs	r1, #0
 800cf3a:	f009 f8ff 	bl	801613c <lv_bar_create>
		lv_obj_set_size(bar_fwd[x], 4, 14);
 800cf3e:	220e      	movs	r2, #14
		bar_fwd[x] = lv_bar_create(Tela_Readings, NULL);
 800cf40:	6060      	str	r0, [r4, #4]
		lv_obj_set_size(bar_fwd[x], 4, 14);
 800cf42:	2104      	movs	r1, #4
 800cf44:	f003 f8c4 	bl	80100d0 <lv_obj_set_size>
		lv_bar_set_style(bar_fwd[x], LV_BAR_STYLE_BG, &style_indic_bar);
 800cf48:	6860      	ldr	r0, [r4, #4]
 800cf4a:	4632      	mov	r2, r6
 800cf4c:	2100      	movs	r1, #0
 800cf4e:	f009 f8df 	bl	8016110 <lv_bar_set_style>
		lv_bar_set_style(bar_fwd[x], LV_BAR_STYLE_INDIC, &style_indic_bar);
 800cf52:	6860      	ldr	r0, [r4, #4]
 800cf54:	4632      	mov	r2, r6
 800cf56:	2101      	movs	r1, #1
 800cf58:	f009 f8da 	bl	8016110 <lv_bar_set_style>
		lv_obj_align(bar_fwd[x], NULL, LV_ALIGN_IN_TOP_LEFT, fwd1_pos_x[x], 56);
 800cf5c:	2238      	movs	r2, #56	; 0x38
 800cf5e:	4b10      	ldr	r3, [pc, #64]	; (800cfa0 <create_vumeter_fwd_1+0xdc>)
 800cf60:	9200      	str	r2, [sp, #0]
 800cf62:	f933 3025 	ldrsh.w	r3, [r3, r5, lsl #2]
 800cf66:	6860      	ldr	r0, [r4, #4]
 800cf68:	2201      	movs	r2, #1
 800cf6a:	2100      	movs	r1, #0
 800cf6c:	f002 fd10 	bl	800f990 <lv_obj_align>
 800cf70:	3501      	adds	r5, #1
		lv_bar_set_value(bar_fwd[x], 100, 0);
 800cf72:	2200      	movs	r2, #0
 800cf74:	2164      	movs	r1, #100	; 0x64
 800cf76:	f854 0f04 	ldr.w	r0, [r4, #4]!
 800cf7a:	f009 f86d 	bl	8016058 <lv_bar_set_value>
	for(uint8_t x = 0; x < 21; x++) {
 800cf7e:	2d15      	cmp	r5, #21
 800cf80:	d1d9      	bne.n	800cf36 <create_vumeter_fwd_1+0x72>
}
 800cf82:	b003      	add	sp, #12
 800cf84:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800cf86:	bf00      	nop
 800cf88:	20005b64 	.word	0x20005b64
 800cf8c:	2000c5b8 	.word	0x2000c5b8
 800cf90:	20005ba0 	.word	0x20005ba0
 800cf94:	20005ab0 	.word	0x20005ab0
 800cf98:	0801d8d2 	.word	0x0801d8d2
 800cf9c:	20005ab0 	.word	0x20005ab0
 800cfa0:	0802ccd8 	.word	0x0802ccd8

0800cfa4 <print_fwd_1>:
{
 800cfa4:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	lv_style_copy(&style_txt1, &lv_style_plain);
 800cfa6:	4c29      	ldr	r4, [pc, #164]	; (800d04c <print_fwd_1+0xa8>)
 800cfa8:	4929      	ldr	r1, [pc, #164]	; (800d050 <print_fwd_1+0xac>)
{
 800cfaa:	ed8d 0a03 	vstr	s0, [sp, #12]
	lv_style_copy(&style_txt1, &lv_style_plain);
 800cfae:	4620      	mov	r0, r4
 800cfb0:	f003 fe5a 	bl	8010c68 <lv_style_copy>
	style_txt1.text.font = &lv_font_eurostile_24;
 800cfb4:	4b27      	ldr	r3, [pc, #156]	; (800d054 <print_fwd_1+0xb0>)
 800cfb6:	6263      	str	r3, [r4, #36]	; 0x24
	style_txt1.text.color = LV_COLOR_CYAN;
 800cfb8:	f894 3020 	ldrb.w	r3, [r4, #32]
	txt_fwd = lv_label_create(Tela_Readings, NULL);
 800cfbc:	4d26      	ldr	r5, [pc, #152]	; (800d058 <print_fwd_1+0xb4>)
	style_txt1.text.color = LV_COLOR_CYAN;
 800cfbe:	f043 031f 	orr.w	r3, r3, #31
 800cfc2:	f884 3020 	strb.w	r3, [r4, #32]
 800cfc6:	8c23      	ldrh	r3, [r4, #32]
 800cfc8:	f443 63fc 	orr.w	r3, r3, #2016	; 0x7e0
 800cfcc:	8423      	strh	r3, [r4, #32]
 800cfce:	0a1b      	lsrs	r3, r3, #8
 800cfd0:	f36f 03c7 	bfc	r3, #3, #5
 800cfd4:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
	txt_fwd = lv_label_create(Tela_Readings, NULL);
 800cfd8:	4b20      	ldr	r3, [pc, #128]	; (800d05c <print_fwd_1+0xb8>)
	style_txt1.text.letter_space = 1;
 800cfda:	2601      	movs	r6, #1
	txt_fwd = lv_label_create(Tela_Readings, NULL);
 800cfdc:	6818      	ldr	r0, [r3, #0]
	style_txt1.text.letter_space = 1;
 800cfde:	8526      	strh	r6, [r4, #40]	; 0x28
	txt_fwd = lv_label_create(Tela_Readings, NULL);
 800cfe0:	2100      	movs	r1, #0
	style_txt1.text.line_space = 1;
 800cfe2:	8566      	strh	r6, [r4, #42]	; 0x2a
	txt_fwd = lv_label_create(Tela_Readings, NULL);
 800cfe4:	f00b febc 	bl	8018d60 <lv_label_create>
	lv_obj_set_style(txt_fwd, &style_txt1); 						// Configura o estilo criado
 800cfe8:	4621      	mov	r1, r4
	txt_fwd = lv_label_create(Tela_Readings, NULL);
 800cfea:	6028      	str	r0, [r5, #0]
	lv_obj_set_style(txt_fwd, &style_txt1); 						// Configura o estilo criado
 800cfec:	f003 f972 	bl	80102d4 <lv_obj_set_style>
	lv_label_set_long_mode(txt_fwd, LV_LABEL_LONG_EXPAND); 			// Quebra as linhas longas
 800cff0:	6828      	ldr	r0, [r5, #0]
	sprintf(buffer, "%0.1fW", fwd);
 800cff2:	4c1b      	ldr	r4, [pc, #108]	; (800d060 <print_fwd_1+0xbc>)
	lv_label_set_long_mode(txt_fwd, LV_LABEL_LONG_EXPAND); 			// Quebra as linhas longas
 800cff4:	2100      	movs	r1, #0
 800cff6:	f00b fe5d 	bl	8018cb4 <lv_label_set_long_mode>
	lv_label_set_recolor(txt_fwd, true); 							// Ativa recolorizar por comandos no texto
 800cffa:	4631      	mov	r1, r6
 800cffc:	6828      	ldr	r0, [r5, #0]
 800cffe:	f00b fe9b 	bl	8018d38 <lv_label_set_recolor>
	lv_label_set_align(txt_fwd, LV_ALIGN_IN_TOP_RIGHT); 			// Centraliza linhas alinhadas
 800d002:	6828      	ldr	r0, [r5, #0]
 800d004:	2103      	movs	r1, #3
 800d006:	f00b faf4 	bl	80185f2 <lv_label_set_align>
	sprintf(buffer, "%0.1fW", fwd);
 800d00a:	ed9d 0a03 	vldr	s0, [sp, #12]
 800d00e:	ee10 0a10 	vmov	r0, s0
 800d012:	f7f3 fa99 	bl	8000548 <__aeabi_f2d>
 800d016:	4602      	mov	r2, r0
 800d018:	460b      	mov	r3, r1
 800d01a:	4620      	mov	r0, r4
 800d01c:	4911      	ldr	r1, [pc, #68]	; (800d064 <print_fwd_1+0xc0>)
 800d01e:	f00d fefb 	bl	801ae18 <sprintf>
	lv_label_set_text(txt_fwd, buffer);
 800d022:	4621      	mov	r1, r4
 800d024:	6828      	ldr	r0, [r5, #0]
 800d026:	f00b fdf1 	bl	8018c0c <lv_label_set_text>
	lv_obj_set_width(txt_fwd, 300); 								// Configuura o comprimento
 800d02a:	6828      	ldr	r0, [r5, #0]
 800d02c:	f44f 7196 	mov.w	r1, #300	; 0x12c
 800d030:	f003 f898 	bl	8010164 <lv_obj_set_width>
	lv_obj_align(txt_fwd, NULL, LV_ALIGN_IN_TOP_RIGHT, -41, 33); 	// Alinha ao centro
 800d034:	2321      	movs	r3, #33	; 0x21
 800d036:	9300      	str	r3, [sp, #0]
 800d038:	2203      	movs	r2, #3
 800d03a:	f06f 0328 	mvn.w	r3, #40	; 0x28
 800d03e:	2100      	movs	r1, #0
 800d040:	6828      	ldr	r0, [r5, #0]
 800d042:	f002 fca5 	bl	800f990 <lv_obj_align>
}
 800d046:	b004      	add	sp, #16
 800d048:	bd70      	pop	{r4, r5, r6, pc}
 800d04a:	bf00      	nop
 800d04c:	20005bdc 	.word	0x20005bdc
 800d050:	2000c6a8 	.word	0x2000c6a8
 800d054:	20001338 	.word	0x20001338
 800d058:	20005c54 	.word	0x20005c54
 800d05c:	20005ab0 	.word	0x20005ab0
 800d060:	20004d48 	.word	0x20004d48
 800d064:	0802c719 	.word	0x0802c719

0800d068 <print_swr_1>:
{
 800d068:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	lv_style_copy(&style_txt1, &lv_style_plain);
 800d06a:	4c29      	ldr	r4, [pc, #164]	; (800d110 <print_swr_1+0xa8>)
 800d06c:	4929      	ldr	r1, [pc, #164]	; (800d114 <print_swr_1+0xac>)
{
 800d06e:	ed8d 0a03 	vstr	s0, [sp, #12]
	lv_style_copy(&style_txt1, &lv_style_plain);
 800d072:	4620      	mov	r0, r4
 800d074:	f003 fdf8 	bl	8010c68 <lv_style_copy>
	style_txt1.text.font = &lv_font_eurostile_24;
 800d078:	4b27      	ldr	r3, [pc, #156]	; (800d118 <print_swr_1+0xb0>)
 800d07a:	6263      	str	r3, [r4, #36]	; 0x24
	style_txt1.text.color = LV_COLOR_CYAN;
 800d07c:	f894 3020 	ldrb.w	r3, [r4, #32]
	txt_swr = lv_label_create(Tela_Readings, NULL);
 800d080:	4d26      	ldr	r5, [pc, #152]	; (800d11c <print_swr_1+0xb4>)
	style_txt1.text.color = LV_COLOR_CYAN;
 800d082:	f043 031f 	orr.w	r3, r3, #31
 800d086:	f884 3020 	strb.w	r3, [r4, #32]
 800d08a:	8c23      	ldrh	r3, [r4, #32]
 800d08c:	f443 63fc 	orr.w	r3, r3, #2016	; 0x7e0
 800d090:	8423      	strh	r3, [r4, #32]
 800d092:	0a1b      	lsrs	r3, r3, #8
 800d094:	f36f 03c7 	bfc	r3, #3, #5
 800d098:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
	txt_swr = lv_label_create(Tela_Readings, NULL);
 800d09c:	4b20      	ldr	r3, [pc, #128]	; (800d120 <print_swr_1+0xb8>)
	style_txt1.text.letter_space = 1;
 800d09e:	2601      	movs	r6, #1
	txt_swr = lv_label_create(Tela_Readings, NULL);
 800d0a0:	6818      	ldr	r0, [r3, #0]
	style_txt1.text.letter_space = 1;
 800d0a2:	8526      	strh	r6, [r4, #40]	; 0x28
	txt_swr = lv_label_create(Tela_Readings, NULL);
 800d0a4:	2100      	movs	r1, #0
	style_txt1.text.line_space = 1;
 800d0a6:	8566      	strh	r6, [r4, #42]	; 0x2a
	txt_swr = lv_label_create(Tela_Readings, NULL);
 800d0a8:	f00b fe5a 	bl	8018d60 <lv_label_create>
	lv_obj_set_style(txt_swr, &style_txt1); 						// Configura o estilo criado
 800d0ac:	4621      	mov	r1, r4
	txt_swr = lv_label_create(Tela_Readings, NULL);
 800d0ae:	6028      	str	r0, [r5, #0]
	lv_obj_set_style(txt_swr, &style_txt1); 						// Configura o estilo criado
 800d0b0:	f003 f910 	bl	80102d4 <lv_obj_set_style>
	lv_label_set_long_mode(txt_swr, LV_LABEL_LONG_EXPAND); 			// Quebra as linhas longas
 800d0b4:	6828      	ldr	r0, [r5, #0]
	sprintf(buffer, "%0.1fW", swr);
 800d0b6:	4c1b      	ldr	r4, [pc, #108]	; (800d124 <print_swr_1+0xbc>)
	lv_label_set_long_mode(txt_swr, LV_LABEL_LONG_EXPAND); 			// Quebra as linhas longas
 800d0b8:	2100      	movs	r1, #0
 800d0ba:	f00b fdfb 	bl	8018cb4 <lv_label_set_long_mode>
	lv_label_set_recolor(txt_swr, true); 							// Ativa recolorizar por comandos no texto
 800d0be:	4631      	mov	r1, r6
 800d0c0:	6828      	ldr	r0, [r5, #0]
 800d0c2:	f00b fe39 	bl	8018d38 <lv_label_set_recolor>
	lv_label_set_align(txt_swr, LV_ALIGN_IN_TOP_RIGHT); 				// Centraliza linhas alinhadas
 800d0c6:	6828      	ldr	r0, [r5, #0]
 800d0c8:	2103      	movs	r1, #3
 800d0ca:	f00b fa92 	bl	80185f2 <lv_label_set_align>
	sprintf(buffer, "%0.1fW", swr);
 800d0ce:	ed9d 0a03 	vldr	s0, [sp, #12]
 800d0d2:	ee10 0a10 	vmov	r0, s0
 800d0d6:	f7f3 fa37 	bl	8000548 <__aeabi_f2d>
 800d0da:	4602      	mov	r2, r0
 800d0dc:	460b      	mov	r3, r1
 800d0de:	4620      	mov	r0, r4
 800d0e0:	4911      	ldr	r1, [pc, #68]	; (800d128 <print_swr_1+0xc0>)
 800d0e2:	f00d fe99 	bl	801ae18 <sprintf>
	lv_label_set_text(txt_swr, buffer);
 800d0e6:	4621      	mov	r1, r4
 800d0e8:	6828      	ldr	r0, [r5, #0]
 800d0ea:	f00b fd8f 	bl	8018c0c <lv_label_set_text>
	lv_obj_set_width(txt_swr, 300); 								// Configuura o comprimento
 800d0ee:	6828      	ldr	r0, [r5, #0]
 800d0f0:	f44f 7196 	mov.w	r1, #300	; 0x12c
 800d0f4:	f003 f836 	bl	8010164 <lv_obj_set_width>
	lv_obj_align(txt_swr, NULL, LV_ALIGN_IN_TOP_RIGHT, -41, 76); 	// Alinha ao centro
 800d0f8:	234c      	movs	r3, #76	; 0x4c
 800d0fa:	9300      	str	r3, [sp, #0]
 800d0fc:	2203      	movs	r2, #3
 800d0fe:	f06f 0328 	mvn.w	r3, #40	; 0x28
 800d102:	2100      	movs	r1, #0
 800d104:	6828      	ldr	r0, [r5, #0]
 800d106:	f002 fc43 	bl	800f990 <lv_obj_align>
}
 800d10a:	b004      	add	sp, #16
 800d10c:	bd70      	pop	{r4, r5, r6, pc}
 800d10e:	bf00      	nop
 800d110:	20005c18 	.word	0x20005c18
 800d114:	2000c6a8 	.word	0x2000c6a8
 800d118:	20001338 	.word	0x20001338
 800d11c:	20005c58 	.word	0x20005c58
 800d120:	20005ab0 	.word	0x20005ab0
 800d124:	20004d48 	.word	0x20004d48
 800d128:	0802c719 	.word	0x0802c719

0800d12c <update_vumeter_swr_1>:
{
 800d12c:	b538      	push	{r3, r4, r5, lr}
		lv_bar_set_style(bar_swr[x], LV_BAR_STYLE_BG, &style_indic_bar_vd);
 800d12e:	4d0c      	ldr	r5, [pc, #48]	; (800d160 <update_vumeter_swr_1+0x34>)
 800d130:	4c0c      	ldr	r4, [pc, #48]	; (800d164 <update_vumeter_swr_1+0x38>)
 800d132:	462a      	mov	r2, r5
 800d134:	6820      	ldr	r0, [r4, #0]
 800d136:	2100      	movs	r1, #0
 800d138:	f008 ffea 	bl	8016110 <lv_bar_set_style>
		lv_bar_set_style(bar_swr[x], LV_BAR_STYLE_INDIC, &style_indic_bar_vd);
 800d13c:	462a      	mov	r2, r5
 800d13e:	6820      	ldr	r0, [r4, #0]
 800d140:	2101      	movs	r1, #1
 800d142:	f008 ffe5 	bl	8016110 <lv_bar_set_style>
		lv_bar_set_style(bar_swr[x], LV_BAR_STYLE_BG, &style_indic_bar_vd);
 800d146:	462a      	mov	r2, r5
 800d148:	6860      	ldr	r0, [r4, #4]
 800d14a:	2100      	movs	r1, #0
 800d14c:	f008 ffe0 	bl	8016110 <lv_bar_set_style>
		lv_bar_set_style(bar_swr[x], LV_BAR_STYLE_INDIC, &style_indic_bar_vd);
 800d150:	462a      	mov	r2, r5
 800d152:	6860      	ldr	r0, [r4, #4]
 800d154:	2101      	movs	r1, #1
}
 800d156:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		lv_bar_set_style(bar_swr[x], LV_BAR_STYLE_INDIC, &style_indic_bar_vd);
 800d15a:	f008 bfd9 	b.w	8016110 <lv_bar_set_style>
 800d15e:	bf00      	nop
 800d160:	20005ba0 	.word	0x20005ba0
 800d164:	20005b08 	.word	0x20005b08

0800d168 <update_vumeter_fwd_1>:
{
 800d168:	b570      	push	{r4, r5, r6, lr}
		lv_bar_set_style(bar_fwd[x], LV_BAR_STYLE_BG, &style_indic_bar_vd);
 800d16a:	4d09      	ldr	r5, [pc, #36]	; (800d190 <update_vumeter_fwd_1+0x28>)
 800d16c:	4e09      	ldr	r6, [pc, #36]	; (800d194 <update_vumeter_fwd_1+0x2c>)
	for(x = 0; x <= resul; x++) {
 800d16e:	2400      	movs	r4, #0
		lv_bar_set_style(bar_fwd[x], LV_BAR_STYLE_BG, &style_indic_bar_vd);
 800d170:	f855 0024 	ldr.w	r0, [r5, r4, lsl #2]
 800d174:	4632      	mov	r2, r6
 800d176:	2100      	movs	r1, #0
 800d178:	f008 ffca 	bl	8016110 <lv_bar_set_style>
		lv_bar_set_style(bar_fwd[x], LV_BAR_STYLE_INDIC, &style_indic_bar_vd);
 800d17c:	f855 0024 	ldr.w	r0, [r5, r4, lsl #2]
 800d180:	4632      	mov	r2, r6
 800d182:	2101      	movs	r1, #1
	for(x = 0; x <= resul; x++) {
 800d184:	3401      	adds	r4, #1
		lv_bar_set_style(bar_fwd[x], LV_BAR_STYLE_INDIC, &style_indic_bar_vd);
 800d186:	f008 ffc3 	bl	8016110 <lv_bar_set_style>
	for(x = 0; x <= resul; x++) {
 800d18a:	2c14      	cmp	r4, #20
 800d18c:	d1f0      	bne.n	800d170 <update_vumeter_fwd_1+0x8>
}
 800d18e:	bd70      	pop	{r4, r5, r6, pc}
 800d190:	20005ab4 	.word	0x20005ab4
 800d194:	20005ba0 	.word	0x20005ba0

0800d198 <update_reading>:
	}
}


static void update_reading(lv_task_t * param)
{
 800d198:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	// Potencia Direta
	sprintf(buffer, "%0.1fW", forward);
 800d19a:	4e15      	ldr	r6, [pc, #84]	; (800d1f0 <update_reading+0x58>)
 800d19c:	4c15      	ldr	r4, [pc, #84]	; (800d1f4 <update_reading+0x5c>)
 800d19e:	6830      	ldr	r0, [r6, #0]
 800d1a0:	4f15      	ldr	r7, [pc, #84]	; (800d1f8 <update_reading+0x60>)
	lv_label_set_text(txt_fwd, buffer);
	// Refletida
	sprintf(buffer, "%0.1fW", reflected);
 800d1a2:	4d16      	ldr	r5, [pc, #88]	; (800d1fc <update_reading+0x64>)
	sprintf(buffer, "%0.1fW", forward);
 800d1a4:	f7f3 f9d0 	bl	8000548 <__aeabi_f2d>
 800d1a8:	4602      	mov	r2, r0
 800d1aa:	460b      	mov	r3, r1
 800d1ac:	4620      	mov	r0, r4
 800d1ae:	4639      	mov	r1, r7
 800d1b0:	f00d fe32 	bl	801ae18 <sprintf>
	lv_label_set_text(txt_fwd, buffer);
 800d1b4:	4b12      	ldr	r3, [pc, #72]	; (800d200 <update_reading+0x68>)
 800d1b6:	4621      	mov	r1, r4
 800d1b8:	6818      	ldr	r0, [r3, #0]
 800d1ba:	f00b fd27 	bl	8018c0c <lv_label_set_text>
	sprintf(buffer, "%0.1fW", reflected);
 800d1be:	6828      	ldr	r0, [r5, #0]
 800d1c0:	f7f3 f9c2 	bl	8000548 <__aeabi_f2d>
 800d1c4:	4602      	mov	r2, r0
 800d1c6:	460b      	mov	r3, r1
 800d1c8:	4620      	mov	r0, r4
 800d1ca:	4639      	mov	r1, r7
 800d1cc:	f00d fe24 	bl	801ae18 <sprintf>
	lv_label_set_text(txt_swr, buffer);
 800d1d0:	4b0c      	ldr	r3, [pc, #48]	; (800d204 <update_reading+0x6c>)
 800d1d2:	4621      	mov	r1, r4
 800d1d4:	6818      	ldr	r0, [r3, #0]
 800d1d6:	f00b fd19 	bl	8018c0c <lv_label_set_text>
	// Update Vu-Meter FWD
	update_vumeter_fwd_1(forward);
 800d1da:	ed96 0a00 	vldr	s0, [r6]
 800d1de:	f7ff ffc3 	bl	800d168 <update_vumeter_fwd_1>
	// Update Vu-Meter REF
	update_vumeter_swr_1(reflected);
 800d1e2:	ed95 0a00 	vldr	s0, [r5]
}
 800d1e6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	update_vumeter_swr_1(reflected);
 800d1ea:	f7ff bf9f 	b.w	800d12c <update_vumeter_swr_1>
 800d1ee:	bf00      	nop
 800d1f0:	20004e30 	.word	0x20004e30
 800d1f4:	20004d48 	.word	0x20004d48
 800d1f8:	0802c719 	.word	0x0802c719
 800d1fc:	20004e3c 	.word	0x20004e3c
 800d200:	20005c54 	.word	0x20005c54
 800d204:	20005c58 	.word	0x20005c58

0800d208 <btn_next_r>:
{
 800d208:	b538      	push	{r3, r4, r5, lr}
	imgbtn_next = lv_imgbtn_create(Tela_Readings, NULL);
 800d20a:	4b15      	ldr	r3, [pc, #84]	; (800d260 <btn_next_r+0x58>)
	lv_imgbtn_set_src(imgbtn_next, LV_BTN_STATE_REL, &Btn_next);
 800d20c:	4d15      	ldr	r5, [pc, #84]	; (800d264 <btn_next_r+0x5c>)
	imgbtn_next = lv_imgbtn_create(Tela_Readings, NULL);
 800d20e:	6818      	ldr	r0, [r3, #0]
 800d210:	4c15      	ldr	r4, [pc, #84]	; (800d268 <btn_next_r+0x60>)
 800d212:	2100      	movs	r1, #0
 800d214:	f00b f800 	bl	8018218 <lv_imgbtn_create>
	lv_imgbtn_set_src(imgbtn_next, LV_BTN_STATE_REL, &Btn_next);
 800d218:	462a      	mov	r2, r5
 800d21a:	2100      	movs	r1, #0
	imgbtn_next = lv_imgbtn_create(Tela_Readings, NULL);
 800d21c:	6020      	str	r0, [r4, #0]
	lv_imgbtn_set_src(imgbtn_next, LV_BTN_STATE_REL, &Btn_next);
 800d21e:	f00b f843 	bl	80182a8 <lv_imgbtn_set_src>
	lv_imgbtn_set_src(imgbtn_next, LV_BTN_STATE_TGL_REL, &Btn_next);
 800d222:	462a      	mov	r2, r5
 800d224:	6820      	ldr	r0, [r4, #0]
 800d226:	2102      	movs	r1, #2
 800d228:	f00b f83e 	bl	80182a8 <lv_imgbtn_set_src>
	lv_imgbtn_set_src(imgbtn_next, LV_BTN_STATE_TGL_PR, &Btn_next);
 800d22c:	462a      	mov	r2, r5
 800d22e:	6820      	ldr	r0, [r4, #0]
 800d230:	2103      	movs	r1, #3
 800d232:	f00b f839 	bl	80182a8 <lv_imgbtn_set_src>
	lv_imgbtn_set_src(imgbtn_next, LV_BTN_STATE_PR, &Btn_next);
 800d236:	462a      	mov	r2, r5
 800d238:	6820      	ldr	r0, [r4, #0]
 800d23a:	2101      	movs	r1, #1
 800d23c:	f00b f834 	bl	80182a8 <lv_imgbtn_set_src>
	lv_imgbtn_set_src(imgbtn_next, LV_BTN_STATE_INA, &Btn_next);
 800d240:	462a      	mov	r2, r5
 800d242:	6820      	ldr	r0, [r4, #0]
 800d244:	2104      	movs	r1, #4
 800d246:	f00b f82f 	bl	80182a8 <lv_imgbtn_set_src>
	lv_obj_set_event_cb(imgbtn_next, btn_event_next_r);
 800d24a:	6820      	ldr	r0, [r4, #0]
 800d24c:	4907      	ldr	r1, [pc, #28]	; (800d26c <btn_next_r+0x64>)
 800d24e:	f002 fa00 	bl	800f652 <lv_obj_set_event_cb>
	lv_obj_set_pos(imgbtn_next, 112, 18);
 800d252:	6820      	ldr	r0, [r4, #0]
 800d254:	2212      	movs	r2, #18
 800d256:	2170      	movs	r1, #112	; 0x70
}
 800d258:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	lv_obj_set_pos(imgbtn_next, 112, 18);
 800d25c:	f002 bb43 	b.w	800f8e6 <lv_obj_set_pos>
 800d260:	20005ab0 	.word	0x20005ab0
 800d264:	20001b20 	.word	0x20001b20
 800d268:	20005b60 	.word	0x20005b60
 800d26c:	0800cdbd 	.word	0x0800cdbd

0800d270 <screen_readings>:
	Tela_Readings = lv_obj_create(NULL, NULL);
 800d270:	2100      	movs	r1, #0
{
 800d272:	b570      	push	{r4, r5, r6, lr}
	Tela_Readings = lv_obj_create(NULL, NULL);
 800d274:	4608      	mov	r0, r1
 800d276:	f002 fdad 	bl	800fdd4 <lv_obj_create>
 800d27a:	4e21      	ldr	r6, [pc, #132]	; (800d300 <screen_readings+0x90>)
	img_fundo = lv_img_create(Tela_Readings, NULL);
 800d27c:	4c21      	ldr	r4, [pc, #132]	; (800d304 <screen_readings+0x94>)
	Tela_Readings = lv_obj_create(NULL, NULL);
 800d27e:	6030      	str	r0, [r6, #0]
	img_fundo = lv_img_create(Tela_Readings, NULL);
 800d280:	2100      	movs	r1, #0
 800d282:	f00a fe9f 	bl	8017fc4 <lv_img_create>
	lv_img_set_src(img_fundo, &tela_reading_rf);
 800d286:	4920      	ldr	r1, [pc, #128]	; (800d308 <screen_readings+0x98>)
	img_fundo = lv_img_create(Tela_Readings, NULL);
 800d288:	6020      	str	r0, [r4, #0]
	lv_img_set_src(img_fundo, &tela_reading_rf);
 800d28a:	f00a fe0b 	bl	8017ea4 <lv_img_set_src>
	lv_obj_set_protect(img_fundo, LV_PROTECT_POS);
 800d28e:	6820      	ldr	r0, [r4, #0]
	forward = 15.0f;
 800d290:	4d1e      	ldr	r5, [pc, #120]	; (800d30c <screen_readings+0x9c>)
	lv_obj_set_protect(img_fundo, LV_PROTECT_POS);
 800d292:	2104      	movs	r1, #4
 800d294:	f002 f9d0 	bl	800f638 <lv_obj_set_protect>
	lv_obj_set_event_cb(img_fundo, btn_event_esc_r);
 800d298:	6820      	ldr	r0, [r4, #0]
 800d29a:	491d      	ldr	r1, [pc, #116]	; (800d310 <screen_readings+0xa0>)
 800d29c:	f002 f9d9 	bl	800f652 <lv_obj_set_event_cb>
	lv_obj_set_click(img_fundo, 1);
 800d2a0:	2101      	movs	r1, #1
 800d2a2:	6820      	ldr	r0, [r4, #0]
	reflected = 1.2f;
 800d2a4:	4c1b      	ldr	r4, [pc, #108]	; (800d314 <screen_readings+0xa4>)
	lv_obj_set_click(img_fundo, 1);
 800d2a6:	f002 f9ab 	bl	800f600 <lv_obj_set_click>
	forward = 15.0f;
 800d2aa:	4b1b      	ldr	r3, [pc, #108]	; (800d318 <screen_readings+0xa8>)
 800d2ac:	602b      	str	r3, [r5, #0]
	reflected = 1.2f;
 800d2ae:	4b1b      	ldr	r3, [pc, #108]	; (800d31c <screen_readings+0xac>)
 800d2b0:	6023      	str	r3, [r4, #0]
	create_vumeter_swr_1();
 800d2b2:	f7ff fd97 	bl	800cde4 <create_vumeter_swr_1>
	create_vumeter_fwd_1();
 800d2b6:	f7ff fe05 	bl	800cec4 <create_vumeter_fwd_1>
	print_fwd_1(forward);
 800d2ba:	ed95 0a00 	vldr	s0, [r5]
 800d2be:	f7ff fe71 	bl	800cfa4 <print_fwd_1>
	print_swr_1(reflected);
 800d2c2:	ed94 0a00 	vldr	s0, [r4]
 800d2c6:	f7ff fecf 	bl	800d068 <print_swr_1>
	update_vumeter_swr_1(forward);
 800d2ca:	ed95 0a00 	vldr	s0, [r5]
 800d2ce:	f7ff ff2d 	bl	800d12c <update_vumeter_swr_1>
	update_vumeter_fwd_1(reflected);
 800d2d2:	ed94 0a00 	vldr	s0, [r4]
 800d2d6:	f7ff ff47 	bl	800d168 <update_vumeter_fwd_1>
	btn_next_r();
 800d2da:	f7ff ff95 	bl	800d208 <btn_next_r>
 800d2de:	6830      	ldr	r0, [r6, #0]
 800d2e0:	f001 ff64 	bl	800f1ac <lv_disp_load_scr>
	Task_Readings = lv_task_create(update_reading, 500, LV_TASK_PRIO_MID, NULL);
 800d2e4:	2300      	movs	r3, #0
 800d2e6:	2203      	movs	r2, #3
 800d2e8:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 800d2ec:	480c      	ldr	r0, [pc, #48]	; (800d320 <screen_readings+0xb0>)
 800d2ee:	f008 fc0f 	bl	8015b10 <lv_task_create>
 800d2f2:	4b0c      	ldr	r3, [pc, #48]	; (800d324 <screen_readings+0xb4>)
 800d2f4:	6018      	str	r0, [r3, #0]
	TelaAtiva = TelaReadings;
 800d2f6:	4b0c      	ldr	r3, [pc, #48]	; (800d328 <screen_readings+0xb8>)
 800d2f8:	2209      	movs	r2, #9
 800d2fa:	601a      	str	r2, [r3, #0]
 800d2fc:	bd70      	pop	{r4, r5, r6, pc}
 800d2fe:	bf00      	nop
 800d300:	20005ab0 	.word	0x20005ab0
 800d304:	20005b5c 	.word	0x20005b5c
 800d308:	20001c34 	.word	0x20001c34
 800d30c:	20004e30 	.word	0x20004e30
 800d310:	0800cd95 	.word	0x0800cd95
 800d314:	20004e3c 	.word	0x20004e3c
 800d318:	41700000 	.word	0x41700000
 800d31c:	3f99999a 	.word	0x3f99999a
 800d320:	0800d199 	.word	0x0800d199
 800d324:	20005aac 	.word	0x20005aac
 800d328:	20003444 	.word	0x20003444

0800d32c <ButtonEventTelaReadings>:

void ButtonEventTelaReadings(uint8_t event, uint8_t tipo, uint8_t id)
{
	if(event == EVT_PBTN_INPUT) {
 800d32c:	2810      	cmp	r0, #16
 800d32e:	d10e      	bne.n	800d34e <ButtonEventTelaReadings+0x22>
		if(tipo == PBTN_SCLK) {	// Single Click
 800d330:	2901      	cmp	r1, #1
 800d332:	d10c      	bne.n	800d34e <ButtonEventTelaReadings+0x22>
			switch(id) {
 800d334:	b112      	cbz	r2, 800d33c <ButtonEventTelaReadings+0x10>
 800d336:	2a01      	cmp	r2, #1
 800d338:	d005      	beq.n	800d346 <ButtonEventTelaReadings+0x1a>
 800d33a:	4770      	bx	lr
				case KEY_DN:
					lv_event_send(img_fundo, LV_EVENT_APPLY, NULL);
 800d33c:	4b04      	ldr	r3, [pc, #16]	; (800d350 <ButtonEventTelaReadings+0x24>)
 800d33e:	2111      	movs	r1, #17
					break;
				case KEY_UP:
					lv_event_send(imgbtn_next, LV_EVENT_APPLY, NULL);
 800d340:	6818      	ldr	r0, [r3, #0]
 800d342:	f002 b9cd 	b.w	800f6e0 <lv_event_send>
 800d346:	2200      	movs	r2, #0
 800d348:	2111      	movs	r1, #17
 800d34a:	4b02      	ldr	r3, [pc, #8]	; (800d354 <ButtonEventTelaReadings+0x28>)
 800d34c:	e7f8      	b.n	800d340 <ButtonEventTelaReadings+0x14>
 800d34e:	4770      	bx	lr
 800d350:	20005b5c 	.word	0x20005b5c
 800d354:	20005b60 	.word	0x20005b60

0800d358 <btn_event_esc_rf>:
	lv_obj_set_pos(imgbtn1, 143, 2);
}

static void btn_event_esc_rf(lv_obj_t * btn, lv_event_t event)
{
	if(event == LV_EVENT_APPLY) {
 800d358:	2911      	cmp	r1, #17
{
 800d35a:	b508      	push	{r3, lr}
	if(event == LV_EVENT_APPLY) {
 800d35c:	d10b      	bne.n	800d376 <btn_event_esc_rf+0x1e>
		//printf("TELA RF - Button ESC Released\n");
		lv_task_del(Task_RF);
 800d35e:	4b06      	ldr	r3, [pc, #24]	; (800d378 <btn_event_esc_rf+0x20>)
 800d360:	6818      	ldr	r0, [r3, #0]
 800d362:	f008 fae5 	bl	8015930 <lv_task_del>
		lv_obj_del(Tela_RF);
 800d366:	4b05      	ldr	r3, [pc, #20]	; (800d37c <btn_event_esc_rf+0x24>)
 800d368:	6818      	ldr	r0, [r3, #0]
 800d36a:	f002 ff24 	bl	80101b6 <lv_obj_del>
		screen_sel();
	}
}
 800d36e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		screen_sel();
 800d372:	f001 bbcd 	b.w	800eb10 <screen_sel>
 800d376:	bd08      	pop	{r3, pc}
 800d378:	20005c68 	.word	0x20005c68
 800d37c:	20005c7c 	.word	0x20005c7c

0800d380 <btn_power>:
}


static void btn_power(lv_obj_t * btn, lv_event_t event)
{
	if(event == LV_EVENT_RELEASED) {
 800d380:	2907      	cmp	r1, #7
{
 800d382:	b510      	push	{r4, lr}
	if(event == LV_EVENT_RELEASED) {
 800d384:	d10e      	bne.n	800d3a4 <btn_power+0x24>
		uint32_t id = lv_obj_get_user_data(btn);
 800d386:	f003 f8fc 	bl	8010582 <lv_obj_get_user_data>
		//printf("Button Power %d Released\n" , id);
		if(id == 0) {
 800d38a:	b960      	cbnz	r0, 800d3a6 <btn_power+0x26>
			lv_btn_set_state(imgbtn1[0], LV_BTN_STATE_TGL_REL);
 800d38c:	4c0c      	ldr	r4, [pc, #48]	; (800d3c0 <btn_power+0x40>)
 800d38e:	2102      	movs	r1, #2
 800d390:	6820      	ldr	r0, [r4, #0]
 800d392:	f009 f8b5 	bl	8016500 <lv_btn_set_state>
			lv_btn_set_state(imgbtn1[1], LV_BTN_STATE_TGL_PR);
 800d396:	2103      	movs	r1, #3
 800d398:	6860      	ldr	r0, [r4, #4]
 800d39a:	f009 f8b1 	bl	8016500 <lv_btn_set_state>
			RFEnable = 1;
 800d39e:	2201      	movs	r2, #1
		}
		else if(id == 1) {
			lv_btn_set_state(imgbtn1[0], LV_BTN_STATE_TGL_PR);
			lv_btn_set_state(imgbtn1[1], LV_BTN_STATE_TGL_REL);
			RFEnable = 0;
 800d3a0:	4b08      	ldr	r3, [pc, #32]	; (800d3c4 <btn_power+0x44>)
 800d3a2:	701a      	strb	r2, [r3, #0]
 800d3a4:	bd10      	pop	{r4, pc}
		else if(id == 1) {
 800d3a6:	2801      	cmp	r0, #1
 800d3a8:	d1fc      	bne.n	800d3a4 <btn_power+0x24>
			lv_btn_set_state(imgbtn1[0], LV_BTN_STATE_TGL_PR);
 800d3aa:	4c05      	ldr	r4, [pc, #20]	; (800d3c0 <btn_power+0x40>)
 800d3ac:	2103      	movs	r1, #3
 800d3ae:	6820      	ldr	r0, [r4, #0]
 800d3b0:	f009 f8a6 	bl	8016500 <lv_btn_set_state>
			lv_btn_set_state(imgbtn1[1], LV_BTN_STATE_TGL_REL);
 800d3b4:	2102      	movs	r1, #2
 800d3b6:	6860      	ldr	r0, [r4, #4]
 800d3b8:	f009 f8a2 	bl	8016500 <lv_btn_set_state>
			RFEnable = 0;
 800d3bc:	2200      	movs	r2, #0
 800d3be:	e7ef      	b.n	800d3a0 <btn_power+0x20>
 800d3c0:	20005d5c 	.word	0x20005d5c
 800d3c4:	20000008 	.word	0x20000008

0800d3c8 <event_handler_swr>:
    lv_obj_set_event_cb(rollerswr[1], event_handler_swr);
}


static void event_handler_swr(lv_obj_t * obj, lv_event_t event)
{
 800d3c8:	b530      	push	{r4, r5, lr}
    if(event == LV_EVENT_CLICKED) {
 800d3ca:	2906      	cmp	r1, #6
{
 800d3cc:	b08f      	sub	sp, #60	; 0x3c
 800d3ce:	4604      	mov	r4, r0
    if(event == LV_EVENT_CLICKED) {
 800d3d0:	d138      	bne.n	800d444 <event_handler_swr+0x7c>
        char buf[32];
        char out[6];

        uint32_t id = lv_obj_get_user_data(obj);
 800d3d2:	f003 f8d6 	bl	8010582 <lv_obj_get_user_data>
 800d3d6:	4605      	mov	r5, r0
 800d3d8:	4620      	mov	r0, r4

        lv_roller_get_selected_str(obj, buf, sizeof(buf));

        lv_roller_get_selected_str(rollerswr[0], buf, sizeof(buf));
 800d3da:	4c1b      	ldr	r4, [pc, #108]	; (800d448 <event_handler_swr+0x80>)
 800d3dc:	2220      	movs	r2, #32
 800d3de:	a906      	add	r1, sp, #24
 800d3e0:	f00a fb05 	bl	80179ee <lv_ddlist_get_selected_str>
 800d3e4:	2220      	movs	r2, #32
 800d3e6:	a906      	add	r1, sp, #24
 800d3e8:	6820      	ldr	r0, [r4, #0]
 800d3ea:	f00a fb00 	bl	80179ee <lv_ddlist_get_selected_str>
 800d3ee:	2220      	movs	r2, #32
        out[0] = buf[0];
 800d3f0:	f89d 3018 	ldrb.w	r3, [sp, #24]
 800d3f4:	6860      	ldr	r0, [r4, #4]
 800d3f6:	f88d 3010 	strb.w	r3, [sp, #16]
 800d3fa:	a906      	add	r1, sp, #24
 800d3fc:	f00a faf7 	bl	80179ee <lv_ddlist_get_selected_str>
        lv_roller_get_selected_str(rollerswr[1], buf, sizeof(buf));
        out[1] = buf[0];
 800d400:	f89d 3018 	ldrb.w	r3, [sp, #24]
 800d404:	f88d 3011 	strb.w	r3, [sp, #17]
        out[3] = 0;

        max_rfl = (float)atoi(out);
 800d408:	a804      	add	r0, sp, #16
        out[3] = 0;
 800d40a:	2300      	movs	r3, #0
 800d40c:	f88d 3013 	strb.w	r3, [sp, #19]
        max_rfl = (float)atoi(out);
 800d410:	f00d fa69 	bl	801a8e6 <atoi>
 800d414:	ee07 0a90 	vmov	s15, r0
 800d418:	4b0c      	ldr	r3, [pc, #48]	; (800d44c <event_handler_swr+0x84>)
 800d41a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800d41e:	edc3 7a00 	vstr	s15, [r3]
        logI("Selected Roller: %d Digit: %s  MAX_RFL: %0.1fW B0: %d B1: %d\n", id, buf, max_rfl, buf[0], buf[1]);
 800d422:	f89d 3019 	ldrb.w	r3, [sp, #25]
 800d426:	9303      	str	r3, [sp, #12]
 800d428:	ee17 0a90 	vmov	r0, s15
 800d42c:	f89d 3018 	ldrb.w	r3, [sp, #24]
 800d430:	9302      	str	r3, [sp, #8]
 800d432:	f7f3 f889 	bl	8000548 <__aeabi_f2d>
 800d436:	aa06      	add	r2, sp, #24
 800d438:	e9cd 0100 	strd	r0, r1, [sp]
 800d43c:	4629      	mov	r1, r5
 800d43e:	4804      	ldr	r0, [pc, #16]	; (800d450 <event_handler_swr+0x88>)
 800d440:	f7f4 f914 	bl	800166c <logI>
    }
}
 800d444:	b00f      	add	sp, #60	; 0x3c
 800d446:	bd30      	pop	{r4, r5, pc}
 800d448:	20005d6c 	.word	0x20005d6c
 800d44c:	20000014 	.word	0x20000014
 800d450:	0802cfa3 	.word	0x0802cfa3

0800d454 <event_handler_target>:
    lv_obj_set_event_cb(rollertarget[1], event_handler_target);
}


static void event_handler_target(lv_obj_t * obj, lv_event_t event)
{
 800d454:	b530      	push	{r4, r5, lr}
    if(event == LV_EVENT_CLICKED) {
 800d456:	2906      	cmp	r1, #6
{
 800d458:	b08d      	sub	sp, #52	; 0x34
 800d45a:	4604      	mov	r4, r0
    if(event == LV_EVENT_CLICKED) {
 800d45c:	d132      	bne.n	800d4c4 <event_handler_target+0x70>
        char buf[32];
        char out[6];

        uint32_t id = lv_obj_get_user_data(obj);
 800d45e:	f003 f890 	bl	8010582 <lv_obj_get_user_data>
 800d462:	4605      	mov	r5, r0
 800d464:	4620      	mov	r0, r4

        lv_roller_get_selected_str(obj, buf, sizeof(buf));


        lv_roller_get_selected_str(rollerswr[0], buf, sizeof(buf));
 800d466:	4c18      	ldr	r4, [pc, #96]	; (800d4c8 <event_handler_target+0x74>)
 800d468:	2220      	movs	r2, #32
 800d46a:	a904      	add	r1, sp, #16
 800d46c:	f00a fabf 	bl	80179ee <lv_ddlist_get_selected_str>
 800d470:	2220      	movs	r2, #32
 800d472:	a904      	add	r1, sp, #16
 800d474:	6820      	ldr	r0, [r4, #0]
 800d476:	f00a faba 	bl	80179ee <lv_ddlist_get_selected_str>
 800d47a:	2220      	movs	r2, #32
        out[0] = buf[0];
 800d47c:	f89d 3010 	ldrb.w	r3, [sp, #16]
 800d480:	6860      	ldr	r0, [r4, #4]
 800d482:	f88d 3008 	strb.w	r3, [sp, #8]
 800d486:	a904      	add	r1, sp, #16
 800d488:	f00a fab1 	bl	80179ee <lv_ddlist_get_selected_str>
        lv_roller_get_selected_str(rollerswr[1], buf, sizeof(buf));
        out[1] = buf[0];
 800d48c:	f89d 3010 	ldrb.w	r3, [sp, #16]
 800d490:	f88d 3009 	strb.w	r3, [sp, #9]
        out[5] = 0;

        target = (float)atoi(out);
 800d494:	a802      	add	r0, sp, #8
        out[5] = 0;
 800d496:	2300      	movs	r3, #0
 800d498:	f88d 300d 	strb.w	r3, [sp, #13]
        target = (float)atoi(out);
 800d49c:	f00d fa23 	bl	801a8e6 <atoi>
 800d4a0:	ee07 0a90 	vmov	s15, r0
 800d4a4:	4b09      	ldr	r3, [pc, #36]	; (800d4cc <event_handler_target+0x78>)
 800d4a6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800d4aa:	edc3 7a00 	vstr	s15, [r3]
        logI("Selected Roller: %d Digit: %s  TARGET: %0.1fW\n", id, buf, target);
 800d4ae:	ee17 0a90 	vmov	r0, s15
 800d4b2:	f7f3 f849 	bl	8000548 <__aeabi_f2d>
 800d4b6:	aa04      	add	r2, sp, #16
 800d4b8:	e9cd 0100 	strd	r0, r1, [sp]
 800d4bc:	4629      	mov	r1, r5
 800d4be:	4804      	ldr	r0, [pc, #16]	; (800d4d0 <event_handler_target+0x7c>)
 800d4c0:	f7f4 f8d4 	bl	800166c <logI>
    }
}
 800d4c4:	b00d      	add	sp, #52	; 0x34
 800d4c6:	bd30      	pop	{r4, r5, pc}
 800d4c8:	20005d6c 	.word	0x20005d6c
 800d4cc:	2000001c 	.word	0x2000001c
 800d4d0:	0802cfe1 	.word	0x0802cfe1

0800d4d4 <create_vumeter_swr>:
{
 800d4d4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	lv_style_copy(&style_indic_bar, &lv_style_pretty);
 800d4d6:	4e30      	ldr	r6, [pc, #192]	; (800d598 <create_vumeter_swr+0xc4>)
 800d4d8:	4930      	ldr	r1, [pc, #192]	; (800d59c <create_vumeter_swr+0xc8>)
	lv_style_copy(&style_indic_bar_vd, &lv_style_pretty);
 800d4da:	4c31      	ldr	r4, [pc, #196]	; (800d5a0 <create_vumeter_swr+0xcc>)
		bar_swr[x] = lv_bar_create(Tela_RF, NULL);
 800d4dc:	4f31      	ldr	r7, [pc, #196]	; (800d5a4 <create_vumeter_swr+0xd0>)
	lv_style_copy(&style_indic_bar, &lv_style_pretty);
 800d4de:	4630      	mov	r0, r6
 800d4e0:	f003 fbc2 	bl	8010c68 <lv_style_copy>
	style_indic_bar.body.grad_color = LV_COLOR_MAKE(105, 105, 105);
 800d4e4:	4b30      	ldr	r3, [pc, #192]	; (800d5a8 <create_vumeter_swr+0xd4>)
	lv_style_copy(&style_indic_bar_vd, &lv_style_pretty);
 800d4e6:	492d      	ldr	r1, [pc, #180]	; (800d59c <create_vumeter_swr+0xc8>)
	style_indic_bar.body.grad_color = LV_COLOR_MAKE(105, 105, 105);
 800d4e8:	881b      	ldrh	r3, [r3, #0]
 800d4ea:	80b3      	strh	r3, [r6, #4]
	style_indic_bar.body.radius = 0;
 800d4ec:	2500      	movs	r5, #0
	lv_style_copy(&style_indic_bar_vd, &lv_style_pretty);
 800d4ee:	4620      	mov	r0, r4
	style_indic_bar.body.main_color = LV_COLOR_MAKE(105, 105, 105);
 800d4f0:	8073      	strh	r3, [r6, #2]
	style_indic_bar.body.border.color = LV_COLOR_MAKE(105, 105, 105);
 800d4f2:	8173      	strh	r3, [r6, #10]
	style_indic_bar.body.radius = 0;
 800d4f4:	80f5      	strh	r5, [r6, #6]
	lv_style_copy(&style_indic_bar_vd, &lv_style_pretty);
 800d4f6:	f003 fbb7 	bl	8010c68 <lv_style_copy>
	style_indic_bar_vd.body.grad_color = LV_COLOR_MAKE(0, 255, 0);
 800d4fa:	7923      	ldrb	r3, [r4, #4]
	style_indic_bar_vd.body.radius = 0;
 800d4fc:	80e5      	strh	r5, [r4, #6]
	style_indic_bar_vd.body.grad_color = LV_COLOR_MAKE(0, 255, 0);
 800d4fe:	f365 0304 	bfi	r3, r5, #0, #5
 800d502:	7123      	strb	r3, [r4, #4]
 800d504:	88a3      	ldrh	r3, [r4, #4]
 800d506:	f443 63fc 	orr.w	r3, r3, #2016	; 0x7e0
 800d50a:	80a3      	strh	r3, [r4, #4]
 800d50c:	0a1b      	lsrs	r3, r3, #8
 800d50e:	f365 03c7 	bfi	r3, r5, #3, #5
 800d512:	7163      	strb	r3, [r4, #5]
	style_indic_bar_vd.body.main_color = LV_COLOR_MAKE(0, 255, 0);
 800d514:	78a3      	ldrb	r3, [r4, #2]
 800d516:	f365 0304 	bfi	r3, r5, #0, #5
 800d51a:	70a3      	strb	r3, [r4, #2]
 800d51c:	8863      	ldrh	r3, [r4, #2]
 800d51e:	f443 63fc 	orr.w	r3, r3, #2016	; 0x7e0
 800d522:	8063      	strh	r3, [r4, #2]
 800d524:	0a1b      	lsrs	r3, r3, #8
 800d526:	f365 03c7 	bfi	r3, r5, #3, #5
 800d52a:	70e3      	strb	r3, [r4, #3]
	style_indic_bar_vd.body.border.color = LV_COLOR_MAKE(0, 255, 0);
 800d52c:	7aa3      	ldrb	r3, [r4, #10]
 800d52e:	f365 0304 	bfi	r3, r5, #0, #5
 800d532:	72a3      	strb	r3, [r4, #10]
 800d534:	8963      	ldrh	r3, [r4, #10]
 800d536:	f443 63fc 	orr.w	r3, r3, #2016	; 0x7e0
 800d53a:	8163      	strh	r3, [r4, #10]
 800d53c:	0a1b      	lsrs	r3, r3, #8
 800d53e:	f365 03c7 	bfi	r3, r5, #3, #5
 800d542:	72e3      	strb	r3, [r4, #11]
 800d544:	4c19      	ldr	r4, [pc, #100]	; (800d5ac <create_vumeter_swr+0xd8>)
		bar_swr[x] = lv_bar_create(Tela_RF, NULL);
 800d546:	6838      	ldr	r0, [r7, #0]
 800d548:	2100      	movs	r1, #0
 800d54a:	f008 fdf7 	bl	801613c <lv_bar_create>
		lv_obj_set_size(bar_swr[x], 4, 18);
 800d54e:	2212      	movs	r2, #18
		bar_swr[x] = lv_bar_create(Tela_RF, NULL);
 800d550:	6060      	str	r0, [r4, #4]
		lv_obj_set_size(bar_swr[x], 4, 18);
 800d552:	2104      	movs	r1, #4
 800d554:	f002 fdbc 	bl	80100d0 <lv_obj_set_size>
		lv_bar_set_style(bar_swr[x], LV_BAR_STYLE_BG, &style_indic_bar);
 800d558:	6860      	ldr	r0, [r4, #4]
 800d55a:	4632      	mov	r2, r6
 800d55c:	2100      	movs	r1, #0
 800d55e:	f008 fdd7 	bl	8016110 <lv_bar_set_style>
		lv_bar_set_style(bar_swr[x], LV_BAR_STYLE_INDIC, &style_indic_bar);
 800d562:	6860      	ldr	r0, [r4, #4]
 800d564:	4632      	mov	r2, r6
 800d566:	2101      	movs	r1, #1
 800d568:	f008 fdd2 	bl	8016110 <lv_bar_set_style>
		lv_obj_align(bar_swr[x], NULL, LV_ALIGN_IN_TOP_LEFT, swr_pos_x[x], 86);
 800d56c:	2256      	movs	r2, #86	; 0x56
 800d56e:	4b10      	ldr	r3, [pc, #64]	; (800d5b0 <create_vumeter_swr+0xdc>)
 800d570:	9200      	str	r2, [sp, #0]
 800d572:	f933 3025 	ldrsh.w	r3, [r3, r5, lsl #2]
 800d576:	6860      	ldr	r0, [r4, #4]
 800d578:	2201      	movs	r2, #1
 800d57a:	2100      	movs	r1, #0
 800d57c:	f002 fa08 	bl	800f990 <lv_obj_align>
 800d580:	3501      	adds	r5, #1
		lv_bar_set_value(bar_swr[x], 100, 0);
 800d582:	2200      	movs	r2, #0
 800d584:	2164      	movs	r1, #100	; 0x64
 800d586:	f854 0f04 	ldr.w	r0, [r4, #4]!
 800d58a:	f008 fd65 	bl	8016058 <lv_bar_set_value>
	for(uint8_t x = 0; x < 20; x++) {
 800d58e:	2d14      	cmp	r5, #20
 800d590:	d1d9      	bne.n	800d546 <create_vumeter_swr+0x72>
}
 800d592:	b003      	add	sp, #12
 800d594:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d596:	bf00      	nop
 800d598:	20005da4 	.word	0x20005da4
 800d59c:	2000c5b8 	.word	0x2000c5b8
 800d5a0:	20005de0 	.word	0x20005de0
 800d5a4:	20005c7c 	.word	0x20005c7c
 800d5a8:	0801d8d4 	.word	0x0801d8d4
 800d5ac:	20005cfc 	.word	0x20005cfc
 800d5b0:	0802d0e8 	.word	0x0802d0e8

0800d5b4 <create_vumeter_pwr>:
{
 800d5b4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	lv_style_copy(&style_indic_bar, &lv_style_pretty);
 800d5b6:	4e30      	ldr	r6, [pc, #192]	; (800d678 <create_vumeter_pwr+0xc4>)
 800d5b8:	4930      	ldr	r1, [pc, #192]	; (800d67c <create_vumeter_pwr+0xc8>)
	lv_style_copy(&style_indic_bar_vd, &lv_style_pretty);
 800d5ba:	4c31      	ldr	r4, [pc, #196]	; (800d680 <create_vumeter_pwr+0xcc>)
		bar_pwr[x] = lv_bar_create(Tela_RF_2, NULL);
 800d5bc:	4f31      	ldr	r7, [pc, #196]	; (800d684 <create_vumeter_pwr+0xd0>)
	lv_style_copy(&style_indic_bar, &lv_style_pretty);
 800d5be:	4630      	mov	r0, r6
 800d5c0:	f003 fb52 	bl	8010c68 <lv_style_copy>
	style_indic_bar.body.grad_color = LV_COLOR_MAKE(105, 105, 105);
 800d5c4:	4b30      	ldr	r3, [pc, #192]	; (800d688 <create_vumeter_pwr+0xd4>)
	lv_style_copy(&style_indic_bar_vd, &lv_style_pretty);
 800d5c6:	492d      	ldr	r1, [pc, #180]	; (800d67c <create_vumeter_pwr+0xc8>)
	style_indic_bar.body.grad_color = LV_COLOR_MAKE(105, 105, 105);
 800d5c8:	881b      	ldrh	r3, [r3, #0]
 800d5ca:	80b3      	strh	r3, [r6, #4]
	style_indic_bar.body.radius = 0;
 800d5cc:	2500      	movs	r5, #0
	lv_style_copy(&style_indic_bar_vd, &lv_style_pretty);
 800d5ce:	4620      	mov	r0, r4
	style_indic_bar.body.main_color = LV_COLOR_MAKE(105, 105, 105);
 800d5d0:	8073      	strh	r3, [r6, #2]
	style_indic_bar.body.border.color = LV_COLOR_MAKE(105, 105, 105);
 800d5d2:	8173      	strh	r3, [r6, #10]
	style_indic_bar.body.radius = 0;
 800d5d4:	80f5      	strh	r5, [r6, #6]
	lv_style_copy(&style_indic_bar_vd, &lv_style_pretty);
 800d5d6:	f003 fb47 	bl	8010c68 <lv_style_copy>
	style_indic_bar_vd.body.grad_color = LV_COLOR_MAKE(0, 255, 0);
 800d5da:	7923      	ldrb	r3, [r4, #4]
	style_indic_bar_vd.body.radius = 0;
 800d5dc:	80e5      	strh	r5, [r4, #6]
	style_indic_bar_vd.body.grad_color = LV_COLOR_MAKE(0, 255, 0);
 800d5de:	f365 0304 	bfi	r3, r5, #0, #5
 800d5e2:	7123      	strb	r3, [r4, #4]
 800d5e4:	88a3      	ldrh	r3, [r4, #4]
 800d5e6:	f443 63fc 	orr.w	r3, r3, #2016	; 0x7e0
 800d5ea:	80a3      	strh	r3, [r4, #4]
 800d5ec:	0a1b      	lsrs	r3, r3, #8
 800d5ee:	f365 03c7 	bfi	r3, r5, #3, #5
 800d5f2:	7163      	strb	r3, [r4, #5]
	style_indic_bar_vd.body.main_color = LV_COLOR_MAKE(0, 255, 0);
 800d5f4:	78a3      	ldrb	r3, [r4, #2]
 800d5f6:	f365 0304 	bfi	r3, r5, #0, #5
 800d5fa:	70a3      	strb	r3, [r4, #2]
 800d5fc:	8863      	ldrh	r3, [r4, #2]
 800d5fe:	f443 63fc 	orr.w	r3, r3, #2016	; 0x7e0
 800d602:	8063      	strh	r3, [r4, #2]
 800d604:	0a1b      	lsrs	r3, r3, #8
 800d606:	f365 03c7 	bfi	r3, r5, #3, #5
 800d60a:	70e3      	strb	r3, [r4, #3]
	style_indic_bar_vd.body.border.color = LV_COLOR_MAKE(0, 255, 0);
 800d60c:	7aa3      	ldrb	r3, [r4, #10]
 800d60e:	f365 0304 	bfi	r3, r5, #0, #5
 800d612:	72a3      	strb	r3, [r4, #10]
 800d614:	8963      	ldrh	r3, [r4, #10]
 800d616:	f443 63fc 	orr.w	r3, r3, #2016	; 0x7e0
 800d61a:	8163      	strh	r3, [r4, #10]
 800d61c:	0a1b      	lsrs	r3, r3, #8
 800d61e:	f365 03c7 	bfi	r3, r5, #3, #5
 800d622:	72e3      	strb	r3, [r4, #11]
 800d624:	4c19      	ldr	r4, [pc, #100]	; (800d68c <create_vumeter_pwr+0xd8>)
		bar_pwr[x] = lv_bar_create(Tela_RF_2, NULL);
 800d626:	6838      	ldr	r0, [r7, #0]
 800d628:	2100      	movs	r1, #0
 800d62a:	f008 fd87 	bl	801613c <lv_bar_create>
		lv_obj_set_size(bar_pwr[x], 4, 20);
 800d62e:	2214      	movs	r2, #20
		bar_pwr[x] = lv_bar_create(Tela_RF_2, NULL);
 800d630:	6060      	str	r0, [r4, #4]
		lv_obj_set_size(bar_pwr[x], 4, 20);
 800d632:	2104      	movs	r1, #4
 800d634:	f002 fd4c 	bl	80100d0 <lv_obj_set_size>
		lv_bar_set_style(bar_pwr[x], LV_BAR_STYLE_BG, &style_indic_bar);
 800d638:	6860      	ldr	r0, [r4, #4]
 800d63a:	4632      	mov	r2, r6
 800d63c:	2100      	movs	r1, #0
 800d63e:	f008 fd67 	bl	8016110 <lv_bar_set_style>
		lv_bar_set_style(bar_pwr[x], LV_BAR_STYLE_INDIC, &style_indic_bar);
 800d642:	6860      	ldr	r0, [r4, #4]
 800d644:	4632      	mov	r2, r6
 800d646:	2101      	movs	r1, #1
 800d648:	f008 fd62 	bl	8016110 <lv_bar_set_style>
		lv_obj_align(bar_pwr[x], NULL, LV_ALIGN_IN_TOP_LEFT, pwr_pos_x[x], 93);
 800d64c:	225d      	movs	r2, #93	; 0x5d
 800d64e:	4b10      	ldr	r3, [pc, #64]	; (800d690 <create_vumeter_pwr+0xdc>)
 800d650:	9200      	str	r2, [sp, #0]
 800d652:	f933 3025 	ldrsh.w	r3, [r3, r5, lsl #2]
 800d656:	6860      	ldr	r0, [r4, #4]
 800d658:	2201      	movs	r2, #1
 800d65a:	2100      	movs	r1, #0
 800d65c:	f002 f998 	bl	800f990 <lv_obj_align>
 800d660:	3501      	adds	r5, #1
		lv_bar_set_value(bar_pwr[x], 100, 0);
 800d662:	2200      	movs	r2, #0
 800d664:	2164      	movs	r1, #100	; 0x64
 800d666:	f854 0f04 	ldr.w	r0, [r4, #4]!
 800d66a:	f008 fcf5 	bl	8016058 <lv_bar_set_value>
	for(uint8_t x = 0; x < 10; x++) {
 800d66e:	2d0a      	cmp	r5, #10
 800d670:	d1d9      	bne.n	800d626 <create_vumeter_pwr+0x72>
}
 800d672:	b003      	add	sp, #12
 800d674:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d676:	bf00      	nop
 800d678:	20005da4 	.word	0x20005da4
 800d67c:	2000c5b8 	.word	0x2000c5b8
 800d680:	20005de0 	.word	0x20005de0
 800d684:	20005c84 	.word	0x20005c84
 800d688:	0801d8d4 	.word	0x0801d8d4
 800d68c:	20005cd4 	.word	0x20005cd4
 800d690:	0802d098 	.word	0x0802d098

0800d694 <update_vumeter_swr>:
{
 800d694:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d696:	4d20      	ldr	r5, [pc, #128]	; (800d718 <update_vumeter_swr+0x84>)
		lv_bar_set_style(bar_swr[x], LV_BAR_STYLE_BG, &style_indic_bar);
 800d698:	4e20      	ldr	r6, [pc, #128]	; (800d71c <update_vumeter_swr+0x88>)
{
 800d69a:	4604      	mov	r4, r0
 800d69c:	f105 0750 	add.w	r7, r5, #80	; 0x50
		lv_bar_set_style(bar_swr[x], LV_BAR_STYLE_BG, &style_indic_bar);
 800d6a0:	4632      	mov	r2, r6
 800d6a2:	2100      	movs	r1, #0
 800d6a4:	6868      	ldr	r0, [r5, #4]
 800d6a6:	f008 fd33 	bl	8016110 <lv_bar_set_style>
		lv_bar_set_style(bar_swr[x], LV_BAR_STYLE_INDIC, &style_indic_bar);
 800d6aa:	f855 0f04 	ldr.w	r0, [r5, #4]!
 800d6ae:	4632      	mov	r2, r6
 800d6b0:	2101      	movs	r1, #1
 800d6b2:	f008 fd2d 	bl	8016110 <lv_bar_set_style>
	for(uint8_t x = 0; x < 20; x++) {
 800d6b6:	42af      	cmp	r7, r5
 800d6b8:	d1f2      	bne.n	800d6a0 <update_vumeter_swr+0xc>
	if(swr != 0) {
 800d6ba:	b364      	cbz	r4, 800d716 <update_vumeter_swr+0x82>
		resul = (uint32_t) (((((swr / 10) / target) * 100) / 2.50f)) ;
 800d6bc:	230a      	movs	r3, #10
 800d6be:	fbb4 f4f3 	udiv	r4, r4, r3
 800d6c2:	4b17      	ldr	r3, [pc, #92]	; (800d720 <update_vumeter_swr+0x8c>)
			lv_bar_set_style(bar_swr[y], LV_BAR_STYLE_BG, &style_indic_bar_vd);
 800d6c4:	4e17      	ldr	r6, [pc, #92]	; (800d724 <update_vumeter_swr+0x90>)
		resul = (uint32_t) (((((swr / 10) / target) * 100) / 2.50f)) ;
 800d6c6:	edd3 6a00 	vldr	s13, [r3]
			lv_bar_set_style(bar_swr[y], LV_BAR_STYLE_BG, &style_indic_bar_vd);
 800d6ca:	4f17      	ldr	r7, [pc, #92]	; (800d728 <update_vumeter_swr+0x94>)
		resul = (uint32_t) (((((swr / 10) / target) * 100) / 2.50f)) ;
 800d6cc:	ee07 4a90 	vmov	s15, r4
 800d6d0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
		for(y = 0; y <= resul; y++) {
 800d6d4:	2400      	movs	r4, #0
		resul = (uint32_t) (((((swr / 10) / target) * 100) / 2.50f)) ;
 800d6d6:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800d6da:	eddf 7a14 	vldr	s15, [pc, #80]	; 800d72c <update_vumeter_swr+0x98>
 800d6de:	ee27 7a27 	vmul.f32	s14, s14, s15
 800d6e2:	eef0 6a04 	vmov.f32	s13, #4	; 0x40200000  2.5
 800d6e6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800d6ea:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d6ee:	ee17 5a90 	vmov	r5, s15
 800d6f2:	2d13      	cmp	r5, #19
 800d6f4:	bf28      	it	cs
 800d6f6:	2513      	movcs	r5, #19
			lv_bar_set_style(bar_swr[y], LV_BAR_STYLE_BG, &style_indic_bar_vd);
 800d6f8:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 800d6fc:	463a      	mov	r2, r7
 800d6fe:	2100      	movs	r1, #0
 800d700:	f008 fd06 	bl	8016110 <lv_bar_set_style>
			lv_bar_set_style(bar_swr[y], LV_BAR_STYLE_INDIC, &style_indic_bar_vd);
 800d704:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 800d708:	463a      	mov	r2, r7
 800d70a:	2101      	movs	r1, #1
		for(y = 0; y <= resul; y++) {
 800d70c:	3401      	adds	r4, #1
			lv_bar_set_style(bar_swr[y], LV_BAR_STYLE_INDIC, &style_indic_bar_vd);
 800d70e:	f008 fcff 	bl	8016110 <lv_bar_set_style>
		for(y = 0; y <= resul; y++) {
 800d712:	42a5      	cmp	r5, r4
 800d714:	d2f0      	bcs.n	800d6f8 <update_vumeter_swr+0x64>
 800d716:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d718:	20005cfc 	.word	0x20005cfc
 800d71c:	20005da4 	.word	0x20005da4
 800d720:	2000001c 	.word	0x2000001c
 800d724:	20005d00 	.word	0x20005d00
 800d728:	20005de0 	.word	0x20005de0
 800d72c:	42c80000 	.word	0x42c80000

0800d730 <update_rf>:

static void update_rf(lv_task_t * param)
{
	update_vumeter_swr(Max_Reflected);
 800d730:	4b01      	ldr	r3, [pc, #4]	; (800d738 <update_rf+0x8>)
 800d732:	6818      	ldr	r0, [r3, #0]
 800d734:	f7ff bfae 	b.w	800d694 <update_vumeter_swr>
 800d738:	20000004 	.word	0x20000004

0800d73c <update_vumeter_fwd>:
{
 800d73c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d73e:	4c23      	ldr	r4, [pc, #140]	; (800d7cc <update_vumeter_fwd+0x90>)
		lv_bar_set_style(bar_fwd[x], LV_BAR_STYLE_BG, &style_indic_bar);
 800d740:	4d23      	ldr	r5, [pc, #140]	; (800d7d0 <update_vumeter_fwd+0x94>)
{
 800d742:	ed2d 8b02 	vpush	{d8}
 800d746:	f104 0650 	add.w	r6, r4, #80	; 0x50
 800d74a:	eeb0 8a40 	vmov.f32	s16, s0
		lv_bar_set_style(bar_fwd[x], LV_BAR_STYLE_BG, &style_indic_bar);
 800d74e:	462a      	mov	r2, r5
 800d750:	2100      	movs	r1, #0
 800d752:	6860      	ldr	r0, [r4, #4]
 800d754:	f008 fcdc 	bl	8016110 <lv_bar_set_style>
		lv_bar_set_style(bar_fwd[x], LV_BAR_STYLE_INDIC, &style_indic_bar);
 800d758:	f854 0f04 	ldr.w	r0, [r4, #4]!
 800d75c:	462a      	mov	r2, r5
 800d75e:	2101      	movs	r1, #1
 800d760:	f008 fcd6 	bl	8016110 <lv_bar_set_style>
	for(uint8_t x = 0; x < 20; x++) {
 800d764:	42a6      	cmp	r6, r4
 800d766:	d1f2      	bne.n	800d74e <update_vumeter_fwd+0x12>
	if(fwd != 0) {
 800d768:	eeb5 8a40 	vcmp.f32	s16, #0.0
 800d76c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d770:	d028      	beq.n	800d7c4 <update_vumeter_fwd+0x88>
		resul = (uint32_t) ((((((float)fwd) / 15.0f) * 100) / 5.0f) - 1) ;
 800d772:	eef2 7a0e 	vmov.f32	s15, #46	; 0x41700000  15.0
 800d776:	ee88 7a27 	vdiv.f32	s14, s16, s15
			lv_bar_set_style(bar_fwd[y], LV_BAR_STYLE_BG, &style_indic_bar_vd);
 800d77a:	4e16      	ldr	r6, [pc, #88]	; (800d7d4 <update_vumeter_fwd+0x98>)
 800d77c:	4f16      	ldr	r7, [pc, #88]	; (800d7d8 <update_vumeter_fwd+0x9c>)
		for(y = 0; y <= resul; y++) {
 800d77e:	2500      	movs	r5, #0
		resul = (uint32_t) ((((((float)fwd) / 15.0f) * 100) / 5.0f) - 1) ;
 800d780:	eddf 7a16 	vldr	s15, [pc, #88]	; 800d7dc <update_vumeter_fwd+0xa0>
 800d784:	ee27 7a27 	vmul.f32	s14, s14, s15
 800d788:	eef1 6a04 	vmov.f32	s13, #20	; 0x40a00000  5.0
 800d78c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800d790:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800d794:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800d798:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d79c:	ee17 4a90 	vmov	r4, s15
 800d7a0:	2c13      	cmp	r4, #19
 800d7a2:	bf28      	it	cs
 800d7a4:	2413      	movcs	r4, #19
			lv_bar_set_style(bar_fwd[y], LV_BAR_STYLE_BG, &style_indic_bar_vd);
 800d7a6:	f856 0025 	ldr.w	r0, [r6, r5, lsl #2]
 800d7aa:	463a      	mov	r2, r7
 800d7ac:	2100      	movs	r1, #0
 800d7ae:	f008 fcaf 	bl	8016110 <lv_bar_set_style>
			lv_bar_set_style(bar_fwd[y], LV_BAR_STYLE_INDIC, &style_indic_bar_vd);
 800d7b2:	f856 0025 	ldr.w	r0, [r6, r5, lsl #2]
 800d7b6:	463a      	mov	r2, r7
 800d7b8:	2101      	movs	r1, #1
		for(y = 0; y <= resul; y++) {
 800d7ba:	3501      	adds	r5, #1
			lv_bar_set_style(bar_fwd[y], LV_BAR_STYLE_INDIC, &style_indic_bar_vd);
 800d7bc:	f008 fca8 	bl	8016110 <lv_bar_set_style>
		for(y = 0; y <= resul; y++) {
 800d7c0:	42ac      	cmp	r4, r5
 800d7c2:	d2f0      	bcs.n	800d7a6 <update_vumeter_fwd+0x6a>
}
 800d7c4:	ecbd 8b02 	vpop	{d8}
 800d7c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d7ca:	bf00      	nop
 800d7cc:	20005c84 	.word	0x20005c84
 800d7d0:	20005da4 	.word	0x20005da4
 800d7d4:	20005c88 	.word	0x20005c88
 800d7d8:	20005de0 	.word	0x20005de0
 800d7dc:	42c80000 	.word	0x42c80000

0800d7e0 <update_rf_1>:
}

static void update_rf_1(lv_task_t * param)
{
	update_vumeter_fwd(target);
 800d7e0:	4b02      	ldr	r3, [pc, #8]	; (800d7ec <update_rf_1+0xc>)
 800d7e2:	ed93 0a00 	vldr	s0, [r3]
 800d7e6:	f7ff bfa9 	b.w	800d73c <update_vumeter_fwd>
 800d7ea:	bf00      	nop
 800d7ec:	2000001c 	.word	0x2000001c

0800d7f0 <update_vumeter_pwr>:
{
 800d7f0:	b570      	push	{r4, r5, r6, lr}
		lv_bar_set_style(bar_pwr[x], LV_BAR_STYLE_BG, &style_indic_bar_vd);
 800d7f2:	4d09      	ldr	r5, [pc, #36]	; (800d818 <update_vumeter_pwr+0x28>)
 800d7f4:	4e09      	ldr	r6, [pc, #36]	; (800d81c <update_vumeter_pwr+0x2c>)
	for(x = 0; x <= resul; x++) {
 800d7f6:	2400      	movs	r4, #0
		lv_bar_set_style(bar_pwr[x], LV_BAR_STYLE_BG, &style_indic_bar_vd);
 800d7f8:	f855 0024 	ldr.w	r0, [r5, r4, lsl #2]
 800d7fc:	4632      	mov	r2, r6
 800d7fe:	2100      	movs	r1, #0
 800d800:	f008 fc86 	bl	8016110 <lv_bar_set_style>
		lv_bar_set_style(bar_pwr[x], LV_BAR_STYLE_INDIC, &style_indic_bar_vd);
 800d804:	f855 0024 	ldr.w	r0, [r5, r4, lsl #2]
 800d808:	4632      	mov	r2, r6
 800d80a:	2101      	movs	r1, #1
	for(x = 0; x <= resul; x++) {
 800d80c:	3401      	adds	r4, #1
		lv_bar_set_style(bar_pwr[x], LV_BAR_STYLE_INDIC, &style_indic_bar_vd);
 800d80e:	f008 fc7f 	bl	8016110 <lv_bar_set_style>
	for(x = 0; x <= resul; x++) {
 800d812:	2c0a      	cmp	r4, #10
 800d814:	d1f0      	bne.n	800d7f8 <update_vumeter_pwr+0x8>
}
 800d816:	bd70      	pop	{r4, r5, r6, pc}
 800d818:	20005cd8 	.word	0x20005cd8
 800d81c:	20005de0 	.word	0x20005de0

0800d820 <print_pwr>:
{
 800d820:	b573      	push	{r0, r1, r4, r5, r6, lr}
	lv_style_copy(&style_txt_fwd, &lv_style_plain);
 800d822:	4c24      	ldr	r4, [pc, #144]	; (800d8b4 <print_pwr+0x94>)
 800d824:	4924      	ldr	r1, [pc, #144]	; (800d8b8 <print_pwr+0x98>)
 800d826:	4620      	mov	r0, r4
 800d828:	f003 fa1e 	bl	8010c68 <lv_style_copy>
	style_txt_fwd.text.font = &lv_font_eurostile_22;
 800d82c:	4b23      	ldr	r3, [pc, #140]	; (800d8bc <print_pwr+0x9c>)
 800d82e:	6263      	str	r3, [r4, #36]	; 0x24
	style_txt_fwd.text.color = LV_COLOR_CYAN;
 800d830:	f894 3020 	ldrb.w	r3, [r4, #32]
 800d834:	f043 031f 	orr.w	r3, r3, #31
 800d838:	f884 3020 	strb.w	r3, [r4, #32]
 800d83c:	8c23      	ldrh	r3, [r4, #32]
 800d83e:	f443 63fc 	orr.w	r3, r3, #2016	; 0x7e0
 800d842:	8423      	strh	r3, [r4, #32]
 800d844:	0a1b      	lsrs	r3, r3, #8
 800d846:	f36f 03c7 	bfc	r3, #3, #5
 800d84a:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
	lv_obj_t *txt_fwd = lv_label_create(Tela_RF_2, NULL);
 800d84e:	4b1c      	ldr	r3, [pc, #112]	; (800d8c0 <print_pwr+0xa0>)
	style_txt_fwd.text.letter_space = 1;
 800d850:	2601      	movs	r6, #1
	lv_obj_t *txt_fwd = lv_label_create(Tela_RF_2, NULL);
 800d852:	6818      	ldr	r0, [r3, #0]
	style_txt_fwd.text.letter_space = 1;
 800d854:	8526      	strh	r6, [r4, #40]	; 0x28
	lv_obj_t *txt_fwd = lv_label_create(Tela_RF_2, NULL);
 800d856:	2100      	movs	r1, #0
	style_txt_fwd.text.line_space = 1;
 800d858:	8566      	strh	r6, [r4, #42]	; 0x2a
	lv_obj_t *txt_fwd = lv_label_create(Tela_RF_2, NULL);
 800d85a:	f00b fa81 	bl	8018d60 <lv_label_create>
	lv_obj_set_style(txt_fwd, &style_txt_fwd); 							// Configura o estilo criado
 800d85e:	4621      	mov	r1, r4
	lv_obj_t *txt_fwd = lv_label_create(Tela_RF_2, NULL);
 800d860:	4605      	mov	r5, r0
	lv_obj_set_style(txt_fwd, &style_txt_fwd); 							// Configura o estilo criado
 800d862:	f002 fd37 	bl	80102d4 <lv_obj_set_style>
	lv_label_set_long_mode(txt_fwd, LV_LABEL_LONG_BREAK); 				// Quebra as linhas longas
 800d866:	4631      	mov	r1, r6
 800d868:	4628      	mov	r0, r5
 800d86a:	f00b fa23 	bl	8018cb4 <lv_label_set_long_mode>
	sprintf(buffer, "%0.1f", pwr);
 800d86e:	4c15      	ldr	r4, [pc, #84]	; (800d8c4 <print_pwr+0xa4>)
	lv_label_set_recolor(txt_fwd, true); 								// Ativa recolorizar por comandos no texto
 800d870:	4631      	mov	r1, r6
 800d872:	4628      	mov	r0, r5
 800d874:	f00b fa60 	bl	8018d38 <lv_label_set_recolor>
	lv_label_set_align(txt_fwd, LV_ALIGN_IN_BOTTOM_RIGHT); 				// Centraliza linhas alinhadas
 800d878:	4628      	mov	r0, r5
 800d87a:	2106      	movs	r1, #6
 800d87c:	f00a feb9 	bl	80185f2 <lv_label_set_align>
	sprintf(buffer, "%0.1f", pwr);
 800d880:	2200      	movs	r2, #0
 800d882:	4b11      	ldr	r3, [pc, #68]	; (800d8c8 <print_pwr+0xa8>)
 800d884:	4911      	ldr	r1, [pc, #68]	; (800d8cc <print_pwr+0xac>)
 800d886:	4620      	mov	r0, r4
 800d888:	f00d fac6 	bl	801ae18 <sprintf>
	lv_label_set_text(txt_fwd, buffer);
 800d88c:	4621      	mov	r1, r4
 800d88e:	4628      	mov	r0, r5
 800d890:	f00b f9bc 	bl	8018c0c <lv_label_set_text>
	lv_obj_set_width(txt_fwd, 200); 									// Configuura o comprimento
 800d894:	4628      	mov	r0, r5
 800d896:	21c8      	movs	r1, #200	; 0xc8
 800d898:	f002 fc64 	bl	8010164 <lv_obj_set_width>
	lv_obj_align(txt_fwd, NULL, LV_ALIGN_IN_BOTTOM_RIGHT, -30, -13); 		// Alinha ao centro
 800d89c:	f06f 030c 	mvn.w	r3, #12
 800d8a0:	9300      	str	r3, [sp, #0]
 800d8a2:	2206      	movs	r2, #6
 800d8a4:	f06f 031d 	mvn.w	r3, #29
 800d8a8:	2100      	movs	r1, #0
 800d8aa:	4628      	mov	r0, r5
 800d8ac:	f002 f870 	bl	800f990 <lv_obj_align>
}
 800d8b0:	b002      	add	sp, #8
 800d8b2:	bd70      	pop	{r4, r5, r6, pc}
 800d8b4:	20005f0c 	.word	0x20005f0c
 800d8b8:	2000c6a8 	.word	0x2000c6a8
 800d8bc:	20000d18 	.word	0x20000d18
 800d8c0:	20005c84 	.word	0x20005c84
 800d8c4:	20004d48 	.word	0x20004d48
 800d8c8:	402e0000 	.word	0x402e0000
 800d8cc:	0802cbb8 	.word	0x0802cbb8

0800d8d0 <screen_RF_2>:
	Tela_RF_2 = lv_obj_create(NULL, NULL);
 800d8d0:	2100      	movs	r1, #0
{
 800d8d2:	b538      	push	{r3, r4, r5, lr}
	Tela_RF_2 = lv_obj_create(NULL, NULL);
 800d8d4:	4608      	mov	r0, r1
 800d8d6:	f002 fa7d 	bl	800fdd4 <lv_obj_create>
 800d8da:	4d45      	ldr	r5, [pc, #276]	; (800d9f0 <screen_RF_2+0x120>)
	img_fundo_2 = lv_img_create(Tela_RF_2, NULL);
 800d8dc:	4c45      	ldr	r4, [pc, #276]	; (800d9f4 <screen_RF_2+0x124>)
	Tela_RF_2 = lv_obj_create(NULL, NULL);
 800d8de:	6028      	str	r0, [r5, #0]
	img_fundo_2 = lv_img_create(Tela_RF_2, NULL);
 800d8e0:	2100      	movs	r1, #0
 800d8e2:	f00a fb6f 	bl	8017fc4 <lv_img_create>
	lv_img_set_src(img_fundo_2, &tela_rf_2);
 800d8e6:	4944      	ldr	r1, [pc, #272]	; (800d9f8 <screen_RF_2+0x128>)
	img_fundo_2 = lv_img_create(Tela_RF_2, NULL);
 800d8e8:	6020      	str	r0, [r4, #0]
	lv_img_set_src(img_fundo_2, &tela_rf_2);
 800d8ea:	f00a fadb 	bl	8017ea4 <lv_img_set_src>
	lv_obj_set_protect(img_fundo_2, LV_PROTECT_POS);
 800d8ee:	6820      	ldr	r0, [r4, #0]
 800d8f0:	2104      	movs	r1, #4
 800d8f2:	f001 fea1 	bl	800f638 <lv_obj_set_protect>
	lv_obj_set_event_cb(img_fundo_2, btn_event_esc_rf2);
 800d8f6:	6820      	ldr	r0, [r4, #0]
 800d8f8:	4940      	ldr	r1, [pc, #256]	; (800d9fc <screen_RF_2+0x12c>)
 800d8fa:	f001 feaa 	bl	800f652 <lv_obj_set_event_cb>
	lv_obj_set_click(img_fundo_2, 1);
 800d8fe:	6820      	ldr	r0, [r4, #0]
	imgbtn1[0] = lv_imgbtn_create(Tela_RF_2, NULL);
 800d900:	4c3f      	ldr	r4, [pc, #252]	; (800da00 <screen_RF_2+0x130>)
	lv_obj_set_click(img_fundo_2, 1);
 800d902:	2101      	movs	r1, #1
 800d904:	f001 fe7c 	bl	800f600 <lv_obj_set_click>
	imgbtn1[0] = lv_imgbtn_create(Tela_RF_2, NULL);
 800d908:	2100      	movs	r1, #0
 800d90a:	6828      	ldr	r0, [r5, #0]
 800d90c:	f00a fc84 	bl	8018218 <lv_imgbtn_create>
	lv_obj_set_user_data(imgbtn1[0], 0);
 800d910:	2100      	movs	r1, #0
	imgbtn1[0] = lv_imgbtn_create(Tela_RF_2, NULL);
 800d912:	6020      	str	r0, [r4, #0]
	lv_obj_set_user_data(imgbtn1[0], 0);
 800d914:	f002 fe37 	bl	8010586 <lv_obj_set_user_data>
	lv_imgbtn_set_src(imgbtn1[0], LV_BTN_STATE_REL, &Btn_poweron);
 800d918:	4a3a      	ldr	r2, [pc, #232]	; (800da04 <screen_RF_2+0x134>)
 800d91a:	6820      	ldr	r0, [r4, #0]
 800d91c:	2100      	movs	r1, #0
 800d91e:	f00a fcc3 	bl	80182a8 <lv_imgbtn_set_src>
	lv_imgbtn_set_src(imgbtn1[0], LV_BTN_STATE_TGL_REL, &Btn_poweron_vd);
 800d922:	4a39      	ldr	r2, [pc, #228]	; (800da08 <screen_RF_2+0x138>)
 800d924:	6820      	ldr	r0, [r4, #0]
 800d926:	2102      	movs	r1, #2
 800d928:	f00a fcbe 	bl	80182a8 <lv_imgbtn_set_src>
	lv_imgbtn_set_src(imgbtn1[0], LV_BTN_STATE_TGL_PR, &Btn_poweron);
 800d92c:	4a35      	ldr	r2, [pc, #212]	; (800da04 <screen_RF_2+0x134>)
 800d92e:	6820      	ldr	r0, [r4, #0]
 800d930:	2103      	movs	r1, #3
 800d932:	f00a fcb9 	bl	80182a8 <lv_imgbtn_set_src>
	lv_imgbtn_set_src(imgbtn1[0], LV_BTN_STATE_PR, &Btn_poweron);
 800d936:	4a33      	ldr	r2, [pc, #204]	; (800da04 <screen_RF_2+0x134>)
 800d938:	6820      	ldr	r0, [r4, #0]
 800d93a:	2101      	movs	r1, #1
 800d93c:	f00a fcb4 	bl	80182a8 <lv_imgbtn_set_src>
	lv_imgbtn_set_src(imgbtn1[0], LV_BTN_STATE_INA, &Btn_poweron_am);
 800d940:	4a32      	ldr	r2, [pc, #200]	; (800da0c <screen_RF_2+0x13c>)
 800d942:	6820      	ldr	r0, [r4, #0]
 800d944:	2104      	movs	r1, #4
 800d946:	f00a fcaf 	bl	80182a8 <lv_imgbtn_set_src>
	lv_obj_set_event_cb(imgbtn1[0], btn_power);
 800d94a:	4931      	ldr	r1, [pc, #196]	; (800da10 <screen_RF_2+0x140>)
 800d94c:	6820      	ldr	r0, [r4, #0]
 800d94e:	f001 fe80 	bl	800f652 <lv_obj_set_event_cb>
	lv_obj_set_pos(imgbtn1[0], 1, 35);
 800d952:	2223      	movs	r2, #35	; 0x23
 800d954:	2101      	movs	r1, #1
 800d956:	6820      	ldr	r0, [r4, #0]
 800d958:	f001 ffc5 	bl	800f8e6 <lv_obj_set_pos>
	imgbtn1[1] = lv_imgbtn_create(Tela_RF_2, imgbtn1[0]);
 800d95c:	6821      	ldr	r1, [r4, #0]
 800d95e:	6828      	ldr	r0, [r5, #0]
 800d960:	f00a fc5a 	bl	8018218 <lv_imgbtn_create>
	lv_obj_set_user_data(imgbtn1[1], 1);
 800d964:	2101      	movs	r1, #1
	imgbtn1[1] = lv_imgbtn_create(Tela_RF_2, imgbtn1[0]);
 800d966:	6060      	str	r0, [r4, #4]
	lv_obj_set_user_data(imgbtn1[1], 1);
 800d968:	f002 fe0d 	bl	8010586 <lv_obj_set_user_data>
	lv_imgbtn_set_src(imgbtn1[1], LV_BTN_STATE_REL, &Btn_poweroff);
 800d96c:	4a29      	ldr	r2, [pc, #164]	; (800da14 <screen_RF_2+0x144>)
 800d96e:	6860      	ldr	r0, [r4, #4]
 800d970:	2100      	movs	r1, #0
 800d972:	f00a fc99 	bl	80182a8 <lv_imgbtn_set_src>
	lv_imgbtn_set_src(imgbtn1[1], LV_BTN_STATE_TGL_REL, &Btn_poweroff_vm);
 800d976:	4a28      	ldr	r2, [pc, #160]	; (800da18 <screen_RF_2+0x148>)
 800d978:	6860      	ldr	r0, [r4, #4]
 800d97a:	2102      	movs	r1, #2
 800d97c:	f00a fc94 	bl	80182a8 <lv_imgbtn_set_src>
	lv_imgbtn_set_src(imgbtn1[1], LV_BTN_STATE_TGL_PR, &Btn_poweroff);
 800d980:	4a24      	ldr	r2, [pc, #144]	; (800da14 <screen_RF_2+0x144>)
 800d982:	6860      	ldr	r0, [r4, #4]
 800d984:	2103      	movs	r1, #3
 800d986:	f00a fc8f 	bl	80182a8 <lv_imgbtn_set_src>
	lv_imgbtn_set_src(imgbtn1[1], LV_BTN_STATE_PR, &Btn_poweroff);
 800d98a:	4a22      	ldr	r2, [pc, #136]	; (800da14 <screen_RF_2+0x144>)
 800d98c:	6860      	ldr	r0, [r4, #4]
 800d98e:	2101      	movs	r1, #1
 800d990:	f00a fc8a 	bl	80182a8 <lv_imgbtn_set_src>
	lv_imgbtn_set_src(imgbtn1[1], LV_BTN_STATE_INA, &Btn_poweroff_am);
 800d994:	4a21      	ldr	r2, [pc, #132]	; (800da1c <screen_RF_2+0x14c>)
 800d996:	6860      	ldr	r0, [r4, #4]
 800d998:	2104      	movs	r1, #4
 800d99a:	f00a fc85 	bl	80182a8 <lv_imgbtn_set_src>
	lv_obj_set_pos(imgbtn1[1], 1, 63);
 800d99e:	223f      	movs	r2, #63	; 0x3f
 800d9a0:	2101      	movs	r1, #1
 800d9a2:	6860      	ldr	r0, [r4, #4]
 800d9a4:	f001 ff9f 	bl	800f8e6 <lv_obj_set_pos>
	if(RFEnable) {
 800d9a8:	4b1d      	ldr	r3, [pc, #116]	; (800da20 <screen_RF_2+0x150>)
 800d9aa:	781b      	ldrb	r3, [r3, #0]
 800d9ac:	b1cb      	cbz	r3, 800d9e2 <screen_RF_2+0x112>
		lv_btn_set_state(imgbtn1[0], LV_BTN_STATE_TGL_REL);
 800d9ae:	2102      	movs	r1, #2
 800d9b0:	6820      	ldr	r0, [r4, #0]
 800d9b2:	f008 fda5 	bl	8016500 <lv_btn_set_state>
		lv_btn_set_state(imgbtn1[1], LV_BTN_STATE_TGL_PR);
 800d9b6:	2103      	movs	r1, #3
		lv_btn_set_state(imgbtn1[1], LV_BTN_STATE_TGL_REL);
 800d9b8:	6860      	ldr	r0, [r4, #4]
	update_vumeter_pwr(forward);
 800d9ba:	4c1a      	ldr	r4, [pc, #104]	; (800da24 <screen_RF_2+0x154>)
		lv_btn_set_state(imgbtn1[1], LV_BTN_STATE_TGL_REL);
 800d9bc:	f008 fda0 	bl	8016500 <lv_btn_set_state>
	create_vumeter_pwr();
 800d9c0:	f7ff fdf8 	bl	800d5b4 <create_vumeter_pwr>
	update_vumeter_pwr(forward);
 800d9c4:	ed94 0a00 	vldr	s0, [r4]
 800d9c8:	f7ff ff12 	bl	800d7f0 <update_vumeter_pwr>
	print_pwr(forward);
 800d9cc:	ed94 0a00 	vldr	s0, [r4]
 800d9d0:	f7ff ff26 	bl	800d820 <print_pwr>
 800d9d4:	6828      	ldr	r0, [r5, #0]
 800d9d6:	f001 fbe9 	bl	800f1ac <lv_disp_load_scr>
	TelaAtiva = TelaRF_2;
 800d9da:	4b13      	ldr	r3, [pc, #76]	; (800da28 <screen_RF_2+0x158>)
 800d9dc:	2208      	movs	r2, #8
 800d9de:	601a      	str	r2, [r3, #0]
 800d9e0:	bd38      	pop	{r3, r4, r5, pc}
		lv_btn_set_state(imgbtn1[0], LV_BTN_STATE_TGL_PR);
 800d9e2:	2103      	movs	r1, #3
 800d9e4:	6820      	ldr	r0, [r4, #0]
 800d9e6:	f008 fd8b 	bl	8016500 <lv_btn_set_state>
		lv_btn_set_state(imgbtn1[1], LV_BTN_STATE_TGL_REL);
 800d9ea:	2102      	movs	r1, #2
 800d9ec:	e7e4      	b.n	800d9b8 <screen_RF_2+0xe8>
 800d9ee:	bf00      	nop
 800d9f0:	20005c84 	.word	0x20005c84
 800d9f4:	20005d58 	.word	0x20005d58
 800d9f8:	20001c70 	.word	0x20001c70
 800d9fc:	0800e261 	.word	0x0800e261
 800da00:	20005d5c 	.word	0x20005d5c
 800da04:	20001b80 	.word	0x20001b80
 800da08:	20001b98 	.word	0x20001b98
 800da0c:	20001b8c 	.word	0x20001b8c
 800da10:	0800d381 	.word	0x0800d381
 800da14:	20001b5c 	.word	0x20001b5c
 800da18:	20001b74 	.word	0x20001b74
 800da1c:	20001b68 	.word	0x20001b68
 800da20:	20000008 	.word	0x20000008
 800da24:	20004e30 	.word	0x20004e30
 800da28:	20003444 	.word	0x20003444

0800da2c <btn_event_next_rf1>:
	if(event == LV_EVENT_APPLY) {
 800da2c:	2911      	cmp	r1, #17
{
 800da2e:	b508      	push	{r3, lr}
	if(event == LV_EVENT_APPLY) {
 800da30:	d10b      	bne.n	800da4a <btn_event_next_rf1+0x1e>
		lv_task_del(Task_RF_1);
 800da32:	4b06      	ldr	r3, [pc, #24]	; (800da4c <btn_event_next_rf1+0x20>)
 800da34:	6818      	ldr	r0, [r3, #0]
 800da36:	f007 ff7b 	bl	8015930 <lv_task_del>
		lv_obj_del(Tela_RF_1);
 800da3a:	4b05      	ldr	r3, [pc, #20]	; (800da50 <btn_event_next_rf1+0x24>)
 800da3c:	6818      	ldr	r0, [r3, #0]
 800da3e:	f002 fbba 	bl	80101b6 <lv_obj_del>
}
 800da42:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		screen_RF_2();
 800da46:	f7ff bf43 	b.w	800d8d0 <screen_RF_2>
 800da4a:	bd08      	pop	{r3, pc}
 800da4c:	20005c6c 	.word	0x20005c6c
 800da50:	20005c80 	.word	0x20005c80

0800da54 <create_vumeter_fwd>:
{
 800da54:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	lv_style_copy(&style_indic_bar, &lv_style_pretty);
 800da56:	4e30      	ldr	r6, [pc, #192]	; (800db18 <create_vumeter_fwd+0xc4>)
 800da58:	4930      	ldr	r1, [pc, #192]	; (800db1c <create_vumeter_fwd+0xc8>)
	lv_style_copy(&style_indic_bar_vd, &lv_style_pretty);
 800da5a:	4c31      	ldr	r4, [pc, #196]	; (800db20 <create_vumeter_fwd+0xcc>)
		bar_fwd[x] = lv_bar_create(Tela_RF, NULL);
 800da5c:	4f31      	ldr	r7, [pc, #196]	; (800db24 <create_vumeter_fwd+0xd0>)
	lv_style_copy(&style_indic_bar, &lv_style_pretty);
 800da5e:	4630      	mov	r0, r6
 800da60:	f003 f902 	bl	8010c68 <lv_style_copy>
	style_indic_bar.body.grad_color = LV_COLOR_MAKE(105, 105, 105);
 800da64:	4b30      	ldr	r3, [pc, #192]	; (800db28 <create_vumeter_fwd+0xd4>)
	lv_style_copy(&style_indic_bar_vd, &lv_style_pretty);
 800da66:	492d      	ldr	r1, [pc, #180]	; (800db1c <create_vumeter_fwd+0xc8>)
	style_indic_bar.body.grad_color = LV_COLOR_MAKE(105, 105, 105);
 800da68:	881b      	ldrh	r3, [r3, #0]
 800da6a:	80b3      	strh	r3, [r6, #4]
	style_indic_bar.body.radius = 0;
 800da6c:	2500      	movs	r5, #0
	lv_style_copy(&style_indic_bar_vd, &lv_style_pretty);
 800da6e:	4620      	mov	r0, r4
	style_indic_bar.body.main_color = LV_COLOR_MAKE(105, 105, 105);
 800da70:	8073      	strh	r3, [r6, #2]
	style_indic_bar.body.border.color = LV_COLOR_MAKE(105, 105, 105);
 800da72:	8173      	strh	r3, [r6, #10]
	style_indic_bar.body.radius = 0;
 800da74:	80f5      	strh	r5, [r6, #6]
	lv_style_copy(&style_indic_bar_vd, &lv_style_pretty);
 800da76:	f003 f8f7 	bl	8010c68 <lv_style_copy>
	style_indic_bar_vd.body.grad_color = LV_COLOR_MAKE(0, 255, 0);
 800da7a:	7923      	ldrb	r3, [r4, #4]
	style_indic_bar_vd.body.radius = 0;
 800da7c:	80e5      	strh	r5, [r4, #6]
	style_indic_bar_vd.body.grad_color = LV_COLOR_MAKE(0, 255, 0);
 800da7e:	f365 0304 	bfi	r3, r5, #0, #5
 800da82:	7123      	strb	r3, [r4, #4]
 800da84:	88a3      	ldrh	r3, [r4, #4]
 800da86:	f443 63fc 	orr.w	r3, r3, #2016	; 0x7e0
 800da8a:	80a3      	strh	r3, [r4, #4]
 800da8c:	0a1b      	lsrs	r3, r3, #8
 800da8e:	f365 03c7 	bfi	r3, r5, #3, #5
 800da92:	7163      	strb	r3, [r4, #5]
	style_indic_bar_vd.body.main_color = LV_COLOR_MAKE(0, 255, 0);
 800da94:	78a3      	ldrb	r3, [r4, #2]
 800da96:	f365 0304 	bfi	r3, r5, #0, #5
 800da9a:	70a3      	strb	r3, [r4, #2]
 800da9c:	8863      	ldrh	r3, [r4, #2]
 800da9e:	f443 63fc 	orr.w	r3, r3, #2016	; 0x7e0
 800daa2:	8063      	strh	r3, [r4, #2]
 800daa4:	0a1b      	lsrs	r3, r3, #8
 800daa6:	f365 03c7 	bfi	r3, r5, #3, #5
 800daaa:	70e3      	strb	r3, [r4, #3]
	style_indic_bar_vd.body.border.color = LV_COLOR_MAKE(0, 255, 0);
 800daac:	7aa3      	ldrb	r3, [r4, #10]
 800daae:	f365 0304 	bfi	r3, r5, #0, #5
 800dab2:	72a3      	strb	r3, [r4, #10]
 800dab4:	8963      	ldrh	r3, [r4, #10]
 800dab6:	f443 63fc 	orr.w	r3, r3, #2016	; 0x7e0
 800daba:	8163      	strh	r3, [r4, #10]
 800dabc:	0a1b      	lsrs	r3, r3, #8
 800dabe:	f365 03c7 	bfi	r3, r5, #3, #5
 800dac2:	72e3      	strb	r3, [r4, #11]
 800dac4:	4c19      	ldr	r4, [pc, #100]	; (800db2c <create_vumeter_fwd+0xd8>)
		bar_fwd[x] = lv_bar_create(Tela_RF, NULL);
 800dac6:	6838      	ldr	r0, [r7, #0]
 800dac8:	2100      	movs	r1, #0
 800daca:	f008 fb37 	bl	801613c <lv_bar_create>
		lv_obj_set_size(bar_fwd[x], 4, 19);
 800dace:	2213      	movs	r2, #19
		bar_fwd[x] = lv_bar_create(Tela_RF, NULL);
 800dad0:	6060      	str	r0, [r4, #4]
		lv_obj_set_size(bar_fwd[x], 4, 19);
 800dad2:	2104      	movs	r1, #4
 800dad4:	f002 fafc 	bl	80100d0 <lv_obj_set_size>
		lv_bar_set_style(bar_fwd[x], LV_BAR_STYLE_BG, &style_indic_bar);
 800dad8:	6860      	ldr	r0, [r4, #4]
 800dada:	4632      	mov	r2, r6
 800dadc:	2100      	movs	r1, #0
 800dade:	f008 fb17 	bl	8016110 <lv_bar_set_style>
		lv_bar_set_style(bar_fwd[x], LV_BAR_STYLE_INDIC, &style_indic_bar);
 800dae2:	6860      	ldr	r0, [r4, #4]
 800dae4:	4632      	mov	r2, r6
 800dae6:	2101      	movs	r1, #1
 800dae8:	f008 fb12 	bl	8016110 <lv_bar_set_style>
		lv_obj_align(bar_fwd[x], NULL, LV_ALIGN_IN_TOP_LEFT, fwd_pos_x[x], 86);
 800daec:	2256      	movs	r2, #86	; 0x56
 800daee:	4b10      	ldr	r3, [pc, #64]	; (800db30 <create_vumeter_fwd+0xdc>)
 800daf0:	9200      	str	r2, [sp, #0]
 800daf2:	f933 3025 	ldrsh.w	r3, [r3, r5, lsl #2]
 800daf6:	6860      	ldr	r0, [r4, #4]
 800daf8:	2201      	movs	r2, #1
 800dafa:	2100      	movs	r1, #0
 800dafc:	f001 ff48 	bl	800f990 <lv_obj_align>
 800db00:	3501      	adds	r5, #1
		lv_bar_set_value(bar_fwd[x], 100, 0);
 800db02:	2200      	movs	r2, #0
 800db04:	2164      	movs	r1, #100	; 0x64
 800db06:	f854 0f04 	ldr.w	r0, [r4, #4]!
 800db0a:	f008 faa5 	bl	8016058 <lv_bar_set_value>
	for(uint8_t x = 0; x < 20; x++) {
 800db0e:	2d14      	cmp	r5, #20
 800db10:	d1d9      	bne.n	800dac6 <create_vumeter_fwd+0x72>
}
 800db12:	b003      	add	sp, #12
 800db14:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800db16:	bf00      	nop
 800db18:	20005da4 	.word	0x20005da4
 800db1c:	2000c5b8 	.word	0x2000c5b8
 800db20:	20005de0 	.word	0x20005de0
 800db24:	20005c7c 	.word	0x20005c7c
 800db28:	0801d8d4 	.word	0x0801d8d4
 800db2c:	20005c84 	.word	0x20005c84
 800db30:	0802d010 	.word	0x0802d010

0800db34 <btn_next_rf>:
{
 800db34:	b538      	push	{r3, r4, r5, lr}
	imgbtn_next[0] = lv_imgbtn_create(Tela_RF, NULL);
 800db36:	4b15      	ldr	r3, [pc, #84]	; (800db8c <btn_next_rf+0x58>)
	lv_imgbtn_set_src(imgbtn_next[0], LV_BTN_STATE_REL, &Btn_next);
 800db38:	4d15      	ldr	r5, [pc, #84]	; (800db90 <btn_next_rf+0x5c>)
	imgbtn_next[0] = lv_imgbtn_create(Tela_RF, NULL);
 800db3a:	6818      	ldr	r0, [r3, #0]
 800db3c:	4c15      	ldr	r4, [pc, #84]	; (800db94 <btn_next_rf+0x60>)
 800db3e:	2100      	movs	r1, #0
 800db40:	f00a fb6a 	bl	8018218 <lv_imgbtn_create>
	lv_imgbtn_set_src(imgbtn_next[0], LV_BTN_STATE_REL, &Btn_next);
 800db44:	462a      	mov	r2, r5
 800db46:	2100      	movs	r1, #0
	imgbtn_next[0] = lv_imgbtn_create(Tela_RF, NULL);
 800db48:	6020      	str	r0, [r4, #0]
	lv_imgbtn_set_src(imgbtn_next[0], LV_BTN_STATE_REL, &Btn_next);
 800db4a:	f00a fbad 	bl	80182a8 <lv_imgbtn_set_src>
	lv_imgbtn_set_src(imgbtn_next[0], LV_BTN_STATE_TGL_REL, &Btn_next);
 800db4e:	462a      	mov	r2, r5
 800db50:	6820      	ldr	r0, [r4, #0]
 800db52:	2102      	movs	r1, #2
 800db54:	f00a fba8 	bl	80182a8 <lv_imgbtn_set_src>
	lv_imgbtn_set_src(imgbtn_next[0], LV_BTN_STATE_TGL_PR, &Btn_next);
 800db58:	462a      	mov	r2, r5
 800db5a:	6820      	ldr	r0, [r4, #0]
 800db5c:	2103      	movs	r1, #3
 800db5e:	f00a fba3 	bl	80182a8 <lv_imgbtn_set_src>
	lv_imgbtn_set_src(imgbtn_next[0], LV_BTN_STATE_PR, &Btn_next);
 800db62:	462a      	mov	r2, r5
 800db64:	6820      	ldr	r0, [r4, #0]
 800db66:	2101      	movs	r1, #1
 800db68:	f00a fb9e 	bl	80182a8 <lv_imgbtn_set_src>
	lv_imgbtn_set_src(imgbtn_next[0], LV_BTN_STATE_INA, &Btn_next);
 800db6c:	462a      	mov	r2, r5
 800db6e:	6820      	ldr	r0, [r4, #0]
 800db70:	2104      	movs	r1, #4
 800db72:	f00a fb99 	bl	80182a8 <lv_imgbtn_set_src>
	lv_obj_set_event_cb(imgbtn_next[0], btn_event_next_rf);
 800db76:	6820      	ldr	r0, [r4, #0]
 800db78:	4907      	ldr	r1, [pc, #28]	; (800db98 <btn_next_rf+0x64>)
 800db7a:	f001 fd6a 	bl	800f652 <lv_obj_set_event_cb>
	lv_obj_set_pos(imgbtn_next[0], 112, 18);
 800db7e:	6820      	ldr	r0, [r4, #0]
 800db80:	2212      	movs	r2, #18
 800db82:	2170      	movs	r1, #112	; 0x70
}
 800db84:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	lv_obj_set_pos(imgbtn_next[0], 112, 18);
 800db88:	f001 bead 	b.w	800f8e6 <lv_obj_set_pos>
 800db8c:	20005c7c 	.word	0x20005c7c
 800db90:	20001b20 	.word	0x20001b20
 800db94:	20005d64 	.word	0x20005d64
 800db98:	0800e27d 	.word	0x0800e27d

0800db9c <btn_next_rf1>:
{
 800db9c:	b538      	push	{r3, r4, r5, lr}
	imgbtn_next[1] = lv_imgbtn_create(Tela_RF_1, NULL);
 800db9e:	4b15      	ldr	r3, [pc, #84]	; (800dbf4 <btn_next_rf1+0x58>)
	lv_imgbtn_set_src(imgbtn_next[1], LV_BTN_STATE_REL, &Btn_next);
 800dba0:	4d15      	ldr	r5, [pc, #84]	; (800dbf8 <btn_next_rf1+0x5c>)
	imgbtn_next[1] = lv_imgbtn_create(Tela_RF_1, NULL);
 800dba2:	6818      	ldr	r0, [r3, #0]
 800dba4:	4c15      	ldr	r4, [pc, #84]	; (800dbfc <btn_next_rf1+0x60>)
 800dba6:	2100      	movs	r1, #0
 800dba8:	f00a fb36 	bl	8018218 <lv_imgbtn_create>
	lv_imgbtn_set_src(imgbtn_next[1], LV_BTN_STATE_REL, &Btn_next);
 800dbac:	462a      	mov	r2, r5
 800dbae:	2100      	movs	r1, #0
	imgbtn_next[1] = lv_imgbtn_create(Tela_RF_1, NULL);
 800dbb0:	6060      	str	r0, [r4, #4]
	lv_imgbtn_set_src(imgbtn_next[1], LV_BTN_STATE_REL, &Btn_next);
 800dbb2:	f00a fb79 	bl	80182a8 <lv_imgbtn_set_src>
	lv_imgbtn_set_src(imgbtn_next[1], LV_BTN_STATE_TGL_REL, &Btn_next);
 800dbb6:	462a      	mov	r2, r5
 800dbb8:	6860      	ldr	r0, [r4, #4]
 800dbba:	2102      	movs	r1, #2
 800dbbc:	f00a fb74 	bl	80182a8 <lv_imgbtn_set_src>
	lv_imgbtn_set_src(imgbtn_next[1], LV_BTN_STATE_TGL_PR, &Btn_next);
 800dbc0:	462a      	mov	r2, r5
 800dbc2:	6860      	ldr	r0, [r4, #4]
 800dbc4:	2103      	movs	r1, #3
 800dbc6:	f00a fb6f 	bl	80182a8 <lv_imgbtn_set_src>
	lv_imgbtn_set_src(imgbtn_next[1], LV_BTN_STATE_PR, &Btn_next);
 800dbca:	462a      	mov	r2, r5
 800dbcc:	6860      	ldr	r0, [r4, #4]
 800dbce:	2101      	movs	r1, #1
 800dbd0:	f00a fb6a 	bl	80182a8 <lv_imgbtn_set_src>
	lv_imgbtn_set_src(imgbtn_next[1], LV_BTN_STATE_INA, &Btn_next);
 800dbd4:	462a      	mov	r2, r5
 800dbd6:	6860      	ldr	r0, [r4, #4]
 800dbd8:	2104      	movs	r1, #4
 800dbda:	f00a fb65 	bl	80182a8 <lv_imgbtn_set_src>
	lv_obj_set_event_cb(imgbtn_next[1], btn_event_next_rf1);
 800dbde:	6860      	ldr	r0, [r4, #4]
 800dbe0:	4907      	ldr	r1, [pc, #28]	; (800dc00 <btn_next_rf1+0x64>)
 800dbe2:	f001 fd36 	bl	800f652 <lv_obj_set_event_cb>
	lv_obj_set_pos(imgbtn_next[1], 112, 18);
 800dbe6:	6860      	ldr	r0, [r4, #4]
 800dbe8:	2212      	movs	r2, #18
 800dbea:	2170      	movs	r1, #112	; 0x70
}
 800dbec:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	lv_obj_set_pos(imgbtn_next[1], 112, 18);
 800dbf0:	f001 be79 	b.w	800f8e6 <lv_obj_set_pos>
 800dbf4:	20005c80 	.word	0x20005c80
 800dbf8:	20001b20 	.word	0x20001b20
 800dbfc:	20005d64 	.word	0x20005d64
 800dc00:	0800da2d 	.word	0x0800da2d

0800dc04 <prog_swr>:
{
 800dc04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if( swr > 0) {
 800dc08:	4606      	mov	r6, r0
{
 800dc0a:	b085      	sub	sp, #20
	if( swr > 0) {
 800dc0c:	2800      	cmp	r0, #0
 800dc0e:	f000 813d 	beq.w	800de8c <prog_swr+0x288>
		un = swr / 10;
 800dc12:	270a      	movs	r7, #10
 800dc14:	fbb0 f4f7 	udiv	r4, r0, r7
		ml = (swr % 10);
 800dc18:	fb07 0714 	mls	r7, r7, r4, r0
		logI("Debug: Prog_SWR SWR: %ld  Unidade: %d, Mantissa: %d\n", swr, un, ml);
 800dc1c:	4601      	mov	r1, r0
 800dc1e:	463b      	mov	r3, r7
 800dc20:	4622      	mov	r2, r4
 800dc22:	489b      	ldr	r0, [pc, #620]	; (800de90 <prog_swr+0x28c>)
 800dc24:	f7f3 fd22 	bl	800166c <logI>
		un = swr / 10;
 800dc28:	4626      	mov	r6, r4
	lv_style_copy(&style_roller_anim, &lv_style_plain_color);
 800dc2a:	4d9a      	ldr	r5, [pc, #616]	; (800de94 <prog_swr+0x290>)
 800dc2c:	499a      	ldr	r1, [pc, #616]	; (800de98 <prog_swr+0x294>)
	lv_style_copy(&style_roller_b, &lv_style_plain_color);
 800dc2e:	4c9b      	ldr	r4, [pc, #620]	; (800de9c <prog_swr+0x298>)
	style_roller_anim.text.font = &lv_font_eurostile_24;
 800dc30:	f8df a280 	ldr.w	sl, [pc, #640]	; 800deb4 <prog_swr+0x2b0>
	lv_style_copy(&style_roller_anim, &lv_style_plain_color);
 800dc34:	4628      	mov	r0, r5
 800dc36:	f003 f817 	bl	8010c68 <lv_style_copy>
	style_roller_anim.body.grad_color = LV_COLOR_BLACK;
 800dc3a:	792b      	ldrb	r3, [r5, #4]
	style_roller_anim.body.main_color = LV_COLOR_GRAY;
 800dc3c:	4a98      	ldr	r2, [pc, #608]	; (800dea0 <prog_swr+0x29c>)
	lv_style_copy(&style_roller_b, &lv_style_plain_color);
 800dc3e:	4996      	ldr	r1, [pc, #600]	; (800de98 <prog_swr+0x294>)
	style_roller_anim.body.main_color = LV_COLOR_GRAY;
 800dc40:	f8b2 b004 	ldrh.w	fp, [r2, #4]
 800dc44:	f8a5 b002 	strh.w	fp, [r5, #2]
	style_roller_anim.body.grad_color = LV_COLOR_BLACK;
 800dc48:	f36f 0304 	bfc	r3, #0, #5
 800dc4c:	712b      	strb	r3, [r5, #4]
 800dc4e:	88ab      	ldrh	r3, [r5, #4]
	style_roller_anim.text.font = &lv_font_eurostile_24;
 800dc50:	f8c5 a024 	str.w	sl, [r5, #36]	; 0x24
	style_roller_anim.body.grad_color = LV_COLOR_BLACK;
 800dc54:	f36f 134a 	bfc	r3, #5, #6
 800dc58:	80ab      	strh	r3, [r5, #4]
 800dc5a:	0a1b      	lsrs	r3, r3, #8
 800dc5c:	f36f 03c7 	bfc	r3, #3, #5
 800dc60:	716b      	strb	r3, [r5, #5]
	style_roller_anim.text.color = LV_COLOR_WHITE;
 800dc62:	8853      	ldrh	r3, [r2, #2]
 800dc64:	f8ad 300a 	strh.w	r3, [sp, #10]
	style_roller_anim.text.letter_space = 2;
 800dc68:	f04f 0802 	mov.w	r8, #2
	style_roller_anim.text.line_space = 24;
 800dc6c:	f04f 0918 	mov.w	r9, #24
	style_roller_anim.text.color = LV_COLOR_WHITE;
 800dc70:	b29b      	uxth	r3, r3
	lv_style_copy(&style_roller_b, &lv_style_plain_color);
 800dc72:	4620      	mov	r0, r4
	style_roller_anim.text.letter_space = 2;
 800dc74:	f8a5 8028 	strh.w	r8, [r5, #40]	; 0x28
	style_roller_anim.text.line_space = 24;
 800dc78:	f8a5 902a 	strh.w	r9, [r5, #42]	; 0x2a
	style_roller_anim.text.color = LV_COLOR_WHITE;
 800dc7c:	842b      	strh	r3, [r5, #32]
	lv_style_copy(&style_roller_b, &lv_style_plain_color);
 800dc7e:	f002 fff3 	bl	8010c68 <lv_style_copy>
	style_roller_b.body.grad_color = LV_COLOR_BLACK;
 800dc82:	7923      	ldrb	r3, [r4, #4]
	style_roller_b.body.main_color = LV_COLOR_GRAY;
 800dc84:	f8a4 b002 	strh.w	fp, [r4, #2]
	style_roller_b.body.grad_color = LV_COLOR_BLACK;
 800dc88:	f36f 0304 	bfc	r3, #0, #5
 800dc8c:	7123      	strb	r3, [r4, #4]
 800dc8e:	88a3      	ldrh	r3, [r4, #4]
	lv_style_copy(&style_roller_bg, &lv_style_plain_color);
 800dc90:	f8df b224 	ldr.w	fp, [pc, #548]	; 800deb8 <prog_swr+0x2b4>
 800dc94:	4980      	ldr	r1, [pc, #512]	; (800de98 <prog_swr+0x294>)
	style_roller_b.text.line_space = 24;
 800dc96:	f8a4 902a 	strh.w	r9, [r4, #42]	; 0x2a
	style_roller_b.body.grad_color = LV_COLOR_BLACK;
 800dc9a:	f36f 134a 	bfc	r3, #5, #6
 800dc9e:	80a3      	strh	r3, [r4, #4]
 800dca0:	0a1b      	lsrs	r3, r3, #8
 800dca2:	f36f 03c7 	bfc	r3, #3, #5
 800dca6:	7163      	strb	r3, [r4, #5]
	style_roller_b.text.color = LV_COLOR_WHITE;
 800dca8:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 800dcac:	8423      	strh	r3, [r4, #32]
	lv_style_copy(&style_roller_bg, &lv_style_plain_color);
 800dcae:	4658      	mov	r0, fp
	style_roller_b.text.font = &lv_font_eurostile_24;
 800dcb0:	f8c4 a024 	str.w	sl, [r4, #36]	; 0x24
	style_roller_b.text.letter_space = 2;
 800dcb4:	f8a4 8028 	strh.w	r8, [r4, #40]	; 0x28
	lv_style_copy(&style_roller_bg, &lv_style_plain_color);
 800dcb8:	f002 ffd6 	bl	8010c68 <lv_style_copy>
	style_roller_bg.body.main_color = LV_COLOR_YELLOW;
 800dcbc:	f89b 2002 	ldrb.w	r2, [fp, #2]
	lv_style_copy(&style_roller_save, &lv_style_plain_color);
 800dcc0:	4975      	ldr	r1, [pc, #468]	; (800de98 <prog_swr+0x294>)
	style_roller_bg.text.line_space = 24;
 800dcc2:	f8ab 902a 	strh.w	r9, [fp, #42]	; 0x2a
	style_roller_bg.body.main_color = LV_COLOR_YELLOW;
 800dcc6:	f36f 0204 	bfc	r2, #0, #5
 800dcca:	f88b 2002 	strb.w	r2, [fp, #2]
 800dcce:	f8bb 2002 	ldrh.w	r2, [fp, #2]
	style_roller_bg.text.font = &lv_font_eurostile_24;
 800dcd2:	f8cb a024 	str.w	sl, [fp, #36]	; 0x24
	style_roller_bg.body.main_color = LV_COLOR_YELLOW;
 800dcd6:	f442 62fc 	orr.w	r2, r2, #2016	; 0x7e0
 800dcda:	f8ab 2002 	strh.w	r2, [fp, #2]
 800dcde:	0a12      	lsrs	r2, r2, #8
 800dce0:	f042 02f8 	orr.w	r2, r2, #248	; 0xf8
 800dce4:	f88b 2003 	strb.w	r2, [fp, #3]
	style_roller_bg.body.grad_color = LV_COLOR_YELLOW;
 800dce8:	f89b 2004 	ldrb.w	r2, [fp, #4]
	style_roller_bg.text.letter_space = 2;
 800dcec:	f8ab 8028 	strh.w	r8, [fp, #40]	; 0x28
	style_roller_bg.body.grad_color = LV_COLOR_YELLOW;
 800dcf0:	f36f 0204 	bfc	r2, #0, #5
 800dcf4:	f88b 2004 	strb.w	r2, [fp, #4]
 800dcf8:	f8bb 2004 	ldrh.w	r2, [fp, #4]
 800dcfc:	f442 62fc 	orr.w	r2, r2, #2016	; 0x7e0
 800dd00:	f8ab 2004 	strh.w	r2, [fp, #4]
 800dd04:	0a12      	lsrs	r2, r2, #8
 800dd06:	f042 02f8 	orr.w	r2, r2, #248	; 0xf8
 800dd0a:	f88b 2005 	strb.w	r2, [fp, #5]
	style_roller_bg.text.color = LV_COLOR_BLACK;
 800dd0e:	f89b 2020 	ldrb.w	r2, [fp, #32]
 800dd12:	f36f 0204 	bfc	r2, #0, #5
 800dd16:	f88b 2020 	strb.w	r2, [fp, #32]
 800dd1a:	f8bb 2020 	ldrh.w	r2, [fp, #32]
 800dd1e:	f36f 124a 	bfc	r2, #5, #6
 800dd22:	f8ab 2020 	strh.w	r2, [fp, #32]
 800dd26:	0a12      	lsrs	r2, r2, #8
 800dd28:	f36f 02c7 	bfc	r2, #3, #5
 800dd2c:	f88b 2021 	strb.w	r2, [fp, #33]	; 0x21
	lv_style_copy(&style_roller_save, &lv_style_plain_color);
 800dd30:	4a5c      	ldr	r2, [pc, #368]	; (800dea4 <prog_swr+0x2a0>)
 800dd32:	9203      	str	r2, [sp, #12]
 800dd34:	4610      	mov	r0, r2
 800dd36:	f002 ff97 	bl	8010c68 <lv_style_copy>
	style_roller_save.body.main_color = LV_COLOR_LIME;
 800dd3a:	9a03      	ldr	r2, [sp, #12]
 800dd3c:	7891      	ldrb	r1, [r2, #2]
	style_roller_save.text.line_space = 24;
 800dd3e:	f8a2 902a 	strh.w	r9, [r2, #42]	; 0x2a
	style_roller_save.body.main_color = LV_COLOR_LIME;
 800dd42:	f36f 0104 	bfc	r1, #0, #5
 800dd46:	7091      	strb	r1, [r2, #2]
 800dd48:	8851      	ldrh	r1, [r2, #2]
	lv_style_anim_init(&sa);
 800dd4a:	f8df 9170 	ldr.w	r9, [pc, #368]	; 800debc <prog_swr+0x2b8>
	style_roller_save.text.font = &lv_font_eurostile_24;
 800dd4e:	f8c2 a024 	str.w	sl, [r2, #36]	; 0x24
	style_roller_save.body.main_color = LV_COLOR_LIME;
 800dd52:	f441 61fc 	orr.w	r1, r1, #2016	; 0x7e0
 800dd56:	8051      	strh	r1, [r2, #2]
 800dd58:	0a09      	lsrs	r1, r1, #8
 800dd5a:	f36f 01c7 	bfc	r1, #3, #5
 800dd5e:	70d1      	strb	r1, [r2, #3]
	style_roller_save.body.grad_color = LV_COLOR_LIME;
 800dd60:	7911      	ldrb	r1, [r2, #4]
	style_roller_save.text.letter_space = 2;
 800dd62:	f8a2 8028 	strh.w	r8, [r2, #40]	; 0x28
	style_roller_save.body.grad_color = LV_COLOR_LIME;
 800dd66:	f36f 0104 	bfc	r1, #0, #5
 800dd6a:	7111      	strb	r1, [r2, #4]
 800dd6c:	8891      	ldrh	r1, [r2, #4]
 800dd6e:	f441 61fc 	orr.w	r1, r1, #2016	; 0x7e0
 800dd72:	8091      	strh	r1, [r2, #4]
 800dd74:	0a09      	lsrs	r1, r1, #8
 800dd76:	f36f 01c7 	bfc	r1, #3, #5
 800dd7a:	7151      	strb	r1, [r2, #5]
	style_roller_save.text.color = LV_COLOR_WHITE;
 800dd7c:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 800dd80:	8413      	strh	r3, [r2, #32]
	lv_style_anim_init(&sa);
 800dd82:	4648      	mov	r0, r9
 800dd84:	f003 fc54 	bl	8011630 <lv_style_anim_init>
	lv_style_anim_set_styles(&sa, &style_roller_anim, &style_roller_b, &style_roller_bg);
 800dd88:	4629      	mov	r1, r5
 800dd8a:	465b      	mov	r3, fp
 800dd8c:	4622      	mov	r2, r4
 800dd8e:	4648      	mov	r0, r9
 800dd90:	f003 fc78 	bl	8011684 <lv_style_anim_set_styles>
    a->act_time = -delay;
 800dd94:	f64f 620c 	movw	r2, #65036	; 0xfe0c
 800dd98:	f8a9 201a 	strh.w	r2, [r9, #26]
    a->playback       = 1;
 800dd9c:	f899 2024 	ldrb.w	r2, [r9, #36]	; 0x24
	rollerswr[0] = lv_roller_create(Tela_RF, NULL);
 800dda0:	4d41      	ldr	r5, [pc, #260]	; (800dea8 <prog_swr+0x2a4>)
    a->time     = duration;
 800dda2:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
    a->repeat       = 1;
 800dda6:	f042 0203 	orr.w	r2, r2, #3
    a->time     = duration;
 800ddaa:	f8a9 3018 	strh.w	r3, [r9, #24]
    a->playback_pause = wait_time;
 800ddae:	f8a9 301c 	strh.w	r3, [r9, #28]
    a->repeat_pause = wait_time;
 800ddb2:	f8a9 301e 	strh.w	r3, [r9, #30]
    a->repeat       = 1;
 800ddb6:	f889 2024 	strb.w	r2, [r9, #36]	; 0x24
 800ddba:	4648      	mov	r0, r9
 800ddbc:	f8df 9100 	ldr.w	r9, [pc, #256]	; 800dec0 <prog_swr+0x2bc>
 800ddc0:	f007 fa28 	bl	8015214 <lv_anim_create>
 800ddc4:	2100      	movs	r1, #0
 800ddc6:	f8d9 0000 	ldr.w	r0, [r9]
 800ddca:	f00c fbaf 	bl	801a52c <lv_roller_create>
	lv_obj_set_user_data(rollerswr[0], 0);
 800ddce:	2100      	movs	r1, #0
	rollerswr[0] = lv_roller_create(Tela_RF, NULL);
 800ddd0:	6028      	str	r0, [r5, #0]
	lv_obj_set_user_data(rollerswr[0], 0);
 800ddd2:	f002 fbd8 	bl	8010586 <lv_obj_set_user_data>
    lv_roller_set_options(rollerswr[0], "0\n1\n2\n3\n4\n5\n6\n7\n8\n9", LV_ROLLER_MODE_INIFINITE);
 800ddd6:	2201      	movs	r2, #1
 800ddd8:	6828      	ldr	r0, [r5, #0]
 800ddda:	4934      	ldr	r1, [pc, #208]	; (800deac <prog_swr+0x2a8>)
 800dddc:	f00c fd00 	bl	801a7e0 <lv_roller_set_options>
    lv_roller_set_visible_row_count(rollerswr[0], 2);
 800dde0:	4641      	mov	r1, r8
 800dde2:	6828      	ldr	r0, [r5, #0]
 800dde4:	f00c fb86 	bl	801a4f4 <lv_roller_set_visible_row_count>
    lv_roller_set_selected(rollerswr[0], un, true);
 800dde8:	2201      	movs	r2, #1
 800ddea:	b2b1      	uxth	r1, r6
 800ddec:	6828      	ldr	r0, [r5, #0]
 800ddee:	f00c fc53 	bl	801a698 <lv_roller_set_selected>
    lv_ddlist_set_fix_width(roller, w);
 800ddf2:	6828      	ldr	r0, [r5, #0]
 800ddf4:	2122      	movs	r1, #34	; 0x22
 800ddf6:	f009 fcc6 	bl	8017786 <lv_ddlist_set_fix_width>
    lv_roller_set_style(rollerswr[0], LV_ROLLER_STYLE_BG, &style_roller_b);
 800ddfa:	4622      	mov	r2, r4
 800ddfc:	6828      	ldr	r0, [r5, #0]
 800ddfe:	2100      	movs	r1, #0
 800de00:	f00c fc20 	bl	801a644 <lv_roller_set_style>
    lv_obj_align(rollerswr[0], NULL, LV_ALIGN_IN_TOP_LEFT, 39, 40);
 800de04:	2628      	movs	r6, #40	; 0x28
    lv_roller_set_style(rollerswr[0], LV_ROLLER_STYLE_SEL, &style_roller_b);
 800de06:	4622      	mov	r2, r4
 800de08:	6828      	ldr	r0, [r5, #0]
 800de0a:	2101      	movs	r1, #1
 800de0c:	f00c fc1a 	bl	801a644 <lv_roller_set_style>
    lv_obj_align(rollerswr[0], NULL, LV_ALIGN_IN_TOP_LEFT, 39, 40);
 800de10:	9600      	str	r6, [sp, #0]
 800de12:	2327      	movs	r3, #39	; 0x27
 800de14:	2201      	movs	r2, #1
 800de16:	6828      	ldr	r0, [r5, #0]
 800de18:	2100      	movs	r1, #0
 800de1a:	f001 fdb9 	bl	800f990 <lv_obj_align>
    lv_obj_set_event_cb(rollerswr[0], event_handler_swr);
 800de1e:	6828      	ldr	r0, [r5, #0]
 800de20:	4923      	ldr	r1, [pc, #140]	; (800deb0 <prog_swr+0x2ac>)
 800de22:	f001 fc16 	bl	800f652 <lv_obj_set_event_cb>
    rollerswr[1] = lv_roller_create(Tela_RF, NULL);
 800de26:	2100      	movs	r1, #0
 800de28:	f8d9 0000 	ldr.w	r0, [r9]
 800de2c:	f00c fb7e 	bl	801a52c <lv_roller_create>
    lv_obj_set_user_data(rollerswr[1], 1);
 800de30:	2101      	movs	r1, #1
    rollerswr[1] = lv_roller_create(Tela_RF, NULL);
 800de32:	6068      	str	r0, [r5, #4]
    lv_obj_set_user_data(rollerswr[1], 1);
 800de34:	f002 fba7 	bl	8010586 <lv_obj_set_user_data>
    lv_roller_set_options(rollerswr[1], "0\n1\n2\n3\n4\n5\n6\n7\n8\n9", LV_ROLLER_MODE_INIFINITE);
 800de38:	2201      	movs	r2, #1
 800de3a:	6868      	ldr	r0, [r5, #4]
 800de3c:	491b      	ldr	r1, [pc, #108]	; (800deac <prog_swr+0x2a8>)
 800de3e:	f00c fccf 	bl	801a7e0 <lv_roller_set_options>
    lv_roller_set_visible_row_count(rollerswr[1], 2);
 800de42:	4641      	mov	r1, r8
 800de44:	6868      	ldr	r0, [r5, #4]
 800de46:	f00c fb55 	bl	801a4f4 <lv_roller_set_visible_row_count>
    lv_roller_set_selected(rollerswr[1], ml, true);
 800de4a:	2201      	movs	r2, #1
 800de4c:	b2b9      	uxth	r1, r7
 800de4e:	6868      	ldr	r0, [r5, #4]
 800de50:	f00c fc22 	bl	801a698 <lv_roller_set_selected>
 800de54:	6868      	ldr	r0, [r5, #4]
 800de56:	2123      	movs	r1, #35	; 0x23
 800de58:	f009 fc95 	bl	8017786 <lv_ddlist_set_fix_width>
    lv_roller_set_style(rollerswr[1], LV_ROLLER_STYLE_BG, &style_roller_b);
 800de5c:	4622      	mov	r2, r4
 800de5e:	6868      	ldr	r0, [r5, #4]
 800de60:	2100      	movs	r1, #0
 800de62:	f00c fbef 	bl	801a644 <lv_roller_set_style>
    lv_roller_set_style(rollerswr[1], LV_ROLLER_STYLE_SEL, &style_roller_b);
 800de66:	4622      	mov	r2, r4
 800de68:	6868      	ldr	r0, [r5, #4]
 800de6a:	2101      	movs	r1, #1
 800de6c:	f00c fbea 	bl	801a644 <lv_roller_set_style>
    lv_obj_align(rollerswr[1], NULL, LV_ALIGN_IN_TOP_LEFT, 84, 40);
 800de70:	9600      	str	r6, [sp, #0]
 800de72:	6868      	ldr	r0, [r5, #4]
 800de74:	2354      	movs	r3, #84	; 0x54
 800de76:	2201      	movs	r2, #1
 800de78:	2100      	movs	r1, #0
 800de7a:	f001 fd89 	bl	800f990 <lv_obj_align>
    lv_obj_set_event_cb(rollerswr[1], event_handler_swr);
 800de7e:	490c      	ldr	r1, [pc, #48]	; (800deb0 <prog_swr+0x2ac>)
 800de80:	6868      	ldr	r0, [r5, #4]
}
 800de82:	b005      	add	sp, #20
 800de84:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    lv_obj_set_event_cb(rollerswr[1], event_handler_swr);
 800de88:	f001 bbe3 	b.w	800f652 <lv_obj_set_event_cb>
		ml = 0;
 800de8c:	4607      	mov	r7, r0
 800de8e:	e6cc      	b.n	800dc2a <prog_swr+0x26>
 800de90:	0802d060 	.word	0x0802d060
 800de94:	20005e1c 	.word	0x20005e1c
 800de98:	2000c798 	.word	0x2000c798
 800de9c:	20005e58 	.word	0x20005e58
 800dea0:	0801d8d4 	.word	0x0801d8d4
 800dea4:	20005ed0 	.word	0x20005ed0
 800dea8:	20005d6c 	.word	0x20005d6c
 800deac:	0802ca42 	.word	0x0802ca42
 800deb0:	0800d3c9 	.word	0x0800d3c9
 800deb4:	20001338 	.word	0x20001338
 800deb8:	20005e94 	.word	0x20005e94
 800debc:	20005d7c 	.word	0x20005d7c
 800dec0:	20005c7c 	.word	0x20005c7c

0800dec4 <screen_rf>:
	Tela_RF = lv_obj_create(NULL, NULL);
 800dec4:	2100      	movs	r1, #0
{
 800dec6:	b538      	push	{r3, r4, r5, lr}
	Tela_RF = lv_obj_create(NULL, NULL);
 800dec8:	4608      	mov	r0, r1
 800deca:	f001 ff83 	bl	800fdd4 <lv_obj_create>
 800dece:	4d18      	ldr	r5, [pc, #96]	; (800df30 <screen_rf+0x6c>)
	img_fundo = lv_img_create(Tela_RF, NULL);
 800ded0:	4c18      	ldr	r4, [pc, #96]	; (800df34 <screen_rf+0x70>)
	Tela_RF = lv_obj_create(NULL, NULL);
 800ded2:	6028      	str	r0, [r5, #0]
	img_fundo = lv_img_create(Tela_RF, NULL);
 800ded4:	2100      	movs	r1, #0
 800ded6:	f00a f875 	bl	8017fc4 <lv_img_create>
    lv_img_set_src(img_fundo, &tela_rf);
 800deda:	4917      	ldr	r1, [pc, #92]	; (800df38 <screen_rf+0x74>)
	img_fundo = lv_img_create(Tela_RF, NULL);
 800dedc:	6020      	str	r0, [r4, #0]
    lv_img_set_src(img_fundo, &tela_rf);
 800dede:	f009 ffe1 	bl	8017ea4 <lv_img_set_src>
	lv_obj_set_protect(img_fundo, LV_PROTECT_POS);
 800dee2:	6820      	ldr	r0, [r4, #0]
 800dee4:	2104      	movs	r1, #4
 800dee6:	f001 fba7 	bl	800f638 <lv_obj_set_protect>
	lv_obj_set_event_cb(img_fundo, btn_event_esc_rf);
 800deea:	6820      	ldr	r0, [r4, #0]
 800deec:	4913      	ldr	r1, [pc, #76]	; (800df3c <screen_rf+0x78>)
 800deee:	f001 fbb0 	bl	800f652 <lv_obj_set_event_cb>
	lv_obj_set_click(img_fundo, 1);
 800def2:	6820      	ldr	r0, [r4, #0]
	prog_swr(Max_Reflected);
 800def4:	4c12      	ldr	r4, [pc, #72]	; (800df40 <screen_rf+0x7c>)
	lv_obj_set_click(img_fundo, 1);
 800def6:	2101      	movs	r1, #1
 800def8:	f001 fb82 	bl	800f600 <lv_obj_set_click>
	btn_next_rf();
 800defc:	f7ff fe1a 	bl	800db34 <btn_next_rf>
	create_vumeter_swr();
 800df00:	f7ff fae8 	bl	800d4d4 <create_vumeter_swr>
	prog_swr(Max_Reflected);
 800df04:	6820      	ldr	r0, [r4, #0]
 800df06:	f7ff fe7d 	bl	800dc04 <prog_swr>
	update_vumeter_swr(Max_Reflected);
 800df0a:	6820      	ldr	r0, [r4, #0]
 800df0c:	f7ff fbc2 	bl	800d694 <update_vumeter_swr>
 800df10:	6828      	ldr	r0, [r5, #0]
 800df12:	f001 f94b 	bl	800f1ac <lv_disp_load_scr>
	Task_RF = lv_task_create(update_rf, 500, LV_TASK_PRIO_MID, NULL);
 800df16:	2300      	movs	r3, #0
 800df18:	2203      	movs	r2, #3
 800df1a:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 800df1e:	4809      	ldr	r0, [pc, #36]	; (800df44 <screen_rf+0x80>)
 800df20:	f007 fdf6 	bl	8015b10 <lv_task_create>
 800df24:	4b08      	ldr	r3, [pc, #32]	; (800df48 <screen_rf+0x84>)
 800df26:	6018      	str	r0, [r3, #0]
	TelaAtiva = TelaRF;
 800df28:	4b08      	ldr	r3, [pc, #32]	; (800df4c <screen_rf+0x88>)
 800df2a:	2206      	movs	r2, #6
 800df2c:	601a      	str	r2, [r3, #0]
 800df2e:	bd38      	pop	{r3, r4, r5, pc}
 800df30:	20005c7c 	.word	0x20005c7c
 800df34:	20005d50 	.word	0x20005d50
 800df38:	20001c58 	.word	0x20001c58
 800df3c:	0800d359 	.word	0x0800d359
 800df40:	20000004 	.word	0x20000004
 800df44:	0800d731 	.word	0x0800d731
 800df48:	20005c68 	.word	0x20005c68
 800df4c:	20003444 	.word	0x20003444

0800df50 <btn_event_esc_rf1>:
	if(event == LV_EVENT_APPLY) {
 800df50:	2911      	cmp	r1, #17
{
 800df52:	b508      	push	{r3, lr}
	if(event == LV_EVENT_APPLY) {
 800df54:	d10b      	bne.n	800df6e <btn_event_esc_rf1+0x1e>
		lv_task_del(Task_RF_1);
 800df56:	4b06      	ldr	r3, [pc, #24]	; (800df70 <btn_event_esc_rf1+0x20>)
 800df58:	6818      	ldr	r0, [r3, #0]
 800df5a:	f007 fce9 	bl	8015930 <lv_task_del>
		lv_obj_del(Tela_RF_1);
 800df5e:	4b05      	ldr	r3, [pc, #20]	; (800df74 <btn_event_esc_rf1+0x24>)
 800df60:	6818      	ldr	r0, [r3, #0]
 800df62:	f002 f928 	bl	80101b6 <lv_obj_del>
}
 800df66:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		screen_rf();
 800df6a:	f7ff bfab 	b.w	800dec4 <screen_rf>
 800df6e:	bd08      	pop	{r3, pc}
 800df70:	20005c6c 	.word	0x20005c6c
 800df74:	20005c80 	.word	0x20005c80

0800df78 <prog_target>:
	if( fwd > 0) {
 800df78:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800df7c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
{
 800df80:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if( fwd > 0) {
 800df84:	f340 8108 	ble.w	800e198 <prog_target+0x220>
		teste = (uint32_t) fwd * 10;
 800df88:	eebc 0ac0 	vcvt.u32.f32	s0, s0
 800df8c:	220a      	movs	r2, #10
 800df8e:	ee10 3a10 	vmov	r3, s0
		un = teste / 100;
 800df92:	2664      	movs	r6, #100	; 0x64
		teste = (uint32_t) fwd * 10;
 800df94:	4353      	muls	r3, r2
		un = teste / 100;
 800df96:	fbb3 faf6 	udiv	sl, r3, r6
		ml = (teste % 100) / 10;
 800df9a:	fb06 361a 	mls	r6, r6, sl, r3
 800df9e:	fbb6 f6f2 	udiv	r6, r6, r2
	lv_style_copy(&style_roller_anim, &lv_style_plain_color);
 800dfa2:	4d7f      	ldr	r5, [pc, #508]	; (800e1a0 <prog_target+0x228>)
 800dfa4:	497f      	ldr	r1, [pc, #508]	; (800e1a4 <prog_target+0x22c>)
	style_roller_anim.text.font = &lv_font_eurostile_24;
 800dfa6:	f8df 9220 	ldr.w	r9, [pc, #544]	; 800e1c8 <prog_target+0x250>
	lv_style_copy(&style_roller_anim, &lv_style_plain_color);
 800dfaa:	4628      	mov	r0, r5
 800dfac:	f002 fe5c 	bl	8010c68 <lv_style_copy>
	style_roller_anim.body.grad_color = LV_COLOR_BLACK;
 800dfb0:	792b      	ldrb	r3, [r5, #4]
	style_roller_anim.body.main_color = LV_COLOR_GRAY;
 800dfb2:	4a7d      	ldr	r2, [pc, #500]	; (800e1a8 <prog_target+0x230>)
	style_roller_anim.text.font = &lv_font_eurostile_24;
 800dfb4:	f8c5 9024 	str.w	r9, [r5, #36]	; 0x24
	style_roller_anim.body.grad_color = LV_COLOR_BLACK;
 800dfb8:	f36f 0304 	bfc	r3, #0, #5
 800dfbc:	712b      	strb	r3, [r5, #4]
 800dfbe:	88ab      	ldrh	r3, [r5, #4]
	style_roller_anim.text.color = LV_COLOR_WHITE;
 800dfc0:	f8b2 b002 	ldrh.w	fp, [r2, #2]
	style_roller_anim.body.main_color = LV_COLOR_GRAY;
 800dfc4:	8894      	ldrh	r4, [r2, #4]
 800dfc6:	806c      	strh	r4, [r5, #2]
	style_roller_anim.body.grad_color = LV_COLOR_BLACK;
 800dfc8:	f36f 134a 	bfc	r3, #5, #6
 800dfcc:	80ab      	strh	r3, [r5, #4]
 800dfce:	0a1b      	lsrs	r3, r3, #8
	style_roller_anim.text.letter_space = 2;
 800dfd0:	2702      	movs	r7, #2
	style_roller_anim.text.line_space = 24;
 800dfd2:	f04f 0818 	mov.w	r8, #24
	style_roller_anim.body.grad_color = LV_COLOR_BLACK;
 800dfd6:	f36f 03c7 	bfc	r3, #3, #5
 800dfda:	716b      	strb	r3, [r5, #5]
	style_roller_anim.text.letter_space = 2;
 800dfdc:	852f      	strh	r7, [r5, #40]	; 0x28
	style_roller_anim.text.line_space = 24;
 800dfde:	f8a5 802a 	strh.w	r8, [r5, #42]	; 0x2a
	style_roller_anim.text.color = LV_COLOR_WHITE;
 800dfe2:	f8a5 b020 	strh.w	fp, [r5, #32]
	lv_style_copy(&style_roller_b, &lv_style_plain_color);
 800dfe6:	4d71      	ldr	r5, [pc, #452]	; (800e1ac <prog_target+0x234>)
 800dfe8:	496e      	ldr	r1, [pc, #440]	; (800e1a4 <prog_target+0x22c>)
 800dfea:	4628      	mov	r0, r5
 800dfec:	f002 fe3c 	bl	8010c68 <lv_style_copy>
	style_roller_b.body.grad_color = LV_COLOR_BLACK;
 800dff0:	792b      	ldrb	r3, [r5, #4]
	style_roller_b.body.main_color = LV_COLOR_GRAY;
 800dff2:	806c      	strh	r4, [r5, #2]
	style_roller_b.body.grad_color = LV_COLOR_BLACK;
 800dff4:	f36f 0304 	bfc	r3, #0, #5
 800dff8:	712b      	strb	r3, [r5, #4]
 800dffa:	88ab      	ldrh	r3, [r5, #4]
	lv_style_copy(&style_roller_bg, &lv_style_plain_color);
 800dffc:	4c6c      	ldr	r4, [pc, #432]	; (800e1b0 <prog_target+0x238>)
 800dffe:	4969      	ldr	r1, [pc, #420]	; (800e1a4 <prog_target+0x22c>)
	style_roller_b.text.font = &lv_font_eurostile_24;
 800e000:	f8c5 9024 	str.w	r9, [r5, #36]	; 0x24
	style_roller_b.body.grad_color = LV_COLOR_BLACK;
 800e004:	f36f 134a 	bfc	r3, #5, #6
 800e008:	80ab      	strh	r3, [r5, #4]
 800e00a:	0a1b      	lsrs	r3, r3, #8
 800e00c:	f36f 03c7 	bfc	r3, #3, #5
 800e010:	716b      	strb	r3, [r5, #5]
	lv_style_copy(&style_roller_bg, &lv_style_plain_color);
 800e012:	4620      	mov	r0, r4
	style_roller_b.text.line_space = 24;
 800e014:	f8a5 802a 	strh.w	r8, [r5, #42]	; 0x2a
	style_roller_b.text.letter_space = 2;
 800e018:	852f      	strh	r7, [r5, #40]	; 0x28
	style_roller_b.text.color = LV_COLOR_WHITE;
 800e01a:	f8a5 b020 	strh.w	fp, [r5, #32]
	lv_style_copy(&style_roller_bg, &lv_style_plain_color);
 800e01e:	f002 fe23 	bl	8010c68 <lv_style_copy>
	style_roller_bg.body.main_color = LV_COLOR_YELLOW;
 800e022:	78a3      	ldrb	r3, [r4, #2]
	style_roller_bg.text.font = &lv_font_eurostile_24;
 800e024:	f8c4 9024 	str.w	r9, [r4, #36]	; 0x24
	style_roller_bg.body.main_color = LV_COLOR_YELLOW;
 800e028:	f36f 0304 	bfc	r3, #0, #5
 800e02c:	70a3      	strb	r3, [r4, #2]
 800e02e:	8863      	ldrh	r3, [r4, #2]
	style_roller_bg.text.letter_space = 2;
 800e030:	8527      	strh	r7, [r4, #40]	; 0x28
	style_roller_bg.body.main_color = LV_COLOR_YELLOW;
 800e032:	f443 63fc 	orr.w	r3, r3, #2016	; 0x7e0
 800e036:	8063      	strh	r3, [r4, #2]
 800e038:	0a1b      	lsrs	r3, r3, #8
 800e03a:	f043 03f8 	orr.w	r3, r3, #248	; 0xf8
 800e03e:	70e3      	strb	r3, [r4, #3]
	style_roller_bg.body.grad_color = LV_COLOR_YELLOW;
 800e040:	7923      	ldrb	r3, [r4, #4]
	style_roller_bg.text.line_space = 24;
 800e042:	f8a4 802a 	strh.w	r8, [r4, #42]	; 0x2a
	style_roller_bg.body.grad_color = LV_COLOR_YELLOW;
 800e046:	f36f 0304 	bfc	r3, #0, #5
 800e04a:	7123      	strb	r3, [r4, #4]
 800e04c:	88a3      	ldrh	r3, [r4, #4]
	lv_style_copy(&style_roller_save, &lv_style_plain_color);
 800e04e:	4955      	ldr	r1, [pc, #340]	; (800e1a4 <prog_target+0x22c>)
	style_roller_bg.body.grad_color = LV_COLOR_YELLOW;
 800e050:	f443 63fc 	orr.w	r3, r3, #2016	; 0x7e0
 800e054:	80a3      	strh	r3, [r4, #4]
 800e056:	0a1b      	lsrs	r3, r3, #8
 800e058:	f043 03f8 	orr.w	r3, r3, #248	; 0xf8
 800e05c:	7163      	strb	r3, [r4, #5]
	style_roller_bg.text.color = LV_COLOR_BLACK;
 800e05e:	f894 3020 	ldrb.w	r3, [r4, #32]
 800e062:	f36f 0304 	bfc	r3, #0, #5
 800e066:	f884 3020 	strb.w	r3, [r4, #32]
 800e06a:	8c23      	ldrh	r3, [r4, #32]
 800e06c:	f36f 134a 	bfc	r3, #5, #6
 800e070:	8423      	strh	r3, [r4, #32]
 800e072:	0a1b      	lsrs	r3, r3, #8
 800e074:	f36f 03c7 	bfc	r3, #3, #5
 800e078:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
	lv_style_copy(&style_roller_save, &lv_style_plain_color);
 800e07c:	4c4d      	ldr	r4, [pc, #308]	; (800e1b4 <prog_target+0x23c>)
 800e07e:	4620      	mov	r0, r4
 800e080:	f002 fdf2 	bl	8010c68 <lv_style_copy>
	style_roller_save.body.main_color = LV_COLOR_LIME;
 800e084:	78a3      	ldrb	r3, [r4, #2]
	style_roller_save.text.font = &lv_font_eurostile_24;
 800e086:	f8c4 9024 	str.w	r9, [r4, #36]	; 0x24
	style_roller_save.body.main_color = LV_COLOR_LIME;
 800e08a:	f36f 0304 	bfc	r3, #0, #5
 800e08e:	70a3      	strb	r3, [r4, #2]
 800e090:	8863      	ldrh	r3, [r4, #2]
	rollertarget[0] = lv_roller_create(Tela_RF, NULL);
 800e092:	f8df 9138 	ldr.w	r9, [pc, #312]	; 800e1cc <prog_target+0x254>
	style_roller_save.text.letter_space = 2;
 800e096:	8527      	strh	r7, [r4, #40]	; 0x28
	style_roller_save.body.main_color = LV_COLOR_LIME;
 800e098:	f443 63fc 	orr.w	r3, r3, #2016	; 0x7e0
 800e09c:	8063      	strh	r3, [r4, #2]
 800e09e:	0a1b      	lsrs	r3, r3, #8
 800e0a0:	f36f 03c7 	bfc	r3, #3, #5
 800e0a4:	70e3      	strb	r3, [r4, #3]
	style_roller_save.body.grad_color = LV_COLOR_LIME;
 800e0a6:	7923      	ldrb	r3, [r4, #4]
	style_roller_save.text.line_space = 24;
 800e0a8:	f8a4 802a 	strh.w	r8, [r4, #42]	; 0x2a
	style_roller_save.body.grad_color = LV_COLOR_LIME;
 800e0ac:	f36f 0304 	bfc	r3, #0, #5
 800e0b0:	7123      	strb	r3, [r4, #4]
 800e0b2:	88a3      	ldrh	r3, [r4, #4]
	style_roller_save.text.color = LV_COLOR_WHITE;
 800e0b4:	f8a4 b020 	strh.w	fp, [r4, #32]
	style_roller_save.body.grad_color = LV_COLOR_LIME;
 800e0b8:	f443 63fc 	orr.w	r3, r3, #2016	; 0x7e0
 800e0bc:	80a3      	strh	r3, [r4, #4]
 800e0be:	0a1b      	lsrs	r3, r3, #8
 800e0c0:	f36f 03c7 	bfc	r3, #3, #5
 800e0c4:	7163      	strb	r3, [r4, #5]
	rollertarget[0] = lv_roller_create(Tela_RF, NULL);
 800e0c6:	2100      	movs	r1, #0
 800e0c8:	f8d9 0000 	ldr.w	r0, [r9]
 800e0cc:	4c3a      	ldr	r4, [pc, #232]	; (800e1b8 <prog_target+0x240>)
 800e0ce:	f00c fa2d 	bl	801a52c <lv_roller_create>
	lv_obj_set_user_data(rollertarget[0], 5);
 800e0d2:	2105      	movs	r1, #5
	rollertarget[0] = lv_roller_create(Tela_RF, NULL);
 800e0d4:	6020      	str	r0, [r4, #0]
	lv_obj_set_user_data(rollertarget[0], 5);
 800e0d6:	f002 fa56 	bl	8010586 <lv_obj_set_user_data>
    lv_roller_set_options(rollertarget[0], "0\n1", LV_ROLLER_MODE_INIFINITE);
 800e0da:	2201      	movs	r2, #1
 800e0dc:	6820      	ldr	r0, [r4, #0]
 800e0de:	4937      	ldr	r1, [pc, #220]	; (800e1bc <prog_target+0x244>)
 800e0e0:	f00c fb7e 	bl	801a7e0 <lv_roller_set_options>
    lv_roller_set_visible_row_count(rollertarget[0], 2);
 800e0e4:	4639      	mov	r1, r7
 800e0e6:	6820      	ldr	r0, [r4, #0]
 800e0e8:	f00c fa04 	bl	801a4f4 <lv_roller_set_visible_row_count>
    lv_roller_set_selected(rollertarget[0], un, true);
 800e0ec:	2201      	movs	r2, #1
 800e0ee:	fa1f f18a 	uxth.w	r1, sl
 800e0f2:	6820      	ldr	r0, [r4, #0]
 800e0f4:	f00c fad0 	bl	801a698 <lv_roller_set_selected>
 800e0f8:	6820      	ldr	r0, [r4, #0]
 800e0fa:	2122      	movs	r1, #34	; 0x22
 800e0fc:	f009 fb43 	bl	8017786 <lv_ddlist_set_fix_width>
    lv_roller_set_style(rollertarget[0], LV_ROLLER_STYLE_BG, &style_roller_b);
 800e100:	462a      	mov	r2, r5
 800e102:	6820      	ldr	r0, [r4, #0]
 800e104:	2100      	movs	r1, #0
 800e106:	f00c fa9d 	bl	801a644 <lv_roller_set_style>
    lv_obj_align(rollertarget[0], NULL, LV_ALIGN_IN_TOP_LEFT, 39, 40);
 800e10a:	f04f 0828 	mov.w	r8, #40	; 0x28
    lv_roller_set_style(rollertarget[0], LV_ROLLER_STYLE_SEL, &style_roller_b);
 800e10e:	462a      	mov	r2, r5
 800e110:	6820      	ldr	r0, [r4, #0]
 800e112:	2101      	movs	r1, #1
 800e114:	f00c fa96 	bl	801a644 <lv_roller_set_style>
    lv_obj_align(rollertarget[0], NULL, LV_ALIGN_IN_TOP_LEFT, 39, 40);
 800e118:	f8cd 8000 	str.w	r8, [sp]
 800e11c:	2327      	movs	r3, #39	; 0x27
 800e11e:	2201      	movs	r2, #1
 800e120:	6820      	ldr	r0, [r4, #0]
 800e122:	2100      	movs	r1, #0
 800e124:	f001 fc34 	bl	800f990 <lv_obj_align>
    lv_obj_set_event_cb(rollertarget[0], event_handler_target);
 800e128:	6820      	ldr	r0, [r4, #0]
 800e12a:	4925      	ldr	r1, [pc, #148]	; (800e1c0 <prog_target+0x248>)
 800e12c:	f001 fa91 	bl	800f652 <lv_obj_set_event_cb>
    rollertarget[1] = lv_roller_create(Tela_RF, NULL);
 800e130:	2100      	movs	r1, #0
 800e132:	f8d9 0000 	ldr.w	r0, [r9]
 800e136:	f00c f9f9 	bl	801a52c <lv_roller_create>
    lv_obj_set_user_data(rollertarget[1], 4);
 800e13a:	2104      	movs	r1, #4
    rollertarget[1] = lv_roller_create(Tela_RF, NULL);
 800e13c:	6060      	str	r0, [r4, #4]
    lv_obj_set_user_data(rollertarget[1], 4);
 800e13e:	f002 fa22 	bl	8010586 <lv_obj_set_user_data>
    lv_roller_set_options(rollertarget[1], "0\n1\n2\n3\n4\n5\n6\n7\n8\n9", LV_ROLLER_MODE_INIFINITE);
 800e142:	2201      	movs	r2, #1
 800e144:	6860      	ldr	r0, [r4, #4]
 800e146:	491f      	ldr	r1, [pc, #124]	; (800e1c4 <prog_target+0x24c>)
 800e148:	f00c fb4a 	bl	801a7e0 <lv_roller_set_options>
    lv_roller_set_visible_row_count(rollertarget[1], 2);
 800e14c:	4639      	mov	r1, r7
 800e14e:	6860      	ldr	r0, [r4, #4]
 800e150:	f00c f9d0 	bl	801a4f4 <lv_roller_set_visible_row_count>
    lv_roller_set_selected(rollertarget[1], ml, true);
 800e154:	2201      	movs	r2, #1
 800e156:	b2b1      	uxth	r1, r6
 800e158:	6860      	ldr	r0, [r4, #4]
 800e15a:	f00c fa9d 	bl	801a698 <lv_roller_set_selected>
 800e15e:	6860      	ldr	r0, [r4, #4]
 800e160:	2123      	movs	r1, #35	; 0x23
 800e162:	f009 fb10 	bl	8017786 <lv_ddlist_set_fix_width>
    lv_roller_set_style(rollertarget[1], LV_ROLLER_STYLE_BG, &style_roller_b);
 800e166:	462a      	mov	r2, r5
 800e168:	6860      	ldr	r0, [r4, #4]
 800e16a:	2100      	movs	r1, #0
 800e16c:	f00c fa6a 	bl	801a644 <lv_roller_set_style>
    lv_roller_set_style(rollertarget[1], LV_ROLLER_STYLE_SEL, &style_roller_b);
 800e170:	462a      	mov	r2, r5
 800e172:	6860      	ldr	r0, [r4, #4]
 800e174:	2101      	movs	r1, #1
 800e176:	f00c fa65 	bl	801a644 <lv_roller_set_style>
    lv_obj_align(rollertarget[1], NULL, LV_ALIGN_IN_TOP_LEFT, 84, 40);
 800e17a:	f8cd 8000 	str.w	r8, [sp]
 800e17e:	6860      	ldr	r0, [r4, #4]
 800e180:	2354      	movs	r3, #84	; 0x54
 800e182:	2201      	movs	r2, #1
 800e184:	2100      	movs	r1, #0
 800e186:	f001 fc03 	bl	800f990 <lv_obj_align>
    lv_obj_set_event_cb(rollertarget[1], event_handler_target);
 800e18a:	490d      	ldr	r1, [pc, #52]	; (800e1c0 <prog_target+0x248>)
 800e18c:	6860      	ldr	r0, [r4, #4]
}
 800e18e:	b003      	add	sp, #12
 800e190:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    lv_obj_set_event_cb(rollertarget[1], event_handler_target);
 800e194:	f001 ba5d 	b.w	800f652 <lv_obj_set_event_cb>
		ml = 0;
 800e198:	2600      	movs	r6, #0
		un = 0;
 800e19a:	46b2      	mov	sl, r6
 800e19c:	e701      	b.n	800dfa2 <prog_target+0x2a>
 800e19e:	bf00      	nop
 800e1a0:	20005e1c 	.word	0x20005e1c
 800e1a4:	2000c798 	.word	0x2000c798
 800e1a8:	0801d8d4 	.word	0x0801d8d4
 800e1ac:	20005e58 	.word	0x20005e58
 800e1b0:	20005e94 	.word	0x20005e94
 800e1b4:	20005ed0 	.word	0x20005ed0
 800e1b8:	20005d74 	.word	0x20005d74
 800e1bc:	0802c9e4 	.word	0x0802c9e4
 800e1c0:	0800d455 	.word	0x0800d455
 800e1c4:	0802ca42 	.word	0x0802ca42
 800e1c8:	20001338 	.word	0x20001338
 800e1cc:	20005c7c 	.word	0x20005c7c

0800e1d0 <screen_RF_1>:
	Tela_RF_1 = lv_obj_create(NULL, NULL);
 800e1d0:	2100      	movs	r1, #0
{
 800e1d2:	b538      	push	{r3, r4, r5, lr}
	Tela_RF_1 = lv_obj_create(NULL, NULL);
 800e1d4:	4608      	mov	r0, r1
 800e1d6:	f001 fdfd 	bl	800fdd4 <lv_obj_create>
 800e1da:	4d19      	ldr	r5, [pc, #100]	; (800e240 <screen_RF_1+0x70>)
	img_fundo_1 = lv_img_create(Tela_RF_1, NULL);
 800e1dc:	4c19      	ldr	r4, [pc, #100]	; (800e244 <screen_RF_1+0x74>)
	Tela_RF_1 = lv_obj_create(NULL, NULL);
 800e1de:	6028      	str	r0, [r5, #0]
	img_fundo_1 = lv_img_create(Tela_RF_1, NULL);
 800e1e0:	2100      	movs	r1, #0
 800e1e2:	f009 feef 	bl	8017fc4 <lv_img_create>
	lv_img_set_src(img_fundo_1, &tela_rf_1);
 800e1e6:	4918      	ldr	r1, [pc, #96]	; (800e248 <screen_RF_1+0x78>)
	img_fundo_1 = lv_img_create(Tela_RF_1, NULL);
 800e1e8:	6020      	str	r0, [r4, #0]
	lv_img_set_src(img_fundo_1, &tela_rf_1);
 800e1ea:	f009 fe5b 	bl	8017ea4 <lv_img_set_src>
	lv_obj_set_protect(img_fundo_1, LV_PROTECT_POS);
 800e1ee:	6820      	ldr	r0, [r4, #0]
 800e1f0:	2104      	movs	r1, #4
 800e1f2:	f001 fa21 	bl	800f638 <lv_obj_set_protect>
	lv_obj_set_event_cb(img_fundo_1, btn_event_esc_rf1);
 800e1f6:	6820      	ldr	r0, [r4, #0]
 800e1f8:	4914      	ldr	r1, [pc, #80]	; (800e24c <screen_RF_1+0x7c>)
 800e1fa:	f001 fa2a 	bl	800f652 <lv_obj_set_event_cb>
	lv_obj_set_click(img_fundo_1, 1);
 800e1fe:	6820      	ldr	r0, [r4, #0]
	prog_target(target);
 800e200:	4c13      	ldr	r4, [pc, #76]	; (800e250 <screen_RF_1+0x80>)
	lv_obj_set_click(img_fundo_1, 1);
 800e202:	2101      	movs	r1, #1
 800e204:	f001 f9fc 	bl	800f600 <lv_obj_set_click>
	btn_next_rf1();
 800e208:	f7ff fcc8 	bl	800db9c <btn_next_rf1>
	create_vumeter_fwd();
 800e20c:	f7ff fc22 	bl	800da54 <create_vumeter_fwd>
	prog_target(target);
 800e210:	ed94 0a00 	vldr	s0, [r4]
 800e214:	f7ff feb0 	bl	800df78 <prog_target>
	update_vumeter_fwd(target);
 800e218:	ed94 0a00 	vldr	s0, [r4]
 800e21c:	f7ff fa8e 	bl	800d73c <update_vumeter_fwd>
 800e220:	6828      	ldr	r0, [r5, #0]
 800e222:	f000 ffc3 	bl	800f1ac <lv_disp_load_scr>
	Task_RF_1 = lv_task_create(update_rf_1, 500, LV_TASK_PRIO_MID, NULL);
 800e226:	2300      	movs	r3, #0
 800e228:	2203      	movs	r2, #3
 800e22a:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 800e22e:	4809      	ldr	r0, [pc, #36]	; (800e254 <screen_RF_1+0x84>)
 800e230:	f007 fc6e 	bl	8015b10 <lv_task_create>
 800e234:	4b08      	ldr	r3, [pc, #32]	; (800e258 <screen_RF_1+0x88>)
 800e236:	6018      	str	r0, [r3, #0]
	TelaAtiva = TelaRF_1;
 800e238:	4b08      	ldr	r3, [pc, #32]	; (800e25c <screen_RF_1+0x8c>)
 800e23a:	2207      	movs	r2, #7
 800e23c:	601a      	str	r2, [r3, #0]
 800e23e:	bd38      	pop	{r3, r4, r5, pc}
 800e240:	20005c80 	.word	0x20005c80
 800e244:	20005d54 	.word	0x20005d54
 800e248:	20001c64 	.word	0x20001c64
 800e24c:	0800df51 	.word	0x0800df51
 800e250:	2000001c 	.word	0x2000001c
 800e254:	0800d7e1 	.word	0x0800d7e1
 800e258:	20005c6c 	.word	0x20005c6c
 800e25c:	20003444 	.word	0x20003444

0800e260 <btn_event_esc_rf2>:
	if(event == LV_EVENT_APPLY) {
 800e260:	2911      	cmp	r1, #17
{
 800e262:	b508      	push	{r3, lr}
	if(event == LV_EVENT_APPLY) {
 800e264:	d107      	bne.n	800e276 <btn_event_esc_rf2+0x16>
		lv_obj_del(Tela_RF_2);
 800e266:	4b04      	ldr	r3, [pc, #16]	; (800e278 <btn_event_esc_rf2+0x18>)
 800e268:	6818      	ldr	r0, [r3, #0]
 800e26a:	f001 ffa4 	bl	80101b6 <lv_obj_del>
}
 800e26e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		screen_RF_1();
 800e272:	f7ff bfad 	b.w	800e1d0 <screen_RF_1>
 800e276:	bd08      	pop	{r3, pc}
 800e278:	20005c84 	.word	0x20005c84

0800e27c <btn_event_next_rf>:
	if(event == LV_EVENT_APPLY) {
 800e27c:	2911      	cmp	r1, #17
{
 800e27e:	b508      	push	{r3, lr}
	if(event == LV_EVENT_APPLY) {
 800e280:	d10b      	bne.n	800e29a <btn_event_next_rf+0x1e>
		lv_task_del(Task_RF);
 800e282:	4b06      	ldr	r3, [pc, #24]	; (800e29c <btn_event_next_rf+0x20>)
 800e284:	6818      	ldr	r0, [r3, #0]
 800e286:	f007 fb53 	bl	8015930 <lv_task_del>
		lv_obj_del(Tela_RF);
 800e28a:	4b05      	ldr	r3, [pc, #20]	; (800e2a0 <btn_event_next_rf+0x24>)
 800e28c:	6818      	ldr	r0, [r3, #0]
 800e28e:	f001 ff92 	bl	80101b6 <lv_obj_del>
}
 800e292:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		screen_RF_1();
 800e296:	f7ff bf9b 	b.w	800e1d0 <screen_RF_1>
 800e29a:	bd08      	pop	{r3, pc}
 800e29c:	20005c68 	.word	0x20005c68
 800e2a0:	20005c7c 	.word	0x20005c7c

0800e2a4 <update_style_roller_rf>:
}

void update_style_roller_rf(uint32_t idx)
{
	switch(idx) {
 800e2a4:	2801      	cmp	r0, #1
{
 800e2a6:	b538      	push	{r3, r4, r5, lr}
	switch(idx) {
 800e2a8:	d01a      	beq.n	800e2e0 <update_style_roller_rf+0x3c>
 800e2aa:	d302      	bcc.n	800e2b2 <update_style_roller_rf+0xe>
 800e2ac:	2802      	cmp	r0, #2
 800e2ae:	d01f      	beq.n	800e2f0 <update_style_roller_rf+0x4c>
 800e2b0:	bd38      	pop	{r3, r4, r5, pc}
		case 0:
			lv_roller_set_style(rollerswr[0], LV_ROLLER_STYLE_BG, &style_roller_b);
 800e2b2:	4c18      	ldr	r4, [pc, #96]	; (800e314 <update_style_roller_rf+0x70>)
 800e2b4:	4a18      	ldr	r2, [pc, #96]	; (800e318 <update_style_roller_rf+0x74>)
 800e2b6:	6820      	ldr	r0, [r4, #0]
 800e2b8:	2100      	movs	r1, #0
 800e2ba:	f00c f9c3 	bl	801a644 <lv_roller_set_style>
		    lv_roller_set_style(rollerswr[0], LV_ROLLER_STYLE_SEL, &style_roller_b);
 800e2be:	4a16      	ldr	r2, [pc, #88]	; (800e318 <update_style_roller_rf+0x74>)
 800e2c0:	6820      	ldr	r0, [r4, #0]
 800e2c2:	2101      	movs	r1, #1
 800e2c4:	f00c f9be 	bl	801a644 <lv_roller_set_style>
		    lv_roller_set_style(rollerswr[1], LV_ROLLER_STYLE_BG, &style_roller_b);
 800e2c8:	4a13      	ldr	r2, [pc, #76]	; (800e318 <update_style_roller_rf+0x74>)
 800e2ca:	6860      	ldr	r0, [r4, #4]
 800e2cc:	2100      	movs	r1, #0
 800e2ce:	f00c f9b9 	bl	801a644 <lv_roller_set_style>
		    lv_roller_set_style(rollerswr[1], LV_ROLLER_STYLE_SEL, &style_roller_b);
 800e2d2:	4a11      	ldr	r2, [pc, #68]	; (800e318 <update_style_roller_rf+0x74>)
			break;
		case 2:
			lv_roller_set_style(rollerswr[0], LV_ROLLER_STYLE_BG, &style_roller_b);
		    lv_roller_set_style(rollerswr[0], LV_ROLLER_STYLE_SEL, &style_roller_b);
		    lv_roller_set_style(rollerswr[1], LV_ROLLER_STYLE_BG, &style_roller_bg);
		    lv_roller_set_style(rollerswr[1], LV_ROLLER_STYLE_SEL, &style_roller_bg);
 800e2d4:	6860      	ldr	r0, [r4, #4]
 800e2d6:	2101      	movs	r1, #1
			break;
	}
}
 800e2d8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		    lv_roller_set_style(rollerswr[1], LV_ROLLER_STYLE_SEL, &style_roller_bg);
 800e2dc:	f00c b9b2 	b.w	801a644 <lv_roller_set_style>
			lv_roller_set_style(rollerswr[0], LV_ROLLER_STYLE_BG, &style_roller_bg);
 800e2e0:	4c0c      	ldr	r4, [pc, #48]	; (800e314 <update_style_roller_rf+0x70>)
 800e2e2:	4a0e      	ldr	r2, [pc, #56]	; (800e31c <update_style_roller_rf+0x78>)
 800e2e4:	6820      	ldr	r0, [r4, #0]
 800e2e6:	2100      	movs	r1, #0
 800e2e8:	f00c f9ac 	bl	801a644 <lv_roller_set_style>
		    lv_roller_set_style(rollerswr[0], LV_ROLLER_STYLE_SEL, &style_roller_bg);
 800e2ec:	4a0b      	ldr	r2, [pc, #44]	; (800e31c <update_style_roller_rf+0x78>)
 800e2ee:	e7e7      	b.n	800e2c0 <update_style_roller_rf+0x1c>
			lv_roller_set_style(rollerswr[0], LV_ROLLER_STYLE_BG, &style_roller_b);
 800e2f0:	4c08      	ldr	r4, [pc, #32]	; (800e314 <update_style_roller_rf+0x70>)
 800e2f2:	4a09      	ldr	r2, [pc, #36]	; (800e318 <update_style_roller_rf+0x74>)
 800e2f4:	6820      	ldr	r0, [r4, #0]
 800e2f6:	2100      	movs	r1, #0
 800e2f8:	f00c f9a4 	bl	801a644 <lv_roller_set_style>
		    lv_roller_set_style(rollerswr[0], LV_ROLLER_STYLE_SEL, &style_roller_b);
 800e2fc:	4a06      	ldr	r2, [pc, #24]	; (800e318 <update_style_roller_rf+0x74>)
 800e2fe:	6820      	ldr	r0, [r4, #0]
 800e300:	2101      	movs	r1, #1
 800e302:	f00c f99f 	bl	801a644 <lv_roller_set_style>
		    lv_roller_set_style(rollerswr[1], LV_ROLLER_STYLE_BG, &style_roller_bg);
 800e306:	4a05      	ldr	r2, [pc, #20]	; (800e31c <update_style_roller_rf+0x78>)
 800e308:	6860      	ldr	r0, [r4, #4]
 800e30a:	2100      	movs	r1, #0
 800e30c:	f00c f99a 	bl	801a644 <lv_roller_set_style>
		    lv_roller_set_style(rollerswr[1], LV_ROLLER_STYLE_SEL, &style_roller_bg);
 800e310:	4a02      	ldr	r2, [pc, #8]	; (800e31c <update_style_roller_rf+0x78>)
 800e312:	e7df      	b.n	800e2d4 <update_style_roller_rf+0x30>
 800e314:	20005d6c 	.word	0x20005d6c
 800e318:	20005e58 	.word	0x20005e58
 800e31c:	20005e94 	.word	0x20005e94

0800e320 <update_style_roller_rf_1>:

void update_style_roller_rf_1(uint32_t idx)
{
	switch(idx) {
 800e320:	2801      	cmp	r0, #1
{
 800e322:	b538      	push	{r3, r4, r5, lr}
	switch(idx) {
 800e324:	d01a      	beq.n	800e35c <update_style_roller_rf_1+0x3c>
 800e326:	d302      	bcc.n	800e32e <update_style_roller_rf_1+0xe>
 800e328:	2802      	cmp	r0, #2
 800e32a:	d01f      	beq.n	800e36c <update_style_roller_rf_1+0x4c>
 800e32c:	bd38      	pop	{r3, r4, r5, pc}
		case 0:
			lv_roller_set_style(rollertarget[0], LV_ROLLER_STYLE_BG, &style_roller_b);
 800e32e:	4c18      	ldr	r4, [pc, #96]	; (800e390 <update_style_roller_rf_1+0x70>)
 800e330:	4a18      	ldr	r2, [pc, #96]	; (800e394 <update_style_roller_rf_1+0x74>)
 800e332:	6820      	ldr	r0, [r4, #0]
 800e334:	2100      	movs	r1, #0
 800e336:	f00c f985 	bl	801a644 <lv_roller_set_style>
		    lv_roller_set_style(rollertarget[0], LV_ROLLER_STYLE_SEL, &style_roller_b);
 800e33a:	4a16      	ldr	r2, [pc, #88]	; (800e394 <update_style_roller_rf_1+0x74>)
 800e33c:	6820      	ldr	r0, [r4, #0]
 800e33e:	2101      	movs	r1, #1
 800e340:	f00c f980 	bl	801a644 <lv_roller_set_style>
		    lv_roller_set_style(rollertarget[1], LV_ROLLER_STYLE_BG, &style_roller_b);
 800e344:	4a13      	ldr	r2, [pc, #76]	; (800e394 <update_style_roller_rf_1+0x74>)
 800e346:	6860      	ldr	r0, [r4, #4]
 800e348:	2100      	movs	r1, #0
 800e34a:	f00c f97b 	bl	801a644 <lv_roller_set_style>
		    lv_roller_set_style(rollertarget[1], LV_ROLLER_STYLE_SEL, &style_roller_b);
 800e34e:	4a11      	ldr	r2, [pc, #68]	; (800e394 <update_style_roller_rf_1+0x74>)
			break;
		case 2:
			lv_roller_set_style(rollertarget[0], LV_ROLLER_STYLE_BG, &style_roller_b);
		    lv_roller_set_style(rollertarget[0], LV_ROLLER_STYLE_SEL, &style_roller_b);
		    lv_roller_set_style(rollertarget[1], LV_ROLLER_STYLE_BG, &style_roller_bg);
		    lv_roller_set_style(rollertarget[1], LV_ROLLER_STYLE_SEL, &style_roller_bg);
 800e350:	6860      	ldr	r0, [r4, #4]
 800e352:	2101      	movs	r1, #1
			break;
	}
}
 800e354:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		    lv_roller_set_style(rollertarget[1], LV_ROLLER_STYLE_SEL, &style_roller_bg);
 800e358:	f00c b974 	b.w	801a644 <lv_roller_set_style>
			lv_roller_set_style(rollertarget[0], LV_ROLLER_STYLE_BG, &style_roller_bg);
 800e35c:	4c0c      	ldr	r4, [pc, #48]	; (800e390 <update_style_roller_rf_1+0x70>)
 800e35e:	4a0e      	ldr	r2, [pc, #56]	; (800e398 <update_style_roller_rf_1+0x78>)
 800e360:	6820      	ldr	r0, [r4, #0]
 800e362:	2100      	movs	r1, #0
 800e364:	f00c f96e 	bl	801a644 <lv_roller_set_style>
		    lv_roller_set_style(rollertarget[0], LV_ROLLER_STYLE_SEL, &style_roller_bg);
 800e368:	4a0b      	ldr	r2, [pc, #44]	; (800e398 <update_style_roller_rf_1+0x78>)
 800e36a:	e7e7      	b.n	800e33c <update_style_roller_rf_1+0x1c>
			lv_roller_set_style(rollertarget[0], LV_ROLLER_STYLE_BG, &style_roller_b);
 800e36c:	4c08      	ldr	r4, [pc, #32]	; (800e390 <update_style_roller_rf_1+0x70>)
 800e36e:	4a09      	ldr	r2, [pc, #36]	; (800e394 <update_style_roller_rf_1+0x74>)
 800e370:	6820      	ldr	r0, [r4, #0]
 800e372:	2100      	movs	r1, #0
 800e374:	f00c f966 	bl	801a644 <lv_roller_set_style>
		    lv_roller_set_style(rollertarget[0], LV_ROLLER_STYLE_SEL, &style_roller_b);
 800e378:	4a06      	ldr	r2, [pc, #24]	; (800e394 <update_style_roller_rf_1+0x74>)
 800e37a:	6820      	ldr	r0, [r4, #0]
 800e37c:	2101      	movs	r1, #1
 800e37e:	f00c f961 	bl	801a644 <lv_roller_set_style>
		    lv_roller_set_style(rollertarget[1], LV_ROLLER_STYLE_BG, &style_roller_bg);
 800e382:	4a05      	ldr	r2, [pc, #20]	; (800e398 <update_style_roller_rf_1+0x78>)
 800e384:	6860      	ldr	r0, [r4, #4]
 800e386:	2100      	movs	r1, #0
 800e388:	f00c f95c 	bl	801a644 <lv_roller_set_style>
		    lv_roller_set_style(rollertarget[1], LV_ROLLER_STYLE_SEL, &style_roller_bg);
 800e38c:	4a02      	ldr	r2, [pc, #8]	; (800e398 <update_style_roller_rf_1+0x78>)
 800e38e:	e7df      	b.n	800e350 <update_style_roller_rf_1+0x30>
 800e390:	20005d74 	.word	0x20005d74
 800e394:	20005e58 	.word	0x20005e58
 800e398:	20005e94 	.word	0x20005e94

0800e39c <ButtonEventTelaRF>:

void ButtonEventTelaRF(uint8_t event, uint8_t tipo, uint8_t id)
{
 800e39c:	b5f0      	push	{r4, r5, r6, r7, lr}
    char buf[32];
    char out[6];

	if(event == EVT_PBTN_INPUT) {
 800e39e:	2810      	cmp	r0, #16
{
 800e3a0:	b08f      	sub	sp, #60	; 0x3c
 800e3a2:	4616      	mov	r6, r2
	if(event == EVT_PBTN_INPUT) {
 800e3a4:	d118      	bne.n	800e3d8 <ButtonEventTelaRF+0x3c>
		if(tipo == PBTN_SCLK) {	// Single Click
 800e3a6:	2901      	cmp	r1, #1
 800e3a8:	d116      	bne.n	800e3d8 <ButtonEventTelaRF+0x3c>
			logI("TelaRF - TelaProgRF: %ld IndiceRF: %ld\n", TelaProgRF, IndiceRF);
 800e3aa:	4d79      	ldr	r5, [pc, #484]	; (800e590 <ButtonEventTelaRF+0x1f4>)
 800e3ac:	4c79      	ldr	r4, [pc, #484]	; (800e594 <ButtonEventTelaRF+0x1f8>)
 800e3ae:	6829      	ldr	r1, [r5, #0]
 800e3b0:	6822      	ldr	r2, [r4, #0]
 800e3b2:	4879      	ldr	r0, [pc, #484]	; (800e598 <ButtonEventTelaRF+0x1fc>)
 800e3b4:	f7f3 f95a 	bl	800166c <logI>
 800e3b8:	462b      	mov	r3, r5
			switch(id) {
 800e3ba:	2e03      	cmp	r6, #3
 800e3bc:	d80c      	bhi.n	800e3d8 <ButtonEventTelaRF+0x3c>
 800e3be:	e8df f016 	tbh	[pc, r6, lsl #1]
 800e3c2:	0004      	.short	0x0004
 800e3c4:	006d003b 	.word	0x006d003b
 800e3c8:	00e3      	.short	0x00e3
				case KEY_DN:
					if(TelaProgRF == 0) {
 800e3ca:	682a      	ldr	r2, [r5, #0]
 800e3cc:	b932      	cbnz	r2, 800e3dc <ButtonEventTelaRF+0x40>
						lv_event_send(img_fundo, LV_EVENT_APPLY, NULL);
 800e3ce:	4b73      	ldr	r3, [pc, #460]	; (800e59c <ButtonEventTelaRF+0x200>)
 800e3d0:	2111      	movs	r1, #17
						logI("Debug: KEY_DN Roller_SWR: %ld, Dado: %ld %d\n", IndiceRF, roller_swr[0], roller_swr[1]);
					}
					break;
				case KEY_UP:
					if(TelaProgRF == 0) {
						lv_event_send(imgbtn_next[0], LV_EVENT_APPLY, NULL);
 800e3d2:	6818      	ldr	r0, [r3, #0]
 800e3d4:	f001 f984 	bl	800f6e0 <lv_event_send>
					update_style_roller_rf(0);
					break;
			}
		}
	}
}
 800e3d8:	b00f      	add	sp, #60	; 0x3c
 800e3da:	bdf0      	pop	{r4, r5, r6, r7, pc}
					else if(TelaProgRF == 1) {
 800e3dc:	2a01      	cmp	r2, #1
 800e3de:	d10c      	bne.n	800e3fa <ButtonEventTelaRF+0x5e>
						if(IndiceRF >= 1) IndiceRF--;
 800e3e0:	6823      	ldr	r3, [r4, #0]
 800e3e2:	b10b      	cbz	r3, 800e3e8 <ButtonEventTelaRF+0x4c>
 800e3e4:	3b01      	subs	r3, #1
 800e3e6:	6023      	str	r3, [r4, #0]
						logI("TelaRF - KEY_DN - IndiceRF: %ld\n", IndiceRF);
 800e3e8:	6821      	ldr	r1, [r4, #0]
 800e3ea:	486d      	ldr	r0, [pc, #436]	; (800e5a0 <ButtonEventTelaRF+0x204>)
						logI("TelaRF - KEY_UP - IndiceRF: %ld\n", IndiceRF);
 800e3ec:	f7f3 f93e 	bl	800166c <logI>
						update_style_roller_rf(IndiceRF + 1);
 800e3f0:	6820      	ldr	r0, [r4, #0]
 800e3f2:	3001      	adds	r0, #1
					update_style_roller_rf(0);
 800e3f4:	f7ff ff56 	bl	800e2a4 <update_style_roller_rf>
}
 800e3f8:	e7ee      	b.n	800e3d8 <ButtonEventTelaRF+0x3c>
					else if(TelaProgRF == 2) {
 800e3fa:	2a02      	cmp	r2, #2
 800e3fc:	d1ec      	bne.n	800e3d8 <ButtonEventTelaRF+0x3c>
						if(IndiceRF == 0) {
 800e3fe:	6826      	ldr	r6, [r4, #0]
 800e400:	4d68      	ldr	r5, [pc, #416]	; (800e5a4 <ButtonEventTelaRF+0x208>)
 800e402:	4869      	ldr	r0, [pc, #420]	; (800e5a8 <ButtonEventTelaRF+0x20c>)
 800e404:	b97e      	cbnz	r6, 800e426 <ButtonEventTelaRF+0x8a>
							if(roller_swr[0] > 0) roller_swr[0]--;
 800e406:	882b      	ldrh	r3, [r5, #0]
 800e408:	b10b      	cbz	r3, 800e40e <ButtonEventTelaRF+0x72>
 800e40a:	3b01      	subs	r3, #1
 800e40c:	802b      	strh	r3, [r5, #0]
							lv_roller_set_selected(rollerswr[IndiceRF], roller_swr[0], false);
 800e40e:	8829      	ldrh	r1, [r5, #0]
 800e410:	6800      	ldr	r0, [r0, #0]
 800e412:	2200      	movs	r2, #0
							lv_roller_set_selected(rollerswr[IndiceRF], roller_swr[1], false);
 800e414:	f00c f940 	bl	801a698 <lv_roller_set_selected>
						logI("Debug: KEY_DN Roller_SWR: %ld, Dado: %ld %d\n", IndiceRF, roller_swr[0], roller_swr[1]);
 800e418:	886b      	ldrh	r3, [r5, #2]
 800e41a:	882a      	ldrh	r2, [r5, #0]
 800e41c:	6821      	ldr	r1, [r4, #0]
 800e41e:	4863      	ldr	r0, [pc, #396]	; (800e5ac <ButtonEventTelaRF+0x210>)
						logI("Debug: Roller[0] = %d, Roller[1] = %d IndiceRF: %d\n", roller_swr[0], roller_swr[1], IndiceRF);
 800e420:	f7f3 f924 	bl	800166c <logI>
 800e424:	e7d8      	b.n	800e3d8 <ButtonEventTelaRF+0x3c>
							if(roller_swr[1] > 0) roller_swr[1]--;
 800e426:	886b      	ldrh	r3, [r5, #2]
 800e428:	b10b      	cbz	r3, 800e42e <ButtonEventTelaRF+0x92>
 800e42a:	3b01      	subs	r3, #1
 800e42c:	806b      	strh	r3, [r5, #2]
							lv_roller_set_selected(rollerswr[IndiceRF], roller_swr[1], false);
 800e42e:	2200      	movs	r2, #0
 800e430:	8869      	ldrh	r1, [r5, #2]
 800e432:	f850 0026 	ldr.w	r0, [r0, r6, lsl #2]
 800e436:	e7ed      	b.n	800e414 <ButtonEventTelaRF+0x78>
					if(TelaProgRF == 0) {
 800e438:	682a      	ldr	r2, [r5, #0]
 800e43a:	b912      	cbnz	r2, 800e442 <ButtonEventTelaRF+0xa6>
						lv_event_send(imgbtn_next[0], LV_EVENT_APPLY, NULL);
 800e43c:	2111      	movs	r1, #17
 800e43e:	4b5c      	ldr	r3, [pc, #368]	; (800e5b0 <ButtonEventTelaRF+0x214>)
 800e440:	e7c7      	b.n	800e3d2 <ButtonEventTelaRF+0x36>
					else if(TelaProgRF == 1){
 800e442:	2a01      	cmp	r2, #1
 800e444:	d107      	bne.n	800e456 <ButtonEventTelaRF+0xba>
						IndiceRF++;
 800e446:	6821      	ldr	r1, [r4, #0]
						logI("TelaRF - KEY_UP - IndiceRF: %ld\n", IndiceRF);
 800e448:	485a      	ldr	r0, [pc, #360]	; (800e5b4 <ButtonEventTelaRF+0x218>)
						IndiceRF++;
 800e44a:	3101      	adds	r1, #1
 800e44c:	2901      	cmp	r1, #1
 800e44e:	bf88      	it	hi
 800e450:	4611      	movhi	r1, r2
 800e452:	6021      	str	r1, [r4, #0]
 800e454:	e7ca      	b.n	800e3ec <ButtonEventTelaRF+0x50>
					else if(TelaProgRF == 2) {
 800e456:	2a02      	cmp	r2, #2
 800e458:	d1be      	bne.n	800e3d8 <ButtonEventTelaRF+0x3c>
						if(IndiceRF == 0) {
 800e45a:	6820      	ldr	r0, [r4, #0]
 800e45c:	4d51      	ldr	r5, [pc, #324]	; (800e5a4 <ButtonEventTelaRF+0x208>)
 800e45e:	4e52      	ldr	r6, [pc, #328]	; (800e5a8 <ButtonEventTelaRF+0x20c>)
 800e460:	b980      	cbnz	r0, 800e484 <ButtonEventTelaRF+0xe8>
							roller_swr[0]++;
 800e462:	882b      	ldrh	r3, [r5, #0]
 800e464:	3301      	adds	r3, #1
 800e466:	b29b      	uxth	r3, r3
							if(roller_swr[0] > 2) roller_swr[0] = 0;
 800e468:	2b02      	cmp	r3, #2
 800e46a:	bf8c      	ite	hi
 800e46c:	8028      	strhhi	r0, [r5, #0]
							roller_swr[0]++;
 800e46e:	802b      	strhls	r3, [r5, #0]
							lv_roller_set_selected(rollerswr[IndiceRF], roller_swr[0], false);
 800e470:	8829      	ldrh	r1, [r5, #0]
 800e472:	6830      	ldr	r0, [r6, #0]
 800e474:	2200      	movs	r2, #0
							lv_roller_set_selected(rollerswr[IndiceRF], roller_swr[1], false);
 800e476:	f00c f90f 	bl	801a698 <lv_roller_set_selected>
						logI("Debug: KEY_UP Roller_SWR: %ld, Dado: %d %d\n", IndiceRF, roller_swr[0], roller_swr[1]);
 800e47a:	886b      	ldrh	r3, [r5, #2]
 800e47c:	882a      	ldrh	r2, [r5, #0]
 800e47e:	6821      	ldr	r1, [r4, #0]
 800e480:	484d      	ldr	r0, [pc, #308]	; (800e5b8 <ButtonEventTelaRF+0x21c>)
 800e482:	e7cd      	b.n	800e420 <ButtonEventTelaRF+0x84>
							roller_swr[1]++;
 800e484:	886b      	ldrh	r3, [r5, #2]
							lv_roller_set_selected(rollerswr[IndiceRF], roller_swr[1], false);
 800e486:	f856 0020 	ldr.w	r0, [r6, r0, lsl #2]
							roller_swr[1]++;
 800e48a:	3301      	adds	r3, #1
 800e48c:	b29b      	uxth	r3, r3
							if(roller_swr[1] > 9) roller_swr[1] = 0;
 800e48e:	2b09      	cmp	r3, #9
 800e490:	bf88      	it	hi
 800e492:	2300      	movhi	r3, #0
 800e494:	806b      	strh	r3, [r5, #2]
							lv_roller_set_selected(rollerswr[IndiceRF], roller_swr[1], false);
 800e496:	2200      	movs	r2, #0
 800e498:	8869      	ldrh	r1, [r5, #2]
 800e49a:	e7ec      	b.n	800e476 <ButtonEventTelaRF+0xda>
					if(TelaProgRF == 0) {
 800e49c:	682d      	ldr	r5, [r5, #0]
 800e49e:	b91d      	cbnz	r5, 800e4a8 <ButtonEventTelaRF+0x10c>
						TelaProgRF = 1;
 800e4a0:	2001      	movs	r0, #1
 800e4a2:	6018      	str	r0, [r3, #0]
						IndiceRF = 0;
 800e4a4:	6025      	str	r5, [r4, #0]
 800e4a6:	e7a5      	b.n	800e3f4 <ButtonEventTelaRF+0x58>
					else if(TelaProgRF == 1) {
 800e4a8:	2d01      	cmp	r5, #1
 800e4aa:	d11f      	bne.n	800e4ec <ButtonEventTelaRF+0x150>
						TelaProgRF = 2;
 800e4ac:	2202      	movs	r2, #2
 800e4ae:	601a      	str	r2, [r3, #0]
						roller_swr[0] = Max_Reflected / 10;
 800e4b0:	4b42      	ldr	r3, [pc, #264]	; (800e5bc <ButtonEventTelaRF+0x220>)
 800e4b2:	4e3c      	ldr	r6, [pc, #240]	; (800e5a4 <ButtonEventTelaRF+0x208>)
 800e4b4:	6819      	ldr	r1, [r3, #0]
					    lv_roller_set_style(rollerswr[IndiceRF], LV_ROLLER_STYLE_BG, &style_roller_anim);
 800e4b6:	4f3c      	ldr	r7, [pc, #240]	; (800e5a8 <ButtonEventTelaRF+0x20c>)
						roller_swr[0] = Max_Reflected / 10;
 800e4b8:	220a      	movs	r2, #10
 800e4ba:	fbb1 f3f2 	udiv	r3, r1, r2
 800e4be:	8033      	strh	r3, [r6, #0]
						roller_swr[1] = Max_Reflected % 10;
 800e4c0:	fb02 1313 	mls	r3, r2, r3, r1
 800e4c4:	8073      	strh	r3, [r6, #2]
					    lv_roller_set_style(rollerswr[IndiceRF], LV_ROLLER_STYLE_BG, &style_roller_anim);
 800e4c6:	6823      	ldr	r3, [r4, #0]
 800e4c8:	4a3d      	ldr	r2, [pc, #244]	; (800e5c0 <ButtonEventTelaRF+0x224>)
 800e4ca:	f857 0023 	ldr.w	r0, [r7, r3, lsl #2]
 800e4ce:	2100      	movs	r1, #0
 800e4d0:	f00c f8b8 	bl	801a644 <lv_roller_set_style>
					    lv_roller_set_style(rollerswr[IndiceRF], LV_ROLLER_STYLE_SEL, &style_roller_anim);
 800e4d4:	6823      	ldr	r3, [r4, #0]
 800e4d6:	4a3a      	ldr	r2, [pc, #232]	; (800e5c0 <ButtonEventTelaRF+0x224>)
 800e4d8:	f857 0023 	ldr.w	r0, [r7, r3, lsl #2]
 800e4dc:	4629      	mov	r1, r5
 800e4de:	f00c f8b1 	bl	801a644 <lv_roller_set_style>
						logI("Debug: Roller[0] = %d, Roller[1] = %d IndiceRF: %d\n", roller_swr[0], roller_swr[1], IndiceRF);
 800e4e2:	6823      	ldr	r3, [r4, #0]
 800e4e4:	8872      	ldrh	r2, [r6, #2]
 800e4e6:	8831      	ldrh	r1, [r6, #0]
 800e4e8:	4836      	ldr	r0, [pc, #216]	; (800e5c4 <ButtonEventTelaRF+0x228>)
 800e4ea:	e799      	b.n	800e420 <ButtonEventTelaRF+0x84>
					else if(TelaProgRF == 2) {
 800e4ec:	2d02      	cmp	r5, #2
 800e4ee:	f47f af73 	bne.w	800e3d8 <ButtonEventTelaRF+0x3c>
						lv_roller_set_style(rollerswr[0], LV_ROLLER_STYLE_BG, &style_roller_save);
 800e4f2:	4c2d      	ldr	r4, [pc, #180]	; (800e5a8 <ButtonEventTelaRF+0x20c>)
						TelaProgRF = 3;
 800e4f4:	2203      	movs	r2, #3
 800e4f6:	601a      	str	r2, [r3, #0]
						lv_roller_set_style(rollerswr[0], LV_ROLLER_STYLE_BG, &style_roller_save);
 800e4f8:	6820      	ldr	r0, [r4, #0]
 800e4fa:	4a33      	ldr	r2, [pc, #204]	; (800e5c8 <ButtonEventTelaRF+0x22c>)
 800e4fc:	2100      	movs	r1, #0
 800e4fe:	f00c f8a1 	bl	801a644 <lv_roller_set_style>
					    lv_roller_set_style(rollerswr[0], LV_ROLLER_STYLE_SEL, &style_roller_save);
 800e502:	6820      	ldr	r0, [r4, #0]
 800e504:	4a30      	ldr	r2, [pc, #192]	; (800e5c8 <ButtonEventTelaRF+0x22c>)
 800e506:	2101      	movs	r1, #1
 800e508:	f00c f89c 	bl	801a644 <lv_roller_set_style>
					    lv_roller_set_style(rollerswr[1], LV_ROLLER_STYLE_BG, &style_roller_save);
 800e50c:	6860      	ldr	r0, [r4, #4]
 800e50e:	4a2e      	ldr	r2, [pc, #184]	; (800e5c8 <ButtonEventTelaRF+0x22c>)
 800e510:	2100      	movs	r1, #0
 800e512:	f00c f897 	bl	801a644 <lv_roller_set_style>
					    lv_roller_set_style(rollerswr[1], LV_ROLLER_STYLE_SEL, &style_roller_save);
 800e516:	6860      	ldr	r0, [r4, #4]
 800e518:	4a2b      	ldr	r2, [pc, #172]	; (800e5c8 <ButtonEventTelaRF+0x22c>)
 800e51a:	2101      	movs	r1, #1
 800e51c:	f00c f892 	bl	801a644 <lv_roller_set_style>
    lv_ddlist_get_selected_str(roller, buf, buf_size);
 800e520:	a906      	add	r1, sp, #24
 800e522:	6820      	ldr	r0, [r4, #0]
 800e524:	2220      	movs	r2, #32
 800e526:	f009 fa62 	bl	80179ee <lv_ddlist_get_selected_str>
				        out[0] = buf[0];
 800e52a:	f89d 3018 	ldrb.w	r3, [sp, #24]
 800e52e:	6860      	ldr	r0, [r4, #4]
 800e530:	f88d 3010 	strb.w	r3, [sp, #16]
 800e534:	2220      	movs	r2, #32
 800e536:	a906      	add	r1, sp, #24
 800e538:	f009 fa59 	bl	80179ee <lv_ddlist_get_selected_str>
				        Max_Reflected = atoi(out);
 800e53c:	ad04      	add	r5, sp, #16
				        out[1] = buf[0];
 800e53e:	f89d 3018 	ldrb.w	r3, [sp, #24]
 800e542:	f88d 3011 	strb.w	r3, [sp, #17]
				        Max_Reflected = atoi(out);
 800e546:	4628      	mov	r0, r5
				        out[3] = 0;
 800e548:	2300      	movs	r3, #0
 800e54a:	f88d 3013 	strb.w	r3, [sp, #19]
				        Max_Reflected = atoi(out);
 800e54e:	f00c f9ca 	bl	801a8e6 <atoi>
				        max_rfl = (float)(Max_Reflected);
 800e552:	ee07 0a90 	vmov	s15, r0
 800e556:	eef8 6a67 	vcvt.f32.u32	s13, s15
				        max_rfl /= 10;
 800e55a:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 800e55e:	eec6 7a87 	vdiv.f32	s15, s13, s14
				        Max_Reflected = atoi(out);
 800e562:	4b16      	ldr	r3, [pc, #88]	; (800e5bc <ButtonEventTelaRF+0x220>)
 800e564:	6018      	str	r0, [r3, #0]
				        max_rfl /= 10;
 800e566:	4b19      	ldr	r3, [pc, #100]	; (800e5cc <ButtonEventTelaRF+0x230>)
				        Max_Reflected = atoi(out);
 800e568:	4604      	mov	r4, r0
				        max_rfl /= 10;
 800e56a:	edc3 7a00 	vstr	s15, [r3]
				        logI("Save MAX_RFL: Digit: %s  Max_reflected: %ld   max_rfl: %0.1fW  B1: %s\n", buf, Max_Reflected, max_rfl, out);
 800e56e:	ee17 0a90 	vmov	r0, s15
 800e572:	9502      	str	r5, [sp, #8]
 800e574:	f7f1 ffe8 	bl	8000548 <__aeabi_f2d>
 800e578:	4622      	mov	r2, r4
 800e57a:	e9cd 0100 	strd	r0, r1, [sp]
 800e57e:	a906      	add	r1, sp, #24
 800e580:	4813      	ldr	r0, [pc, #76]	; (800e5d0 <ButtonEventTelaRF+0x234>)
 800e582:	f7f3 f873 	bl	800166c <logI>
 800e586:	e727      	b.n	800e3d8 <ButtonEventTelaRF+0x3c>
					TelaProgRF = 0;
 800e588:	2000      	movs	r0, #0
 800e58a:	6028      	str	r0, [r5, #0]
					IndiceRF = 0;
 800e58c:	6020      	str	r0, [r4, #0]
 800e58e:	e731      	b.n	800e3f4 <ButtonEventTelaRF+0x58>
 800e590:	20005c70 	.word	0x20005c70
 800e594:	20005c5c 	.word	0x20005c5c
 800e598:	0802cd80 	.word	0x0802cd80
 800e59c:	20005d50 	.word	0x20005d50
 800e5a0:	0802cda8 	.word	0x0802cda8
 800e5a4:	2000bc1c 	.word	0x2000bc1c
 800e5a8:	20005d6c 	.word	0x20005d6c
 800e5ac:	0802cdc9 	.word	0x0802cdc9
 800e5b0:	20005d64 	.word	0x20005d64
 800e5b4:	0802cdf6 	.word	0x0802cdf6
 800e5b8:	0802ce17 	.word	0x0802ce17
 800e5bc:	20000004 	.word	0x20000004
 800e5c0:	20005e1c 	.word	0x20005e1c
 800e5c4:	0802ce43 	.word	0x0802ce43
 800e5c8:	20005ed0 	.word	0x20005ed0
 800e5cc:	20000014 	.word	0x20000014
 800e5d0:	0802ce77 	.word	0x0802ce77

0800e5d4 <ButtonEventTelaRF_1>:

void ButtonEventTelaRF_1(uint8_t event, uint8_t tipo, uint8_t id)
{
 800e5d4:	b5f0      	push	{r4, r5, r6, r7, lr}
    char buf[32];
    char out[6];

	if(event == EVT_PBTN_INPUT) {
 800e5d6:	2810      	cmp	r0, #16
{
 800e5d8:	b08f      	sub	sp, #60	; 0x3c
	if(event == EVT_PBTN_INPUT) {
 800e5da:	d111      	bne.n	800e600 <ButtonEventTelaRF_1+0x2c>
		if(tipo == PBTN_SCLK) {	// Single Click
 800e5dc:	2901      	cmp	r1, #1
 800e5de:	d10f      	bne.n	800e600 <ButtonEventTelaRF_1+0x2c>
			switch(id) {
 800e5e0:	2a03      	cmp	r2, #3
 800e5e2:	d80d      	bhi.n	800e600 <ButtonEventTelaRF_1+0x2c>
 800e5e4:	e8df f012 	tbh	[pc, r2, lsl #1]
 800e5e8:	003e0004 	.word	0x003e0004
 800e5ec:	00ea0075 	.word	0x00ea0075
				case KEY_DN:
					if(TelaProgRF_1 == 0) {
 800e5f0:	4b75      	ldr	r3, [pc, #468]	; (800e7c8 <ButtonEventTelaRF_1+0x1f4>)
 800e5f2:	681a      	ldr	r2, [r3, #0]
 800e5f4:	b932      	cbnz	r2, 800e604 <ButtonEventTelaRF_1+0x30>
						lv_event_send(img_fundo, LV_EVENT_APPLY, NULL);
 800e5f6:	4b75      	ldr	r3, [pc, #468]	; (800e7cc <ButtonEventTelaRF_1+0x1f8>)
 800e5f8:	6818      	ldr	r0, [r3, #0]
 800e5fa:	2111      	movs	r1, #17
						logI("Debug: KEY_DN Roller_Target: %ld, Dado: %ld %d\n", IndiceRF_1, roller_target[0], roller_target[1]);
					}
					break;
				case KEY_UP:
					if(TelaProgRF_1 == 0) {
						lv_event_send(imgbtn_next[1], LV_EVENT_APPLY, NULL);
 800e5fc:	f001 f870 	bl	800f6e0 <lv_event_send>
					update_style_roller_rf_1(0);
					break;
			}
		}
	}
}
 800e600:	b00f      	add	sp, #60	; 0x3c
 800e602:	bdf0      	pop	{r4, r5, r6, r7, pc}
					else if(TelaProgRF_1 == 1) {
 800e604:	2a01      	cmp	r2, #1
 800e606:	d10d      	bne.n	800e624 <ButtonEventTelaRF_1+0x50>
						if(IndiceRF_1 >= 1) IndiceRF_1--;
 800e608:	4c71      	ldr	r4, [pc, #452]	; (800e7d0 <ButtonEventTelaRF_1+0x1fc>)
 800e60a:	6823      	ldr	r3, [r4, #0]
 800e60c:	b10b      	cbz	r3, 800e612 <ButtonEventTelaRF_1+0x3e>
 800e60e:	3b01      	subs	r3, #1
 800e610:	6023      	str	r3, [r4, #0]
						logI("TelaRF_1 - KEY_DN - IndiceRF_1: %ld\n", IndiceRF_1);
 800e612:	6821      	ldr	r1, [r4, #0]
 800e614:	486f      	ldr	r0, [pc, #444]	; (800e7d4 <ButtonEventTelaRF_1+0x200>)
						logI("TelaRF - KEY_UP - IndiceRF: %ld\n", IndiceRF_1);
 800e616:	f7f3 f829 	bl	800166c <logI>
						update_style_roller_rf_1(IndiceRF_1 + 1);
 800e61a:	6820      	ldr	r0, [r4, #0]
 800e61c:	3001      	adds	r0, #1
					update_style_roller_rf_1(0);
 800e61e:	f7ff fe7f 	bl	800e320 <update_style_roller_rf_1>
}
 800e622:	e7ed      	b.n	800e600 <ButtonEventTelaRF_1+0x2c>
					else if(TelaProgRF_1 == 2) {
 800e624:	2a02      	cmp	r2, #2
 800e626:	d1eb      	bne.n	800e600 <ButtonEventTelaRF_1+0x2c>
						if(IndiceRF_1 == 0) {
 800e628:	4d69      	ldr	r5, [pc, #420]	; (800e7d0 <ButtonEventTelaRF_1+0x1fc>)
 800e62a:	4c6b      	ldr	r4, [pc, #428]	; (800e7d8 <ButtonEventTelaRF_1+0x204>)
 800e62c:	682e      	ldr	r6, [r5, #0]
 800e62e:	486b      	ldr	r0, [pc, #428]	; (800e7dc <ButtonEventTelaRF_1+0x208>)
 800e630:	b97e      	cbnz	r6, 800e652 <ButtonEventTelaRF_1+0x7e>
							if(roller_target[0] > 0) roller_target[0]--;
 800e632:	8823      	ldrh	r3, [r4, #0]
 800e634:	b10b      	cbz	r3, 800e63a <ButtonEventTelaRF_1+0x66>
 800e636:	3b01      	subs	r3, #1
 800e638:	8023      	strh	r3, [r4, #0]
							lv_roller_set_selected(rollertarget[IndiceRF_1], roller_target[0], false);
 800e63a:	8821      	ldrh	r1, [r4, #0]
 800e63c:	6800      	ldr	r0, [r0, #0]
 800e63e:	2200      	movs	r2, #0
							lv_roller_set_selected(rollertarget[IndiceRF_1], roller_target[1], false);
 800e640:	f00c f82a 	bl	801a698 <lv_roller_set_selected>
						logI("Debug: KEY_DN Roller_Target: %ld, Dado: %ld %d\n", IndiceRF_1, roller_target[0], roller_target[1]);
 800e644:	8863      	ldrh	r3, [r4, #2]
 800e646:	8822      	ldrh	r2, [r4, #0]
 800e648:	6829      	ldr	r1, [r5, #0]
 800e64a:	4865      	ldr	r0, [pc, #404]	; (800e7e0 <ButtonEventTelaRF_1+0x20c>)
						logI("Debug Target: Roller[0] = %d, Roller[1] = %d IndiceRF_1: %d\n", roller_target[0], roller_target[1], IndiceRF_1);
 800e64c:	f7f3 f80e 	bl	800166c <logI>
 800e650:	e7d6      	b.n	800e600 <ButtonEventTelaRF_1+0x2c>
							if(roller_target[1] > 0) roller_target[1]--;
 800e652:	8863      	ldrh	r3, [r4, #2]
 800e654:	b10b      	cbz	r3, 800e65a <ButtonEventTelaRF_1+0x86>
 800e656:	3b01      	subs	r3, #1
 800e658:	8063      	strh	r3, [r4, #2]
							lv_roller_set_selected(rollertarget[IndiceRF_1], roller_target[1], false);
 800e65a:	2200      	movs	r2, #0
 800e65c:	8861      	ldrh	r1, [r4, #2]
 800e65e:	f850 0026 	ldr.w	r0, [r0, r6, lsl #2]
 800e662:	e7ed      	b.n	800e640 <ButtonEventTelaRF_1+0x6c>
					if(TelaProgRF_1 == 0) {
 800e664:	4b58      	ldr	r3, [pc, #352]	; (800e7c8 <ButtonEventTelaRF_1+0x1f4>)
 800e666:	681a      	ldr	r2, [r3, #0]
 800e668:	b91a      	cbnz	r2, 800e672 <ButtonEventTelaRF_1+0x9e>
						lv_event_send(imgbtn_next[1], LV_EVENT_APPLY, NULL);
 800e66a:	4b5e      	ldr	r3, [pc, #376]	; (800e7e4 <ButtonEventTelaRF_1+0x210>)
 800e66c:	2111      	movs	r1, #17
 800e66e:	6858      	ldr	r0, [r3, #4]
 800e670:	e7c4      	b.n	800e5fc <ButtonEventTelaRF_1+0x28>
					else if(TelaProgRF_1 == 1){
 800e672:	2a01      	cmp	r2, #1
 800e674:	d108      	bne.n	800e688 <ButtonEventTelaRF_1+0xb4>
						IndiceRF_1++;
 800e676:	4c56      	ldr	r4, [pc, #344]	; (800e7d0 <ButtonEventTelaRF_1+0x1fc>)
						logI("TelaRF - KEY_UP - IndiceRF: %ld\n", IndiceRF_1);
 800e678:	485b      	ldr	r0, [pc, #364]	; (800e7e8 <ButtonEventTelaRF_1+0x214>)
						IndiceRF_1++;
 800e67a:	6821      	ldr	r1, [r4, #0]
 800e67c:	3101      	adds	r1, #1
 800e67e:	2901      	cmp	r1, #1
 800e680:	bf88      	it	hi
 800e682:	4611      	movhi	r1, r2
 800e684:	6021      	str	r1, [r4, #0]
 800e686:	e7c6      	b.n	800e616 <ButtonEventTelaRF_1+0x42>
					else if(TelaProgRF_1 == 2) {
 800e688:	2a02      	cmp	r2, #2
 800e68a:	d1b9      	bne.n	800e600 <ButtonEventTelaRF_1+0x2c>
						if(IndiceRF_1 == 0) {
 800e68c:	4b50      	ldr	r3, [pc, #320]	; (800e7d0 <ButtonEventTelaRF_1+0x1fc>)
 800e68e:	4c52      	ldr	r4, [pc, #328]	; (800e7d8 <ButtonEventTelaRF_1+0x204>)
 800e690:	6818      	ldr	r0, [r3, #0]
 800e692:	4d52      	ldr	r5, [pc, #328]	; (800e7dc <ButtonEventTelaRF_1+0x208>)
 800e694:	b988      	cbnz	r0, 800e6ba <ButtonEventTelaRF_1+0xe6>
							roller_target[0]++;
 800e696:	8823      	ldrh	r3, [r4, #0]
 800e698:	3301      	adds	r3, #1
 800e69a:	b29b      	uxth	r3, r3
							if(roller_target[0] > 2) roller_target[0] = 0;
 800e69c:	2b02      	cmp	r3, #2
 800e69e:	bf8c      	ite	hi
 800e6a0:	8020      	strhhi	r0, [r4, #0]
							roller_target[0]++;
 800e6a2:	8023      	strhls	r3, [r4, #0]
							lv_roller_set_selected(rollertarget[IndiceRF_1], roller_target[0], false);
 800e6a4:	8821      	ldrh	r1, [r4, #0]
 800e6a6:	6828      	ldr	r0, [r5, #0]
 800e6a8:	2200      	movs	r2, #0
							lv_roller_set_selected(rollertarget[IndiceRF_1], roller_target[1], false);
 800e6aa:	f00b fff5 	bl	801a698 <lv_roller_set_selected>
						logI("Debug: KEY_UP Roller_SWR: %ld, Dado: %d %d\n", IndiceRF, roller_target[0], roller_target[1]);
 800e6ae:	494f      	ldr	r1, [pc, #316]	; (800e7ec <ButtonEventTelaRF_1+0x218>)
 800e6b0:	8863      	ldrh	r3, [r4, #2]
 800e6b2:	8822      	ldrh	r2, [r4, #0]
 800e6b4:	6809      	ldr	r1, [r1, #0]
 800e6b6:	484e      	ldr	r0, [pc, #312]	; (800e7f0 <ButtonEventTelaRF_1+0x21c>)
 800e6b8:	e7c8      	b.n	800e64c <ButtonEventTelaRF_1+0x78>
							roller_target[1]++;
 800e6ba:	8863      	ldrh	r3, [r4, #2]
							lv_roller_set_selected(rollertarget[IndiceRF_1], roller_target[1], false);
 800e6bc:	f855 0020 	ldr.w	r0, [r5, r0, lsl #2]
							roller_target[1]++;
 800e6c0:	3301      	adds	r3, #1
 800e6c2:	b29b      	uxth	r3, r3
							if(roller_target[1] > 9) roller_target[1] = 0;
 800e6c4:	2b09      	cmp	r3, #9
 800e6c6:	bf88      	it	hi
 800e6c8:	2300      	movhi	r3, #0
 800e6ca:	8063      	strh	r3, [r4, #2]
							lv_roller_set_selected(rollertarget[IndiceRF_1], roller_target[1], false);
 800e6cc:	2200      	movs	r2, #0
 800e6ce:	8861      	ldrh	r1, [r4, #2]
 800e6d0:	e7eb      	b.n	800e6aa <ButtonEventTelaRF_1+0xd6>
					if(TelaProgRF_1 == 0) {
 800e6d2:	4b3d      	ldr	r3, [pc, #244]	; (800e7c8 <ButtonEventTelaRF_1+0x1f4>)
 800e6d4:	681c      	ldr	r4, [r3, #0]
 800e6d6:	b924      	cbnz	r4, 800e6e2 <ButtonEventTelaRF_1+0x10e>
						TelaProgRF_1 = 1;
 800e6d8:	2001      	movs	r0, #1
 800e6da:	6018      	str	r0, [r3, #0]
						IndiceRF_1 = 0;
 800e6dc:	4b3c      	ldr	r3, [pc, #240]	; (800e7d0 <ButtonEventTelaRF_1+0x1fc>)
 800e6de:	601c      	str	r4, [r3, #0]
 800e6e0:	e79d      	b.n	800e61e <ButtonEventTelaRF_1+0x4a>
					else if(TelaProgRF_1 == 1) {
 800e6e2:	2c01      	cmp	r4, #1
 800e6e4:	d120      	bne.n	800e728 <ButtonEventTelaRF_1+0x154>
						TelaProgRF_1 = 2;
 800e6e6:	2202      	movs	r2, #2
 800e6e8:	601a      	str	r2, [r3, #0]
						roller_target[0] = Target_Int / 10;
 800e6ea:	4b42      	ldr	r3, [pc, #264]	; (800e7f4 <ButtonEventTelaRF_1+0x220>)
 800e6ec:	4d3a      	ldr	r5, [pc, #232]	; (800e7d8 <ButtonEventTelaRF_1+0x204>)
 800e6ee:	6819      	ldr	r1, [r3, #0]
					    lv_roller_set_style(rollertarget[IndiceRF_1], LV_ROLLER_STYLE_BG, &style_roller_anim);
 800e6f0:	4e37      	ldr	r6, [pc, #220]	; (800e7d0 <ButtonEventTelaRF_1+0x1fc>)
 800e6f2:	4f3a      	ldr	r7, [pc, #232]	; (800e7dc <ButtonEventTelaRF_1+0x208>)
						roller_target[0] = Target_Int / 10;
 800e6f4:	220a      	movs	r2, #10
 800e6f6:	fbb1 f3f2 	udiv	r3, r1, r2
 800e6fa:	802b      	strh	r3, [r5, #0]
						roller_target[1] = Target_Int % 10;
 800e6fc:	fb02 1313 	mls	r3, r2, r3, r1
 800e700:	806b      	strh	r3, [r5, #2]
					    lv_roller_set_style(rollertarget[IndiceRF_1], LV_ROLLER_STYLE_BG, &style_roller_anim);
 800e702:	6833      	ldr	r3, [r6, #0]
 800e704:	4a3c      	ldr	r2, [pc, #240]	; (800e7f8 <ButtonEventTelaRF_1+0x224>)
 800e706:	f857 0023 	ldr.w	r0, [r7, r3, lsl #2]
 800e70a:	2100      	movs	r1, #0
 800e70c:	f00b ff9a 	bl	801a644 <lv_roller_set_style>
					    lv_roller_set_style(rollertarget[IndiceRF_1], LV_ROLLER_STYLE_SEL, &style_roller_anim);
 800e710:	6833      	ldr	r3, [r6, #0]
 800e712:	4a39      	ldr	r2, [pc, #228]	; (800e7f8 <ButtonEventTelaRF_1+0x224>)
 800e714:	f857 0023 	ldr.w	r0, [r7, r3, lsl #2]
 800e718:	4621      	mov	r1, r4
 800e71a:	f00b ff93 	bl	801a644 <lv_roller_set_style>
						logI("Debug Target: Roller[0] = %d, Roller[1] = %d IndiceRF_1: %d\n", roller_target[0], roller_target[1], IndiceRF_1);
 800e71e:	6833      	ldr	r3, [r6, #0]
 800e720:	886a      	ldrh	r2, [r5, #2]
 800e722:	8829      	ldrh	r1, [r5, #0]
 800e724:	4835      	ldr	r0, [pc, #212]	; (800e7fc <ButtonEventTelaRF_1+0x228>)
 800e726:	e791      	b.n	800e64c <ButtonEventTelaRF_1+0x78>
					else if(TelaProgRF_1 == 2) {
 800e728:	2c02      	cmp	r4, #2
 800e72a:	f47f af69 	bne.w	800e600 <ButtonEventTelaRF_1+0x2c>
						lv_roller_set_style(rollertarget[0], LV_ROLLER_STYLE_BG, &style_roller_save);
 800e72e:	4c2b      	ldr	r4, [pc, #172]	; (800e7dc <ButtonEventTelaRF_1+0x208>)
						TelaProgRF_1 = 3;
 800e730:	2203      	movs	r2, #3
 800e732:	601a      	str	r2, [r3, #0]
						lv_roller_set_style(rollertarget[0], LV_ROLLER_STYLE_BG, &style_roller_save);
 800e734:	6820      	ldr	r0, [r4, #0]
 800e736:	4a32      	ldr	r2, [pc, #200]	; (800e800 <ButtonEventTelaRF_1+0x22c>)
 800e738:	2100      	movs	r1, #0
 800e73a:	f00b ff83 	bl	801a644 <lv_roller_set_style>
					    lv_roller_set_style(rollertarget[0], LV_ROLLER_STYLE_SEL, &style_roller_save);
 800e73e:	6820      	ldr	r0, [r4, #0]
 800e740:	4a2f      	ldr	r2, [pc, #188]	; (800e800 <ButtonEventTelaRF_1+0x22c>)
 800e742:	2101      	movs	r1, #1
 800e744:	f00b ff7e 	bl	801a644 <lv_roller_set_style>
					    lv_roller_set_style(rollertarget[1], LV_ROLLER_STYLE_BG, &style_roller_save);
 800e748:	6860      	ldr	r0, [r4, #4]
 800e74a:	4a2d      	ldr	r2, [pc, #180]	; (800e800 <ButtonEventTelaRF_1+0x22c>)
 800e74c:	2100      	movs	r1, #0
 800e74e:	f00b ff79 	bl	801a644 <lv_roller_set_style>
					    lv_roller_set_style(rollertarget[1], LV_ROLLER_STYLE_SEL, &style_roller_save);
 800e752:	6860      	ldr	r0, [r4, #4]
 800e754:	4a2a      	ldr	r2, [pc, #168]	; (800e800 <ButtonEventTelaRF_1+0x22c>)
 800e756:	2101      	movs	r1, #1
 800e758:	f00b ff74 	bl	801a644 <lv_roller_set_style>
 800e75c:	a906      	add	r1, sp, #24
 800e75e:	6820      	ldr	r0, [r4, #0]
 800e760:	2220      	movs	r2, #32
 800e762:	f009 f944 	bl	80179ee <lv_ddlist_get_selected_str>
				        out[0] = buf[0];
 800e766:	f89d 3018 	ldrb.w	r3, [sp, #24]
 800e76a:	6860      	ldr	r0, [r4, #4]
 800e76c:	f88d 3010 	strb.w	r3, [sp, #16]
 800e770:	2220      	movs	r2, #32
 800e772:	a906      	add	r1, sp, #24
 800e774:	f009 f93b 	bl	80179ee <lv_ddlist_get_selected_str>
				        Target_Int = atoi(out);
 800e778:	ad04      	add	r5, sp, #16
				        out[1] = buf[0];
 800e77a:	f89d 3018 	ldrb.w	r3, [sp, #24]
 800e77e:	f88d 3011 	strb.w	r3, [sp, #17]
				        Target_Int = atoi(out);
 800e782:	4628      	mov	r0, r5
				        out[3] = 0;
 800e784:	2300      	movs	r3, #0
 800e786:	f88d 3013 	strb.w	r3, [sp, #19]
				        Target_Int = atoi(out);
 800e78a:	f00c f8ac 	bl	801a8e6 <atoi>
 800e78e:	4b19      	ldr	r3, [pc, #100]	; (800e7f4 <ButtonEventTelaRF_1+0x220>)
				        target = (float)(Target_Int);
 800e790:	ee07 0a90 	vmov	s15, r0
				        Target_Int = atoi(out);
 800e794:	6018      	str	r0, [r3, #0]
				        target = (float)(Target_Int);
 800e796:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e79a:	4b1a      	ldr	r3, [pc, #104]	; (800e804 <ButtonEventTelaRF_1+0x230>)
				        Target_Int = atoi(out);
 800e79c:	4604      	mov	r4, r0
				        target = (float)(Target_Int);
 800e79e:	edc3 7a00 	vstr	s15, [r3]
				        logI("Save TARGET: Digit: %s  Target_Int: %ld target: %0.1fW  B1: %s\n", buf, Target_Int, target, out);
 800e7a2:	ee17 0a90 	vmov	r0, s15
 800e7a6:	9502      	str	r5, [sp, #8]
 800e7a8:	f7f1 fece 	bl	8000548 <__aeabi_f2d>
 800e7ac:	4622      	mov	r2, r4
 800e7ae:	e9cd 0100 	strd	r0, r1, [sp]
 800e7b2:	a906      	add	r1, sp, #24
 800e7b4:	4814      	ldr	r0, [pc, #80]	; (800e808 <ButtonEventTelaRF_1+0x234>)
 800e7b6:	f7f2 ff59 	bl	800166c <logI>
 800e7ba:	e721      	b.n	800e600 <ButtonEventTelaRF_1+0x2c>
					TelaProgRF_1 = 0;
 800e7bc:	4b02      	ldr	r3, [pc, #8]	; (800e7c8 <ButtonEventTelaRF_1+0x1f4>)
 800e7be:	2000      	movs	r0, #0
 800e7c0:	6018      	str	r0, [r3, #0]
					IndiceRF_1 = 0;
 800e7c2:	4b03      	ldr	r3, [pc, #12]	; (800e7d0 <ButtonEventTelaRF_1+0x1fc>)
 800e7c4:	6018      	str	r0, [r3, #0]
 800e7c6:	e72a      	b.n	800e61e <ButtonEventTelaRF_1+0x4a>
 800e7c8:	20005c74 	.word	0x20005c74
 800e7cc:	20005d50 	.word	0x20005d50
 800e7d0:	20005c60 	.word	0x20005c60
 800e7d4:	0802cebe 	.word	0x0802cebe
 800e7d8:	2000bc20 	.word	0x2000bc20
 800e7dc:	20005d74 	.word	0x20005d74
 800e7e0:	0802cee3 	.word	0x0802cee3
 800e7e4:	20005d64 	.word	0x20005d64
 800e7e8:	0802cdf6 	.word	0x0802cdf6
 800e7ec:	20005c5c 	.word	0x20005c5c
 800e7f0:	0802ce17 	.word	0x0802ce17
 800e7f4:	2000000c 	.word	0x2000000c
 800e7f8:	20005e1c 	.word	0x20005e1c
 800e7fc:	0802cf13 	.word	0x0802cf13
 800e800:	20005ed0 	.word	0x20005ed0
 800e804:	2000001c 	.word	0x2000001c
 800e808:	0802cf50 	.word	0x0802cf50

0800e80c <ButtonEventTelaRF_2>:

void ButtonEventTelaRF_2(uint8_t event, uint8_t tipo, uint8_t id)
{
	static uint8_t var = 0;

	if(event == EVT_PBTN_INPUT) {
 800e80c:	2810      	cmp	r0, #16
{
 800e80e:	b538      	push	{r3, r4, r5, lr}
	if(event == EVT_PBTN_INPUT) {
 800e810:	d15a      	bne.n	800e8c8 <ButtonEventTelaRF_2+0xbc>
		if(tipo == PBTN_SCLK) {	// Single Click
 800e812:	2901      	cmp	r1, #1
 800e814:	d158      	bne.n	800e8c8 <ButtonEventTelaRF_2+0xbc>
			switch(id) {
 800e816:	2a03      	cmp	r2, #3
 800e818:	d856      	bhi.n	800e8c8 <ButtonEventTelaRF_2+0xbc>
 800e81a:	e8df f002 	tbb	[pc, r2]
 800e81e:	1d02      	.short	0x1d02
 800e820:	4721      	.short	0x4721
				case KEY_DN:
					if(TelaProgRF_2 == 0) {
 800e822:	4b2a      	ldr	r3, [pc, #168]	; (800e8cc <ButtonEventTelaRF_2+0xc0>)
 800e824:	681a      	ldr	r2, [r3, #0]
 800e826:	b932      	cbnz	r2, 800e836 <ButtonEventTelaRF_2+0x2a>
						lv_event_send(img_fundo_2, LV_EVENT_APPLY, NULL);
 800e828:	4b29      	ldr	r3, [pc, #164]	; (800e8d0 <ButtonEventTelaRF_2+0xc4>)
 800e82a:	2111      	movs	r1, #17
 800e82c:	6818      	ldr	r0, [r3, #0]
					}
					break;
			}
		}
	}
}
 800e82e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
						lv_event_send(img_fundo_2, LV_EVENT_APPLY, NULL);
 800e832:	f000 bf55 	b.w	800f6e0 <lv_event_send>
					else if(TelaProgRF_2 == 1) {
 800e836:	2a01      	cmp	r2, #1
					if(TelaProgRF_2 == 1) {
 800e838:	d146      	bne.n	800e8c8 <ButtonEventTelaRF_2+0xbc>
						var = !var;
 800e83a:	4b26      	ldr	r3, [pc, #152]	; (800e8d4 <ButtonEventTelaRF_2+0xc8>)
 800e83c:	4c26      	ldr	r4, [pc, #152]	; (800e8d8 <ButtonEventTelaRF_2+0xcc>)
 800e83e:	781a      	ldrb	r2, [r3, #0]
 800e840:	2a00      	cmp	r2, #0
 800e842:	bf0c      	ite	eq
 800e844:	2201      	moveq	r2, #1
 800e846:	2200      	movne	r2, #0
 800e848:	701a      	strb	r2, [r3, #0]
						if(var) {
 800e84a:	d115      	bne.n	800e878 <ButtonEventTelaRF_2+0x6c>
							lv_btn_set_state(imgbtn1[0], LV_BTN_STATE_INA);
 800e84c:	2104      	movs	r1, #4
						lv_btn_set_state(imgbtn1[0], LV_BTN_STATE_TGL_REL);
 800e84e:	6820      	ldr	r0, [r4, #0]
 800e850:	f007 fe56 	bl	8016500 <lv_btn_set_state>
						lv_btn_set_state(imgbtn1[1], LV_BTN_STATE_TGL_PR);
 800e854:	2103      	movs	r1, #3
 800e856:	e014      	b.n	800e882 <ButtonEventTelaRF_2+0x76>
					if(TelaProgRF_2 == 1) {
 800e858:	4b1c      	ldr	r3, [pc, #112]	; (800e8cc <ButtonEventTelaRF_2+0xc0>)
 800e85a:	681b      	ldr	r3, [r3, #0]
 800e85c:	2b01      	cmp	r3, #1
 800e85e:	e7eb      	b.n	800e838 <ButtonEventTelaRF_2+0x2c>
					if(TelaProgRF_2 == 0) {
 800e860:	4b1a      	ldr	r3, [pc, #104]	; (800e8cc <ButtonEventTelaRF_2+0xc0>)
 800e862:	681a      	ldr	r2, [r3, #0]
 800e864:	b992      	cbnz	r2, 800e88c <ButtonEventTelaRF_2+0x80>
						TelaProgRF_2 = 1;
 800e866:	2201      	movs	r2, #1
 800e868:	601a      	str	r2, [r3, #0]
						var = RFEnable;
 800e86a:	4b1c      	ldr	r3, [pc, #112]	; (800e8dc <ButtonEventTelaRF_2+0xd0>)
 800e86c:	4a19      	ldr	r2, [pc, #100]	; (800e8d4 <ButtonEventTelaRF_2+0xc8>)
 800e86e:	781b      	ldrb	r3, [r3, #0]
 800e870:	7013      	strb	r3, [r2, #0]
 800e872:	4c19      	ldr	r4, [pc, #100]	; (800e8d8 <ButtonEventTelaRF_2+0xcc>)
						if(var) {
 800e874:	2b00      	cmp	r3, #0
 800e876:	d1e9      	bne.n	800e84c <ButtonEventTelaRF_2+0x40>
							lv_btn_set_state(imgbtn1[0], LV_BTN_STATE_TGL_PR);
 800e878:	2103      	movs	r1, #3
 800e87a:	6820      	ldr	r0, [r4, #0]
 800e87c:	f007 fe40 	bl	8016500 <lv_btn_set_state>
							lv_btn_set_state(imgbtn1[1], LV_BTN_STATE_INA);
 800e880:	2104      	movs	r1, #4
						lv_btn_set_state(imgbtn1[1], LV_BTN_STATE_TGL_REL);
 800e882:	6860      	ldr	r0, [r4, #4]
}
 800e884:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
						lv_btn_set_state(imgbtn1[1], LV_BTN_STATE_TGL_REL);
 800e888:	f007 be3a 	b.w	8016500 <lv_btn_set_state>
					else if(TelaProgRF_2 == 1) {
 800e88c:	2a01      	cmp	r2, #1
 800e88e:	d11b      	bne.n	800e8c8 <ButtonEventTelaRF_2+0xbc>
						logI("Salva RFENABLE %d\n", var);
 800e890:	4c10      	ldr	r4, [pc, #64]	; (800e8d4 <ButtonEventTelaRF_2+0xc8>)
 800e892:	4813      	ldr	r0, [pc, #76]	; (800e8e0 <ButtonEventTelaRF_2+0xd4>)
 800e894:	7821      	ldrb	r1, [r4, #0]
						TelaProgRF_2 = 2;
 800e896:	2502      	movs	r5, #2
 800e898:	601d      	str	r5, [r3, #0]
						logI("Salva RFENABLE %d\n", var);
 800e89a:	f7f2 fee7 	bl	800166c <logI>
						RFEnable = var;
 800e89e:	4a0f      	ldr	r2, [pc, #60]	; (800e8dc <ButtonEventTelaRF_2+0xd0>)
 800e8a0:	7823      	ldrb	r3, [r4, #0]
 800e8a2:	7013      	strb	r3, [r2, #0]
 800e8a4:	4c0c      	ldr	r4, [pc, #48]	; (800e8d8 <ButtonEventTelaRF_2+0xcc>)
					if(RFEnable) {
 800e8a6:	b14b      	cbz	r3, 800e8bc <ButtonEventTelaRF_2+0xb0>
						lv_btn_set_state(imgbtn1[0], LV_BTN_STATE_TGL_REL);
 800e8a8:	2102      	movs	r1, #2
 800e8aa:	e7d0      	b.n	800e84e <ButtonEventTelaRF_2+0x42>
					TelaProgRF_2 = 0;
 800e8ac:	4a07      	ldr	r2, [pc, #28]	; (800e8cc <ButtonEventTelaRF_2+0xc0>)
 800e8ae:	2300      	movs	r3, #0
 800e8b0:	6013      	str	r3, [r2, #0]
					IndiceRF_2 = 0;
 800e8b2:	4a0c      	ldr	r2, [pc, #48]	; (800e8e4 <ButtonEventTelaRF_2+0xd8>)
 800e8b4:	6013      	str	r3, [r2, #0]
					if(RFEnable) {
 800e8b6:	4b09      	ldr	r3, [pc, #36]	; (800e8dc <ButtonEventTelaRF_2+0xd0>)
 800e8b8:	781b      	ldrb	r3, [r3, #0]
 800e8ba:	e7f3      	b.n	800e8a4 <ButtonEventTelaRF_2+0x98>
						lv_btn_set_state(imgbtn1[0], LV_BTN_STATE_TGL_PR);
 800e8bc:	2103      	movs	r1, #3
 800e8be:	6820      	ldr	r0, [r4, #0]
 800e8c0:	f007 fe1e 	bl	8016500 <lv_btn_set_state>
						lv_btn_set_state(imgbtn1[1], LV_BTN_STATE_TGL_REL);
 800e8c4:	2102      	movs	r1, #2
 800e8c6:	e7dc      	b.n	800e882 <ButtonEventTelaRF_2+0x76>
 800e8c8:	bd38      	pop	{r3, r4, r5, pc}
 800e8ca:	bf00      	nop
 800e8cc:	20005c78 	.word	0x20005c78
 800e8d0:	20005d58 	.word	0x20005d58
 800e8d4:	20005f48 	.word	0x20005f48
 800e8d8:	20005d5c 	.word	0x20005d5c
 800e8dc:	20000008 	.word	0x20000008
 800e8e0:	0802cf90 	.word	0x0802cf90
 800e8e4:	20005c64 	.word	0x20005c64

0800e8e8 <btn_event_esc_sel>:
	lv_obj_set_pos(imgbtn1[3], 1, 100);
}

static void btn_event_esc_sel(lv_obj_t * btn, lv_event_t event)
{
	if(event == LV_EVENT_APPLY) {
 800e8e8:	2911      	cmp	r1, #17
{
 800e8ea:	b508      	push	{r3, lr}
	if(event == LV_EVENT_APPLY) {
 800e8ec:	d109      	bne.n	800e902 <btn_event_esc_sel+0x1a>
		uint32_t id = lv_obj_get_user_data(btn);
 800e8ee:	f001 fe48 	bl	8010582 <lv_obj_get_user_data>
		lv_obj_del(Tela_Sel);
 800e8f2:	4b04      	ldr	r3, [pc, #16]	; (800e904 <btn_event_esc_sel+0x1c>)
 800e8f4:	6818      	ldr	r0, [r3, #0]
 800e8f6:	f001 fc5e 	bl	80101b6 <lv_obj_del>
		main_screen();
	}
}
 800e8fa:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		main_screen();
 800e8fe:	f7f9 bcd5 	b.w	80082ac <main_screen>
 800e902:	bd08      	pop	{r3, pc}
 800e904:	20005f4c 	.word	0x20005f4c

0800e908 <btn_event_btn1>:
	}
}

static void btn_event_btn1(lv_obj_t * btn, lv_event_t event)
{
	if(event == LV_EVENT_APPLY) {
 800e908:	2911      	cmp	r1, #17
{
 800e90a:	b510      	push	{r4, lr}
	if(event == LV_EVENT_APPLY) {
 800e90c:	d11c      	bne.n	800e948 <btn_event_btn1+0x40>
		uint32_t id = lv_obj_get_user_data(btn);
 800e90e:	f001 fe38 	bl	8010582 <lv_obj_get_user_data>
		lv_obj_del(Tela_Sel);
 800e912:	4b0e      	ldr	r3, [pc, #56]	; (800e94c <btn_event_btn1+0x44>)
		uint32_t id = lv_obj_get_user_data(btn);
 800e914:	4604      	mov	r4, r0
		lv_obj_del(Tela_Sel);
 800e916:	6818      	ldr	r0, [r3, #0]
 800e918:	f001 fc4d 	bl	80101b6 <lv_obj_del>
		switch(id) {
 800e91c:	2c03      	cmp	r4, #3
 800e91e:	d813      	bhi.n	800e948 <btn_event_btn1+0x40>
 800e920:	e8df f004 	tbb	[pc, r4]
 800e924:	0e0a0602 	.word	0x0e0a0602
			case 3:
				screen_readings();
				break;
		}
	}
}
 800e928:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
				screen_freq();
 800e92c:	f7fc bd78 	b.w	800b420 <screen_freq>
}
 800e930:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
				screen_audio();
 800e934:	f7fb b8a6 	b.w	8009a84 <screen_audio>
}
 800e938:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
				screen_rf();
 800e93c:	f7ff bac2 	b.w	800dec4 <screen_rf>
}
 800e940:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
				screen_readings();
 800e944:	f7fe bc94 	b.w	800d270 <screen_readings>
 800e948:	bd10      	pop	{r4, pc}
 800e94a:	bf00      	nop
 800e94c:	20005f4c 	.word	0x20005f4c

0800e950 <create_buttons>:
{
 800e950:	b570      	push	{r4, r5, r6, lr}
	imgbtn1[0] = lv_imgbtn_create(Tela_Sel, NULL);
 800e952:	4e64      	ldr	r6, [pc, #400]	; (800eae4 <create_buttons+0x194>)
 800e954:	4c64      	ldr	r4, [pc, #400]	; (800eae8 <create_buttons+0x198>)
 800e956:	6830      	ldr	r0, [r6, #0]
	lv_imgbtn_set_src(imgbtn1[0], LV_BTN_STATE_REL, &Btn_Frequency);
 800e958:	4d64      	ldr	r5, [pc, #400]	; (800eaec <create_buttons+0x19c>)
	imgbtn1[0] = lv_imgbtn_create(Tela_Sel, NULL);
 800e95a:	2100      	movs	r1, #0
 800e95c:	f009 fc5c 	bl	8018218 <lv_imgbtn_create>
	lv_obj_set_user_data(imgbtn1[0], 0);
 800e960:	2100      	movs	r1, #0
	imgbtn1[0] = lv_imgbtn_create(Tela_Sel, NULL);
 800e962:	6020      	str	r0, [r4, #0]
	lv_obj_set_user_data(imgbtn1[0], 0);
 800e964:	f001 fe0f 	bl	8010586 <lv_obj_set_user_data>
	lv_imgbtn_set_src(imgbtn1[0], LV_BTN_STATE_REL, &Btn_Frequency);
 800e968:	462a      	mov	r2, r5
 800e96a:	6820      	ldr	r0, [r4, #0]
 800e96c:	2100      	movs	r1, #0
 800e96e:	f009 fc9b 	bl	80182a8 <lv_imgbtn_set_src>
	lv_imgbtn_set_src(imgbtn1[0], LV_BTN_STATE_TGL_REL, &Btn_Frequency);
 800e972:	462a      	mov	r2, r5
 800e974:	6820      	ldr	r0, [r4, #0]
 800e976:	2102      	movs	r1, #2
 800e978:	f009 fc96 	bl	80182a8 <lv_imgbtn_set_src>
	lv_imgbtn_set_src(imgbtn1[0], LV_BTN_STATE_TGL_PR, &Btn_Frequency_am);
 800e97c:	6820      	ldr	r0, [r4, #0]
 800e97e:	4a5c      	ldr	r2, [pc, #368]	; (800eaf0 <create_buttons+0x1a0>)
 800e980:	2103      	movs	r1, #3
 800e982:	f009 fc91 	bl	80182a8 <lv_imgbtn_set_src>
	lv_imgbtn_set_src(imgbtn1[0], LV_BTN_STATE_PR, &Btn_Frequency);
 800e986:	462a      	mov	r2, r5
 800e988:	6820      	ldr	r0, [r4, #0]
 800e98a:	2101      	movs	r1, #1
 800e98c:	f009 fc8c 	bl	80182a8 <lv_imgbtn_set_src>
	lv_imgbtn_set_src(imgbtn1[0], LV_BTN_STATE_REL, &Btn_Frequency);
 800e990:	462a      	mov	r2, r5
 800e992:	6820      	ldr	r0, [r4, #0]
 800e994:	2100      	movs	r1, #0
 800e996:	f009 fc87 	bl	80182a8 <lv_imgbtn_set_src>
	lv_imgbtn_set_src(imgbtn1[0], LV_BTN_STATE_INA, &Btn_Frequency);
 800e99a:	462a      	mov	r2, r5
 800e99c:	6820      	ldr	r0, [r4, #0]
	lv_imgbtn_set_src(imgbtn1[1], LV_BTN_STATE_REL, &Btn_Audio);
 800e99e:	4d55      	ldr	r5, [pc, #340]	; (800eaf4 <create_buttons+0x1a4>)
	lv_imgbtn_set_src(imgbtn1[0], LV_BTN_STATE_INA, &Btn_Frequency);
 800e9a0:	2104      	movs	r1, #4
 800e9a2:	f009 fc81 	bl	80182a8 <lv_imgbtn_set_src>
	lv_obj_set_event_cb(imgbtn1[0], btn_event_btn1);
 800e9a6:	6820      	ldr	r0, [r4, #0]
 800e9a8:	4953      	ldr	r1, [pc, #332]	; (800eaf8 <create_buttons+0x1a8>)
 800e9aa:	f000 fe52 	bl	800f652 <lv_obj_set_event_cb>
	lv_group_add_obj(group, imgbtn1[0]);
 800e9ae:	6821      	ldr	r1, [r4, #0]
 800e9b0:	2000      	movs	r0, #0
 800e9b2:	f000 fccb 	bl	800f34c <lv_group_add_obj>
	lv_obj_set_pos(imgbtn1[0], 1, 18);
 800e9b6:	2212      	movs	r2, #18
 800e9b8:	6820      	ldr	r0, [r4, #0]
 800e9ba:	2101      	movs	r1, #1
 800e9bc:	f000 ff93 	bl	800f8e6 <lv_obj_set_pos>
	imgbtn1[1] = lv_imgbtn_create(Tela_Sel, imgbtn1[0]);
 800e9c0:	6821      	ldr	r1, [r4, #0]
 800e9c2:	6830      	ldr	r0, [r6, #0]
 800e9c4:	f009 fc28 	bl	8018218 <lv_imgbtn_create>
	lv_obj_set_user_data(imgbtn1[1], 1);
 800e9c8:	2101      	movs	r1, #1
	imgbtn1[1] = lv_imgbtn_create(Tela_Sel, imgbtn1[0]);
 800e9ca:	6060      	str	r0, [r4, #4]
	lv_obj_set_user_data(imgbtn1[1], 1);
 800e9cc:	f001 fddb 	bl	8010586 <lv_obj_set_user_data>
	lv_imgbtn_set_src(imgbtn1[1], LV_BTN_STATE_REL, &Btn_Audio);
 800e9d0:	462a      	mov	r2, r5
 800e9d2:	6860      	ldr	r0, [r4, #4]
 800e9d4:	2100      	movs	r1, #0
 800e9d6:	f009 fc67 	bl	80182a8 <lv_imgbtn_set_src>
	lv_imgbtn_set_src(imgbtn1[1], LV_BTN_STATE_TGL_REL, &Btn_Audio);
 800e9da:	462a      	mov	r2, r5
 800e9dc:	6860      	ldr	r0, [r4, #4]
 800e9de:	2102      	movs	r1, #2
 800e9e0:	f009 fc62 	bl	80182a8 <lv_imgbtn_set_src>
	lv_imgbtn_set_src(imgbtn1[1], LV_BTN_STATE_TGL_PR, &Btn_Audio_am);
 800e9e4:	6860      	ldr	r0, [r4, #4]
 800e9e6:	4a45      	ldr	r2, [pc, #276]	; (800eafc <create_buttons+0x1ac>)
 800e9e8:	2103      	movs	r1, #3
 800e9ea:	f009 fc5d 	bl	80182a8 <lv_imgbtn_set_src>
	lv_imgbtn_set_src(imgbtn1[1], LV_BTN_STATE_PR, &Btn_Audio);
 800e9ee:	462a      	mov	r2, r5
 800e9f0:	6860      	ldr	r0, [r4, #4]
 800e9f2:	2101      	movs	r1, #1
 800e9f4:	f009 fc58 	bl	80182a8 <lv_imgbtn_set_src>
	lv_imgbtn_set_src(imgbtn1[1], LV_BTN_STATE_REL, &Btn_Audio);
 800e9f8:	462a      	mov	r2, r5
 800e9fa:	6860      	ldr	r0, [r4, #4]
 800e9fc:	2100      	movs	r1, #0
 800e9fe:	f009 fc53 	bl	80182a8 <lv_imgbtn_set_src>
	lv_imgbtn_set_src(imgbtn1[1], LV_BTN_STATE_INA, &Btn_Audio);
 800ea02:	462a      	mov	r2, r5
 800ea04:	6860      	ldr	r0, [r4, #4]
	lv_imgbtn_set_src(imgbtn1[2], LV_BTN_STATE_REL, &Btn_RF);
 800ea06:	4d3e      	ldr	r5, [pc, #248]	; (800eb00 <create_buttons+0x1b0>)
	lv_imgbtn_set_src(imgbtn1[1], LV_BTN_STATE_INA, &Btn_Audio);
 800ea08:	2104      	movs	r1, #4
 800ea0a:	f009 fc4d 	bl	80182a8 <lv_imgbtn_set_src>
	lv_group_add_obj(group, imgbtn1[1]);
 800ea0e:	6861      	ldr	r1, [r4, #4]
 800ea10:	2000      	movs	r0, #0
 800ea12:	f000 fc9b 	bl	800f34c <lv_group_add_obj>
	lv_obj_set_pos(imgbtn1[1], 1, 45);
 800ea16:	222d      	movs	r2, #45	; 0x2d
 800ea18:	6860      	ldr	r0, [r4, #4]
 800ea1a:	2101      	movs	r1, #1
 800ea1c:	f000 ff63 	bl	800f8e6 <lv_obj_set_pos>
	imgbtn1[2] = lv_imgbtn_create(Tela_Sel, imgbtn1[0]);
 800ea20:	6821      	ldr	r1, [r4, #0]
 800ea22:	6830      	ldr	r0, [r6, #0]
 800ea24:	f009 fbf8 	bl	8018218 <lv_imgbtn_create>
	lv_obj_set_user_data(imgbtn1[2], 2);
 800ea28:	2102      	movs	r1, #2
	imgbtn1[2] = lv_imgbtn_create(Tela_Sel, imgbtn1[0]);
 800ea2a:	60a0      	str	r0, [r4, #8]
	lv_obj_set_user_data(imgbtn1[2], 2);
 800ea2c:	f001 fdab 	bl	8010586 <lv_obj_set_user_data>
	lv_imgbtn_set_src(imgbtn1[2], LV_BTN_STATE_REL, &Btn_RF);
 800ea30:	462a      	mov	r2, r5
 800ea32:	68a0      	ldr	r0, [r4, #8]
 800ea34:	2100      	movs	r1, #0
 800ea36:	f009 fc37 	bl	80182a8 <lv_imgbtn_set_src>
	lv_imgbtn_set_src(imgbtn1[2], LV_BTN_STATE_TGL_REL, &Btn_RF);
 800ea3a:	462a      	mov	r2, r5
 800ea3c:	68a0      	ldr	r0, [r4, #8]
 800ea3e:	2102      	movs	r1, #2
 800ea40:	f009 fc32 	bl	80182a8 <lv_imgbtn_set_src>
	lv_imgbtn_set_src(imgbtn1[2], LV_BTN_STATE_TGL_PR, &Btn_RF_am);
 800ea44:	68a0      	ldr	r0, [r4, #8]
 800ea46:	4a2f      	ldr	r2, [pc, #188]	; (800eb04 <create_buttons+0x1b4>)
 800ea48:	2103      	movs	r1, #3
 800ea4a:	f009 fc2d 	bl	80182a8 <lv_imgbtn_set_src>
	lv_imgbtn_set_src(imgbtn1[2], LV_BTN_STATE_PR, &Btn_RF);
 800ea4e:	462a      	mov	r2, r5
 800ea50:	68a0      	ldr	r0, [r4, #8]
 800ea52:	2101      	movs	r1, #1
 800ea54:	f009 fc28 	bl	80182a8 <lv_imgbtn_set_src>
	lv_imgbtn_set_src(imgbtn1[2], LV_BTN_STATE_REL, &Btn_RF);
 800ea58:	462a      	mov	r2, r5
 800ea5a:	68a0      	ldr	r0, [r4, #8]
 800ea5c:	2100      	movs	r1, #0
 800ea5e:	f009 fc23 	bl	80182a8 <lv_imgbtn_set_src>
	lv_imgbtn_set_src(imgbtn1[2], LV_BTN_STATE_INA, &Btn_RF);
 800ea62:	462a      	mov	r2, r5
 800ea64:	68a0      	ldr	r0, [r4, #8]
	lv_imgbtn_set_src(imgbtn1[3], LV_BTN_STATE_REL, &Btn_Readings);
 800ea66:	4d28      	ldr	r5, [pc, #160]	; (800eb08 <create_buttons+0x1b8>)
	lv_imgbtn_set_src(imgbtn1[2], LV_BTN_STATE_INA, &Btn_RF);
 800ea68:	2104      	movs	r1, #4
 800ea6a:	f009 fc1d 	bl	80182a8 <lv_imgbtn_set_src>
	lv_group_add_obj(group, imgbtn1[2]);
 800ea6e:	68a1      	ldr	r1, [r4, #8]
 800ea70:	2000      	movs	r0, #0
 800ea72:	f000 fc6b 	bl	800f34c <lv_group_add_obj>
	lv_obj_set_pos(imgbtn1[2], 1, 73);
 800ea76:	2249      	movs	r2, #73	; 0x49
 800ea78:	68a0      	ldr	r0, [r4, #8]
 800ea7a:	2101      	movs	r1, #1
 800ea7c:	f000 ff33 	bl	800f8e6 <lv_obj_set_pos>
	imgbtn1[3] = lv_imgbtn_create(Tela_Sel, imgbtn1[0]);
 800ea80:	6821      	ldr	r1, [r4, #0]
 800ea82:	6830      	ldr	r0, [r6, #0]
 800ea84:	f009 fbc8 	bl	8018218 <lv_imgbtn_create>
	lv_obj_set_user_data(imgbtn1[3], 3);
 800ea88:	2103      	movs	r1, #3
	imgbtn1[3] = lv_imgbtn_create(Tela_Sel, imgbtn1[0]);
 800ea8a:	60e0      	str	r0, [r4, #12]
	lv_obj_set_user_data(imgbtn1[3], 3);
 800ea8c:	f001 fd7b 	bl	8010586 <lv_obj_set_user_data>
	lv_imgbtn_set_src(imgbtn1[3], LV_BTN_STATE_REL, &Btn_Readings);
 800ea90:	462a      	mov	r2, r5
 800ea92:	68e0      	ldr	r0, [r4, #12]
 800ea94:	2100      	movs	r1, #0
 800ea96:	f009 fc07 	bl	80182a8 <lv_imgbtn_set_src>
	lv_imgbtn_set_src(imgbtn1[3], LV_BTN_STATE_TGL_REL, &Btn_Readings);
 800ea9a:	462a      	mov	r2, r5
 800ea9c:	68e0      	ldr	r0, [r4, #12]
 800ea9e:	2102      	movs	r1, #2
 800eaa0:	f009 fc02 	bl	80182a8 <lv_imgbtn_set_src>
	lv_imgbtn_set_src(imgbtn1[3], LV_BTN_STATE_TGL_PR, &Btn_Readings_am);
 800eaa4:	68e0      	ldr	r0, [r4, #12]
 800eaa6:	4a19      	ldr	r2, [pc, #100]	; (800eb0c <create_buttons+0x1bc>)
 800eaa8:	2103      	movs	r1, #3
 800eaaa:	f009 fbfd 	bl	80182a8 <lv_imgbtn_set_src>
	lv_imgbtn_set_src(imgbtn1[3], LV_BTN_STATE_PR, &Btn_Readings);
 800eaae:	462a      	mov	r2, r5
 800eab0:	68e0      	ldr	r0, [r4, #12]
 800eab2:	2101      	movs	r1, #1
 800eab4:	f009 fbf8 	bl	80182a8 <lv_imgbtn_set_src>
	lv_imgbtn_set_src(imgbtn1[3], LV_BTN_STATE_REL, &Btn_Readings);
 800eab8:	462a      	mov	r2, r5
 800eaba:	68e0      	ldr	r0, [r4, #12]
 800eabc:	2100      	movs	r1, #0
 800eabe:	f009 fbf3 	bl	80182a8 <lv_imgbtn_set_src>
	lv_imgbtn_set_src(imgbtn1[3], LV_BTN_STATE_INA, &Btn_Readings);
 800eac2:	462a      	mov	r2, r5
 800eac4:	68e0      	ldr	r0, [r4, #12]
 800eac6:	2104      	movs	r1, #4
 800eac8:	f009 fbee 	bl	80182a8 <lv_imgbtn_set_src>
	lv_group_add_obj(group, imgbtn1[3]);
 800eacc:	68e1      	ldr	r1, [r4, #12]
 800eace:	2000      	movs	r0, #0
 800ead0:	f000 fc3c 	bl	800f34c <lv_group_add_obj>
	lv_obj_set_pos(imgbtn1[3], 1, 100);
 800ead4:	68e0      	ldr	r0, [r4, #12]
 800ead6:	2264      	movs	r2, #100	; 0x64
 800ead8:	2101      	movs	r1, #1
}
 800eada:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	lv_obj_set_pos(imgbtn1[3], 1, 100);
 800eade:	f000 bf02 	b.w	800f8e6 <lv_obj_set_pos>
 800eae2:	bf00      	nop
 800eae4:	20005f4c 	.word	0x20005f4c
 800eae8:	20005f54 	.word	0x20005f54
 800eaec:	200019c4 	.word	0x200019c4
 800eaf0:	200019d0 	.word	0x200019d0
 800eaf4:	200019ac 	.word	0x200019ac
 800eaf8:	0800e909 	.word	0x0800e909
 800eafc:	200019b8 	.word	0x200019b8
 800eb00:	200019dc 	.word	0x200019dc
 800eb04:	200019e8 	.word	0x200019e8
 800eb08:	200019f4 	.word	0x200019f4
 800eb0c:	20001a00 	.word	0x20001a00

0800eb10 <screen_sel>:
{
 800eb10:	b570      	push	{r4, r5, r6, lr}
	MenuSel = 0;
 800eb12:	4b1d      	ldr	r3, [pc, #116]	; (800eb88 <screen_sel+0x78>)
	Tela_Sel = lv_obj_create(NULL, NULL);
 800eb14:	4e1d      	ldr	r6, [pc, #116]	; (800eb8c <screen_sel+0x7c>)
	img_fundo = lv_img_create(Tela_Sel, NULL);
 800eb16:	4c1e      	ldr	r4, [pc, #120]	; (800eb90 <screen_sel+0x80>)
	MenuSel = 0;
 800eb18:	2500      	movs	r5, #0
	Tela_Sel = lv_obj_create(NULL, NULL);
 800eb1a:	4629      	mov	r1, r5
 800eb1c:	4628      	mov	r0, r5
	MenuSel = 0;
 800eb1e:	701d      	strb	r5, [r3, #0]
	Tela_Sel = lv_obj_create(NULL, NULL);
 800eb20:	f001 f958 	bl	800fdd4 <lv_obj_create>
	img_fundo = lv_img_create(Tela_Sel, NULL);
 800eb24:	4629      	mov	r1, r5
	Tela_Sel = lv_obj_create(NULL, NULL);
 800eb26:	6030      	str	r0, [r6, #0]
	img_fundo = lv_img_create(Tela_Sel, NULL);
 800eb28:	f009 fa4c 	bl	8017fc4 <lv_img_create>
	lv_img_set_src(img_fundo, &tela_sel);
 800eb2c:	4919      	ldr	r1, [pc, #100]	; (800eb94 <screen_sel+0x84>)
	img_fundo = lv_img_create(Tela_Sel, NULL);
 800eb2e:	6020      	str	r0, [r4, #0]
	lv_img_set_src(img_fundo, &tela_sel);
 800eb30:	f009 f9b8 	bl	8017ea4 <lv_img_set_src>
	lv_obj_set_protect(img_fundo, LV_PROTECT_POS);
 800eb34:	6820      	ldr	r0, [r4, #0]
 800eb36:	2104      	movs	r1, #4
 800eb38:	f000 fd7e 	bl	800f638 <lv_obj_set_protect>
	lv_obj_set_user_data(img_fundo, 0);
 800eb3c:	6820      	ldr	r0, [r4, #0]
 800eb3e:	4629      	mov	r1, r5
 800eb40:	f001 fd21 	bl	8010586 <lv_obj_set_user_data>
	lv_obj_set_event_cb(img_fundo, btn_event_esc_sel);
 800eb44:	6820      	ldr	r0, [r4, #0]
 800eb46:	4914      	ldr	r1, [pc, #80]	; (800eb98 <screen_sel+0x88>)
 800eb48:	f000 fd83 	bl	800f652 <lv_obj_set_event_cb>
	lv_obj_set_click(img_fundo, 1);
 800eb4c:	6820      	ldr	r0, [r4, #0]
	lv_btn_set_state(imgbtn1[0], LV_BTN_STATE_TGL_PR);
 800eb4e:	4c13      	ldr	r4, [pc, #76]	; (800eb9c <screen_sel+0x8c>)
	lv_obj_set_click(img_fundo, 1);
 800eb50:	2101      	movs	r1, #1
 800eb52:	f000 fd55 	bl	800f600 <lv_obj_set_click>
	create_buttons();
 800eb56:	f7ff fefb 	bl	800e950 <create_buttons>
	lv_btn_set_state(imgbtn1[0], LV_BTN_STATE_TGL_PR);
 800eb5a:	2103      	movs	r1, #3
 800eb5c:	6820      	ldr	r0, [r4, #0]
 800eb5e:	f007 fccf 	bl	8016500 <lv_btn_set_state>
	lv_btn_set_state(imgbtn1[1], LV_BTN_STATE_TGL_REL);
 800eb62:	2102      	movs	r1, #2
 800eb64:	6860      	ldr	r0, [r4, #4]
 800eb66:	f007 fccb 	bl	8016500 <lv_btn_set_state>
	lv_btn_set_state(imgbtn1[2], LV_BTN_STATE_TGL_REL);
 800eb6a:	2102      	movs	r1, #2
 800eb6c:	68a0      	ldr	r0, [r4, #8]
 800eb6e:	f007 fcc7 	bl	8016500 <lv_btn_set_state>
	lv_btn_set_state(imgbtn1[3], LV_BTN_STATE_TGL_REL);
 800eb72:	2102      	movs	r1, #2
 800eb74:	68e0      	ldr	r0, [r4, #12]
 800eb76:	f007 fcc3 	bl	8016500 <lv_btn_set_state>
 800eb7a:	6830      	ldr	r0, [r6, #0]
 800eb7c:	f000 fb16 	bl	800f1ac <lv_disp_load_scr>
	TelaAtiva = TelaSelecao;
 800eb80:	4b07      	ldr	r3, [pc, #28]	; (800eba0 <screen_sel+0x90>)
 800eb82:	2201      	movs	r2, #1
 800eb84:	601a      	str	r2, [r3, #0]
 800eb86:	bd70      	pop	{r4, r5, r6, pc}
 800eb88:	20003440 	.word	0x20003440
 800eb8c:	20005f4c 	.word	0x20005f4c
 800eb90:	20005f50 	.word	0x20005f50
 800eb94:	20001c7c 	.word	0x20001c7c
 800eb98:	0800e8e9 	.word	0x0800e8e9
 800eb9c:	20005f54 	.word	0x20005f54
 800eba0:	20003444 	.word	0x20003444

0800eba4 <sel_screen_send_button>:
{
 800eba4:	b510      	push	{r4, lr}
	switch(btn) {
 800eba6:	2803      	cmp	r0, #3
 800eba8:	d837      	bhi.n	800ec1a <sel_screen_send_button+0x76>
 800ebaa:	e8df f000 	tbb	[pc, r0]
 800ebae:	1502      	.short	0x1502
 800ebb0:	271c      	.short	0x271c
			lv_btn_set_state(imgbtn1[0], LV_BTN_STATE_TGL_PR);
 800ebb2:	4c1a      	ldr	r4, [pc, #104]	; (800ec1c <sel_screen_send_button+0x78>)
 800ebb4:	2103      	movs	r1, #3
 800ebb6:	6820      	ldr	r0, [r4, #0]
 800ebb8:	f007 fca2 	bl	8016500 <lv_btn_set_state>
			lv_btn_set_state(imgbtn1[1], LV_BTN_STATE_TGL_REL);
 800ebbc:	2102      	movs	r1, #2
			lv_btn_set_state(imgbtn1[1], LV_BTN_STATE_TGL_PR);
 800ebbe:	6860      	ldr	r0, [r4, #4]
 800ebc0:	f007 fc9e 	bl	8016500 <lv_btn_set_state>
			lv_btn_set_state(imgbtn1[2], LV_BTN_STATE_TGL_REL);
 800ebc4:	2102      	movs	r1, #2
 800ebc6:	68a0      	ldr	r0, [r4, #8]
 800ebc8:	f007 fc9a 	bl	8016500 <lv_btn_set_state>
			lv_btn_set_state(imgbtn1[3], LV_BTN_STATE_TGL_REL);
 800ebcc:	2102      	movs	r1, #2
			lv_btn_set_state(imgbtn1[3], LV_BTN_STATE_TGL_PR);
 800ebce:	68e0      	ldr	r0, [r4, #12]
}
 800ebd0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			lv_btn_set_state(imgbtn1[3], LV_BTN_STATE_TGL_PR);
 800ebd4:	f007 bc94 	b.w	8016500 <lv_btn_set_state>
			lv_btn_set_state(imgbtn1[0], LV_BTN_STATE_TGL_REL);
 800ebd8:	4c10      	ldr	r4, [pc, #64]	; (800ec1c <sel_screen_send_button+0x78>)
 800ebda:	2102      	movs	r1, #2
 800ebdc:	6820      	ldr	r0, [r4, #0]
 800ebde:	f007 fc8f 	bl	8016500 <lv_btn_set_state>
			lv_btn_set_state(imgbtn1[1], LV_BTN_STATE_TGL_PR);
 800ebe2:	2103      	movs	r1, #3
 800ebe4:	e7eb      	b.n	800ebbe <sel_screen_send_button+0x1a>
			lv_btn_set_state(imgbtn1[0], LV_BTN_STATE_TGL_REL);
 800ebe6:	4c0d      	ldr	r4, [pc, #52]	; (800ec1c <sel_screen_send_button+0x78>)
 800ebe8:	2102      	movs	r1, #2
 800ebea:	6820      	ldr	r0, [r4, #0]
 800ebec:	f007 fc88 	bl	8016500 <lv_btn_set_state>
			lv_btn_set_state(imgbtn1[1], LV_BTN_STATE_TGL_REL);
 800ebf0:	2102      	movs	r1, #2
 800ebf2:	6860      	ldr	r0, [r4, #4]
 800ebf4:	f007 fc84 	bl	8016500 <lv_btn_set_state>
			lv_btn_set_state(imgbtn1[2], LV_BTN_STATE_TGL_PR);
 800ebf8:	2103      	movs	r1, #3
 800ebfa:	e7e4      	b.n	800ebc6 <sel_screen_send_button+0x22>
			lv_btn_set_state(imgbtn1[0], LV_BTN_STATE_TGL_REL);
 800ebfc:	4c07      	ldr	r4, [pc, #28]	; (800ec1c <sel_screen_send_button+0x78>)
 800ebfe:	2102      	movs	r1, #2
 800ec00:	6820      	ldr	r0, [r4, #0]
 800ec02:	f007 fc7d 	bl	8016500 <lv_btn_set_state>
			lv_btn_set_state(imgbtn1[1], LV_BTN_STATE_TGL_REL);
 800ec06:	2102      	movs	r1, #2
 800ec08:	6860      	ldr	r0, [r4, #4]
 800ec0a:	f007 fc79 	bl	8016500 <lv_btn_set_state>
			lv_btn_set_state(imgbtn1[2], LV_BTN_STATE_TGL_REL);
 800ec0e:	2102      	movs	r1, #2
 800ec10:	68a0      	ldr	r0, [r4, #8]
 800ec12:	f007 fc75 	bl	8016500 <lv_btn_set_state>
			lv_btn_set_state(imgbtn1[3], LV_BTN_STATE_TGL_PR);
 800ec16:	2103      	movs	r1, #3
 800ec18:	e7d9      	b.n	800ebce <sel_screen_send_button+0x2a>
 800ec1a:	bd10      	pop	{r4, pc}
 800ec1c:	20005f54 	.word	0x20005f54

0800ec20 <ButtonEventTelaSelecao>:
	if(event == EVT_PBTN_INPUT) {
 800ec20:	2810      	cmp	r0, #16
{
 800ec22:	b510      	push	{r4, lr}
	if(event == EVT_PBTN_INPUT) {
 800ec24:	d139      	bne.n	800ec9a <ButtonEventTelaSelecao+0x7a>
		if(tipo == PBTN_SCLK) {	// Single Click
 800ec26:	2901      	cmp	r1, #1
 800ec28:	d137      	bne.n	800ec9a <ButtonEventTelaSelecao+0x7a>
			switch(id) {
 800ec2a:	2a03      	cmp	r2, #3
 800ec2c:	d835      	bhi.n	800ec9a <ButtonEventTelaSelecao+0x7a>
 800ec2e:	e8df f002 	tbb	[pc, r2]
 800ec32:	1102      	.short	0x1102
 800ec34:	2c20      	.short	0x2c20
					if(MenuSel >= 1) MenuSel--;
 800ec36:	4c19      	ldr	r4, [pc, #100]	; (800ec9c <ButtonEventTelaSelecao+0x7c>)
 800ec38:	7823      	ldrb	r3, [r4, #0]
 800ec3a:	b10b      	cbz	r3, 800ec40 <ButtonEventTelaSelecao+0x20>
 800ec3c:	3b01      	subs	r3, #1
 800ec3e:	7023      	strb	r3, [r4, #0]
					sel_screen_send_button(MenuSel, LV_BTN_STATE_TGL_PR);
 800ec40:	2103      	movs	r1, #3
 800ec42:	7820      	ldrb	r0, [r4, #0]
 800ec44:	f7ff ffae 	bl	800eba4 <sel_screen_send_button>
					logI("Debug: Tela_Selecao KEY_Down: MenuSel: %ld\n", MenuSel);
 800ec48:	7821      	ldrb	r1, [r4, #0]
 800ec4a:	4815      	ldr	r0, [pc, #84]	; (800eca0 <ButtonEventTelaSelecao+0x80>)
}
 800ec4c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
					logI("Debug: Tela_Selecao KEY_UP: MenuSel: %ld\n", MenuSel);
 800ec50:	f7f2 bd0c 	b.w	800166c <logI>
					MenuSel++;
 800ec54:	4c11      	ldr	r4, [pc, #68]	; (800ec9c <ButtonEventTelaSelecao+0x7c>)
 800ec56:	7823      	ldrb	r3, [r4, #0]
 800ec58:	3301      	adds	r3, #1
 800ec5a:	b2db      	uxtb	r3, r3
					if(MenuSel >= 3) MenuSel = 3;
 800ec5c:	2b02      	cmp	r3, #2
 800ec5e:	bf88      	it	hi
 800ec60:	2303      	movhi	r3, #3
 800ec62:	7023      	strb	r3, [r4, #0]
					sel_screen_send_button(MenuSel, LV_BTN_STATE_TGL_PR);
 800ec64:	2103      	movs	r1, #3
 800ec66:	7820      	ldrb	r0, [r4, #0]
 800ec68:	f7ff ff9c 	bl	800eba4 <sel_screen_send_button>
					logI("Debug: Tela_Selecao KEY_UP: MenuSel: %ld\n", MenuSel);
 800ec6c:	7821      	ldrb	r1, [r4, #0]
 800ec6e:	480d      	ldr	r0, [pc, #52]	; (800eca4 <ButtonEventTelaSelecao+0x84>)
 800ec70:	e7ec      	b.n	800ec4c <ButtonEventTelaSelecao+0x2c>
					lv_event_send(imgbtn1[MenuSel], LV_EVENT_APPLY, &MenuSel);
 800ec72:	4c0a      	ldr	r4, [pc, #40]	; (800ec9c <ButtonEventTelaSelecao+0x7c>)
 800ec74:	4b0c      	ldr	r3, [pc, #48]	; (800eca8 <ButtonEventTelaSelecao+0x88>)
 800ec76:	7820      	ldrb	r0, [r4, #0]
 800ec78:	2111      	movs	r1, #17
 800ec7a:	4622      	mov	r2, r4
 800ec7c:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 800ec80:	f000 fd2e 	bl	800f6e0 <lv_event_send>
					logI("Debug: Tela_Selecao KEY_ENTER: MenuSel: %ld\n", MenuSel);
 800ec84:	7821      	ldrb	r1, [r4, #0]
 800ec86:	4809      	ldr	r0, [pc, #36]	; (800ecac <ButtonEventTelaSelecao+0x8c>)
 800ec88:	e7e0      	b.n	800ec4c <ButtonEventTelaSelecao+0x2c>
					lv_event_send(img_fundo, LV_EVENT_APPLY, NULL);
 800ec8a:	4b09      	ldr	r3, [pc, #36]	; (800ecb0 <ButtonEventTelaSelecao+0x90>)
 800ec8c:	2200      	movs	r2, #0
 800ec8e:	2111      	movs	r1, #17
 800ec90:	6818      	ldr	r0, [r3, #0]
}
 800ec92:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
					lv_event_send(img_fundo, LV_EVENT_APPLY, NULL);
 800ec96:	f000 bd23 	b.w	800f6e0 <lv_event_send>
 800ec9a:	bd10      	pop	{r4, pc}
 800ec9c:	20003440 	.word	0x20003440
 800eca0:	0802d138 	.word	0x0802d138
 800eca4:	0802d164 	.word	0x0802d164
 800eca8:	20005f54 	.word	0x20005f54
 800ecac:	0802d18e 	.word	0x0802d18e
 800ecb0:	20005f50 	.word	0x20005f50

0800ecb4 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800ecb4:	b508      	push	{r3, lr}
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PreTreatment */
  
  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800ecb6:	2200      	movs	r2, #0
 800ecb8:	490e      	ldr	r1, [pc, #56]	; (800ecf4 <MX_USB_DEVICE_Init+0x40>)
 800ecba:	480f      	ldr	r0, [pc, #60]	; (800ecf8 <MX_USB_DEVICE_Init+0x44>)
 800ecbc:	f7f8 fa83 	bl	80071c6 <USBD_Init>
 800ecc0:	b108      	cbz	r0, 800ecc6 <MX_USB_DEVICE_Init+0x12>
  {
    Error_Handler();
 800ecc2:	f7f2 ffe1 	bl	8001c88 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_MSC) != USBD_OK)
 800ecc6:	490d      	ldr	r1, [pc, #52]	; (800ecfc <MX_USB_DEVICE_Init+0x48>)
 800ecc8:	480b      	ldr	r0, [pc, #44]	; (800ecf8 <MX_USB_DEVICE_Init+0x44>)
 800ecca:	f7f8 fa91 	bl	80071f0 <USBD_RegisterClass>
 800ecce:	b108      	cbz	r0, 800ecd4 <MX_USB_DEVICE_Init+0x20>
  {
    Error_Handler();
 800ecd0:	f7f2 ffda 	bl	8001c88 <Error_Handler>
  }
  if (USBD_MSC_RegisterStorage(&hUsbDeviceFS, &USBD_Storage_Interface_fops_FS) != USBD_OK)
 800ecd4:	490a      	ldr	r1, [pc, #40]	; (800ed00 <MX_USB_DEVICE_Init+0x4c>)
 800ecd6:	4808      	ldr	r0, [pc, #32]	; (800ecf8 <MX_USB_DEVICE_Init+0x44>)
 800ecd8:	f7f7 ff0c 	bl	8006af4 <USBD_MSC_RegisterStorage>
 800ecdc:	b108      	cbz	r0, 800ece2 <MX_USB_DEVICE_Init+0x2e>
  {
    Error_Handler();
 800ecde:	f7f2 ffd3 	bl	8001c88 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800ece2:	4805      	ldr	r0, [pc, #20]	; (800ecf8 <MX_USB_DEVICE_Init+0x44>)
 800ece4:	f7f8 fa8b 	bl	80071fe <USBD_Start>
 800ece8:	b118      	cbz	r0, 800ecf2 <MX_USB_DEVICE_Init+0x3e>
    Error_Handler();
  }
  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800ecea:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 800ecee:	f7f2 bfcb 	b.w	8001c88 <Error_Handler>
 800ecf2:	bd08      	pop	{r3, pc}
 800ecf4:	20001c94 	.word	0x20001c94
 800ecf8:	2000bc24 	.word	0x2000bc24
 800ecfc:	20000048 	.word	0x20000048
 800ed00:	20001cf4 	.word	0x20001cf4

0800ed04 <USBD_FS_DeviceDescriptor>:
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800ed04:	2312      	movs	r3, #18
 800ed06:	800b      	strh	r3, [r1, #0]
  return USBD_FS_DeviceDesc;
}
 800ed08:	4800      	ldr	r0, [pc, #0]	; (800ed0c <USBD_FS_DeviceDescriptor+0x8>)
 800ed0a:	4770      	bx	lr
 800ed0c:	20001cc0 	.word	0x20001cc0

0800ed10 <USBD_FS_LangIDStrDescriptor>:
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800ed10:	2304      	movs	r3, #4
 800ed12:	800b      	strh	r3, [r1, #0]
  return USBD_LangIDDesc;
}
 800ed14:	4800      	ldr	r0, [pc, #0]	; (800ed18 <USBD_FS_LangIDStrDescriptor+0x8>)
 800ed16:	4770      	bx	lr
 800ed18:	20001cd4 	.word	0x20001cd4

0800ed1c <USBD_FS_USR_BOSDescriptor>:
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_USR_BOSDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  UNUSED(speed);
  *length = sizeof(USBD_FS_BOSDesc);
 800ed1c:	230c      	movs	r3, #12
 800ed1e:	800b      	strh	r3, [r1, #0]
  return (uint8_t*)USBD_FS_BOSDesc;
}
 800ed20:	4800      	ldr	r0, [pc, #0]	; (800ed24 <USBD_FS_USR_BOSDescriptor+0x8>)
 800ed22:	4770      	bx	lr
 800ed24:	20001cb4 	.word	0x20001cb4

0800ed28 <IntToUnicode>:
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
  uint8_t idx = 0;

  for (idx = 0; idx < len; idx++)
 800ed28:	2300      	movs	r3, #0
{
 800ed2a:	b530      	push	{r4, r5, lr}
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
    }

    value = value << 4;

    pbuf[2 * idx + 1] = 0;
 800ed2c:	461d      	mov	r5, r3
  for (idx = 0; idx < len; idx++)
 800ed2e:	b2dc      	uxtb	r4, r3
 800ed30:	42a2      	cmp	r2, r4
 800ed32:	d800      	bhi.n	800ed36 <IntToUnicode+0xe>
  }
}
 800ed34:	bd30      	pop	{r4, r5, pc}
    if (((value >> 28)) < 0xA)
 800ed36:	0f04      	lsrs	r4, r0, #28
 800ed38:	2c09      	cmp	r4, #9
      pbuf[2 * idx] = (value >> 28) + '0';
 800ed3a:	bf94      	ite	ls
 800ed3c:	3430      	addls	r4, #48	; 0x30
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800ed3e:	3437      	addhi	r4, #55	; 0x37
 800ed40:	f801 4013 	strb.w	r4, [r1, r3, lsl #1]
    pbuf[2 * idx + 1] = 0;
 800ed44:	eb01 0443 	add.w	r4, r1, r3, lsl #1
    value = value << 4;
 800ed48:	0100      	lsls	r0, r0, #4
    pbuf[2 * idx + 1] = 0;
 800ed4a:	7065      	strb	r5, [r4, #1]
 800ed4c:	3301      	adds	r3, #1
 800ed4e:	e7ee      	b.n	800ed2e <IntToUnicode+0x6>

0800ed50 <USBD_FS_SerialStrDescriptor>:
  *length = USB_SIZ_STRING_SERIAL;
 800ed50:	231a      	movs	r3, #26
{
 800ed52:	b510      	push	{r4, lr}
  *length = USB_SIZ_STRING_SERIAL;
 800ed54:	800b      	strh	r3, [r1, #0]
  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800ed56:	4b09      	ldr	r3, [pc, #36]	; (800ed7c <USBD_FS_SerialStrDescriptor+0x2c>)
 800ed58:	6818      	ldr	r0, [r3, #0]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800ed5a:	3308      	adds	r3, #8
  deviceserial0 += deviceserial2;
 800ed5c:	681b      	ldr	r3, [r3, #0]
  if (deviceserial0 != 0)
 800ed5e:	18c0      	adds	r0, r0, r3
 800ed60:	d00a      	beq.n	800ed78 <USBD_FS_SerialStrDescriptor+0x28>
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800ed62:	4b07      	ldr	r3, [pc, #28]	; (800ed80 <USBD_FS_SerialStrDescriptor+0x30>)
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800ed64:	4907      	ldr	r1, [pc, #28]	; (800ed84 <USBD_FS_SerialStrDescriptor+0x34>)
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800ed66:	681c      	ldr	r4, [r3, #0]
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800ed68:	2208      	movs	r2, #8
 800ed6a:	f7ff ffdd 	bl	800ed28 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800ed6e:	2204      	movs	r2, #4
 800ed70:	4905      	ldr	r1, [pc, #20]	; (800ed88 <USBD_FS_SerialStrDescriptor+0x38>)
 800ed72:	4620      	mov	r0, r4
 800ed74:	f7ff ffd8 	bl	800ed28 <IntToUnicode>
}
 800ed78:	4804      	ldr	r0, [pc, #16]	; (800ed8c <USBD_FS_SerialStrDescriptor+0x3c>)
 800ed7a:	bd10      	pop	{r4, pc}
 800ed7c:	1fff7590 	.word	0x1fff7590
 800ed80:	1fff7594 	.word	0x1fff7594
 800ed84:	20001cda 	.word	0x20001cda
 800ed88:	20001cea 	.word	0x20001cea
 800ed8c:	20001cd8 	.word	0x20001cd8

0800ed90 <USBD_FS_ManufacturerStrDescriptor>:
{
 800ed90:	b510      	push	{r4, lr}
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800ed92:	4c04      	ldr	r4, [pc, #16]	; (800eda4 <USBD_FS_ManufacturerStrDescriptor+0x14>)
 800ed94:	4804      	ldr	r0, [pc, #16]	; (800eda8 <USBD_FS_ManufacturerStrDescriptor+0x18>)
 800ed96:	460a      	mov	r2, r1
 800ed98:	4621      	mov	r1, r4
 800ed9a:	f7f8 fd59 	bl	8007850 <USBD_GetString>
}
 800ed9e:	4620      	mov	r0, r4
 800eda0:	bd10      	pop	{r4, pc}
 800eda2:	bf00      	nop
 800eda4:	2000bec0 	.word	0x2000bec0
 800eda8:	080f4e94 	.word	0x080f4e94

0800edac <USBD_FS_ProductStrDescriptor>:
{
 800edac:	b510      	push	{r4, lr}
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800edae:	4c04      	ldr	r4, [pc, #16]	; (800edc0 <USBD_FS_ProductStrDescriptor+0x14>)
 800edb0:	4804      	ldr	r0, [pc, #16]	; (800edc4 <USBD_FS_ProductStrDescriptor+0x18>)
 800edb2:	460a      	mov	r2, r1
 800edb4:	4621      	mov	r1, r4
 800edb6:	f7f8 fd4b 	bl	8007850 <USBD_GetString>
}
 800edba:	4620      	mov	r0, r4
 800edbc:	bd10      	pop	{r4, pc}
 800edbe:	bf00      	nop
 800edc0:	2000bec0 	.word	0x2000bec0
 800edc4:	080f4ea7 	.word	0x080f4ea7

0800edc8 <USBD_FS_ConfigStrDescriptor>:
{
 800edc8:	b510      	push	{r4, lr}
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800edca:	4c04      	ldr	r4, [pc, #16]	; (800eddc <USBD_FS_ConfigStrDescriptor+0x14>)
 800edcc:	4804      	ldr	r0, [pc, #16]	; (800ede0 <USBD_FS_ConfigStrDescriptor+0x18>)
 800edce:	460a      	mov	r2, r1
 800edd0:	4621      	mov	r1, r4
 800edd2:	f7f8 fd3d 	bl	8007850 <USBD_GetString>
}
 800edd6:	4620      	mov	r0, r4
 800edd8:	bd10      	pop	{r4, pc}
 800edda:	bf00      	nop
 800eddc:	2000bec0 	.word	0x2000bec0
 800ede0:	080f4e7b 	.word	0x080f4e7b

0800ede4 <USBD_FS_InterfaceStrDescriptor>:
{
 800ede4:	b510      	push	{r4, lr}
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800ede6:	4c04      	ldr	r4, [pc, #16]	; (800edf8 <USBD_FS_InterfaceStrDescriptor+0x14>)
 800ede8:	4804      	ldr	r0, [pc, #16]	; (800edfc <USBD_FS_InterfaceStrDescriptor+0x18>)
 800edea:	460a      	mov	r2, r1
 800edec:	4621      	mov	r1, r4
 800edee:	f7f8 fd2f 	bl	8007850 <USBD_GetString>
}
 800edf2:	4620      	mov	r0, r4
 800edf4:	bd10      	pop	{r4, pc}
 800edf6:	bf00      	nop
 800edf8:	2000bec0 	.word	0x2000bec0
 800edfc:	080f4e86 	.word	0x080f4e86

0800ee00 <STORAGE_GetCapacity_FS>:
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_GetCapacity_FS(uint8_t lun, uint32_t *block_num, uint16_t *block_size)
{
  /* USER CODE BEGIN 3 */
  *block_num  = STORAGE_BLK_NBR;
 800ee00:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800ee04:	600b      	str	r3, [r1, #0]
  *block_size = STORAGE_BLK_SIZ;
 800ee06:	f44f 7300 	mov.w	r3, #512	; 0x200
 800ee0a:	8013      	strh	r3, [r2, #0]
  return (USBD_OK);
  /* USER CODE END 3 */
}
 800ee0c:	2000      	movs	r0, #0
 800ee0e:	4770      	bx	lr

0800ee10 <STORAGE_IsWriteProtected_FS>:
int8_t STORAGE_IsWriteProtected_FS(uint8_t lun)
{
  /* USER CODE BEGIN 5 */
  return (USBD_OK);
  /* USER CODE END 5 */
}
 800ee10:	2000      	movs	r0, #0
 800ee12:	4770      	bx	lr

0800ee14 <STORAGE_Write_FS>:
int8_t STORAGE_Write_FS(uint8_t lun, uint8_t *buf, uint32_t blk_addr, uint16_t blk_len)
{
  /* USER CODE BEGIN 7 */
  return (USBD_OK);
  /* USER CODE END 7 */
}
 800ee14:	2000      	movs	r0, #0
 800ee16:	4770      	bx	lr

0800ee18 <STORAGE_GetMaxLun_FS>:
int8_t STORAGE_GetMaxLun_FS(void)
{
  /* USER CODE BEGIN 8 */
  return (STORAGE_LUN_NBR - 1);
  /* USER CODE END 8 */
}
 800ee18:	2000      	movs	r0, #0
 800ee1a:	4770      	bx	lr

0800ee1c <STORAGE_Read_FS>:
 800ee1c:	2000      	movs	r0, #0
 800ee1e:	4770      	bx	lr

0800ee20 <STORAGE_Init_FS>:
 800ee20:	2000      	movs	r0, #0
 800ee22:	4770      	bx	lr

0800ee24 <STORAGE_IsReady_FS>:
 800ee24:	2000      	movs	r0, #0
 800ee26:	4770      	bx	lr

0800ee28 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800ee28:	b510      	push	{r4, lr}
 800ee2a:	4604      	mov	r4, r0
 800ee2c:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800ee2e:	2214      	movs	r2, #20
 800ee30:	2100      	movs	r1, #0
 800ee32:	a803      	add	r0, sp, #12
 800ee34:	f00b ffcb 	bl	801adce <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 800ee38:	6823      	ldr	r3, [r4, #0]
 800ee3a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800ee3e:	d13a      	bne.n	800eeb6 <HAL_PCD_MspInit+0x8e>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800ee40:	4c1f      	ldr	r4, [pc, #124]	; (800eec0 <HAL_PCD_MspInit+0x98>)
 800ee42:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 800ee44:	f043 0301 	orr.w	r3, r3, #1
 800ee48:	64e3      	str	r3, [r4, #76]	; 0x4c
 800ee4a:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 800ee4c:	f003 0301 	and.w	r3, r3, #1
 800ee50:	9300      	str	r3, [sp, #0]
 800ee52:	9b00      	ldr	r3, [sp, #0]
    /**USB_OTG_FS GPIO Configuration    
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800ee54:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800ee58:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800ee5a:	2302      	movs	r3, #2
 800ee5c:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800ee5e:	2303      	movs	r3, #3
 800ee60:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800ee62:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800ee64:	230a      	movs	r3, #10
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800ee66:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800ee6a:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800ee6c:	f7f3 ffd2 	bl	8002e14 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800ee70:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 800ee72:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800ee76:	64e3      	str	r3, [r4, #76]	; 0x4c
 800ee78:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 800ee7a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800ee7e:	9301      	str	r3, [sp, #4]
 800ee80:	9b01      	ldr	r3, [sp, #4]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800ee82:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800ee84:	00db      	lsls	r3, r3, #3
 800ee86:	d418      	bmi.n	800eeba <HAL_PCD_MspInit+0x92>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800ee88:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800ee8a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800ee8e:	65a3      	str	r3, [r4, #88]	; 0x58
 800ee90:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800ee92:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800ee96:	9302      	str	r3, [sp, #8]
 800ee98:	9b02      	ldr	r3, [sp, #8]
      HAL_PWREx_EnableVddUSB();
 800ee9a:	f7f4 fe0d 	bl	8003ab8 <HAL_PWREx_EnableVddUSB>
      __HAL_RCC_PWR_CLK_DISABLE();
 800ee9e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800eea0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800eea4:	65a3      	str	r3, [r4, #88]	; 0x58
    {
      HAL_PWREx_EnableVddUSB();
    }

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800eea6:	2200      	movs	r2, #0
 800eea8:	2043      	movs	r0, #67	; 0x43
 800eeaa:	4611      	mov	r1, r2
 800eeac:	f7f3 fea0 	bl	8002bf0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800eeb0:	2043      	movs	r0, #67	; 0x43
 800eeb2:	f7f3 fed1 	bl	8002c58 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800eeb6:	b008      	add	sp, #32
 800eeb8:	bd10      	pop	{r4, pc}
      HAL_PWREx_EnableVddUSB();
 800eeba:	f7f4 fdfd 	bl	8003ab8 <HAL_PWREx_EnableVddUSB>
 800eebe:	e7f2      	b.n	800eea6 <HAL_PCD_MspInit+0x7e>
 800eec0:	40021000 	.word	0x40021000

0800eec4 <HAL_PCD_SetupStageCallback>:
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800eec4:	f500 7171 	add.w	r1, r0, #964	; 0x3c4
 800eec8:	f8d0 0404 	ldr.w	r0, [r0, #1028]	; 0x404
 800eecc:	f7f8 b9ae 	b.w	800722c <USBD_LL_SetupStage>

0800eed0 <HAL_PCD_DataOutStageCallback>:
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800eed0:	231c      	movs	r3, #28
 800eed2:	fb03 0301 	mla	r3, r3, r1, r0
 800eed6:	f8d0 0404 	ldr.w	r0, [r0, #1028]	; 0x404
 800eeda:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 800eede:	f7f8 b9d2 	b.w	8007286 <USBD_LL_DataOutStage>

0800eee2 <HAL_PCD_DataInStageCallback>:
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800eee2:	231c      	movs	r3, #28
 800eee4:	fb03 0301 	mla	r3, r3, r1, r0
 800eee8:	f8d0 0404 	ldr.w	r0, [r0, #1028]	; 0x404
 800eeec:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800eeee:	f7f8 ba04 	b.w	80072fa <USBD_LL_DataInStage>

0800eef2 <HAL_PCD_SOFCallback>:
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800eef2:	f8d0 0404 	ldr.w	r0, [r0, #1028]	; 0x404
 800eef6:	f7f8 ba95 	b.w	8007424 <USBD_LL_SOF>

0800eefa <HAL_PCD_ResetCallback>:
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{ 
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800eefa:	68c3      	ldr	r3, [r0, #12]
 800eefc:	2b02      	cmp	r3, #2
{ 
 800eefe:	b510      	push	{r4, lr}
 800ef00:	4604      	mov	r4, r0
  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800ef02:	d001      	beq.n	800ef08 <HAL_PCD_ResetCallback+0xe>
  {
    Error_Handler();
 800ef04:	f7f2 fec0 	bl	8001c88 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800ef08:	f8d4 0404 	ldr.w	r0, [r4, #1028]	; 0x404
 800ef0c:	2101      	movs	r1, #1
 800ef0e:	f7f8 fa77 	bl	8007400 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800ef12:	f8d4 0404 	ldr.w	r0, [r4, #1028]	; 0x404
}
 800ef16:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800ef1a:	f7f8 ba4a 	b.w	80073b2 <USBD_LL_Reset>
	...

0800ef20 <HAL_PCD_SuspendCallback>:
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800ef20:	6802      	ldr	r2, [r0, #0]
 800ef22:	f8d2 3e00 	ldr.w	r3, [r2, #3584]	; 0xe00
{
 800ef26:	b510      	push	{r4, lr}
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800ef28:	f043 0301 	orr.w	r3, r3, #1
{
 800ef2c:	4604      	mov	r4, r0
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800ef2e:	f8c2 3e00 	str.w	r3, [r2, #3584]	; 0xe00
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800ef32:	f8d0 0404 	ldr.w	r0, [r0, #1028]	; 0x404
 800ef36:	f7f8 fa66 	bl	8007406 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800ef3a:	6a23      	ldr	r3, [r4, #32]
 800ef3c:	b123      	cbz	r3, 800ef48 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800ef3e:	4a03      	ldr	r2, [pc, #12]	; (800ef4c <HAL_PCD_SuspendCallback+0x2c>)
 800ef40:	6913      	ldr	r3, [r2, #16]
 800ef42:	f043 0306 	orr.w	r3, r3, #6
 800ef46:	6113      	str	r3, [r2, #16]
 800ef48:	bd10      	pop	{r4, pc}
 800ef4a:	bf00      	nop
 800ef4c:	e000ed00 	.word	0xe000ed00

0800ef50 <HAL_PCD_ResumeCallback>:
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 800ef50:	6802      	ldr	r2, [r0, #0]
 800ef52:	f8d2 3e00 	ldr.w	r3, [r2, #3584]	; 0xe00
 800ef56:	f023 0301 	bic.w	r3, r3, #1
{
 800ef5a:	b510      	push	{r4, lr}
  __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 800ef5c:	f8c2 3e00 	str.w	r3, [r2, #3584]	; 0xe00

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 800ef60:	6a03      	ldr	r3, [r0, #32]
{
 800ef62:	4604      	mov	r4, r0
  if (hpcd->Init.low_power_enable)
 800ef64:	b133      	cbz	r3, 800ef74 <HAL_PCD_ResumeCallback+0x24>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800ef66:	4a06      	ldr	r2, [pc, #24]	; (800ef80 <HAL_PCD_ResumeCallback+0x30>)
 800ef68:	6913      	ldr	r3, [r2, #16]
 800ef6a:	f023 0306 	bic.w	r3, r3, #6
 800ef6e:	6113      	str	r3, [r2, #16]
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
  SystemClock_Config();
 800ef70:	f7f2 fb8a 	bl	8001688 <SystemClock_Config>
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800ef74:	f8d4 0404 	ldr.w	r0, [r4, #1028]	; 0x404
}
 800ef78:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800ef7c:	f7f8 ba4c 	b.w	8007418 <USBD_LL_Resume>
 800ef80:	e000ed00 	.word	0xe000ed00

0800ef84 <HAL_PCD_ISOOUTIncompleteCallback>:
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800ef84:	f8d0 0404 	ldr.w	r0, [r0, #1028]	; 0x404
 800ef88:	f7f8 ba5a 	b.w	8007440 <USBD_LL_IsoOUTIncomplete>

0800ef8c <HAL_PCD_ISOINIncompleteCallback>:
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800ef8c:	f8d0 0404 	ldr.w	r0, [r0, #1028]	; 0x404
 800ef90:	f7f8 ba54 	b.w	800743c <USBD_LL_IsoINIncomplete>

0800ef94 <HAL_PCD_ConnectCallback>:
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800ef94:	f8d0 0404 	ldr.w	r0, [r0, #1028]	; 0x404
 800ef98:	f7f8 ba54 	b.w	8007444 <USBD_LL_DevConnected>

0800ef9c <HAL_PCD_DisconnectCallback>:
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800ef9c:	f8d0 0404 	ldr.w	r0, [r0, #1028]	; 0x404
 800efa0:	f7f8 ba52 	b.w	8007448 <USBD_LL_DevDisconnected>

0800efa4 <USBD_LL_Init>:
{
 800efa4:	b508      	push	{r3, lr}
  if (pdev->id == DEVICE_FS) {
 800efa6:	7802      	ldrb	r2, [r0, #0]
 800efa8:	bb32      	cbnz	r2, 800eff8 <USBD_LL_Init+0x54>
  hpcd_USB_OTG_FS.pData = pdev;
 800efaa:	4b14      	ldr	r3, [pc, #80]	; (800effc <USBD_LL_Init+0x58>)
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 800efac:	2106      	movs	r1, #6
  hpcd_USB_OTG_FS.pData = pdev;
 800efae:	f8c3 0404 	str.w	r0, [r3, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 800efb2:	f8c0 3298 	str.w	r3, [r0, #664]	; 0x298
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 800efb6:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 800efba:	e883 0003 	stmia.w	r3, {r0, r1}
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800efbe:	2102      	movs	r1, #2
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800efc0:	4618      	mov	r0, r3
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800efc2:	60d9      	str	r1, [r3, #12]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800efc4:	6199      	str	r1, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800efc6:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800efc8:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800efca:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 800efcc:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800efce:	631a      	str	r2, [r3, #48]	; 0x30
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800efd0:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800efd2:	f7f4 f8a8 	bl	8003126 <HAL_PCD_Init>
 800efd6:	b108      	cbz	r0, 800efdc <USBD_LL_Init+0x38>
    Error_Handler( );
 800efd8:	f7f2 fe56 	bl	8001c88 <Error_Handler>
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800efdc:	2180      	movs	r1, #128	; 0x80
 800efde:	4807      	ldr	r0, [pc, #28]	; (800effc <USBD_LL_Init+0x58>)
 800efe0:	f7f4 fd0c 	bl	80039fc <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800efe4:	2240      	movs	r2, #64	; 0x40
 800efe6:	2100      	movs	r1, #0
 800efe8:	4804      	ldr	r0, [pc, #16]	; (800effc <USBD_LL_Init+0x58>)
 800efea:	f7f4 fce6 	bl	80039ba <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800efee:	2280      	movs	r2, #128	; 0x80
 800eff0:	2101      	movs	r1, #1
 800eff2:	4802      	ldr	r0, [pc, #8]	; (800effc <USBD_LL_Init+0x58>)
 800eff4:	f7f4 fce1 	bl	80039ba <HAL_PCDEx_SetTxFiFo>
}
 800eff8:	2000      	movs	r0, #0
 800effa:	bd08      	pop	{r3, pc}
 800effc:	2000c0c0 	.word	0x2000c0c0

0800f000 <USBD_LL_Start>:
{
 800f000:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_Start(pdev->pData);
 800f002:	f8d0 0298 	ldr.w	r0, [r0, #664]	; 0x298
 800f006:	f7f4 f91b 	bl	8003240 <HAL_PCD_Start>
 800f00a:	2803      	cmp	r0, #3
 800f00c:	bf9a      	itte	ls
 800f00e:	4b02      	ldrls	r3, [pc, #8]	; (800f018 <USBD_LL_Start+0x18>)
 800f010:	5c18      	ldrbls	r0, [r3, r0]
 800f012:	2002      	movhi	r0, #2
}
 800f014:	bd08      	pop	{r3, pc}
 800f016:	bf00      	nop
 800f018:	080f4ede 	.word	0x080f4ede

0800f01c <USBD_LL_OpenEP>:
{
 800f01c:	b510      	push	{r4, lr}
 800f01e:	461c      	mov	r4, r3
  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800f020:	f8d0 0298 	ldr.w	r0, [r0, #664]	; 0x298
 800f024:	4613      	mov	r3, r2
 800f026:	4622      	mov	r2, r4
 800f028:	f7f4 fba2 	bl	8003770 <HAL_PCD_EP_Open>
 800f02c:	2803      	cmp	r0, #3
 800f02e:	bf9a      	itte	ls
 800f030:	4b01      	ldrls	r3, [pc, #4]	; (800f038 <USBD_LL_OpenEP+0x1c>)
 800f032:	5c18      	ldrbls	r0, [r3, r0]
 800f034:	2002      	movhi	r0, #2
}
 800f036:	bd10      	pop	{r4, pc}
 800f038:	080f4ede 	.word	0x080f4ede

0800f03c <USBD_LL_CloseEP>:
{
 800f03c:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800f03e:	f8d0 0298 	ldr.w	r0, [r0, #664]	; 0x298
 800f042:	f7f4 fbca 	bl	80037da <HAL_PCD_EP_Close>
 800f046:	2803      	cmp	r0, #3
 800f048:	bf9a      	itte	ls
 800f04a:	4b02      	ldrls	r3, [pc, #8]	; (800f054 <USBD_LL_CloseEP+0x18>)
 800f04c:	5c18      	ldrbls	r0, [r3, r0]
 800f04e:	2002      	movhi	r0, #2
}
 800f050:	bd08      	pop	{r3, pc}
 800f052:	bf00      	nop
 800f054:	080f4ede 	.word	0x080f4ede

0800f058 <USBD_LL_FlushEP>:
{
 800f058:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_Flush(pdev->pData, ep_addr);
 800f05a:	f8d0 0298 	ldr.w	r0, [r0, #664]	; 0x298
 800f05e:	f7f4 fc92 	bl	8003986 <HAL_PCD_EP_Flush>
 800f062:	2803      	cmp	r0, #3
 800f064:	bf9a      	itte	ls
 800f066:	4b02      	ldrls	r3, [pc, #8]	; (800f070 <USBD_LL_FlushEP+0x18>)
 800f068:	5c18      	ldrbls	r0, [r3, r0]
 800f06a:	2002      	movhi	r0, #2
}
 800f06c:	bd08      	pop	{r3, pc}
 800f06e:	bf00      	nop
 800f070:	080f4ede 	.word	0x080f4ede

0800f074 <USBD_LL_StallEP>:
{
 800f074:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800f076:	f8d0 0298 	ldr.w	r0, [r0, #664]	; 0x298
 800f07a:	f7f4 fc19 	bl	80038b0 <HAL_PCD_EP_SetStall>
 800f07e:	2803      	cmp	r0, #3
 800f080:	bf9a      	itte	ls
 800f082:	4b02      	ldrls	r3, [pc, #8]	; (800f08c <USBD_LL_StallEP+0x18>)
 800f084:	5c18      	ldrbls	r0, [r3, r0]
 800f086:	2002      	movhi	r0, #2
}
 800f088:	bd08      	pop	{r3, pc}
 800f08a:	bf00      	nop
 800f08c:	080f4ede 	.word	0x080f4ede

0800f090 <USBD_LL_ClearStallEP>:
{
 800f090:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);  
 800f092:	f8d0 0298 	ldr.w	r0, [r0, #664]	; 0x298
 800f096:	f7f4 fc44 	bl	8003922 <HAL_PCD_EP_ClrStall>
 800f09a:	2803      	cmp	r0, #3
 800f09c:	bf9a      	itte	ls
 800f09e:	4b02      	ldrls	r3, [pc, #8]	; (800f0a8 <USBD_LL_ClearStallEP+0x18>)
 800f0a0:	5c18      	ldrbls	r0, [r3, r0]
 800f0a2:	2002      	movhi	r0, #2
}
 800f0a4:	bd08      	pop	{r3, pc}
 800f0a6:	bf00      	nop
 800f0a8:	080f4ede 	.word	0x080f4ede

0800f0ac <USBD_LL_IsStallEP>:
  if((ep_addr & 0x80) == 0x80)
 800f0ac:	f011 0f80 	tst.w	r1, #128	; 0x80
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800f0b0:	f8d0 3298 	ldr.w	r3, [r0, #664]	; 0x298
 800f0b4:	f04f 021c 	mov.w	r2, #28
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall; 
 800f0b8:	bf1b      	ittet	ne
 800f0ba:	f001 017f 	andne.w	r1, r1, #127	; 0x7f
 800f0be:	fb02 3101 	mlane	r1, r2, r1, r3
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall; 
 800f0c2:	fb02 3101 	mlaeq	r1, r2, r1, r3
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall; 
 800f0c6:	f891 003e 	ldrbne.w	r0, [r1, #62]	; 0x3e
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall; 
 800f0ca:	bf08      	it	eq
 800f0cc:	f891 01fe 	ldrbeq.w	r0, [r1, #510]	; 0x1fe
}
 800f0d0:	4770      	bx	lr
	...

0800f0d4 <USBD_LL_SetUSBAddress>:
{
 800f0d4:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800f0d6:	f8d0 0298 	ldr.w	r0, [r0, #664]	; 0x298
 800f0da:	f7f4 fb35 	bl	8003748 <HAL_PCD_SetAddress>
 800f0de:	2803      	cmp	r0, #3
 800f0e0:	bf9a      	itte	ls
 800f0e2:	4b02      	ldrls	r3, [pc, #8]	; (800f0ec <USBD_LL_SetUSBAddress+0x18>)
 800f0e4:	5c18      	ldrbls	r0, [r3, r0]
 800f0e6:	2002      	movhi	r0, #2
}
 800f0e8:	bd08      	pop	{r3, pc}
 800f0ea:	bf00      	nop
 800f0ec:	080f4ede 	.word	0x080f4ede

0800f0f0 <USBD_LL_Transmit>:
{
 800f0f0:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800f0f2:	f8d0 0298 	ldr.w	r0, [r0, #664]	; 0x298
 800f0f6:	f7f4 fbc0 	bl	800387a <HAL_PCD_EP_Transmit>
 800f0fa:	2803      	cmp	r0, #3
 800f0fc:	bf9a      	itte	ls
 800f0fe:	4b02      	ldrls	r3, [pc, #8]	; (800f108 <USBD_LL_Transmit+0x18>)
 800f100:	5c18      	ldrbls	r0, [r3, r0]
 800f102:	2002      	movhi	r0, #2
}
 800f104:	bd08      	pop	{r3, pc}
 800f106:	bf00      	nop
 800f108:	080f4ede 	.word	0x080f4ede

0800f10c <USBD_LL_PrepareReceive>:
{
 800f10c:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800f10e:	f8d0 0298 	ldr.w	r0, [r0, #664]	; 0x298
 800f112:	f7f4 fb8c 	bl	800382e <HAL_PCD_EP_Receive>
 800f116:	2803      	cmp	r0, #3
 800f118:	bf9a      	itte	ls
 800f11a:	4b02      	ldrls	r3, [pc, #8]	; (800f124 <USBD_LL_PrepareReceive+0x18>)
 800f11c:	5c18      	ldrbls	r0, [r3, r0]
 800f11e:	2002      	movhi	r0, #2
}
 800f120:	bd08      	pop	{r3, pc}
 800f122:	bf00      	nop
 800f124:	080f4ede 	.word	0x080f4ede

0800f128 <USBD_LL_GetRxDataSize>:
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800f128:	f8d0 0298 	ldr.w	r0, [r0, #664]	; 0x298
 800f12c:	f7f4 bb9d 	b.w	800386a <HAL_PCD_EP_GetRxCount>

0800f130 <HAL_PCDEx_LPM_Callback>:
{
 800f130:	b510      	push	{r4, lr}
 800f132:	4604      	mov	r4, r0
  switch (msg)
 800f134:	b111      	cbz	r1, 800f13c <HAL_PCDEx_LPM_Callback+0xc>
 800f136:	2901      	cmp	r1, #1
 800f138:	d016      	beq.n	800f168 <HAL_PCDEx_LPM_Callback+0x38>
 800f13a:	bd10      	pop	{r4, pc}
    if (hpcd->Init.low_power_enable)
 800f13c:	6a03      	ldr	r3, [r0, #32]
 800f13e:	b133      	cbz	r3, 800f14e <HAL_PCDEx_LPM_Callback+0x1e>
  SystemClock_Config();
 800f140:	f7f2 faa2 	bl	8001688 <SystemClock_Config>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800f144:	4a12      	ldr	r2, [pc, #72]	; (800f190 <HAL_PCDEx_LPM_Callback+0x60>)
 800f146:	6913      	ldr	r3, [r2, #16]
 800f148:	f023 0306 	bic.w	r3, r3, #6
 800f14c:	6113      	str	r3, [r2, #16]
    __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 800f14e:	6822      	ldr	r2, [r4, #0]
    USBD_LL_Resume(hpcd->pData);
 800f150:	f8d4 0404 	ldr.w	r0, [r4, #1028]	; 0x404
    __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 800f154:	f8d2 3e00 	ldr.w	r3, [r2, #3584]	; 0xe00
 800f158:	f023 0301 	bic.w	r3, r3, #1
 800f15c:	f8c2 3e00 	str.w	r3, [r2, #3584]	; 0xe00
}
 800f160:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    USBD_LL_Resume(hpcd->pData);
 800f164:	f7f8 b958 	b.w	8007418 <USBD_LL_Resume>
    __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800f168:	6802      	ldr	r2, [r0, #0]
    USBD_LL_Suspend(hpcd->pData);
 800f16a:	f8d0 0404 	ldr.w	r0, [r0, #1028]	; 0x404
    __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800f16e:	f8d2 3e00 	ldr.w	r3, [r2, #3584]	; 0xe00
 800f172:	f043 0301 	orr.w	r3, r3, #1
 800f176:	f8c2 3e00 	str.w	r3, [r2, #3584]	; 0xe00
    USBD_LL_Suspend(hpcd->pData);
 800f17a:	f7f8 f944 	bl	8007406 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 800f17e:	6a23      	ldr	r3, [r4, #32]
 800f180:	b123      	cbz	r3, 800f18c <HAL_PCDEx_LPM_Callback+0x5c>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800f182:	4a03      	ldr	r2, [pc, #12]	; (800f190 <HAL_PCDEx_LPM_Callback+0x60>)
 800f184:	6913      	ldr	r3, [r2, #16]
 800f186:	f043 0306 	orr.w	r3, r3, #6
 800f18a:	6113      	str	r3, [r2, #16]
 800f18c:	bd10      	pop	{r4, pc}
 800f18e:	bf00      	nop
 800f190:	e000ed00 	.word	0xe000ed00

0800f194 <USBD_static_malloc>:
}
 800f194:	4800      	ldr	r0, [pc, #0]	; (800f198 <USBD_static_malloc+0x4>)
 800f196:	4770      	bx	lr
 800f198:	20005f64 	.word	0x20005f64

0800f19c <USBD_static_free>:
{
 800f19c:	4770      	bx	lr

0800f19e <lv_disp_get_scr_act>:
 * @param disp pointer to display which active screen should be get. (NULL to use the default
 * screen)
 * @return pointer to the active screen object (loaded by 'lv_scr_load()')
 */
lv_obj_t * lv_disp_get_scr_act(lv_disp_t * disp)
{
 800f19e:	b508      	push	{r3, lr}
    if(!disp) disp = lv_disp_get_default();
 800f1a0:	b910      	cbnz	r0, 800f1a8 <lv_disp_get_scr_act+0xa>
 800f1a2:	f005 feb7 	bl	8014f14 <lv_disp_get_default>
    if(!disp) {
 800f1a6:	b100      	cbz	r0, 800f1aa <lv_disp_get_scr_act+0xc>
        LV_LOG_WARN("lv_scr_act: no display registered to get its top layer");
        return NULL;
    }

    return disp->act_scr;
 800f1a8:	6b40      	ldr	r0, [r0, #52]	; 0x34
}
 800f1aa:	bd08      	pop	{r3, pc}

0800f1ac <lv_disp_load_scr>:
/**
 * Make a screen active
 * @param scr pointer to a screen
 */
void lv_disp_load_scr(lv_obj_t * scr)
{
 800f1ac:	b510      	push	{r4, lr}
 800f1ae:	4604      	mov	r4, r0
    lv_disp_t * d = lv_obj_get_disp(scr);
 800f1b0:	f000 fb06 	bl	800f7c0 <lv_obj_get_disp>

    d->act_scr = scr;
 800f1b4:	6344      	str	r4, [r0, #52]	; 0x34

    lv_obj_invalidate(scr);
 800f1b6:	4620      	mov	r0, r4
}
 800f1b8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    lv_obj_invalidate(scr);
 800f1bc:	f000 bb26 	b.w	800f80c <lv_obj_invalidate>

0800f1c0 <lv_disp_get_layer_top>:
 * Return with the top layer. (Same on every screen and it is above the normal screen layer)
 * @param disp pointer to display which top layer should be get. (NULL to use the default screen)
 * @return pointer to the top layer object  (transparent screen sized lv_obj)
 */
lv_obj_t * lv_disp_get_layer_top(lv_disp_t * disp)
{
 800f1c0:	b508      	push	{r3, lr}
    if(!disp) disp = lv_disp_get_default();
 800f1c2:	b910      	cbnz	r0, 800f1ca <lv_disp_get_layer_top+0xa>
 800f1c4:	f005 fea6 	bl	8014f14 <lv_disp_get_default>
    if(!disp) {
 800f1c8:	b100      	cbz	r0, 800f1cc <lv_disp_get_layer_top+0xc>
        LV_LOG_WARN("lv_layer_top: no display registered to get its top layer");
        return NULL;
    }

    return disp->top_layer;
 800f1ca:	6b80      	ldr	r0, [r0, #56]	; 0x38
}
 800f1cc:	bd08      	pop	{r3, pc}

0800f1ce <lv_disp_get_layer_sys>:
 * layer)
 * @param disp pointer to display which sys. layer  should be get. (NULL to use the default screen)
 * @return pointer to the sys layer object  (transparent screen sized lv_obj)
 */
lv_obj_t * lv_disp_get_layer_sys(lv_disp_t * disp)
{
 800f1ce:	b508      	push	{r3, lr}
    if(!disp) disp = lv_disp_get_default();
 800f1d0:	b910      	cbnz	r0, 800f1d8 <lv_disp_get_layer_sys+0xa>
 800f1d2:	f005 fe9f 	bl	8014f14 <lv_disp_get_default>
    if(!disp) {
 800f1d6:	b100      	cbz	r0, 800f1da <lv_disp_get_layer_sys+0xc>
        LV_LOG_WARN("lv_layer_sys: no display registered to get its top layer");
        return NULL;
    }

    return disp->sys_layer;
 800f1d8:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
}
 800f1da:	bd08      	pop	{r3, pc}

0800f1dc <obj_to_foreground>:

    if(group->focus_cb) group->focus_cb(group);
}

static void obj_to_foreground(lv_obj_t * obj)
{
 800f1dc:	b510      	push	{r4, lr}
    /*Search for 'top' attribute*/
    lv_obj_t * i        = obj;
    lv_obj_t * last_top = NULL;
 800f1de:	2400      	movs	r4, #0
    while(i != NULL) {
 800f1e0:	b928      	cbnz	r0, 800f1ee <obj_to_foreground+0x12>
        if(i->top != 0) last_top = i;
        i = lv_obj_get_parent(i);
    }

    if(last_top != NULL) {
 800f1e2:	b16c      	cbz	r4, 800f200 <obj_to_foreground+0x24>
        /*Move the last_top object to the foreground*/
        lv_obj_move_foreground(last_top);
 800f1e4:	4620      	mov	r0, r4
    }
}
 800f1e6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        lv_obj_move_foreground(last_top);
 800f1ea:	f000 bb5f 	b.w	800f8ac <lv_obj_move_foreground>
        if(i->top != 0) last_top = i;
 800f1ee:	f890 3030 	ldrb.w	r3, [r0, #48]	; 0x30
 800f1f2:	f013 0f20 	tst.w	r3, #32
 800f1f6:	bf18      	it	ne
 800f1f8:	4604      	movne	r4, r0
        i = lv_obj_get_parent(i);
 800f1fa:	f001 f847 	bl	801028c <lv_obj_get_parent>
 800f1fe:	e7ef      	b.n	800f1e0 <obj_to_foreground+0x4>
 800f200:	bd10      	pop	{r4, pc}

0800f202 <focus_next_core.part.0>:
static void focus_next_core(lv_group_t * group, void * (*begin)(const lv_ll_t *),
 800f202:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    lv_obj_t ** obj_next     = group->obj_focus;
 800f206:	68c5      	ldr	r5, [r0, #12]
static void focus_next_core(lv_group_t * group, void * (*begin)(const lv_ll_t *),
 800f208:	4604      	mov	r4, r0
 800f20a:	4689      	mov	r9, r1
 800f20c:	4692      	mov	sl, r2
    bool can_begin           = true;
 800f20e:	2701      	movs	r7, #1
    lv_obj_t ** obj_sentinel = NULL;
 800f210:	2600      	movs	r6, #0
        if(obj_next == NULL) {
 800f212:	2d00      	cmp	r5, #0
 800f214:	d14d      	bne.n	800f2b2 <focus_next_core.part.0+0xb0>
            if(group->wrap || obj_sentinel == NULL) {
 800f216:	f894 305c 	ldrb.w	r3, [r4, #92]	; 0x5c
 800f21a:	06db      	lsls	r3, r3, #27
 800f21c:	d403      	bmi.n	800f226 <focus_next_core.part.0+0x24>
 800f21e:	2e00      	cmp	r6, #0
 800f220:	d056      	beq.n	800f2d0 <focus_next_core.part.0+0xce>
 800f222:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
                if(!can_begin) return;
 800f226:	2f00      	cmp	r7, #0
 800f228:	d054      	beq.n	800f2d4 <focus_next_core.part.0+0xd2>
                obj_next  = begin(&group->obj_ll);
 800f22a:	4620      	mov	r0, r4
 800f22c:	47c8      	blx	r9
 800f22e:	4605      	mov	r5, r0
        if(obj_sentinel == NULL) {
 800f230:	2e00      	cmp	r6, #0
 800f232:	d13a      	bne.n	800f2aa <focus_next_core.part.0+0xa8>
            if(obj_sentinel == NULL) return; /*Group is empty*/
 800f234:	2d00      	cmp	r5, #0
 800f236:	d04d      	beq.n	800f2d4 <focus_next_core.part.0+0xd2>
 800f238:	462e      	mov	r6, r5
 800f23a:	2700      	movs	r7, #0
        if(!lv_obj_get_hidden(*obj_next)) break;
 800f23c:	6828      	ldr	r0, [r5, #0]
 800f23e:	f001 f931 	bl	80104a4 <lv_obj_get_hidden>
 800f242:	4680      	mov	r8, r0
 800f244:	2800      	cmp	r0, #0
 800f246:	d1e4      	bne.n	800f212 <focus_next_core.part.0+0x10>
    if(obj_next == group->obj_focus) return; /*There's only one visible object and it's already focused*/
 800f248:	68e3      	ldr	r3, [r4, #12]
 800f24a:	42ab      	cmp	r3, r5
 800f24c:	d042      	beq.n	800f2d4 <focus_next_core.part.0+0xd2>
    if(group->obj_focus) {
 800f24e:	b183      	cbz	r3, 800f272 <focus_next_core.part.0+0x70>
        (*group->obj_focus)->signal_cb(*group->obj_focus, LV_SIGNAL_DEFOCUS, NULL);
 800f250:	6818      	ldr	r0, [r3, #0]
 800f252:	4642      	mov	r2, r8
 800f254:	69c3      	ldr	r3, [r0, #28]
 800f256:	2110      	movs	r1, #16
 800f258:	4798      	blx	r3
        lv_res_t res = lv_event_send(*group->obj_focus, LV_EVENT_DEFOCUSED, NULL);
 800f25a:	68e3      	ldr	r3, [r4, #12]
 800f25c:	4642      	mov	r2, r8
 800f25e:	210d      	movs	r1, #13
 800f260:	6818      	ldr	r0, [r3, #0]
 800f262:	f000 fa3d 	bl	800f6e0 <lv_event_send>
        if(res != LV_RES_OK) return;
 800f266:	2801      	cmp	r0, #1
 800f268:	d134      	bne.n	800f2d4 <focus_next_core.part.0+0xd2>
        lv_obj_invalidate(*group->obj_focus);
 800f26a:	68e3      	ldr	r3, [r4, #12]
 800f26c:	6818      	ldr	r0, [r3, #0]
 800f26e:	f000 facd 	bl	800f80c <lv_obj_invalidate>
    (*group->obj_focus)->signal_cb(*group->obj_focus, LV_SIGNAL_FOCUS, NULL);
 800f272:	6828      	ldr	r0, [r5, #0]
    group->obj_focus = obj_next;
 800f274:	60e5      	str	r5, [r4, #12]
    (*group->obj_focus)->signal_cb(*group->obj_focus, LV_SIGNAL_FOCUS, NULL);
 800f276:	69c3      	ldr	r3, [r0, #28]
 800f278:	2200      	movs	r2, #0
 800f27a:	210f      	movs	r1, #15
 800f27c:	4798      	blx	r3
    lv_res_t res = lv_event_send(*group->obj_focus, LV_EVENT_FOCUSED, NULL);
 800f27e:	68e3      	ldr	r3, [r4, #12]
 800f280:	2200      	movs	r2, #0
 800f282:	210c      	movs	r1, #12
 800f284:	6818      	ldr	r0, [r3, #0]
 800f286:	f000 fa2b 	bl	800f6e0 <lv_event_send>
    if(res != LV_RES_OK) return;
 800f28a:	2801      	cmp	r0, #1
 800f28c:	d122      	bne.n	800f2d4 <focus_next_core.part.0+0xd2>
    obj_to_foreground(*group->obj_focus);
 800f28e:	68e3      	ldr	r3, [r4, #12]
 800f290:	6818      	ldr	r0, [r3, #0]
 800f292:	f7ff ffa3 	bl	800f1dc <obj_to_foreground>
    lv_obj_invalidate(*group->obj_focus);
 800f296:	68e3      	ldr	r3, [r4, #12]
 800f298:	6818      	ldr	r0, [r3, #0]
 800f29a:	f000 fab7 	bl	800f80c <lv_obj_invalidate>
    if(group->focus_cb) group->focus_cb(group);
 800f29e:	69a3      	ldr	r3, [r4, #24]
 800f2a0:	b1c3      	cbz	r3, 800f2d4 <focus_next_core.part.0+0xd2>
 800f2a2:	4620      	mov	r0, r4
}
 800f2a4:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    if(group->focus_cb) group->focus_cb(group);
 800f2a8:	4718      	bx	r3
        if(obj_sentinel == NULL) {
 800f2aa:	2700      	movs	r7, #0
        if(obj_next == NULL) continue;
 800f2ac:	2d00      	cmp	r5, #0
 800f2ae:	d1c5      	bne.n	800f23c <focus_next_core.part.0+0x3a>
 800f2b0:	e7b1      	b.n	800f216 <focus_next_core.part.0+0x14>
            obj_next = move(&group->obj_ll, obj_next);
 800f2b2:	4629      	mov	r1, r5
 800f2b4:	4620      	mov	r0, r4
 800f2b6:	47d0      	blx	sl
        if(obj_sentinel == NULL) {
 800f2b8:	2e00      	cmp	r6, #0
 800f2ba:	bf08      	it	eq
 800f2bc:	462e      	moveq	r6, r5
            if(obj_next == obj_sentinel) return;
 800f2be:	42b0      	cmp	r0, r6
            obj_next = move(&group->obj_ll, obj_next);
 800f2c0:	4605      	mov	r5, r0
            if(obj_next == obj_sentinel) return;
 800f2c2:	d1f3      	bne.n	800f2ac <focus_next_core.part.0+0xaa>
 800f2c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
                obj_next  = begin(&group->obj_ll);
 800f2c8:	4620      	mov	r0, r4
 800f2ca:	47c8      	blx	r9
 800f2cc:	4605      	mov	r5, r0
 800f2ce:	e7b1      	b.n	800f234 <focus_next_core.part.0+0x32>
                if(!can_begin) return;
 800f2d0:	2f00      	cmp	r7, #0
 800f2d2:	d1f9      	bne.n	800f2c8 <focus_next_core.part.0+0xc6>
 800f2d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0800f2d8 <lv_group_init>:
    lv_ll_init(&LV_GC_ROOT(_lv_group_ll), sizeof(lv_group_t));
 800f2d8:	2160      	movs	r1, #96	; 0x60
 800f2da:	4801      	ldr	r0, [pc, #4]	; (800f2e0 <lv_group_init+0x8>)
 800f2dc:	f006 b8c4 	b.w	8015468 <lv_ll_init>
 800f2e0:	2000c828 	.word	0x2000c828

0800f2e4 <lv_group_focus_next>:
    if(group->frozen) return;
 800f2e4:	f890 305c 	ldrb.w	r3, [r0, #92]	; 0x5c
 800f2e8:	07db      	lsls	r3, r3, #31
 800f2ea:	d403      	bmi.n	800f2f4 <lv_group_focus_next+0x10>
 800f2ec:	4a02      	ldr	r2, [pc, #8]	; (800f2f8 <lv_group_focus_next+0x14>)
 800f2ee:	4903      	ldr	r1, [pc, #12]	; (800f2fc <lv_group_focus_next+0x18>)
 800f2f0:	f7ff bf87 	b.w	800f202 <focus_next_core.part.0>
 800f2f4:	4770      	bx	lr
 800f2f6:	bf00      	nop
 800f2f8:	08015501 	.word	0x08015501
 800f2fc:	080154f5 	.word	0x080154f5

0800f300 <lv_group_focus_prev>:
 800f300:	f890 305c 	ldrb.w	r3, [r0, #92]	; 0x5c
 800f304:	07db      	lsls	r3, r3, #31
 800f306:	d403      	bmi.n	800f310 <lv_group_focus_prev+0x10>
 800f308:	4a02      	ldr	r2, [pc, #8]	; (800f314 <lv_group_focus_prev+0x14>)
 800f30a:	4903      	ldr	r1, [pc, #12]	; (800f318 <lv_group_focus_prev+0x18>)
 800f30c:	f7ff bf79 	b.w	800f202 <focus_next_core.part.0>
 800f310:	4770      	bx	lr
 800f312:	bf00      	nop
 800f314:	0801550b 	.word	0x0801550b
 800f318:	080154fb 	.word	0x080154fb

0800f31c <lv_group_refocus>:
{
 800f31c:	b538      	push	{r3, r4, r5, lr}
    uint8_t temp_wrap = g->wrap;
 800f31e:	f890 305c 	ldrb.w	r3, [r0, #92]	; 0x5c
 800f322:	f3c3 1500 	ubfx	r5, r3, #4, #1
    g->wrap           = 1;
 800f326:	f043 0310 	orr.w	r3, r3, #16
 800f32a:	f880 305c 	strb.w	r3, [r0, #92]	; 0x5c
    if(g->refocus_policy == LV_GROUP_REFOCUS_POLICY_NEXT)
 800f32e:	071b      	lsls	r3, r3, #28
{
 800f330:	4604      	mov	r4, r0
    if(g->refocus_policy == LV_GROUP_REFOCUS_POLICY_NEXT)
 800f332:	d408      	bmi.n	800f346 <lv_group_refocus+0x2a>
        lv_group_focus_next(g);
 800f334:	f7ff ffd6 	bl	800f2e4 <lv_group_focus_next>
    g->wrap = temp_wrap;
 800f338:	f894 305c 	ldrb.w	r3, [r4, #92]	; 0x5c
 800f33c:	f365 1304 	bfi	r3, r5, #4, #1
 800f340:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
 800f344:	bd38      	pop	{r3, r4, r5, pc}
        lv_group_focus_prev(g);
 800f346:	f7ff ffdb 	bl	800f300 <lv_group_focus_prev>
 800f34a:	e7f5      	b.n	800f338 <lv_group_refocus+0x1c>

0800f34c <lv_group_add_obj>:
{
 800f34c:	b570      	push	{r4, r5, r6, lr}
 800f34e:	460c      	mov	r4, r1
    if(group == NULL) return;
 800f350:	4605      	mov	r5, r0
 800f352:	b328      	cbz	r0, 800f3a0 <lv_group_add_obj+0x54>
    LV_LL_READ(group->obj_ll, obj_i)
 800f354:	f006 f8ce 	bl	80154f4 <lv_ll_get_head>
 800f358:	b978      	cbnz	r0, 800f37a <lv_group_add_obj+0x2e>
    if(obj->group_p) {
 800f35a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800f35c:	b133      	cbz	r3, 800f36c <lv_group_add_obj+0x20>
        if(lv_obj_is_focused(obj)) {
 800f35e:	4620      	mov	r0, r4
 800f360:	f001 f915 	bl	801058e <lv_obj_is_focused>
 800f364:	b110      	cbz	r0, 800f36c <lv_group_add_obj+0x20>
            lv_group_refocus(obj->group_p);
 800f366:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 800f368:	f7ff ffd8 	bl	800f31c <lv_group_refocus>
    obj->group_p     = group;
 800f36c:	62e5      	str	r5, [r4, #44]	; 0x2c
    lv_obj_t ** next = lv_ll_ins_tail(&group->obj_ll);
 800f36e:	4628      	mov	r0, r5
 800f370:	f006 f8a2 	bl	80154b8 <lv_ll_ins_tail>
    lv_mem_assert(next);
 800f374:	4606      	mov	r6, r0
 800f376:	b940      	cbnz	r0, 800f38a <lv_group_add_obj+0x3e>
 800f378:	e7fe      	b.n	800f378 <lv_group_add_obj+0x2c>
        if((*obj_i) == obj) {
 800f37a:	6803      	ldr	r3, [r0, #0]
 800f37c:	42a3      	cmp	r3, r4
 800f37e:	d00f      	beq.n	800f3a0 <lv_group_add_obj+0x54>
    LV_LL_READ(group->obj_ll, obj_i)
 800f380:	4601      	mov	r1, r0
 800f382:	4628      	mov	r0, r5
 800f384:	f006 f8bc 	bl	8015500 <lv_ll_get_next>
 800f388:	e7e6      	b.n	800f358 <lv_group_add_obj+0xc>
    *next = obj;
 800f38a:	6004      	str	r4, [r0, #0]
    if(lv_ll_get_head(&group->obj_ll) == next) {
 800f38c:	4628      	mov	r0, r5
 800f38e:	f006 f8b1 	bl	80154f4 <lv_ll_get_head>
 800f392:	4286      	cmp	r6, r0
 800f394:	d104      	bne.n	800f3a0 <lv_group_add_obj+0x54>
        lv_group_refocus(group);
 800f396:	4628      	mov	r0, r5
}
 800f398:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        lv_group_refocus(group);
 800f39c:	f7ff bfbe 	b.w	800f31c <lv_group_refocus>
 800f3a0:	bd70      	pop	{r4, r5, r6, pc}

0800f3a2 <lv_group_remove_obj>:
{
 800f3a2:	b570      	push	{r4, r5, r6, lr}
    lv_group_t * g = obj->group_p;
 800f3a4:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
{
 800f3a6:	4606      	mov	r6, r0
    if(g == NULL) return;
 800f3a8:	b304      	cbz	r4, 800f3ec <lv_group_remove_obj+0x4a>
    if(g->obj_focus == NULL) return; /*Just to be sure (Not possible if there is at least one object in the group)*/
 800f3aa:	68e3      	ldr	r3, [r4, #12]
 800f3ac:	b1f3      	cbz	r3, 800f3ec <lv_group_remove_obj+0x4a>
    if(*g->obj_focus == obj) {
 800f3ae:	681b      	ldr	r3, [r3, #0]
 800f3b0:	4298      	cmp	r0, r3
 800f3b2:	d110      	bne.n	800f3d6 <lv_group_remove_obj+0x34>
        if(lv_ll_get_head(&g->obj_ll) == g->obj_focus && lv_ll_get_tail(&g->obj_ll) == g->obj_focus) {
 800f3b4:	4620      	mov	r0, r4
 800f3b6:	f006 f89d 	bl	80154f4 <lv_ll_get_head>
 800f3ba:	68e3      	ldr	r3, [r4, #12]
 800f3bc:	4283      	cmp	r3, r0
 800f3be:	d116      	bne.n	800f3ee <lv_group_remove_obj+0x4c>
 800f3c0:	4620      	mov	r0, r4
 800f3c2:	f006 f89a 	bl	80154fa <lv_ll_get_tail>
 800f3c6:	68e3      	ldr	r3, [r4, #12]
 800f3c8:	4298      	cmp	r0, r3
 800f3ca:	d110      	bne.n	800f3ee <lv_group_remove_obj+0x4c>
            (*g->obj_focus)->signal_cb(*g->obj_focus, LV_SIGNAL_DEFOCUS, NULL);
 800f3cc:	6800      	ldr	r0, [r0, #0]
 800f3ce:	2200      	movs	r2, #0
 800f3d0:	69c3      	ldr	r3, [r0, #28]
 800f3d2:	2110      	movs	r1, #16
 800f3d4:	4798      	blx	r3
    if(*g->obj_focus == obj) {
 800f3d6:	68e3      	ldr	r3, [r4, #12]
 800f3d8:	681b      	ldr	r3, [r3, #0]
 800f3da:	429e      	cmp	r6, r3
        g->obj_focus = NULL;
 800f3dc:	bf04      	itt	eq
 800f3de:	2300      	moveq	r3, #0
 800f3e0:	60e3      	streq	r3, [r4, #12]
    LV_LL_READ(g->obj_ll, i)
 800f3e2:	4620      	mov	r0, r4
 800f3e4:	f006 f886 	bl	80154f4 <lv_ll_get_head>
 800f3e8:	4605      	mov	r5, r0
 800f3ea:	b920      	cbnz	r0, 800f3f6 <lv_group_remove_obj+0x54>
 800f3ec:	bd70      	pop	{r4, r5, r6, pc}
            lv_group_refocus(g);
 800f3ee:	4620      	mov	r0, r4
 800f3f0:	f7ff ff94 	bl	800f31c <lv_group_refocus>
 800f3f4:	e7ef      	b.n	800f3d6 <lv_group_remove_obj+0x34>
        if(*i == obj) {
 800f3f6:	682b      	ldr	r3, [r5, #0]
 800f3f8:	429e      	cmp	r6, r3
            lv_ll_rem(&g->obj_ll, i);
 800f3fa:	4629      	mov	r1, r5
 800f3fc:	4620      	mov	r0, r4
        if(*i == obj) {
 800f3fe:	d107      	bne.n	800f410 <lv_group_remove_obj+0x6e>
            lv_ll_rem(&g->obj_ll, i);
 800f400:	f006 f8b7 	bl	8015572 <lv_ll_rem>
            lv_mem_free(i);
 800f404:	4628      	mov	r0, r5
 800f406:	f006 f9f3 	bl	80157f0 <lv_mem_free>
            obj->group_p = NULL;
 800f40a:	2300      	movs	r3, #0
 800f40c:	62f3      	str	r3, [r6, #44]	; 0x2c
            break;
 800f40e:	bd70      	pop	{r4, r5, r6, pc}
    LV_LL_READ(g->obj_ll, i)
 800f410:	f006 f876 	bl	8015500 <lv_ll_get_next>
 800f414:	e7e8      	b.n	800f3e8 <lv_group_remove_obj+0x46>

0800f416 <lv_group_mod_style>:
{
 800f416:	b538      	push	{r3, r4, r5, lr}
 800f418:	4604      	mov	r4, r0
    lv_style_copy(&group->style_tmp, style);
 800f41a:	f100 051c 	add.w	r5, r0, #28
 800f41e:	4628      	mov	r0, r5
 800f420:	f001 fc22 	bl	8010c68 <lv_style_copy>
    if(group->editing) {
 800f424:	f894 305c 	ldrb.w	r3, [r4, #92]	; 0x5c
 800f428:	079b      	lsls	r3, r3, #30
        if(group->style_mod_edit_cb) group->style_mod_edit_cb(group, &group->style_tmp);
 800f42a:	bf4c      	ite	mi
 800f42c:	6963      	ldrmi	r3, [r4, #20]
        if(group->style_mod_cb) group->style_mod_cb(group, &group->style_tmp);
 800f42e:	6923      	ldrpl	r3, [r4, #16]
 800f430:	b113      	cbz	r3, 800f438 <lv_group_mod_style+0x22>
 800f432:	4629      	mov	r1, r5
 800f434:	4620      	mov	r0, r4
 800f436:	4798      	blx	r3
}
 800f438:	4628      	mov	r0, r5
 800f43a:	bd38      	pop	{r3, r4, r5, pc}

0800f43c <lv_group_get_focused>:
    if(!group) return NULL;
 800f43c:	b110      	cbz	r0, 800f444 <lv_group_get_focused+0x8>
    if(group->obj_focus == NULL) return NULL;
 800f43e:	68c0      	ldr	r0, [r0, #12]
 800f440:	b100      	cbz	r0, 800f444 <lv_group_get_focused+0x8>
    return *group->obj_focus;
 800f442:	6800      	ldr	r0, [r0, #0]
}
 800f444:	4770      	bx	lr

0800f446 <lv_group_set_editing>:
{
 800f446:	b538      	push	{r3, r4, r5, lr}
    if(en_val == group->editing) return; /*Do not set the same mode again*/
 800f448:	f890 305c 	ldrb.w	r3, [r0, #92]	; 0x5c
 800f44c:	f3c3 0240 	ubfx	r2, r3, #1, #1
 800f450:	428a      	cmp	r2, r1
{
 800f452:	4604      	mov	r4, r0
    if(en_val == group->editing) return; /*Do not set the same mode again*/
 800f454:	d018      	beq.n	800f488 <lv_group_set_editing+0x42>
    group->editing     = en_val;
 800f456:	f361 0341 	bfi	r3, r1, #1, #1
 800f45a:	f880 305c 	strb.w	r3, [r0, #92]	; 0x5c
    lv_obj_t * focused = lv_group_get_focused(group);
 800f45e:	f7ff ffed 	bl	800f43c <lv_group_get_focused>
    if(focused) {
 800f462:	4605      	mov	r5, r0
 800f464:	b920      	cbnz	r0, 800f470 <lv_group_set_editing+0x2a>
    lv_obj_invalidate(focused);
 800f466:	4628      	mov	r0, r5
}
 800f468:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    lv_obj_invalidate(focused);
 800f46c:	f000 b9ce 	b.w	800f80c <lv_obj_invalidate>
        focused->signal_cb(focused, LV_SIGNAL_FOCUS, NULL); /*Focus again to properly leave/open edit/navigate mode*/
 800f470:	69c3      	ldr	r3, [r0, #28]
 800f472:	2200      	movs	r2, #0
 800f474:	210f      	movs	r1, #15
 800f476:	4798      	blx	r3
        lv_res_t res = lv_event_send(*group->obj_focus, LV_EVENT_FOCUSED, NULL);
 800f478:	68e3      	ldr	r3, [r4, #12]
 800f47a:	2200      	movs	r2, #0
 800f47c:	210c      	movs	r1, #12
 800f47e:	6818      	ldr	r0, [r3, #0]
 800f480:	f000 f92e 	bl	800f6e0 <lv_event_send>
        if(res != LV_RES_OK) return;
 800f484:	2801      	cmp	r0, #1
 800f486:	d0ee      	beq.n	800f466 <lv_group_set_editing+0x20>
 800f488:	bd38      	pop	{r3, r4, r5, pc}

0800f48a <lv_group_get_editing>:
    if(!group) return false;
 800f48a:	b118      	cbz	r0, 800f494 <lv_group_get_editing+0xa>
    return group->editing ? true : false;
 800f48c:	f890 005c 	ldrb.w	r0, [r0, #92]	; 0x5c
 800f490:	f3c0 0040 	ubfx	r0, r0, #1, #1
}
 800f494:	4770      	bx	lr

0800f496 <lv_indev_reset.part.1>:
}
/**
 * Reset one or all input devices
 * @param indev pointer to an input device to reset or NULL to reset all of them
 */
void lv_indev_reset(lv_indev_t * indev)
 800f496:	b508      	push	{r3, lr}
{
    if(indev)
        indev->proc.reset_query = 1;
    else {
        lv_indev_t * i = lv_indev_get_next(NULL);
 800f498:	2000      	movs	r0, #0
        while(i) {
            i->proc.reset_query = 1;

            i = lv_indev_get_next(i);
 800f49a:	f005 fd95 	bl	8014fc8 <lv_indev_get_next>
        while(i) {
 800f49e:	b900      	cbnz	r0, 800f4a2 <lv_indev_reset.part.1+0xc>
        }
    }
}
 800f4a0:	bd08      	pop	{r3, pc}
            i->proc.reset_query = 1;
 800f4a2:	f890 3050 	ldrb.w	r3, [r0, #80]	; 0x50
 800f4a6:	f043 0302 	orr.w	r3, r3, #2
 800f4aa:	f880 3050 	strb.w	r3, [r0, #80]	; 0x50
 800f4ae:	e7f4      	b.n	800f49a <lv_indev_reset.part.1+0x4>

0800f4b0 <lv_indev_init>:
{
 800f4b0:	f7ff bff1 	b.w	800f496 <lv_indev_reset.part.1>

0800f4b4 <lv_indev_get_act>:
}
 800f4b4:	4b01      	ldr	r3, [pc, #4]	; (800f4bc <lv_indev_get_act+0x8>)
 800f4b6:	6818      	ldr	r0, [r3, #0]
 800f4b8:	4770      	bx	lr
 800f4ba:	bf00      	nop
 800f4bc:	200061d4 	.word	0x200061d4

0800f4c0 <lv_indev_get_type>:
    if(indev == NULL) return LV_INDEV_TYPE_NONE;
 800f4c0:	b100      	cbz	r0, 800f4c4 <lv_indev_get_type+0x4>
    return indev->driver.type;
 800f4c2:	7800      	ldrb	r0, [r0, #0]
}
 800f4c4:	4770      	bx	lr

0800f4c6 <lv_indev_reset>:
    if(indev)
 800f4c6:	b130      	cbz	r0, 800f4d6 <lv_indev_reset+0x10>
        indev->proc.reset_query = 1;
 800f4c8:	f890 3050 	ldrb.w	r3, [r0, #80]	; 0x50
 800f4cc:	f043 0302 	orr.w	r3, r3, #2
 800f4d0:	f880 3050 	strb.w	r3, [r0, #80]	; 0x50
 800f4d4:	4770      	bx	lr
 800f4d6:	f7ff bfde 	b.w	800f496 <lv_indev_reset.part.1>

0800f4da <lv_indev_get_point>:
 * @param indev pointer to an input device
 * @param point pointer to a point to store the result
 */
void lv_indev_get_point(const lv_indev_t * indev, lv_point_t * point)
{
    if(indev->driver.type != LV_INDEV_TYPE_POINTER && indev->driver.type != LV_INDEV_TYPE_BUTTON) {
 800f4da:	7803      	ldrb	r3, [r0, #0]
 800f4dc:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
 800f4e0:	2b01      	cmp	r3, #1
        point->x = -1;
        point->y = -1;
    } else {
        point->x = indev->proc.types.pointer.act_point.x;
 800f4e2:	bf05      	ittet	eq
 800f4e4:	f9b0 3024 	ldrsheq.w	r3, [r0, #36]	; 0x24
 800f4e8:	800b      	strheq	r3, [r1, #0]
        point->x = -1;
 800f4ea:	f64f 73ff 	movwne	r3, #65535	; 0xffff
        point->y = indev->proc.types.pointer.act_point.y;
 800f4ee:	f9b0 3026 	ldrsheq.w	r3, [r0, #38]	; 0x26
        point->x = -1;
 800f4f2:	bf18      	it	ne
 800f4f4:	800b      	strhne	r3, [r1, #0]
        point->y = indev->proc.types.pointer.act_point.y;
 800f4f6:	804b      	strh	r3, [r1, #2]
 800f4f8:	4770      	bx	lr

0800f4fa <lv_indev_is_dragging>:
 * @param indev pointer to an input device
 * @return true: drag is in progress
 */
bool lv_indev_is_dragging(const lv_indev_t * indev)
{
    if(indev == NULL) return false;
 800f4fa:	b150      	cbz	r0, 800f512 <lv_indev_is_dragging+0x18>
    if(indev->driver.type != LV_INDEV_TYPE_POINTER && indev->driver.type != LV_INDEV_TYPE_BUTTON) return false;
 800f4fc:	7803      	ldrb	r3, [r0, #0]
 800f4fe:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
 800f502:	2b01      	cmp	r3, #1
 800f504:	d104      	bne.n	800f510 <lv_indev_is_dragging+0x16>
    return indev->proc.types.pointer.drag_in_prog == 0 ? false : true;
 800f506:	f890 0044 	ldrb.w	r0, [r0, #68]	; 0x44
 800f50a:	f3c0 0040 	ubfx	r0, r0, #1, #1
 800f50e:	4770      	bx	lr
    if(indev == NULL) return false;
 800f510:	2000      	movs	r0, #0
}
 800f512:	4770      	bx	lr

0800f514 <lv_indev_get_vect>:
 * @param indev pointer to an input device
 * @param point pointer to a point to store the types.pointer.vector
 */
void lv_indev_get_vect(const lv_indev_t * indev, lv_point_t * point)
{
    if(indev == NULL) {
 800f514:	b918      	cbnz	r0, 800f51e <lv_indev_get_vect+0xa>
        point->x = 0;
 800f516:	2300      	movs	r3, #0
 800f518:	800b      	strh	r3, [r1, #0]
    if(indev->driver.type != LV_INDEV_TYPE_POINTER && indev->driver.type != LV_INDEV_TYPE_BUTTON) {
        point->x = 0;
        point->y = 0;
    } else {
        point->x = indev->proc.types.pointer.vect.x;
        point->y = indev->proc.types.pointer.vect.y;
 800f51a:	804b      	strh	r3, [r1, #2]
 800f51c:	4770      	bx	lr
    if(indev->driver.type != LV_INDEV_TYPE_POINTER && indev->driver.type != LV_INDEV_TYPE_BUTTON) {
 800f51e:	7803      	ldrb	r3, [r0, #0]
 800f520:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
 800f524:	2b01      	cmp	r3, #1
 800f526:	d1f6      	bne.n	800f516 <lv_indev_get_vect+0x2>
        point->x = indev->proc.types.pointer.vect.x;
 800f528:	f9b0 302c 	ldrsh.w	r3, [r0, #44]	; 0x2c
 800f52c:	800b      	strh	r3, [r1, #0]
        point->y = indev->proc.types.pointer.vect.y;
 800f52e:	f9b0 302e 	ldrsh.w	r3, [r0, #46]	; 0x2e
 800f532:	e7f2      	b.n	800f51a <lv_indev_get_vect+0x6>

0800f534 <lv_indev_get_obj_act>:
 * @return pointer to currently active object or NULL if no active object
 */
lv_obj_t * lv_indev_get_obj_act(void)
{
    return indev_obj_act;
}
 800f534:	4b01      	ldr	r3, [pc, #4]	; (800f53c <lv_indev_get_obj_act+0x8>)
 800f536:	6818      	ldr	r0, [r3, #0]
 800f538:	4770      	bx	lr
 800f53a:	bf00      	nop
 800f53c:	200061d8 	.word	0x200061d8

0800f540 <lv_event_mark_deleted>:
    lv_mem_free(obj); /*Free the object itself*/
}

static void lv_event_mark_deleted(lv_obj_t * obj)
{
    lv_event_temp_data_t * t = event_temp_data_head;
 800f540:	4b05      	ldr	r3, [pc, #20]	; (800f558 <lv_event_mark_deleted+0x18>)
 800f542:	681b      	ldr	r3, [r3, #0]

    while(t) {
        if(t->obj == obj) t->deleted = true;
 800f544:	2201      	movs	r2, #1
    while(t) {
 800f546:	b903      	cbnz	r3, 800f54a <lv_event_mark_deleted+0xa>
        t = t->prev;
    }
}
 800f548:	4770      	bx	lr
        if(t->obj == obj) t->deleted = true;
 800f54a:	6819      	ldr	r1, [r3, #0]
 800f54c:	4281      	cmp	r1, r0
 800f54e:	bf08      	it	eq
 800f550:	711a      	strbeq	r2, [r3, #4]
        t = t->prev;
 800f552:	689b      	ldr	r3, [r3, #8]
 800f554:	e7f7      	b.n	800f546 <lv_event_mark_deleted+0x6>
 800f556:	bf00      	nop
 800f558:	200061e0 	.word	0x200061e0

0800f55c <refresh_children_position>:
{
 800f55c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    LV_LL_READ(obj->child_ll, i)
 800f560:	1d05      	adds	r5, r0, #4
 800f562:	4628      	mov	r0, r5
{
 800f564:	460e      	mov	r6, r1
 800f566:	4617      	mov	r7, r2
    LV_LL_READ(obj->child_ll, i)
 800f568:	f005 ffc4 	bl	80154f4 <lv_ll_get_head>
        i->coords.x1 += x_diff;
 800f56c:	fa1f f886 	uxth.w	r8, r6
    LV_LL_READ(obj->child_ll, i)
 800f570:	4604      	mov	r4, r0
        i->coords.y1 += y_diff;
 800f572:	fa1f f987 	uxth.w	r9, r7
    LV_LL_READ(obj->child_ll, i)
 800f576:	b90c      	cbnz	r4, 800f57c <refresh_children_position+0x20>
}
 800f578:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        i->coords.x1 += x_diff;
 800f57c:	8a23      	ldrh	r3, [r4, #16]
 800f57e:	4443      	add	r3, r8
 800f580:	8223      	strh	r3, [r4, #16]
        i->coords.y1 += y_diff;
 800f582:	8a63      	ldrh	r3, [r4, #18]
 800f584:	444b      	add	r3, r9
 800f586:	8263      	strh	r3, [r4, #18]
        i->coords.x2 += x_diff;
 800f588:	8aa3      	ldrh	r3, [r4, #20]
 800f58a:	4443      	add	r3, r8
 800f58c:	82a3      	strh	r3, [r4, #20]
        i->coords.y2 += y_diff;
 800f58e:	8ae3      	ldrh	r3, [r4, #22]
 800f590:	444b      	add	r3, r9
 800f592:	82e3      	strh	r3, [r4, #22]
        refresh_children_position(i, x_diff, y_diff);
 800f594:	4620      	mov	r0, r4
 800f596:	463a      	mov	r2, r7
 800f598:	4631      	mov	r1, r6
 800f59a:	f7ff ffdf 	bl	800f55c <refresh_children_position>
    LV_LL_READ(obj->child_ll, i)
 800f59e:	4621      	mov	r1, r4
 800f5a0:	4628      	mov	r0, r5
 800f5a2:	f005 ffad 	bl	8015500 <lv_ll_get_next>
 800f5a6:	4604      	mov	r4, r0
 800f5a8:	e7e5      	b.n	800f576 <refresh_children_position+0x1a>
	...

0800f5ac <lv_init>:
{
 800f5ac:	b510      	push	{r4, lr}
    if(lv_initialized) {
 800f5ae:	4c11      	ldr	r4, [pc, #68]	; (800f5f4 <lv_init+0x48>)
 800f5b0:	7823      	ldrb	r3, [r4, #0]
 800f5b2:	b9eb      	cbnz	r3, 800f5f0 <lv_init+0x44>
    lv_mem_init();
 800f5b4:	f006 f8d4 	bl	8015760 <lv_mem_init>
    lv_task_core_init();
 800f5b8:	f006 f96e 	bl	8015898 <lv_task_core_init>
    lv_anim_core_init();
 800f5bc:	f005 fdd4 	bl	8015168 <lv_anim_core_init>
    lv_group_init();
 800f5c0:	f7ff fe8a 	bl	800f2d8 <lv_group_init>
    lv_style_init();
 800f5c4:	f001 fb5a 	bl	8010c7c <lv_style_init>
    lv_refr_init();
 800f5c8:	f001 f910 	bl	80107ec <lv_refr_init>
    lv_ll_init(&LV_GC_ROOT(_lv_disp_ll), sizeof(lv_disp_t));
 800f5cc:	f44f 71b4 	mov.w	r1, #360	; 0x168
 800f5d0:	4809      	ldr	r0, [pc, #36]	; (800f5f8 <lv_init+0x4c>)
 800f5d2:	f005 ff49 	bl	8015468 <lv_ll_init>
    lv_ll_init(&LV_GC_ROOT(_lv_indev_ll), sizeof(lv_indev_t));
 800f5d6:	2160      	movs	r1, #96	; 0x60
 800f5d8:	4808      	ldr	r0, [pc, #32]	; (800f5fc <lv_init+0x50>)
 800f5da:	f005 ff45 	bl	8015468 <lv_ll_init>
    lv_indev_init();
 800f5de:	f7ff ff67 	bl	800f4b0 <lv_indev_init>
    lv_img_decoder_init();
 800f5e2:	f005 facb 	bl	8014b7c <lv_img_decoder_init>
    lv_img_cache_set_size(LV_IMG_CACHE_DEF_SIZE);
 800f5e6:	2001      	movs	r0, #1
 800f5e8:	f005 f82c 	bl	8014644 <lv_img_cache_set_size>
    lv_initialized = true;
 800f5ec:	2301      	movs	r3, #1
 800f5ee:	7023      	strb	r3, [r4, #0]
 800f5f0:	bd10      	pop	{r4, pc}
 800f5f2:	bf00      	nop
 800f5f4:	200061e4 	.word	0x200061e4
 800f5f8:	2000c7f0 	.word	0x2000c7f0
 800f5fc:	2000c7e0 	.word	0x2000c7e0

0800f600 <lv_obj_set_click>:
    obj->click = (en == true ? 1 : 0);
 800f600:	f890 3030 	ldrb.w	r3, [r0, #48]	; 0x30
 800f604:	f361 0300 	bfi	r3, r1, #0, #1
 800f608:	f880 3030 	strb.w	r3, [r0, #48]	; 0x30
 800f60c:	4770      	bx	lr

0800f60e <lv_obj_set_drag>:
    if(en == true) lv_obj_set_click(obj, true); /*Drag is useless without enabled clicking*/
 800f60e:	b129      	cbz	r1, 800f61c <lv_obj_set_drag+0xe>
    obj->click = (en == true ? 1 : 0);
 800f610:	f890 3030 	ldrb.w	r3, [r0, #48]	; 0x30
 800f614:	f043 0301 	orr.w	r3, r3, #1
 800f618:	f880 3030 	strb.w	r3, [r0, #48]	; 0x30
    obj->drag = (en == true ? 1 : 0);
 800f61c:	f890 3030 	ldrb.w	r3, [r0, #48]	; 0x30
 800f620:	f361 0341 	bfi	r3, r1, #1, #1
 800f624:	f880 3030 	strb.w	r3, [r0, #48]	; 0x30
 800f628:	4770      	bx	lr

0800f62a <lv_obj_set_drag_throw>:
    obj->drag_throw = (en == true ? 1 : 0);
 800f62a:	f890 3030 	ldrb.w	r3, [r0, #48]	; 0x30
 800f62e:	f361 0382 	bfi	r3, r1, #2, #1
 800f632:	f880 3030 	strb.w	r3, [r0, #48]	; 0x30
 800f636:	4770      	bx	lr

0800f638 <lv_obj_set_protect>:
    obj->protect |= prot;
 800f638:	f890 3032 	ldrb.w	r3, [r0, #50]	; 0x32
 800f63c:	4319      	orrs	r1, r3
 800f63e:	f880 1032 	strb.w	r1, [r0, #50]	; 0x32
 800f642:	4770      	bx	lr

0800f644 <lv_obj_clear_protect>:
    obj->protect &= prot;
 800f644:	f890 3032 	ldrb.w	r3, [r0, #50]	; 0x32
 800f648:	ea23 0101 	bic.w	r1, r3, r1
 800f64c:	f880 1032 	strb.w	r1, [r0, #50]	; 0x32
 800f650:	4770      	bx	lr

0800f652 <lv_obj_set_event_cb>:
    obj->event_cb = event_cb;
 800f652:	6181      	str	r1, [r0, #24]
 800f654:	4770      	bx	lr
	...

0800f658 <lv_event_send_func>:
{
 800f658:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
    if(event_temp_data_head) {
 800f65c:	4c1e      	ldr	r4, [pc, #120]	; (800f6d8 <lv_event_send_func+0x80>)
    event_temp_data.obj     = obj;
 800f65e:	9101      	str	r1, [sp, #4]
{
 800f660:	4698      	mov	r8, r3
    event_temp_data.deleted = false;
 800f662:	2300      	movs	r3, #0
 800f664:	f88d 3008 	strb.w	r3, [sp, #8]
    event_temp_data.prev    = NULL;
 800f668:	9303      	str	r3, [sp, #12]
    if(event_temp_data_head) {
 800f66a:	6823      	ldr	r3, [r4, #0]
{
 800f66c:	4681      	mov	r9, r0
 800f66e:	460d      	mov	r5, r1
 800f670:	4617      	mov	r7, r2
    if(event_temp_data_head) {
 800f672:	b103      	cbz	r3, 800f676 <lv_event_send_func+0x1e>
        event_temp_data.prev = event_temp_data_head;
 800f674:	9303      	str	r3, [sp, #12]
    const void * event_act_data_save = event_act_data;
 800f676:	4e19      	ldr	r6, [pc, #100]	; (800f6dc <lv_event_send_func+0x84>)
    event_temp_data_head = &event_temp_data;
 800f678:	ab01      	add	r3, sp, #4
    const void * event_act_data_save = event_act_data;
 800f67a:	f8d6 a000 	ldr.w	sl, [r6]
    event_temp_data_head = &event_temp_data;
 800f67e:	6023      	str	r3, [r4, #0]
    event_act_data                   = data;
 800f680:	f8c6 8000 	str.w	r8, [r6]
    lv_indev_t * indev_act = lv_indev_get_act();
 800f684:	f7ff ff16 	bl	800f4b4 <lv_indev_get_act>
    if(indev_act) {
 800f688:	b118      	cbz	r0, 800f692 <lv_event_send_func+0x3a>
        if(indev_act->driver.feedback_cb) indev_act->driver.feedback_cb(&indev_act->driver, event);
 800f68a:	6883      	ldr	r3, [r0, #8]
 800f68c:	b10b      	cbz	r3, 800f692 <lv_event_send_func+0x3a>
 800f68e:	4639      	mov	r1, r7
 800f690:	4798      	blx	r3
    if(event_xcb) event_xcb(obj, event);
 800f692:	f1b9 0f00 	cmp.w	r9, #0
 800f696:	d002      	beq.n	800f69e <lv_event_send_func+0x46>
 800f698:	4639      	mov	r1, r7
 800f69a:	4628      	mov	r0, r5
 800f69c:	47c8      	blx	r9
    event_temp_data_head = event_temp_data_head->prev;
 800f69e:	6823      	ldr	r3, [r4, #0]
    event_act_data = event_act_data_save;
 800f6a0:	f8c6 a000 	str.w	sl, [r6]
    event_temp_data_head = event_temp_data_head->prev;
 800f6a4:	689b      	ldr	r3, [r3, #8]
 800f6a6:	6023      	str	r3, [r4, #0]
    if(event_temp_data.deleted) {
 800f6a8:	f89d 3008 	ldrb.w	r3, [sp, #8]
 800f6ac:	b983      	cbnz	r3, 800f6d0 <lv_event_send_func+0x78>
    if(obj) {
 800f6ae:	b18d      	cbz	r5, 800f6d4 <lv_event_send_func+0x7c>
        if(obj->parent_event && obj->par) {
 800f6b0:	f995 3030 	ldrsb.w	r3, [r5, #48]	; 0x30
 800f6b4:	2b00      	cmp	r3, #0
 800f6b6:	da0d      	bge.n	800f6d4 <lv_event_send_func+0x7c>
 800f6b8:	6828      	ldr	r0, [r5, #0]
 800f6ba:	b158      	cbz	r0, 800f6d4 <lv_event_send_func+0x7c>
            lv_res_t res = lv_event_send(obj->par, event, data);
 800f6bc:	4642      	mov	r2, r8
 800f6be:	4639      	mov	r1, r7
 800f6c0:	f000 f80e 	bl	800f6e0 <lv_event_send>
        return LV_RES_INV;
 800f6c4:	1e43      	subs	r3, r0, #1
 800f6c6:	4258      	negs	r0, r3
 800f6c8:	4158      	adcs	r0, r3
}
 800f6ca:	b004      	add	sp, #16
 800f6cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        return LV_RES_INV;
 800f6d0:	2000      	movs	r0, #0
 800f6d2:	e7fa      	b.n	800f6ca <lv_event_send_func+0x72>
    return LV_RES_OK;
 800f6d4:	2001      	movs	r0, #1
 800f6d6:	e7f8      	b.n	800f6ca <lv_event_send_func+0x72>
 800f6d8:	200061e0 	.word	0x200061e0
 800f6dc:	200061dc 	.word	0x200061dc

0800f6e0 <lv_event_send>:
{
 800f6e0:	4613      	mov	r3, r2
    if(obj == NULL) return LV_RES_OK;
 800f6e2:	b120      	cbz	r0, 800f6ee <lv_event_send+0xe>
    res = lv_event_send_func(obj->event_cb, obj, event, data);
 800f6e4:	460a      	mov	r2, r1
 800f6e6:	4601      	mov	r1, r0
 800f6e8:	6980      	ldr	r0, [r0, #24]
 800f6ea:	f7ff bfb5 	b.w	800f658 <lv_event_send_func>
}
 800f6ee:	2001      	movs	r0, #1
 800f6f0:	4770      	bx	lr

0800f6f2 <delete_children>:
{
 800f6f2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    i = lv_ll_get_head(&(obj->child_ll));
 800f6f6:	1d05      	adds	r5, r0, #4
{
 800f6f8:	4604      	mov	r4, r0
    i = lv_ll_get_head(&(obj->child_ll));
 800f6fa:	4628      	mov	r0, r5
 800f6fc:	f005 fefa 	bl	80154f4 <lv_ll_get_head>
    return obj->group_p;
 800f700:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
    i = lv_ll_get_head(&(obj->child_ll));
 800f702:	4606      	mov	r6, r0
    if(group) lv_group_remove_obj(obj);
 800f704:	b117      	cbz	r7, 800f70c <delete_children+0x1a>
 800f706:	4620      	mov	r0, r4
 800f708:	f7ff fe4b 	bl	800f3a2 <lv_group_remove_obj>
    while(i != NULL) {
 800f70c:	bb1e      	cbnz	r6, 800f756 <delete_children+0x64>
    lv_event_send(obj, LV_EVENT_DELETE, NULL);
 800f70e:	4632      	mov	r2, r6
 800f710:	2113      	movs	r1, #19
 800f712:	4620      	mov	r0, r4
 800f714:	f7ff ffe4 	bl	800f6e0 <lv_event_send>
    lv_event_mark_deleted(obj);
 800f718:	4620      	mov	r0, r4
 800f71a:	f7ff ff11 	bl	800f540 <lv_event_mark_deleted>
    lv_anim_del(obj, NULL);
 800f71e:	4631      	mov	r1, r6
 800f720:	4620      	mov	r0, r4
 800f722:	f005 fd49 	bl	80151b8 <lv_anim_del>
    lv_indev_t * indev = lv_indev_get_next(NULL);
 800f726:	4630      	mov	r0, r6
        indev = lv_indev_get_next(indev);
 800f728:	f005 fc4e 	bl	8014fc8 <lv_indev_get_next>
 800f72c:	4605      	mov	r5, r0
    while(indev) {
 800f72e:	b9e0      	cbnz	r0, 800f76a <delete_children+0x78>
    lv_ll_rem(&(par->child_ll), obj);
 800f730:	6820      	ldr	r0, [r4, #0]
 800f732:	4621      	mov	r1, r4
 800f734:	3004      	adds	r0, #4
 800f736:	f005 ff1c 	bl	8015572 <lv_ll_rem>
    obj->signal_cb(obj, LV_SIGNAL_CLEANUP, NULL);
 800f73a:	69e3      	ldr	r3, [r4, #28]
 800f73c:	462a      	mov	r2, r5
 800f73e:	4629      	mov	r1, r5
 800f740:	4620      	mov	r0, r4
 800f742:	4798      	blx	r3
    if(obj->ext_attr != NULL) lv_mem_free(obj->ext_attr);
 800f744:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800f746:	b108      	cbz	r0, 800f74c <delete_children+0x5a>
 800f748:	f006 f852 	bl	80157f0 <lv_mem_free>
    lv_mem_free(obj); /*Free the object itself*/
 800f74c:	4620      	mov	r0, r4
}
 800f74e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    lv_mem_free(obj); /*Free the object itself*/
 800f752:	f006 b84d 	b.w	80157f0 <lv_mem_free>
        i_next = lv_ll_get_next(&(obj->child_ll), i);
 800f756:	4631      	mov	r1, r6
 800f758:	4628      	mov	r0, r5
 800f75a:	f005 fed1 	bl	8015500 <lv_ll_get_next>
 800f75e:	4680      	mov	r8, r0
        delete_children(i);
 800f760:	4630      	mov	r0, r6
 800f762:	f7ff ffc6 	bl	800f6f2 <delete_children>
        i = i_next;
 800f766:	4646      	mov	r6, r8
 800f768:	e7d0      	b.n	800f70c <delete_children+0x1a>
        if(indev->proc.types.pointer.act_obj == obj || indev->proc.types.pointer.last_obj == obj) {
 800f76a:	6bab      	ldr	r3, [r5, #56]	; 0x38
 800f76c:	429c      	cmp	r4, r3
 800f76e:	d002      	beq.n	800f776 <delete_children+0x84>
 800f770:	6beb      	ldr	r3, [r5, #60]	; 0x3c
 800f772:	429c      	cmp	r4, r3
 800f774:	d102      	bne.n	800f77c <delete_children+0x8a>
            lv_indev_reset(indev);
 800f776:	4628      	mov	r0, r5
 800f778:	f7ff fea5 	bl	800f4c6 <lv_indev_reset>
        if(indev->proc.types.pointer.last_pressed == obj) {
 800f77c:	6c2b      	ldr	r3, [r5, #64]	; 0x40
 800f77e:	429c      	cmp	r4, r3
        if(indev->group == group && obj == lv_indev_get_obj_act()) {
 800f780:	6dab      	ldr	r3, [r5, #88]	; 0x58
            indev->proc.types.pointer.last_pressed = NULL;
 800f782:	bf08      	it	eq
 800f784:	642e      	streq	r6, [r5, #64]	; 0x40
        if(indev->group == group && obj == lv_indev_get_obj_act()) {
 800f786:	42bb      	cmp	r3, r7
 800f788:	d106      	bne.n	800f798 <delete_children+0xa6>
 800f78a:	f7ff fed3 	bl	800f534 <lv_indev_get_obj_act>
 800f78e:	4284      	cmp	r4, r0
 800f790:	d102      	bne.n	800f798 <delete_children+0xa6>
            lv_indev_reset(indev);
 800f792:	4628      	mov	r0, r5
 800f794:	f7ff fe97 	bl	800f4c6 <lv_indev_reset>
        indev = lv_indev_get_next(indev);
 800f798:	4628      	mov	r0, r5
 800f79a:	e7c5      	b.n	800f728 <delete_children+0x36>

0800f79c <lv_event_get_data>:
}
 800f79c:	4b01      	ldr	r3, [pc, #4]	; (800f7a4 <lv_event_get_data+0x8>)
 800f79e:	6818      	ldr	r0, [r3, #0]
 800f7a0:	4770      	bx	lr
 800f7a2:	bf00      	nop
 800f7a4:	200061dc 	.word	0x200061dc

0800f7a8 <lv_obj_set_signal_cb>:
    obj->signal_cb = signal_cb;
 800f7a8:	61c1      	str	r1, [r0, #28]
 800f7aa:	4770      	bx	lr

0800f7ac <lv_obj_set_design_cb>:
    obj->design_cb = design_cb;
 800f7ac:	6201      	str	r1, [r0, #32]
 800f7ae:	4770      	bx	lr

0800f7b0 <lv_obj_allocate_ext_attr>:
{
 800f7b0:	b510      	push	{r4, lr}
 800f7b2:	4604      	mov	r4, r0
    obj->ext_attr = lv_mem_realloc(obj->ext_attr, ext_size);
 800f7b4:	6a40      	ldr	r0, [r0, #36]	; 0x24
 800f7b6:	f006 f845 	bl	8015844 <lv_mem_realloc>
 800f7ba:	6260      	str	r0, [r4, #36]	; 0x24
}
 800f7bc:	bd10      	pop	{r4, pc}
	...

0800f7c0 <lv_obj_get_disp>:
{
 800f7c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if(obj->par == NULL)
 800f7c2:	6803      	ldr	r3, [r0, #0]
{
 800f7c4:	4605      	mov	r5, r0
    if(obj->par == NULL)
 800f7c6:	b943      	cbnz	r3, 800f7da <lv_obj_get_disp+0x1a>
    LV_LL_READ(LV_GC_ROOT(_lv_disp_ll), d)
 800f7c8:	480f      	ldr	r0, [pc, #60]	; (800f808 <lv_obj_get_disp+0x48>)
 800f7ca:	4f0f      	ldr	r7, [pc, #60]	; (800f808 <lv_obj_get_disp+0x48>)
 800f7cc:	f005 fe92 	bl	80154f4 <lv_ll_get_head>
 800f7d0:	4604      	mov	r4, r0
 800f7d2:	b934      	cbnz	r4, 800f7e2 <lv_obj_get_disp+0x22>
}
 800f7d4:	4620      	mov	r0, r4
 800f7d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    } while(par != NULL);
 800f7d8:	461d      	mov	r5, r3
    return obj->par;
 800f7da:	682b      	ldr	r3, [r5, #0]
    } while(par != NULL);
 800f7dc:	2b00      	cmp	r3, #0
 800f7de:	d1fb      	bne.n	800f7d8 <lv_obj_get_disp+0x18>
 800f7e0:	e7f2      	b.n	800f7c8 <lv_obj_get_disp+0x8>
        LV_LL_READ(d->scr_ll, s)
 800f7e2:	f104 0628 	add.w	r6, r4, #40	; 0x28
 800f7e6:	4630      	mov	r0, r6
 800f7e8:	f005 fe84 	bl	80154f4 <lv_ll_get_head>
 800f7ec:	b928      	cbnz	r0, 800f7fa <lv_obj_get_disp+0x3a>
    LV_LL_READ(LV_GC_ROOT(_lv_disp_ll), d)
 800f7ee:	4621      	mov	r1, r4
 800f7f0:	4638      	mov	r0, r7
 800f7f2:	f005 fe85 	bl	8015500 <lv_ll_get_next>
 800f7f6:	4604      	mov	r4, r0
 800f7f8:	e7eb      	b.n	800f7d2 <lv_obj_get_disp+0x12>
            if(s == scr) return d;
 800f7fa:	4285      	cmp	r5, r0
 800f7fc:	d0ea      	beq.n	800f7d4 <lv_obj_get_disp+0x14>
        LV_LL_READ(d->scr_ll, s)
 800f7fe:	4601      	mov	r1, r0
 800f800:	4630      	mov	r0, r6
 800f802:	f005 fe7d 	bl	8015500 <lv_ll_get_next>
 800f806:	e7f1      	b.n	800f7ec <lv_obj_get_disp+0x2c>
 800f808:	2000c7f0 	.word	0x2000c7f0

0800f80c <lv_obj_invalidate>:
    return obj->hidden == 0 ? false : true;
 800f80c:	f890 3030 	ldrb.w	r3, [r0, #48]	; 0x30
    if(lv_obj_get_hidden(obj)) return;
 800f810:	06da      	lsls	r2, r3, #27
{
 800f812:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800f814:	4604      	mov	r4, r0
    if(lv_obj_get_hidden(obj)) return;
 800f816:	d439      	bmi.n	800f88c <lv_obj_invalidate+0x80>
 800f818:	4605      	mov	r5, r0
    return obj->par;
 800f81a:	682b      	ldr	r3, [r5, #0]
    } while(par != NULL);
 800f81c:	bb53      	cbnz	r3, 800f874 <lv_obj_invalidate+0x68>
    lv_disp_t * disp   = lv_obj_get_disp(obj_scr);
 800f81e:	4628      	mov	r0, r5
 800f820:	f7ff ffce 	bl	800f7c0 <lv_obj_get_disp>
 800f824:	4606      	mov	r6, r0
    if(obj_scr == lv_disp_get_scr_act(disp) || obj_scr == lv_disp_get_layer_top(disp) ||
 800f826:	f7ff fcba 	bl	800f19e <lv_disp_get_scr_act>
 800f82a:	4285      	cmp	r5, r0
 800f82c:	d124      	bne.n	800f878 <lv_obj_invalidate+0x6c>
        lv_coord_t ext_size = obj->ext_draw_pad;
 800f82e:	f9b4 3034 	ldrsh.w	r3, [r4, #52]	; 0x34
    return obj->par;
 800f832:	6825      	ldr	r5, [r4, #0]
 * @param dest pointer to the destination area
 * @param src pointer to the source area
 */
inline static void lv_area_copy(lv_area_t * dest, const lv_area_t * src)
{
    memcpy(dest, src, sizeof(lv_area_t));
 800f834:	f854 0f10 	ldr.w	r0, [r4, #16]!
 800f838:	6861      	ldr	r1, [r4, #4]
 800f83a:	466a      	mov	r2, sp
 800f83c:	c203      	stmia	r2!, {r0, r1}
        area_trunc.x1 -= ext_size;
 800f83e:	f8bd 2000 	ldrh.w	r2, [sp]
 800f842:	b29b      	uxth	r3, r3
 800f844:	1ad2      	subs	r2, r2, r3
 800f846:	f8ad 2000 	strh.w	r2, [sp]
        area_trunc.y1 -= ext_size;
 800f84a:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 800f84e:	1ad2      	subs	r2, r2, r3
 800f850:	f8ad 2002 	strh.w	r2, [sp, #2]
        area_trunc.x2 += ext_size;
 800f854:	f8bd 2004 	ldrh.w	r2, [sp, #4]
 800f858:	441a      	add	r2, r3
 800f85a:	f8ad 2004 	strh.w	r2, [sp, #4]
        area_trunc.y2 += ext_size;
 800f85e:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800f862:	4413      	add	r3, r2
 800f864:	f8ad 3006 	strh.w	r3, [sp, #6]
        while(par != NULL) {
 800f868:	b995      	cbnz	r5, 800f890 <lv_obj_invalidate+0x84>
        if(union_ok) lv_inv_area(disp, &area_trunc);
 800f86a:	4669      	mov	r1, sp
 800f86c:	4630      	mov	r0, r6
 800f86e:	f000 ffbe 	bl	80107ee <lv_inv_area>
 800f872:	e00b      	b.n	800f88c <lv_obj_invalidate+0x80>
    } while(par != NULL);
 800f874:	461d      	mov	r5, r3
 800f876:	e7d0      	b.n	800f81a <lv_obj_invalidate+0xe>
    if(obj_scr == lv_disp_get_scr_act(disp) || obj_scr == lv_disp_get_layer_top(disp) ||
 800f878:	4630      	mov	r0, r6
 800f87a:	f7ff fca1 	bl	800f1c0 <lv_disp_get_layer_top>
 800f87e:	4285      	cmp	r5, r0
 800f880:	d0d5      	beq.n	800f82e <lv_obj_invalidate+0x22>
       obj_scr == lv_disp_get_layer_sys(disp)) {
 800f882:	4630      	mov	r0, r6
 800f884:	f7ff fca3 	bl	800f1ce <lv_disp_get_layer_sys>
    if(obj_scr == lv_disp_get_scr_act(disp) || obj_scr == lv_disp_get_layer_top(disp) ||
 800f888:	4285      	cmp	r5, r0
 800f88a:	d0d0      	beq.n	800f82e <lv_obj_invalidate+0x22>
}
 800f88c:	b002      	add	sp, #8
 800f88e:	bd70      	pop	{r4, r5, r6, pc}
            union_ok = lv_area_intersect(&area_trunc, &area_trunc, &par->coords);
 800f890:	f105 0210 	add.w	r2, r5, #16
 800f894:	4669      	mov	r1, sp
 800f896:	4668      	mov	r0, sp
 800f898:	f005 fd27 	bl	80152ea <lv_area_intersect>
            if(union_ok == false) break;       /*If no common parts with parent break;*/
 800f89c:	2800      	cmp	r0, #0
 800f89e:	d0f5      	beq.n	800f88c <lv_obj_invalidate+0x80>
    return obj->hidden == 0 ? false : true;
 800f8a0:	f895 3030 	ldrb.w	r3, [r5, #48]	; 0x30
            if(lv_obj_get_hidden(par)) return; /*If the parent is hidden then the child is hidden and won't be drawn*/
 800f8a4:	06db      	lsls	r3, r3, #27
 800f8a6:	d4f1      	bmi.n	800f88c <lv_obj_invalidate+0x80>
    return obj->par;
 800f8a8:	682d      	ldr	r5, [r5, #0]
 800f8aa:	e7dd      	b.n	800f868 <lv_obj_invalidate+0x5c>

0800f8ac <lv_obj_move_foreground>:
{
 800f8ac:	b570      	push	{r4, r5, r6, lr}
    return obj->par;
 800f8ae:	6804      	ldr	r4, [r0, #0]
    if(lv_ll_get_head(&parent->child_ll) == obj) return;
 800f8b0:	1d26      	adds	r6, r4, #4
{
 800f8b2:	4605      	mov	r5, r0
    if(lv_ll_get_head(&parent->child_ll) == obj) return;
 800f8b4:	4630      	mov	r0, r6
 800f8b6:	f005 fe1d 	bl	80154f4 <lv_ll_get_head>
 800f8ba:	4285      	cmp	r5, r0
 800f8bc:	d012      	beq.n	800f8e4 <lv_obj_move_foreground+0x38>
    lv_obj_invalidate(parent);
 800f8be:	4620      	mov	r0, r4
 800f8c0:	f7ff ffa4 	bl	800f80c <lv_obj_invalidate>
    lv_ll_chg_list(&parent->child_ll, &parent->child_ll, obj, true);
 800f8c4:	462a      	mov	r2, r5
 800f8c6:	4631      	mov	r1, r6
 800f8c8:	4630      	mov	r0, r6
 800f8ca:	2301      	movs	r3, #1
 800f8cc:	f005 fe8b 	bl	80155e6 <lv_ll_chg_list>
    parent->signal_cb(parent, LV_SIGNAL_CHILD_CHG, obj);
 800f8d0:	69e3      	ldr	r3, [r4, #28]
 800f8d2:	462a      	mov	r2, r5
 800f8d4:	4620      	mov	r0, r4
 800f8d6:	2101      	movs	r1, #1
 800f8d8:	4798      	blx	r3
    lv_obj_invalidate(parent);
 800f8da:	4620      	mov	r0, r4
}
 800f8dc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    lv_obj_invalidate(parent);
 800f8e0:	f7ff bf94 	b.w	800f80c <lv_obj_invalidate>
 800f8e4:	bd70      	pop	{r4, r5, r6, pc}

0800f8e6 <lv_obj_set_pos>:
{
 800f8e6:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    lv_obj_t * par = obj->par;
 800f8ea:	6806      	ldr	r6, [r0, #0]
    diff.x = x - obj->coords.x1;
 800f8ec:	8a03      	ldrh	r3, [r0, #16]
 800f8ee:	f8b6 8010 	ldrh.w	r8, [r6, #16]
    diff.y = y - obj->coords.y1;
 800f8f2:	8a75      	ldrh	r5, [r6, #18]
    diff.x = x - obj->coords.x1;
 800f8f4:	eba8 0803 	sub.w	r8, r8, r3
    diff.y = y - obj->coords.y1;
 800f8f8:	8a43      	ldrh	r3, [r0, #18]
    diff.x = x - obj->coords.x1;
 800f8fa:	4488      	add	r8, r1
    diff.y = y - obj->coords.y1;
 800f8fc:	1aed      	subs	r5, r5, r3
    diff.x = x - obj->coords.x1;
 800f8fe:	fa1f f888 	uxth.w	r8, r8
    diff.y = y - obj->coords.y1;
 800f902:	4415      	add	r5, r2
 800f904:	b2ad      	uxth	r5, r5
    diff.x = x - obj->coords.x1;
 800f906:	fa0f f788 	sxth.w	r7, r8
{
 800f90a:	4604      	mov	r4, r0
    diff.y = y - obj->coords.y1;
 800f90c:	fa0f f985 	sxth.w	r9, r5
    if(diff.x == 0 && diff.y == 0) return;
 800f910:	b917      	cbnz	r7, 800f918 <lv_obj_set_pos+0x32>
 800f912:	f1b9 0f00 	cmp.w	r9, #0
 800f916:	d026      	beq.n	800f966 <lv_obj_set_pos+0x80>
    lv_obj_invalidate(obj);
 800f918:	4620      	mov	r0, r4
 800f91a:	f7ff ff77 	bl	800f80c <lv_obj_invalidate>
 800f91e:	4622      	mov	r2, r4
 800f920:	466b      	mov	r3, sp
 800f922:	f852 0f10 	ldr.w	r0, [r2, #16]!
 800f926:	6851      	ldr	r1, [r2, #4]
    obj->coords.y2 += diff.y;
 800f928:	8ae2      	ldrh	r2, [r4, #22]
 800f92a:	c303      	stmia	r3!, {r0, r1}
    obj->coords.x1 += diff.x;
 800f92c:	8a23      	ldrh	r3, [r4, #16]
    obj->coords.x2 += diff.x;
 800f92e:	8aa1      	ldrh	r1, [r4, #20]
    obj->coords.x1 += diff.x;
 800f930:	4443      	add	r3, r8
 800f932:	8223      	strh	r3, [r4, #16]
    obj->coords.y1 += diff.y;
 800f934:	8a63      	ldrh	r3, [r4, #18]
    obj->coords.x2 += diff.x;
 800f936:	4441      	add	r1, r8
    obj->coords.y1 += diff.y;
 800f938:	442b      	add	r3, r5
    obj->coords.y2 += diff.y;
 800f93a:	4415      	add	r5, r2
    obj->coords.y1 += diff.y;
 800f93c:	8263      	strh	r3, [r4, #18]
    obj->coords.x2 += diff.x;
 800f93e:	82a1      	strh	r1, [r4, #20]
    refresh_children_position(obj, diff.x, diff.y);
 800f940:	464a      	mov	r2, r9
 800f942:	4639      	mov	r1, r7
 800f944:	4620      	mov	r0, r4
    obj->coords.y2 += diff.y;
 800f946:	82e5      	strh	r5, [r4, #22]
    refresh_children_position(obj, diff.x, diff.y);
 800f948:	f7ff fe08 	bl	800f55c <refresh_children_position>
    obj->signal_cb(obj, LV_SIGNAL_CORD_CHG, &ori);
 800f94c:	69e3      	ldr	r3, [r4, #28]
 800f94e:	466a      	mov	r2, sp
 800f950:	2102      	movs	r1, #2
 800f952:	4620      	mov	r0, r4
 800f954:	4798      	blx	r3
    par->signal_cb(par, LV_SIGNAL_CHILD_CHG, obj);
 800f956:	69f3      	ldr	r3, [r6, #28]
 800f958:	4622      	mov	r2, r4
 800f95a:	2101      	movs	r1, #1
 800f95c:	4630      	mov	r0, r6
 800f95e:	4798      	blx	r3
    lv_obj_invalidate(obj);
 800f960:	4620      	mov	r0, r4
 800f962:	f7ff ff53 	bl	800f80c <lv_obj_invalidate>
}
 800f966:	b003      	add	sp, #12
 800f968:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0800f96c <lv_obj_set_x>:
{
 800f96c:	b410      	push	{r4}
    rel_y             = obj->coords.y1 - parent->coords.y1;
 800f96e:	6804      	ldr	r4, [r0, #0]
 800f970:	8a42      	ldrh	r2, [r0, #18]
 800f972:	8a63      	ldrh	r3, [r4, #18]
}
 800f974:	f85d 4b04 	ldr.w	r4, [sp], #4
    rel_y             = obj->coords.y1 - parent->coords.y1;
 800f978:	1ad2      	subs	r2, r2, r3
    lv_obj_set_pos(obj, x, lv_obj_get_y(obj));
 800f97a:	b212      	sxth	r2, r2
 800f97c:	f7ff bfb3 	b.w	800f8e6 <lv_obj_set_pos>

0800f980 <lv_obj_set_y>:
    rel_x             = obj->coords.x1 - parent->coords.x1;
 800f980:	6802      	ldr	r2, [r0, #0]
 800f982:	8a03      	ldrh	r3, [r0, #16]
 800f984:	8a12      	ldrh	r2, [r2, #16]
 800f986:	1a9b      	subs	r3, r3, r2
    lv_obj_set_pos(obj, lv_obj_get_x(obj), y);
 800f988:	460a      	mov	r2, r1
 800f98a:	b219      	sxth	r1, r3
 800f98c:	f7ff bfab 	b.w	800f8e6 <lv_obj_set_pos>

0800f990 <lv_obj_align>:
{
 800f990:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    return obj->par;
 800f994:	6804      	ldr	r4, [r0, #0]
{
 800f996:	f9bd 7028 	ldrsh.w	r7, [sp, #40]	; 0x28
    rel_x             = obj->coords.x1 - parent->coords.x1;
 800f99a:	f8b4 e010 	ldrh.w	lr, [r4, #16]
    rel_y             = obj->coords.y1 - parent->coords.y1;
 800f99e:	f8b4 c012 	ldrh.w	ip, [r4, #18]
{
 800f9a2:	4605      	mov	r5, r0
 800f9a4:	4616      	mov	r6, r2
 800f9a6:	4698      	mov	r8, r3
    rel_x             = obj->coords.x1 - parent->coords.x1;
 800f9a8:	8a00      	ldrh	r0, [r0, #16]
    rel_y             = obj->coords.y1 - parent->coords.y1;
 800f9aa:	f8b5 9012 	ldrh.w	r9, [r5, #18]
 800f9ae:	2900      	cmp	r1, #0
 800f9b0:	bf18      	it	ne
 800f9b2:	460c      	movne	r4, r1
    switch(align) {
 800f9b4:	2a14      	cmp	r2, #20
 800f9b6:	d816      	bhi.n	800f9e6 <lv_obj_align+0x56>
 800f9b8:	e8df f012 	tbh	[pc, r2, lsl #1]
 800f9bc:	0128001c 	.word	0x0128001c
 800f9c0:	00540042 	.word	0x00540042
 800f9c4:	0083005a 	.word	0x0083005a
 800f9c8:	00a4009e 	.word	0x00a4009e
 800f9cc:	00cd00b5 	.word	0x00cd00b5
 800f9d0:	00e700d2 	.word	0x00e700d2
 800f9d4:	00f200ed 	.word	0x00f200ed
 800f9d8:	010d0107 	.word	0x010d0107
 800f9dc:	01150111 	.word	0x01150111
 800f9e0:	011e0119 	.word	0x011e0119
 800f9e4:	0123      	.short	0x0123
    rel_x             = obj->coords.x1 - parent->coords.x1;
 800f9e6:	eba0 010e 	sub.w	r1, r0, lr
 800f9ea:	b209      	sxth	r1, r1
    rel_y             = obj->coords.y1 - parent->coords.y1;
 800f9ec:	eba9 020c 	sub.w	r2, r9, ip
            new_y = lv_obj_get_height(base) - lv_obj_get_height(obj);
 800f9f0:	b212      	sxth	r2, r2
            break;
 800f9f2:	e049      	b.n	800fa88 <lv_obj_align+0xf8>
 * @param area_p pointer to an area
 * @return the width of the area (if x1 == x2 -> width = 1)
 */
static inline lv_coord_t lv_area_get_width(const lv_area_t * area_p)
{
    return area_p->x2 - area_p->x1 + 1;
 800f9f4:	f8b4 a014 	ldrh.w	sl, [r4, #20]
 800f9f8:	8a21      	ldrh	r1, [r4, #16]
 * @param area_p pointer to an area
 * @return the height of the area (if y1 == y2 -> height = 1)
 */
static inline lv_coord_t lv_area_get_height(const lv_area_t * area_p)
{
    return area_p->y2 - area_p->y1 + 1;
 800f9fa:	8ae3      	ldrh	r3, [r4, #22]
 800f9fc:	8a62      	ldrh	r2, [r4, #18]
    return area_p->x2 - area_p->x1 + 1;
 800f9fe:	f10a 0a01 	add.w	sl, sl, #1
 800fa02:	ebaa 0a01 	sub.w	sl, sl, r1
    return area_p->y2 - area_p->y1 + 1;
 800fa06:	3301      	adds	r3, #1
    return area_p->x2 - area_p->x1 + 1;
 800fa08:	8aa9      	ldrh	r1, [r5, #20]
    return area_p->y2 - area_p->y1 + 1;
 800fa0a:	1a9b      	subs	r3, r3, r2
 800fa0c:	8aea      	ldrh	r2, [r5, #22]
    return area_p->x2 - area_p->x1 + 1;
 800fa0e:	3101      	adds	r1, #1
 800fa10:	1a09      	subs	r1, r1, r0
    return area_p->y2 - area_p->y1 + 1;
 800fa12:	3201      	adds	r2, #1
            new_x = lv_obj_get_width(base) / 2 - lv_obj_get_width(obj) / 2;
 800fa14:	f04f 0b02 	mov.w	fp, #2
 800fa18:	fa0f fa8a 	sxth.w	sl, sl
 800fa1c:	b209      	sxth	r1, r1
 800fa1e:	fb9a fafb 	sdiv	sl, sl, fp
 800fa22:	fb91 f1fb 	sdiv	r1, r1, fp
 800fa26:	eba2 0209 	sub.w	r2, r2, r9
 800fa2a:	ebaa 0101 	sub.w	r1, sl, r1
            new_y = lv_obj_get_height(base) / 2 - lv_obj_get_height(obj) / 2;
 800fa2e:	b21b      	sxth	r3, r3
 800fa30:	b212      	sxth	r2, r2
 800fa32:	fb93 f3fb 	sdiv	r3, r3, fp
 800fa36:	fb92 f2fb 	sdiv	r2, r2, fp
            new_x = lv_obj_get_width(base) / 2 - lv_obj_get_width(obj) / 2;
 800fa3a:	b209      	sxth	r1, r1
            new_y = lv_obj_get_height(base) / 2 - lv_obj_get_height(obj) / 2;
 800fa3c:	1a9a      	subs	r2, r3, r2
 800fa3e:	e7d7      	b.n	800f9f0 <lv_obj_align+0x60>
    return area_p->x2 - area_p->x1 + 1;
 800fa40:	8aa1      	ldrh	r1, [r4, #20]
 800fa42:	8a23      	ldrh	r3, [r4, #16]
 800fa44:	3101      	adds	r1, #1
 800fa46:	1ac9      	subs	r1, r1, r3
 800fa48:	8aab      	ldrh	r3, [r5, #20]
 800fa4a:	3301      	adds	r3, #1
 800fa4c:	1a18      	subs	r0, r3, r0
            new_x = lv_obj_get_width(base) / 2 - lv_obj_get_width(obj) / 2;
 800fa4e:	2202      	movs	r2, #2
 800fa50:	b209      	sxth	r1, r1
 800fa52:	b200      	sxth	r0, r0
 800fa54:	fb91 f1f2 	sdiv	r1, r1, r2
 800fa58:	fb90 f0f2 	sdiv	r0, r0, r2
            new_x = lv_obj_get_width(base) - lv_obj_get_width(obj);
 800fa5c:	1a09      	subs	r1, r1, r0
 800fa5e:	b209      	sxth	r1, r1
            new_y = 0;
 800fa60:	2200      	movs	r2, #0
            break;
 800fa62:	e011      	b.n	800fa88 <lv_obj_align+0xf8>
            new_x = lv_obj_get_width(base) - lv_obj_get_width(obj);
 800fa64:	8aa9      	ldrh	r1, [r5, #20]
 800fa66:	1a08      	subs	r0, r1, r0
 800fa68:	8aa1      	ldrh	r1, [r4, #20]
 800fa6a:	1a09      	subs	r1, r1, r0
 800fa6c:	8a20      	ldrh	r0, [r4, #16]
 800fa6e:	e7f5      	b.n	800fa5c <lv_obj_align+0xcc>
            new_y = lv_obj_get_height(base) - lv_obj_get_height(obj);
 800fa70:	8aea      	ldrh	r2, [r5, #22]
 800fa72:	eba2 0909 	sub.w	r9, r2, r9
 800fa76:	8ae2      	ldrh	r2, [r4, #22]
 800fa78:	eba2 0209 	sub.w	r2, r2, r9
 800fa7c:	f8b4 9012 	ldrh.w	r9, [r4, #18]
 800fa80:	eba2 0209 	sub.w	r2, r2, r9
    return area_p->y2 - area_p->y1 + 1;
 800fa84:	b212      	sxth	r2, r2
            new_x = 0;
 800fa86:	2100      	movs	r1, #0
    new_x -= par_abs_x;
 800fa88:	8a23      	ldrh	r3, [r4, #16]
 800fa8a:	eba8 0e0e 	sub.w	lr, r8, lr
 800fa8e:	449e      	add	lr, r3
    new_y -= par_abs_y;
 800fa90:	8a63      	ldrh	r3, [r4, #18]
 800fa92:	eba7 0c0c 	sub.w	ip, r7, ip
 800fa96:	449c      	add	ip, r3
    new_x -= par_abs_x;
 800fa98:	4471      	add	r1, lr
    new_y -= par_abs_y;
 800fa9a:	4462      	add	r2, ip
    lv_obj_set_pos(obj, new_x, new_y);
 800fa9c:	b212      	sxth	r2, r2
 800fa9e:	b209      	sxth	r1, r1
 800faa0:	4628      	mov	r0, r5
 800faa2:	f7ff ff20 	bl	800f8e6 <lv_obj_set_pos>
    obj->realign.origo_align = 0;
 800faa6:	f895 3041 	ldrb.w	r3, [r5, #65]	; 0x41
    obj->realign.align       = align;
 800faaa:	f885 6040 	strb.w	r6, [r5, #64]	; 0x40
    obj->realign.origo_align = 0;
 800faae:	f36f 0341 	bfc	r3, #1, #1
    obj->realign.xofs        = x_mod;
 800fab2:	f8a5 803c 	strh.w	r8, [r5, #60]	; 0x3c
    obj->realign.yofs        = y_mod;
 800fab6:	87ef      	strh	r7, [r5, #62]	; 0x3e
    obj->realign.base        = base;
 800fab8:	63ac      	str	r4, [r5, #56]	; 0x38
    obj->realign.origo_align = 0;
 800faba:	f885 3041 	strb.w	r3, [r5, #65]	; 0x41
 800fabe:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    return area_p->x2 - area_p->x1 + 1;
 800fac2:	8aa1      	ldrh	r1, [r4, #20]
 800fac4:	8a23      	ldrh	r3, [r4, #16]
 800fac6:	3101      	adds	r1, #1
 800fac8:	1ac9      	subs	r1, r1, r3
 800faca:	8aab      	ldrh	r3, [r5, #20]
 800facc:	3301      	adds	r3, #1
 800face:	1a18      	subs	r0, r3, r0
            new_x = lv_obj_get_width(base) / 2 - lv_obj_get_width(obj) / 2;
 800fad0:	2202      	movs	r2, #2
 800fad2:	b209      	sxth	r1, r1
 800fad4:	b200      	sxth	r0, r0
 800fad6:	fb91 f1f2 	sdiv	r1, r1, r2
 800fada:	fb90 f0f2 	sdiv	r0, r0, r2
            new_x = lv_obj_get_width(base) - lv_obj_get_width(obj);
 800fade:	1a09      	subs	r1, r1, r0
            new_y = lv_obj_get_height(base) - lv_obj_get_height(obj);
 800fae0:	8aea      	ldrh	r2, [r5, #22]
 800fae2:	eba2 0909 	sub.w	r9, r2, r9
 800fae6:	8ae2      	ldrh	r2, [r4, #22]
 800fae8:	eba2 0209 	sub.w	r2, r2, r9
 800faec:	f8b4 9012 	ldrh.w	r9, [r4, #18]
 800faf0:	b209      	sxth	r1, r1
 800faf2:	eba2 0209 	sub.w	r2, r2, r9
 800faf6:	e77b      	b.n	800f9f0 <lv_obj_align+0x60>
            new_x = lv_obj_get_width(base) - lv_obj_get_width(obj);
 800faf8:	8aa9      	ldrh	r1, [r5, #20]
 800fafa:	1a08      	subs	r0, r1, r0
 800fafc:	8aa1      	ldrh	r1, [r4, #20]
 800fafe:	1a09      	subs	r1, r1, r0
 800fb00:	8a20      	ldrh	r0, [r4, #16]
 800fb02:	e7ec      	b.n	800fade <lv_obj_align+0x14e>
    return area_p->y2 - area_p->y1 + 1;
 800fb04:	8ae3      	ldrh	r3, [r4, #22]
 800fb06:	8a62      	ldrh	r2, [r4, #18]
 800fb08:	3301      	adds	r3, #1
 800fb0a:	1a9b      	subs	r3, r3, r2
 800fb0c:	8aea      	ldrh	r2, [r5, #22]
 800fb0e:	3201      	adds	r2, #1
 800fb10:	eba2 0209 	sub.w	r2, r2, r9
            new_y = lv_obj_get_height(base) / 2 - lv_obj_get_height(obj) / 2;
 800fb14:	2102      	movs	r1, #2
 800fb16:	b21b      	sxth	r3, r3
 800fb18:	b212      	sxth	r2, r2
 800fb1a:	fb93 f3f1 	sdiv	r3, r3, r1
 800fb1e:	fb92 f2f1 	sdiv	r2, r2, r1
 800fb22:	1a9a      	subs	r2, r3, r2
 800fb24:	e7ae      	b.n	800fa84 <lv_obj_align+0xf4>
            new_x = lv_obj_get_width(base) - lv_obj_get_width(obj);
 800fb26:	8aa9      	ldrh	r1, [r5, #20]
 800fb28:	1a08      	subs	r0, r1, r0
 800fb2a:	8aa1      	ldrh	r1, [r4, #20]
 800fb2c:	1a09      	subs	r1, r1, r0
 800fb2e:	8a20      	ldrh	r0, [r4, #16]
 800fb30:	1a09      	subs	r1, r1, r0
 800fb32:	8ae0      	ldrh	r0, [r4, #22]
 800fb34:	8a62      	ldrh	r2, [r4, #18]
 800fb36:	3001      	adds	r0, #1
 800fb38:	1a80      	subs	r0, r0, r2
 800fb3a:	8aea      	ldrh	r2, [r5, #22]
 800fb3c:	3201      	adds	r2, #1
 800fb3e:	eba2 0209 	sub.w	r2, r2, r9
            new_y = lv_obj_get_height(base) / 2 - lv_obj_get_height(obj) / 2;
 800fb42:	2302      	movs	r3, #2
 800fb44:	b200      	sxth	r0, r0
 800fb46:	b212      	sxth	r2, r2
 800fb48:	fb90 f0f3 	sdiv	r0, r0, r3
 800fb4c:	fb92 f2f3 	sdiv	r2, r2, r3
    return area_p->x2 - area_p->x1 + 1;
 800fb50:	b209      	sxth	r1, r1
 800fb52:	1a82      	subs	r2, r0, r2
 800fb54:	e74c      	b.n	800f9f0 <lv_obj_align+0x60>
    return area_p->y2 - area_p->y1 + 1;
 800fb56:	8aea      	ldrh	r2, [r5, #22]
 800fb58:	eba2 0209 	sub.w	r2, r2, r9
            new_y = -lv_obj_get_height(obj);
 800fb5c:	43d2      	mvns	r2, r2
 800fb5e:	e791      	b.n	800fa84 <lv_obj_align+0xf4>
    return area_p->x2 - area_p->x1 + 1;
 800fb60:	8aa1      	ldrh	r1, [r4, #20]
 800fb62:	8a23      	ldrh	r3, [r4, #16]
 800fb64:	3101      	adds	r1, #1
 800fb66:	1ac9      	subs	r1, r1, r3
 800fb68:	8aab      	ldrh	r3, [r5, #20]
 800fb6a:	3301      	adds	r3, #1
 800fb6c:	1a18      	subs	r0, r3, r0
            new_x = lv_obj_get_width(base) / 2 - lv_obj_get_width(obj) / 2;
 800fb6e:	2202      	movs	r2, #2
 800fb70:	b209      	sxth	r1, r1
 800fb72:	b200      	sxth	r0, r0
 800fb74:	fb91 f1f2 	sdiv	r1, r1, r2
 800fb78:	fb90 f0f2 	sdiv	r0, r0, r2
    return area_p->y2 - area_p->y1 + 1;
 800fb7c:	8aea      	ldrh	r2, [r5, #22]
            new_x = lv_obj_get_width(base) - lv_obj_get_width(obj);
 800fb7e:	1a09      	subs	r1, r1, r0
 800fb80:	eba2 0209 	sub.w	r2, r2, r9
 800fb84:	b209      	sxth	r1, r1
            new_y = -lv_obj_get_height(obj);
 800fb86:	43d2      	mvns	r2, r2
 800fb88:	e732      	b.n	800f9f0 <lv_obj_align+0x60>
            new_x = lv_obj_get_width(base) - lv_obj_get_width(obj);
 800fb8a:	8aa9      	ldrh	r1, [r5, #20]
 800fb8c:	1a08      	subs	r0, r1, r0
 800fb8e:	8aa1      	ldrh	r1, [r4, #20]
 800fb90:	1a09      	subs	r1, r1, r0
 800fb92:	8a20      	ldrh	r0, [r4, #16]
 800fb94:	e7f2      	b.n	800fb7c <lv_obj_align+0x1ec>
 800fb96:	8ae2      	ldrh	r2, [r4, #22]
 800fb98:	8a63      	ldrh	r3, [r4, #18]
 800fb9a:	3201      	adds	r2, #1
 800fb9c:	1ad2      	subs	r2, r2, r3
 800fb9e:	e771      	b.n	800fa84 <lv_obj_align+0xf4>
    return area_p->x2 - area_p->x1 + 1;
 800fba0:	8aa1      	ldrh	r1, [r4, #20]
 800fba2:	8a23      	ldrh	r3, [r4, #16]
 800fba4:	3101      	adds	r1, #1
 800fba6:	1ac9      	subs	r1, r1, r3
 800fba8:	8aab      	ldrh	r3, [r5, #20]
 800fbaa:	3301      	adds	r3, #1
 800fbac:	1a18      	subs	r0, r3, r0
            new_x = lv_obj_get_width(base) / 2 - lv_obj_get_width(obj) / 2;
 800fbae:	2202      	movs	r2, #2
 800fbb0:	b209      	sxth	r1, r1
 800fbb2:	b200      	sxth	r0, r0
 800fbb4:	fb91 f1f2 	sdiv	r1, r1, r2
 800fbb8:	fb90 f0f2 	sdiv	r0, r0, r2
    return area_p->y2 - area_p->y1 + 1;
 800fbbc:	8ae2      	ldrh	r2, [r4, #22]
 800fbbe:	8a63      	ldrh	r3, [r4, #18]
            new_x = lv_obj_get_width(base) - lv_obj_get_width(obj);
 800fbc0:	1a09      	subs	r1, r1, r0
 800fbc2:	3201      	adds	r2, #1
 800fbc4:	b209      	sxth	r1, r1
 800fbc6:	1ad2      	subs	r2, r2, r3
 800fbc8:	e712      	b.n	800f9f0 <lv_obj_align+0x60>
 800fbca:	8aa9      	ldrh	r1, [r5, #20]
 800fbcc:	1a08      	subs	r0, r1, r0
 800fbce:	8aa1      	ldrh	r1, [r4, #20]
 800fbd0:	1a09      	subs	r1, r1, r0
 800fbd2:	8a20      	ldrh	r0, [r4, #16]
 800fbd4:	e7f2      	b.n	800fbbc <lv_obj_align+0x22c>
    return area_p->x2 - area_p->x1 + 1;
 800fbd6:	8aa9      	ldrh	r1, [r5, #20]
 800fbd8:	1a09      	subs	r1, r1, r0
            new_x = -lv_obj_get_width(obj);
 800fbda:	43c9      	mvns	r1, r1
 800fbdc:	e73f      	b.n	800fa5e <lv_obj_align+0xce>
 800fbde:	8aa9      	ldrh	r1, [r5, #20]
 800fbe0:	1a09      	subs	r1, r1, r0
            new_x = -lv_obj_get_width(obj);
 800fbe2:	43c9      	mvns	r1, r1
 800fbe4:	e7a5      	b.n	800fb32 <lv_obj_align+0x1a2>
 800fbe6:	8aa9      	ldrh	r1, [r5, #20]
 800fbe8:	1a09      	subs	r1, r1, r0
            new_x = -lv_obj_get_width(obj);
 800fbea:	43c9      	mvns	r1, r1
 800fbec:	e778      	b.n	800fae0 <lv_obj_align+0x150>
 800fbee:	8aa1      	ldrh	r1, [r4, #20]
 800fbf0:	8a23      	ldrh	r3, [r4, #16]
 800fbf2:	3101      	adds	r1, #1
 800fbf4:	1ac9      	subs	r1, r1, r3
 800fbf6:	e732      	b.n	800fa5e <lv_obj_align+0xce>
 800fbf8:	8aa1      	ldrh	r1, [r4, #20]
 800fbfa:	8a23      	ldrh	r3, [r4, #16]
 800fbfc:	3101      	adds	r1, #1
 800fbfe:	1ac9      	subs	r1, r1, r3
 800fc00:	e797      	b.n	800fb32 <lv_obj_align+0x1a2>
 800fc02:	8aa1      	ldrh	r1, [r4, #20]
 800fc04:	8a23      	ldrh	r3, [r4, #16]
 800fc06:	3101      	adds	r1, #1
 800fc08:	1ac9      	subs	r1, r1, r3
 800fc0a:	e769      	b.n	800fae0 <lv_obj_align+0x150>
            new_y = 0;
 800fc0c:	2200      	movs	r2, #0
            new_x = 0;
 800fc0e:	4611      	mov	r1, r2
 800fc10:	e73a      	b.n	800fa88 <lv_obj_align+0xf8>

0800fc12 <lv_obj_align_origo>:
{
 800fc12:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800fc16:	4605      	mov	r5, r0
 800fc18:	4616      	mov	r6, r2
 800fc1a:	f8b5 e014 	ldrh.w	lr, [r5, #20]
    return area_p->y2 - area_p->y1 + 1;
 800fc1e:	8aea      	ldrh	r2, [r5, #22]
    rel_x             = obj->coords.x1 - parent->coords.x1;
 800fc20:	f8b0 9010 	ldrh.w	r9, [r0, #16]
    rel_y             = obj->coords.y1 - parent->coords.y1;
 800fc24:	f8b0 c012 	ldrh.w	ip, [r0, #18]
    return obj->par;
 800fc28:	6804      	ldr	r4, [r0, #0]
{
 800fc2a:	f9bd 7020 	ldrsh.w	r7, [sp, #32]
    rel_y             = obj->coords.y1 - parent->coords.y1;
 800fc2e:	8a60      	ldrh	r0, [r4, #18]
    return area_p->x2 - area_p->x1 + 1;
 800fc30:	f10e 0e01 	add.w	lr, lr, #1
    return area_p->y2 - area_p->y1 + 1;
 800fc34:	3201      	adds	r2, #1
    return area_p->x2 - area_p->x1 + 1;
 800fc36:	ebae 0e09 	sub.w	lr, lr, r9
    return area_p->y2 - area_p->y1 + 1;
 800fc3a:	eba2 020c 	sub.w	r2, r2, ip
    lv_coord_t obj_w_half = lv_obj_get_width(obj) / 2;
 800fc3e:	f04f 0a02 	mov.w	sl, #2
{
 800fc42:	4698      	mov	r8, r3
    lv_coord_t obj_w_half = lv_obj_get_width(obj) / 2;
 800fc44:	fa0f fe8e 	sxth.w	lr, lr
    rel_x             = obj->coords.x1 - parent->coords.x1;
 800fc48:	8a23      	ldrh	r3, [r4, #16]
    lv_coord_t obj_w_half = lv_obj_get_width(obj) / 2;
 800fc4a:	fb9e fefa 	sdiv	lr, lr, sl
    lv_coord_t obj_h_half = lv_obj_get_height(obj) / 2;
 800fc4e:	b212      	sxth	r2, r2
    if(base == NULL) {
 800fc50:	2900      	cmp	r1, #0
 800fc52:	bf18      	it	ne
 800fc54:	460c      	movne	r4, r1
    lv_coord_t obj_h_half = lv_obj_get_height(obj) / 2;
 800fc56:	fb92 f2fa 	sdiv	r2, r2, sl
    switch(align) {
 800fc5a:	2e14      	cmp	r6, #20
 800fc5c:	d80c      	bhi.n	800fc78 <lv_obj_align_origo+0x66>
 800fc5e:	e8df f006 	tbb	[pc, r6]
 800fc62:	672e      	.short	0x672e
 800fc64:	597c894b 	.word	0x597c894b
 800fc68:	67916c9b 	.word	0x67916c9b
 800fc6c:	597c894b 	.word	0x597c894b
 800fc70:	7c6c679b 	.word	0x7c6c679b
 800fc74:	9189      	.short	0x9189
 800fc76:	9b          	.byte	0x9b
 800fc77:	00          	.byte	0x00
    rel_x             = obj->coords.x1 - parent->coords.x1;
 800fc78:	eba9 0103 	sub.w	r1, r9, r3
 800fc7c:	b209      	sxth	r1, r1
    rel_y             = obj->coords.y1 - parent->coords.y1;
 800fc7e:	ebac 0200 	sub.w	r2, ip, r0
    new_x -= par_abs_x;
 800fc82:	f8b4 e010 	ldrh.w	lr, [r4, #16]
 800fc86:	eba8 0303 	sub.w	r3, r8, r3
 800fc8a:	4473      	add	r3, lr
 800fc8c:	4419      	add	r1, r3
    new_y -= par_abs_y;
 800fc8e:	8a63      	ldrh	r3, [r4, #18]
 800fc90:	1a38      	subs	r0, r7, r0
 800fc92:	4418      	add	r0, r3
            new_y = lv_obj_get_height(base) - obj_h_half;
 800fc94:	b212      	sxth	r2, r2
    new_y -= par_abs_y;
 800fc96:	4402      	add	r2, r0
    lv_obj_set_pos(obj, new_x, new_y);
 800fc98:	b212      	sxth	r2, r2
 800fc9a:	b209      	sxth	r1, r1
 800fc9c:	4628      	mov	r0, r5
 800fc9e:	f7ff fe22 	bl	800f8e6 <lv_obj_set_pos>
    obj->realign.origo_align = 1;
 800fca2:	f895 3041 	ldrb.w	r3, [r5, #65]	; 0x41
    obj->realign.align       = align;
 800fca6:	f885 6040 	strb.w	r6, [r5, #64]	; 0x40
    obj->realign.origo_align = 1;
 800fcaa:	f043 0302 	orr.w	r3, r3, #2
    obj->realign.xofs        = x_mod;
 800fcae:	f8a5 803c 	strh.w	r8, [r5, #60]	; 0x3c
    obj->realign.yofs        = y_mod;
 800fcb2:	87ef      	strh	r7, [r5, #62]	; 0x3e
    obj->realign.base        = base;
 800fcb4:	63ac      	str	r4, [r5, #56]	; 0x38
    obj->realign.origo_align = 1;
 800fcb6:	f885 3041 	strb.w	r3, [r5, #65]	; 0x41
 800fcba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    return area_p->x2 - area_p->x1 + 1;
 800fcbe:	8aa1      	ldrh	r1, [r4, #20]
 800fcc0:	f8b4 c010 	ldrh.w	ip, [r4, #16]
    return area_p->y2 - area_p->y1 + 1;
 800fcc4:	f8b4 9012 	ldrh.w	r9, [r4, #18]
    return area_p->x2 - area_p->x1 + 1;
 800fcc8:	3101      	adds	r1, #1
 800fcca:	eba1 010c 	sub.w	r1, r1, ip
            new_x = lv_obj_get_width(base) / 2 - obj_w_half;
 800fcce:	b209      	sxth	r1, r1
 800fcd0:	f04f 0c02 	mov.w	ip, #2
 800fcd4:	fb91 f1fc 	sdiv	r1, r1, ip
 800fcd8:	eba1 010e 	sub.w	r1, r1, lr
    return area_p->y2 - area_p->y1 + 1;
 800fcdc:	f8b4 e016 	ldrh.w	lr, [r4, #22]
 800fce0:	f10e 0e01 	add.w	lr, lr, #1
 800fce4:	ebae 0e09 	sub.w	lr, lr, r9
 800fce8:	b209      	sxth	r1, r1
            new_y = lv_obj_get_height(base) / 2 - obj_h_half;
 800fcea:	fa0f fe8e 	sxth.w	lr, lr
            new_y = lv_obj_get_height(base) / 2 - obj_h_half;
 800fcee:	fb9e fefc 	sdiv	lr, lr, ip
 800fcf2:	ebae 0202 	sub.w	r2, lr, r2
 800fcf6:	e7c4      	b.n	800fc82 <lv_obj_align_origo+0x70>
    return area_p->x2 - area_p->x1 + 1;
 800fcf8:	8aa1      	ldrh	r1, [r4, #20]
 800fcfa:	f8b4 c010 	ldrh.w	ip, [r4, #16]
 800fcfe:	3101      	adds	r1, #1
 800fd00:	eba1 010c 	sub.w	r1, r1, ip
            new_x = lv_obj_get_width(base) / 2 - obj_w_half;
 800fd04:	b209      	sxth	r1, r1
 800fd06:	f04f 0c02 	mov.w	ip, #2
 800fd0a:	fb91 f1fc 	sdiv	r1, r1, ip
            new_x = lv_obj_get_width(base) - obj_w_half;
 800fd0e:	eba1 010e 	sub.w	r1, r1, lr
 800fd12:	e00f      	b.n	800fd34 <lv_obj_align_origo+0x122>
 800fd14:	8aa1      	ldrh	r1, [r4, #20]
 800fd16:	f8b4 c010 	ldrh.w	ip, [r4, #16]
 800fd1a:	3101      	adds	r1, #1
 800fd1c:	eba1 010c 	sub.w	r1, r1, ip
            new_x = lv_obj_get_width(base) / 2 - obj_w_half;
 800fd20:	b209      	sxth	r1, r1
 800fd22:	f04f 0c02 	mov.w	ip, #2
 800fd26:	fb91 f1fc 	sdiv	r1, r1, ip
            new_x = lv_obj_get_width(base) - obj_w_half;
 800fd2a:	eba1 010e 	sub.w	r1, r1, lr
 800fd2e:	e016      	b.n	800fd5e <lv_obj_align_origo+0x14c>
            new_x = -obj_w_half;
 800fd30:	f1ce 0100 	rsb	r1, lr, #0
            new_x = lv_obj_get_width(base) - obj_w_half;
 800fd34:	b209      	sxth	r1, r1
            new_y = -obj_h_half;
 800fd36:	4252      	negs	r2, r2
 800fd38:	e7a3      	b.n	800fc82 <lv_obj_align_origo+0x70>
            new_x = -obj_w_half;
 800fd3a:	f1ce 0100 	rsb	r1, lr, #0
    return area_p->y2 - area_p->y1 + 1;
 800fd3e:	f8b4 e016 	ldrh.w	lr, [r4, #22]
 800fd42:	f8b4 c012 	ldrh.w	ip, [r4, #18]
 800fd46:	f10e 0e01 	add.w	lr, lr, #1
 800fd4a:	ebae 0e0c 	sub.w	lr, lr, ip
            new_x = lv_obj_get_width(base) - obj_w_half;
 800fd4e:	b209      	sxth	r1, r1
            new_y = lv_obj_get_height(base) / 2 - obj_h_half;
 800fd50:	fa0f fe8e 	sxth.w	lr, lr
 800fd54:	f04f 0c02 	mov.w	ip, #2
 800fd58:	e7c9      	b.n	800fcee <lv_obj_align_origo+0xdc>
            new_x = -obj_w_half;
 800fd5a:	f1ce 0100 	rsb	r1, lr, #0
            new_y = lv_obj_get_height(base) - obj_h_half;
 800fd5e:	f8b4 e016 	ldrh.w	lr, [r4, #22]
 800fd62:	f1c2 0201 	rsb	r2, r2, #1
 800fd66:	4472      	add	r2, lr
 800fd68:	f8b4 e012 	ldrh.w	lr, [r4, #18]
            new_x = lv_obj_get_width(base) - obj_w_half;
 800fd6c:	b209      	sxth	r1, r1
            new_y = lv_obj_get_height(base) - obj_h_half;
 800fd6e:	eba2 020e 	sub.w	r2, r2, lr
 800fd72:	e786      	b.n	800fc82 <lv_obj_align_origo+0x70>
            new_x = lv_obj_get_width(base) - obj_w_half;
 800fd74:	f1ce 0101 	rsb	r1, lr, #1
 800fd78:	f8b4 e014 	ldrh.w	lr, [r4, #20]
 800fd7c:	4471      	add	r1, lr
 800fd7e:	f8b4 e010 	ldrh.w	lr, [r4, #16]
 800fd82:	e7c4      	b.n	800fd0e <lv_obj_align_origo+0xfc>
            new_x = lv_obj_get_width(base) - obj_w_half;
 800fd84:	f1ce 0101 	rsb	r1, lr, #1
 800fd88:	f8b4 e014 	ldrh.w	lr, [r4, #20]
 800fd8c:	4471      	add	r1, lr
 800fd8e:	f8b4 e010 	ldrh.w	lr, [r4, #16]
 800fd92:	eba1 010e 	sub.w	r1, r1, lr
 800fd96:	e7d2      	b.n	800fd3e <lv_obj_align_origo+0x12c>
            new_x = lv_obj_get_width(base) - obj_w_half;
 800fd98:	f1ce 0101 	rsb	r1, lr, #1
 800fd9c:	f8b4 e014 	ldrh.w	lr, [r4, #20]
 800fda0:	4471      	add	r1, lr
 800fda2:	f8b4 e010 	ldrh.w	lr, [r4, #16]
 800fda6:	e7c0      	b.n	800fd2a <lv_obj_align_origo+0x118>

0800fda8 <lv_obj_realign>:
{
 800fda8:	b513      	push	{r0, r1, r4, lr}
    if(obj->realign.origo_align)
 800fdaa:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 800fdae:	f9b0 403e 	ldrsh.w	r4, [r0, #62]	; 0x3e
 800fdb2:	f890 2040 	ldrb.w	r2, [r0, #64]	; 0x40
        lv_obj_align_origo(obj, obj->realign.base, obj->realign.align, obj->realign.xofs, obj->realign.yofs);
 800fdb6:	9400      	str	r4, [sp, #0]
    if(obj->realign.origo_align)
 800fdb8:	f013 0f02 	tst.w	r3, #2
        lv_obj_align_origo(obj, obj->realign.base, obj->realign.align, obj->realign.xofs, obj->realign.yofs);
 800fdbc:	6b81      	ldr	r1, [r0, #56]	; 0x38
 800fdbe:	f9b0 303c 	ldrsh.w	r3, [r0, #60]	; 0x3c
    if(obj->realign.origo_align)
 800fdc2:	d003      	beq.n	800fdcc <lv_obj_realign+0x24>
        lv_obj_align_origo(obj, obj->realign.base, obj->realign.align, obj->realign.xofs, obj->realign.yofs);
 800fdc4:	f7ff ff25 	bl	800fc12 <lv_obj_align_origo>
}
 800fdc8:	b002      	add	sp, #8
 800fdca:	bd10      	pop	{r4, pc}
        lv_obj_align(obj, obj->realign.base, obj->realign.align, obj->realign.xofs, obj->realign.yofs);
 800fdcc:	f7ff fde0 	bl	800f990 <lv_obj_align>
}
 800fdd0:	e7fa      	b.n	800fdc8 <lv_obj_realign+0x20>
	...

0800fdd4 <lv_obj_create>:
{
 800fdd4:	b570      	push	{r4, r5, r6, lr}
 800fdd6:	460d      	mov	r5, r1
    if(parent == NULL) {
 800fdd8:	4606      	mov	r6, r0
 800fdda:	2800      	cmp	r0, #0
 800fddc:	f040 80e9 	bne.w	800ffb2 <lv_obj_create+0x1de>
        lv_disp_t * disp = lv_disp_get_default();
 800fde0:	f005 f898 	bl	8014f14 <lv_disp_get_default>
        if(!disp) {
 800fde4:	2800      	cmp	r0, #0
 800fde6:	f000 8136 	beq.w	8010056 <lv_obj_create+0x282>
        new_obj = lv_ll_ins_head(&disp->scr_ll);
 800fdea:	3028      	adds	r0, #40	; 0x28
 800fdec:	f005 fb46 	bl	801547c <lv_ll_ins_head>
        lv_mem_assert(new_obj);
 800fdf0:	4604      	mov	r4, r0
 800fdf2:	b900      	cbnz	r0, 800fdf6 <lv_obj_create+0x22>
 800fdf4:	e7fe      	b.n	800fdf4 <lv_obj_create+0x20>
        lv_ll_init(&(new_obj->child_ll), sizeof(lv_obj_t));
 800fdf6:	2148      	movs	r1, #72	; 0x48
        new_obj->par = NULL; /*Screens has no a parent*/
 800fdf8:	f840 6b04 	str.w	r6, [r0], #4
        lv_ll_init(&(new_obj->child_ll), sizeof(lv_obj_t));
 800fdfc:	f005 fb34 	bl	8015468 <lv_ll_init>
        new_obj->coords.x1    = 0;
 800fe00:	8226      	strh	r6, [r4, #16]
        new_obj->coords.y1    = 0;
 800fe02:	8266      	strh	r6, [r4, #18]
        new_obj->coords.x2    = lv_disp_get_hor_res(NULL) - 1;
 800fe04:	4630      	mov	r0, r6
 800fe06:	f005 f88b 	bl	8014f20 <lv_disp_get_hor_res>
 800fe0a:	3801      	subs	r0, #1
 800fe0c:	82a0      	strh	r0, [r4, #20]
        new_obj->coords.y2    = lv_disp_get_ver_res(NULL) - 1;
 800fe0e:	4630      	mov	r0, r6
 800fe10:	f005 f896 	bl	8014f40 <lv_disp_get_ver_res>
        new_obj->realign.auto_realign = 0;
 800fe14:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
        new_obj->ext_draw_pad = 0;
 800fe18:	86a6      	strh	r6, [r4, #52]	; 0x34
        new_obj->coords.y2    = lv_disp_get_ver_res(NULL) - 1;
 800fe1a:	3801      	subs	r0, #1
        new_obj->realign.auto_realign = 0;
 800fe1c:	f366 0300 	bfi	r3, r6, #0, #1
        new_obj->coords.y2    = lv_disp_get_ver_res(NULL) - 1;
 800fe20:	82e0      	strh	r0, [r4, #22]
        new_obj->realign.align        = LV_ALIGN_CENTER;
 800fe22:	f884 6040 	strb.w	r6, [r4, #64]	; 0x40
        new_obj->realign.xofs         = 0;
 800fe26:	87a6      	strh	r6, [r4, #60]	; 0x3c
        new_obj->realign.yofs         = 0;
 800fe28:	87e6      	strh	r6, [r4, #62]	; 0x3e
        new_obj->realign.base         = NULL;
 800fe2a:	63a6      	str	r6, [r4, #56]	; 0x38
        new_obj->realign.auto_realign = 0;
 800fe2c:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
        lv_theme_t * th = lv_theme_get_current();
 800fe30:	f00a fd2a 	bl	801a888 <lv_theme_get_current>
        if(th) {
 800fe34:	2800      	cmp	r0, #0
 800fe36:	f000 80ba 	beq.w	800ffae <lv_obj_create+0x1da>
            new_obj->style_p = th->style.scr;
 800fe3a:	6803      	ldr	r3, [r0, #0]
        new_obj->click        = 0;
 800fe3c:	f894 2030 	ldrb.w	r2, [r4, #48]	; 0x30
            new_obj->style_p = &lv_style_scr;
 800fe40:	62a3      	str	r3, [r4, #40]	; 0x28
    obj->signal_cb = signal_cb;
 800fe42:	4b86      	ldr	r3, [pc, #536]	; (801005c <lv_obj_create+0x288>)
 800fe44:	61e3      	str	r3, [r4, #28]
    obj->design_cb = design_cb;
 800fe46:	4b86      	ldr	r3, [pc, #536]	; (8010060 <lv_obj_create+0x28c>)
 800fe48:	6223      	str	r3, [r4, #32]
        new_obj->parent_event = 0;
 800fe4a:	f002 0280 	and.w	r2, r2, #128	; 0x80
        new_obj->event_cb = NULL;
 800fe4e:	2300      	movs	r3, #0
        new_obj->parent_event = 0;
 800fe50:	f363 12c7 	bfi	r2, r3, #7, #1
 800fe54:	f884 2030 	strb.w	r2, [r4, #48]	; 0x30
        new_obj->reserved     = 0;
 800fe58:	f894 2031 	ldrb.w	r2, [r4, #49]	; 0x31
        new_obj->event_cb = NULL;
 800fe5c:	61a3      	str	r3, [r4, #24]
        new_obj->opa_scale    = LV_OPA_COVER;
 800fe5e:	21ff      	movs	r1, #255	; 0xff
        new_obj->reserved     = 0;
 800fe60:	f363 0287 	bfi	r2, r3, #2, #6
        memset(&new_obj->user_data, 0, sizeof(lv_obj_user_data_t));
 800fe64:	6463      	str	r3, [r4, #68]	; 0x44
        new_obj->group_p = NULL;
 800fe66:	62e3      	str	r3, [r4, #44]	; 0x2c
        new_obj->protect      = LV_PROTECT_NONE;
 800fe68:	f884 3032 	strb.w	r3, [r4, #50]	; 0x32
        new_obj->opa_scale    = LV_OPA_COVER;
 800fe6c:	f884 1033 	strb.w	r1, [r4, #51]	; 0x33
        new_obj->reserved     = 0;
 800fe70:	f884 2031 	strb.w	r2, [r4, #49]	; 0x31
        new_obj->ext_attr = NULL;
 800fe74:	6263      	str	r3, [r4, #36]	; 0x24
    if(copy != NULL) {
 800fe76:	2d00      	cmp	r5, #0
 800fe78:	f000 80e9 	beq.w	801004e <lv_obj_create+0x27a>
    memcpy(dest, src, sizeof(lv_area_t));
 800fe7c:	462a      	mov	r2, r5
 800fe7e:	f852 3f10 	ldr.w	r3, [r2, #16]!
 800fe82:	6123      	str	r3, [r4, #16]
 800fe84:	6853      	ldr	r3, [r2, #4]
 800fe86:	6163      	str	r3, [r4, #20]
        new_obj->ext_draw_pad = copy->ext_draw_pad;
 800fe88:	f9b5 3034 	ldrsh.w	r3, [r5, #52]	; 0x34
 800fe8c:	86a3      	strh	r3, [r4, #52]	; 0x34
        memcpy(&new_obj->user_data, &copy->user_data, sizeof(lv_obj_user_data_t));
 800fe8e:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 800fe90:	6463      	str	r3, [r4, #68]	; 0x44
        new_obj->realign.align        = copy->realign.align;
 800fe92:	f895 3040 	ldrb.w	r3, [r5, #64]	; 0x40
 800fe96:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
        new_obj->realign.xofs         = copy->realign.xofs;
 800fe9a:	f9b5 303c 	ldrsh.w	r3, [r5, #60]	; 0x3c
 800fe9e:	87a3      	strh	r3, [r4, #60]	; 0x3c
        new_obj->realign.yofs         = copy->realign.yofs;
 800fea0:	f9b5 303e 	ldrsh.w	r3, [r5, #62]	; 0x3e
 800fea4:	87e3      	strh	r3, [r4, #62]	; 0x3e
        new_obj->realign.base         = copy->realign.base;
 800fea6:	6bab      	ldr	r3, [r5, #56]	; 0x38
        new_obj->realign.auto_realign = copy->realign.auto_realign;
 800fea8:	f895 2041 	ldrb.w	r2, [r5, #65]	; 0x41
        new_obj->realign.base         = copy->realign.base;
 800feac:	63a3      	str	r3, [r4, #56]	; 0x38
        new_obj->realign.auto_realign = copy->realign.auto_realign;
 800feae:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 800feb2:	f362 0300 	bfi	r3, r2, #0, #1
 800feb6:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
        new_obj->event_cb = copy->event_cb;
 800feba:	69ab      	ldr	r3, [r5, #24]
        new_obj->click        = copy->click;
 800febc:	f895 2030 	ldrb.w	r2, [r5, #48]	; 0x30
        new_obj->event_cb = copy->event_cb;
 800fec0:	61a3      	str	r3, [r4, #24]
        new_obj->click        = copy->click;
 800fec2:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
 800fec6:	f362 0300 	bfi	r3, r2, #0, #1
 800feca:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
        new_obj->drag         = copy->drag;
 800fece:	f895 3030 	ldrb.w	r3, [r5, #48]	; 0x30
 800fed2:	f894 2030 	ldrb.w	r2, [r4, #48]	; 0x30
 800fed6:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800feda:	f363 0241 	bfi	r2, r3, #1, #1
 800fede:	f884 2030 	strb.w	r2, [r4, #48]	; 0x30
        new_obj->drag_dir     = copy->drag_dir;
 800fee2:	f895 2031 	ldrb.w	r2, [r5, #49]	; 0x31
 800fee6:	f894 3031 	ldrb.w	r3, [r4, #49]	; 0x31
 800feea:	f362 0301 	bfi	r3, r2, #0, #2
 800feee:	f884 3031 	strb.w	r3, [r4, #49]	; 0x31
        new_obj->drag_throw   = copy->drag_throw;
 800fef2:	f895 3030 	ldrb.w	r3, [r5, #48]	; 0x30
 800fef6:	f894 2030 	ldrb.w	r2, [r4, #48]	; 0x30
 800fefa:	f3c3 0380 	ubfx	r3, r3, #2, #1
 800fefe:	f363 0282 	bfi	r2, r3, #2, #1
 800ff02:	f884 2030 	strb.w	r2, [r4, #48]	; 0x30
        new_obj->drag_parent  = copy->drag_parent;
 800ff06:	f895 3030 	ldrb.w	r3, [r5, #48]	; 0x30
 800ff0a:	b2d2      	uxtb	r2, r2
 800ff0c:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 800ff10:	f363 02c3 	bfi	r2, r3, #3, #1
 800ff14:	f884 2030 	strb.w	r2, [r4, #48]	; 0x30
        new_obj->hidden       = copy->hidden;
 800ff18:	f895 3030 	ldrb.w	r3, [r5, #48]	; 0x30
 800ff1c:	b2d2      	uxtb	r2, r2
 800ff1e:	f3c3 1300 	ubfx	r3, r3, #4, #1
 800ff22:	f363 1204 	bfi	r2, r3, #4, #1
 800ff26:	f884 2030 	strb.w	r2, [r4, #48]	; 0x30
        new_obj->top          = copy->top;
 800ff2a:	f895 3030 	ldrb.w	r3, [r5, #48]	; 0x30
 800ff2e:	b2d2      	uxtb	r2, r2
 800ff30:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800ff34:	f363 1245 	bfi	r2, r3, #5, #1
 800ff38:	f884 2030 	strb.w	r2, [r4, #48]	; 0x30
        new_obj->parent_event = copy->parent_event;
 800ff3c:	f895 3030 	ldrb.w	r3, [r5, #48]	; 0x30
 800ff40:	b2d2      	uxtb	r2, r2
 800ff42:	09db      	lsrs	r3, r3, #7
 800ff44:	f363 12c7 	bfi	r2, r3, #7, #1
 800ff48:	f884 2030 	strb.w	r2, [r4, #48]	; 0x30
        new_obj->opa_scale_en = copy->opa_scale_en;
 800ff4c:	f895 3030 	ldrb.w	r3, [r5, #48]	; 0x30
 800ff50:	b2d2      	uxtb	r2, r2
 800ff52:	f3c3 1380 	ubfx	r3, r3, #6, #1
 800ff56:	f363 1286 	bfi	r2, r3, #6, #1
 800ff5a:	f884 2030 	strb.w	r2, [r4, #48]	; 0x30
        new_obj->protect      = copy->protect;
 800ff5e:	f895 3032 	ldrb.w	r3, [r5, #50]	; 0x32
 800ff62:	f884 3032 	strb.w	r3, [r4, #50]	; 0x32
        new_obj->opa_scale    = copy->opa_scale;
 800ff66:	f895 3033 	ldrb.w	r3, [r5, #51]	; 0x33
 800ff6a:	f884 3033 	strb.w	r3, [r4, #51]	; 0x33
        if(copy->group_p != NULL) {
 800ff6e:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
        new_obj->style_p = copy->style_p;
 800ff70:	6aab      	ldr	r3, [r5, #40]	; 0x28
 800ff72:	62a3      	str	r3, [r4, #40]	; 0x28
        if(copy->group_p != NULL) {
 800ff74:	b110      	cbz	r0, 800ff7c <lv_obj_create+0x1a8>
            lv_group_add_obj(copy->group_p, new_obj);
 800ff76:	4621      	mov	r1, r4
 800ff78:	f7ff f9e8 	bl	800f34c <lv_group_add_obj>
    return obj->par;
 800ff7c:	682b      	ldr	r3, [r5, #0]
        if(lv_obj_get_parent(copy) != NULL && parent != NULL) {
 800ff7e:	2b00      	cmp	r3, #0
 800ff80:	d060      	beq.n	8010044 <lv_obj_create+0x270>
 800ff82:	2e00      	cmp	r6, #0
 800ff84:	d05e      	beq.n	8010044 <lv_obj_create+0x270>
    rel_y             = obj->coords.y1 - parent->coords.y1;
 800ff86:	8a59      	ldrh	r1, [r3, #18]
 800ff88:	8a6a      	ldrh	r2, [r5, #18]
    rel_x             = obj->coords.x1 - parent->coords.x1;
 800ff8a:	8a1b      	ldrh	r3, [r3, #16]
    rel_y             = obj->coords.y1 - parent->coords.y1;
 800ff8c:	1a52      	subs	r2, r2, r1
    rel_x             = obj->coords.x1 - parent->coords.x1;
 800ff8e:	8a29      	ldrh	r1, [r5, #16]
 800ff90:	1ac9      	subs	r1, r1, r3
            lv_obj_set_pos(new_obj, lv_obj_get_x(copy), lv_obj_get_y(copy));
 800ff92:	b212      	sxth	r2, r2
 800ff94:	b209      	sxth	r1, r1
 800ff96:	4620      	mov	r0, r4
 800ff98:	f7ff fca5 	bl	800f8e6 <lv_obj_set_pos>
        parent->signal_cb(parent, LV_SIGNAL_CHILD_CHG, new_obj);
 800ff9c:	69f3      	ldr	r3, [r6, #28]
 800ff9e:	4622      	mov	r2, r4
 800ffa0:	2101      	movs	r1, #1
 800ffa2:	4630      	mov	r0, r6
 800ffa4:	4798      	blx	r3
        lv_obj_invalidate(new_obj);
 800ffa6:	4620      	mov	r0, r4
 800ffa8:	f7ff fc30 	bl	800f80c <lv_obj_invalidate>
 800ffac:	e051      	b.n	8010052 <lv_obj_create+0x27e>
            new_obj->style_p = &lv_style_scr;
 800ffae:	4b2d      	ldr	r3, [pc, #180]	; (8010064 <lv_obj_create+0x290>)
 800ffb0:	e744      	b.n	800fe3c <lv_obj_create+0x68>
        new_obj = lv_ll_ins_head(&parent->child_ll);
 800ffb2:	3004      	adds	r0, #4
 800ffb4:	f005 fa62 	bl	801547c <lv_ll_ins_head>
        lv_mem_assert(new_obj);
 800ffb8:	4604      	mov	r4, r0
 800ffba:	b900      	cbnz	r0, 800ffbe <lv_obj_create+0x1ea>
 800ffbc:	e7fe      	b.n	800ffbc <lv_obj_create+0x1e8>
        new_obj->par = parent; /*Set the parent*/
 800ffbe:	f840 6b04 	str.w	r6, [r0], #4
        lv_ll_init(&(new_obj->child_ll), sizeof(lv_obj_t));
 800ffc2:	2148      	movs	r1, #72	; 0x48
 800ffc4:	f005 fa50 	bl	8015468 <lv_ll_init>
        new_obj->coords.x1    = parent->coords.x1;
 800ffc8:	f9b6 3010 	ldrsh.w	r3, [r6, #16]
 800ffcc:	8223      	strh	r3, [r4, #16]
        new_obj->coords.y1    = parent->coords.y1;
 800ffce:	f9b6 3012 	ldrsh.w	r3, [r6, #18]
 800ffd2:	8263      	strh	r3, [r4, #18]
        new_obj->coords.x2    = parent->coords.x1 + LV_OBJ_DEF_WIDTH;
 800ffd4:	8a33      	ldrh	r3, [r6, #16]
        new_obj->realign.auto_realign = 0;
 800ffd6:	f894 2041 	ldrb.w	r2, [r4, #65]	; 0x41
        new_obj->coords.x2    = parent->coords.x1 + LV_OBJ_DEF_WIDTH;
 800ffda:	3319      	adds	r3, #25
 800ffdc:	82a3      	strh	r3, [r4, #20]
        new_obj->coords.y2    = parent->coords.y1 + LV_OBJ_DEF_HEIGHT;
 800ffde:	8a73      	ldrh	r3, [r6, #18]
 800ffe0:	3310      	adds	r3, #16
 800ffe2:	82e3      	strh	r3, [r4, #22]
        new_obj->ext_draw_pad = 0;
 800ffe4:	2300      	movs	r3, #0
        new_obj->realign.auto_realign = 0;
 800ffe6:	f363 0200 	bfi	r2, r3, #0, #1
        new_obj->ext_draw_pad = 0;
 800ffea:	86a3      	strh	r3, [r4, #52]	; 0x34
        new_obj->realign.align        = LV_ALIGN_CENTER;
 800ffec:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
        new_obj->realign.xofs         = 0;
 800fff0:	87a3      	strh	r3, [r4, #60]	; 0x3c
        new_obj->realign.yofs         = 0;
 800fff2:	87e3      	strh	r3, [r4, #62]	; 0x3e
        new_obj->realign.base         = NULL;
 800fff4:	63a3      	str	r3, [r4, #56]	; 0x38
        new_obj->realign.auto_realign = 0;
 800fff6:	f884 2041 	strb.w	r2, [r4, #65]	; 0x41
        lv_theme_t * th = lv_theme_get_current();
 800fffa:	f00a fc45 	bl	801a888 <lv_theme_get_current>
        if(th) {
 800fffe:	b1f8      	cbz	r0, 8010040 <lv_obj_create+0x26c>
            new_obj->style_p = th->style.panel;
 8010000:	6883      	ldr	r3, [r0, #8]
        new_obj->click        = 1;
 8010002:	f894 2030 	ldrb.w	r2, [r4, #48]	; 0x30
        new_obj->drag_dir     = LV_DRAG_DIR_ALL;
 8010006:	f894 1031 	ldrb.w	r1, [r4, #49]	; 0x31
            new_obj->style_p = &lv_style_plain_color;
 801000a:	62a3      	str	r3, [r4, #40]	; 0x28
    obj->signal_cb = signal_cb;
 801000c:	4b13      	ldr	r3, [pc, #76]	; (801005c <lv_obj_create+0x288>)
 801000e:	61e3      	str	r3, [r4, #28]
        new_obj->drag         = 0;
 8010010:	f042 0201 	orr.w	r2, r2, #1
    obj->design_cb = design_cb;
 8010014:	4b12      	ldr	r3, [pc, #72]	; (8010060 <lv_obj_create+0x28c>)
 8010016:	6223      	str	r3, [r4, #32]
        new_obj->drag_dir     = LV_DRAG_DIR_ALL;
 8010018:	f041 0103 	orr.w	r1, r1, #3
        new_obj->event_cb = NULL;
 801001c:	2300      	movs	r3, #0
        new_obj->parent_event = 0;
 801001e:	f002 0281 	and.w	r2, r2, #129	; 0x81
        new_obj->drag_dir     = LV_DRAG_DIR_ALL;
 8010022:	f884 1031 	strb.w	r1, [r4, #49]	; 0x31
        new_obj->parent_event = 0;
 8010026:	f363 12c7 	bfi	r2, r3, #7, #1
        new_obj->opa_scale    = LV_OPA_COVER;
 801002a:	21ff      	movs	r1, #255	; 0xff
        new_obj->event_cb = NULL;
 801002c:	61a3      	str	r3, [r4, #24]
        memset(&new_obj->user_data, 0, sizeof(lv_obj_user_data_t));
 801002e:	6463      	str	r3, [r4, #68]	; 0x44
        new_obj->group_p = NULL;
 8010030:	62e3      	str	r3, [r4, #44]	; 0x2c
        new_obj->protect      = LV_PROTECT_NONE;
 8010032:	f884 3032 	strb.w	r3, [r4, #50]	; 0x32
        new_obj->opa_scale    = LV_OPA_COVER;
 8010036:	f884 1033 	strb.w	r1, [r4, #51]	; 0x33
        new_obj->parent_event = 0;
 801003a:	f884 2030 	strb.w	r2, [r4, #48]	; 0x30
 801003e:	e719      	b.n	800fe74 <lv_obj_create+0xa0>
            new_obj->style_p = &lv_style_plain_color;
 8010040:	4b09      	ldr	r3, [pc, #36]	; (8010068 <lv_obj_create+0x294>)
 8010042:	e7de      	b.n	8010002 <lv_obj_create+0x22e>
            lv_obj_set_pos(new_obj, 0, 0);
 8010044:	2200      	movs	r2, #0
 8010046:	4611      	mov	r1, r2
 8010048:	4620      	mov	r0, r4
 801004a:	f7ff fc4c 	bl	800f8e6 <lv_obj_set_pos>
    if(parent != NULL) {
 801004e:	2e00      	cmp	r6, #0
 8010050:	d1a4      	bne.n	800ff9c <lv_obj_create+0x1c8>
}
 8010052:	4620      	mov	r0, r4
 8010054:	bd70      	pop	{r4, r5, r6, pc}
            return NULL;
 8010056:	4604      	mov	r4, r0
 8010058:	e7fb      	b.n	8010052 <lv_obj_create+0x27e>
 801005a:	bf00      	nop
 801005c:	08010401 	.word	0x08010401
 8010060:	080104c7 	.word	0x080104c7
 8010064:	2000c720 	.word	0x2000c720
 8010068:	2000c798 	.word	0x2000c798

0801006c <lv_obj_set_parent>:
    if(obj->par == NULL) {
 801006c:	6803      	ldr	r3, [r0, #0]
{
 801006e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010072:	4604      	mov	r4, r0
 8010074:	460d      	mov	r5, r1
    if(obj->par == NULL) {
 8010076:	b34b      	cbz	r3, 80100cc <lv_obj_set_parent+0x60>
    if(parent == NULL) {
 8010078:	b341      	cbz	r1, 80100cc <lv_obj_set_parent+0x60>
    lv_obj_invalidate(obj);
 801007a:	f7ff fbc7 	bl	800f80c <lv_obj_invalidate>
    return obj->par;
 801007e:	6826      	ldr	r6, [r4, #0]
    rel_x             = obj->coords.x1 - parent->coords.x1;
 8010080:	8a27      	ldrh	r7, [r4, #16]
 8010082:	8a33      	ldrh	r3, [r6, #16]
    rel_y             = obj->coords.y1 - parent->coords.y1;
 8010084:	f8b4 8012 	ldrh.w	r8, [r4, #18]
    rel_x             = obj->coords.x1 - parent->coords.x1;
 8010088:	1aff      	subs	r7, r7, r3
    rel_y             = obj->coords.y1 - parent->coords.y1;
 801008a:	8a73      	ldrh	r3, [r6, #18]
 801008c:	eba8 0803 	sub.w	r8, r8, r3
    lv_ll_chg_list(&obj->par->child_ll, &parent->child_ll, obj, true);
 8010090:	4622      	mov	r2, r4
 8010092:	2301      	movs	r3, #1
 8010094:	1d29      	adds	r1, r5, #4
 8010096:	1d30      	adds	r0, r6, #4
    rel_x             = obj->coords.x1 - parent->coords.x1;
 8010098:	b23f      	sxth	r7, r7
    rel_y             = obj->coords.y1 - parent->coords.y1;
 801009a:	fa0f f888 	sxth.w	r8, r8
    lv_ll_chg_list(&obj->par->child_ll, &parent->child_ll, obj, true);
 801009e:	f005 faa2 	bl	80155e6 <lv_ll_chg_list>
    lv_obj_set_pos(obj, old_pos.x, old_pos.y);
 80100a2:	4642      	mov	r2, r8
 80100a4:	4639      	mov	r1, r7
 80100a6:	4620      	mov	r0, r4
    obj->par = parent;
 80100a8:	6025      	str	r5, [r4, #0]
    lv_obj_set_pos(obj, old_pos.x, old_pos.y);
 80100aa:	f7ff fc1c 	bl	800f8e6 <lv_obj_set_pos>
    old_par->signal_cb(old_par, LV_SIGNAL_CHILD_CHG, NULL);
 80100ae:	69f3      	ldr	r3, [r6, #28]
 80100b0:	2200      	movs	r2, #0
 80100b2:	2101      	movs	r1, #1
 80100b4:	4630      	mov	r0, r6
 80100b6:	4798      	blx	r3
    parent->signal_cb(parent, LV_SIGNAL_CHILD_CHG, obj);
 80100b8:	69eb      	ldr	r3, [r5, #28]
 80100ba:	4622      	mov	r2, r4
 80100bc:	4628      	mov	r0, r5
 80100be:	2101      	movs	r1, #1
 80100c0:	4798      	blx	r3
    lv_obj_invalidate(obj);
 80100c2:	4620      	mov	r0, r4
}
 80100c4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    lv_obj_invalidate(obj);
 80100c8:	f7ff bba0 	b.w	800f80c <lv_obj_invalidate>
 80100cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080100d0 <lv_obj_set_size>:
    return area_p->x2 - area_p->x1 + 1;
 80100d0:	8a83      	ldrh	r3, [r0, #20]
{
 80100d2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80100d4:	4616      	mov	r6, r2
 80100d6:	8a02      	ldrh	r2, [r0, #16]
 80100d8:	3301      	adds	r3, #1
 80100da:	1a9b      	subs	r3, r3, r2
    if(lv_obj_get_width(obj) == w && lv_obj_get_height(obj) == h) {
 80100dc:	b21b      	sxth	r3, r3
 80100de:	4299      	cmp	r1, r3
{
 80100e0:	4604      	mov	r4, r0
 80100e2:	460d      	mov	r5, r1
    if(lv_obj_get_width(obj) == w && lv_obj_get_height(obj) == h) {
 80100e4:	d106      	bne.n	80100f4 <lv_obj_set_size+0x24>
    return area_p->y2 - area_p->y1 + 1;
 80100e6:	8ac3      	ldrh	r3, [r0, #22]
 80100e8:	8a42      	ldrh	r2, [r0, #18]
 80100ea:	3301      	adds	r3, #1
 80100ec:	1a9b      	subs	r3, r3, r2
 80100ee:	b21b      	sxth	r3, r3
 80100f0:	429e      	cmp	r6, r3
 80100f2:	d02b      	beq.n	801014c <lv_obj_set_size+0x7c>
    lv_obj_invalidate(obj);
 80100f4:	4620      	mov	r0, r4
 80100f6:	f7ff fb89 	bl	800f80c <lv_obj_invalidate>
    memcpy(dest, src, sizeof(lv_area_t));
 80100fa:	4622      	mov	r2, r4
 80100fc:	466b      	mov	r3, sp
 80100fe:	f852 0f10 	ldr.w	r0, [r2, #16]!
 8010102:	6851      	ldr	r1, [r2, #4]
    obj->coords.y2 = obj->coords.y1 + h - 1;
 8010104:	8a62      	ldrh	r2, [r4, #18]
 8010106:	c303      	stmia	r3!, {r0, r1}
    obj->coords.x2 = obj->coords.x1 + w - 1;
 8010108:	8a23      	ldrh	r3, [r4, #16]
 801010a:	3d01      	subs	r5, #1
    obj->coords.y2 = obj->coords.y1 + h - 1;
 801010c:	3e01      	subs	r6, #1
    obj->coords.x2 = obj->coords.x1 + w - 1;
 801010e:	441d      	add	r5, r3
    obj->coords.y2 = obj->coords.y1 + h - 1;
 8010110:	4416      	add	r6, r2
    obj->coords.x2 = obj->coords.x1 + w - 1;
 8010112:	82a5      	strh	r5, [r4, #20]
    obj->coords.y2 = obj->coords.y1 + h - 1;
 8010114:	82e6      	strh	r6, [r4, #22]
    obj->signal_cb(obj, LV_SIGNAL_CORD_CHG, &ori);
 8010116:	69e3      	ldr	r3, [r4, #28]
 8010118:	466a      	mov	r2, sp
 801011a:	2102      	movs	r1, #2
 801011c:	4620      	mov	r0, r4
 801011e:	4798      	blx	r3
    return obj->par;
 8010120:	6820      	ldr	r0, [r4, #0]
    if(par != NULL) par->signal_cb(par, LV_SIGNAL_CHILD_CHG, obj);
 8010122:	b118      	cbz	r0, 801012c <lv_obj_set_size+0x5c>
 8010124:	69c3      	ldr	r3, [r0, #28]
 8010126:	4622      	mov	r2, r4
 8010128:	2101      	movs	r1, #1
 801012a:	4798      	blx	r3
    LV_LL_READ(obj->child_ll, i)
 801012c:	1d26      	adds	r6, r4, #4
 801012e:	4630      	mov	r0, r6
 8010130:	f005 f9e0 	bl	80154f4 <lv_ll_get_head>
 8010134:	4605      	mov	r5, r0
 8010136:	b958      	cbnz	r0, 8010150 <lv_obj_set_size+0x80>
    lv_obj_invalidate(obj);
 8010138:	4620      	mov	r0, r4
 801013a:	f7ff fb67 	bl	800f80c <lv_obj_invalidate>
    if(obj->realign.auto_realign) lv_obj_realign(obj);
 801013e:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 8010142:	07db      	lsls	r3, r3, #31
 8010144:	d502      	bpl.n	801014c <lv_obj_set_size+0x7c>
 8010146:	4620      	mov	r0, r4
 8010148:	f7ff fe2e 	bl	800fda8 <lv_obj_realign>
}
 801014c:	b002      	add	sp, #8
 801014e:	bd70      	pop	{r4, r5, r6, pc}
        i->signal_cb(i, LV_SIGNAL_PARENT_SIZE_CHG, NULL);
 8010150:	69eb      	ldr	r3, [r5, #28]
 8010152:	2200      	movs	r2, #0
 8010154:	2103      	movs	r1, #3
 8010156:	4628      	mov	r0, r5
 8010158:	4798      	blx	r3
    LV_LL_READ(obj->child_ll, i)
 801015a:	4629      	mov	r1, r5
 801015c:	4630      	mov	r0, r6
 801015e:	f005 f9cf 	bl	8015500 <lv_ll_get_next>
 8010162:	e7e7      	b.n	8010134 <lv_obj_set_size+0x64>

08010164 <lv_obj_set_width>:
    return area_p->y2 - area_p->y1 + 1;
 8010164:	8ac2      	ldrh	r2, [r0, #22]
 8010166:	8a43      	ldrh	r3, [r0, #18]
 8010168:	3201      	adds	r2, #1
 801016a:	1ad2      	subs	r2, r2, r3
    lv_obj_set_size(obj, w, lv_obj_get_height(obj));
 801016c:	b212      	sxth	r2, r2
 801016e:	f7ff bfaf 	b.w	80100d0 <lv_obj_set_size>

08010172 <lv_obj_set_height>:
    return area_p->x2 - area_p->x1 + 1;
 8010172:	8a83      	ldrh	r3, [r0, #20]
 8010174:	8a02      	ldrh	r2, [r0, #16]
 8010176:	3301      	adds	r3, #1
 8010178:	1a9b      	subs	r3, r3, r2
    lv_obj_set_size(obj, lv_obj_get_width(obj), h);
 801017a:	460a      	mov	r2, r1
 801017c:	b219      	sxth	r1, r3
 801017e:	f7ff bfa7 	b.w	80100d0 <lv_obj_set_size>

08010182 <lv_obj_refresh_style>:
{
 8010182:	b510      	push	{r4, lr}
 8010184:	4604      	mov	r4, r0
    lv_obj_invalidate(obj);
 8010186:	f7ff fb41 	bl	800f80c <lv_obj_invalidate>
    obj->signal_cb(obj, LV_SIGNAL_STYLE_CHG, NULL);
 801018a:	69e3      	ldr	r3, [r4, #28]
 801018c:	4620      	mov	r0, r4
 801018e:	2200      	movs	r2, #0
 8010190:	2104      	movs	r1, #4
 8010192:	4798      	blx	r3
    lv_obj_invalidate(obj);
 8010194:	4620      	mov	r0, r4
}
 8010196:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    lv_obj_invalidate(obj);
 801019a:	f7ff bb37 	b.w	800f80c <lv_obj_invalidate>

0801019e <lv_obj_refresh_ext_draw_pad>:
{
 801019e:	b510      	push	{r4, lr}
    obj->ext_draw_pad = 0;
 80101a0:	2200      	movs	r2, #0
{
 80101a2:	4604      	mov	r4, r0
    obj->ext_draw_pad = 0;
 80101a4:	8682      	strh	r2, [r0, #52]	; 0x34
    obj->signal_cb(obj, LV_SIGNAL_REFR_EXT_DRAW_PAD, NULL);
 80101a6:	69c3      	ldr	r3, [r0, #28]
 80101a8:	2105      	movs	r1, #5
 80101aa:	4798      	blx	r3
    lv_obj_invalidate(obj);
 80101ac:	4620      	mov	r0, r4
}
 80101ae:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    lv_obj_invalidate(obj);
 80101b2:	f7ff bb2b 	b.w	800f80c <lv_obj_invalidate>

080101b6 <lv_obj_del>:
{
 80101b6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80101ba:	4604      	mov	r4, r0
    lv_obj_invalidate(obj);
 80101bc:	f7ff fb26 	bl	800f80c <lv_obj_invalidate>
    return obj->group_p;
 80101c0:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
    if(group) lv_group_remove_obj(obj);
 80101c2:	b117      	cbz	r7, 80101ca <lv_obj_del+0x14>
 80101c4:	4620      	mov	r0, r4
 80101c6:	f7ff f8ec 	bl	800f3a2 <lv_group_remove_obj>
    lv_anim_del(obj, NULL);
 80101ca:	2100      	movs	r1, #0
 80101cc:	4620      	mov	r0, r4
    i = lv_ll_get_head(&(obj->child_ll));
 80101ce:	1d26      	adds	r6, r4, #4
    lv_anim_del(obj, NULL);
 80101d0:	f004 fff2 	bl	80151b8 <lv_anim_del>
    i = lv_ll_get_head(&(obj->child_ll));
 80101d4:	4630      	mov	r0, r6
 80101d6:	f005 f98d 	bl	80154f4 <lv_ll_get_head>
 80101da:	4605      	mov	r5, r0
    while(i != NULL) {
 80101dc:	bb65      	cbnz	r5, 8010238 <lv_obj_del+0x82>
    lv_event_send(obj, LV_EVENT_DELETE, NULL);
 80101de:	462a      	mov	r2, r5
 80101e0:	2113      	movs	r1, #19
 80101e2:	4620      	mov	r0, r4
 80101e4:	f7ff fa7c 	bl	800f6e0 <lv_event_send>
    lv_event_mark_deleted(obj);
 80101e8:	4620      	mov	r0, r4
 80101ea:	f7ff f9a9 	bl	800f540 <lv_event_mark_deleted>
    return obj->par;
 80101ee:	6826      	ldr	r6, [r4, #0]
    if(par == NULL) { /*It is a screen*/
 80101f0:	bb66      	cbnz	r6, 801024c <lv_obj_del+0x96>
        lv_disp_t * d = lv_obj_get_disp(obj);
 80101f2:	4620      	mov	r0, r4
 80101f4:	f7ff fae4 	bl	800f7c0 <lv_obj_get_disp>
        lv_ll_rem(&d->scr_ll, obj);
 80101f8:	4621      	mov	r1, r4
 80101fa:	3028      	adds	r0, #40	; 0x28
        lv_ll_rem(&(par->child_ll), obj);
 80101fc:	f005 f9b9 	bl	8015572 <lv_ll_rem>
    lv_indev_t * indev = lv_indev_get_next(NULL);
 8010200:	2000      	movs	r0, #0
 8010202:	f004 fee1 	bl	8014fc8 <lv_indev_get_next>
            indev->proc.types.pointer.last_pressed = NULL;
 8010206:	f04f 0800 	mov.w	r8, #0
    lv_indev_t * indev = lv_indev_get_next(NULL);
 801020a:	4605      	mov	r5, r0
    while(indev) {
 801020c:	bb0d      	cbnz	r5, 8010252 <lv_obj_del+0x9c>
    obj->signal_cb(obj, LV_SIGNAL_CLEANUP, NULL);
 801020e:	69e3      	ldr	r3, [r4, #28]
 8010210:	462a      	mov	r2, r5
 8010212:	4629      	mov	r1, r5
 8010214:	4620      	mov	r0, r4
 8010216:	4798      	blx	r3
    if(obj->ext_attr != NULL) lv_mem_free(obj->ext_attr);
 8010218:	6a60      	ldr	r0, [r4, #36]	; 0x24
 801021a:	b108      	cbz	r0, 8010220 <lv_obj_del+0x6a>
 801021c:	f005 fae8 	bl	80157f0 <lv_mem_free>
    lv_mem_free(obj); /*Free the object itself*/
 8010220:	4620      	mov	r0, r4
 8010222:	f005 fae5 	bl	80157f0 <lv_mem_free>
    if(par != NULL) {
 8010226:	b126      	cbz	r6, 8010232 <lv_obj_del+0x7c>
        par->signal_cb(par, LV_SIGNAL_CHILD_CHG, NULL);
 8010228:	69f3      	ldr	r3, [r6, #28]
 801022a:	2200      	movs	r2, #0
 801022c:	2101      	movs	r1, #1
 801022e:	4630      	mov	r0, r6
 8010230:	4798      	blx	r3
}
 8010232:	2000      	movs	r0, #0
 8010234:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        i_next = lv_ll_get_next(&(obj->child_ll), i);
 8010238:	4629      	mov	r1, r5
 801023a:	4630      	mov	r0, r6
 801023c:	f005 f960 	bl	8015500 <lv_ll_get_next>
 8010240:	4680      	mov	r8, r0
        delete_children(i);
 8010242:	4628      	mov	r0, r5
 8010244:	f7ff fa55 	bl	800f6f2 <delete_children>
        i = i_next;
 8010248:	4645      	mov	r5, r8
 801024a:	e7c7      	b.n	80101dc <lv_obj_del+0x26>
        lv_ll_rem(&(par->child_ll), obj);
 801024c:	4621      	mov	r1, r4
 801024e:	1d30      	adds	r0, r6, #4
 8010250:	e7d4      	b.n	80101fc <lv_obj_del+0x46>
        if(indev->proc.types.pointer.act_obj == obj || indev->proc.types.pointer.last_obj == obj) {
 8010252:	6bab      	ldr	r3, [r5, #56]	; 0x38
 8010254:	429c      	cmp	r4, r3
 8010256:	d002      	beq.n	801025e <lv_obj_del+0xa8>
 8010258:	6beb      	ldr	r3, [r5, #60]	; 0x3c
 801025a:	429c      	cmp	r4, r3
 801025c:	d102      	bne.n	8010264 <lv_obj_del+0xae>
            lv_indev_reset(indev);
 801025e:	4628      	mov	r0, r5
 8010260:	f7ff f931 	bl	800f4c6 <lv_indev_reset>
        if(indev->proc.types.pointer.last_pressed == obj) {
 8010264:	6c2b      	ldr	r3, [r5, #64]	; 0x40
 8010266:	429c      	cmp	r4, r3
        if(indev->group == group && obj == lv_indev_get_obj_act()) {
 8010268:	6dab      	ldr	r3, [r5, #88]	; 0x58
            indev->proc.types.pointer.last_pressed = NULL;
 801026a:	bf08      	it	eq
 801026c:	f8c5 8040 	streq.w	r8, [r5, #64]	; 0x40
        if(indev->group == group && obj == lv_indev_get_obj_act()) {
 8010270:	429f      	cmp	r7, r3
 8010272:	d106      	bne.n	8010282 <lv_obj_del+0xcc>
 8010274:	f7ff f95e 	bl	800f534 <lv_indev_get_obj_act>
 8010278:	4284      	cmp	r4, r0
 801027a:	d102      	bne.n	8010282 <lv_obj_del+0xcc>
            lv_indev_reset(indev);
 801027c:	4628      	mov	r0, r5
 801027e:	f7ff f922 	bl	800f4c6 <lv_indev_reset>
        indev = lv_indev_get_next(indev);
 8010282:	4628      	mov	r0, r5
 8010284:	f004 fea0 	bl	8014fc8 <lv_indev_get_next>
 8010288:	4605      	mov	r5, r0
 801028a:	e7bf      	b.n	801020c <lv_obj_del+0x56>

0801028c <lv_obj_get_parent>:
}
 801028c:	6800      	ldr	r0, [r0, #0]
 801028e:	4770      	bx	lr

08010290 <lv_obj_get_child>:
{
 8010290:	3004      	adds	r0, #4
    if(child == NULL) {
 8010292:	b909      	cbnz	r1, 8010298 <lv_obj_get_child+0x8>
        result = lv_ll_get_head(&obj->child_ll);
 8010294:	f005 b92e 	b.w	80154f4 <lv_ll_get_head>
        result = lv_ll_get_next(&obj->child_ll, child);
 8010298:	f005 b932 	b.w	8015500 <lv_ll_get_next>

0801029c <refresh_children_style>:
{
 801029c:	b538      	push	{r3, r4, r5, lr}
 801029e:	4605      	mov	r5, r0
        result = lv_ll_get_head(&obj->child_ll);
 80102a0:	3004      	adds	r0, #4
 80102a2:	f005 f927 	bl	80154f4 <lv_ll_get_head>
        child = lv_obj_get_child(obj, child);
 80102a6:	4604      	mov	r4, r0
    while(child != NULL) {
 80102a8:	b900      	cbnz	r0, 80102ac <refresh_children_style+0x10>
}
 80102aa:	bd38      	pop	{r3, r4, r5, pc}
        if(child->style_p == NULL) {
 80102ac:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80102ae:	b953      	cbnz	r3, 80102c6 <refresh_children_style+0x2a>
            refresh_children_style(child); /*Check children too*/
 80102b0:	4620      	mov	r0, r4
 80102b2:	f7ff fff3 	bl	801029c <refresh_children_style>
            lv_obj_refresh_style(child);   /*Notify the child about the style change*/
 80102b6:	4620      	mov	r0, r4
 80102b8:	f7ff ff63 	bl	8010182 <lv_obj_refresh_style>
        child = lv_obj_get_child(obj, child);
 80102bc:	4621      	mov	r1, r4
 80102be:	4628      	mov	r0, r5
 80102c0:	f7ff ffe6 	bl	8010290 <lv_obj_get_child>
 80102c4:	e7ef      	b.n	80102a6 <refresh_children_style+0xa>
        } else if(child->style_p->glass) {
 80102c6:	781b      	ldrb	r3, [r3, #0]
 80102c8:	07db      	lsls	r3, r3, #31
 80102ca:	d5f7      	bpl.n	80102bc <refresh_children_style+0x20>
            refresh_children_style(child);
 80102cc:	4620      	mov	r0, r4
 80102ce:	f7ff ffe5 	bl	801029c <refresh_children_style>
 80102d2:	e7f3      	b.n	80102bc <refresh_children_style+0x20>

080102d4 <lv_obj_set_style>:
{
 80102d4:	b510      	push	{r4, lr}
 80102d6:	4604      	mov	r4, r0
    obj->style_p = style;
 80102d8:	6281      	str	r1, [r0, #40]	; 0x28
    refresh_children_style(obj);
 80102da:	f7ff ffdf 	bl	801029c <refresh_children_style>
    lv_obj_refresh_style(obj);
 80102de:	4620      	mov	r0, r4
}
 80102e0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    lv_obj_refresh_style(obj);
 80102e4:	f7ff bf4d 	b.w	8010182 <lv_obj_refresh_style>

080102e8 <report_style_mod_core>:
{
 80102e8:	b570      	push	{r4, r5, r6, lr}
    LV_LL_READ(obj->child_ll, i)
 80102ea:	1d0e      	adds	r6, r1, #4
{
 80102ec:	4605      	mov	r5, r0
    LV_LL_READ(obj->child_ll, i)
 80102ee:	4630      	mov	r0, r6
 80102f0:	f005 f900 	bl	80154f4 <lv_ll_get_head>
 80102f4:	4604      	mov	r4, r0
 80102f6:	b900      	cbnz	r0, 80102fa <report_style_mod_core+0x12>
}
 80102f8:	bd70      	pop	{r4, r5, r6, pc}
        if(i->style_p == style_p || style_p == NULL) {
 80102fa:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80102fc:	42ab      	cmp	r3, r5
 80102fe:	d000      	beq.n	8010302 <report_style_mod_core+0x1a>
 8010300:	b92d      	cbnz	r5, 801030e <report_style_mod_core+0x26>
            refresh_children_style(i);
 8010302:	4620      	mov	r0, r4
 8010304:	f7ff ffca 	bl	801029c <refresh_children_style>
            lv_obj_refresh_style(i);
 8010308:	4620      	mov	r0, r4
 801030a:	f7ff ff3a 	bl	8010182 <lv_obj_refresh_style>
        report_style_mod_core(style_p, i);
 801030e:	4621      	mov	r1, r4
 8010310:	4628      	mov	r0, r5
 8010312:	f7ff ffe9 	bl	80102e8 <report_style_mod_core>
    LV_LL_READ(obj->child_ll, i)
 8010316:	4621      	mov	r1, r4
 8010318:	4630      	mov	r0, r6
 801031a:	f005 f8f1 	bl	8015500 <lv_ll_get_next>
 801031e:	e7e9      	b.n	80102f4 <report_style_mod_core+0xc>

08010320 <lv_obj_report_style_mod>:
{
 8010320:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010322:	4606      	mov	r6, r0
    lv_disp_t * d = lv_disp_get_next(NULL);
 8010324:	2000      	movs	r0, #0
        d = lv_disp_get_next(d);
 8010326:	f004 fe2b 	bl	8014f80 <lv_disp_get_next>
 801032a:	4605      	mov	r5, r0
    while(d) {
 801032c:	b900      	cbnz	r0, 8010330 <lv_obj_report_style_mod+0x10>
}
 801032e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        LV_LL_READ(d->scr_ll, i)
 8010330:	f105 0728 	add.w	r7, r5, #40	; 0x28
 8010334:	4638      	mov	r0, r7
 8010336:	f005 f8dd 	bl	80154f4 <lv_ll_get_head>
 801033a:	4604      	mov	r4, r0
 801033c:	b908      	cbnz	r0, 8010342 <lv_obj_report_style_mod+0x22>
        d = lv_disp_get_next(d);
 801033e:	4628      	mov	r0, r5
 8010340:	e7f1      	b.n	8010326 <lv_obj_report_style_mod+0x6>
            if(i->style_p == style || style == NULL) {
 8010342:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8010344:	42b3      	cmp	r3, r6
 8010346:	d000      	beq.n	801034a <lv_obj_report_style_mod+0x2a>
 8010348:	b916      	cbnz	r6, 8010350 <lv_obj_report_style_mod+0x30>
                lv_obj_refresh_style(i);
 801034a:	4620      	mov	r0, r4
 801034c:	f7ff ff19 	bl	8010182 <lv_obj_refresh_style>
            report_style_mod_core(style, i);
 8010350:	4621      	mov	r1, r4
 8010352:	4630      	mov	r0, r6
 8010354:	f7ff ffc8 	bl	80102e8 <report_style_mod_core>
        LV_LL_READ(d->scr_ll, i)
 8010358:	4621      	mov	r1, r4
 801035a:	4638      	mov	r0, r7
 801035c:	f005 f8d0 	bl	8015500 <lv_ll_get_next>
 8010360:	e7eb      	b.n	801033a <lv_obj_report_style_mod+0x1a>

08010362 <lv_obj_get_coords>:
    memcpy(dest, src, sizeof(lv_area_t));
 8010362:	f850 3f10 	ldr.w	r3, [r0, #16]!
 8010366:	600b      	str	r3, [r1, #0]
 8010368:	6843      	ldr	r3, [r0, #4]
 801036a:	604b      	str	r3, [r1, #4]
 801036c:	4770      	bx	lr

0801036e <lv_obj_get_x>:
    rel_x             = obj->coords.x1 - parent->coords.x1;
 801036e:	6803      	ldr	r3, [r0, #0]
 8010370:	8a00      	ldrh	r0, [r0, #16]
 8010372:	8a1b      	ldrh	r3, [r3, #16]
 8010374:	1ac0      	subs	r0, r0, r3
}
 8010376:	b200      	sxth	r0, r0
 8010378:	4770      	bx	lr

0801037a <lv_obj_get_y>:
    rel_y             = obj->coords.y1 - parent->coords.y1;
 801037a:	6803      	ldr	r3, [r0, #0]
 801037c:	8a40      	ldrh	r0, [r0, #18]
 801037e:	8a5b      	ldrh	r3, [r3, #18]
 8010380:	1ac0      	subs	r0, r0, r3
}
 8010382:	b200      	sxth	r0, r0
 8010384:	4770      	bx	lr

08010386 <lv_obj_get_width>:
    return area_p->x2 - area_p->x1 + 1;
 8010386:	8a83      	ldrh	r3, [r0, #20]
 8010388:	8a00      	ldrh	r0, [r0, #16]
 801038a:	3301      	adds	r3, #1
 801038c:	1a18      	subs	r0, r3, r0
}
 801038e:	b200      	sxth	r0, r0
 8010390:	4770      	bx	lr

08010392 <lv_obj_get_height>:
    return area_p->y2 - area_p->y1 + 1;
 8010392:	8ac3      	ldrh	r3, [r0, #22]
 8010394:	8a40      	ldrh	r0, [r0, #18]
 8010396:	3301      	adds	r3, #1
 8010398:	1a18      	subs	r0, r3, r0
}
 801039a:	b200      	sxth	r0, r0
 801039c:	4770      	bx	lr

0801039e <lv_obj_get_auto_realign>:
    return obj->realign.auto_realign ? true : false;
 801039e:	f890 0041 	ldrb.w	r0, [r0, #65]	; 0x41
}
 80103a2:	f000 0001 	and.w	r0, r0, #1
 80103a6:	4770      	bx	lr

080103a8 <lv_obj_get_style>:
{
 80103a8:	b570      	push	{r4, r5, r6, lr}
    const lv_style_t * style_act = obj->style_p;
 80103aa:	6a85      	ldr	r5, [r0, #40]	; 0x28
{
 80103ac:	4606      	mov	r6, r0
    if(style_act == NULL) {
 80103ae:	b98d      	cbnz	r5, 80103d4 <lv_obj_get_style+0x2c>
        lv_obj_t * par = obj->par;
 80103b0:	6804      	ldr	r4, [r0, #0]
        while(par) {
 80103b2:	b17c      	cbz	r4, 80103d4 <lv_obj_get_style+0x2c>
            if(par->style_p) {
 80103b4:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80103b6:	b1fb      	cbz	r3, 80103f8 <lv_obj_get_style+0x50>
                if(par->style_p->glass == 0) {
 80103b8:	781b      	ldrb	r3, [r3, #0]
 80103ba:	07db      	lsls	r3, r3, #31
 80103bc:	d41c      	bmi.n	80103f8 <lv_obj_get_style+0x50>
    return obj->group_p;
 80103be:	6ae5      	ldr	r5, [r4, #44]	; 0x2c
                    if(lv_group_get_focused(g) == par) {
 80103c0:	4628      	mov	r0, r5
 80103c2:	f7ff f83b 	bl	800f43c <lv_group_get_focused>
 80103c6:	4284      	cmp	r4, r0
 80103c8:	d114      	bne.n	80103f4 <lv_obj_get_style+0x4c>
                        style_act = lv_group_mod_style(g, par->style_p);
 80103ca:	4628      	mov	r0, r5
 80103cc:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 80103ce:	f7ff f822 	bl	800f416 <lv_group_mod_style>
 80103d2:	4605      	mov	r5, r0
    if(obj->group_p) {
 80103d4:	6af0      	ldr	r0, [r6, #44]	; 0x2c
 80103d6:	b140      	cbz	r0, 80103ea <lv_obj_get_style+0x42>
        if(lv_group_get_focused(obj->group_p) == obj) {
 80103d8:	f7ff f830 	bl	800f43c <lv_group_get_focused>
 80103dc:	4286      	cmp	r6, r0
 80103de:	d104      	bne.n	80103ea <lv_obj_get_style+0x42>
            style_act = lv_group_mod_style(obj->group_p, style_act);
 80103e0:	4629      	mov	r1, r5
 80103e2:	6af0      	ldr	r0, [r6, #44]	; 0x2c
 80103e4:	f7ff f817 	bl	800f416 <lv_group_mod_style>
 80103e8:	4605      	mov	r5, r0
}
 80103ea:	4804      	ldr	r0, [pc, #16]	; (80103fc <lv_obj_get_style+0x54>)
 80103ec:	2d00      	cmp	r5, #0
 80103ee:	bf18      	it	ne
 80103f0:	4628      	movne	r0, r5
 80103f2:	bd70      	pop	{r4, r5, r6, pc}
                        style_act = par->style_p;
 80103f4:	6aa5      	ldr	r5, [r4, #40]	; 0x28
 80103f6:	e7ed      	b.n	80103d4 <lv_obj_get_style+0x2c>
            par = par->par;
 80103f8:	6824      	ldr	r4, [r4, #0]
 80103fa:	e7da      	b.n	80103b2 <lv_obj_get_style+0xa>
 80103fc:	2000c6a8 	.word	0x2000c6a8

08010400 <lv_obj_signal>:
{
 8010400:	b570      	push	{r4, r5, r6, lr}
 8010402:	460c      	mov	r4, r1
 8010404:	4605      	mov	r5, r0
 8010406:	4616      	mov	r6, r2
    const lv_style_t * style = lv_obj_get_style(obj);
 8010408:	f7ff ffce 	bl	80103a8 <lv_obj_get_style>
    if(sign == LV_SIGNAL_CHILD_CHG) {
 801040c:	2c01      	cmp	r4, #1
 801040e:	d105      	bne.n	801041c <lv_obj_signal+0x1c>
        if(lv_obj_is_protected(obj, LV_PROTECT_CHILD_CHG) != false) res = LV_RES_INV;
 8010410:	f895 0032 	ldrb.w	r0, [r5, #50]	; 0x32
 8010414:	43c0      	mvns	r0, r0
 8010416:	f000 0001 	and.w	r0, r0, #1
 801041a:	bd70      	pop	{r4, r5, r6, pc}
    } else if(sign == LV_SIGNAL_REFR_EXT_DRAW_PAD) {
 801041c:	2c05      	cmp	r4, #5
 801041e:	d108      	bne.n	8010432 <lv_obj_signal+0x32>
        if(style->body.shadow.width > obj->ext_draw_pad) obj->ext_draw_pad = style->body.shadow.width;
 8010420:	f9b0 3012 	ldrsh.w	r3, [r0, #18]
 8010424:	f9b5 2034 	ldrsh.w	r2, [r5, #52]	; 0x34
 8010428:	429a      	cmp	r2, r3
 801042a:	da00      	bge.n	801042e <lv_obj_signal+0x2e>
 801042c:	86ab      	strh	r3, [r5, #52]	; 0x34
    lv_res_t res = LV_RES_OK;
 801042e:	2001      	movs	r0, #1
}
 8010430:	bd70      	pop	{r4, r5, r6, pc}
    } else if(sign == LV_SIGNAL_STYLE_CHG) {
 8010432:	2c04      	cmp	r4, #4
 8010434:	d103      	bne.n	801043e <lv_obj_signal+0x3e>
        lv_obj_refresh_ext_draw_pad(obj);
 8010436:	4628      	mov	r0, r5
 8010438:	f7ff feb1 	bl	801019e <lv_obj_refresh_ext_draw_pad>
 801043c:	e7f7      	b.n	801042e <lv_obj_signal+0x2e>
    } else if(sign == LV_SIGNAL_GET_TYPE) {
 801043e:	2c06      	cmp	r4, #6
        buf->type[0]        = "lv_obj";
 8010440:	bf04      	itt	eq
 8010442:	4b01      	ldreq	r3, [pc, #4]	; (8010448 <lv_obj_signal+0x48>)
 8010444:	6033      	streq	r3, [r6, #0]
 8010446:	e7f2      	b.n	801042e <lv_obj_signal+0x2e>
 8010448:	080f4ee2 	.word	0x080f4ee2

0801044c <lv_obj_get_inner_coords>:
{
 801044c:	b510      	push	{r4, lr}
 801044e:	460c      	mov	r4, r1
    const lv_style_t * style = lv_obj_get_style(obj);
 8010450:	f7ff ffaa 	bl	80103a8 <lv_obj_get_style>
    if(style->body.border.part & LV_BORDER_LEFT) coords_p->x1 += style->body.border.width;
 8010454:	7b83      	ldrb	r3, [r0, #14]
 8010456:	075a      	lsls	r2, r3, #29
 8010458:	bf41      	itttt	mi
 801045a:	8822      	ldrhmi	r2, [r4, #0]
 801045c:	8981      	ldrhmi	r1, [r0, #12]
 801045e:	1852      	addmi	r2, r2, r1
 8010460:	8022      	strhmi	r2, [r4, #0]
    if(style->body.border.part & LV_BORDER_RIGHT) coords_p->x2 -= style->body.border.width;
 8010462:	0719      	lsls	r1, r3, #28
 8010464:	bf41      	itttt	mi
 8010466:	88a2      	ldrhmi	r2, [r4, #4]
 8010468:	8981      	ldrhmi	r1, [r0, #12]
 801046a:	1a52      	submi	r2, r2, r1
 801046c:	80a2      	strhmi	r2, [r4, #4]
    if(style->body.border.part & LV_BORDER_TOP) coords_p->y1 += style->body.border.width;
 801046e:	079a      	lsls	r2, r3, #30
 8010470:	bf41      	itttt	mi
 8010472:	8862      	ldrhmi	r2, [r4, #2]
 8010474:	8981      	ldrhmi	r1, [r0, #12]
 8010476:	1852      	addmi	r2, r2, r1
 8010478:	8062      	strhmi	r2, [r4, #2]
    if(style->body.border.part & LV_BORDER_BOTTOM) coords_p->y2 -= style->body.border.width;
 801047a:	07db      	lsls	r3, r3, #31
 801047c:	bf41      	itttt	mi
 801047e:	88e3      	ldrhmi	r3, [r4, #6]
 8010480:	8982      	ldrhmi	r2, [r0, #12]
 8010482:	1a9b      	submi	r3, r3, r2
 8010484:	80e3      	strhmi	r3, [r4, #6]
 8010486:	bd10      	pop	{r4, pc}

08010488 <lv_obj_get_width_fit>:
{
 8010488:	b510      	push	{r4, lr}
 801048a:	4604      	mov	r4, r0
    const lv_style_t * style = lv_obj_get_style(obj);
 801048c:	f7ff ff8c 	bl	80103a8 <lv_obj_get_style>
    return area_p->x2 - area_p->x1 + 1;
 8010490:	8aa3      	ldrh	r3, [r4, #20]
 8010492:	8a22      	ldrh	r2, [r4, #16]
 8010494:	3301      	adds	r3, #1
 8010496:	1a9b      	subs	r3, r3, r2
    return lv_obj_get_width(obj) - style->body.padding.left - style->body.padding.right;
 8010498:	8b42      	ldrh	r2, [r0, #26]
 801049a:	8b80      	ldrh	r0, [r0, #28]
 801049c:	1a9b      	subs	r3, r3, r2
 801049e:	1a18      	subs	r0, r3, r0
}
 80104a0:	b200      	sxth	r0, r0
 80104a2:	bd10      	pop	{r4, pc}

080104a4 <lv_obj_get_hidden>:
    return obj->hidden == 0 ? false : true;
 80104a4:	f890 0030 	ldrb.w	r0, [r0, #48]	; 0x30
}
 80104a8:	f3c0 1000 	ubfx	r0, r0, #4, #1
 80104ac:	4770      	bx	lr

080104ae <lv_obj_get_opa_scale>:
    while(parent) {
 80104ae:	b908      	cbnz	r0, 80104b4 <lv_obj_get_opa_scale+0x6>
    return LV_OPA_COVER;
 80104b0:	20ff      	movs	r0, #255	; 0xff
}
 80104b2:	4770      	bx	lr
        if(parent->opa_scale_en) return parent->opa_scale;
 80104b4:	f890 3030 	ldrb.w	r3, [r0, #48]	; 0x30
 80104b8:	065b      	lsls	r3, r3, #25
 80104ba:	d502      	bpl.n	80104c2 <lv_obj_get_opa_scale+0x14>
 80104bc:	f890 0033 	ldrb.w	r0, [r0, #51]	; 0x33
 80104c0:	4770      	bx	lr
    return obj->par;
 80104c2:	6800      	ldr	r0, [r0, #0]
 80104c4:	e7f3      	b.n	80104ae <lv_obj_get_opa_scale>

080104c6 <lv_obj_design>:
    if(mode == LV_DESIGN_COVER_CHK) {
 80104c6:	2a02      	cmp	r2, #2
{
 80104c8:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80104ca:	4604      	mov	r4, r0
 80104cc:	460e      	mov	r6, r1
    if(mode == LV_DESIGN_COVER_CHK) {
 80104ce:	d13c      	bne.n	801054a <lv_obj_design+0x84>
        if(lv_area_is_in(mask_p, &obj->coords) == false) return false;
 80104d0:	f100 0510 	add.w	r5, r0, #16
 80104d4:	4629      	mov	r1, r5
 80104d6:	4630      	mov	r0, r6
 80104d8:	f004 ff70 	bl	80153bc <lv_area_is_in>
 80104dc:	b390      	cbz	r0, 8010544 <lv_obj_design+0x7e>
        const lv_style_t * style = lv_obj_get_style(obj);
 80104de:	4620      	mov	r0, r4
 80104e0:	f7ff ff62 	bl	80103a8 <lv_obj_get_style>
        if(style->body.opa < LV_OPA_MAX) return false;
 80104e4:	7a03      	ldrb	r3, [r0, #8]
 80104e6:	2bfa      	cmp	r3, #250	; 0xfa
 80104e8:	d92c      	bls.n	8010544 <lv_obj_design+0x7e>
        lv_coord_t r = style->body.radius;
 80104ea:	f9b0 4006 	ldrsh.w	r4, [r0, #6]
        if(r == LV_RADIUS_CIRCLE) return false;
 80104ee:	f647 4318 	movw	r3, #31768	; 0x7c18
 80104f2:	429c      	cmp	r4, r3
 80104f4:	d026      	beq.n	8010544 <lv_obj_design+0x7e>
    memcpy(dest, src, sizeof(lv_area_t));
 80104f6:	6828      	ldr	r0, [r5, #0]
 80104f8:	6869      	ldr	r1, [r5, #4]
 80104fa:	466b      	mov	r3, sp
 80104fc:	c303      	stmia	r3!, {r0, r1}
        area_tmp.x1 += r;
 80104fe:	f8bd 3000 	ldrh.w	r3, [sp]
 8010502:	b2a4      	uxth	r4, r4
 8010504:	4423      	add	r3, r4
 8010506:	f8ad 3000 	strh.w	r3, [sp]
        area_tmp.x2 -= r;
 801050a:	f8bd 3004 	ldrh.w	r3, [sp, #4]
        if(lv_area_is_in(mask_p, &area_tmp) == false) return false;
 801050e:	4669      	mov	r1, sp
        area_tmp.x2 -= r;
 8010510:	1b1b      	subs	r3, r3, r4
        if(lv_area_is_in(mask_p, &area_tmp) == false) return false;
 8010512:	4630      	mov	r0, r6
        area_tmp.x2 -= r;
 8010514:	f8ad 3004 	strh.w	r3, [sp, #4]
        if(lv_area_is_in(mask_p, &area_tmp) == false) return false;
 8010518:	f004 ff50 	bl	80153bc <lv_area_is_in>
 801051c:	b190      	cbz	r0, 8010544 <lv_obj_design+0x7e>
 801051e:	6828      	ldr	r0, [r5, #0]
 8010520:	6869      	ldr	r1, [r5, #4]
 8010522:	466b      	mov	r3, sp
 8010524:	c303      	stmia	r3!, {r0, r1}
        area_tmp.y1 += r;
 8010526:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 801052a:	4423      	add	r3, r4
 801052c:	f8ad 3002 	strh.w	r3, [sp, #2]
        area_tmp.y2 -= r;
 8010530:	f8bd 3006 	ldrh.w	r3, [sp, #6]
        if(lv_area_is_in(mask_p, &area_tmp) == false) return false;
 8010534:	4669      	mov	r1, sp
        area_tmp.y2 -= r;
 8010536:	1b1c      	subs	r4, r3, r4
        if(lv_area_is_in(mask_p, &area_tmp) == false) return false;
 8010538:	4630      	mov	r0, r6
        area_tmp.y2 -= r;
 801053a:	f8ad 4006 	strh.w	r4, [sp, #6]
        if(lv_area_is_in(mask_p, &area_tmp) == false) return false;
 801053e:	f004 ff3d 	bl	80153bc <lv_area_is_in>
 8010542:	b900      	cbnz	r0, 8010546 <lv_obj_design+0x80>
        if(lv_area_is_in(mask_p, &obj->coords) == false) return false;
 8010544:	2000      	movs	r0, #0
}
 8010546:	b002      	add	sp, #8
 8010548:	bd70      	pop	{r4, r5, r6, pc}
    } else if(mode == LV_DESIGN_DRAW_MAIN) {
 801054a:	b95a      	cbnz	r2, 8010564 <lv_obj_design+0x9e>
        const lv_style_t * style = lv_obj_get_style(obj);
 801054c:	f7ff ff2c 	bl	80103a8 <lv_obj_get_style>
 8010550:	4602      	mov	r2, r0
        lv_draw_rect(&obj->coords, mask_p, style, lv_obj_get_opa_scale(obj));
 8010552:	4620      	mov	r0, r4
 8010554:	f7ff ffab 	bl	80104ae <lv_obj_get_opa_scale>
 8010558:	4631      	mov	r1, r6
 801055a:	4603      	mov	r3, r0
 801055c:	f104 0010 	add.w	r0, r4, #16
 8010560:	f002 f8d2 	bl	8012708 <lv_draw_rect>
    return true;
 8010564:	2001      	movs	r0, #1
 8010566:	e7ee      	b.n	8010546 <lv_obj_design+0x80>

08010568 <lv_obj_is_protected>:
    return (obj->protect & prot) == 0 ? false : true;
 8010568:	f890 3032 	ldrb.w	r3, [r0, #50]	; 0x32
 801056c:	4219      	tst	r1, r3
}
 801056e:	bf14      	ite	ne
 8010570:	2001      	movne	r0, #1
 8010572:	2000      	moveq	r0, #0
 8010574:	4770      	bx	lr

08010576 <lv_obj_get_signal_cb>:
}
 8010576:	69c0      	ldr	r0, [r0, #28]
 8010578:	4770      	bx	lr

0801057a <lv_obj_get_design_cb>:
}
 801057a:	6a00      	ldr	r0, [r0, #32]
 801057c:	4770      	bx	lr

0801057e <lv_obj_get_ext_attr>:
}
 801057e:	6a40      	ldr	r0, [r0, #36]	; 0x24
 8010580:	4770      	bx	lr

08010582 <lv_obj_get_user_data>:
}
 8010582:	6c40      	ldr	r0, [r0, #68]	; 0x44
 8010584:	4770      	bx	lr

08010586 <lv_obj_set_user_data>:
    memcpy(&obj->user_data, &data, sizeof(lv_obj_user_data_t));
 8010586:	6441      	str	r1, [r0, #68]	; 0x44
 8010588:	4770      	bx	lr

0801058a <lv_obj_get_group>:
}
 801058a:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
 801058c:	4770      	bx	lr

0801058e <lv_obj_is_focused>:
{
 801058e:	b510      	push	{r4, lr}
 8010590:	4604      	mov	r4, r0
    if(obj->group_p) {
 8010592:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
 8010594:	b120      	cbz	r0, 80105a0 <lv_obj_is_focused+0x12>
        if(lv_group_get_focused(obj->group_p) == obj) return true;
 8010596:	f7fe ff51 	bl	800f43c <lv_group_get_focused>
 801059a:	1a23      	subs	r3, r4, r0
 801059c:	4258      	negs	r0, r3
 801059e:	4158      	adcs	r0, r3
}
 80105a0:	bd10      	pop	{r4, pc}
	...

080105a4 <lv_refr_vdb_flush>:

/**
 * Flush the content of the VDB
 */
static void lv_refr_vdb_flush(void)
{
 80105a4:	b538      	push	{r3, r4, r5, lr}
    lv_disp_buf_t * vdb = lv_disp_get_buf(disp_refr);
 80105a6:	4d10      	ldr	r5, [pc, #64]	; (80105e8 <lv_refr_vdb_flush+0x44>)
 80105a8:	6828      	ldr	r0, [r5, #0]
 80105aa:	f004 fcf3 	bl	8014f94 <lv_disp_get_buf>
 80105ae:	4604      	mov	r4, r0

    /*In double buffered mode wait until the other buffer is flushed before flushing the current
     * one*/
    if(lv_disp_is_double_buf(disp_refr)) {
 80105b0:	6828      	ldr	r0, [r5, #0]
 80105b2:	f004 fcf1 	bl	8014f98 <lv_disp_is_double_buf>
 80105b6:	b110      	cbz	r0, 80105be <lv_refr_vdb_flush+0x1a>
        while(vdb->flushing)
 80105b8:	69a3      	ldr	r3, [r4, #24]
 80105ba:	07db      	lsls	r3, r3, #31
 80105bc:	d4fc      	bmi.n	80105b8 <lv_refr_vdb_flush+0x14>
            ;
    }

    vdb->flushing = 1;
 80105be:	7e23      	ldrb	r3, [r4, #24]
    return disp_refr;
 80105c0:	6828      	ldr	r0, [r5, #0]
    vdb->flushing = 1;
 80105c2:	f043 0301 	orr.w	r3, r3, #1
 80105c6:	7623      	strb	r3, [r4, #24]

    /*Flush the rendered content to the display*/
    lv_disp_t * disp = lv_refr_get_disp_refreshing();
    if(disp->driver.flush_cb) disp->driver.flush_cb(&disp->driver, &vdb->area, vdb->buf_act);
 80105c8:	68c3      	ldr	r3, [r0, #12]
 80105ca:	b11b      	cbz	r3, 80105d4 <lv_refr_vdb_flush+0x30>
 80105cc:	68a2      	ldr	r2, [r4, #8]
 80105ce:	f104 0110 	add.w	r1, r4, #16
 80105d2:	4798      	blx	r3

    if(vdb->buf1 && vdb->buf2) {
 80105d4:	6823      	ldr	r3, [r4, #0]
 80105d6:	b133      	cbz	r3, 80105e6 <lv_refr_vdb_flush+0x42>
 80105d8:	6862      	ldr	r2, [r4, #4]
 80105da:	b122      	cbz	r2, 80105e6 <lv_refr_vdb_flush+0x42>
        if(vdb->buf_act == vdb->buf1)
 80105dc:	68a1      	ldr	r1, [r4, #8]
            vdb->buf_act = vdb->buf2;
 80105de:	428b      	cmp	r3, r1
 80105e0:	bf08      	it	eq
 80105e2:	4613      	moveq	r3, r2
 80105e4:	60a3      	str	r3, [r4, #8]
 80105e6:	bd38      	pop	{r3, r4, r5, pc}
 80105e8:	200061e8 	.word	0x200061e8

080105ec <lv_refr_get_top_obj>:
{
 80105ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80105ee:	460c      	mov	r4, r1
    if(lv_area_is_in(area_p, &obj->coords) && obj->hidden == 0) {
 80105f0:	3110      	adds	r1, #16
{
 80105f2:	4606      	mov	r6, r0
    if(lv_area_is_in(area_p, &obj->coords) && obj->hidden == 0) {
 80105f4:	f004 fee2 	bl	80153bc <lv_area_is_in>
 80105f8:	b908      	cbnz	r0, 80105fe <lv_refr_get_top_obj+0x12>
    lv_obj_t * found_p = NULL;
 80105fa:	2000      	movs	r0, #0
 80105fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if(lv_area_is_in(area_p, &obj->coords) && obj->hidden == 0) {
 80105fe:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
 8010602:	06db      	lsls	r3, r3, #27
 8010604:	d4f9      	bmi.n	80105fa <lv_refr_get_top_obj+0xe>
        LV_LL_READ(obj->child_ll, i)
 8010606:	1d27      	adds	r7, r4, #4
 8010608:	4638      	mov	r0, r7
 801060a:	f004 ff73 	bl	80154f4 <lv_ll_get_head>
 801060e:	4605      	mov	r5, r0
 8010610:	b998      	cbnz	r0, 801063a <lv_refr_get_top_obj+0x4e>
            const lv_style_t * style = lv_obj_get_style(obj);
 8010612:	4620      	mov	r0, r4
 8010614:	f7ff fec8 	bl	80103a8 <lv_obj_get_style>
            if(style->body.opa == LV_OPA_COVER && obj->design_cb(obj, area_p, LV_DESIGN_COVER_CHK) != false &&
 8010618:	7a03      	ldrb	r3, [r0, #8]
 801061a:	2bff      	cmp	r3, #255	; 0xff
 801061c:	d1ed      	bne.n	80105fa <lv_refr_get_top_obj+0xe>
 801061e:	6a23      	ldr	r3, [r4, #32]
 8010620:	2202      	movs	r2, #2
 8010622:	4631      	mov	r1, r6
 8010624:	4620      	mov	r0, r4
 8010626:	4798      	blx	r3
 8010628:	2800      	cmp	r0, #0
 801062a:	d0e6      	beq.n	80105fa <lv_refr_get_top_obj+0xe>
               lv_obj_get_opa_scale(obj) == LV_OPA_COVER) {
 801062c:	4620      	mov	r0, r4
 801062e:	f7ff ff3e 	bl	80104ae <lv_obj_get_opa_scale>
            if(style->body.opa == LV_OPA_COVER && obj->design_cb(obj, area_p, LV_DESIGN_COVER_CHK) != false &&
 8010632:	28ff      	cmp	r0, #255	; 0xff
 8010634:	d1e1      	bne.n	80105fa <lv_refr_get_top_obj+0xe>
 8010636:	4620      	mov	r0, r4
    return found_p;
 8010638:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            found_p = lv_refr_get_top_obj(area_p, i);
 801063a:	4629      	mov	r1, r5
 801063c:	4630      	mov	r0, r6
 801063e:	f7ff ffd5 	bl	80105ec <lv_refr_get_top_obj>
            if(found_p != NULL) {
 8010642:	b920      	cbnz	r0, 801064e <lv_refr_get_top_obj+0x62>
        LV_LL_READ(obj->child_ll, i)
 8010644:	4629      	mov	r1, r5
 8010646:	4638      	mov	r0, r7
 8010648:	f004 ff5a 	bl	8015500 <lv_ll_get_next>
 801064c:	e7df      	b.n	801060e <lv_refr_get_top_obj+0x22>
}
 801064e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08010650 <lv_refr_obj>:
{
 8010650:	b5f0      	push	{r4, r5, r6, r7, lr}
    if(obj->hidden != 0) return;
 8010652:	f890 6030 	ldrb.w	r6, [r0, #48]	; 0x30
 8010656:	f016 0610 	ands.w	r6, r6, #16
{
 801065a:	b08b      	sub	sp, #44	; 0x2c
 801065c:	4604      	mov	r4, r0
 801065e:	460f      	mov	r7, r1
    if(obj->hidden != 0) return;
 8010660:	d139      	bne.n	80106d6 <lv_refr_obj+0x86>
    lv_coord_t ext_size = obj->ext_draw_pad;
 8010662:	f9b0 5034 	ldrsh.w	r5, [r0, #52]	; 0x34
    lv_obj_get_coords(obj, &obj_area);
 8010666:	a904      	add	r1, sp, #16
 8010668:	f7ff fe7b 	bl	8010362 <lv_obj_get_coords>
    obj_area.x1 -= ext_size;
 801066c:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 8010670:	b2ab      	uxth	r3, r5
 8010672:	1ad2      	subs	r2, r2, r3
 8010674:	f8ad 2010 	strh.w	r2, [sp, #16]
    obj_area.y1 -= ext_size;
 8010678:	f8bd 2012 	ldrh.w	r2, [sp, #18]
 801067c:	1ad2      	subs	r2, r2, r3
 801067e:	f8ad 2012 	strh.w	r2, [sp, #18]
    obj_area.x2 += ext_size;
 8010682:	f8bd 2014 	ldrh.w	r2, [sp, #20]
 8010686:	441a      	add	r2, r3
 8010688:	f8ad 2014 	strh.w	r2, [sp, #20]
    obj_area.y2 += ext_size;
 801068c:	f8bd 2016 	ldrh.w	r2, [sp, #22]
    union_ok = lv_area_intersect(&obj_ext_mask, mask_ori_p, &obj_area);
 8010690:	4639      	mov	r1, r7
    obj_area.y2 += ext_size;
 8010692:	4413      	add	r3, r2
    union_ok = lv_area_intersect(&obj_ext_mask, mask_ori_p, &obj_area);
 8010694:	a802      	add	r0, sp, #8
 8010696:	aa04      	add	r2, sp, #16
    obj_area.y2 += ext_size;
 8010698:	f8ad 3016 	strh.w	r3, [sp, #22]
    union_ok = lv_area_intersect(&obj_ext_mask, mask_ori_p, &obj_area);
 801069c:	f004 fe25 	bl	80152ea <lv_area_intersect>
    if(union_ok != false) {
 80106a0:	b1c8      	cbz	r0, 80106d6 <lv_refr_obj+0x86>
        obj->design_cb(obj, &obj_ext_mask, LV_DESIGN_DRAW_MAIN);
 80106a2:	4632      	mov	r2, r6
 80106a4:	6a23      	ldr	r3, [r4, #32]
 80106a6:	a902      	add	r1, sp, #8
 80106a8:	4620      	mov	r0, r4
 80106aa:	4798      	blx	r3
        lv_obj_get_coords(obj, &obj_area);
 80106ac:	a904      	add	r1, sp, #16
 80106ae:	4620      	mov	r0, r4
 80106b0:	f7ff fe57 	bl	8010362 <lv_obj_get_coords>
        union_ok = lv_area_intersect(&obj_mask, mask_ori_p, &obj_area);
 80106b4:	aa04      	add	r2, sp, #16
 80106b6:	4639      	mov	r1, r7
 80106b8:	4668      	mov	r0, sp
 80106ba:	f004 fe16 	bl	80152ea <lv_area_intersect>
        if(union_ok != false) {
 80106be:	b128      	cbz	r0, 80106cc <lv_refr_obj+0x7c>
            LV_LL_READ_BACK(obj->child_ll, child_p)
 80106c0:	1d26      	adds	r6, r4, #4
 80106c2:	4630      	mov	r0, r6
 80106c4:	f004 ff19 	bl	80154fa <lv_ll_get_tail>
 80106c8:	4605      	mov	r5, r0
 80106ca:	b930      	cbnz	r0, 80106da <lv_refr_obj+0x8a>
        obj->design_cb(obj, &obj_ext_mask, LV_DESIGN_DRAW_POST);
 80106cc:	6a23      	ldr	r3, [r4, #32]
 80106ce:	2201      	movs	r2, #1
 80106d0:	a902      	add	r1, sp, #8
 80106d2:	4620      	mov	r0, r4
 80106d4:	4798      	blx	r3
}
 80106d6:	b00b      	add	sp, #44	; 0x2c
 80106d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
                lv_obj_get_coords(child_p, &child_area);
 80106da:	a908      	add	r1, sp, #32
 80106dc:	4628      	mov	r0, r5
 80106de:	f7ff fe40 	bl	8010362 <lv_obj_get_coords>
                child_area.x1 -= ext_size;
 80106e2:	8eab      	ldrh	r3, [r5, #52]	; 0x34
 80106e4:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 80106e8:	1ad2      	subs	r2, r2, r3
 80106ea:	f8ad 2020 	strh.w	r2, [sp, #32]
                child_area.y1 -= ext_size;
 80106ee:	f8bd 2022 	ldrh.w	r2, [sp, #34]	; 0x22
 80106f2:	1ad2      	subs	r2, r2, r3
 80106f4:	f8ad 2022 	strh.w	r2, [sp, #34]	; 0x22
                child_area.x2 += ext_size;
 80106f8:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
 80106fc:	441a      	add	r2, r3
 80106fe:	f8ad 2024 	strh.w	r2, [sp, #36]	; 0x24
                child_area.y2 += ext_size;
 8010702:	f8bd 2026 	ldrh.w	r2, [sp, #38]	; 0x26
                union_ok = lv_area_intersect(&mask_child, &obj_mask, &child_area);
 8010706:	4669      	mov	r1, sp
                child_area.y2 += ext_size;
 8010708:	4413      	add	r3, r2
                union_ok = lv_area_intersect(&mask_child, &obj_mask, &child_area);
 801070a:	a806      	add	r0, sp, #24
 801070c:	aa08      	add	r2, sp, #32
                child_area.y2 += ext_size;
 801070e:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
                union_ok = lv_area_intersect(&mask_child, &obj_mask, &child_area);
 8010712:	f004 fdea 	bl	80152ea <lv_area_intersect>
                if(union_ok) {
 8010716:	b118      	cbz	r0, 8010720 <lv_refr_obj+0xd0>
                    lv_refr_obj(child_p, &mask_child);
 8010718:	a906      	add	r1, sp, #24
 801071a:	4628      	mov	r0, r5
 801071c:	f7ff ff98 	bl	8010650 <lv_refr_obj>
            LV_LL_READ_BACK(obj->child_ll, child_p)
 8010720:	4629      	mov	r1, r5
 8010722:	4630      	mov	r0, r6
 8010724:	f004 fef1 	bl	801550a <lv_ll_get_prev>
 8010728:	e7ce      	b.n	80106c8 <lv_refr_obj+0x78>
	...

0801072c <lv_refr_obj_and_children>:
{
 801072c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801072e:	460e      	mov	r6, r1
    if(top_p == NULL) top_p = lv_disp_get_scr_act(disp_refr);
 8010730:	4605      	mov	r5, r0
 8010732:	b920      	cbnz	r0, 801073e <lv_refr_obj_and_children+0x12>
 8010734:	4b12      	ldr	r3, [pc, #72]	; (8010780 <lv_refr_obj_and_children+0x54>)
 8010736:	6818      	ldr	r0, [r3, #0]
 8010738:	f7fe fd31 	bl	800f19e <lv_disp_get_scr_act>
 801073c:	4605      	mov	r5, r0
    lv_refr_obj(top_p, mask_p);
 801073e:	4628      	mov	r0, r5
 8010740:	4631      	mov	r1, r6
 8010742:	f7ff ff85 	bl	8010650 <lv_refr_obj>
    par = lv_obj_get_parent(top_p);
 8010746:	4628      	mov	r0, r5
 8010748:	f7ff fda0 	bl	801028c <lv_obj_get_parent>
        par = lv_obj_get_parent(par);
 801074c:	4604      	mov	r4, r0
    while(par != NULL) {
 801074e:	b900      	cbnz	r0, 8010752 <lv_refr_obj_and_children+0x26>
}
 8010750:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        lv_obj_t * i = lv_ll_get_prev(&(par->child_ll), border_p);
 8010752:	1d27      	adds	r7, r4, #4
            i = lv_ll_get_prev(&(par->child_ll), i);
 8010754:	4629      	mov	r1, r5
 8010756:	4638      	mov	r0, r7
 8010758:	f004 fed7 	bl	801550a <lv_ll_get_prev>
 801075c:	4605      	mov	r5, r0
        while(i != NULL) {
 801075e:	b948      	cbnz	r0, 8010774 <lv_refr_obj_and_children+0x48>
        par->design_cb(par, mask_p, LV_DESIGN_DRAW_POST);
 8010760:	6a23      	ldr	r3, [r4, #32]
 8010762:	2201      	movs	r2, #1
 8010764:	4631      	mov	r1, r6
 8010766:	4620      	mov	r0, r4
 8010768:	4798      	blx	r3
        par = lv_obj_get_parent(par);
 801076a:	4620      	mov	r0, r4
 801076c:	f7ff fd8e 	bl	801028c <lv_obj_get_parent>
 8010770:	4625      	mov	r5, r4
 8010772:	e7eb      	b.n	801074c <lv_refr_obj_and_children+0x20>
            lv_refr_obj(i, mask_p);
 8010774:	4631      	mov	r1, r6
 8010776:	4628      	mov	r0, r5
 8010778:	f7ff ff6a 	bl	8010650 <lv_refr_obj>
 801077c:	e7ea      	b.n	8010754 <lv_refr_obj_and_children+0x28>
 801077e:	bf00      	nop
 8010780:	200061e8 	.word	0x200061e8

08010784 <lv_refr_area_part>:
{
 8010784:	b573      	push	{r0, r1, r4, r5, r6, lr}
    lv_disp_buf_t * vdb = lv_disp_get_buf(disp_refr);
 8010786:	4c18      	ldr	r4, [pc, #96]	; (80107e8 <lv_refr_area_part+0x64>)
{
 8010788:	4606      	mov	r6, r0
    lv_disp_buf_t * vdb = lv_disp_get_buf(disp_refr);
 801078a:	6820      	ldr	r0, [r4, #0]
 801078c:	f004 fc02 	bl	8014f94 <lv_disp_get_buf>
 8010790:	4605      	mov	r5, r0
    if(lv_disp_is_double_buf(disp_refr) == false) {
 8010792:	6820      	ldr	r0, [r4, #0]
 8010794:	f004 fc00 	bl	8014f98 <lv_disp_is_double_buf>
 8010798:	b910      	cbnz	r0, 80107a0 <lv_refr_area_part+0x1c>
        while(vdb->flushing)
 801079a:	69ab      	ldr	r3, [r5, #24]
 801079c:	07db      	lsls	r3, r3, #31
 801079e:	d4fc      	bmi.n	801079a <lv_refr_area_part+0x16>
    lv_area_intersect(&start_mask, area_p, &vdb->area);
 80107a0:	f105 0210 	add.w	r2, r5, #16
 80107a4:	4631      	mov	r1, r6
 80107a6:	4668      	mov	r0, sp
 80107a8:	f004 fd9f 	bl	80152ea <lv_area_intersect>
    top_p = lv_refr_get_top_obj(&start_mask, lv_disp_get_scr_act(disp_refr));
 80107ac:	6820      	ldr	r0, [r4, #0]
 80107ae:	f7fe fcf6 	bl	800f19e <lv_disp_get_scr_act>
 80107b2:	4601      	mov	r1, r0
 80107b4:	4668      	mov	r0, sp
 80107b6:	f7ff ff19 	bl	80105ec <lv_refr_get_top_obj>
    lv_refr_obj_and_children(top_p, &start_mask);
 80107ba:	4669      	mov	r1, sp
 80107bc:	f7ff ffb6 	bl	801072c <lv_refr_obj_and_children>
    lv_refr_obj_and_children(lv_disp_get_layer_top(disp_refr), &start_mask);
 80107c0:	6820      	ldr	r0, [r4, #0]
 80107c2:	f7fe fcfd 	bl	800f1c0 <lv_disp_get_layer_top>
 80107c6:	4669      	mov	r1, sp
 80107c8:	f7ff ffb0 	bl	801072c <lv_refr_obj_and_children>
    lv_refr_obj_and_children(lv_disp_get_layer_sys(disp_refr), &start_mask);
 80107cc:	6820      	ldr	r0, [r4, #0]
 80107ce:	f7fe fcfe 	bl	800f1ce <lv_disp_get_layer_sys>
 80107d2:	4669      	mov	r1, sp
 80107d4:	f7ff ffaa 	bl	801072c <lv_refr_obj_and_children>
    if(lv_disp_is_true_double_buf(disp_refr) == false) {
 80107d8:	6820      	ldr	r0, [r4, #0]
 80107da:	f004 fbe5 	bl	8014fa8 <lv_disp_is_true_double_buf>
 80107de:	b908      	cbnz	r0, 80107e4 <lv_refr_area_part+0x60>
        lv_refr_vdb_flush();
 80107e0:	f7ff fee0 	bl	80105a4 <lv_refr_vdb_flush>
}
 80107e4:	b002      	add	sp, #8
 80107e6:	bd70      	pop	{r4, r5, r6, pc}
 80107e8:	200061e8 	.word	0x200061e8

080107ec <lv_refr_init>:
{
 80107ec:	4770      	bx	lr

080107ee <lv_inv_area>:
{
 80107ee:	b530      	push	{r4, r5, lr}
 80107f0:	460d      	mov	r5, r1
 80107f2:	b085      	sub	sp, #20
    if(!disp) disp = lv_disp_get_default();
 80107f4:	4604      	mov	r4, r0
 80107f6:	b920      	cbnz	r0, 8010802 <lv_inv_area+0x14>
 80107f8:	f004 fb8c 	bl	8014f14 <lv_disp_get_default>
    if(!disp) return;
 80107fc:	4604      	mov	r4, r0
 80107fe:	2800      	cmp	r0, #0
 8010800:	d045      	beq.n	801088e <lv_inv_area+0xa0>
    if(area_p == NULL) {
 8010802:	b935      	cbnz	r5, 8010812 <lv_inv_area+0x24>
        disp->inv_p = 0;
 8010804:	f8b4 3160 	ldrh.w	r3, [r4, #352]	; 0x160
 8010808:	f365 0309 	bfi	r3, r5, #0, #10
        disp->inv_p++;
 801080c:	f8a4 3160 	strh.w	r3, [r4, #352]	; 0x160
 8010810:	e03d      	b.n	801088e <lv_inv_area+0xa0>
    scr_area.x1 = 0;
 8010812:	2300      	movs	r3, #0
    scr_area.x2 = lv_disp_get_hor_res(disp) - 1;
 8010814:	4620      	mov	r0, r4
    scr_area.x1 = 0;
 8010816:	f8ad 3000 	strh.w	r3, [sp]
    scr_area.y1 = 0;
 801081a:	f8ad 3002 	strh.w	r3, [sp, #2]
    scr_area.x2 = lv_disp_get_hor_res(disp) - 1;
 801081e:	f004 fb7f 	bl	8014f20 <lv_disp_get_hor_res>
 8010822:	3801      	subs	r0, #1
 8010824:	f8ad 0004 	strh.w	r0, [sp, #4]
    scr_area.y2 = lv_disp_get_ver_res(disp) - 1;
 8010828:	4620      	mov	r0, r4
 801082a:	f004 fb89 	bl	8014f40 <lv_disp_get_ver_res>
 801082e:	3801      	subs	r0, #1
 8010830:	f8ad 0006 	strh.w	r0, [sp, #6]
    suc = lv_area_intersect(&com_area, area_p, &scr_area);
 8010834:	466a      	mov	r2, sp
 8010836:	4629      	mov	r1, r5
 8010838:	a802      	add	r0, sp, #8
 801083a:	f004 fd56 	bl	80152ea <lv_area_intersect>
    if(suc != false) {
 801083e:	b330      	cbz	r0, 801088e <lv_inv_area+0xa0>
        if(disp->driver.rounder_cb) disp->driver.rounder_cb(&disp->driver, &com_area);
 8010840:	6923      	ldr	r3, [r4, #16]
 8010842:	b113      	cbz	r3, 801084a <lv_inv_area+0x5c>
 8010844:	a902      	add	r1, sp, #8
 8010846:	4620      	mov	r0, r4
 8010848:	4798      	blx	r3
{
 801084a:	2500      	movs	r5, #0
        for(i = 0; i < disp->inv_p; i++) {
 801084c:	f8b4 2160 	ldrh.w	r2, [r4, #352]	; 0x160
 8010850:	b2a9      	uxth	r1, r5
 8010852:	f3c2 0309 	ubfx	r3, r2, #0, #10
 8010856:	4299      	cmp	r1, r3
 8010858:	db10      	blt.n	801087c <lv_inv_area+0x8e>
        if(disp->inv_p < LV_INV_BUF_SIZE) {
 801085a:	2b1f      	cmp	r3, #31
 801085c:	dc19      	bgt.n	8010892 <lv_inv_area+0xa4>
            lv_area_copy(&disp->inv_areas[disp->inv_p], &com_area);
 801085e:	f103 0208 	add.w	r2, r3, #8
 8010862:	ab02      	add	r3, sp, #8
 8010864:	cb03      	ldmia	r3!, {r0, r1}
 8010866:	eb04 05c2 	add.w	r5, r4, r2, lsl #3
 801086a:	f844 0032 	str.w	r0, [r4, r2, lsl #3]
 801086e:	6069      	str	r1, [r5, #4]
        disp->inv_p++;
 8010870:	f8b4 3160 	ldrh.w	r3, [r4, #352]	; 0x160
 8010874:	1c5a      	adds	r2, r3, #1
 8010876:	f362 0309 	bfi	r3, r2, #0, #10
 801087a:	e7c7      	b.n	801080c <lv_inv_area+0x1e>
            if(lv_area_is_in(&com_area, &disp->inv_areas[i]) != false) return;
 801087c:	3108      	adds	r1, #8
 801087e:	eb04 01c1 	add.w	r1, r4, r1, lsl #3
 8010882:	a802      	add	r0, sp, #8
 8010884:	f004 fd9a 	bl	80153bc <lv_area_is_in>
 8010888:	3501      	adds	r5, #1
 801088a:	2800      	cmp	r0, #0
 801088c:	d0de      	beq.n	801084c <lv_inv_area+0x5e>
}
 801088e:	b005      	add	sp, #20
 8010890:	bd30      	pop	{r4, r5, pc}
            disp->inv_p = 0;
 8010892:	4613      	mov	r3, r2
 8010894:	f36f 0309 	bfc	r3, #0, #10
 8010898:	f8a4 3160 	strh.w	r3, [r4, #352]	; 0x160
 801089c:	466b      	mov	r3, sp
 801089e:	cb03      	ldmia	r3!, {r0, r1}
 80108a0:	6420      	str	r0, [r4, #64]	; 0x40
 80108a2:	6461      	str	r1, [r4, #68]	; 0x44
 80108a4:	e7e4      	b.n	8010870 <lv_inv_area+0x82>
	...

080108a8 <lv_refr_get_disp_refreshing>:
}
 80108a8:	4b01      	ldr	r3, [pc, #4]	; (80108b0 <lv_refr_get_disp_refreshing+0x8>)
 80108aa:	6818      	ldr	r0, [r3, #0]
 80108ac:	4770      	bx	lr
 80108ae:	bf00      	nop
 80108b0:	200061e8 	.word	0x200061e8

080108b4 <lv_disp_refr_task>:
{
 80108b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80108b8:	b089      	sub	sp, #36	; 0x24
 80108ba:	4605      	mov	r5, r0
    uint32_t start = lv_tick_get();
 80108bc:	f004 fb9a 	bl	8014ff4 <lv_tick_get>
    disp_refr = task->user_data;
 80108c0:	4cb6      	ldr	r4, [pc, #728]	; (8010b9c <lv_disp_refr_task+0x2e8>)
 80108c2:	68eb      	ldr	r3, [r5, #12]
    uint32_t start = lv_tick_get();
 80108c4:	9002      	str	r0, [sp, #8]
    disp_refr = task->user_data;
 80108c6:	6023      	str	r3, [r4, #0]
    for(join_in = 0; join_in < disp_refr->inv_p; join_in++) {
 80108c8:	2700      	movs	r7, #0
                disp_refr->inv_area_joined[join_from] = 1;
 80108ca:	f04f 0801 	mov.w	r8, #1
    for(join_in = 0; join_in < disp_refr->inv_p; join_in++) {
 80108ce:	6823      	ldr	r3, [r4, #0]
 80108d0:	f8b3 2160 	ldrh.w	r2, [r3, #352]	; 0x160
 80108d4:	f3c2 0209 	ubfx	r2, r2, #0, #10
 80108d8:	4297      	cmp	r7, r2
 80108da:	d32e      	bcc.n	801093a <lv_disp_refr_task+0x86>
    px_num = 0;
 80108dc:	4bb0      	ldr	r3, [pc, #704]	; (8010ba0 <lv_disp_refr_task+0x2ec>)
 80108de:	9300      	str	r3, [sp, #0]
 80108e0:	2600      	movs	r6, #0
 80108e2:	601e      	str	r6, [r3, #0]
    for(i = 0; i < disp_refr->inv_p; i++) {
 80108e4:	6825      	ldr	r5, [r4, #0]
 80108e6:	f8b5 3160 	ldrh.w	r3, [r5, #352]	; 0x160
 80108ea:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80108ee:	4296      	cmp	r6, r2
 80108f0:	d367      	bcc.n	80109c2 <lv_disp_refr_task+0x10e>
    if(disp_refr->inv_p != 0) {
 80108f2:	b1ea      	cbz	r2, 8010930 <lv_disp_refr_task+0x7c>
        if(lv_disp_is_true_double_buf(disp_refr)) {
 80108f4:	4628      	mov	r0, r5
 80108f6:	f004 fb57 	bl	8014fa8 <lv_disp_is_true_double_buf>
 80108fa:	2800      	cmp	r0, #0
 80108fc:	f040 8126 	bne.w	8010b4c <lv_disp_refr_task+0x298>
        memset(disp_refr->inv_areas, 0, sizeof(disp_refr->inv_areas));
 8010900:	6824      	ldr	r4, [r4, #0]
 8010902:	f44f 7280 	mov.w	r2, #256	; 0x100
 8010906:	2100      	movs	r1, #0
 8010908:	f104 0040 	add.w	r0, r4, #64	; 0x40
 801090c:	f00a fa5f 	bl	801adce <memset>
        memset(disp_refr->inv_area_joined, 0, sizeof(disp_refr->inv_area_joined));
 8010910:	2220      	movs	r2, #32
 8010912:	2100      	movs	r1, #0
 8010914:	f504 70a0 	add.w	r0, r4, #320	; 0x140
 8010918:	f00a fa59 	bl	801adce <memset>
        disp_refr->inv_p = 0;
 801091c:	f8b4 3160 	ldrh.w	r3, [r4, #352]	; 0x160
        if(disp_refr->driver.monitor_cb) {
 8010920:	69a5      	ldr	r5, [r4, #24]
        disp_refr->inv_p = 0;
 8010922:	f36f 0309 	bfc	r3, #0, #10
 8010926:	f8a4 3160 	strh.w	r3, [r4, #352]	; 0x160
        if(disp_refr->driver.monitor_cb) {
 801092a:	2d00      	cmp	r5, #0
 801092c:	f040 815d 	bne.w	8010bea <lv_disp_refr_task+0x336>
    lv_draw_free_buf();
 8010930:	f000 fee4 	bl	80116fc <lv_draw_free_buf>
}
 8010934:	b009      	add	sp, #36	; 0x24
 8010936:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        if(disp_refr->inv_area_joined[join_in] != 0) continue;
 801093a:	443b      	add	r3, r7
 801093c:	f893 5140 	ldrb.w	r5, [r3, #320]	; 0x140
 8010940:	b94d      	cbnz	r5, 8010956 <lv_disp_refr_task+0xa2>
 8010942:	f107 0608 	add.w	r6, r7, #8
 8010946:	00f6      	lsls	r6, r6, #3
        for(join_from = 0; join_from < disp_refr->inv_p; join_from++) {
 8010948:	6820      	ldr	r0, [r4, #0]
 801094a:	f8b0 3160 	ldrh.w	r3, [r0, #352]	; 0x160
 801094e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8010952:	429d      	cmp	r5, r3
 8010954:	d301      	bcc.n	801095a <lv_disp_refr_task+0xa6>
    for(join_in = 0; join_in < disp_refr->inv_p; join_in++) {
 8010956:	3701      	adds	r7, #1
 8010958:	e7b9      	b.n	80108ce <lv_disp_refr_task+0x1a>
            if(disp_refr->inv_area_joined[join_from] != 0 || join_in == join_from) {
 801095a:	1943      	adds	r3, r0, r5
 801095c:	f893 3140 	ldrb.w	r3, [r3, #320]	; 0x140
 8010960:	bb6b      	cbnz	r3, 80109be <lv_disp_refr_task+0x10a>
 8010962:	42af      	cmp	r7, r5
 8010964:	d02b      	beq.n	80109be <lv_disp_refr_task+0x10a>
 8010966:	f105 0908 	add.w	r9, r5, #8
 801096a:	ea4f 09c9 	mov.w	r9, r9, lsl #3
            if(lv_area_is_on(&disp_refr->inv_areas[join_in], &disp_refr->inv_areas[join_from]) == false) {
 801096e:	eb00 0109 	add.w	r1, r0, r9
 8010972:	4430      	add	r0, r6
 8010974:	f004 fd05 	bl	8015382 <lv_area_is_on>
 8010978:	b308      	cbz	r0, 80109be <lv_disp_refr_task+0x10a>
            lv_area_join(&joined_area, &disp_refr->inv_areas[join_in], &disp_refr->inv_areas[join_from]);
 801097a:	6821      	ldr	r1, [r4, #0]
 801097c:	a806      	add	r0, sp, #24
 801097e:	eb01 0209 	add.w	r2, r1, r9
 8010982:	4431      	add	r1, r6
 8010984:	f004 fcdb 	bl	801533e <lv_area_join>
            if(lv_area_get_size(&joined_area) < (lv_area_get_size(&disp_refr->inv_areas[join_in]) +
 8010988:	a806      	add	r0, sp, #24
 801098a:	f004 fca0 	bl	80152ce <lv_area_get_size>
 801098e:	4683      	mov	fp, r0
 8010990:	6820      	ldr	r0, [r4, #0]
 8010992:	4430      	add	r0, r6
 8010994:	f004 fc9b 	bl	80152ce <lv_area_get_size>
 8010998:	4682      	mov	sl, r0
                                                 lv_area_get_size(&disp_refr->inv_areas[join_from]))) {
 801099a:	6820      	ldr	r0, [r4, #0]
 801099c:	4448      	add	r0, r9
 801099e:	f004 fc96 	bl	80152ce <lv_area_get_size>
            if(lv_area_get_size(&joined_area) < (lv_area_get_size(&disp_refr->inv_areas[join_in]) +
 80109a2:	4450      	add	r0, sl
 80109a4:	4583      	cmp	fp, r0
 80109a6:	d20a      	bcs.n	80109be <lv_disp_refr_task+0x10a>
 80109a8:	aa06      	add	r2, sp, #24
 80109aa:	ca03      	ldmia	r2!, {r0, r1}
                lv_area_copy(&disp_refr->inv_areas[join_in], &joined_area);
 80109ac:	6823      	ldr	r3, [r4, #0]
 80109ae:	5198      	str	r0, [r3, r6]
 80109b0:	eb03 0e06 	add.w	lr, r3, r6
                disp_refr->inv_area_joined[join_from] = 1;
 80109b4:	442b      	add	r3, r5
 80109b6:	f8ce 1004 	str.w	r1, [lr, #4]
 80109ba:	f883 8140 	strb.w	r8, [r3, #320]	; 0x140
        for(join_from = 0; join_from < disp_refr->inv_p; join_from++) {
 80109be:	3501      	adds	r5, #1
 80109c0:	e7c2      	b.n	8010948 <lv_disp_refr_task+0x94>
        if(disp_refr->inv_area_joined[i] == 0) {
 80109c2:	19ab      	adds	r3, r5, r6
 80109c4:	f893 7140 	ldrb.w	r7, [r3, #320]	; 0x140
 80109c8:	2f00      	cmp	r7, #0
 80109ca:	d17c      	bne.n	8010ac6 <lv_disp_refr_task+0x212>
 80109cc:	f106 0b08 	add.w	fp, r6, #8
 80109d0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
    if(lv_disp_is_true_double_buf(disp_refr)) {
 80109d4:	4628      	mov	r0, r5
 80109d6:	9301      	str	r3, [sp, #4]
            lv_refr_area(&disp_refr->inv_areas[i]);
 80109d8:	eb05 0903 	add.w	r9, r5, r3
    if(lv_disp_is_true_double_buf(disp_refr)) {
 80109dc:	f004 fae4 	bl	8014fa8 <lv_disp_is_true_double_buf>
 80109e0:	b198      	cbz	r0, 8010a0a <lv_disp_refr_task+0x156>
        lv_disp_buf_t * vdb = lv_disp_get_buf(disp_refr);
 80109e2:	6820      	ldr	r0, [r4, #0]
 80109e4:	f004 fad6 	bl	8014f94 <lv_disp_get_buf>
 80109e8:	4605      	mov	r5, r0
        vdb->area.x1        = 0;
 80109ea:	8207      	strh	r7, [r0, #16]
        vdb->area.x2        = lv_disp_get_hor_res(disp_refr) - 1;
 80109ec:	6820      	ldr	r0, [r4, #0]
 80109ee:	f004 fa97 	bl	8014f20 <lv_disp_get_hor_res>
 80109f2:	3801      	subs	r0, #1
 80109f4:	82a8      	strh	r0, [r5, #20]
        vdb->area.y1        = 0;
 80109f6:	826f      	strh	r7, [r5, #18]
        vdb->area.y2        = lv_disp_get_ver_res(disp_refr) - 1;
 80109f8:	6820      	ldr	r0, [r4, #0]
 80109fa:	f004 faa1 	bl	8014f40 <lv_disp_get_ver_res>
 80109fe:	3801      	subs	r0, #1
 8010a00:	82e8      	strh	r0, [r5, #22]
            lv_refr_area_part(area_p);
 8010a02:	4648      	mov	r0, r9
 8010a04:	f7ff febe 	bl	8010784 <lv_refr_area_part>
 8010a08:	e051      	b.n	8010aae <lv_disp_refr_task+0x1fa>
        lv_disp_buf_t * vdb = lv_disp_get_buf(disp_refr);
 8010a0a:	6820      	ldr	r0, [r4, #0]
 8010a0c:	f004 fac2 	bl	8014f94 <lv_disp_get_buf>
    return area_p->x2 - area_p->x1 + 1;
 8010a10:	f8b9 a004 	ldrh.w	sl, [r9, #4]
 8010a14:	f835 803b 	ldrh.w	r8, [r5, fp, lsl #3]
 8010a18:	f9b9 3006 	ldrsh.w	r3, [r9, #6]
    return area_p->y2 - area_p->y1 + 1;
 8010a1c:	f8b9 b002 	ldrh.w	fp, [r9, #2]
 8010a20:	9303      	str	r3, [sp, #12]
 8010a22:	4607      	mov	r7, r0
    return area_p->x2 - area_p->x1 + 1;
 8010a24:	f10a 0a01 	add.w	sl, sl, #1
            area_p->y2 >= lv_disp_get_ver_res(disp_refr) ? y2 = lv_disp_get_ver_res(disp_refr) - 1 : area_p->y2;
 8010a28:	6820      	ldr	r0, [r4, #0]
 8010a2a:	ebaa 0a08 	sub.w	sl, sl, r8
    return area_p->y2 - area_p->y1 + 1;
 8010a2e:	f103 0801 	add.w	r8, r3, #1
 8010a32:	f004 fa85 	bl	8014f40 <lv_disp_get_ver_res>
        lv_coord_t y2 =
 8010a36:	9b03      	ldr	r3, [sp, #12]
 8010a38:	eba8 080b 	sub.w	r8, r8, fp
 8010a3c:	4283      	cmp	r3, r0
    return area_p->x2 - area_p->x1 + 1;
 8010a3e:	fa0f fa8a 	sxth.w	sl, sl
    return area_p->y2 - area_p->y1 + 1;
 8010a42:	fa0f fb88 	sxth.w	fp, r8
 8010a46:	db40      	blt.n	8010aca <lv_disp_refr_task+0x216>
            area_p->y2 >= lv_disp_get_ver_res(disp_refr) ? y2 = lv_disp_get_ver_res(disp_refr) - 1 : area_p->y2;
 8010a48:	6820      	ldr	r0, [r4, #0]
 8010a4a:	f004 fa79 	bl	8014f40 <lv_disp_get_ver_res>
 8010a4e:	3801      	subs	r0, #1
 8010a50:	b203      	sxth	r3, r0
        int32_t max_row = (uint32_t)vdb->size / w;
 8010a52:	68fa      	ldr	r2, [r7, #12]
 8010a54:	fbb2 f8fa 	udiv	r8, r2, sl
        if(disp_refr->driver.rounder_cb) {
 8010a58:	6822      	ldr	r2, [r4, #0]
 8010a5a:	6912      	ldr	r2, [r2, #16]
 8010a5c:	45d8      	cmp	r8, fp
 8010a5e:	bfa8      	it	ge
 8010a60:	46d8      	movge	r8, fp
 8010a62:	2a00      	cmp	r2, #0
 8010a64:	d038      	beq.n	8010ad8 <lv_disp_refr_task+0x224>
            tmp.x1 = 0;
 8010a66:	f04f 0200 	mov.w	r2, #0
            lv_coord_t y_tmp = max_row - 1;
 8010a6a:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
            tmp.x1 = 0;
 8010a6e:	f8ad 2018 	strh.w	r2, [sp, #24]
            tmp.x2 = 0;
 8010a72:	f8ad 201c 	strh.w	r2, [sp, #28]
            tmp.y1 = 0;
 8010a76:	f8ad 201a 	strh.w	r2, [sp, #26]
            lv_coord_t y_tmp = max_row - 1;
 8010a7a:	fa0f fa8a 	sxth.w	sl, sl
                disp_refr->driver.rounder_cb(&disp_refr->driver, &tmp);
 8010a7e:	6820      	ldr	r0, [r4, #0]
                tmp.y2 = y_tmp;
 8010a80:	f8ad a01e 	strh.w	sl, [sp, #30]
                disp_refr->driver.rounder_cb(&disp_refr->driver, &tmp);
 8010a84:	6902      	ldr	r2, [r0, #16]
 8010a86:	9303      	str	r3, [sp, #12]
 8010a88:	a906      	add	r1, sp, #24
 8010a8a:	4790      	blx	r2
 8010a8c:	f9bd 101e 	ldrsh.w	r1, [sp, #30]
 8010a90:	f8bd 201a 	ldrh.w	r2, [sp, #26]
                if(lv_area_get_height(&tmp) <= max_row) break;
 8010a94:	9b03      	ldr	r3, [sp, #12]
 8010a96:	3101      	adds	r1, #1
 8010a98:	1a8a      	subs	r2, r1, r2
 8010a9a:	b212      	sxth	r2, r2
 8010a9c:	4542      	cmp	r2, r8
 8010a9e:	dd17      	ble.n	8010ad0 <lv_disp_refr_task+0x21c>
 8010aa0:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8010aa4:	fa0f fa8a 	sxth.w	sl, sl
            } while(y_tmp != 0);
 8010aa8:	f1ba 0f00 	cmp.w	sl, #0
 8010aac:	d1e7      	bne.n	8010a7e <lv_disp_refr_task+0x1ca>
            if(disp_refr->driver.monitor_cb) px_num += lv_area_get_size(&disp_refr->inv_areas[i]);
 8010aae:	6820      	ldr	r0, [r4, #0]
 8010ab0:	6983      	ldr	r3, [r0, #24]
 8010ab2:	b143      	cbz	r3, 8010ac6 <lv_disp_refr_task+0x212>
 8010ab4:	9b01      	ldr	r3, [sp, #4]
 8010ab6:	4418      	add	r0, r3
 8010ab8:	f004 fc09 	bl	80152ce <lv_area_get_size>
 8010abc:	9b00      	ldr	r3, [sp, #0]
 8010abe:	681b      	ldr	r3, [r3, #0]
 8010ac0:	4418      	add	r0, r3
 8010ac2:	9b00      	ldr	r3, [sp, #0]
 8010ac4:	6018      	str	r0, [r3, #0]
    for(i = 0; i < disp_refr->inv_p; i++) {
 8010ac6:	3601      	adds	r6, #1
 8010ac8:	e70c      	b.n	80108e4 <lv_disp_refr_task+0x30>
        lv_coord_t y2 =
 8010aca:	f9b9 3006 	ldrsh.w	r3, [r9, #6]
 8010ace:	e7c0      	b.n	8010a52 <lv_disp_refr_task+0x19e>
            if(y_tmp == 0) {
 8010ad0:	f1ba 0f00 	cmp.w	sl, #0
 8010ad4:	d0eb      	beq.n	8010aae <lv_disp_refr_task+0x1fa>
                max_row = tmp.y2 + 1;
 8010ad6:	4688      	mov	r8, r1
 8010ad8:	eb05 05c6 	add.w	r5, r5, r6, lsl #3
            vdb->area.y2 = row + max_row - 1;
 8010adc:	fa1f f288 	uxth.w	r2, r8
        for(row = area_p->y1; row + max_row - 1 <= y2; row += max_row) {
 8010ae0:	f9b5 a042 	ldrsh.w	sl, [r5, #66]	; 0x42
        lv_coord_t row_last = 0;
 8010ae4:	f04f 0b00 	mov.w	fp, #0
 8010ae8:	1e51      	subs	r1, r2, #1
        for(row = area_p->y1; row + max_row - 1 <= y2; row += max_row) {
 8010aea:	eb0a 0008 	add.w	r0, sl, r8
 8010aee:	3801      	subs	r0, #1
 8010af0:	4298      	cmp	r0, r3
 8010af2:	dd0b      	ble.n	8010b0c <lv_disp_refr_task+0x258>
        if(y2 != row_last) {
 8010af4:	455b      	cmp	r3, fp
 8010af6:	d0da      	beq.n	8010aae <lv_disp_refr_task+0x1fa>
            vdb->area.x1 = area_p->x1;
 8010af8:	f9b5 2040 	ldrsh.w	r2, [r5, #64]	; 0x40
 8010afc:	823a      	strh	r2, [r7, #16]
            vdb->area.x2 = area_p->x2;
 8010afe:	f9b5 2044 	ldrsh.w	r2, [r5, #68]	; 0x44
 8010b02:	82ba      	strh	r2, [r7, #20]
            vdb->area.y1 = row;
 8010b04:	f8a7 a012 	strh.w	sl, [r7, #18]
            vdb->area.y2 = y2;
 8010b08:	82fb      	strh	r3, [r7, #22]
 8010b0a:	e77a      	b.n	8010a02 <lv_disp_refr_task+0x14e>
            vdb->area.x1 = area_p->x1;
 8010b0c:	f9b5 0040 	ldrsh.w	r0, [r5, #64]	; 0x40
 8010b10:	8238      	strh	r0, [r7, #16]
            vdb->area.x2 = area_p->x2;
 8010b12:	f9b5 0044 	ldrsh.w	r0, [r5, #68]	; 0x44
            vdb->area.y1 = row;
 8010b16:	f8a7 a012 	strh.w	sl, [r7, #18]
 8010b1a:	fa1f fa8a 	uxth.w	sl, sl
 8010b1e:	eb0a 0b01 	add.w	fp, sl, r1
 8010b22:	fa0f fb8b 	sxth.w	fp, fp
            vdb->area.y2 = row + max_row - 1;
 8010b26:	459b      	cmp	fp, r3
 8010b28:	bfa8      	it	ge
 8010b2a:	469b      	movge	fp, r3
            vdb->area.x2 = area_p->x2;
 8010b2c:	82b8      	strh	r0, [r7, #20]
            vdb->area.y2 = row + max_row - 1;
 8010b2e:	f8a7 b016 	strh.w	fp, [r7, #22]
            lv_refr_area_part(area_p);
 8010b32:	4648      	mov	r0, r9
 8010b34:	9205      	str	r2, [sp, #20]
 8010b36:	9104      	str	r1, [sp, #16]
            vdb->area.y2 = row + max_row - 1;
 8010b38:	9303      	str	r3, [sp, #12]
            lv_refr_area_part(area_p);
 8010b3a:	f7ff fe23 	bl	8010784 <lv_refr_area_part>
        for(row = area_p->y1; row + max_row - 1 <= y2; row += max_row) {
 8010b3e:	9a05      	ldr	r2, [sp, #20]
 8010b40:	9904      	ldr	r1, [sp, #16]
 8010b42:	9b03      	ldr	r3, [sp, #12]
 8010b44:	4492      	add	sl, r2
 8010b46:	fa0f fa8a 	sxth.w	sl, sl
 8010b4a:	e7ce      	b.n	8010aea <lv_disp_refr_task+0x236>
            lv_disp_buf_t * vdb = lv_disp_get_buf(disp_refr);
 8010b4c:	6820      	ldr	r0, [r4, #0]
 8010b4e:	f004 fa21 	bl	8014f94 <lv_disp_get_buf>
 8010b52:	4605      	mov	r5, r0
            lv_refr_vdb_flush();
 8010b54:	f7ff fd26 	bl	80105a4 <lv_refr_vdb_flush>
            while(vdb->flushing)
 8010b58:	69ab      	ldr	r3, [r5, #24]
 8010b5a:	07db      	lsls	r3, r3, #31
 8010b5c:	d4fc      	bmi.n	8010b58 <lv_disp_refr_task+0x2a4>
            uint8_t * buf_act = (uint8_t *)vdb->buf_act;
 8010b5e:	68ab      	ldr	r3, [r5, #8]
            uint8_t * buf_ina = (uint8_t *)vdb->buf_act == vdb->buf1 ? vdb->buf2 : vdb->buf1;
 8010b60:	f8d5 8000 	ldr.w	r8, [r5]
            lv_coord_t hres = lv_disp_get_hor_res(disp_refr);
 8010b64:	6820      	ldr	r0, [r4, #0]
            uint8_t * buf_act = (uint8_t *)vdb->buf_act;
 8010b66:	9301      	str	r3, [sp, #4]
            uint8_t * buf_ina = (uint8_t *)vdb->buf_act == vdb->buf1 ? vdb->buf2 : vdb->buf1;
 8010b68:	4543      	cmp	r3, r8
 8010b6a:	bf08      	it	eq
 8010b6c:	f8d5 8004 	ldreq.w	r8, [r5, #4]
            lv_coord_t hres = lv_disp_get_hor_res(disp_refr);
 8010b70:	f004 f9d6 	bl	8014f20 <lv_disp_get_hor_res>
            for(a = 0; a < disp_refr->inv_p; a++) {
 8010b74:	2700      	movs	r7, #0
            lv_coord_t hres = lv_disp_get_hor_res(disp_refr);
 8010b76:	4682      	mov	sl, r0
                        start_offs += hres * sizeof(lv_color_t);
 8010b78:	ea4f 0b40 	mov.w	fp, r0, lsl #1
            for(a = 0; a < disp_refr->inv_p; a++) {
 8010b7c:	6821      	ldr	r1, [r4, #0]
 8010b7e:	f8b1 3160 	ldrh.w	r3, [r1, #352]	; 0x160
 8010b82:	b2ba      	uxth	r2, r7
 8010b84:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8010b88:	429a      	cmp	r2, r3
 8010b8a:	f6bf aeb9 	bge.w	8010900 <lv_disp_refr_task+0x4c>
                if(disp_refr->inv_area_joined[a] == 0) {
 8010b8e:	188b      	adds	r3, r1, r2
 8010b90:	f893 3140 	ldrb.w	r3, [r3, #320]	; 0x140
 8010b94:	b133      	cbz	r3, 8010ba4 <lv_disp_refr_task+0x2f0>
 8010b96:	3701      	adds	r7, #1
 8010b98:	e7f0      	b.n	8010b7c <lv_disp_refr_task+0x2c8>
 8010b9a:	bf00      	nop
 8010b9c:	200061e8 	.word	0x200061e8
 8010ba0:	200061ec 	.word	0x200061ec
 8010ba4:	eb01 09c2 	add.w	r9, r1, r2, lsl #3
                        (hres * disp_refr->inv_areas[a].y1 + disp_refr->inv_areas[a].x1) * sizeof(lv_color_t);
 8010ba8:	f9b9 3040 	ldrsh.w	r3, [r9, #64]	; 0x40
 8010bac:	f9b9 6042 	ldrsh.w	r6, [r9, #66]	; 0x42
    return area_p->x2 - area_p->x1 + 1;
 8010bb0:	f8b9 2044 	ldrh.w	r2, [r9, #68]	; 0x44
 8010bb4:	fb0a 3506 	mla	r5, sl, r6, r3
 8010bb8:	f1c3 0301 	rsb	r3, r3, #1
 8010bbc:	4413      	add	r3, r2
                    uint32_t line_length = lv_area_get_width(&disp_refr->inv_areas[a]) * sizeof(lv_color_t);
 8010bbe:	b21b      	sxth	r3, r3
 8010bc0:	005b      	lsls	r3, r3, #1
 8010bc2:	9303      	str	r3, [sp, #12]
 8010bc4:	9b01      	ldr	r3, [sp, #4]
                    uint32_t start_offs =
 8010bc6:	006d      	lsls	r5, r5, #1
 8010bc8:	442b      	add	r3, r5
 8010bca:	4445      	add	r5, r8
                    for(y = disp_refr->inv_areas[a].y1; y <= disp_refr->inv_areas[a].y2; y++) {
 8010bcc:	f9b9 2046 	ldrsh.w	r2, [r9, #70]	; 0x46
 8010bd0:	42b2      	cmp	r2, r6
 8010bd2:	dbe0      	blt.n	8010b96 <lv_disp_refr_task+0x2e2>
                        memcpy(buf_act + start_offs, buf_ina + start_offs, line_length);
 8010bd4:	4629      	mov	r1, r5
 8010bd6:	4618      	mov	r0, r3
 8010bd8:	9a03      	ldr	r2, [sp, #12]
 8010bda:	f00a f8ed 	bl	801adb8 <memcpy>
 8010bde:	3601      	adds	r6, #1
 8010be0:	4603      	mov	r3, r0
 8010be2:	b236      	sxth	r6, r6
 8010be4:	445b      	add	r3, fp
 8010be6:	445d      	add	r5, fp
 8010be8:	e7f0      	b.n	8010bcc <lv_disp_refr_task+0x318>
            disp_refr->driver.monitor_cb(&disp_refr->driver, lv_tick_elaps(start), px_num);
 8010bea:	9802      	ldr	r0, [sp, #8]
 8010bec:	f004 fa10 	bl	8015010 <lv_tick_elaps>
 8010bf0:	9b00      	ldr	r3, [sp, #0]
 8010bf2:	4601      	mov	r1, r0
 8010bf4:	681a      	ldr	r2, [r3, #0]
 8010bf6:	4620      	mov	r0, r4
 8010bf8:	47a8      	blx	r5
 8010bfa:	e699      	b.n	8010930 <lv_disp_refr_task+0x7c>

08010bfc <lv_color_mix>:
static inline lv_color_t lv_color_mix(lv_color_t c1, lv_color_t c2, uint8_t mix)
{
    lv_color_t ret;
#if LV_COLOR_DEPTH != 1
    /*LV_COLOR_DEPTH == 8, 16 or 32*/
    ret.ch.red = (uint16_t)((uint16_t)c1.ch.red * mix + (c2.ch.red * (255 - mix))) >> 8;
 8010bfc:	f1c2 03ff 	rsb	r3, r2, #255	; 0xff
{
 8010c00:	b570      	push	{r4, r5, r6, lr}
    ret.ch.red = (uint16_t)((uint16_t)c1.ch.red * mix + (c2.ch.red * (255 - mix))) >> 8;
 8010c02:	b294      	uxth	r4, r2
 8010c04:	b29a      	uxth	r2, r3
 8010c06:	f3c1 23c4 	ubfx	r3, r1, #11, #5
 8010c0a:	fb13 f302 	smulbb	r3, r3, r2
 8010c0e:	f3c0 25c4 	ubfx	r5, r0, #11, #5
    uint16_t g_2   = (c2.ch.green_h << 3) + c2.ch.green_l;
    uint16_t g_out = (uint16_t)((uint16_t)g_1 * mix + (g_2 * (255 - mix))) >> 8;
    ret.ch.green_h = g_out >> 3;
    ret.ch.green_l = g_out & 0x7;
#else
    ret.ch.green = (uint16_t)((uint16_t)c1.ch.green * mix + (c2.ch.green * (255 - mix))) >> 8;
 8010c12:	f3c1 1645 	ubfx	r6, r1, #5, #6
#endif
    ret.ch.blue = (uint16_t)((uint16_t)c1.ch.blue * mix + (c2.ch.blue * (255 - mix))) >> 8;
 8010c16:	f001 011f 	and.w	r1, r1, #31
    ret.ch.red = (uint16_t)((uint16_t)c1.ch.red * mix + (c2.ch.red * (255 - mix))) >> 8;
 8010c1a:	fb05 3504 	mla	r5, r5, r4, r3
    ret.ch.green = (uint16_t)((uint16_t)c1.ch.green * mix + (c2.ch.green * (255 - mix))) >> 8;
 8010c1e:	fb16 f602 	smulbb	r6, r6, r2
 8010c22:	f3c0 1345 	ubfx	r3, r0, #5, #6
    ret.ch.blue = (uint16_t)((uint16_t)c1.ch.blue * mix + (c2.ch.blue * (255 - mix))) >> 8;
 8010c26:	fb11 f202 	smulbb	r2, r1, r2
 8010c2a:	f000 001f 	and.w	r0, r0, #31
 8010c2e:	fb00 2204 	mla	r2, r0, r4, r2
    ret.ch.green = (uint16_t)((uint16_t)c1.ch.green * mix + (c2.ch.green * (255 - mix))) >> 8;
 8010c32:	fb03 6304 	mla	r3, r3, r4, r6
    ret.ch.blue = (uint16_t)((uint16_t)c1.ch.blue * mix + (c2.ch.blue * (255 - mix))) >> 8;
 8010c36:	f3c2 2207 	ubfx	r2, r2, #8, #8
#else
    /*LV_COLOR_DEPTH == 1*/
    ret.full = mix > LV_OPA_50 ? c1.full : c2.full;
#endif

    return ret;
 8010c3a:	f04f 0000 	mov.w	r0, #0
    ret.ch.green = (uint16_t)((uint16_t)c1.ch.green * mix + (c2.ch.green * (255 - mix))) >> 8;
 8010c3e:	f3c3 2305 	ubfx	r3, r3, #8, #6
    return ret;
 8010c42:	f362 0004 	bfi	r0, r2, #0, #5
    ret.ch.red = (uint16_t)((uint16_t)c1.ch.red * mix + (c2.ch.red * (255 - mix))) >> 8;
 8010c46:	f3c5 2504 	ubfx	r5, r5, #8, #5
    return ret;
 8010c4a:	f363 104a 	bfi	r0, r3, #5, #6
 8010c4e:	f365 20cf 	bfi	r0, r5, #11, #5
}
 8010c52:	bd70      	pop	{r4, r5, r6, pc}

08010c54 <style_animation_common_end_cb>:
 * Called when a style animation is ready
 * It called the user defined call back and free the allocated memories
 * @param a pointer to the animation
 */
static void style_animation_common_end_cb(lv_anim_t * a)
{
 8010c54:	b510      	push	{r4, lr}

    (void)a;                            /*Unused*/
    lv_style_anim_dsc_t * dsc = a->var; /*To avoid casting*/
 8010c56:	6804      	ldr	r4, [r0, #0]

    if(dsc->ready_cb) dsc->ready_cb(a);
 8010c58:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 8010c5a:	b103      	cbz	r3, 8010c5e <style_animation_common_end_cb+0xa>
 8010c5c:	4798      	blx	r3

    lv_mem_free(dsc);
 8010c5e:	4620      	mov	r0, r4
}
 8010c60:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    lv_mem_free(dsc);
 8010c64:	f004 bdc4 	b.w	80157f0 <lv_mem_free>

08010c68 <lv_style_copy>:
    memcpy(dest, src, sizeof(lv_style_t));
 8010c68:	f101 033c 	add.w	r3, r1, #60	; 0x3c
 8010c6c:	f851 2b04 	ldr.w	r2, [r1], #4
 8010c70:	f840 2b04 	str.w	r2, [r0], #4
 8010c74:	4299      	cmp	r1, r3
 8010c76:	d1f9      	bne.n	8010c6c <lv_style_copy+0x4>
}
 8010c78:	4770      	bx	lr
	...

08010c7c <lv_style_init>:
    lv_style_scr.glass               = 0;
 8010c7c:	49d7      	ldr	r1, [pc, #860]	; (8010fdc <lv_style_init+0x360>)
{
 8010c7e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    lv_style_scr.glass               = 0;
 8010c82:	780b      	ldrb	r3, [r1, #0]
    lv_style_scr.body.main_color     = LV_COLOR_WHITE;
 8010c84:	f8df 9370 	ldr.w	r9, [pc, #880]	; 8010ff8 <lv_style_init+0x37c>
    lv_style_copy(&lv_style_plain, &lv_style_scr);
 8010c88:	4dd5      	ldr	r5, [pc, #852]	; (8010fe0 <lv_style_init+0x364>)
    lv_style_scr.body.main_color     = LV_COLOR_WHITE;
 8010c8a:	f8b9 b000 	ldrh.w	fp, [r9]
 8010c8e:	f8a1 b002 	strh.w	fp, [r1, #2]
    lv_style_scr.glass               = 0;
 8010c92:	f36f 0300 	bfc	r3, #0, #1
 8010c96:	700b      	strb	r3, [r1, #0]
    lv_style_scr.body.border.color = LV_COLOR_BLACK;
 8010c98:	7a8b      	ldrb	r3, [r1, #10]
    lv_style_scr.body.grad_color     = LV_COLOR_WHITE;
 8010c9a:	f8a1 b004 	strh.w	fp, [r1, #4]
    lv_style_scr.body.radius         = 0;
 8010c9e:	2600      	movs	r6, #0
    lv_style_scr.body.border.color = LV_COLOR_BLACK;
 8010ca0:	f366 0304 	bfi	r3, r6, #0, #5
 8010ca4:	728b      	strb	r3, [r1, #10]
 8010ca6:	894b      	ldrh	r3, [r1, #10]
    lv_style_scr.body.radius         = 0;
 8010ca8:	80ce      	strh	r6, [r1, #6]
    lv_style_scr.body.border.color = LV_COLOR_BLACK;
 8010caa:	f366 134a 	bfi	r3, r6, #5, #6
 8010cae:	814b      	strh	r3, [r1, #10]
 8010cb0:	0a1b      	lsrs	r3, r3, #8
 8010cb2:	f366 03c7 	bfi	r3, r6, #3, #5
 8010cb6:	72cb      	strb	r3, [r1, #11]
    lv_style_scr.body.border.part  = LV_BORDER_FULL;
 8010cb8:	230f      	movs	r3, #15
{
 8010cba:	b085      	sub	sp, #20
    lv_style_scr.body.border.part  = LV_BORDER_FULL;
 8010cbc:	738b      	strb	r3, [r1, #14]
    lv_style_scr.body.shadow.color = LV_COLOR_GRAY;
 8010cbe:	f8b9 3002 	ldrh.w	r3, [r9, #2]
 8010cc2:	f8ad 3004 	strh.w	r3, [sp, #4]
 8010cc6:	b29b      	uxth	r3, r3
 8010cc8:	820b      	strh	r3, [r1, #16]
    lv_style_scr.text.color        = lv_color_make(0x30, 0x30, 0x30);
 8010cca:	f891 3020 	ldrb.w	r3, [r1, #32]
    lv_style_scr.body.padding.left   = 0;
 8010cce:	834e      	strh	r6, [r1, #26]
    lv_style_scr.text.color        = lv_color_make(0x30, 0x30, 0x30);
 8010cd0:	2206      	movs	r2, #6
 8010cd2:	f362 0304 	bfi	r3, r2, #0, #5
 8010cd6:	f881 3020 	strb.w	r3, [r1, #32]
 8010cda:	8c0b      	ldrh	r3, [r1, #32]
    lv_style_scr.body.padding.right  = 0;
 8010cdc:	838e      	strh	r6, [r1, #28]
    lv_style_scr.text.color        = lv_color_make(0x30, 0x30, 0x30);
 8010cde:	220c      	movs	r2, #12
 8010ce0:	f362 134a 	bfi	r3, r2, #5, #6
 8010ce4:	840b      	strh	r3, [r1, #32]
 8010ce6:	2206      	movs	r2, #6
 8010ce8:	0a1b      	lsrs	r3, r3, #8
    lv_style_scr.body.padding.inner  = LV_DPI / 20;
 8010cea:	f04f 0801 	mov.w	r8, #1
    lv_style_scr.body.opa            = LV_OPA_COVER;
 8010cee:	24ff      	movs	r4, #255	; 0xff
    lv_style_scr.text.color        = lv_color_make(0x30, 0x30, 0x30);
 8010cf0:	f362 03c7 	bfi	r3, r2, #3, #5
    lv_style_scr.body.opa            = LV_OPA_COVER;
 8010cf4:	720c      	strb	r4, [r1, #8]
    lv_style_scr.body.padding.top    = 0;
 8010cf6:	82ce      	strh	r6, [r1, #22]
    lv_style_scr.body.padding.bottom = 0;
 8010cf8:	830e      	strh	r6, [r1, #24]
    lv_style_scr.body.padding.inner  = LV_DPI / 20;
 8010cfa:	f8a1 801e 	strh.w	r8, [r1, #30]
    lv_style_scr.body.border.opa   = LV_OPA_COVER;
 8010cfe:	73cc      	strb	r4, [r1, #15]
    lv_style_scr.body.border.width = 0;
 8010d00:	818e      	strh	r6, [r1, #12]
    lv_style_scr.body.shadow.type  = LV_SHADOW_FULL;
 8010d02:	f881 8014 	strb.w	r8, [r1, #20]
    lv_style_scr.body.shadow.width = 0;
 8010d06:	824e      	strh	r6, [r1, #18]
    lv_style_scr.text.opa          = LV_OPA_COVER;
 8010d08:	f881 402c 	strb.w	r4, [r1, #44]	; 0x2c
    lv_style_scr.text.color        = lv_color_make(0x30, 0x30, 0x30);
 8010d0c:	f881 3021 	strb.w	r3, [r1, #33]	; 0x21
    lv_style_scr.text.sel_color    = lv_color_make(0x55, 0x96, 0xd8);
 8010d10:	f891 3022 	ldrb.w	r3, [r1, #34]	; 0x22
    lv_style_scr.image.opa     = LV_OPA_COVER;
 8010d14:	f881 4033 	strb.w	r4, [r1, #51]	; 0x33
    lv_style_scr.text.sel_color    = lv_color_make(0x55, 0x96, 0xd8);
 8010d18:	221b      	movs	r2, #27
 8010d1a:	f362 0304 	bfi	r3, r2, #0, #5
 8010d1e:	f881 3022 	strb.w	r3, [r1, #34]	; 0x22
 8010d22:	8c4a      	ldrh	r2, [r1, #34]	; 0x22
    lv_style_scr.line.opa     = LV_OPA_COVER;
 8010d24:	f881 4038 	strb.w	r4, [r1, #56]	; 0x38
    lv_style_scr.text.sel_color    = lv_color_make(0x55, 0x96, 0xd8);
 8010d28:	2325      	movs	r3, #37	; 0x25
 8010d2a:	f363 124a 	bfi	r2, r3, #5, #6
 8010d2e:	9303      	str	r3, [sp, #12]
 8010d30:	0a10      	lsrs	r0, r2, #8
 8010d32:	844a      	strh	r2, [r1, #34]	; 0x22
 8010d34:	220a      	movs	r2, #10
 8010d36:	f362 00c7 	bfi	r0, r2, #3, #5
 8010d3a:	9202      	str	r2, [sp, #8]
 8010d3c:	f881 0023 	strb.w	r0, [r1, #35]	; 0x23
    lv_style_scr.text.font         = LV_FONT_DEFAULT;
 8010d40:	48a8      	ldr	r0, [pc, #672]	; (8010fe4 <lv_style_init+0x368>)
 8010d42:	6248      	str	r0, [r1, #36]	; 0x24
    lv_style_scr.image.color   = lv_color_make(0x20, 0x20, 0x20);
 8010d44:	f891 0030 	ldrb.w	r0, [r1, #48]	; 0x30
    lv_style_copy(&lv_style_plain_color, &lv_style_plain);
 8010d48:	4ca7      	ldr	r4, [pc, #668]	; (8010fe8 <lv_style_init+0x36c>)
    lv_style_scr.text.letter_space = 0;
 8010d4a:	850e      	strh	r6, [r1, #40]	; 0x28
    lv_style_scr.image.color   = lv_color_make(0x20, 0x20, 0x20);
 8010d4c:	2704      	movs	r7, #4
 8010d4e:	f367 0004 	bfi	r0, r7, #0, #5
 8010d52:	f881 0030 	strb.w	r0, [r1, #48]	; 0x30
 8010d56:	8e08      	ldrh	r0, [r1, #48]	; 0x30
    lv_style_scr.image.intense = LV_OPA_TRANSP;
 8010d58:	f881 6032 	strb.w	r6, [r1, #50]	; 0x32
    lv_style_scr.image.color   = lv_color_make(0x20, 0x20, 0x20);
 8010d5c:	f04f 0a08 	mov.w	sl, #8
 8010d60:	f36a 104a 	bfi	r0, sl, #5, #6
 8010d64:	8608      	strh	r0, [r1, #48]	; 0x30
 8010d66:	fa20 f00a 	lsr.w	r0, r0, sl
 8010d6a:	f367 00c7 	bfi	r0, r7, #3, #5
 8010d6e:	f881 0031 	strb.w	r0, [r1, #49]	; 0x31
    lv_style_scr.line.color   = lv_color_make(0x20, 0x20, 0x20);
 8010d72:	f891 0034 	ldrb.w	r0, [r1, #52]	; 0x34
 8010d76:	f367 0004 	bfi	r0, r7, #0, #5
 8010d7a:	f881 0034 	strb.w	r0, [r1, #52]	; 0x34
 8010d7e:	8e88      	ldrh	r0, [r1, #52]	; 0x34
 8010d80:	f36a 104a 	bfi	r0, sl, #5, #6
 8010d84:	8688      	strh	r0, [r1, #52]	; 0x34
 8010d86:	fa20 f00a 	lsr.w	r0, r0, sl
 8010d8a:	f367 00c7 	bfi	r0, r7, #3, #5
 8010d8e:	f881 0035 	strb.w	r0, [r1, #53]	; 0x35
    lv_style_scr.line.rounded = 0;
 8010d92:	f891 0039 	ldrb.w	r0, [r1, #57]	; 0x39
 8010d96:	f366 0000 	bfi	r0, r6, #0, #1
    lv_style_scr.text.line_space   = 2;
 8010d9a:	f04f 0302 	mov.w	r3, #2
    lv_style_scr.line.rounded = 0;
 8010d9e:	f881 0039 	strb.w	r0, [r1, #57]	; 0x39
    lv_style_copy(&lv_style_plain, &lv_style_scr);
 8010da2:	4628      	mov	r0, r5
    lv_style_scr.text.line_space   = 2;
 8010da4:	854b      	strh	r3, [r1, #42]	; 0x2a
    lv_style_scr.line.width   = 2;
 8010da6:	86cb      	strh	r3, [r1, #54]	; 0x36
    lv_style_copy(&lv_style_plain, &lv_style_scr);
 8010da8:	f7ff ff5e 	bl	8010c68 <lv_style_copy>
    lv_style_copy(&lv_style_plain_color, &lv_style_plain);
 8010dac:	4629      	mov	r1, r5
 8010dae:	4620      	mov	r0, r4
    lv_style_plain.body.padding.left   = LV_DPI / 20;
 8010db0:	f8a5 801a 	strh.w	r8, [r5, #26]
    lv_style_plain.body.padding.right  = LV_DPI / 20;
 8010db4:	f8a5 801c 	strh.w	r8, [r5, #28]
    lv_style_plain.body.padding.top    = LV_DPI / 20;
 8010db8:	f8a5 8016 	strh.w	r8, [r5, #22]
    lv_style_plain.body.padding.bottom = LV_DPI / 20;
 8010dbc:	f8a5 8018 	strh.w	r8, [r5, #24]
    lv_style_copy(&lv_style_plain_color, &lv_style_plain);
 8010dc0:	f7ff ff52 	bl	8010c68 <lv_style_copy>
    lv_style_plain_color.text.color      = lv_color_make(0xf0, 0xf0, 0xf0);
 8010dc4:	f894 1020 	ldrb.w	r1, [r4, #32]
 8010dc8:	231e      	movs	r3, #30
 8010dca:	f363 0104 	bfi	r1, r3, #0, #5
 8010dce:	f884 1020 	strb.w	r1, [r4, #32]
 8010dd2:	8c21      	ldrh	r1, [r4, #32]
 8010dd4:	203c      	movs	r0, #60	; 0x3c
 8010dd6:	f360 114a 	bfi	r1, r0, #5, #6
 8010dda:	8421      	strh	r1, [r4, #32]
 8010ddc:	fa21 f10a 	lsr.w	r1, r1, sl
 8010de0:	f363 01c7 	bfi	r1, r3, #3, #5
 8010de4:	f884 1021 	strb.w	r1, [r4, #33]	; 0x21
    lv_style_plain_color.image.color     = lv_color_make(0xf0, 0xf0, 0xf0);
 8010de8:	f894 1030 	ldrb.w	r1, [r4, #48]	; 0x30
 8010dec:	f363 0104 	bfi	r1, r3, #0, #5
 8010df0:	f884 1030 	strb.w	r1, [r4, #48]	; 0x30
 8010df4:	8e21      	ldrh	r1, [r4, #48]	; 0x30
 8010df6:	f360 114a 	bfi	r1, r0, #5, #6
 8010dfa:	8621      	strh	r1, [r4, #48]	; 0x30
 8010dfc:	fa21 f10a 	lsr.w	r1, r1, sl
 8010e00:	f363 01c7 	bfi	r1, r3, #3, #5
 8010e04:	f884 1031 	strb.w	r1, [r4, #49]	; 0x31
    lv_style_plain_color.line.color      = lv_color_make(0xf0, 0xf0, 0xf0);
 8010e08:	f894 1034 	ldrb.w	r1, [r4, #52]	; 0x34
 8010e0c:	f363 0104 	bfi	r1, r3, #0, #5
 8010e10:	f884 1034 	strb.w	r1, [r4, #52]	; 0x34
 8010e14:	8ea1      	ldrh	r1, [r4, #52]	; 0x34
 8010e16:	f360 114a 	bfi	r1, r0, #5, #6
 8010e1a:	86a1      	strh	r1, [r4, #52]	; 0x34
 8010e1c:	fa21 f10a 	lsr.w	r1, r1, sl
 8010e20:	f363 01c7 	bfi	r1, r3, #3, #5
 8010e24:	f884 1035 	strb.w	r1, [r4, #53]	; 0x35
    lv_style_plain_color.body.main_color = lv_color_make(0x55, 0x96, 0xd8);
 8010e28:	78a1      	ldrb	r1, [r4, #2]
 8010e2a:	231b      	movs	r3, #27
 8010e2c:	f363 0104 	bfi	r1, r3, #0, #5
 8010e30:	70a1      	strb	r1, [r4, #2]
 8010e32:	8861      	ldrh	r1, [r4, #2]
 8010e34:	9b03      	ldr	r3, [sp, #12]
 8010e36:	f363 114a 	bfi	r1, r3, #5, #6
 8010e3a:	8061      	strh	r1, [r4, #2]
 8010e3c:	9a02      	ldr	r2, [sp, #8]
 8010e3e:	fa21 f10a 	lsr.w	r1, r1, sl
 8010e42:	f362 01c7 	bfi	r1, r2, #3, #5
 8010e46:	70e1      	strb	r1, [r4, #3]
    lv_style_plain_color.body.grad_color = lv_style_plain_color.body.main_color;
 8010e48:	8863      	ldrh	r3, [r4, #2]
 8010e4a:	80a3      	strh	r3, [r4, #4]
    lv_style_copy(&lv_style_pretty, &lv_style_plain);
 8010e4c:	4b67      	ldr	r3, [pc, #412]	; (8010fec <lv_style_init+0x370>)
 8010e4e:	9302      	str	r3, [sp, #8]
 8010e50:	4629      	mov	r1, r5
 8010e52:	4618      	mov	r0, r3
 8010e54:	f7ff ff08 	bl	8010c68 <lv_style_copy>
    lv_style_pretty.text.color        = lv_color_make(0x20, 0x20, 0x20);
 8010e58:	9b02      	ldr	r3, [sp, #8]
    lv_style_copy(&lv_style_pretty_color, &lv_style_pretty);
 8010e5a:	4c65      	ldr	r4, [pc, #404]	; (8010ff0 <lv_style_init+0x374>)
    lv_style_pretty.text.color        = lv_color_make(0x20, 0x20, 0x20);
 8010e5c:	f893 2020 	ldrb.w	r2, [r3, #32]
    lv_style_pretty.body.main_color   = LV_COLOR_WHITE;
 8010e60:	f8a3 b002 	strh.w	fp, [r3, #2]
    lv_style_pretty.text.color        = lv_color_make(0x20, 0x20, 0x20);
 8010e64:	f367 0204 	bfi	r2, r7, #0, #5
 8010e68:	f883 2020 	strb.w	r2, [r3, #32]
 8010e6c:	8c1a      	ldrh	r2, [r3, #32]
    lv_style_pretty.body.radius       = LV_DPI / 15;
 8010e6e:	f8a3 8006 	strh.w	r8, [r3, #6]
    lv_style_pretty.text.color        = lv_color_make(0x20, 0x20, 0x20);
 8010e72:	f36a 124a 	bfi	r2, sl, #5, #6
 8010e76:	841a      	strh	r2, [r3, #32]
 8010e78:	fa22 f20a 	lsr.w	r2, r2, sl
 8010e7c:	f367 02c7 	bfi	r2, r7, #3, #5
 8010e80:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    lv_style_pretty.image.color       = lv_color_make(0x20, 0x20, 0x20);
 8010e84:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
    lv_style_pretty.body.border.width = LV_DPI / 50 >= 1 ? LV_DPI / 50 : 1;
 8010e88:	f8a3 800c 	strh.w	r8, [r3, #12]
    lv_style_pretty.image.color       = lv_color_make(0x20, 0x20, 0x20);
 8010e8c:	f367 0204 	bfi	r2, r7, #0, #5
 8010e90:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
 8010e94:	8e1a      	ldrh	r2, [r3, #48]	; 0x30
 8010e96:	f36a 124a 	bfi	r2, sl, #5, #6
 8010e9a:	861a      	strh	r2, [r3, #48]	; 0x30
 8010e9c:	fa22 f20a 	lsr.w	r2, r2, sl
 8010ea0:	f367 02c7 	bfi	r2, r7, #3, #5
 8010ea4:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
    lv_style_pretty.line.color        = lv_color_make(0x20, 0x20, 0x20);
 8010ea8:	f893 2034 	ldrb.w	r2, [r3, #52]	; 0x34
 8010eac:	f367 0204 	bfi	r2, r7, #0, #5
 8010eb0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
 8010eb4:	8e9a      	ldrh	r2, [r3, #52]	; 0x34
 8010eb6:	f36a 124a 	bfi	r2, sl, #5, #6
 8010eba:	869a      	strh	r2, [r3, #52]	; 0x34
 8010ebc:	fa22 f20a 	lsr.w	r2, r2, sl
 8010ec0:	f367 02c7 	bfi	r2, r7, #3, #5
 8010ec4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    lv_style_pretty.body.grad_color   = LV_COLOR_SILVER;
 8010ec8:	f8b9 2004 	ldrh.w	r2, [r9, #4]
 8010ecc:	809a      	strh	r2, [r3, #4]
    lv_style_pretty.body.border.color = lv_color_make(0x40, 0x40, 0x40);
 8010ece:	7a9a      	ldrb	r2, [r3, #10]
 8010ed0:	f36a 0204 	bfi	r2, sl, #0, #5
 8010ed4:	729a      	strb	r2, [r3, #10]
 8010ed6:	895a      	ldrh	r2, [r3, #10]
 8010ed8:	2110      	movs	r1, #16
 8010eda:	f361 124a 	bfi	r2, r1, #5, #6
 8010ede:	815a      	strh	r2, [r3, #10]
 8010ee0:	fa22 f20a 	lsr.w	r2, r2, sl
 8010ee4:	f36a 02c7 	bfi	r2, sl, #3, #5
 8010ee8:	72da      	strb	r2, [r3, #11]
    lv_style_copy(&lv_style_pretty_color, &lv_style_pretty);
 8010eea:	4619      	mov	r1, r3
    lv_style_pretty.body.border.opa   = LV_OPA_30;
 8010eec:	224c      	movs	r2, #76	; 0x4c
    lv_style_copy(&lv_style_pretty_color, &lv_style_pretty);
 8010eee:	4620      	mov	r0, r4
    lv_style_pretty.body.border.opa   = LV_OPA_30;
 8010ef0:	73da      	strb	r2, [r3, #15]
    lv_style_copy(&lv_style_pretty_color, &lv_style_pretty);
 8010ef2:	f7ff feb9 	bl	8010c68 <lv_style_copy>
    lv_style_pretty_color.text.color        = lv_color_make(0xe0, 0xe0, 0xe0);
 8010ef6:	f894 3020 	ldrb.w	r3, [r4, #32]
 8010efa:	f04f 0b1c 	mov.w	fp, #28
 8010efe:	f36b 0304 	bfi	r3, fp, #0, #5
 8010f02:	f884 3020 	strb.w	r3, [r4, #32]
 8010f06:	8c23      	ldrh	r3, [r4, #32]
 8010f08:	2238      	movs	r2, #56	; 0x38
 8010f0a:	f362 134a 	bfi	r3, r2, #5, #6
 8010f0e:	8423      	strh	r3, [r4, #32]
 8010f10:	fa23 f30a 	lsr.w	r3, r3, sl
 8010f14:	f36b 03c7 	bfi	r3, fp, #3, #5
 8010f18:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
    lv_style_pretty_color.image.color       = lv_color_make(0xe0, 0xe0, 0xe0);
 8010f1c:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
 8010f20:	f36b 0304 	bfi	r3, fp, #0, #5
 8010f24:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
 8010f28:	8e23      	ldrh	r3, [r4, #48]	; 0x30
 8010f2a:	f362 134a 	bfi	r3, r2, #5, #6
 8010f2e:	8623      	strh	r3, [r4, #48]	; 0x30
 8010f30:	fa23 f30a 	lsr.w	r3, r3, sl
 8010f34:	f36b 03c7 	bfi	r3, fp, #3, #5
 8010f38:	f884 3031 	strb.w	r3, [r4, #49]	; 0x31
    lv_style_pretty_color.line.color        = lv_color_make(0xc0, 0xc0, 0xc0);
 8010f3c:	f894 3034 	ldrb.w	r3, [r4, #52]	; 0x34
 8010f40:	f04f 0918 	mov.w	r9, #24
 8010f44:	f369 0304 	bfi	r3, r9, #0, #5
 8010f48:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
 8010f4c:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
 8010f4e:	2230      	movs	r2, #48	; 0x30
 8010f50:	f362 134a 	bfi	r3, r2, #5, #6
 8010f54:	86a3      	strh	r3, [r4, #52]	; 0x34
 8010f56:	fa23 f30a 	lsr.w	r3, r3, sl
 8010f5a:	f369 03c7 	bfi	r3, r9, #3, #5
 8010f5e:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
    lv_style_pretty_color.body.main_color   = lv_color_make(0x6b, 0x9a, 0xc7);
 8010f62:	78a3      	ldrb	r3, [r4, #2]
 8010f64:	f369 0304 	bfi	r3, r9, #0, #5
 8010f68:	70a3      	strb	r3, [r4, #2]
 8010f6a:	8863      	ldrh	r3, [r4, #2]
 8010f6c:	2226      	movs	r2, #38	; 0x26
 8010f6e:	f362 134a 	bfi	r3, r2, #5, #6
 8010f72:	8063      	strh	r3, [r4, #2]
 8010f74:	220d      	movs	r2, #13
 8010f76:	fa23 f30a 	lsr.w	r3, r3, sl
 8010f7a:	f362 03c7 	bfi	r3, r2, #3, #5
 8010f7e:	70e3      	strb	r3, [r4, #3]
    lv_style_pretty_color.body.grad_color   = lv_color_make(0x2b, 0x59, 0x8b);
 8010f80:	7923      	ldrb	r3, [r4, #4]
 8010f82:	2211      	movs	r2, #17
 8010f84:	f362 0304 	bfi	r3, r2, #0, #5
 8010f88:	7123      	strb	r3, [r4, #4]
 8010f8a:	88a3      	ldrh	r3, [r4, #4]
 8010f8c:	2216      	movs	r2, #22
 8010f8e:	f362 134a 	bfi	r3, r2, #5, #6
 8010f92:	80a3      	strh	r3, [r4, #4]
 8010f94:	2205      	movs	r2, #5
 8010f96:	fa23 f30a 	lsr.w	r3, r3, sl
 8010f9a:	f362 03c7 	bfi	r3, r2, #3, #5
 8010f9e:	7163      	strb	r3, [r4, #5]
    lv_style_pretty_color.body.border.color = lv_color_make(0x15, 0x2c, 0x42);
 8010fa0:	7aa3      	ldrb	r3, [r4, #10]
 8010fa2:	f36a 0304 	bfi	r3, sl, #0, #5
 8010fa6:	72a3      	strb	r3, [r4, #10]
 8010fa8:	8962      	ldrh	r2, [r4, #10]
 8010faa:	230b      	movs	r3, #11
 8010fac:	f363 124a 	bfi	r2, r3, #5, #6
 8010fb0:	9302      	str	r3, [sp, #8]
 8010fb2:	2302      	movs	r3, #2
 8010fb4:	8162      	strh	r2, [r4, #10]
 8010fb6:	fa22 f20a 	lsr.w	r2, r2, sl
    lv_style_copy(&lv_style_transp, &lv_style_plain);
 8010fba:	f8df a040 	ldr.w	sl, [pc, #64]	; 8010ffc <lv_style_init+0x380>
    lv_style_pretty_color.body.border.color = lv_color_make(0x15, 0x2c, 0x42);
 8010fbe:	f363 02c7 	bfi	r2, r3, #3, #5
 8010fc2:	72e2      	strb	r2, [r4, #11]
    lv_style_copy(&lv_style_transp, &lv_style_plain);
 8010fc4:	4629      	mov	r1, r5
 8010fc6:	4650      	mov	r0, sl
 8010fc8:	f7ff fe4e 	bl	8010c68 <lv_style_copy>
    lv_style_transp.glass             = 1;
 8010fcc:	f89a 2000 	ldrb.w	r2, [sl]
    lv_style_copy(&lv_style_transp_fit, &lv_style_transp);
 8010fd0:	4c08      	ldr	r4, [pc, #32]	; (8010ff4 <lv_style_init+0x378>)
    lv_style_transp.body.border.width = 0;
 8010fd2:	f8aa 600c 	strh.w	r6, [sl, #12]
    lv_style_transp.glass             = 1;
 8010fd6:	ea42 0208 	orr.w	r2, r2, r8
 8010fda:	e011      	b.n	8011000 <lv_style_init+0x384>
 8010fdc:	2000c720 	.word	0x2000c720
 8010fe0:	2000c6a8 	.word	0x2000c6a8
 8010fe4:	200006f8 	.word	0x200006f8
 8010fe8:	2000c798 	.word	0x2000c798
 8010fec:	2000c5b8 	.word	0x2000c5b8
 8010ff0:	2000c4c8 	.word	0x2000c4c8
 8010ff4:	2000c66c 	.word	0x2000c66c
 8010ff8:	0801d8da 	.word	0x0801d8da
 8010ffc:	2000c504 	.word	0x2000c504
 8011000:	f88a 2000 	strb.w	r2, [sl]
    lv_style_transp.body.opa          = LV_OPA_TRANSP;
 8011004:	f88a 6008 	strb.w	r6, [sl, #8]
    lv_style_copy(&lv_style_transp_fit, &lv_style_transp);
 8011008:	4651      	mov	r1, sl
 801100a:	4620      	mov	r0, r4
    lv_style_copy(&lv_style_transp_tight, &lv_style_transp_fit);
 801100c:	f8df a394 	ldr.w	sl, [pc, #916]	; 80113a4 <lv_style_init+0x728>
    lv_style_copy(&lv_style_transp_fit, &lv_style_transp);
 8011010:	f7ff fe2a 	bl	8010c68 <lv_style_copy>
    lv_style_transp_fit.body.padding.left   = 0;
 8011014:	8366      	strh	r6, [r4, #26]
    lv_style_transp_fit.body.padding.right  = 0;
 8011016:	83a6      	strh	r6, [r4, #28]
    lv_style_transp_fit.body.padding.top    = 0;
 8011018:	82e6      	strh	r6, [r4, #22]
    lv_style_transp_fit.body.padding.bottom = 0;
 801101a:	8326      	strh	r6, [r4, #24]
    lv_style_copy(&lv_style_transp_tight, &lv_style_transp_fit);
 801101c:	4621      	mov	r1, r4
    lv_style_copy(&lv_style_btn_rel, &lv_style_plain);
 801101e:	4cdd      	ldr	r4, [pc, #884]	; (8011394 <lv_style_init+0x718>)
    lv_style_copy(&lv_style_transp_tight, &lv_style_transp_fit);
 8011020:	4650      	mov	r0, sl
 8011022:	f7ff fe21 	bl	8010c68 <lv_style_copy>
    lv_style_copy(&lv_style_btn_rel, &lv_style_plain);
 8011026:	4629      	mov	r1, r5
 8011028:	4620      	mov	r0, r4
    lv_style_transp_tight.body.padding.inner = 0;
 801102a:	f8aa 601e 	strh.w	r6, [sl, #30]
    lv_style_copy(&lv_style_btn_rel, &lv_style_plain);
 801102e:	f7ff fe1b 	bl	8010c68 <lv_style_copy>
    lv_style_btn_rel.body.main_color     = lv_color_make(0x76, 0xa2, 0xd0);
 8011032:	78a2      	ldrb	r2, [r4, #2]
    lv_style_btn_rel.body.radius         = LV_DPI / 15;
 8011034:	f8a4 8006 	strh.w	r8, [r4, #6]
    lv_style_btn_rel.body.main_color     = lv_color_make(0x76, 0xa2, 0xd0);
 8011038:	211a      	movs	r1, #26
 801103a:	f361 0204 	bfi	r2, r1, #0, #5
 801103e:	70a2      	strb	r2, [r4, #2]
 8011040:	8862      	ldrh	r2, [r4, #2]
    lv_style_btn_rel.body.border.width   = LV_DPI / 50 >= 1 ? LV_DPI / 50 : 1;
 8011042:	f8a4 800c 	strh.w	r8, [r4, #12]
    lv_style_btn_rel.body.main_color     = lv_color_make(0x76, 0xa2, 0xd0);
 8011046:	2128      	movs	r1, #40	; 0x28
 8011048:	f361 124a 	bfi	r2, r1, #5, #6
 801104c:	f04f 0a0e 	mov.w	sl, #14
 8011050:	8062      	strh	r2, [r4, #2]
 8011052:	0a12      	lsrs	r2, r2, #8
 8011054:	f36a 02c7 	bfi	r2, sl, #3, #5
 8011058:	70e2      	strb	r2, [r4, #3]
    lv_style_btn_rel.body.grad_color     = lv_color_make(0x19, 0x3a, 0x5d);
 801105a:	9b02      	ldr	r3, [sp, #8]
 801105c:	7922      	ldrb	r2, [r4, #4]
    lv_style_btn_rel.body.padding.top    = LV_DPI / 6;
 801105e:	82e7      	strh	r7, [r4, #22]
    lv_style_btn_rel.body.grad_color     = lv_color_make(0x19, 0x3a, 0x5d);
 8011060:	f363 0204 	bfi	r2, r3, #0, #5
 8011064:	7122      	strb	r2, [r4, #4]
 8011066:	88a3      	ldrh	r3, [r4, #4]
    lv_style_btn_rel.body.padding.bottom = LV_DPI / 6;
 8011068:	8327      	strh	r7, [r4, #24]
    lv_style_btn_rel.body.grad_color     = lv_color_make(0x19, 0x3a, 0x5d);
 801106a:	f36a 134a 	bfi	r3, sl, #5, #6
 801106e:	80a3      	strh	r3, [r4, #4]
 8011070:	2203      	movs	r2, #3
 8011072:	0a1b      	lsrs	r3, r3, #8
 8011074:	f362 03c7 	bfi	r3, r2, #3, #5
 8011078:	7163      	strb	r3, [r4, #5]
    lv_style_btn_rel.body.padding.left   = LV_DPI / 4;
 801107a:	f04f 0306 	mov.w	r3, #6
 801107e:	8363      	strh	r3, [r4, #26]
    lv_style_btn_rel.body.padding.right  = LV_DPI / 4;
 8011080:	83a3      	strh	r3, [r4, #28]
    lv_style_btn_rel.body.padding.inner  = LV_DPI / 10;
 8011082:	f04f 0302 	mov.w	r3, #2
 8011086:	83e3      	strh	r3, [r4, #30]
    lv_style_btn_rel.body.border.color   = lv_color_make(0x0b, 0x19, 0x28);
 8011088:	7aa3      	ldrb	r3, [r4, #10]
    lv_style_btn_rel.body.shadow.width   = 0;
 801108a:	8266      	strh	r6, [r4, #18]
    lv_style_btn_rel.body.border.color   = lv_color_make(0x0b, 0x19, 0x28);
 801108c:	2205      	movs	r2, #5
 801108e:	f362 0304 	bfi	r3, r2, #0, #5
 8011092:	72a3      	strb	r3, [r4, #10]
 8011094:	8963      	ldrh	r3, [r4, #10]
    lv_style_copy(&lv_style_btn_pr, &lv_style_btn_rel);
 8011096:	4dc0      	ldr	r5, [pc, #768]	; (8011398 <lv_style_init+0x71c>)
    lv_style_btn_rel.body.border.color   = lv_color_make(0x0b, 0x19, 0x28);
 8011098:	2206      	movs	r2, #6
 801109a:	f362 134a 	bfi	r3, r2, #5, #6
 801109e:	8163      	strh	r3, [r4, #10]
 80110a0:	0a1b      	lsrs	r3, r3, #8
 80110a2:	f368 03c7 	bfi	r3, r8, #3, #5
 80110a6:	72e3      	strb	r3, [r4, #11]
    lv_style_btn_rel.body.border.opa     = LV_OPA_70;
 80110a8:	23b2      	movs	r3, #178	; 0xb2
 80110aa:	73e3      	strb	r3, [r4, #15]
    lv_style_btn_rel.body.shadow.color   = LV_COLOR_GRAY;
 80110ac:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 80110b0:	8223      	strh	r3, [r4, #16]
    lv_style_btn_rel.text.color          = lv_color_make(0xff, 0xff, 0xff);
 80110b2:	f894 3020 	ldrb.w	r3, [r4, #32]
 80110b6:	f043 031f 	orr.w	r3, r3, #31
 80110ba:	f884 3020 	strb.w	r3, [r4, #32]
 80110be:	8c23      	ldrh	r3, [r4, #32]
 80110c0:	f443 63fc 	orr.w	r3, r3, #2016	; 0x7e0
 80110c4:	8423      	strh	r3, [r4, #32]
 80110c6:	0a1b      	lsrs	r3, r3, #8
 80110c8:	f043 03f8 	orr.w	r3, r3, #248	; 0xf8
 80110cc:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
    lv_style_btn_rel.image.color         = lv_color_make(0xff, 0xff, 0xff);
 80110d0:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
 80110d4:	f043 031f 	orr.w	r3, r3, #31
 80110d8:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
 80110dc:	8e23      	ldrh	r3, [r4, #48]	; 0x30
 80110de:	f443 63fc 	orr.w	r3, r3, #2016	; 0x7e0
 80110e2:	8623      	strh	r3, [r4, #48]	; 0x30
 80110e4:	0a1b      	lsrs	r3, r3, #8
 80110e6:	f043 03f8 	orr.w	r3, r3, #248	; 0xf8
 80110ea:	f884 3031 	strb.w	r3, [r4, #49]	; 0x31
    lv_style_copy(&lv_style_btn_pr, &lv_style_btn_rel);
 80110ee:	4621      	mov	r1, r4
 80110f0:	4628      	mov	r0, r5
 80110f2:	f7ff fdb9 	bl	8010c68 <lv_style_copy>
    lv_style_btn_pr.body.main_color = lv_color_make(0x33, 0x62, 0x94);
 80110f6:	78ab      	ldrb	r3, [r5, #2]
 80110f8:	2212      	movs	r2, #18
 80110fa:	f362 0304 	bfi	r3, r2, #0, #5
 80110fe:	70ab      	strb	r3, [r5, #2]
 8011100:	886b      	ldrh	r3, [r5, #2]
 8011102:	f369 134a 	bfi	r3, r9, #5, #6
 8011106:	806b      	strh	r3, [r5, #2]
 8011108:	2206      	movs	r2, #6
 801110a:	0a1b      	lsrs	r3, r3, #8
 801110c:	f362 03c7 	bfi	r3, r2, #3, #5
 8011110:	70eb      	strb	r3, [r5, #3]
    lv_style_btn_pr.body.grad_color = lv_color_make(0x10, 0x26, 0x3c);
 8011112:	792b      	ldrb	r3, [r5, #4]
 8011114:	2207      	movs	r2, #7
 8011116:	f362 0304 	bfi	r3, r2, #0, #5
 801111a:	712b      	strb	r3, [r5, #4]
 801111c:	88ab      	ldrh	r3, [r5, #4]
 801111e:	2209      	movs	r2, #9
 8011120:	f362 134a 	bfi	r3, r2, #5, #6
 8011124:	80ab      	strh	r3, [r5, #4]
 8011126:	2202      	movs	r2, #2
 8011128:	0a1b      	lsrs	r3, r3, #8
 801112a:	f362 03c7 	bfi	r3, r2, #3, #5
 801112e:	716b      	strb	r3, [r5, #5]
    lv_style_btn_pr.text.color      = lv_color_make(0xa4, 0xb5, 0xc6);
 8011130:	f895 3020 	ldrb.w	r3, [r5, #32]
 8011134:	f369 0304 	bfi	r3, r9, #0, #5
 8011138:	f885 3020 	strb.w	r3, [r5, #32]
 801113c:	8c2b      	ldrh	r3, [r5, #32]
 801113e:	222d      	movs	r2, #45	; 0x2d
 8011140:	f362 134a 	bfi	r3, r2, #5, #6
 8011144:	842b      	strh	r3, [r5, #32]
 8011146:	0a19      	lsrs	r1, r3, #8
 8011148:	2314      	movs	r3, #20
 801114a:	f363 01c7 	bfi	r1, r3, #3, #5
 801114e:	f885 1021 	strb.w	r1, [r5, #33]	; 0x21
    lv_style_btn_pr.image.color     = lv_color_make(0xa4, 0xb5, 0xc6);
 8011152:	f895 1030 	ldrb.w	r1, [r5, #48]	; 0x30
 8011156:	f369 0104 	bfi	r1, r9, #0, #5
 801115a:	f885 1030 	strb.w	r1, [r5, #48]	; 0x30
 801115e:	8e29      	ldrh	r1, [r5, #48]	; 0x30
 8011160:	f362 114a 	bfi	r1, r2, #5, #6
 8011164:	8629      	strh	r1, [r5, #48]	; 0x30
 8011166:	0a09      	lsrs	r1, r1, #8
 8011168:	f363 01c7 	bfi	r1, r3, #3, #5
 801116c:	f885 1031 	strb.w	r1, [r5, #49]	; 0x31
    lv_style_btn_pr.line.color      = lv_color_make(0xa4, 0xb5, 0xc6);
 8011170:	f895 1034 	ldrb.w	r1, [r5, #52]	; 0x34
 8011174:	f369 0104 	bfi	r1, r9, #0, #5
 8011178:	f885 1034 	strb.w	r1, [r5, #52]	; 0x34
 801117c:	8ea9      	ldrh	r1, [r5, #52]	; 0x34
 801117e:	9202      	str	r2, [sp, #8]
 8011180:	f362 114a 	bfi	r1, r2, #5, #6
 8011184:	86a9      	strh	r1, [r5, #52]	; 0x34
 8011186:	0a09      	lsrs	r1, r1, #8
 8011188:	f363 01c7 	bfi	r1, r3, #3, #5
 801118c:	9301      	str	r3, [sp, #4]
 801118e:	f885 1035 	strb.w	r1, [r5, #53]	; 0x35
    lv_style_copy(&lv_style_btn_tgl_rel, &lv_style_btn_rel);
 8011192:	4d82      	ldr	r5, [pc, #520]	; (801139c <lv_style_init+0x720>)
 8011194:	4621      	mov	r1, r4
 8011196:	4628      	mov	r0, r5
 8011198:	f7ff fd66 	bl	8010c68 <lv_style_copy>
    lv_style_btn_tgl_rel.body.main_color   = lv_color_make(0x0a, 0x11, 0x22);
 801119c:	78a9      	ldrb	r1, [r5, #2]
 801119e:	f367 0104 	bfi	r1, r7, #0, #5
 80111a2:	70a9      	strb	r1, [r5, #2]
 80111a4:	8869      	ldrh	r1, [r5, #2]
 80111a6:	f367 114a 	bfi	r1, r7, #5, #6
 80111aa:	8069      	strh	r1, [r5, #2]
 80111ac:	0a09      	lsrs	r1, r1, #8
 80111ae:	f368 01c7 	bfi	r1, r8, #3, #5
 80111b2:	70e9      	strb	r1, [r5, #3]
    lv_style_btn_tgl_rel.body.grad_color   = lv_color_make(0x37, 0x62, 0x90);
 80111b4:	7929      	ldrb	r1, [r5, #4]
 80111b6:	2312      	movs	r3, #18
 80111b8:	f363 0104 	bfi	r1, r3, #0, #5
 80111bc:	7129      	strb	r1, [r5, #4]
 80111be:	88a9      	ldrh	r1, [r5, #4]
 80111c0:	f369 114a 	bfi	r1, r9, #5, #6
 80111c4:	80a9      	strh	r1, [r5, #4]
 80111c6:	2306      	movs	r3, #6
 80111c8:	0a09      	lsrs	r1, r1, #8
 80111ca:	f363 01c7 	bfi	r1, r3, #3, #5
 80111ce:	7169      	strb	r1, [r5, #5]
    lv_style_btn_tgl_rel.body.border.color = lv_color_make(0x01, 0x07, 0x0d);
 80111d0:	7aa9      	ldrb	r1, [r5, #10]
 80111d2:	f368 0104 	bfi	r1, r8, #0, #5
 80111d6:	72a9      	strb	r1, [r5, #10]
 80111d8:	8969      	ldrh	r1, [r5, #10]
 80111da:	f368 114a 	bfi	r1, r8, #5, #6
 80111de:	8169      	strh	r1, [r5, #10]
 80111e0:	0a09      	lsrs	r1, r1, #8
 80111e2:	f366 01c7 	bfi	r1, r6, #3, #5
 80111e6:	72e9      	strb	r1, [r5, #11]
    lv_style_btn_tgl_rel.text.color        = lv_color_make(0xc8, 0xdd, 0xf4);
 80111e8:	f895 1020 	ldrb.w	r1, [r5, #32]
    lv_style_copy(&lv_style_btn_tgl_pr, &lv_style_btn_tgl_rel);
 80111ec:	f8df 81b8 	ldr.w	r8, [pc, #440]	; 80113a8 <lv_style_init+0x72c>
    lv_style_btn_tgl_rel.text.color        = lv_color_make(0xc8, 0xdd, 0xf4);
 80111f0:	231e      	movs	r3, #30
 80111f2:	f363 0104 	bfi	r1, r3, #0, #5
 80111f6:	f885 1020 	strb.w	r1, [r5, #32]
 80111fa:	8c29      	ldrh	r1, [r5, #32]
 80111fc:	f04f 0e37 	mov.w	lr, #55	; 0x37
 8011200:	f36e 114a 	bfi	r1, lr, #5, #6
 8011204:	8429      	strh	r1, [r5, #32]
 8011206:	2019      	movs	r0, #25
 8011208:	0a09      	lsrs	r1, r1, #8
 801120a:	f360 01c7 	bfi	r1, r0, #3, #5
 801120e:	f885 1021 	strb.w	r1, [r5, #33]	; 0x21
    lv_style_btn_tgl_rel.image.color       = lv_color_make(0xc8, 0xdd, 0xf4);
 8011212:	f895 1030 	ldrb.w	r1, [r5, #48]	; 0x30
 8011216:	f363 0104 	bfi	r1, r3, #0, #5
 801121a:	f885 1030 	strb.w	r1, [r5, #48]	; 0x30
 801121e:	8e29      	ldrh	r1, [r5, #48]	; 0x30
 8011220:	f36e 114a 	bfi	r1, lr, #5, #6
 8011224:	8629      	strh	r1, [r5, #48]	; 0x30
 8011226:	0a09      	lsrs	r1, r1, #8
 8011228:	f360 01c7 	bfi	r1, r0, #3, #5
 801122c:	f885 1031 	strb.w	r1, [r5, #49]	; 0x31
    lv_style_btn_tgl_rel.line.color        = lv_color_make(0xc8, 0xdd, 0xf4);
 8011230:	f895 1034 	ldrb.w	r1, [r5, #52]	; 0x34
 8011234:	f363 0104 	bfi	r1, r3, #0, #5
 8011238:	f885 1034 	strb.w	r1, [r5, #52]	; 0x34
 801123c:	8ea9      	ldrh	r1, [r5, #52]	; 0x34
 801123e:	f36e 114a 	bfi	r1, lr, #5, #6
 8011242:	86a9      	strh	r1, [r5, #52]	; 0x34
 8011244:	0a09      	lsrs	r1, r1, #8
 8011246:	f360 01c7 	bfi	r1, r0, #3, #5
 801124a:	f885 1035 	strb.w	r1, [r5, #53]	; 0x35
    lv_style_copy(&lv_style_btn_tgl_pr, &lv_style_btn_tgl_rel);
 801124e:	4640      	mov	r0, r8
 8011250:	4629      	mov	r1, r5
 8011252:	f7ff fd09 	bl	8010c68 <lv_style_copy>
    lv_style_btn_tgl_pr.body.main_color = lv_color_make(0x02, 0x14, 0x27);
 8011256:	f898 1002 	ldrb.w	r1, [r8, #2]
    lv_style_copy(&lv_style_btn_ina, &lv_style_btn_rel);
 801125a:	4d51      	ldr	r5, [pc, #324]	; (80113a0 <lv_style_init+0x724>)
    lv_style_btn_tgl_pr.body.main_color = lv_color_make(0x02, 0x14, 0x27);
 801125c:	f367 0104 	bfi	r1, r7, #0, #5
 8011260:	f888 1002 	strb.w	r1, [r8, #2]
 8011264:	f8b8 1002 	ldrh.w	r1, [r8, #2]
 8011268:	2305      	movs	r3, #5
 801126a:	f363 114a 	bfi	r1, r3, #5, #6
 801126e:	f8a8 1002 	strh.w	r1, [r8, #2]
 8011272:	0a09      	lsrs	r1, r1, #8
 8011274:	f366 01c7 	bfi	r1, r6, #3, #5
 8011278:	f888 1003 	strb.w	r1, [r8, #3]
    lv_style_btn_tgl_pr.body.grad_color = lv_color_make(0x2b, 0x4c, 0x70);
 801127c:	f898 1004 	ldrb.w	r1, [r8, #4]
 8011280:	f36a 0104 	bfi	r1, sl, #0, #5
 8011284:	f888 1004 	strb.w	r1, [r8, #4]
 8011288:	f8b8 1004 	ldrh.w	r1, [r8, #4]
 801128c:	2013      	movs	r0, #19
 801128e:	f360 114a 	bfi	r1, r0, #5, #6
 8011292:	f8a8 1004 	strh.w	r1, [r8, #4]
 8011296:	0a09      	lsrs	r1, r1, #8
 8011298:	f363 01c7 	bfi	r1, r3, #3, #5
 801129c:	f888 1005 	strb.w	r1, [r8, #5]
    lv_style_btn_tgl_pr.text.color      = lv_color_make(0xa4, 0xb5, 0xc6);
 80112a0:	f898 1020 	ldrb.w	r1, [r8, #32]
 80112a4:	9a02      	ldr	r2, [sp, #8]
 80112a6:	f369 0104 	bfi	r1, r9, #0, #5
 80112aa:	f888 1020 	strb.w	r1, [r8, #32]
 80112ae:	f8b8 1020 	ldrh.w	r1, [r8, #32]
 80112b2:	f362 114a 	bfi	r1, r2, #5, #6
 80112b6:	f8a8 1020 	strh.w	r1, [r8, #32]
 80112ba:	9b01      	ldr	r3, [sp, #4]
 80112bc:	0a09      	lsrs	r1, r1, #8
 80112be:	f363 01c7 	bfi	r1, r3, #3, #5
 80112c2:	f888 1021 	strb.w	r1, [r8, #33]	; 0x21
    lv_style_btn_tgl_pr.image.color     = lv_color_make(0xa4, 0xb5, 0xc6);
 80112c6:	f898 1030 	ldrb.w	r1, [r8, #48]	; 0x30
 80112ca:	f369 0104 	bfi	r1, r9, #0, #5
 80112ce:	f888 1030 	strb.w	r1, [r8, #48]	; 0x30
 80112d2:	f8b8 1030 	ldrh.w	r1, [r8, #48]	; 0x30
 80112d6:	f362 114a 	bfi	r1, r2, #5, #6
 80112da:	f8a8 1030 	strh.w	r1, [r8, #48]	; 0x30
 80112de:	0a09      	lsrs	r1, r1, #8
 80112e0:	f363 01c7 	bfi	r1, r3, #3, #5
 80112e4:	f888 1031 	strb.w	r1, [r8, #49]	; 0x31
    lv_style_btn_tgl_pr.line.color      = lv_color_make(0xa4, 0xb5, 0xc6);
 80112e8:	f898 1034 	ldrb.w	r1, [r8, #52]	; 0x34
 80112ec:	f369 0104 	bfi	r1, r9, #0, #5
 80112f0:	f888 1034 	strb.w	r1, [r8, #52]	; 0x34
 80112f4:	f8b8 1034 	ldrh.w	r1, [r8, #52]	; 0x34
 80112f8:	f362 114a 	bfi	r1, r2, #5, #6
 80112fc:	f8a8 1034 	strh.w	r1, [r8, #52]	; 0x34
 8011300:	0a09      	lsrs	r1, r1, #8
 8011302:	f363 01c7 	bfi	r1, r3, #3, #5
 8011306:	f888 1035 	strb.w	r1, [r8, #53]	; 0x35
    lv_style_copy(&lv_style_btn_ina, &lv_style_btn_rel);
 801130a:	4628      	mov	r0, r5
 801130c:	4621      	mov	r1, r4
 801130e:	f7ff fcab 	bl	8010c68 <lv_style_copy>
    lv_style_btn_ina.body.main_color   = lv_color_make(0xd8, 0xd8, 0xd8);
 8011312:	78ab      	ldrb	r3, [r5, #2]
 8011314:	221b      	movs	r2, #27
 8011316:	f362 0304 	bfi	r3, r2, #0, #5
 801131a:	70ab      	strb	r3, [r5, #2]
 801131c:	886b      	ldrh	r3, [r5, #2]
 801131e:	2236      	movs	r2, #54	; 0x36
 8011320:	f362 134a 	bfi	r3, r2, #5, #6
 8011324:	211b      	movs	r1, #27
 8011326:	806b      	strh	r3, [r5, #2]
 8011328:	0a1b      	lsrs	r3, r3, #8
 801132a:	f361 03c7 	bfi	r3, r1, #3, #5
 801132e:	70eb      	strb	r3, [r5, #3]
    lv_style_btn_ina.body.grad_color   = lv_color_make(0xd8, 0xd8, 0xd8);
 8011330:	792b      	ldrb	r3, [r5, #4]
 8011332:	f361 0304 	bfi	r3, r1, #0, #5
 8011336:	712b      	strb	r3, [r5, #4]
 8011338:	88ab      	ldrh	r3, [r5, #4]
 801133a:	f362 134a 	bfi	r3, r2, #5, #6
 801133e:	80ab      	strh	r3, [r5, #4]
 8011340:	0a1b      	lsrs	r3, r3, #8
 8011342:	f361 03c7 	bfi	r3, r1, #3, #5
 8011346:	716b      	strb	r3, [r5, #5]
    lv_style_btn_ina.body.border.color = lv_color_make(0x90, 0x90, 0x90);
 8011348:	7aab      	ldrb	r3, [r5, #10]
 801134a:	2212      	movs	r2, #18
 801134c:	f362 0304 	bfi	r3, r2, #0, #5
 8011350:	72ab      	strb	r3, [r5, #10]
 8011352:	896b      	ldrh	r3, [r5, #10]
 8011354:	2224      	movs	r2, #36	; 0x24
 8011356:	f362 134a 	bfi	r3, r2, #5, #6
 801135a:	816b      	strh	r3, [r5, #10]
 801135c:	2212      	movs	r2, #18
 801135e:	0a1b      	lsrs	r3, r3, #8
 8011360:	f362 03c7 	bfi	r3, r2, #3, #5
 8011364:	72eb      	strb	r3, [r5, #11]
    lv_style_btn_ina.text.color        = lv_color_make(0x70, 0x70, 0x70);
 8011366:	f895 3020 	ldrb.w	r3, [r5, #32]
 801136a:	f36a 0304 	bfi	r3, sl, #0, #5
 801136e:	f885 3020 	strb.w	r3, [r5, #32]
 8011372:	8c2b      	ldrh	r3, [r5, #32]
 8011374:	f36b 134a 	bfi	r3, fp, #5, #6
 8011378:	842b      	strh	r3, [r5, #32]
 801137a:	0a1b      	lsrs	r3, r3, #8
 801137c:	f36a 03c7 	bfi	r3, sl, #3, #5
 8011380:	f885 3021 	strb.w	r3, [r5, #33]	; 0x21
    lv_style_btn_ina.image.color       = lv_color_make(0x70, 0x70, 0x70);
 8011384:	f895 3030 	ldrb.w	r3, [r5, #48]	; 0x30
 8011388:	f36a 0304 	bfi	r3, sl, #0, #5
 801138c:	f885 3030 	strb.w	r3, [r5, #48]	; 0x30
 8011390:	e00c      	b.n	80113ac <lv_style_init+0x730>
 8011392:	bf00      	nop
 8011394:	2000c540 	.word	0x2000c540
 8011398:	2000c57c 	.word	0x2000c57c
 801139c:	2000c6e4 	.word	0x2000c6e4
 80113a0:	2000c630 	.word	0x2000c630
 80113a4:	2000c5f4 	.word	0x2000c5f4
 80113a8:	2000c75c 	.word	0x2000c75c
 80113ac:	8e2b      	ldrh	r3, [r5, #48]	; 0x30
 80113ae:	f36b 134a 	bfi	r3, fp, #5, #6
 80113b2:	862b      	strh	r3, [r5, #48]	; 0x30
 80113b4:	0a1b      	lsrs	r3, r3, #8
 80113b6:	f36a 03c7 	bfi	r3, sl, #3, #5
 80113ba:	f885 3031 	strb.w	r3, [r5, #49]	; 0x31
    lv_style_btn_ina.line.color        = lv_color_make(0x70, 0x70, 0x70);
 80113be:	f895 3034 	ldrb.w	r3, [r5, #52]	; 0x34
 80113c2:	f36a 0304 	bfi	r3, sl, #0, #5
 80113c6:	f885 3034 	strb.w	r3, [r5, #52]	; 0x34
 80113ca:	8eab      	ldrh	r3, [r5, #52]	; 0x34
 80113cc:	f36b 134a 	bfi	r3, fp, #5, #6
 80113d0:	86ab      	strh	r3, [r5, #52]	; 0x34
 80113d2:	0a1b      	lsrs	r3, r3, #8
 80113d4:	f36a 03c7 	bfi	r3, sl, #3, #5
 80113d8:	f885 3035 	strb.w	r3, [r5, #53]	; 0x35
}
 80113dc:	b005      	add	sp, #20
 80113de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80113e2:	bf00      	nop

080113e4 <lv_style_mix>:
{
 80113e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80113e8:	4614      	mov	r4, r2
 80113ea:	461f      	mov	r7, r3
    STYLE_ATTR_MIX(body.opa, ratio);
 80113ec:	7a0a      	ldrb	r2, [r1, #8]
 80113ee:	7a03      	ldrb	r3, [r0, #8]
 80113f0:	4293      	cmp	r3, r2
 80113f2:	bf1e      	ittt	ne
 80113f4:	1ad2      	subne	r2, r2, r3
 80113f6:	437a      	mulne	r2, r7
 80113f8:	eb03 2322 	addne.w	r3, r3, r2, asr #8
 80113fc:	7223      	strb	r3, [r4, #8]
    STYLE_ATTR_MIX(body.radius, ratio);
 80113fe:	f9b1 2006 	ldrsh.w	r2, [r1, #6]
 8011402:	f9b0 3006 	ldrsh.w	r3, [r0, #6]
 8011406:	4293      	cmp	r3, r2
 8011408:	bf1e      	ittt	ne
 801140a:	1ad2      	subne	r2, r2, r3
 801140c:	437a      	mulne	r2, r7
 801140e:	eb03 2322 	addne.w	r3, r3, r2, asr #8
 8011412:	80e3      	strh	r3, [r4, #6]
    STYLE_ATTR_MIX(body.border.width, ratio);
 8011414:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8011418:	f9b0 300c 	ldrsh.w	r3, [r0, #12]
 801141c:	4293      	cmp	r3, r2
 801141e:	bf1e      	ittt	ne
 8011420:	1ad2      	subne	r2, r2, r3
 8011422:	437a      	mulne	r2, r7
 8011424:	eb03 2322 	addne.w	r3, r3, r2, asr #8
 8011428:	81a3      	strh	r3, [r4, #12]
    STYLE_ATTR_MIX(body.border.opa, ratio);
 801142a:	7bca      	ldrb	r2, [r1, #15]
 801142c:	7bc3      	ldrb	r3, [r0, #15]
 801142e:	4293      	cmp	r3, r2
 8011430:	bf1e      	ittt	ne
 8011432:	1ad2      	subne	r2, r2, r3
 8011434:	437a      	mulne	r2, r7
 8011436:	eb03 2322 	addne.w	r3, r3, r2, asr #8
 801143a:	73e3      	strb	r3, [r4, #15]
    STYLE_ATTR_MIX(body.shadow.width, ratio);
 801143c:	f9b1 2012 	ldrsh.w	r2, [r1, #18]
 8011440:	f9b0 3012 	ldrsh.w	r3, [r0, #18]
 8011444:	4293      	cmp	r3, r2
 8011446:	bf1e      	ittt	ne
 8011448:	1ad2      	subne	r2, r2, r3
 801144a:	437a      	mulne	r2, r7
 801144c:	eb03 2322 	addne.w	r3, r3, r2, asr #8
 8011450:	8263      	strh	r3, [r4, #18]
    STYLE_ATTR_MIX(body.padding.left, ratio);
 8011452:	f9b1 201a 	ldrsh.w	r2, [r1, #26]
 8011456:	f9b0 301a 	ldrsh.w	r3, [r0, #26]
 801145a:	4293      	cmp	r3, r2
 801145c:	bf1e      	ittt	ne
 801145e:	1ad2      	subne	r2, r2, r3
 8011460:	437a      	mulne	r2, r7
 8011462:	eb03 2322 	addne.w	r3, r3, r2, asr #8
 8011466:	8363      	strh	r3, [r4, #26]
    STYLE_ATTR_MIX(body.padding.right, ratio);
 8011468:	f9b1 201c 	ldrsh.w	r2, [r1, #28]
 801146c:	f9b0 301c 	ldrsh.w	r3, [r0, #28]
 8011470:	4293      	cmp	r3, r2
 8011472:	bf1e      	ittt	ne
 8011474:	1ad2      	subne	r2, r2, r3
 8011476:	437a      	mulne	r2, r7
 8011478:	eb03 2322 	addne.w	r3, r3, r2, asr #8
 801147c:	83a3      	strh	r3, [r4, #28]
    STYLE_ATTR_MIX(body.padding.top, ratio);
 801147e:	f9b1 2016 	ldrsh.w	r2, [r1, #22]
 8011482:	f9b0 3016 	ldrsh.w	r3, [r0, #22]
 8011486:	4293      	cmp	r3, r2
 8011488:	bf1e      	ittt	ne
 801148a:	1ad2      	subne	r2, r2, r3
 801148c:	437a      	mulne	r2, r7
 801148e:	eb03 2322 	addne.w	r3, r3, r2, asr #8
 8011492:	82e3      	strh	r3, [r4, #22]
    STYLE_ATTR_MIX(body.padding.bottom, ratio);
 8011494:	f9b1 2018 	ldrsh.w	r2, [r1, #24]
 8011498:	f9b0 3018 	ldrsh.w	r3, [r0, #24]
 801149c:	4293      	cmp	r3, r2
 801149e:	bf1e      	ittt	ne
 80114a0:	1ad2      	subne	r2, r2, r3
 80114a2:	437a      	mulne	r2, r7
 80114a4:	eb03 2322 	addne.w	r3, r3, r2, asr #8
 80114a8:	8323      	strh	r3, [r4, #24]
    STYLE_ATTR_MIX(body.padding.inner, ratio);
 80114aa:	f9b1 201e 	ldrsh.w	r2, [r1, #30]
 80114ae:	f9b0 301e 	ldrsh.w	r3, [r0, #30]
 80114b2:	4293      	cmp	r3, r2
 80114b4:	bf1e      	ittt	ne
 80114b6:	1ad2      	subne	r2, r2, r3
 80114b8:	437a      	mulne	r2, r7
 80114ba:	eb03 2322 	addne.w	r3, r3, r2, asr #8
 80114be:	83e3      	strh	r3, [r4, #30]
    STYLE_ATTR_MIX(text.line_space, ratio);
 80114c0:	f9b0 302a 	ldrsh.w	r3, [r0, #42]	; 0x2a
 80114c4:	f9b1 202a 	ldrsh.w	r2, [r1, #42]	; 0x2a
 80114c8:	4293      	cmp	r3, r2
 80114ca:	bf1e      	ittt	ne
 80114cc:	1ad2      	subne	r2, r2, r3
 80114ce:	437a      	mulne	r2, r7
 80114d0:	eb03 2322 	addne.w	r3, r3, r2, asr #8
 80114d4:	8563      	strh	r3, [r4, #42]	; 0x2a
    STYLE_ATTR_MIX(text.letter_space, ratio);
 80114d6:	f9b1 2028 	ldrsh.w	r2, [r1, #40]	; 0x28
 80114da:	f9b0 3028 	ldrsh.w	r3, [r0, #40]	; 0x28
 80114de:	4293      	cmp	r3, r2
 80114e0:	bf1e      	ittt	ne
 80114e2:	1ad2      	subne	r2, r2, r3
 80114e4:	437a      	mulne	r2, r7
 80114e6:	eb03 2322 	addne.w	r3, r3, r2, asr #8
 80114ea:	8523      	strh	r3, [r4, #40]	; 0x28
    STYLE_ATTR_MIX(text.opa, ratio);
 80114ec:	f891 202c 	ldrb.w	r2, [r1, #44]	; 0x2c
 80114f0:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
 80114f4:	4293      	cmp	r3, r2
 80114f6:	bf1e      	ittt	ne
 80114f8:	1ad2      	subne	r2, r2, r3
 80114fa:	437a      	mulne	r2, r7
 80114fc:	eb03 2322 	addne.w	r3, r3, r2, asr #8
 8011500:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
    STYLE_ATTR_MIX(line.width, ratio);
 8011504:	f9b1 2036 	ldrsh.w	r2, [r1, #54]	; 0x36
 8011508:	f9b0 3036 	ldrsh.w	r3, [r0, #54]	; 0x36
 801150c:	4293      	cmp	r3, r2
 801150e:	bf1e      	ittt	ne
 8011510:	1ad2      	subne	r2, r2, r3
 8011512:	437a      	mulne	r2, r7
 8011514:	eb03 2322 	addne.w	r3, r3, r2, asr #8
 8011518:	86e3      	strh	r3, [r4, #54]	; 0x36
    STYLE_ATTR_MIX(line.opa, ratio);
 801151a:	f891 2038 	ldrb.w	r2, [r1, #56]	; 0x38
 801151e:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 8011522:	4293      	cmp	r3, r2
 8011524:	bf1e      	ittt	ne
 8011526:	1ad2      	subne	r2, r2, r3
 8011528:	437a      	mulne	r2, r7
 801152a:	eb03 2322 	addne.w	r3, r3, r2, asr #8
 801152e:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
    STYLE_ATTR_MIX(image.intense, ratio);
 8011532:	f891 2032 	ldrb.w	r2, [r1, #50]	; 0x32
 8011536:	f890 3032 	ldrb.w	r3, [r0, #50]	; 0x32
 801153a:	4293      	cmp	r3, r2
 801153c:	bf1e      	ittt	ne
 801153e:	1ad2      	subne	r2, r2, r3
 8011540:	437a      	mulne	r2, r7
 8011542:	eb03 2322 	addne.w	r3, r3, r2, asr #8
 8011546:	f884 3032 	strb.w	r3, [r4, #50]	; 0x32
    STYLE_ATTR_MIX(image.opa, ratio);
 801154a:	f890 3033 	ldrb.w	r3, [r0, #51]	; 0x33
 801154e:	f891 2033 	ldrb.w	r2, [r1, #51]	; 0x33
 8011552:	4293      	cmp	r3, r2
 8011554:	bf1e      	ittt	ne
 8011556:	1ad2      	subne	r2, r2, r3
 8011558:	437a      	mulne	r2, r7
 801155a:	eb03 2322 	addne.w	r3, r3, r2, asr #8
    lv_opa_t opa = ratio == STYLE_MIX_MAX ? LV_OPA_COVER : ratio;
 801155e:	f5b7 7f80 	cmp.w	r7, #256	; 0x100
 8011562:	bf14      	ite	ne
 8011564:	46b8      	movne	r8, r7
 8011566:	f04f 08ff 	moveq.w	r8, #255	; 0xff
{
 801156a:	460d      	mov	r5, r1
    STYLE_ATTR_MIX(image.opa, ratio);
 801156c:	f884 3033 	strb.w	r3, [r4, #51]	; 0x33
 8011570:	fa5f f888 	uxtb.w	r8, r8
{
 8011574:	4606      	mov	r6, r0
    res->body.main_color   = lv_color_mix(end->body.main_color, start->body.main_color, opa);
 8011576:	8841      	ldrh	r1, [r0, #2]
 8011578:	8868      	ldrh	r0, [r5, #2]
 801157a:	4642      	mov	r2, r8
 801157c:	f7ff fb3e 	bl	8010bfc <lv_color_mix>
    res->body.grad_color   = lv_color_mix(end->body.grad_color, start->body.grad_color, opa);
 8011580:	4642      	mov	r2, r8
    res->body.main_color   = lv_color_mix(end->body.main_color, start->body.main_color, opa);
 8011582:	8060      	strh	r0, [r4, #2]
    res->body.grad_color   = lv_color_mix(end->body.grad_color, start->body.grad_color, opa);
 8011584:	88b1      	ldrh	r1, [r6, #4]
 8011586:	88a8      	ldrh	r0, [r5, #4]
 8011588:	f7ff fb38 	bl	8010bfc <lv_color_mix>
    res->body.border.color = lv_color_mix(end->body.border.color, start->body.border.color, opa);
 801158c:	4642      	mov	r2, r8
    res->body.grad_color   = lv_color_mix(end->body.grad_color, start->body.grad_color, opa);
 801158e:	80a0      	strh	r0, [r4, #4]
    res->body.border.color = lv_color_mix(end->body.border.color, start->body.border.color, opa);
 8011590:	8971      	ldrh	r1, [r6, #10]
 8011592:	8968      	ldrh	r0, [r5, #10]
 8011594:	f7ff fb32 	bl	8010bfc <lv_color_mix>
    res->body.shadow.color = lv_color_mix(end->body.shadow.color, start->body.shadow.color, opa);
 8011598:	4642      	mov	r2, r8
    res->body.border.color = lv_color_mix(end->body.border.color, start->body.border.color, opa);
 801159a:	8160      	strh	r0, [r4, #10]
    res->body.shadow.color = lv_color_mix(end->body.shadow.color, start->body.shadow.color, opa);
 801159c:	8a31      	ldrh	r1, [r6, #16]
 801159e:	8a28      	ldrh	r0, [r5, #16]
 80115a0:	f7ff fb2c 	bl	8010bfc <lv_color_mix>
    res->text.color        = lv_color_mix(end->text.color, start->text.color, opa);
 80115a4:	4642      	mov	r2, r8
    res->body.shadow.color = lv_color_mix(end->body.shadow.color, start->body.shadow.color, opa);
 80115a6:	8220      	strh	r0, [r4, #16]
    res->text.color        = lv_color_mix(end->text.color, start->text.color, opa);
 80115a8:	8c31      	ldrh	r1, [r6, #32]
 80115aa:	8c28      	ldrh	r0, [r5, #32]
 80115ac:	f7ff fb26 	bl	8010bfc <lv_color_mix>
    res->image.color       = lv_color_mix(end->image.color, start->image.color, opa);
 80115b0:	4642      	mov	r2, r8
    res->text.color        = lv_color_mix(end->text.color, start->text.color, opa);
 80115b2:	8420      	strh	r0, [r4, #32]
    res->image.color       = lv_color_mix(end->image.color, start->image.color, opa);
 80115b4:	8e31      	ldrh	r1, [r6, #48]	; 0x30
 80115b6:	8e28      	ldrh	r0, [r5, #48]	; 0x30
 80115b8:	f7ff fb20 	bl	8010bfc <lv_color_mix>
    res->line.color        = lv_color_mix(end->line.color, start->line.color, opa);
 80115bc:	4642      	mov	r2, r8
    res->image.color       = lv_color_mix(end->image.color, start->image.color, opa);
 80115be:	8620      	strh	r0, [r4, #48]	; 0x30
    res->line.color        = lv_color_mix(end->line.color, start->line.color, opa);
 80115c0:	8eb1      	ldrh	r1, [r6, #52]	; 0x34
 80115c2:	8ea8      	ldrh	r0, [r5, #52]	; 0x34
 80115c4:	f7ff fb1a 	bl	8010bfc <lv_color_mix>
    if(ratio < (STYLE_MIX_MAX >> 1)) {
 80115c8:	2f7f      	cmp	r7, #127	; 0x7f
    res->line.color        = lv_color_mix(end->line.color, start->line.color, opa);
 80115ca:	86a0      	strh	r0, [r4, #52]	; 0x34
 80115cc:	7823      	ldrb	r3, [r4, #0]
 80115ce:	f894 2039 	ldrb.w	r2, [r4, #57]	; 0x39
    if(ratio < (STYLE_MIX_MAX >> 1)) {
 80115d2:	d812      	bhi.n	80115fa <lv_style_mix+0x216>
        res->body.border.part = start->body.border.part;
 80115d4:	7bb1      	ldrb	r1, [r6, #14]
 80115d6:	73a1      	strb	r1, [r4, #14]
        res->glass            = start->glass;
 80115d8:	7831      	ldrb	r1, [r6, #0]
 80115da:	f361 0300 	bfi	r3, r1, #0, #1
 80115de:	7023      	strb	r3, [r4, #0]
        res->text.font        = start->text.font;
 80115e0:	6a73      	ldr	r3, [r6, #36]	; 0x24
 80115e2:	6263      	str	r3, [r4, #36]	; 0x24
        res->body.shadow.type = start->body.shadow.type;
 80115e4:	7d33      	ldrb	r3, [r6, #20]
 80115e6:	7523      	strb	r3, [r4, #20]
        res->line.rounded     = start->line.rounded;
 80115e8:	f896 1039 	ldrb.w	r1, [r6, #57]	; 0x39
        res->line.rounded     = end->line.rounded;
 80115ec:	4613      	mov	r3, r2
 80115ee:	f361 0300 	bfi	r3, r1, #0, #1
 80115f2:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
 80115f6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        res->body.border.part = end->body.border.part;
 80115fa:	7ba9      	ldrb	r1, [r5, #14]
 80115fc:	73a1      	strb	r1, [r4, #14]
        res->glass            = end->glass;
 80115fe:	7829      	ldrb	r1, [r5, #0]
 8011600:	f361 0300 	bfi	r3, r1, #0, #1
 8011604:	7023      	strb	r3, [r4, #0]
        res->text.font        = end->text.font;
 8011606:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8011608:	6263      	str	r3, [r4, #36]	; 0x24
        res->body.shadow.type = end->body.shadow.type;
 801160a:	7d2b      	ldrb	r3, [r5, #20]
 801160c:	7523      	strb	r3, [r4, #20]
        res->line.rounded     = end->line.rounded;
 801160e:	f895 1039 	ldrb.w	r1, [r5, #57]	; 0x39
 8011612:	e7eb      	b.n	80115ec <lv_style_mix+0x208>

08011614 <style_animator>:
{
 8011614:	b510      	push	{r4, lr}
 8011616:	4604      	mov	r4, r0
    lv_style_mix(start, end, act, val);
 8011618:	b28b      	uxth	r3, r1
 801161a:	6f82      	ldr	r2, [r0, #120]	; 0x78
 801161c:	f100 013c 	add.w	r1, r0, #60	; 0x3c
 8011620:	f7ff fee0 	bl	80113e4 <lv_style_mix>
    lv_obj_report_style_mod(dsc->style_anim);
 8011624:	6fa0      	ldr	r0, [r4, #120]	; 0x78
}
 8011626:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    lv_obj_report_style_mod(dsc->style_anim);
 801162a:	f7fe be79 	b.w	8010320 <lv_obj_report_style_mod>
	...

08011630 <lv_style_anim_init>:
{
 8011630:	b570      	push	{r4, r5, r6, lr}
 8011632:	4604      	mov	r4, r0
    lv_anim_init(a);
 8011634:	f003 fdb0 	bl	8015198 <lv_anim_init>
    a->end      = STYLE_MIX_MAX;
 8011638:	f44f 7380 	mov.w	r3, #256	; 0x100
 801163c:	6163      	str	r3, [r4, #20]
    a->exec_cb  = (lv_anim_exec_xcb_t)style_animator;
 801163e:	4b0d      	ldr	r3, [pc, #52]	; (8011674 <lv_style_anim_init+0x44>)
 8011640:	6063      	str	r3, [r4, #4]
    a->path_cb  = lv_anim_path_linear;
 8011642:	4b0d      	ldr	r3, [pc, #52]	; (8011678 <lv_style_anim_init+0x48>)
 8011644:	60a3      	str	r3, [r4, #8]
    a->start    = 0;
 8011646:	2600      	movs	r6, #0
    a->ready_cb = style_animation_common_end_cb;
 8011648:	4b0c      	ldr	r3, [pc, #48]	; (801167c <lv_style_anim_init+0x4c>)
    a->start    = 0;
 801164a:	6126      	str	r6, [r4, #16]
    a->ready_cb = style_animation_common_end_cb;
 801164c:	60e3      	str	r3, [r4, #12]
    dsc = lv_mem_alloc(sizeof(lv_style_anim_dsc_t));
 801164e:	2080      	movs	r0, #128	; 0x80
 8011650:	f004 f898 	bl	8015784 <lv_mem_alloc>
    lv_mem_assert(dsc);
 8011654:	4605      	mov	r5, r0
 8011656:	b900      	cbnz	r0, 801165a <lv_style_anim_init+0x2a>
 8011658:	e7fe      	b.n	8011658 <lv_style_anim_init+0x28>
    dsc->ready_cb   = NULL;
 801165a:	67c6      	str	r6, [r0, #124]	; 0x7c
    dsc->style_anim = NULL;
 801165c:	6786      	str	r6, [r0, #120]	; 0x78
    lv_style_copy(&dsc->style_start, &lv_style_plain);
 801165e:	4908      	ldr	r1, [pc, #32]	; (8011680 <lv_style_anim_init+0x50>)
 8011660:	f7ff fb02 	bl	8010c68 <lv_style_copy>
    lv_style_copy(&dsc->style_end, &lv_style_plain);
 8011664:	4906      	ldr	r1, [pc, #24]	; (8011680 <lv_style_anim_init+0x50>)
 8011666:	f105 003c 	add.w	r0, r5, #60	; 0x3c
 801166a:	f7ff fafd 	bl	8010c68 <lv_style_copy>
    a->var = (void *)dsc;
 801166e:	6025      	str	r5, [r4, #0]
 8011670:	bd70      	pop	{r4, r5, r6, pc}
 8011672:	bf00      	nop
 8011674:	08011615 	.word	0x08011615
 8011678:	0801501d 	.word	0x0801501d
 801167c:	08010c55 	.word	0x08010c55
 8011680:	2000c6a8 	.word	0x2000c6a8

08011684 <lv_style_anim_set_styles>:
    lv_style_anim_dsc_t * dsc = a->var;
 8011684:	6800      	ldr	r0, [r0, #0]
{
 8011686:	b5f0      	push	{r4, r5, r6, r7, lr}
    dsc->style_anim           = to_anim;
 8011688:	6781      	str	r1, [r0, #120]	; 0x78
    memcpy(&dsc->style_start, start, sizeof(lv_style_t));
 801168a:	4614      	mov	r4, r2
 801168c:	4606      	mov	r6, r0
 801168e:	f102 053c 	add.w	r5, r2, #60	; 0x3c
 8011692:	f854 7b04 	ldr.w	r7, [r4], #4
 8011696:	f846 7b04 	str.w	r7, [r6], #4
 801169a:	42ac      	cmp	r4, r5
 801169c:	d1f9      	bne.n	8011692 <lv_style_anim_set_styles+0xe>
    memcpy(&dsc->style_end, end, sizeof(lv_style_t));
 801169e:	303c      	adds	r0, #60	; 0x3c
 80116a0:	f103 043c 	add.w	r4, r3, #60	; 0x3c
 80116a4:	f853 6b04 	ldr.w	r6, [r3], #4
 80116a8:	f840 6b04 	str.w	r6, [r0], #4
 80116ac:	42a3      	cmp	r3, r4
 80116ae:	d1f9      	bne.n	80116a4 <lv_style_anim_set_styles+0x20>
    memcpy(dsc->style_anim, start, sizeof(lv_style_t));
 80116b0:	f852 3b04 	ldr.w	r3, [r2], #4
 80116b4:	f841 3b04 	str.w	r3, [r1], #4
 80116b8:	42aa      	cmp	r2, r5
 80116ba:	d1f9      	bne.n	80116b0 <lv_style_anim_set_styles+0x2c>
}
 80116bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

080116c0 <lv_draw_get_buf>:
 * Be careful to not use the buffer while other processes are using it.
 * @param size the required size
 */
void * lv_draw_get_buf(uint32_t size)
{
    if(size <= draw_buf_size) return LV_GC_ROOT(_lv_draw_buf);
 80116c0:	4b0c      	ldr	r3, [pc, #48]	; (80116f4 <lv_draw_get_buf+0x34>)
 80116c2:	681a      	ldr	r2, [r3, #0]
 80116c4:	4282      	cmp	r2, r0
{
 80116c6:	b510      	push	{r4, lr}
 80116c8:	4601      	mov	r1, r0
 80116ca:	4c0b      	ldr	r4, [pc, #44]	; (80116f8 <lv_draw_get_buf+0x38>)
    if(size <= draw_buf_size) return LV_GC_ROOT(_lv_draw_buf);
 80116cc:	d301      	bcc.n	80116d2 <lv_draw_get_buf+0x12>
 80116ce:	6820      	ldr	r0, [r4, #0]
 80116d0:	bd10      	pop	{r4, pc}

    LV_LOG_TRACE("lv_draw_get_buf: allocate");

    draw_buf_size = size;
 80116d2:	6018      	str	r0, [r3, #0]

    if(LV_GC_ROOT(_lv_draw_buf) == NULL) {
 80116d4:	6823      	ldr	r3, [r4, #0]
 80116d6:	b923      	cbnz	r3, 80116e2 <lv_draw_get_buf+0x22>
        LV_GC_ROOT(_lv_draw_buf) = lv_mem_alloc(size);
 80116d8:	f004 f854 	bl	8015784 <lv_mem_alloc>
 80116dc:	6020      	str	r0, [r4, #0]
        lv_mem_assert(LV_GC_ROOT(_lv_draw_buf));
 80116de:	b938      	cbnz	r0, 80116f0 <lv_draw_get_buf+0x30>
 80116e0:	e7fe      	b.n	80116e0 <lv_draw_get_buf+0x20>
        return LV_GC_ROOT(_lv_draw_buf);
    }

    LV_GC_ROOT(_lv_draw_buf) = lv_mem_realloc(LV_GC_ROOT(_lv_draw_buf), size);
 80116e2:	4618      	mov	r0, r3
 80116e4:	f004 f8ae 	bl	8015844 <lv_mem_realloc>
    lv_mem_assert(LV_GC_ROOT(_lv_draw_buf));
 80116e8:	b108      	cbz	r0, 80116ee <lv_draw_get_buf+0x2e>
    LV_GC_ROOT(_lv_draw_buf) = lv_mem_realloc(LV_GC_ROOT(_lv_draw_buf), size);
 80116ea:	6020      	str	r0, [r4, #0]
 80116ec:	bd10      	pop	{r4, pc}
 80116ee:	e7fe      	b.n	80116ee <lv_draw_get_buf+0x2e>
    return LV_GC_ROOT(_lv_draw_buf);
}
 80116f0:	bd10      	pop	{r4, pc}
 80116f2:	bf00      	nop
 80116f4:	200061f0 	.word	0x200061f0
 80116f8:	2000c7ec 	.word	0x2000c7ec

080116fc <lv_draw_free_buf>:

/**
 * Free the draw buffer
 */
void lv_draw_free_buf(void)
{
 80116fc:	b510      	push	{r4, lr}
    if(LV_GC_ROOT(_lv_draw_buf)) {
 80116fe:	4c05      	ldr	r4, [pc, #20]	; (8011714 <lv_draw_free_buf+0x18>)
 8011700:	6820      	ldr	r0, [r4, #0]
 8011702:	b128      	cbz	r0, 8011710 <lv_draw_free_buf+0x14>
        lv_mem_free(LV_GC_ROOT(_lv_draw_buf));
 8011704:	f004 f874 	bl	80157f0 <lv_mem_free>
        LV_GC_ROOT(_lv_draw_buf) = NULL;
        draw_buf_size = 0;
 8011708:	4a03      	ldr	r2, [pc, #12]	; (8011718 <lv_draw_free_buf+0x1c>)
        LV_GC_ROOT(_lv_draw_buf) = NULL;
 801170a:	2300      	movs	r3, #0
 801170c:	6023      	str	r3, [r4, #0]
        draw_buf_size = 0;
 801170e:	6013      	str	r3, [r2, #0]
 8011710:	bd10      	pop	{r4, pc}
 8011712:	bf00      	nop
 8011714:	2000c7ec 	.word	0x2000c7ec
 8011718:	200061f0 	.word	0x200061f0

0801171c <lv_draw_aa_get_opa>:
    static const lv_opa_t seg7[7] = {18, 55, 91, 128, 164, 200, 237};
    static const lv_opa_t seg8[8] = {16, 48, 80, 112, 143, 175, 207, 239};

    static const lv_opa_t * seg_map[] = {seg1, seg2, seg3, seg4, seg5, seg6, seg7, seg8};

    if(seg == 0)
 801171c:	b188      	cbz	r0, 8011742 <lv_draw_aa_get_opa+0x26>
        return LV_OPA_TRANSP;
    else if(seg < 8)
 801171e:	2807      	cmp	r0, #7
 8011720:	dc08      	bgt.n	8011734 <lv_draw_aa_get_opa+0x18>
        return (uint32_t)((uint32_t)seg_map[seg - 1][px_id] * base_opa) >> 8;
 8011722:	3801      	subs	r0, #1
 8011724:	4b07      	ldr	r3, [pc, #28]	; (8011744 <lv_draw_aa_get_opa+0x28>)
 8011726:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 801172a:	5c58      	ldrb	r0, [r3, r1]
 801172c:	fb10 f002 	smulbb	r0, r0, r2
 8011730:	0a00      	lsrs	r0, r0, #8
 8011732:	4770      	bx	lr
    else {
        return ((px_id * 2 + 1) * base_opa) / (2 * seg);
 8011734:	0049      	lsls	r1, r1, #1
 8011736:	fb01 2202 	mla	r2, r1, r2, r2
 801173a:	0040      	lsls	r0, r0, #1
 801173c:	fb92 f0f0 	sdiv	r0, r2, r0
 8011740:	b2c0      	uxtb	r0, r0
    }
}
 8011742:	4770      	bx	lr
 8011744:	080f4f10 	.word	0x080f4f10

08011748 <lv_color_mix>:
static inline lv_color_t lv_color_mix(lv_color_t c1, lv_color_t c2, uint8_t mix)
{
    lv_color_t ret;
#if LV_COLOR_DEPTH != 1
    /*LV_COLOR_DEPTH == 8, 16 or 32*/
    ret.ch.red = (uint16_t)((uint16_t)c1.ch.red * mix + (c2.ch.red * (255 - mix))) >> 8;
 8011748:	f1c2 03ff 	rsb	r3, r2, #255	; 0xff
{
 801174c:	b570      	push	{r4, r5, r6, lr}
    ret.ch.red = (uint16_t)((uint16_t)c1.ch.red * mix + (c2.ch.red * (255 - mix))) >> 8;
 801174e:	b294      	uxth	r4, r2
 8011750:	b29a      	uxth	r2, r3
 8011752:	f3c1 23c4 	ubfx	r3, r1, #11, #5
 8011756:	fb13 f302 	smulbb	r3, r3, r2
 801175a:	f3c0 25c4 	ubfx	r5, r0, #11, #5
    uint16_t g_2   = (c2.ch.green_h << 3) + c2.ch.green_l;
    uint16_t g_out = (uint16_t)((uint16_t)g_1 * mix + (g_2 * (255 - mix))) >> 8;
    ret.ch.green_h = g_out >> 3;
    ret.ch.green_l = g_out & 0x7;
#else
    ret.ch.green = (uint16_t)((uint16_t)c1.ch.green * mix + (c2.ch.green * (255 - mix))) >> 8;
 801175e:	f3c1 1645 	ubfx	r6, r1, #5, #6
#endif
    ret.ch.blue = (uint16_t)((uint16_t)c1.ch.blue * mix + (c2.ch.blue * (255 - mix))) >> 8;
 8011762:	f001 011f 	and.w	r1, r1, #31
    ret.ch.red = (uint16_t)((uint16_t)c1.ch.red * mix + (c2.ch.red * (255 - mix))) >> 8;
 8011766:	fb05 3504 	mla	r5, r5, r4, r3
    ret.ch.green = (uint16_t)((uint16_t)c1.ch.green * mix + (c2.ch.green * (255 - mix))) >> 8;
 801176a:	fb16 f602 	smulbb	r6, r6, r2
 801176e:	f3c0 1345 	ubfx	r3, r0, #5, #6
    ret.ch.blue = (uint16_t)((uint16_t)c1.ch.blue * mix + (c2.ch.blue * (255 - mix))) >> 8;
 8011772:	fb11 f202 	smulbb	r2, r1, r2
 8011776:	f000 001f 	and.w	r0, r0, #31
 801177a:	fb00 2204 	mla	r2, r0, r4, r2
    ret.ch.green = (uint16_t)((uint16_t)c1.ch.green * mix + (c2.ch.green * (255 - mix))) >> 8;
 801177e:	fb03 6304 	mla	r3, r3, r4, r6
    ret.ch.blue = (uint16_t)((uint16_t)c1.ch.blue * mix + (c2.ch.blue * (255 - mix))) >> 8;
 8011782:	f3c2 2207 	ubfx	r2, r2, #8, #8
#else
    /*LV_COLOR_DEPTH == 1*/
    ret.full = mix > LV_OPA_50 ? c1.full : c2.full;
#endif

    return ret;
 8011786:	f04f 0000 	mov.w	r0, #0
    ret.ch.green = (uint16_t)((uint16_t)c1.ch.green * mix + (c2.ch.green * (255 - mix))) >> 8;
 801178a:	f3c3 2305 	ubfx	r3, r3, #8, #6
    return ret;
 801178e:	f362 0004 	bfi	r0, r2, #0, #5
    ret.ch.red = (uint16_t)((uint16_t)c1.ch.red * mix + (c2.ch.red * (255 - mix))) >> 8;
 8011792:	f3c5 2504 	ubfx	r5, r5, #8, #5
    return ret;
 8011796:	f363 104a 	bfi	r0, r3, #5, #6
 801179a:	f365 20cf 	bfi	r0, r5, #11, #5
}
 801179e:	bd70      	pop	{r4, r5, r6, pc}

080117a0 <lv_draw_px>:
 * @param mask_p fill only on this mask (truncated to VDB area)
 * @param color pixel color
 * @param opa opacity of the area (0..255)
 */
void lv_draw_px(lv_coord_t x, lv_coord_t y, const lv_area_t * mask_p, lv_color_t color, lv_opa_t opa)
{
 80117a0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80117a4:	b085      	sub	sp, #20
 80117a6:	4606      	mov	r6, r0
 80117a8:	f89d 9030 	ldrb.w	r9, [sp, #48]	; 0x30

    if(opa < LV_OPA_MIN) return;
 80117ac:	f1b9 0f0f 	cmp.w	r9, #15
{
 80117b0:	460d      	mov	r5, r1
 80117b2:	461f      	mov	r7, r3
    if(opa < LV_OPA_MIN) return;
 80117b4:	d92e      	bls.n	8011814 <lv_draw_px+0x74>
    if(opa > LV_OPA_MAX) opa = LV_OPA_COVER;

    /*Pixel out of the mask*/
    if(x < mask_p->x1 || x > mask_p->x2 || y < mask_p->y1 || y > mask_p->y2) {
 80117b6:	f9b2 3000 	ldrsh.w	r3, [r2]
    if(opa > LV_OPA_MAX) opa = LV_OPA_COVER;
 80117ba:	f1b9 0ffc 	cmp.w	r9, #252	; 0xfc
 80117be:	bf28      	it	cs
 80117c0:	f04f 09ff 	movcs.w	r9, #255	; 0xff
    if(x < mask_p->x1 || x > mask_p->x2 || y < mask_p->y1 || y > mask_p->y2) {
 80117c4:	4283      	cmp	r3, r0
 80117c6:	dc25      	bgt.n	8011814 <lv_draw_px+0x74>
 80117c8:	f9b2 3004 	ldrsh.w	r3, [r2, #4]
 80117cc:	4283      	cmp	r3, r0
 80117ce:	db21      	blt.n	8011814 <lv_draw_px+0x74>
 80117d0:	f9b2 3002 	ldrsh.w	r3, [r2, #2]
 80117d4:	428b      	cmp	r3, r1
 80117d6:	dc1d      	bgt.n	8011814 <lv_draw_px+0x74>
 80117d8:	f9b2 3006 	ldrsh.w	r3, [r2, #6]
 80117dc:	428b      	cmp	r3, r1
 80117de:	db19      	blt.n	8011814 <lv_draw_px+0x74>
        return;
    }

    lv_disp_t * disp    = lv_refr_get_disp_refreshing();
 80117e0:	f7ff f862 	bl	80108a8 <lv_refr_get_disp_refreshing>
 80117e4:	4680      	mov	r8, r0
    lv_disp_buf_t * vdb = lv_disp_get_buf(disp);
 80117e6:	f003 fbd5 	bl	8014f94 <lv_disp_get_buf>
 * @param area_p pointer to an area
 * @return the width of the area (if x1 == x2 -> width = 1)
 */
static inline lv_coord_t lv_area_get_width(const lv_area_t * area_p)
{
    return area_p->x2 - area_p->x1 + 1;
 80117ea:	8a82      	ldrh	r2, [r0, #20]
 80117ec:	8a04      	ldrh	r4, [r0, #16]
 80117ee:	3201      	adds	r2, #1
 80117f0:	1b12      	subs	r2, r2, r4
    uint32_t vdb_width  = lv_area_get_width(&vdb->area);

    /*Make the coordinates relative to VDB*/
    x -= vdb->area.x1;
 80117f2:	1b36      	subs	r6, r6, r4
    y -= vdb->area.y1;
 80117f4:	8a44      	ldrh	r4, [r0, #18]
 80117f6:	1b2c      	subs	r4, r5, r4

    if(disp->driver.set_px_cb) {
 80117f8:	f8d8 5014 	ldr.w	r5, [r8, #20]
 80117fc:	b212      	sxth	r2, r2
    x -= vdb->area.x1;
 80117fe:	b233      	sxth	r3, r6
    y -= vdb->area.y1;
 8011800:	b224      	sxth	r4, r4
    if(disp->driver.set_px_cb) {
 8011802:	b155      	cbz	r5, 801181a <lv_draw_px+0x7a>
        disp->driver.set_px_cb(&disp->driver, (uint8_t *)vdb->buf_act, vdb_width, x, y, color, opa);
 8011804:	f8cd 9008 	str.w	r9, [sp, #8]
 8011808:	f8ad 7004 	strh.w	r7, [sp, #4]
 801180c:	9400      	str	r4, [sp, #0]
 801180e:	6881      	ldr	r1, [r0, #8]
 8011810:	4640      	mov	r0, r8
 8011812:	47a8      	blx	r5
#if LV_COLOR_DEPTH == 32 && LV_COLOR_SCREEN_TRANSP
            *vdb_px_p = color_mix_2_alpha(*vdb_px_p, (*vdb_px_p).ch.alpha, color, opa);
#endif
        }
    }
}
 8011814:	b005      	add	sp, #20
 8011816:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
            if(opa == LV_OPA_COVER) {
 801181a:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
        lv_color_t * vdb_px_p = vdb->buf_act;
 801181e:	6885      	ldr	r5, [r0, #8]
        vdb_px_p += y * vdb_width + x;
 8011820:	fb02 3404 	mla	r4, r2, r4, r3
            if(opa == LV_OPA_COVER) {
 8011824:	d102      	bne.n	801182c <lv_draw_px+0x8c>
                *vdb_px_p = color;
 8011826:	f825 7014 	strh.w	r7, [r5, r4, lsl #1]
 801182a:	e7f3      	b.n	8011814 <lv_draw_px+0x74>
                *vdb_px_p = lv_color_mix(color, *vdb_px_p, opa);
 801182c:	464a      	mov	r2, r9
 801182e:	f835 1014 	ldrh.w	r1, [r5, r4, lsl #1]
 8011832:	4638      	mov	r0, r7
 8011834:	f7ff ff88 	bl	8011748 <lv_color_mix>
 8011838:	f825 0014 	strh.w	r0, [r5, r4, lsl #1]
 801183c:	e7ea      	b.n	8011814 <lv_draw_px+0x74>

0801183e <lv_draw_fill>:
 * @param mask_p fill only o this mask  (truncated to VDB area)
 * @param color fill color
 * @param opa opacity of the area (0..255)
 */
void lv_draw_fill(const lv_area_t * cords_p, const lv_area_t * mask_p, lv_color_t color, lv_opa_t opa)
{
 801183e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    if(opa < LV_OPA_MIN) return;
 8011842:	2b0f      	cmp	r3, #15
{
 8011844:	b08b      	sub	sp, #44	; 0x2c
 8011846:	4692      	mov	sl, r2
 8011848:	461e      	mov	r6, r3
    if(opa < LV_OPA_MIN) return;
 801184a:	d94c      	bls.n	80118e6 <lv_draw_fill+0xa8>
    if(opa > LV_OPA_MAX) opa = LV_OPA_COVER;
 801184c:	2bfc      	cmp	r3, #252	; 0xfc
    bool union_ok;

    /*Get the union of cord and mask*/
    /* The mask is already truncated to the vdb size
     * in 'lv_refr_area_with_vdb' function */
    union_ok = lv_area_intersect(&res_a, cords_p, mask_p);
 801184e:	460a      	mov	r2, r1
 8011850:	4601      	mov	r1, r0
 8011852:	a808      	add	r0, sp, #32
    if(opa > LV_OPA_MAX) opa = LV_OPA_COVER;
 8011854:	bf34      	ite	cc
 8011856:	461e      	movcc	r6, r3
 8011858:	26ff      	movcs	r6, #255	; 0xff
    union_ok = lv_area_intersect(&res_a, cords_p, mask_p);
 801185a:	f003 fd46 	bl	80152ea <lv_area_intersect>

    /*If there are common part of the three area then draw to the vdb*/
    if(union_ok == false) {
 801185e:	2800      	cmp	r0, #0
 8011860:	d041      	beq.n	80118e6 <lv_draw_fill+0xa8>
        return;
    }

    lv_disp_t * disp    = lv_refr_get_disp_refreshing();
 8011862:	f7ff f821 	bl	80108a8 <lv_refr_get_disp_refreshing>
    lv_disp_buf_t * vdb = lv_disp_get_buf(disp);
 8011866:	f003 fb95 	bl	8014f94 <lv_disp_get_buf>

    lv_area_t vdb_rel_a; /*Stores relative coordinates on vdb*/
    vdb_rel_a.x1 = res_a.x1 - vdb->area.x1;
    vdb_rel_a.y1 = res_a.y1 - vdb->area.y1;
    vdb_rel_a.x2 = res_a.x2 - vdb->area.x1;
 801186a:	f8bd 1024 	ldrh.w	r1, [sp, #36]	; 0x24
    vdb_rel_a.x1 = res_a.x1 - vdb->area.x1;
 801186e:	8a03      	ldrh	r3, [r0, #16]
    vdb_rel_a.y1 = res_a.y1 - vdb->area.y1;
 8011870:	8a45      	ldrh	r5, [r0, #18]
 8011872:	f8bd 9022 	ldrh.w	r9, [sp, #34]	; 0x22
    vdb_rel_a.x1 = res_a.x1 - vdb->area.x1;
 8011876:	f8bd 4020 	ldrh.w	r4, [sp, #32]
    vdb_rel_a.x2 = res_a.x2 - vdb->area.x1;
 801187a:	1ac9      	subs	r1, r1, r3
 801187c:	b20a      	sxth	r2, r1
 801187e:	9205      	str	r2, [sp, #20]
    vdb_rel_a.y2 = res_a.y2 - vdb->area.y1;
 8011880:	f8bd 2026 	ldrh.w	r2, [sp, #38]	; 0x26
    vdb_rel_a.y1 = res_a.y1 - vdb->area.y1;
 8011884:	eba9 0905 	sub.w	r9, r9, r5
    vdb_rel_a.y2 = res_a.y2 - vdb->area.y1;
 8011888:	1b52      	subs	r2, r2, r5
 801188a:	8a85      	ldrh	r5, [r0, #20]
 801188c:	b212      	sxth	r2, r2
 801188e:	9206      	str	r2, [sp, #24]
 8011890:	3501      	adds	r5, #1

    lv_color_t * vdb_buf_tmp = vdb->buf_act;
 8011892:	6882      	ldr	r2, [r0, #8]
 8011894:	9207      	str	r2, [sp, #28]
    vdb_rel_a.x1 = res_a.x1 - vdb->area.x1;
 8011896:	1ae4      	subs	r4, r4, r3
 8011898:	1aed      	subs	r5, r5, r3
{
    /*Set all row in vdb to the given color*/
    lv_coord_t row;
    lv_coord_t col;

    lv_disp_t * disp = lv_refr_get_disp_refreshing();
 801189a:	f7ff f805 	bl	80108a8 <lv_refr_get_disp_refreshing>
    if(disp->driver.set_px_cb) {
 801189e:	6943      	ldr	r3, [r0, #20]
    vdb_rel_a.y1 = res_a.y1 - vdb->area.y1;
 80118a0:	fa1f f989 	uxth.w	r9, r9
    vdb_rel_a.x1 = res_a.x1 - vdb->area.x1;
 80118a4:	b224      	sxth	r4, r4
    vdb_rel_a.y1 = res_a.y1 - vdb->area.y1;
 80118a6:	fa0f f889 	sxth.w	r8, r9
 80118aa:	b22d      	sxth	r5, r5
    lv_disp_t * disp = lv_refr_get_disp_refreshing();
 80118ac:	4683      	mov	fp, r0
    if(disp->driver.set_px_cb) {
 80118ae:	bb93      	cbnz	r3, 8011916 <lv_draw_fill+0xd8>
            for(row = fill_area->y1; row <= fill_area->y2; row++) {
                disp->driver.set_px_cb(&disp->driver, (uint8_t *)mem, mem_width, col, row, color, opa);
            }
        }
    } else {
        mem += fill_area->y1 * mem_width; /*Go to the first row*/
 80118b0:	9907      	ldr	r1, [sp, #28]
 80118b2:	fb08 f205 	mul.w	r2, r8, r5

        /*Run simpler function without opacity*/
        if(opa == LV_OPA_COVER) {
 80118b6:	2eff      	cmp	r6, #255	; 0xff
        mem += fill_area->y1 * mem_width; /*Go to the first row*/
 80118b8:	eb01 0742 	add.w	r7, r1, r2, lsl #1
        if(opa == LV_OPA_COVER) {
 80118bc:	d13e      	bne.n	801193c <lv_draw_fill+0xfe>
 80118be:	4623      	mov	r3, r4

            /*Fill the first row with 'color'*/
            for(col = fill_area->x1; col <= fill_area->x2; col++) {
 80118c0:	9a05      	ldr	r2, [sp, #20]
 80118c2:	429a      	cmp	r2, r3
 80118c4:	da2c      	bge.n	8011920 <lv_draw_fill+0xe2>
                mem[col] = color;
            }

            /*Copy the first row to all other rows*/
            lv_color_t * mem_first = &mem[fill_area->x1];
 80118c6:	0063      	lsls	r3, r4, #1
            lv_coord_t copy_size   = (fill_area->x2 - fill_area->x1 + 1) * sizeof(lv_color_t);
 80118c8:	1b14      	subs	r4, r2, r4
 80118ca:	3401      	adds	r4, #1
            mem += mem_width;
 80118cc:	006d      	lsls	r5, r5, #1
            lv_color_t * mem_first = &mem[fill_area->x1];
 80118ce:	eb07 0803 	add.w	r8, r7, r3
            lv_coord_t copy_size   = (fill_area->x2 - fill_area->x1 + 1) * sizeof(lv_color_t);
 80118d2:	0064      	lsls	r4, r4, #1

            for(row = fill_area->y1 + 1; row <= fill_area->y2; row++) {
 80118d4:	f109 0601 	add.w	r6, r9, #1
 80118d8:	442b      	add	r3, r5
            lv_coord_t copy_size   = (fill_area->x2 - fill_area->x1 + 1) * sizeof(lv_color_t);
 80118da:	b224      	sxth	r4, r4
            for(row = fill_area->y1 + 1; row <= fill_area->y2; row++) {
 80118dc:	b236      	sxth	r6, r6
 80118de:	441f      	add	r7, r3
 80118e0:	9b06      	ldr	r3, [sp, #24]
 80118e2:	42b3      	cmp	r3, r6
 80118e4:	da21      	bge.n	801192a <lv_draw_fill+0xec>
}
 80118e6:	b00b      	add	sp, #44	; 0x2c
 80118e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
                disp->driver.set_px_cb(&disp->driver, (uint8_t *)mem, mem_width, col, row, color, opa);
 80118ec:	f8cd 9000 	str.w	r9, [sp]
 80118f0:	9602      	str	r6, [sp, #8]
 80118f2:	f8ad a004 	strh.w	sl, [sp, #4]
 80118f6:	4623      	mov	r3, r4
 80118f8:	462a      	mov	r2, r5
 80118fa:	9907      	ldr	r1, [sp, #28]
 80118fc:	f8db 7014 	ldr.w	r7, [fp, #20]
 8011900:	4658      	mov	r0, fp
 8011902:	47b8      	blx	r7
 8011904:	f109 0901 	add.w	r9, r9, #1
 8011908:	fa0f f989 	sxth.w	r9, r9
            for(row = fill_area->y1; row <= fill_area->y2; row++) {
 801190c:	9b06      	ldr	r3, [sp, #24]
 801190e:	454b      	cmp	r3, r9
 8011910:	daec      	bge.n	80118ec <lv_draw_fill+0xae>
 8011912:	3401      	adds	r4, #1
 8011914:	b224      	sxth	r4, r4
        for(col = fill_area->x1; col <= fill_area->x2; col++) {
 8011916:	9b05      	ldr	r3, [sp, #20]
 8011918:	42a3      	cmp	r3, r4
 801191a:	dbe4      	blt.n	80118e6 <lv_draw_fill+0xa8>
 801191c:	46c1      	mov	r9, r8
 801191e:	e7f5      	b.n	801190c <lv_draw_fill+0xce>
                mem[col] = color;
 8011920:	f827 a013 	strh.w	sl, [r7, r3, lsl #1]
 8011924:	3301      	adds	r3, #1
 8011926:	b21b      	sxth	r3, r3
 8011928:	e7ca      	b.n	80118c0 <lv_draw_fill+0x82>
                memcpy(&mem[fill_area->x1], mem_first, copy_size);
 801192a:	4638      	mov	r0, r7
 801192c:	4622      	mov	r2, r4
 801192e:	4641      	mov	r1, r8
 8011930:	3601      	adds	r6, #1
 8011932:	f009 fa41 	bl	801adb8 <memcpy>
 8011936:	b236      	sxth	r6, r6
 8011938:	442f      	add	r7, r5
 801193a:	e7d1      	b.n	80118e0 <lv_draw_fill+0xa2>
            bool scr_transp = false;
#if LV_COLOR_DEPTH == 32 && LV_COLOR_SCREEN_TRANSP
            scr_transp = disp->driver.screen_transp;
#endif

            lv_color_t bg_tmp  = LV_COLOR_BLACK;
 801193c:	f04f 0900 	mov.w	r9, #0
 8011940:	f363 0904 	bfi	r9, r3, #0, #5
 8011944:	f363 194a 	bfi	r9, r3, #5, #6
 8011948:	f363 29cf 	bfi	r9, r3, #11, #5
            lv_color_t opa_tmp = lv_color_mix(color, bg_tmp, opa);
 801194c:	4632      	mov	r2, r6
 801194e:	4649      	mov	r1, r9
 8011950:	4650      	mov	r0, sl
 8011952:	f7ff fef9 	bl	8011748 <lv_color_mix>
#if LV_COLOR_DEPTH == 32 && LV_COLOR_SCREEN_TRANSP
                        mem[col] = color_mix_2_alpha(mem[col], mem[col].ch.alpha, color, opa);
#endif
                    }
                }
                mem += mem_width;
 8011956:	006b      	lsls	r3, r5, #1
            for(row = fill_area->y1; row <= fill_area->y2; row++) {
 8011958:	9a06      	ldr	r2, [sp, #24]
 801195a:	4542      	cmp	r2, r8
 801195c:	dbc3      	blt.n	80118e6 <lv_draw_fill+0xa8>
 801195e:	4625      	mov	r5, r4
 8011960:	e012      	b.n	8011988 <lv_draw_fill+0x14a>
                        if(mem[col].full != bg_tmp.full) {
 8011962:	f837 1015 	ldrh.w	r1, [r7, r5, lsl #1]
 8011966:	fa1f f289 	uxth.w	r2, r9
 801196a:	4291      	cmp	r1, r2
 801196c:	eb07 0b45 	add.w	fp, r7, r5, lsl #1
 8011970:	d006      	beq.n	8011980 <lv_draw_fill+0x142>
                            opa_tmp = lv_color_mix(color, bg_tmp, opa);
 8011972:	4632      	mov	r2, r6
 8011974:	4650      	mov	r0, sl
 8011976:	9307      	str	r3, [sp, #28]
                            bg_tmp  = mem[col];
 8011978:	4689      	mov	r9, r1
                            opa_tmp = lv_color_mix(color, bg_tmp, opa);
 801197a:	f7ff fee5 	bl	8011748 <lv_color_mix>
 801197e:	9b07      	ldr	r3, [sp, #28]
                        mem[col] = opa_tmp;
 8011980:	f8ab 0000 	strh.w	r0, [fp]
 8011984:	3501      	adds	r5, #1
 8011986:	b22d      	sxth	r5, r5
                for(col = fill_area->x1; col <= fill_area->x2; col++) {
 8011988:	9a05      	ldr	r2, [sp, #20]
 801198a:	42aa      	cmp	r2, r5
 801198c:	dae9      	bge.n	8011962 <lv_draw_fill+0x124>
 801198e:	f108 0801 	add.w	r8, r8, #1
                mem += mem_width;
 8011992:	441f      	add	r7, r3
 8011994:	fa0f f888 	sxth.w	r8, r8
 8011998:	e7de      	b.n	8011958 <lv_draw_fill+0x11a>
	...

0801199c <lv_draw_letter>:
{
 801199c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80119a0:	b09b      	sub	sp, #108	; 0x6c
 80119a2:	4615      	mov	r5, r2
 80119a4:	4699      	mov	r9, r3
    const uint8_t bpp1_opa_table[2]  = {0, 255};          /*Opacity mapping with bpp = 1 (Just for compatibility)*/
 80119a6:	2200      	movs	r2, #0
{
 80119a8:	f89d 3094 	ldrb.w	r3, [sp, #148]	; 0x94
 80119ac:	9305      	str	r3, [sp, #20]
    const uint8_t bpp1_opa_table[2]  = {0, 255};          /*Opacity mapping with bpp = 1 (Just for compatibility)*/
 80119ae:	f88d 2048 	strb.w	r2, [sp, #72]	; 0x48
 80119b2:	23ff      	movs	r3, #255	; 0xff
    const uint8_t bpp2_opa_table[4]  = {0, 85, 170, 255}; /*Opacity mapping with bpp = 2*/
 80119b4:	f88d 204c 	strb.w	r2, [sp, #76]	; 0x4c
 80119b8:	2255      	movs	r2, #85	; 0x55
    const uint8_t bpp1_opa_table[2]  = {0, 255};          /*Opacity mapping with bpp = 1 (Just for compatibility)*/
 80119ba:	f88d 3049 	strb.w	r3, [sp, #73]	; 0x49
    const uint8_t bpp2_opa_table[4]  = {0, 85, 170, 255}; /*Opacity mapping with bpp = 2*/
 80119be:	f88d 204d 	strb.w	r2, [sp, #77]	; 0x4d
 80119c2:	f88d 304f 	strb.w	r3, [sp, #79]	; 0x4f
 80119c6:	22aa      	movs	r2, #170	; 0xaa
    const uint8_t bpp4_opa_table[16] = {0,  17, 34,  51,  /*Opacity mapping with bpp = 4*/
 80119c8:	4bb5      	ldr	r3, [pc, #724]	; (8011ca0 <lv_draw_letter+0x304>)
    const uint8_t bpp2_opa_table[4]  = {0, 85, 170, 255}; /*Opacity mapping with bpp = 2*/
 80119ca:	f88d 204e 	strb.w	r2, [sp, #78]	; 0x4e
    const uint8_t bpp4_opa_table[16] = {0,  17, 34,  51,  /*Opacity mapping with bpp = 4*/
 80119ce:	aa16      	add	r2, sp, #88	; 0x58
{
 80119d0:	4604      	mov	r4, r0
 80119d2:	460f      	mov	r7, r1
    const uint8_t bpp4_opa_table[16] = {0,  17, 34,  51,  /*Opacity mapping with bpp = 4*/
 80119d4:	f103 0c10 	add.w	ip, r3, #16
 80119d8:	4616      	mov	r6, r2
 80119da:	6818      	ldr	r0, [r3, #0]
 80119dc:	6859      	ldr	r1, [r3, #4]
 80119de:	4696      	mov	lr, r2
 80119e0:	e8ae 0003 	stmia.w	lr!, {r0, r1}
 80119e4:	3308      	adds	r3, #8
 80119e6:	4563      	cmp	r3, ip
 80119e8:	4672      	mov	r2, lr
 80119ea:	d1f6      	bne.n	80119da <lv_draw_letter+0x3e>
    if(opa < LV_OPA_MIN) return;
 80119ec:	9b05      	ldr	r3, [sp, #20]
 80119ee:	2b0f      	cmp	r3, #15
 80119f0:	f240 80d4 	bls.w	8011b9c <lv_draw_letter+0x200>
    if(opa > LV_OPA_MAX) opa = LV_OPA_COVER;
 80119f4:	2bfc      	cmp	r3, #252	; 0xfc
 80119f6:	bf28      	it	cs
 80119f8:	23ff      	movcs	r3, #255	; 0xff
 80119fa:	9305      	str	r3, [sp, #20]
    if(font_p == NULL) {
 80119fc:	2d00      	cmp	r5, #0
 80119fe:	f000 80cd 	beq.w	8011b9c <lv_draw_letter+0x200>
    bool g_ret = lv_font_get_glyph_dsc(font_p, &g, letter, '\0');
 8011a02:	2300      	movs	r3, #0
 8011a04:	464a      	mov	r2, r9
 8011a06:	a914      	add	r1, sp, #80	; 0x50
 8011a08:	4628      	mov	r0, r5
 8011a0a:	f003 f8d5 	bl	8014bb8 <lv_font_get_glyph_dsc>
    if(g_ret == false) return;
 8011a0e:	2800      	cmp	r0, #0
 8011a10:	f000 80c4 	beq.w	8011b9c <lv_draw_letter+0x200>
    switch(g.bpp) {
 8011a14:	f89d 3056 	ldrb.w	r3, [sp, #86]	; 0x56
 8011a18:	3b01      	subs	r3, #1
 8011a1a:	2b07      	cmp	r3, #7
 8011a1c:	f200 80be 	bhi.w	8011b9c <lv_draw_letter+0x200>
 8011a20:	e8df f003 	tbb	[pc, r3]
 8011a24:	09bcc304 	.word	0x09bcc304
 8011a28:	bfbcbcbc 	.word	0xbfbcbcbc
            bitmask_init  = 0x80;
 8011a2c:	2380      	movs	r3, #128	; 0x80
 8011a2e:	9308      	str	r3, [sp, #32]
            bpp_opa_table = bpp1_opa_table;
 8011a30:	ab12      	add	r3, sp, #72	; 0x48
            bpp_opa_table = bpp2_opa_table;
 8011a32:	9307      	str	r3, [sp, #28]
 8011a34:	e002      	b.n	8011a3c <lv_draw_letter+0xa0>
            bitmask_init  = 0xF0;
 8011a36:	23f0      	movs	r3, #240	; 0xf0
 8011a38:	9308      	str	r3, [sp, #32]
            bpp_opa_table = bpp4_opa_table;
 8011a3a:	9607      	str	r6, [sp, #28]
    lv_coord_t pos_x = pos_p->x + g.ofs_x;
 8011a3c:	f99d 2054 	ldrsb.w	r2, [sp, #84]	; 0x54
    lv_coord_t pos_y = pos_p->y + (font_p->line_height - font_p->base_line) - g.box_h - g.ofs_y;
 8011a40:	f99d 3055 	ldrsb.w	r3, [sp, #85]	; 0x55
    lv_coord_t pos_x = pos_p->x + g.ofs_x;
 8011a44:	f9b4 8000 	ldrsh.w	r8, [r4]
 8011a48:	9209      	str	r2, [sp, #36]	; 0x24
    const uint8_t * map_p = lv_font_get_glyph_bitmap(font_p, letter);
 8011a4a:	4649      	mov	r1, r9
 8011a4c:	4628      	mov	r0, r5
    lv_coord_t pos_y = pos_p->y + (font_p->line_height - font_p->base_line) - g.box_h - g.ofs_y;
 8011a4e:	f9b4 4002 	ldrsh.w	r4, [r4, #2]
 8011a52:	f895 b008 	ldrb.w	fp, [r5, #8]
 8011a56:	f895 a009 	ldrb.w	sl, [r5, #9]
 8011a5a:	f89d 6053 	ldrb.w	r6, [sp, #83]	; 0x53
 8011a5e:	9306      	str	r3, [sp, #24]
    const uint8_t * map_p = lv_font_get_glyph_bitmap(font_p, letter);
 8011a60:	f003 f8a8 	bl	8014bb4 <lv_font_get_glyph_bitmap>
    if(map_p == NULL) return;
 8011a64:	4681      	mov	r9, r0
 8011a66:	2800      	cmp	r0, #0
 8011a68:	f000 8098 	beq.w	8011b9c <lv_draw_letter+0x200>
    lv_coord_t pos_x = pos_p->x + g.ofs_x;
 8011a6c:	9a09      	ldr	r2, [sp, #36]	; 0x24
    if(pos_x + g.box_w < mask_p->x1 || pos_x > mask_p->x2 || pos_y + g.box_h < mask_p->y1 || pos_y > mask_p->y2) return;
 8011a6e:	f9b7 1000 	ldrsh.w	r1, [r7]
    lv_coord_t pos_x = pos_p->x + g.ofs_x;
 8011a72:	4490      	add	r8, r2
 8011a74:	fa1f f388 	uxth.w	r3, r8
 8011a78:	930a      	str	r3, [sp, #40]	; 0x28
 8011a7a:	f9bd 8028 	ldrsh.w	r8, [sp, #40]	; 0x28
    if(pos_x + g.box_w < mask_p->x1 || pos_x > mask_p->x2 || pos_y + g.box_h < mask_p->y1 || pos_y > mask_p->y2) return;
 8011a7e:	f89d 2052 	ldrb.w	r2, [sp, #82]	; 0x52
 8011a82:	4442      	add	r2, r8
 8011a84:	428a      	cmp	r2, r1
 8011a86:	f2c0 8089 	blt.w	8011b9c <lv_draw_letter+0x200>
 8011a8a:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8011a8e:	4542      	cmp	r2, r8
 8011a90:	f2c0 8084 	blt.w	8011b9c <lv_draw_letter+0x200>
    lv_coord_t pos_y = pos_p->y + (font_p->line_height - font_p->base_line) - g.box_h - g.ofs_y;
 8011a94:	9b06      	ldr	r3, [sp, #24]
    if(pos_x + g.box_w < mask_p->x1 || pos_x > mask_p->x2 || pos_y + g.box_h < mask_p->y1 || pos_y > mask_p->y2) return;
 8011a96:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
    lv_coord_t pos_y = pos_p->y + (font_p->line_height - font_p->base_line) - g.box_h - g.ofs_y;
 8011a9a:	441e      	add	r6, r3
 8011a9c:	1ba4      	subs	r4, r4, r6
 8011a9e:	44a3      	add	fp, r4
 8011aa0:	ebab 0a0a 	sub.w	sl, fp, sl
 8011aa4:	fa1f f38a 	uxth.w	r3, sl
 8011aa8:	930b      	str	r3, [sp, #44]	; 0x2c
 8011aaa:	f9bd b02c 	ldrsh.w	fp, [sp, #44]	; 0x2c
    if(pos_x + g.box_w < mask_p->x1 || pos_x > mask_p->x2 || pos_y + g.box_h < mask_p->y1 || pos_y > mask_p->y2) return;
 8011aae:	f89d 3053 	ldrb.w	r3, [sp, #83]	; 0x53
 8011ab2:	445b      	add	r3, fp
 8011ab4:	4293      	cmp	r3, r2
 8011ab6:	db71      	blt.n	8011b9c <lv_draw_letter+0x200>
 8011ab8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8011abc:	455b      	cmp	r3, fp
 8011abe:	db6d      	blt.n	8011b9c <lv_draw_letter+0x200>
    lv_disp_t * disp    = lv_refr_get_disp_refreshing();
 8011ac0:	f7fe fef2 	bl	80108a8 <lv_refr_get_disp_refreshing>
 8011ac4:	900f      	str	r0, [sp, #60]	; 0x3c
    lv_disp_buf_t * vdb = lv_disp_get_buf(disp);
 8011ac6:	f003 fa65 	bl	8014f94 <lv_disp_get_buf>
 8011aca:	8a83      	ldrh	r3, [r0, #20]
 8011acc:	f9b0 2010 	ldrsh.w	r2, [r0, #16]
    uint8_t width_byte_scr = g.box_w >> 3; /*Width in bytes (on the screen finally) (e.g. w = 11 -> 2 bytes wide)*/
 8011ad0:	f89d 6052 	ldrb.w	r6, [sp, #82]	; 0x52
    lv_color_t * vdb_buf_tmp = vdb->buf_act;
 8011ad4:	f8d0 c008 	ldr.w	ip, [r0, #8]
    uint16_t width_bit = g.box_w * g.bpp; /*Letter width in bits*/
 8011ad8:	f89d 4056 	ldrb.w	r4, [sp, #86]	; 0x56
    lv_coord_t row_start = pos_y >= mask_p->y1 ? 0 : mask_p->y1 - pos_y;
 8011adc:	f9b7 5002 	ldrsh.w	r5, [r7, #2]
 8011ae0:	3301      	adds	r3, #1
 8011ae2:	1a9b      	subs	r3, r3, r2
 8011ae4:	b21b      	sxth	r3, r3
 8011ae6:	930d      	str	r3, [sp, #52]	; 0x34
    lv_coord_t col_start = pos_x >= mask_p->x1 ? 0 : mask_p->x1 - pos_x;
 8011ae8:	f9b7 3000 	ldrsh.w	r3, [r7]
 8011aec:	4598      	cmp	r8, r3
 8011aee:	bfbd      	ittte	lt
 8011af0:	990a      	ldrlt	r1, [sp, #40]	; 0x28
 8011af2:	1a5b      	sublt	r3, r3, r1
 8011af4:	b29b      	uxthlt	r3, r3
 8011af6:	2300      	movge	r3, #0
 8011af8:	b219      	sxth	r1, r3
 8011afa:	9106      	str	r1, [sp, #24]
    lv_coord_t col_end   = pos_x + g.box_w <= mask_p->x2 ? g.box_w : mask_p->x2 - pos_x + 1;
 8011afc:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
    lv_disp_buf_t * vdb = lv_disp_get_buf(disp);
 8011b00:	4682      	mov	sl, r0
    lv_coord_t col_end   = pos_x + g.box_w <= mask_p->x2 ? g.box_w : mask_p->x2 - pos_x + 1;
 8011b02:	eb08 0006 	add.w	r0, r8, r6
 8011b06:	4288      	cmp	r0, r1
    uint16_t width_bit = g.box_w * g.bpp; /*Letter width in bits*/
 8011b08:	fb06 fe04 	mul.w	lr, r6, r4
    lv_coord_t col_end   = pos_x + g.box_w <= mask_p->x2 ? g.box_w : mask_p->x2 - pos_x + 1;
 8011b0c:	bfc4      	itt	gt
 8011b0e:	1c4e      	addgt	r6, r1, #1
 8011b10:	990a      	ldrgt	r1, [sp, #40]	; 0x28
    lv_coord_t row_end   = pos_y + g.box_h <= mask_p->y2 ? g.box_h : mask_p->y2 - pos_y + 1;
 8011b12:	f89d 0053 	ldrb.w	r0, [sp, #83]	; 0x53
    lv_coord_t col_end   = pos_x + g.box_w <= mask_p->x2 ? g.box_w : mask_p->x2 - pos_x + 1;
 8011b16:	bfc8      	it	gt
 8011b18:	1a76      	subgt	r6, r6, r1
    lv_coord_t row_start = pos_y >= mask_p->y1 ? 0 : mask_p->y1 - pos_y;
 8011b1a:	45ab      	cmp	fp, r5
 8011b1c:	bfbc      	itt	lt
 8011b1e:	990b      	ldrlt	r1, [sp, #44]	; 0x2c
 8011b20:	1a6d      	sublt	r5, r5, r1
    lv_coord_t row_end   = pos_y + g.box_h <= mask_p->y2 ? g.box_h : mask_p->y2 - pos_y + 1;
 8011b22:	f9b7 1006 	ldrsh.w	r1, [r7, #6]
 8011b26:	eb00 070b 	add.w	r7, r0, fp
    lv_coord_t row_start = pos_y >= mask_p->y1 ? 0 : mask_p->y1 - pos_y;
 8011b2a:	bfb4      	ite	lt
 8011b2c:	b2ad      	uxthlt	r5, r5
 8011b2e:	2500      	movge	r5, #0
    lv_coord_t row_end   = pos_y + g.box_h <= mask_p->y2 ? g.box_h : mask_p->y2 - pos_y + 1;
 8011b30:	428f      	cmp	r7, r1
 8011b32:	bfc3      	ittte	gt
 8011b34:	980b      	ldrgt	r0, [sp, #44]	; 0x2c
 8011b36:	3101      	addgt	r1, #1
 8011b38:	1a09      	subgt	r1, r1, r0
 8011b3a:	b201      	sxthle	r1, r0
 8011b3c:	bfc8      	it	gt
 8011b3e:	b209      	sxthgt	r1, r1
 8011b40:	910e      	str	r1, [sp, #56]	; 0x38
    uint32_t bit_ofs = (row_start * width_bit) + (col_start * g.bpp);
 8011b42:	f8bd 1018 	ldrh.w	r1, [sp, #24]
        vdb_buf_tmp += vdb_width - (col_end - col_start); /*Next row in VDB*/
 8011b46:	980d      	ldr	r0, [sp, #52]	; 0x34
    uint32_t bit_ofs = (row_start * width_bit) + (col_start * g.bpp);
 8011b48:	fb14 f401 	smulbb	r4, r4, r1
        vdb_buf_tmp += vdb_width - (col_end - col_start); /*Next row in VDB*/
 8011b4c:	9906      	ldr	r1, [sp, #24]
    lv_coord_t col_end   = pos_x + g.box_w <= mask_p->x2 ? g.box_w : mask_p->x2 - pos_x + 1;
 8011b4e:	b236      	sxth	r6, r6
        vdb_buf_tmp += vdb_width - (col_end - col_start); /*Next row in VDB*/
 8011b50:	1a71      	subs	r1, r6, r1
 8011b52:	1af3      	subs	r3, r6, r3
 8011b54:	1a41      	subs	r1, r0, r1
 8011b56:	b29b      	uxth	r3, r3
 8011b58:	9806      	ldr	r0, [sp, #24]
 8011b5a:	005b      	lsls	r3, r3, #1
 8011b5c:	42b0      	cmp	r0, r6
 8011b5e:	bfc8      	it	gt
 8011b60:	2300      	movgt	r3, #0
 8011b62:	eb03 0341 	add.w	r3, r3, r1, lsl #1
 8011b66:	9310      	str	r3, [sp, #64]	; 0x40
    vdb_buf_tmp += ((pos_y - vdb->area.y1) * vdb_width) + pos_x - vdb->area.x1;
 8011b68:	f9ba 3012 	ldrsh.w	r3, [sl, #18]
 8011b6c:	ebab 0b03 	sub.w	fp, fp, r3
 8011b70:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8011b72:	b22d      	sxth	r5, r5
 8011b74:	fb03 880b 	mla	r8, r3, fp, r8
 8011b78:	eba8 0202 	sub.w	r2, r8, r2
    vdb_buf_tmp += (row_start * vdb_width) + col_start;
 8011b7c:	fb03 0805 	mla	r8, r3, r5, r0
    uint32_t bit_ofs = (row_start * width_bit) + (col_start * g.bpp);
 8011b80:	fb0e 4405 	mla	r4, lr, r5, r4
    vdb_buf_tmp += (row_start * vdb_width) + col_start;
 8011b84:	4442      	add	r2, r8
    map_p += bit_ofs >> 3;
 8011b86:	eb09 09d4 	add.w	r9, r9, r4, lsr #3
    vdb_buf_tmp += (row_start * vdb_width) + col_start;
 8011b8a:	eb0c 0b42 	add.w	fp, ip, r2, lsl #1
    col_bit = bit_ofs & 0x7; /* "& 0x7" equals to "% 8" just faster */
 8011b8e:	f004 0407 	and.w	r4, r4, #7
    for(row = row_start; row < row_end; row++) {
 8011b92:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8011b94:	f8cd b024 	str.w	fp, [sp, #36]	; 0x24
 8011b98:	429d      	cmp	r5, r3
 8011b9a:	db0a      	blt.n	8011bb2 <lv_draw_letter+0x216>
}
 8011b9c:	b01b      	add	sp, #108	; 0x6c
 8011b9e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            bitmask_init  = 0xFF;
 8011ba2:	23ff      	movs	r3, #255	; 0xff
 8011ba4:	9308      	str	r3, [sp, #32]
            bpp_opa_table = NULL;
 8011ba6:	2300      	movs	r3, #0
 8011ba8:	e743      	b.n	8011a32 <lv_draw_letter+0x96>
            bitmask_init  = 0xC0;
 8011baa:	23c0      	movs	r3, #192	; 0xc0
 8011bac:	9308      	str	r3, [sp, #32]
            bpp_opa_table = bpp2_opa_table;
 8011bae:	ab13      	add	r3, sp, #76	; 0x4c
 8011bb0:	e73f      	b.n	8011a32 <lv_draw_letter+0x96>
        bitmask = bitmask_init >> col_bit;
 8011bb2:	9b08      	ldr	r3, [sp, #32]
 8011bb4:	fa43 f804 	asr.w	r8, r3, r4
        for(col = col_start; col < col_end; col++) {
 8011bb8:	9b06      	ldr	r3, [sp, #24]
 8011bba:	930c      	str	r3, [sp, #48]	; 0x30
                } else if(vdb_buf_tmp->full != color.full) {
 8011bbc:	f8bd 3090 	ldrh.w	r3, [sp, #144]	; 0x90
 8011bc0:	9311      	str	r3, [sp, #68]	; 0x44
        bitmask = bitmask_init >> col_bit;
 8011bc2:	fa5f f888 	uxtb.w	r8, r8
        for(col = col_start; col < col_end; col++) {
 8011bc6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8011bc8:	42b3      	cmp	r3, r6
 8011bca:	f89d 3056 	ldrb.w	r3, [sp, #86]	; 0x56
 8011bce:	db11      	blt.n	8011bf4 <lv_draw_letter+0x258>
        col_bit += ((g.box_w - col_end) + col_start) * g.bpp;
 8011bd0:	f89d 2052 	ldrb.w	r2, [sp, #82]	; 0x52
 8011bd4:	9906      	ldr	r1, [sp, #24]
 8011bd6:	1b92      	subs	r2, r2, r6
 8011bd8:	440a      	add	r2, r1
 8011bda:	fb13 f302 	smulbb	r3, r3, r2
 8011bde:	441c      	add	r4, r3
 8011be0:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8011be2:	b2a4      	uxth	r4, r4
 8011be4:	3501      	adds	r5, #1
        map_p += (col_bit >> 3);
 8011be6:	eb09 09d4 	add.w	r9, r9, r4, lsr #3
 8011bea:	b22d      	sxth	r5, r5
        col_bit = col_bit & 0x7;
 8011bec:	f004 0407 	and.w	r4, r4, #7
 8011bf0:	449b      	add	fp, r3
 8011bf2:	e7ce      	b.n	8011b92 <lv_draw_letter+0x1f6>
            letter_px = (*map_p & bitmask) >> (8 - col_bit - g.bpp);
 8011bf4:	f899 2000 	ldrb.w	r2, [r9]
 8011bf8:	f1c4 0108 	rsb	r1, r4, #8
 8011bfc:	ea08 0202 	and.w	r2, r8, r2
 8011c00:	1ac9      	subs	r1, r1, r3
 8011c02:	410a      	asrs	r2, r1
            if(letter_px != 0) {
 8011c04:	f012 02ff 	ands.w	r2, r2, #255	; 0xff
 8011c08:	d023      	beq.n	8011c52 <lv_draw_letter+0x2b6>
                if(opa == LV_OPA_COVER) {
 8011c0a:	9905      	ldr	r1, [sp, #20]
 8011c0c:	29ff      	cmp	r1, #255	; 0xff
 8011c0e:	d13c      	bne.n	8011c8a <lv_draw_letter+0x2ee>
                    px_opa = g.bpp == 8 ? letter_px : bpp_opa_table[letter_px];
 8011c10:	2b08      	cmp	r3, #8
 8011c12:	d001      	beq.n	8011c18 <lv_draw_letter+0x27c>
 8011c14:	9b07      	ldr	r3, [sp, #28]
 8011c16:	5c9a      	ldrb	r2, [r3, r2]
                if(disp->driver.set_px_cb) {
 8011c18:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8011c1a:	695b      	ldr	r3, [r3, #20]
 8011c1c:	461f      	mov	r7, r3
 8011c1e:	2b00      	cmp	r3, #0
 8011c20:	d040      	beq.n	8011ca4 <lv_draw_letter+0x308>
                                           (col + pos_x) - vdb->area.x1, (row + pos_y) - vdb->area.y1, color, px_opa);
 8011c22:	f8ba 3010 	ldrh.w	r3, [sl, #16]
 8011c26:	990a      	ldr	r1, [sp, #40]	; 0x28
                    disp->driver.set_px_cb(&disp->driver, (uint8_t *)vdb->buf_act, vdb_width,
 8011c28:	9202      	str	r2, [sp, #8]
                                           (col + pos_x) - vdb->area.x1, (row + pos_y) - vdb->area.y1, color, px_opa);
 8011c2a:	1acb      	subs	r3, r1, r3
                    disp->driver.set_px_cb(&disp->driver, (uint8_t *)vdb->buf_act, vdb_width,
 8011c2c:	f8bd 2090 	ldrh.w	r2, [sp, #144]	; 0x90
                                           (col + pos_x) - vdb->area.x1, (row + pos_y) - vdb->area.y1, color, px_opa);
 8011c30:	990c      	ldr	r1, [sp, #48]	; 0x30
                    disp->driver.set_px_cb(&disp->driver, (uint8_t *)vdb->buf_act, vdb_width,
 8011c32:	f8ad 2004 	strh.w	r2, [sp, #4]
                                           (col + pos_x) - vdb->area.x1, (row + pos_y) - vdb->area.y1, color, px_opa);
 8011c36:	440b      	add	r3, r1
 8011c38:	f8ba 2012 	ldrh.w	r2, [sl, #18]
 8011c3c:	990b      	ldr	r1, [sp, #44]	; 0x2c
                    disp->driver.set_px_cb(&disp->driver, (uint8_t *)vdb->buf_act, vdb_width,
 8011c3e:	980f      	ldr	r0, [sp, #60]	; 0x3c
                                           (col + pos_x) - vdb->area.x1, (row + pos_y) - vdb->area.y1, color, px_opa);
 8011c40:	1a8a      	subs	r2, r1, r2
 8011c42:	442a      	add	r2, r5
                    disp->driver.set_px_cb(&disp->driver, (uint8_t *)vdb->buf_act, vdb_width,
 8011c44:	b212      	sxth	r2, r2
 8011c46:	9200      	str	r2, [sp, #0]
 8011c48:	b21b      	sxth	r3, r3
 8011c4a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8011c4c:	f8da 1008 	ldr.w	r1, [sl, #8]
 8011c50:	47b8      	blx	r7
            vdb_buf_tmp++;
 8011c52:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011c54:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 8011c56:	3302      	adds	r3, #2
 8011c58:	9309      	str	r3, [sp, #36]	; 0x24
            if(col_bit < 8 - g.bpp) {
 8011c5a:	f89d 3056 	ldrb.w	r3, [sp, #86]	; 0x56
 8011c5e:	f1c3 0208 	rsb	r2, r3, #8
 8011c62:	4294      	cmp	r4, r2
 8011c64:	f107 0701 	add.w	r7, r7, #1
                col_bit += g.bpp;
 8011c68:	bfbc      	itt	lt
 8011c6a:	18e4      	addlt	r4, r4, r3
                bitmask = bitmask >> g.bpp;
 8011c6c:	fa48 f803 	asrlt.w	r8, r8, r3
 8011c70:	b23b      	sxth	r3, r7
                col_bit += g.bpp;
 8011c72:	bfb9      	ittee	lt
 8011c74:	b2a4      	uxthlt	r4, r4
                bitmask = bitmask >> g.bpp;
 8011c76:	fa5f f888 	uxtblt.w	r8, r8
                map_p++;
 8011c7a:	f109 0901 	addge.w	r9, r9, #1
                bitmask = bitmask_init;
 8011c7e:	f8dd 8020 	ldrge.w	r8, [sp, #32]
 8011c82:	930c      	str	r3, [sp, #48]	; 0x30
                col_bit = 0;
 8011c84:	bfa8      	it	ge
 8011c86:	2400      	movge	r4, #0
 8011c88:	e79d      	b.n	8011bc6 <lv_draw_letter+0x22a>
                    px_opa = g.bpp == 8 ? (uint16_t)((uint16_t)letter_px * opa) >> 8
 8011c8a:	2b08      	cmp	r3, #8
                                        : (uint16_t)((uint16_t)bpp_opa_table[letter_px] * opa) >> 8;
 8011c8c:	bf1c      	itt	ne
 8011c8e:	9b07      	ldrne	r3, [sp, #28]
 8011c90:	5c9a      	ldrbne	r2, [r3, r2]
 8011c92:	f8bd 3014 	ldrh.w	r3, [sp, #20]
 8011c96:	fb12 f203 	smulbb	r2, r2, r3
                    px_opa = g.bpp == 8 ? (uint16_t)((uint16_t)letter_px * opa) >> 8
 8011c9a:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8011c9e:	e7bb      	b.n	8011c18 <lv_draw_letter+0x27c>
 8011ca0:	0801d8e0 	.word	0x0801d8e0
                } else if(vdb_buf_tmp->full != color.full) {
 8011ca4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011ca6:	8819      	ldrh	r1, [r3, #0]
 8011ca8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8011caa:	4299      	cmp	r1, r3
 8011cac:	d0d1      	beq.n	8011c52 <lv_draw_letter+0x2b6>
                    if(px_opa > LV_OPA_MAX)
 8011cae:	2afb      	cmp	r2, #251	; 0xfb
 8011cb0:	d904      	bls.n	8011cbc <lv_draw_letter+0x320>
                        *vdb_buf_tmp = color;
 8011cb2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011cb4:	f8bd 2090 	ldrh.w	r2, [sp, #144]	; 0x90
 8011cb8:	801a      	strh	r2, [r3, #0]
 8011cba:	e7ca      	b.n	8011c52 <lv_draw_letter+0x2b6>
                    else if(px_opa > LV_OPA_MIN) {
 8011cbc:	2a10      	cmp	r2, #16
 8011cbe:	d9c8      	bls.n	8011c52 <lv_draw_letter+0x2b6>
                            *vdb_buf_tmp = lv_color_mix(color, *vdb_buf_tmp, px_opa);
 8011cc0:	f8bd 0090 	ldrh.w	r0, [sp, #144]	; 0x90
 8011cc4:	f7ff fd40 	bl	8011748 <lv_color_mix>
 8011cc8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011cca:	8018      	strh	r0, [r3, #0]
 8011ccc:	e7c1      	b.n	8011c52 <lv_draw_letter+0x2b6>
 8011cce:	bf00      	nop

08011cd0 <lv_draw_map>:
{
 8011cd0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011cd4:	b093      	sub	sp, #76	; 0x4c
 8011cd6:	461d      	mov	r5, r3
 8011cd8:	f89d 3070 	ldrb.w	r3, [sp, #112]	; 0x70
 8011cdc:	930d      	str	r3, [sp, #52]	; 0x34
 8011cde:	f89d 3074 	ldrb.w	r3, [sp, #116]	; 0x74
 8011ce2:	930a      	str	r3, [sp, #40]	; 0x28
    if(opa < LV_OPA_MIN) return;
 8011ce4:	2d0f      	cmp	r5, #15
{
 8011ce6:	f89d 307c 	ldrb.w	r3, [sp, #124]	; 0x7c
 8011cea:	9308      	str	r3, [sp, #32]
 8011cec:	4607      	mov	r7, r0
 8011cee:	4614      	mov	r4, r2
    if(opa < LV_OPA_MIN) return;
 8011cf0:	d979      	bls.n	8011de6 <lv_draw_map+0x116>
    if(opa > LV_OPA_MAX) opa = LV_OPA_COVER;
 8011cf2:	2dfc      	cmp	r5, #252	; 0xfc
    union_ok = lv_area_intersect(&masked_a, cords_p, mask_p);
 8011cf4:	460a      	mov	r2, r1
 8011cf6:	4601      	mov	r1, r0
 8011cf8:	a810      	add	r0, sp, #64	; 0x40
    if(opa > LV_OPA_MAX) opa = LV_OPA_COVER;
 8011cfa:	bf28      	it	cs
 8011cfc:	25ff      	movcs	r5, #255	; 0xff
    union_ok = lv_area_intersect(&masked_a, cords_p, mask_p);
 8011cfe:	f003 faf4 	bl	80152ea <lv_area_intersect>
    if(union_ok == false) return;
 8011d02:	2800      	cmp	r0, #0
 8011d04:	d06f      	beq.n	8011de6 <lv_draw_map+0x116>
    uint8_t px_size_byte = alpha_byte ? LV_IMG_PX_SIZE_ALPHA_BYTE : sizeof(lv_color_t);
 8011d06:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011d08:	88be      	ldrh	r6, [r7, #4]
 8011d0a:	f9b7 2000 	ldrsh.w	r2, [r7]
    if(cords_p->y1 < masked_a.y1) {
 8011d0e:	f9b7 1002 	ldrsh.w	r1, [r7, #2]
    uint8_t px_size_byte = alpha_byte ? LV_IMG_PX_SIZE_ALPHA_BYTE : sizeof(lv_color_t);
 8011d12:	2b00      	cmp	r3, #0
 8011d14:	bf0c      	ite	eq
 8011d16:	2302      	moveq	r3, #2
 8011d18:	2303      	movne	r3, #3
 8011d1a:	9306      	str	r3, [sp, #24]
    if(cords_p->y1 < masked_a.y1) {
 8011d1c:	f9bd 3042 	ldrsh.w	r3, [sp, #66]	; 0x42
 8011d20:	3601      	adds	r6, #1
 8011d22:	4299      	cmp	r1, r3
 8011d24:	eba6 0602 	sub.w	r6, r6, r2
        map_p += (uint32_t)map_width * ((masked_a.y1 - cords_p->y1)) * px_size_byte;
 8011d28:	bfb8      	it	lt
 8011d2a:	1a5b      	sublt	r3, r3, r1
 8011d2c:	b236      	sxth	r6, r6
 8011d2e:	bfbe      	ittt	lt
 8011d30:	9906      	ldrlt	r1, [sp, #24]
 8011d32:	4373      	mullt	r3, r6
 8011d34:	fb01 4403 	mlalt	r4, r1, r3, r4
    if(cords_p->x1 < masked_a.x1) {
 8011d38:	f9bd 3040 	ldrsh.w	r3, [sp, #64]	; 0x40
 8011d3c:	4293      	cmp	r3, r2
        map_p += (masked_a.x1 - cords_p->x1) * px_size_byte;
 8011d3e:	bfc2      	ittt	gt
 8011d40:	1a9a      	subgt	r2, r3, r2
 8011d42:	9b06      	ldrgt	r3, [sp, #24]
 8011d44:	fb03 4402 	mlagt	r4, r3, r2, r4
    lv_disp_t * disp    = lv_refr_get_disp_refreshing();
 8011d48:	f7fe fdae 	bl	80108a8 <lv_refr_get_disp_refreshing>
 8011d4c:	4680      	mov	r8, r0
    lv_disp_buf_t * vdb = lv_disp_get_buf(disp);
 8011d4e:	f003 f921 	bl	8014f94 <lv_disp_get_buf>
    masked_a.x2 = masked_a.x2 - vdb->area.x1;
 8011d52:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
    masked_a.x1 = masked_a.x1 - vdb->area.x1;
 8011d56:	f8bd 2040 	ldrh.w	r2, [sp, #64]	; 0x40
    masked_a.y2 = masked_a.y2 - vdb->area.y1;
 8011d5a:	f8bd 7046 	ldrh.w	r7, [sp, #70]	; 0x46
    masked_a.y1 = masked_a.y1 - vdb->area.y1;
 8011d5e:	f8bd a042 	ldrh.w	sl, [sp, #66]	; 0x42
    lv_disp_buf_t * vdb = lv_disp_get_buf(disp);
 8011d62:	4681      	mov	r9, r0
    masked_a.x1 = masked_a.x1 - vdb->area.x1;
 8011d64:	8a00      	ldrh	r0, [r0, #16]
    masked_a.y1 = masked_a.y1 - vdb->area.y1;
 8011d66:	f8b9 e012 	ldrh.w	lr, [r9, #18]
    masked_a.x2 = masked_a.x2 - vdb->area.x1;
 8011d6a:	1a1b      	subs	r3, r3, r0
    masked_a.x1 = masked_a.x1 - vdb->area.x1;
 8011d6c:	1a12      	subs	r2, r2, r0
    masked_a.x2 = masked_a.x2 - vdb->area.x1;
 8011d6e:	b29b      	uxth	r3, r3
    masked_a.x1 = masked_a.x1 - vdb->area.x1;
 8011d70:	b292      	uxth	r2, r2
    masked_a.y2 = masked_a.y2 - vdb->area.y1;
 8011d72:	eba7 070e 	sub.w	r7, r7, lr
    masked_a.x2 = masked_a.x2 - vdb->area.x1;
 8011d76:	f8ad 3044 	strh.w	r3, [sp, #68]	; 0x44
 8011d7a:	3301      	adds	r3, #1
    masked_a.x1 = masked_a.x1 - vdb->area.x1;
 8011d7c:	b211      	sxth	r1, r2
    masked_a.y2 = masked_a.y2 - vdb->area.y1;
 8011d7e:	f8ad 7046 	strh.w	r7, [sp, #70]	; 0x46
 8011d82:	1a9a      	subs	r2, r3, r2
 8011d84:	f8b9 7014 	ldrh.w	r7, [r9, #20]
    masked_a.x1 = masked_a.x1 - vdb->area.x1;
 8011d88:	f8ad 1040 	strh.w	r1, [sp, #64]	; 0x40
 8011d8c:	b213      	sxth	r3, r2
 8011d8e:	3701      	adds	r7, #1
 8011d90:	9309      	str	r3, [sp, #36]	; 0x24
 8011d92:	f8bd 3018 	ldrh.w	r3, [sp, #24]
 8011d96:	1a38      	subs	r0, r7, r0
    masked_a.y1 = masked_a.y1 - vdb->area.y1;
 8011d98:	ebaa 0a0e 	sub.w	sl, sl, lr
 8011d9c:	fa0f fa8a 	sxth.w	sl, sl
 8011da0:	b200      	sxth	r0, r0
 8011da2:	fb13 f306 	smulbb	r3, r3, r6
    lv_color_t * vdb_buf_tmp = vdb->buf_act;
 8011da6:	f8d9 7008 	ldr.w	r7, [r9, #8]
 8011daa:	930b      	str	r3, [sp, #44]	; 0x2c
    vdb_buf_tmp += (uint32_t)masked_a.x1;             /*Move to the first col*/
 8011dac:	fb00 110a 	mla	r1, r0, sl, r1
    if(chroma_key == false && alpha_byte == false && opa == LV_OPA_COVER && recolor_opa == LV_OPA_TRANSP) {
 8011db0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    masked_a.y1 = masked_a.y1 - vdb->area.y1;
 8011db2:	f8ad a042 	strh.w	sl, [sp, #66]	; 0x42
    vdb_buf_tmp += (uint32_t)masked_a.x1;             /*Move to the first col*/
 8011db6:	eb07 0141 	add.w	r1, r7, r1, lsl #1
 8011dba:	9005      	str	r0, [sp, #20]
 8011dbc:	9104      	str	r1, [sp, #16]
    if(chroma_key == false && alpha_byte == false && opa == LV_OPA_COVER && recolor_opa == LV_OPA_TRANSP) {
 8011dbe:	2b00      	cmp	r3, #0
 8011dc0:	d149      	bne.n	8011e56 <lv_draw_map+0x186>
 8011dc2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011dc4:	2b00      	cmp	r3, #0
 8011dc6:	d146      	bne.n	8011e56 <lv_draw_map+0x186>
 8011dc8:	2dff      	cmp	r5, #255	; 0xff
 8011dca:	d144      	bne.n	8011e56 <lv_draw_map+0x186>
 8011dcc:	9b08      	ldr	r3, [sp, #32]
 8011dce:	2b00      	cmp	r3, #0
 8011dd0:	d141      	bne.n	8011e56 <lv_draw_map+0x186>
        if(disp->driver.set_px_cb) {
 8011dd2:	f8d8 3014 	ldr.w	r3, [r8, #20]
 8011dd6:	bb43      	cbnz	r3, 8011e2a <lv_draw_map+0x15a>
        memcpy(dest, src, length * sizeof(lv_color_t));
 8011dd8:	9b09      	ldr	r3, [sp, #36]	; 0x24
                vdb_buf_tmp += vdb_width;          /*Next row on the VDB*/
 8011dda:	0045      	lsls	r5, r0, #1
        memcpy(dest, src, length * sizeof(lv_color_t));
 8011ddc:	005e      	lsls	r6, r3, #1
            for(row = masked_a.y1; row <= masked_a.y2; row++) {
 8011dde:	f9bd 3046 	ldrsh.w	r3, [sp, #70]	; 0x46
 8011de2:	4553      	cmp	r3, sl
 8011de4:	da28      	bge.n	8011e38 <lv_draw_map+0x168>
}
 8011de6:	b013      	add	sp, #76	; 0x4c
 8011de8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
                    disp->driver.set_px_cb(&disp->driver, (uint8_t *)vdb->buf_act, vdb_width, col + masked_a.x1, row,
 8011dec:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
                    lv_color_t px_color = *((lv_color_t *)&map_p[(uint32_t)col * px_size_byte]);
 8011df0:	f8bb 2000 	ldrh.w	r2, [fp]
                    disp->driver.set_px_cb(&disp->driver, (uint8_t *)vdb->buf_act, vdb_width, col + masked_a.x1, row,
 8011df4:	f8ad 2004 	strh.w	r2, [sp, #4]
 8011df8:	9502      	str	r5, [sp, #8]
 8011dfa:	f8cd a000 	str.w	sl, [sp]
 8011dfe:	443b      	add	r3, r7
 8011e00:	b21b      	sxth	r3, r3
 8011e02:	f8d8 6014 	ldr.w	r6, [r8, #20]
 8011e06:	9a05      	ldr	r2, [sp, #20]
 8011e08:	f8d9 1008 	ldr.w	r1, [r9, #8]
 8011e0c:	4640      	mov	r0, r8
 8011e0e:	47b0      	blx	r6
 8011e10:	9b06      	ldr	r3, [sp, #24]
 8011e12:	3701      	adds	r7, #1
 8011e14:	449b      	add	fp, r3
                for(col = 0; col < map_useful_w; col++) {
 8011e16:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8011e18:	b23b      	sxth	r3, r7
 8011e1a:	429a      	cmp	r2, r3
 8011e1c:	dce6      	bgt.n	8011dec <lv_draw_map+0x11c>
                map_p += map_width * px_size_byte; /*Next row on the map*/
 8011e1e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8011e20:	f10a 0a01 	add.w	sl, sl, #1
 8011e24:	441c      	add	r4, r3
 8011e26:	fa0f fa8a 	sxth.w	sl, sl
            for(row = masked_a.y1; row <= masked_a.y2; row++) {
 8011e2a:	f9bd 3046 	ldrsh.w	r3, [sp, #70]	; 0x46
 8011e2e:	4553      	cmp	r3, sl
 8011e30:	dbd9      	blt.n	8011de6 <lv_draw_map+0x116>
 8011e32:	46a3      	mov	fp, r4
 8011e34:	2700      	movs	r7, #0
 8011e36:	e7ee      	b.n	8011e16 <lv_draw_map+0x146>
        memcpy(dest, src, length * sizeof(lv_color_t));
 8011e38:	4621      	mov	r1, r4
 8011e3a:	4632      	mov	r2, r6
 8011e3c:	9804      	ldr	r0, [sp, #16]
 8011e3e:	f008 ffbb 	bl	801adb8 <memcpy>
                map_p += map_width * px_size_byte; /*Next row on the map*/
 8011e42:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8011e44:	441c      	add	r4, r3
                vdb_buf_tmp += vdb_width;          /*Next row on the VDB*/
 8011e46:	9b04      	ldr	r3, [sp, #16]
 8011e48:	f10a 0a01 	add.w	sl, sl, #1
 8011e4c:	442b      	add	r3, r5
 8011e4e:	9304      	str	r3, [sp, #16]
 8011e50:	fa0f fa8a 	sxth.w	sl, sl
 8011e54:	e7c3      	b.n	8011dde <lv_draw_map+0x10e>
        lv_color_t last_img_px  = LV_COLOR_BLACK;
 8011e56:	f04f 0300 	mov.w	r3, #0
        lv_color_t recolored_px = lv_color_mix(recolor, last_img_px, recolor_opa);
 8011e5a:	4619      	mov	r1, r3
 8011e5c:	9a08      	ldr	r2, [sp, #32]
 8011e5e:	f8bd 0078 	ldrh.w	r0, [sp, #120]	; 0x78
        lv_color_t last_img_px  = LV_COLOR_BLACK;
 8011e62:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
        lv_color_t recolored_px = lv_color_mix(recolor, last_img_px, recolor_opa);
 8011e66:	f7ff fc6f 	bl	8011748 <lv_color_mix>
        for(row = masked_a.y1; row <= masked_a.y2; row++) {
 8011e6a:	f9bd 3042 	ldrsh.w	r3, [sp, #66]	; 0x42
 8011e6e:	9307      	str	r3, [sp, #28]
            vdb_buf_tmp += vdb_width;          /*Next row on the VDB*/
 8011e70:	9b05      	ldr	r3, [sp, #20]
        lv_color_t recolored_px = lv_color_mix(recolor, last_img_px, recolor_opa);
 8011e72:	f8ad 0030 	strh.w	r0, [sp, #48]	; 0x30
            vdb_buf_tmp += vdb_width;          /*Next row on the VDB*/
 8011e76:	005b      	lsls	r3, r3, #1
 8011e78:	930e      	str	r3, [sp, #56]	; 0x38
        for(row = masked_a.y1; row <= masked_a.y2; row++) {
 8011e7a:	f9bd 3046 	ldrsh.w	r3, [sp, #70]	; 0x46
 8011e7e:	9a07      	ldr	r2, [sp, #28]
 8011e80:	4293      	cmp	r3, r2
 8011e82:	dbb0      	blt.n	8011de6 <lv_draw_map+0x116>
 8011e84:	9e04      	ldr	r6, [sp, #16]
 8011e86:	46a2      	mov	sl, r4
 8011e88:	f04f 0b00 	mov.w	fp, #0
 8011e8c:	e04f      	b.n	8011f2e <lv_draw_map+0x25e>
                if(alpha_byte) {
 8011e8e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011e90:	2b00      	cmp	r3, #0
 8011e92:	d03e      	beq.n	8011f12 <lv_draw_map+0x242>
                    px_color.full = px_color_p[0] + (px_color_p[1] << 8);
 8011e94:	f89a 3001 	ldrb.w	r3, [sl, #1]
 8011e98:	f89a 0000 	ldrb.w	r0, [sl]
 8011e9c:	eb00 2003 	add.w	r0, r0, r3, lsl #8
                    lv_opa_t px_opa = *(px_color_p + LV_IMG_PX_SIZE_ALPHA_BYTE - 1);
 8011ea0:	f89a 3002 	ldrb.w	r3, [sl, #2]
                    px_color.full = px_color_p[0] + (px_color_p[1] << 8);
 8011ea4:	b280      	uxth	r0, r0
                    if(px_opa == LV_OPA_TRANSP)
 8011ea6:	2b00      	cmp	r3, #0
 8011ea8:	d03c      	beq.n	8011f24 <lv_draw_map+0x254>
                    else if(px_opa != LV_OPA_COVER)
 8011eaa:	2bff      	cmp	r3, #255	; 0xff
 8011eac:	d033      	beq.n	8011f16 <lv_draw_map+0x246>
                        opa_result = (uint32_t)((uint32_t)px_opa * opa_result) >> 8;
 8011eae:	fb13 f305 	smulbb	r3, r3, r5
 8011eb2:	f3c3 2307 	ubfx	r3, r3, #8, #8
                if(chroma_key && px_color.full == disp->driver.color_chroma_key.full) continue;
 8011eb6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8011eb8:	b11a      	cbz	r2, 8011ec2 <lv_draw_map+0x1f2>
 8011eba:	f8b8 201c 	ldrh.w	r2, [r8, #28]
 8011ebe:	4282      	cmp	r2, r0
 8011ec0:	d030      	beq.n	8011f24 <lv_draw_map+0x254>
                if(recolor_opa != LV_OPA_TRANSP) {
 8011ec2:	9a08      	ldr	r2, [sp, #32]
 8011ec4:	2a00      	cmp	r2, #0
 8011ec6:	d049      	beq.n	8011f5c <lv_draw_map+0x28c>
                    if(last_img_px.full != px_color.full) { /*Minor acceleration: calculate only for
 8011ec8:	f8bd 2032 	ldrh.w	r2, [sp, #50]	; 0x32
 8011ecc:	4282      	cmp	r2, r0
 8011ece:	d00b      	beq.n	8011ee8 <lv_draw_map+0x218>
                        last_img_px  = px_color;
 8011ed0:	f8ad 0032 	strh.w	r0, [sp, #50]	; 0x32
                        recolored_px = lv_color_mix(recolor, last_img_px, recolor_opa);
 8011ed4:	4601      	mov	r1, r0
 8011ed6:	9a08      	ldr	r2, [sp, #32]
 8011ed8:	f8bd 0078 	ldrh.w	r0, [sp, #120]	; 0x78
 8011edc:	930f      	str	r3, [sp, #60]	; 0x3c
 8011ede:	f7ff fc33 	bl	8011748 <lv_color_mix>
 8011ee2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8011ee4:	f8ad 0030 	strh.w	r0, [sp, #48]	; 0x30
                    if(disp->driver.set_px_cb) {
 8011ee8:	f8d8 2014 	ldr.w	r2, [r8, #20]
 8011eec:	4617      	mov	r7, r2
 8011eee:	b1a2      	cbz	r2, 8011f1a <lv_draw_map+0x24a>
                        disp->driver.set_px_cb(&disp->driver, (uint8_t *)vdb->buf_act, vdb_width, col + masked_a.x1,
 8011ef0:	9302      	str	r3, [sp, #8]
 8011ef2:	f8bd 2040 	ldrh.w	r2, [sp, #64]	; 0x40
 8011ef6:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
 8011efa:	f8ad 3004 	strh.w	r3, [sp, #4]
 8011efe:	9b07      	ldr	r3, [sp, #28]
 8011f00:	9300      	str	r3, [sp, #0]
 8011f02:	445a      	add	r2, fp
 8011f04:	b213      	sxth	r3, r2
 8011f06:	f8d9 1008 	ldr.w	r1, [r9, #8]
 8011f0a:	9a05      	ldr	r2, [sp, #20]
                        disp->driver.set_px_cb(&disp->driver, (uint8_t *)vdb->buf_act, vdb_width, col + masked_a.x1,
 8011f0c:	4640      	mov	r0, r8
 8011f0e:	47b8      	blx	r7
 8011f10:	e008      	b.n	8011f24 <lv_draw_map+0x254>
                    px_color = *((lv_color_t *)px_color_p);
 8011f12:	f8ba 0000 	ldrh.w	r0, [sl]
 8011f16:	462b      	mov	r3, r5
 8011f18:	e7cd      	b.n	8011eb6 <lv_draw_map+0x1e6>
                        if(opa_result == LV_OPA_COVER)
 8011f1a:	2bff      	cmp	r3, #255	; 0xff
 8011f1c:	d117      	bne.n	8011f4e <lv_draw_map+0x27e>
                            vdb_buf_tmp[col].full = recolored_px.full;
 8011f1e:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
 8011f22:	8033      	strh	r3, [r6, #0]
 8011f24:	9b06      	ldr	r3, [sp, #24]
 8011f26:	f10b 0b01 	add.w	fp, fp, #1
 8011f2a:	3602      	adds	r6, #2
 8011f2c:	449a      	add	sl, r3
            for(col = 0; col < map_useful_w; col++) {
 8011f2e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8011f30:	fa0f f38b 	sxth.w	r3, fp
 8011f34:	4293      	cmp	r3, r2
 8011f36:	dbaa      	blt.n	8011e8e <lv_draw_map+0x1be>
            map_p += map_width * px_size_byte; /*Next row on the map*/
 8011f38:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
            vdb_buf_tmp += vdb_width;          /*Next row on the VDB*/
 8011f3a:	9a04      	ldr	r2, [sp, #16]
            map_p += map_width * px_size_byte; /*Next row on the map*/
 8011f3c:	441c      	add	r4, r3
            vdb_buf_tmp += vdb_width;          /*Next row on the VDB*/
 8011f3e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8011f40:	441a      	add	r2, r3
 8011f42:	9b07      	ldr	r3, [sp, #28]
 8011f44:	9204      	str	r2, [sp, #16]
 8011f46:	3301      	adds	r3, #1
 8011f48:	b21b      	sxth	r3, r3
 8011f4a:	9307      	str	r3, [sp, #28]
 8011f4c:	e795      	b.n	8011e7a <lv_draw_map+0x1aa>
                            vdb_buf_tmp[col] = lv_color_mix(recolored_px, vdb_buf_tmp[col], opa_result);
 8011f4e:	8831      	ldrh	r1, [r6, #0]
 8011f50:	f8bd 0030 	ldrh.w	r0, [sp, #48]	; 0x30
 8011f54:	461a      	mov	r2, r3
                                vdb_buf_tmp[col] = lv_color_mix(px_color, vdb_buf_tmp[col], opa_result);
 8011f56:	f7ff fbf7 	bl	8011748 <lv_color_mix>
 8011f5a:	e012      	b.n	8011f82 <lv_draw_map+0x2b2>
                    if(disp->driver.set_px_cb) {
 8011f5c:	f8d8 2014 	ldr.w	r2, [r8, #20]
 8011f60:	4617      	mov	r7, r2
 8011f62:	b162      	cbz	r2, 8011f7e <lv_draw_map+0x2ae>
                        disp->driver.set_px_cb(&disp->driver, (uint8_t *)vdb->buf_act, vdb_width, col + masked_a.x1,
 8011f64:	f8bd 2040 	ldrh.w	r2, [sp, #64]	; 0x40
 8011f68:	f8d9 1008 	ldr.w	r1, [r9, #8]
 8011f6c:	9302      	str	r3, [sp, #8]
 8011f6e:	445a      	add	r2, fp
 8011f70:	9b07      	ldr	r3, [sp, #28]
 8011f72:	9300      	str	r3, [sp, #0]
 8011f74:	f8ad 0004 	strh.w	r0, [sp, #4]
 8011f78:	b213      	sxth	r3, r2
 8011f7a:	9a05      	ldr	r2, [sp, #20]
 8011f7c:	e7c6      	b.n	8011f0c <lv_draw_map+0x23c>
                        if(opa_result == LV_OPA_COVER)
 8011f7e:	2bff      	cmp	r3, #255	; 0xff
 8011f80:	d101      	bne.n	8011f86 <lv_draw_map+0x2b6>
                                vdb_buf_tmp[col] = lv_color_mix(px_color, vdb_buf_tmp[col], opa_result);
 8011f82:	8030      	strh	r0, [r6, #0]
 8011f84:	e7ce      	b.n	8011f24 <lv_draw_map+0x254>
 8011f86:	461a      	mov	r2, r3
 8011f88:	8831      	ldrh	r1, [r6, #0]
 8011f8a:	e7e4      	b.n	8011f56 <lv_draw_map+0x286>

08011f8c <lv_img_color_format_get_px_size>:
 * Get the pixel size of a color format in bits
 * @param cf a color format (`LV_IMG_CF_...`)
 * @return the pixel size in bits
 */
uint8_t lv_img_color_format_get_px_size(lv_img_cf_t cf)
{
 8011f8c:	3804      	subs	r0, #4
 8011f8e:	b2c0      	uxtb	r0, r0
 8011f90:	280a      	cmp	r0, #10
 8011f92:	bf9a      	itte	ls
 8011f94:	4b01      	ldrls	r3, [pc, #4]	; (8011f9c <lv_img_color_format_get_px_size+0x10>)
 8011f96:	5c18      	ldrbls	r0, [r3, r0]
 8011f98:	2000      	movhi	r0, #0
        case LV_IMG_CF_ALPHA_8BIT: px_size = 8; break;
        default: px_size = 0; break;
    }

    return px_size;
}
 8011f9a:	4770      	bx	lr
 8011f9c:	080f4f30 	.word	0x080f4f30

08011fa0 <lv_img_color_format_is_chroma_keyed>:
 * Check if a color format is chroma keyed or not
 * @param cf a color format (`LV_IMG_CF_...`)
 * @return true: chroma keyed; false: not chroma keyed
 */
bool lv_img_color_format_is_chroma_keyed(lv_img_cf_t cf)
{
 8011fa0:	280a      	cmp	r0, #10
 8011fa2:	d808      	bhi.n	8011fb6 <lv_img_color_format_is_chroma_keyed+0x16>
 8011fa4:	2301      	movs	r3, #1
 8011fa6:	fa03 f000 	lsl.w	r0, r3, r0
 8011faa:	f410 6ff9 	tst.w	r0, #1992	; 0x7c8
 8011fae:	bf14      	ite	ne
 8011fb0:	4618      	movne	r0, r3
 8011fb2:	2000      	moveq	r0, #0
 8011fb4:	4770      	bx	lr
        case LV_IMG_CF_RAW_CHROMA_KEYED:
        case LV_IMG_CF_INDEXED_1BIT:
        case LV_IMG_CF_INDEXED_2BIT:
        case LV_IMG_CF_INDEXED_4BIT:
        case LV_IMG_CF_INDEXED_8BIT: is_chroma_keyed = true; break;
        default: is_chroma_keyed = false; break;
 8011fb6:	2000      	movs	r0, #0
    }

    return is_chroma_keyed;
}
 8011fb8:	4770      	bx	lr

08011fba <lv_img_color_format_has_alpha>:
 * Check if a color format has alpha channel or not
 * @param cf a color format (`LV_IMG_CF_...`)
 * @return true: has alpha channel; false: doesn't have alpha channel
 */
bool lv_img_color_format_has_alpha(lv_img_cf_t cf)
{
 8011fba:	3802      	subs	r0, #2
 8011fbc:	b2c0      	uxtb	r0, r0
 8011fbe:	280c      	cmp	r0, #12
 8011fc0:	d809      	bhi.n	8011fd6 <lv_img_color_format_has_alpha+0x1c>
 8011fc2:	2301      	movs	r3, #1
 8011fc4:	fa03 f000 	lsl.w	r0, r3, r0
 8011fc8:	f641 6309 	movw	r3, #7689	; 0x1e09
 8011fcc:	4218      	tst	r0, r3
 8011fce:	bf14      	ite	ne
 8011fd0:	2001      	movne	r0, #1
 8011fd2:	2000      	moveq	r0, #0
 8011fd4:	4770      	bx	lr
        case LV_IMG_CF_RAW_ALPHA:
        case LV_IMG_CF_ALPHA_1BIT:
        case LV_IMG_CF_ALPHA_2BIT:
        case LV_IMG_CF_ALPHA_4BIT:
        case LV_IMG_CF_ALPHA_8BIT: has_alpha = true; break;
        default: has_alpha = false; break;
 8011fd6:	2000      	movs	r0, #0
    }

    return has_alpha;
}
 8011fd8:	4770      	bx	lr
	...

08011fdc <lv_draw_img>:
{
 8011fdc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011fe0:	b093      	sub	sp, #76	; 0x4c
 8011fe2:	4604      	mov	r4, r0
 8011fe4:	460f      	mov	r7, r1
 8011fe6:	469a      	mov	sl, r3
 8011fe8:	f89d 9070 	ldrb.w	r9, [sp, #112]	; 0x70
    if(src == NULL) {
 8011fec:	4615      	mov	r5, r2
 8011fee:	b962      	cbnz	r2, 801200a <lv_draw_img+0x2e>
        lv_draw_rect(coords, mask, &lv_style_plain, LV_OPA_COVER);
 8011ff0:	23ff      	movs	r3, #255	; 0xff
 8011ff2:	4a65      	ldr	r2, [pc, #404]	; (8012188 <lv_draw_img+0x1ac>)
 8011ff4:	f000 fb88 	bl	8012708 <lv_draw_rect>
        lv_draw_label(coords, mask, &lv_style_plain, LV_OPA_COVER, "No\ndata", LV_TXT_FLAG_NONE, NULL, -1, -1, NULL);
 8011ff8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8011ffc:	9505      	str	r5, [sp, #20]
 8011ffe:	9304      	str	r3, [sp, #16]
 8012000:	9303      	str	r3, [sp, #12]
 8012002:	9502      	str	r5, [sp, #8]
 8012004:	9501      	str	r5, [sp, #4]
        lv_draw_label(coords, mask, &lv_style_plain, LV_OPA_COVER, "No\ndata", LV_TXT_FLAG_NONE, NULL, -1, -1, NULL);
 8012006:	4b61      	ldr	r3, [pc, #388]	; (801218c <lv_draw_img+0x1b0>)
 8012008:	e036      	b.n	8012078 <lv_draw_img+0x9c>
                                 const lv_style_t * style, lv_opa_t opa_scale)
{

    lv_area_t mask_com; /*Common area of mask and coords*/
    bool union_ok;
    union_ok = lv_area_intersect(&mask_com, mask, coords);
 801200a:	f10d 0838 	add.w	r8, sp, #56	; 0x38
 801200e:	4602      	mov	r2, r0
 8012010:	4640      	mov	r0, r8
 8012012:	f003 f96a 	bl	80152ea <lv_area_intersect>
    if(union_ok == false) {
 8012016:	2800      	cmp	r0, #0
 8012018:	d049      	beq.n	80120ae <lv_draw_img+0xd2>
 801201a:	f89a 6033 	ldrb.w	r6, [sl, #51]	; 0x33
        return LV_RES_OK; /*Out of mask. There is nothing to draw so the image is drawn
                             successfully.*/
    }

    lv_opa_t opa =
 801201e:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 8012022:	bf18      	it	ne
 8012024:	fb06 f609 	mulne.w	r6, r6, r9
        opa_scale == LV_OPA_COVER ? style->image.opa : (uint16_t)((uint16_t)style->image.opa * opa_scale) >> 8;

    lv_img_cache_entry_t * cdsc = lv_img_cache_open(src, style);
 8012028:	4651      	mov	r1, sl
 801202a:	4628      	mov	r0, r5
    lv_opa_t opa =
 801202c:	bf18      	it	ne
 801202e:	f3c6 2607 	ubfxne	r6, r6, #8, #8
    lv_img_cache_entry_t * cdsc = lv_img_cache_open(src, style);
 8012032:	f002 fa71 	bl	8014518 <lv_img_cache_open>

    if(cdsc == NULL) return LV_RES_INV;
 8012036:	4681      	mov	r9, r0
 8012038:	2800      	cmp	r0, #0
 801203a:	d07a      	beq.n	8012132 <lv_draw_img+0x156>

    bool chroma_keyed = lv_img_color_format_is_chroma_keyed(cdsc->dec_dsc.header.cf);
 801203c:	7c02      	ldrb	r2, [r0, #16]
 801203e:	f002 021f 	and.w	r2, r2, #31
 8012042:	4610      	mov	r0, r2
 8012044:	f7ff ffac 	bl	8011fa0 <lv_img_color_format_is_chroma_keyed>
 8012048:	9007      	str	r0, [sp, #28]
    bool alpha_byte   = lv_img_color_format_has_alpha(cdsc->dec_dsc.header.cf);
 801204a:	4610      	mov	r0, r2
 801204c:	f7ff ffb5 	bl	8011fba <lv_img_color_format_has_alpha>

    if(cdsc->dec_dsc.error_msg != NULL) {
 8012050:	f8d9 301c 	ldr.w	r3, [r9, #28]
    bool alpha_byte   = lv_img_color_format_has_alpha(cdsc->dec_dsc.header.cf);
 8012054:	9008      	str	r0, [sp, #32]
    if(cdsc->dec_dsc.error_msg != NULL) {
 8012056:	b1bb      	cbz	r3, 8012088 <lv_draw_img+0xac>
        LV_LOG_WARN("Image draw error");
        lv_draw_rect(coords, mask, &lv_style_plain, LV_OPA_COVER);
 8012058:	23ff      	movs	r3, #255	; 0xff
 801205a:	4a4b      	ldr	r2, [pc, #300]	; (8012188 <lv_draw_img+0x1ac>)
 801205c:	4639      	mov	r1, r7
 801205e:	4620      	mov	r0, r4
 8012060:	f000 fb52 	bl	8012708 <lv_draw_rect>
        lv_draw_label(coords, mask, &lv_style_plain, LV_OPA_COVER, cdsc->dec_dsc.error_msg, LV_TXT_FLAG_NONE, NULL, -1,
 8012064:	2300      	movs	r3, #0
 8012066:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801206a:	9305      	str	r3, [sp, #20]
 801206c:	9204      	str	r2, [sp, #16]
 801206e:	9203      	str	r2, [sp, #12]
 8012070:	9302      	str	r3, [sp, #8]
 8012072:	9301      	str	r3, [sp, #4]
 8012074:	f8d9 301c 	ldr.w	r3, [r9, #28]
        lv_draw_label(coords, mask, &lv_style_plain, LV_OPA_COVER, "No\ndata", LV_TXT_FLAG_NONE, NULL, -1, -1, NULL);
 8012078:	9300      	str	r3, [sp, #0]
 801207a:	4a43      	ldr	r2, [pc, #268]	; (8012188 <lv_draw_img+0x1ac>)
 801207c:	23ff      	movs	r3, #255	; 0xff
 801207e:	4639      	mov	r1, r7
 8012080:	4620      	mov	r0, r4
 8012082:	f000 f8ab 	bl	80121dc <lv_draw_label>
        return;
 8012086:	e012      	b.n	80120ae <lv_draw_img+0xd2>
                      -1, NULL);
    }
    /* The decoder open could open the image and gave the entire uncompressed image.
     * Just draw it!*/
    else if(cdsc->dec_dsc.img_data) {
 8012088:	f8d9 2014 	ldr.w	r2, [r9, #20]
 801208c:	b192      	cbz	r2, 80120b4 <lv_draw_img+0xd8>
        lv_draw_map(coords, mask, cdsc->dec_dsc.img_data, opa, chroma_keyed, alpha_byte, style->image.color,
 801208e:	f89a 3032 	ldrb.w	r3, [sl, #50]	; 0x32
 8012092:	9303      	str	r3, [sp, #12]
 8012094:	f8ba 3030 	ldrh.w	r3, [sl, #48]	; 0x30
 8012098:	f8ad 3008 	strh.w	r3, [sp, #8]
 801209c:	9b08      	ldr	r3, [sp, #32]
 801209e:	9301      	str	r3, [sp, #4]
 80120a0:	9b07      	ldr	r3, [sp, #28]
 80120a2:	9300      	str	r3, [sp, #0]
 80120a4:	4639      	mov	r1, r7
 80120a6:	4633      	mov	r3, r6
 80120a8:	4620      	mov	r0, r4
 80120aa:	f7ff fe11 	bl	8011cd0 <lv_draw_map>
}
 80120ae:	b013      	add	sp, #76	; 0x4c
 80120b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 * @param area_p pointer to an area
 * @return the width of the area (if x1 == x2 -> width = 1)
 */
static inline lv_coord_t lv_area_get_width(const lv_area_t * area_p)
{
    return area_p->x2 - area_p->x1 + 1;
 80120b4:	f8bd 503c 	ldrh.w	r5, [sp, #60]	; 0x3c
 80120b8:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
 80120bc:	920d      	str	r2, [sp, #52]	; 0x34
 80120be:	3501      	adds	r5, #1
 80120c0:	1aed      	subs	r5, r5, r3
 80120c2:	b22d      	sxth	r5, r5
    }
    /* The whole uncompressed image is not available. Try to read it line-by-line*/
    else {
        lv_coord_t width = lv_area_get_width(&mask_com);

        uint8_t  * buf = lv_draw_get_buf(lv_area_get_width(&mask_com) * ((LV_COLOR_DEPTH >> 3) + 1));  /*+1 because of the possible alpha byte*/
 80120c4:	eb05 0045 	add.w	r0, r5, r5, lsl #1
 80120c8:	f7ff fafa 	bl	80116c0 <lv_draw_get_buf>
 80120cc:	9009      	str	r0, [sp, #36]	; 0x24
    memcpy(dest, src, sizeof(lv_area_t));
 80120ce:	e898 0003 	ldmia.w	r8, {r0, r1}
 80120d2:	ab10      	add	r3, sp, #64	; 0x40
 80120d4:	e883 0003 	stmia.w	r3, {r0, r1}

        lv_area_t line;
        lv_area_copy(&line, &mask_com);
        lv_area_set_height(&line, 1);
 80120d8:	4618      	mov	r0, r3
 80120da:	2101      	movs	r1, #1
 80120dc:	930c      	str	r3, [sp, #48]	; 0x30
 80120de:	f003 f8e3 	bl	80152a8 <lv_area_set_height>
        lv_coord_t x = mask_com.x1 - coords->x1;
 80120e2:	f8bd 1038 	ldrh.w	r1, [sp, #56]	; 0x38
 80120e6:	8820      	ldrh	r0, [r4, #0]
        lv_coord_t y = mask_com.y1 - coords->y1;
 80120e8:	f8bd b03a 	ldrh.w	fp, [sp, #58]	; 0x3a
 80120ec:	9a0d      	ldr	r2, [sp, #52]	; 0x34
        lv_coord_t x = mask_com.x1 - coords->x1;
 80120ee:	1a09      	subs	r1, r1, r0
 80120f0:	b20b      	sxth	r3, r1
        lv_coord_t y = mask_com.y1 - coords->y1;
 80120f2:	8861      	ldrh	r1, [r4, #2]
        lv_coord_t x = mask_com.x1 - coords->x1;
 80120f4:	930a      	str	r3, [sp, #40]	; 0x28
        lv_coord_t y = mask_com.y1 - coords->y1;
 80120f6:	ebab 0101 	sub.w	r1, fp, r1
 80120fa:	b28b      	uxth	r3, r1
 80120fc:	930b      	str	r3, [sp, #44]	; 0x2c
 80120fe:	4690      	mov	r8, r2
 8012100:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
        lv_coord_t row;
        lv_res_t read_res;
        for(row = mask_com.y1; row <= mask_com.y2; row++) {
 8012102:	f9bd 103e 	ldrsh.w	r1, [sp, #62]	; 0x3e
 8012106:	fa1f f388 	uxth.w	r3, r8
 801210a:	441a      	add	r2, r3
 801210c:	445b      	add	r3, fp
 801210e:	b21b      	sxth	r3, r3
 8012110:	4299      	cmp	r1, r3
 8012112:	b212      	sxth	r2, r2
 8012114:	dbcb      	blt.n	80120ae <lv_draw_img+0xd2>
            read_res = lv_img_decoder_read_line(&cdsc->dec_dsc, x, y, width, buf);
 8012116:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012118:	9300      	str	r3, [sp, #0]
 801211a:	990a      	ldr	r1, [sp, #40]	; 0x28
 801211c:	462b      	mov	r3, r5
 801211e:	4648      	mov	r0, r9
 8012120:	f002 fd04 	bl	8014b2c <lv_img_decoder_read_line>
            if(read_res != LV_RES_OK) {
 8012124:	2801      	cmp	r0, #1
 8012126:	f108 0801 	add.w	r8, r8, #1
 801212a:	d011      	beq.n	8012150 <lv_draw_img+0x174>
                lv_img_decoder_close(&cdsc->dec_dsc);
 801212c:	4648      	mov	r0, r9
 801212e:	f002 fd0d 	bl	8014b4c <lv_img_decoder_close>
        lv_draw_rect(coords, mask, &lv_style_plain, LV_OPA_COVER);
 8012132:	23ff      	movs	r3, #255	; 0xff
 8012134:	4a14      	ldr	r2, [pc, #80]	; (8012188 <lv_draw_img+0x1ac>)
 8012136:	4639      	mov	r1, r7
 8012138:	4620      	mov	r0, r4
 801213a:	f000 fae5 	bl	8012708 <lv_draw_rect>
        lv_draw_label(coords, mask, &lv_style_plain, LV_OPA_COVER, "No\ndata", LV_TXT_FLAG_NONE, NULL, -1, -1, NULL);
 801213e:	2300      	movs	r3, #0
 8012140:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8012144:	9305      	str	r3, [sp, #20]
 8012146:	9204      	str	r2, [sp, #16]
 8012148:	9203      	str	r2, [sp, #12]
 801214a:	9302      	str	r3, [sp, #8]
 801214c:	9301      	str	r3, [sp, #4]
 801214e:	e75a      	b.n	8012006 <lv_draw_img+0x2a>
                LV_LOG_WARN("Image draw can't read the line");
                return LV_RES_INV;
            }
            lv_draw_map(&line, mask, buf, opa, chroma_keyed, alpha_byte, style->image.color, style->image.intense);
 8012150:	f89a 3032 	ldrb.w	r3, [sl, #50]	; 0x32
 8012154:	9303      	str	r3, [sp, #12]
 8012156:	f8ba 3030 	ldrh.w	r3, [sl, #48]	; 0x30
 801215a:	f8ad 3008 	strh.w	r3, [sp, #8]
 801215e:	9b08      	ldr	r3, [sp, #32]
 8012160:	9301      	str	r3, [sp, #4]
 8012162:	9b07      	ldr	r3, [sp, #28]
 8012164:	9300      	str	r3, [sp, #0]
 8012166:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8012168:	980c      	ldr	r0, [sp, #48]	; 0x30
 801216a:	4633      	mov	r3, r6
 801216c:	4639      	mov	r1, r7
 801216e:	f7ff fdaf 	bl	8011cd0 <lv_draw_map>
            line.y1++;
 8012172:	f8bd 3042 	ldrh.w	r3, [sp, #66]	; 0x42
 8012176:	3301      	adds	r3, #1
 8012178:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
            line.y2++;
 801217c:	f8bd 3046 	ldrh.w	r3, [sp, #70]	; 0x46
 8012180:	3301      	adds	r3, #1
 8012182:	f8ad 3046 	strh.w	r3, [sp, #70]	; 0x46
 8012186:	e7bb      	b.n	8012100 <lv_draw_img+0x124>
 8012188:	2000c6a8 	.word	0x2000c6a8
 801218c:	080f4f3b 	.word	0x080f4f3b

08012190 <lv_img_src_get_type>:
    if(src == NULL) return img_src_type;
 8012190:	b150      	cbz	r0, 80121a8 <lv_img_src_get_type+0x18>
    if(u8_p[0] >= 0x20 && u8_p[0] <= 0x7F) {
 8012192:	7803      	ldrb	r3, [r0, #0]
 8012194:	f1a3 0220 	sub.w	r2, r3, #32
 8012198:	2a5f      	cmp	r2, #95	; 0x5f
 801219a:	d907      	bls.n	80121ac <lv_img_src_get_type+0x1c>
    } else if(u8_p[0] >= 0x80) {
 801219c:	f013 0f80 	tst.w	r3, #128	; 0x80
        img_src_type = LV_IMG_SRC_VARIABLE; /*`lv_img_dsc_t` is design to the first byte < 0x20*/
 80121a0:	bf14      	ite	ne
 80121a2:	2002      	movne	r0, #2
 80121a4:	2000      	moveq	r0, #0
 80121a6:	4770      	bx	lr
    if(src == NULL) return img_src_type;
 80121a8:	2003      	movs	r0, #3
 80121aa:	4770      	bx	lr
        img_src_type = LV_IMG_SRC_FILE; /*If it's an ASCII character then it's file name*/
 80121ac:	2001      	movs	r0, #1
}
 80121ae:	4770      	bx	lr

080121b0 <hex_char_to_num>:
 */
static uint8_t hex_char_to_num(char hex)
{
    uint8_t result = 0;

    if(hex >= '0' && hex <= '9') {
 80121b0:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 80121b4:	b2db      	uxtb	r3, r3
 80121b6:	2b09      	cmp	r3, #9
 80121b8:	d90a      	bls.n	80121d0 <hex_char_to_num+0x20>
        result = hex - '0';
    } else {
        if(hex >= 'a') hex -= 'a' - 'A'; /*Convert to upper case*/
 80121ba:	2860      	cmp	r0, #96	; 0x60
 80121bc:	bf84      	itt	hi
 80121be:	3820      	subhi	r0, #32
 80121c0:	b2c0      	uxtbhi	r0, r0
 80121c2:	3841      	subs	r0, #65	; 0x41
 80121c4:	b2c0      	uxtb	r0, r0
 80121c6:	2805      	cmp	r0, #5
 80121c8:	d804      	bhi.n	80121d4 <hex_char_to_num+0x24>
 80121ca:	4b03      	ldr	r3, [pc, #12]	; (80121d8 <hex_char_to_num+0x28>)
 80121cc:	5c18      	ldrb	r0, [r3, r0]
 80121ce:	4770      	bx	lr
 80121d0:	4618      	mov	r0, r3
 80121d2:	4770      	bx	lr
 80121d4:	2000      	movs	r0, #0
            default: result = 0; break;
        }
    }

    return result;
}
 80121d6:	4770      	bx	lr
 80121d8:	080f4f43 	.word	0x080f4f43

080121dc <lv_draw_label>:
{
 80121dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80121e0:	b0a7      	sub	sp, #156	; 0x9c
 80121e2:	4605      	mov	r5, r0
 80121e4:	f89d b0c4 	ldrb.w	fp, [sp, #196]	; 0xc4
 80121e8:	9309      	str	r3, [sp, #36]	; 0x24
 80121ea:	f8bd 30cc 	ldrh.w	r3, [sp, #204]	; 0xcc
 80121ee:	930d      	str	r3, [sp, #52]	; 0x34
    if((flag & LV_TXT_FLAG_EXPAND) == 0) {
 80121f0:	f01b 0f02 	tst.w	fp, #2
{
 80121f4:	f8bd 30d0 	ldrh.w	r3, [sp, #208]	; 0xd0
 80121f8:	9107      	str	r1, [sp, #28]
 80121fa:	4614      	mov	r4, r2
 80121fc:	930e      	str	r3, [sp, #56]	; 0x38
 80121fe:	f8dd 80d4 	ldr.w	r8, [sp, #212]	; 0xd4
    const lv_font_t * font = style->text.font;
 8012202:	f8d2 a024 	ldr.w	sl, [r2, #36]	; 0x24
    if((flag & LV_TXT_FLAG_EXPAND) == 0) {
 8012206:	f040 8094 	bne.w	8012332 <lv_draw_label+0x156>
    return area_p->x2 - area_p->x1 + 1;
 801220a:	8883      	ldrh	r3, [r0, #4]
 801220c:	8802      	ldrh	r2, [r0, #0]
 801220e:	3301      	adds	r3, #1
 8012210:	1a9b      	subs	r3, r3, r2
 8012212:	b21b      	sxth	r3, r3
    lv_coord_t line_height = lv_font_get_line_height(font) + style->text.line_space;
 8012214:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
        w = p.x;
 8012216:	9304      	str	r3, [sp, #16]
    lv_coord_t line_height = lv_font_get_line_height(font) + style->text.line_space;
 8012218:	f89a 3008 	ldrb.w	r3, [sl, #8]
 801221c:	4413      	add	r3, r2
 801221e:	b29b      	uxth	r3, r3
 8012220:	9305      	str	r3, [sp, #20]
 8012222:	f9bd 3014 	ldrsh.w	r3, [sp, #20]
 8012226:	9306      	str	r3, [sp, #24]
    pos.x = coords->x1;
 8012228:	882b      	ldrh	r3, [r5, #0]
 801222a:	f8ad 304c 	strh.w	r3, [sp, #76]	; 0x4c
    if(offset != NULL) {
 801222e:	9b32      	ldr	r3, [sp, #200]	; 0xc8
    pos.y = coords->y1;
 8012230:	f9b5 2002 	ldrsh.w	r2, [r5, #2]
 8012234:	f8ad 204e 	strh.w	r2, [sp, #78]	; 0x4e
    if(offset != NULL) {
 8012238:	2b00      	cmp	r3, #0
 801223a:	f000 81f1 	beq.w	8012620 <lv_draw_label+0x444>
        x_ofs = offset->x;
 801223e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8012242:	930a      	str	r3, [sp, #40]	; 0x28
        y_ofs = offset->y;
 8012244:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 8012246:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
        pos.y += y_ofs;
 801224a:	18d1      	adds	r1, r2, r3
 801224c:	f8ad 104e 	strh.w	r1, [sp, #78]	; 0x4e
    if(hint && y_ofs == 0) {
 8012250:	f1b8 0f00 	cmp.w	r8, #0
 8012254:	f000 81ea 	beq.w	801262c <lv_draw_label+0x450>
 8012258:	2b00      	cmp	r3, #0
 801225a:	f040 81e7 	bne.w	801262c <lv_draw_label+0x450>
        if(LV_MATH_ABS(hint->coord_y - coords->y1) > LV_LABEL_HINT_UPDATE_TH - 2 * line_height) {
 801225e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8012262:	1a9b      	subs	r3, r3, r2
 8012264:	9a06      	ldr	r2, [sp, #24]
 8012266:	2b00      	cmp	r3, #0
 8012268:	bfb8      	it	lt
 801226a:	425b      	neglt	r3, r3
 801226c:	f5c2 7200 	rsb	r2, r2, #512	; 0x200
 8012270:	ebb3 0f42 	cmp.w	r3, r2, lsl #1
            hint->line_start = -1;
 8012274:	bfc4      	itt	gt
 8012276:	f04f 33ff 	movgt.w	r3, #4294967295	; 0xffffffff
 801227a:	f8c8 3000 	strgt.w	r3, [r8]
        last_line_start = hint->line_start;
 801227e:	f8d8 7000 	ldr.w	r7, [r8]
    if(hint && last_line_start >= 0) {
 8012282:	2f00      	cmp	r7, #0
 8012284:	f2c0 81d2 	blt.w	801262c <lv_draw_label+0x450>
        pos.y += hint->y;
 8012288:	f8bd 204e 	ldrh.w	r2, [sp, #78]	; 0x4e
 801228c:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8012290:	4413      	add	r3, r2
 8012292:	f8ad 304e 	strh.w	r3, [sp, #78]	; 0x4e
    uint32_t line_end = line_start + lv_txt_get_next_line(&txt[line_start], font, style->text.letter_space, w, flag);
 8012296:	9830      	ldr	r0, [sp, #192]	; 0xc0
 8012298:	f9b4 2028 	ldrsh.w	r2, [r4, #40]	; 0x28
 801229c:	f8cd b000 	str.w	fp, [sp]
 80122a0:	9b04      	ldr	r3, [sp, #16]
 80122a2:	4651      	mov	r1, sl
 80122a4:	4438      	add	r0, r7
 80122a6:	f003 fd5b 	bl	8015d60 <lv_txt_get_next_line>
 80122aa:	19c6      	adds	r6, r0, r7
    while(pos.y + line_height < mask->y1) {
 80122ac:	9a06      	ldr	r2, [sp, #24]
 80122ae:	f9bd 304e 	ldrsh.w	r3, [sp, #78]	; 0x4e
 80122b2:	4413      	add	r3, r2
 80122b4:	9a07      	ldr	r2, [sp, #28]
 80122b6:	f9b2 2002 	ldrsh.w	r2, [r2, #2]
 80122ba:	4293      	cmp	r3, r2
 80122bc:	db4e      	blt.n	801235c <lv_draw_label+0x180>
    if(flag & LV_TXT_FLAG_CENTER) {
 80122be:	f01b 0304 	ands.w	r3, fp, #4
 80122c2:	930f      	str	r3, [sp, #60]	; 0x3c
 80122c4:	d078      	beq.n	80123b8 <lv_draw_label+0x1dc>
        line_width = lv_txt_get_width(&txt[line_start], line_end - line_start, font, style->text.letter_space, flag);
 80122c6:	9830      	ldr	r0, [sp, #192]	; 0xc0
 80122c8:	f9b4 3028 	ldrsh.w	r3, [r4, #40]	; 0x28
 80122cc:	f8cd b000 	str.w	fp, [sp]
 80122d0:	1bf1      	subs	r1, r6, r7
 80122d2:	4652      	mov	r2, sl
 80122d4:	b289      	uxth	r1, r1
 80122d6:	4438      	add	r0, r7
 80122d8:	f003 fdca 	bl	8015e70 <lv_txt_get_width>
 80122dc:	88ab      	ldrh	r3, [r5, #4]
 80122de:	882a      	ldrh	r2, [r5, #0]
 80122e0:	3301      	adds	r3, #1
 80122e2:	1a9b      	subs	r3, r3, r2
        pos.x += (lv_area_get_width(coords) - line_width) / 2;
 80122e4:	b21b      	sxth	r3, r3
 80122e6:	1a18      	subs	r0, r3, r0
 80122e8:	2302      	movs	r3, #2
 80122ea:	fb90 f0f3 	sdiv	r0, r0, r3
        pos.x += lv_area_get_width(coords) - line_width;
 80122ee:	f8bd 304c 	ldrh.w	r3, [sp, #76]	; 0x4c
 80122f2:	4418      	add	r0, r3
 80122f4:	f8ad 004c 	strh.w	r0, [sp, #76]	; 0x4c
    lv_opa_t opa = opa_scale == LV_OPA_COVER ? style->text.opa : (uint16_t)((uint16_t)style->text.opa * opa_scale) >> 8;
 80122f8:	9b09      	ldr	r3, [sp, #36]	; 0x24
    lv_style_copy(&sel_style, &lv_style_plain_color);
 80122fa:	49bb      	ldr	r1, [pc, #748]	; (80125e8 <lv_draw_label+0x40c>)
    lv_opa_t opa = opa_scale == LV_OPA_COVER ? style->text.opa : (uint16_t)((uint16_t)style->text.opa * opa_scale) >> 8;
 80122fc:	2bff      	cmp	r3, #255	; 0xff
 80122fe:	bf18      	it	ne
 8012300:	9a09      	ldrne	r2, [sp, #36]	; 0x24
 8012302:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
 8012306:	bf1c      	itt	ne
 8012308:	4353      	mulne	r3, r2
 801230a:	f3c3 2307 	ubfxne	r3, r3, #8, #8
    lv_style_copy(&sel_style, &lv_style_plain_color);
 801230e:	a817      	add	r0, sp, #92	; 0x5c
    lv_opa_t opa = opa_scale == LV_OPA_COVER ? style->text.opa : (uint16_t)((uint16_t)style->text.opa * opa_scale) >> 8;
 8012310:	9309      	str	r3, [sp, #36]	; 0x24
    lv_style_copy(&sel_style, &lv_style_plain_color);
 8012312:	f7fe fca9 	bl	8010c68 <lv_style_copy>
    sel_style.body.main_color = sel_style.body.grad_color = style->text.sel_color;
 8012316:	8c63      	ldrh	r3, [r4, #34]	; 0x22
 8012318:	f8ad 3060 	strh.w	r3, [sp, #96]	; 0x60
 801231c:	f8ad 305e 	strh.w	r3, [sp, #94]	; 0x5e
    uint16_t par_start = 0;
 8012320:	2300      	movs	r3, #0
 8012322:	9308      	str	r3, [sp, #32]
    while(txt[line_start] != '\0') {
 8012324:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8012326:	5ddb      	ldrb	r3, [r3, r7]
 8012328:	2b00      	cmp	r3, #0
 801232a:	d15a      	bne.n	80123e2 <lv_draw_label+0x206>
}
 801232c:	b027      	add	sp, #156	; 0x9c
 801232e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        lv_txt_get_size(&p, txt, style->text.font, style->text.letter_space, style->text.line_space, LV_COORD_MAX,
 8012332:	f9b2 3028 	ldrsh.w	r3, [r2, #40]	; 0x28
 8012336:	9930      	ldr	r1, [sp, #192]	; 0xc0
 8012338:	f8cd b008 	str.w	fp, [sp, #8]
 801233c:	f647 4218 	movw	r2, #31768	; 0x7c18
 8012340:	9201      	str	r2, [sp, #4]
 8012342:	f9b4 202a 	ldrsh.w	r2, [r4, #42]	; 0x2a
 8012346:	9200      	str	r2, [sp, #0]
 8012348:	a817      	add	r0, sp, #92	; 0x5c
 801234a:	4652      	mov	r2, sl
 801234c:	f003 fdd8 	bl	8015f00 <lv_txt_get_size>
        w = p.x;
 8012350:	f9bd 305c 	ldrsh.w	r3, [sp, #92]	; 0x5c
 8012354:	e75e      	b.n	8012214 <lv_draw_label+0x38>
    lv_coord_t x_ofs = 0;
 8012356:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 8012358:	930a      	str	r3, [sp, #40]	; 0x28
 801235a:	e780      	b.n	801225e <lv_draw_label+0x82>
        line_end += lv_txt_get_next_line(&txt[line_start], font, style->text.letter_space, w, flag);
 801235c:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 801235e:	f9b4 2028 	ldrsh.w	r2, [r4, #40]	; 0x28
 8012362:	f8cd b000 	str.w	fp, [sp]
 8012366:	4433      	add	r3, r6
 8012368:	9308      	str	r3, [sp, #32]
 801236a:	4651      	mov	r1, sl
 801236c:	9b04      	ldr	r3, [sp, #16]
 801236e:	9808      	ldr	r0, [sp, #32]
 8012370:	f003 fcf6 	bl	8015d60 <lv_txt_get_next_line>
        pos.y += line_height;
 8012374:	f8bd 304e 	ldrh.w	r3, [sp, #78]	; 0x4e
 8012378:	9a05      	ldr	r2, [sp, #20]
 801237a:	4413      	add	r3, r2
 801237c:	b21b      	sxth	r3, r3
        line_end += lv_txt_get_next_line(&txt[line_start], font, style->text.letter_space, w, flag);
 801237e:	4430      	add	r0, r6
        pos.y += line_height;
 8012380:	f8ad 304e 	strh.w	r3, [sp, #78]	; 0x4e
        if(hint && pos.y >= -LV_LABEL_HINT_UPDATE_TH && hint->line_start < 0) {
 8012384:	f1b8 0f00 	cmp.w	r8, #0
 8012388:	d00f      	beq.n	80123aa <lv_draw_label+0x1ce>
 801238a:	f513 6f80 	cmn.w	r3, #1024	; 0x400
 801238e:	db0c      	blt.n	80123aa <lv_draw_label+0x1ce>
 8012390:	f8d8 2000 	ldr.w	r2, [r8]
 8012394:	2a00      	cmp	r2, #0
 8012396:	da08      	bge.n	80123aa <lv_draw_label+0x1ce>
            hint->y          = pos.y - coords->y1;
 8012398:	f9b5 2002 	ldrsh.w	r2, [r5, #2]
            hint->line_start = line_start;
 801239c:	f8c8 6000 	str.w	r6, [r8]
            hint->y          = pos.y - coords->y1;
 80123a0:	1a9b      	subs	r3, r3, r2
 80123a2:	f8c8 3004 	str.w	r3, [r8, #4]
            hint->coord_y    = coords->y1;
 80123a6:	f8c8 2008 	str.w	r2, [r8, #8]
        if(txt[line_start] == '\0') return;
 80123aa:	9b08      	ldr	r3, [sp, #32]
 80123ac:	781b      	ldrb	r3, [r3, #0]
 80123ae:	4637      	mov	r7, r6
 80123b0:	2b00      	cmp	r3, #0
 80123b2:	d0bb      	beq.n	801232c <lv_draw_label+0x150>
        line_end += lv_txt_get_next_line(&txt[line_start], font, style->text.letter_space, w, flag);
 80123b4:	4606      	mov	r6, r0
 80123b6:	e779      	b.n	80122ac <lv_draw_label+0xd0>
    else if(flag & LV_TXT_FLAG_RIGHT) {
 80123b8:	f01b 0f08 	tst.w	fp, #8
 80123bc:	d09c      	beq.n	80122f8 <lv_draw_label+0x11c>
        line_width = lv_txt_get_width(&txt[line_start], line_end - line_start, font, style->text.letter_space, flag);
 80123be:	9830      	ldr	r0, [sp, #192]	; 0xc0
 80123c0:	f9b4 3028 	ldrsh.w	r3, [r4, #40]	; 0x28
 80123c4:	f8cd b000 	str.w	fp, [sp]
 80123c8:	1bf1      	subs	r1, r6, r7
 80123ca:	4652      	mov	r2, sl
 80123cc:	b289      	uxth	r1, r1
 80123ce:	4438      	add	r0, r7
 80123d0:	f003 fd4e 	bl	8015e70 <lv_txt_get_width>
 80123d4:	88ab      	ldrh	r3, [r5, #4]
 80123d6:	882a      	ldrh	r2, [r5, #0]
 80123d8:	3301      	adds	r3, #1
 80123da:	1a9b      	subs	r3, r3, r2
        pos.x += lv_area_get_width(coords) - line_width;
 80123dc:	b21b      	sxth	r3, r3
 80123de:	1a18      	subs	r0, r3, r0
 80123e0:	e785      	b.n	80122ee <lv_draw_label+0x112>
        if(offset != NULL) {
 80123e2:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 80123e4:	b12b      	cbz	r3, 80123f2 <lv_draw_label+0x216>
            pos.x += x_ofs;
 80123e6:	f8bd 304c 	ldrh.w	r3, [sp, #76]	; 0x4c
 80123ea:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80123ec:	4413      	add	r3, r2
 80123ee:	f8ad 304c 	strh.w	r3, [sp, #76]	; 0x4c
            if((flag & LV_TXT_FLAG_RECOLOR) != 0) {
 80123f2:	f00b 0301 	and.w	r3, fp, #1
        i         = line_start;
 80123f6:	9714      	str	r7, [sp, #80]	; 0x50
            if((flag & LV_TXT_FLAG_RECOLOR) != 0) {
 80123f8:	9311      	str	r3, [sp, #68]	; 0x44
        cmd_state = CMD_STATE_WAIT;
 80123fa:	2700      	movs	r7, #0
        while(i < line_end) {
 80123fc:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80123fe:	429e      	cmp	r6, r3
 8012400:	d83a      	bhi.n	8012478 <lv_draw_label+0x29c>
        line_end += lv_txt_get_next_line(&txt[line_start], font, style->text.letter_space, w, flag);
 8012402:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8012404:	f9b4 2028 	ldrsh.w	r2, [r4, #40]	; 0x28
 8012408:	f8cd b000 	str.w	fp, [sp]
 801240c:	199f      	adds	r7, r3, r6
 801240e:	4651      	mov	r1, sl
 8012410:	9b04      	ldr	r3, [sp, #16]
 8012412:	4638      	mov	r0, r7
 8012414:	f003 fca4 	bl	8015d60 <lv_txt_get_next_line>
        pos.x = coords->x1;
 8012418:	882b      	ldrh	r3, [r5, #0]
 801241a:	f8ad 304c 	strh.w	r3, [sp, #76]	; 0x4c
        if(flag & LV_TXT_FLAG_CENTER) {
 801241e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
        line_end += lv_txt_get_next_line(&txt[line_start], font, style->text.letter_space, w, flag);
 8012420:	4601      	mov	r1, r0
 8012422:	eb00 0806 	add.w	r8, r0, r6
        if(flag & LV_TXT_FLAG_CENTER) {
 8012426:	2b00      	cmp	r3, #0
 8012428:	f000 80e7 	beq.w	80125fa <lv_draw_label+0x41e>
            line_width =
 801242c:	f9b4 3028 	ldrsh.w	r3, [r4, #40]	; 0x28
 8012430:	f8cd b000 	str.w	fp, [sp]
 8012434:	4652      	mov	r2, sl
 8012436:	4638      	mov	r0, r7
 8012438:	f003 fd1a 	bl	8015e70 <lv_txt_get_width>
 801243c:	88ab      	ldrh	r3, [r5, #4]
 801243e:	882a      	ldrh	r2, [r5, #0]
 8012440:	3301      	adds	r3, #1
 8012442:	1a9b      	subs	r3, r3, r2
            pos.x += (lv_area_get_width(coords) - line_width) / 2;
 8012444:	b21b      	sxth	r3, r3
 8012446:	1a18      	subs	r0, r3, r0
 8012448:	2302      	movs	r3, #2
 801244a:	fb90 f0f3 	sdiv	r0, r0, r3
            pos.x += lv_area_get_width(coords) - line_width;
 801244e:	f8bd 304c 	ldrh.w	r3, [sp, #76]	; 0x4c
 8012452:	4418      	add	r0, r3
 8012454:	f8ad 004c 	strh.w	r0, [sp, #76]	; 0x4c
        pos.y += line_height;
 8012458:	f8bd 304e 	ldrh.w	r3, [sp, #78]	; 0x4e
 801245c:	9a05      	ldr	r2, [sp, #20]
 801245e:	4413      	add	r3, r2
        if(pos.y > mask->y2) return;
 8012460:	9a07      	ldr	r2, [sp, #28]
 8012462:	f9b2 2006 	ldrsh.w	r2, [r2, #6]
        pos.y += line_height;
 8012466:	b21b      	sxth	r3, r3
        if(pos.y > mask->y2) return;
 8012468:	429a      	cmp	r2, r3
        pos.y += line_height;
 801246a:	f8ad 304e 	strh.w	r3, [sp, #78]	; 0x4e
 801246e:	4637      	mov	r7, r6
        if(pos.y > mask->y2) return;
 8012470:	f6ff af5c 	blt.w	801232c <lv_draw_label+0x150>
        line_end += lv_txt_get_next_line(&txt[line_start], font, style->text.letter_space, w, flag);
 8012474:	4646      	mov	r6, r8
 8012476:	e755      	b.n	8012324 <lv_draw_label+0x148>
            letter      = lv_txt_encoded_next(txt, &i);
 8012478:	4b5c      	ldr	r3, [pc, #368]	; (80125ec <lv_draw_label+0x410>)
 801247a:	9830      	ldr	r0, [sp, #192]	; 0xc0
 801247c:	681b      	ldr	r3, [r3, #0]
 801247e:	a914      	add	r1, sp, #80	; 0x50
 8012480:	4798      	blx	r3
            letter_next = lv_txt_encoded_next(&txt[i], NULL);
 8012482:	9a30      	ldr	r2, [sp, #192]	; 0xc0
            letter      = lv_txt_encoded_next(txt, &i);
 8012484:	9006      	str	r0, [sp, #24]
            letter_next = lv_txt_encoded_next(&txt[i], NULL);
 8012486:	4b59      	ldr	r3, [pc, #356]	; (80125ec <lv_draw_label+0x410>)
 8012488:	9814      	ldr	r0, [sp, #80]	; 0x50
 801248a:	681b      	ldr	r3, [r3, #0]
 801248c:	4410      	add	r0, r2
 801248e:	2100      	movs	r1, #0
 8012490:	4798      	blx	r3
            if((flag & LV_TXT_FLAG_RECOLOR) != 0) {
 8012492:	9b11      	ldr	r3, [sp, #68]	; 0x44
            letter_next = lv_txt_encoded_next(&txt[i], NULL);
 8012494:	4602      	mov	r2, r0
            if((flag & LV_TXT_FLAG_RECOLOR) != 0) {
 8012496:	2b00      	cmp	r3, #0
 8012498:	d055      	beq.n	8012546 <lv_draw_label+0x36a>
                if(letter == (uint32_t)LV_TXT_COLOR_CMD[0]) {
 801249a:	9b06      	ldr	r3, [sp, #24]
 801249c:	2b23      	cmp	r3, #35	; 0x23
 801249e:	d10c      	bne.n	80124ba <lv_draw_label+0x2de>
                    if(cmd_state == CMD_STATE_WAIT) { /*Start char*/
 80124a0:	b927      	cbnz	r7, 80124ac <lv_draw_label+0x2d0>
                        par_start = i;
 80124a2:	f8bd 3050 	ldrh.w	r3, [sp, #80]	; 0x50
 80124a6:	9308      	str	r3, [sp, #32]
                        cmd_state = CMD_STATE_PAR;
 80124a8:	2701      	movs	r7, #1
                        continue;
 80124aa:	e7a7      	b.n	80123fc <lv_draw_label+0x220>
                    } else if(cmd_state == CMD_STATE_PAR) { /*Other start char in parameter escaped cmd. char */
 80124ac:	2f01      	cmp	r7, #1
 80124ae:	f000 80bf 	beq.w	8012630 <lv_draw_label+0x454>
                    } else if(cmd_state == CMD_STATE_IN) { /*Command end */
 80124b2:	2f02      	cmp	r7, #2
 80124b4:	d149      	bne.n	801254a <lv_draw_label+0x36e>
                        cmd_state = CMD_STATE_WAIT;
 80124b6:	2700      	movs	r7, #0
 80124b8:	e7a0      	b.n	80123fc <lv_draw_label+0x220>
                if(cmd_state == CMD_STATE_PAR) {
 80124ba:	2f01      	cmp	r7, #1
 80124bc:	d143      	bne.n	8012546 <lv_draw_label+0x36a>
                    if(letter == ' ') {
 80124be:	9b06      	ldr	r3, [sp, #24]
 80124c0:	2b20      	cmp	r3, #32
 80124c2:	d19b      	bne.n	80123fc <lv_draw_label+0x220>
                        if(i - par_start == LABEL_RECOLOR_PAR_LENGTH + 1) {
 80124c4:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80124c6:	9a08      	ldr	r2, [sp, #32]
 80124c8:	1a9b      	subs	r3, r3, r2
 80124ca:	2b07      	cmp	r3, #7
 80124cc:	d139      	bne.n	8012542 <lv_draw_label+0x366>
                            memcpy(buf, &txt[par_start], LABEL_RECOLOR_PAR_LENGTH);
 80124ce:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 80124d0:	4413      	add	r3, r2
 80124d2:	6818      	ldr	r0, [r3, #0]
 80124d4:	9015      	str	r0, [sp, #84]	; 0x54
 80124d6:	889b      	ldrh	r3, [r3, #4]
 80124d8:	f8ad 3058 	strh.w	r3, [sp, #88]	; 0x58
 80124dc:	0e01      	lsrs	r1, r0, #24
 80124de:	0c07      	lsrs	r7, r0, #16
 80124e0:	ea4f 2810 	mov.w	r8, r0, lsr #8
                            r       = (hex_char_to_num(buf[0]) << 4) + hex_char_to_num(buf[1]);
 80124e4:	b2c0      	uxtb	r0, r0
 80124e6:	f7ff fe63 	bl	80121b0 <hex_char_to_num>
 80124ea:	4602      	mov	r2, r0
 80124ec:	fa5f f088 	uxtb.w	r0, r8
 80124f0:	f7ff fe5e 	bl	80121b0 <hex_char_to_num>
 80124f4:	eb00 1202 	add.w	r2, r0, r2, lsl #4
                            g       = (hex_char_to_num(buf[2]) << 4) + hex_char_to_num(buf[3]);
 80124f8:	b2f8      	uxtb	r0, r7
 80124fa:	f7ff fe59 	bl	80121b0 <hex_char_to_num>
 80124fe:	4607      	mov	r7, r0
 8012500:	b2c8      	uxtb	r0, r1
 8012502:	f7ff fe55 	bl	80121b0 <hex_char_to_num>
 8012506:	eb00 1107 	add.w	r1, r0, r7, lsl #4
                            b       = (hex_char_to_num(buf[4]) << 4) + hex_char_to_num(buf[5]);
 801250a:	f89d 0058 	ldrb.w	r0, [sp, #88]	; 0x58
 801250e:	f7ff fe4f 	bl	80121b0 <hex_char_to_num>
 8012512:	4607      	mov	r7, r0
 8012514:	f89d 0059 	ldrb.w	r0, [sp, #89]	; 0x59
 8012518:	f7ff fe4a 	bl	80121b0 <hex_char_to_num>
 801251c:	eb00 1007 	add.w	r0, r0, r7, lsl #4
#if LV_COLOR_16_SWAP == 0
#define LV_COLOR_MAKE(r8, g8, b8) ((lv_color_t){{b8 >> 3, g8 >> 2, r8 >> 3}})
static inline lv_color_t lv_color_make(uint8_t r8, uint8_t g8, uint8_t b8)
{
    lv_color_t color;
    color.ch.blue  = (uint16_t)(b8 >> 3);
 8012520:	f3c0 00c4 	ubfx	r0, r0, #3, #5
 8012524:	f360 0904 	bfi	r9, r0, #0, #5
    color.ch.green = (uint16_t)(g8 >> 2);
 8012528:	f3c1 0185 	ubfx	r1, r1, #2, #6
 801252c:	f361 194a 	bfi	r9, r1, #5, #6
    color.ch.red   = (uint16_t)(r8 >> 3);
 8012530:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 8012534:	f362 29cf 	bfi	r9, r2, #11, #5
 8012538:	fa1f f389 	uxth.w	r3, r9
                            recolor.full = style->text.color.full;
 801253c:	930b      	str	r3, [sp, #44]	; 0x2c
                        cmd_state = CMD_STATE_IN; /*After the parameter the text is in the command*/
 801253e:	2702      	movs	r7, #2
 8012540:	e75c      	b.n	80123fc <lv_draw_label+0x220>
                            recolor.full = style->text.color.full;
 8012542:	8c23      	ldrh	r3, [r4, #32]
 8012544:	e7fa      	b.n	801253c <lv_draw_label+0x360>
            if(cmd_state == CMD_STATE_IN) color = recolor;
 8012546:	2f02      	cmp	r7, #2
 8012548:	d054      	beq.n	80125f4 <lv_draw_label+0x418>
            lv_color_t color = style->text.color;
 801254a:	8c23      	ldrh	r3, [r4, #32]
            letter_w = lv_font_get_glyph_width(font, letter, letter_next);
 801254c:	9906      	ldr	r1, [sp, #24]
            if(cmd_state == CMD_STATE_IN) color = recolor;
 801254e:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
            letter_w = lv_font_get_glyph_width(font, letter, letter_next);
 8012552:	4650      	mov	r0, sl
 8012554:	f002 fb36 	bl	8014bc4 <lv_font_get_glyph_width>
            if(sel_start != 0xFFFF && sel_end != 0xFFFF) {
 8012558:	9a0d      	ldr	r2, [sp, #52]	; 0x34
            letter_w = lv_font_get_glyph_width(font, letter, letter_next);
 801255a:	b203      	sxth	r3, r0
 801255c:	9310      	str	r3, [sp, #64]	; 0x40
            if(sel_start != 0xFFFF && sel_end != 0xFFFF) {
 801255e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8012562:	429a      	cmp	r2, r3
            letter_w = lv_font_get_glyph_width(font, letter, letter_next);
 8012564:	4680      	mov	r8, r0
            if(sel_start != 0xFFFF && sel_end != 0xFFFF) {
 8012566:	d026      	beq.n	80125b6 <lv_draw_label+0x3da>
 8012568:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801256a:	429a      	cmp	r2, r3
 801256c:	d023      	beq.n	80125b6 <lv_draw_label+0x3da>
                int char_ind = lv_encoded_get_char_id(txt, i);
 801256e:	4b20      	ldr	r3, [pc, #128]	; (80125f0 <lv_draw_label+0x414>)
 8012570:	9914      	ldr	r1, [sp, #80]	; 0x50
 8012572:	681b      	ldr	r3, [r3, #0]
 8012574:	9830      	ldr	r0, [sp, #192]	; 0xc0
 8012576:	4798      	blx	r3
                if(char_ind > sel_start && char_ind <= sel_end) {
 8012578:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801257a:	4298      	cmp	r0, r3
 801257c:	dd1b      	ble.n	80125b6 <lv_draw_label+0x3da>
 801257e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8012580:	4298      	cmp	r0, r3
 8012582:	dc18      	bgt.n	80125b6 <lv_draw_label+0x3da>
                    sel_coords.x1 = pos.x;
 8012584:	f9bd 304c 	ldrsh.w	r3, [sp, #76]	; 0x4c
                    sel_coords.x2 = pos.x + letter_w + style->text.letter_space - 1;
 8012588:	8d21      	ldrh	r1, [r4, #40]	; 0x28
                    sel_coords.x1 = pos.x;
 801258a:	f8ad 3054 	strh.w	r3, [sp, #84]	; 0x54
                    sel_coords.x2 = pos.x + letter_w + style->text.letter_space - 1;
 801258e:	3b01      	subs	r3, #1
 8012590:	440b      	add	r3, r1
                    sel_coords.y1 = pos.y;
 8012592:	f9bd 204e 	ldrsh.w	r2, [sp, #78]	; 0x4e
 8012596:	f8ad 2056 	strh.w	r2, [sp, #86]	; 0x56
                    sel_coords.x2 = pos.x + letter_w + style->text.letter_space - 1;
 801259a:	4443      	add	r3, r8
 801259c:	f8ad 3058 	strh.w	r3, [sp, #88]	; 0x58
                    sel_coords.y2 = pos.y + line_height - 1;
 80125a0:	9b05      	ldr	r3, [sp, #20]
                    lv_draw_rect(&sel_coords, mask, &sel_style, opa);
 80125a2:	9907      	ldr	r1, [sp, #28]
                    sel_coords.y2 = pos.y + line_height - 1;
 80125a4:	3a01      	subs	r2, #1
 80125a6:	441a      	add	r2, r3
 80125a8:	f8ad 205a 	strh.w	r2, [sp, #90]	; 0x5a
                    lv_draw_rect(&sel_coords, mask, &sel_style, opa);
 80125ac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80125ae:	aa17      	add	r2, sp, #92	; 0x5c
 80125b0:	a815      	add	r0, sp, #84	; 0x54
 80125b2:	f000 f8a9 	bl	8012708 <lv_draw_rect>
            lv_draw_letter(&pos, mask, font, letter, color, opa);
 80125b6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80125b8:	9301      	str	r3, [sp, #4]
 80125ba:	f8bd 3032 	ldrh.w	r3, [sp, #50]	; 0x32
 80125be:	f8ad 3000 	strh.w	r3, [sp]
 80125c2:	4652      	mov	r2, sl
 80125c4:	9b06      	ldr	r3, [sp, #24]
 80125c6:	9907      	ldr	r1, [sp, #28]
 80125c8:	a813      	add	r0, sp, #76	; 0x4c
 80125ca:	f7ff f9e7 	bl	801199c <lv_draw_letter>
            if(letter_w > 0) {
 80125ce:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80125d0:	2b00      	cmp	r3, #0
 80125d2:	f77f af13 	ble.w	80123fc <lv_draw_label+0x220>
                pos.x += letter_w + style->text.letter_space;
 80125d6:	f8bd 304c 	ldrh.w	r3, [sp, #76]	; 0x4c
 80125da:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 80125dc:	4413      	add	r3, r2
 80125de:	4498      	add	r8, r3
 80125e0:	f8ad 804c 	strh.w	r8, [sp, #76]	; 0x4c
 80125e4:	e70a      	b.n	80123fc <lv_draw_label+0x220>
 80125e6:	bf00      	nop
 80125e8:	2000c798 	.word	0x2000c798
 80125ec:	20001d1c 	.word	0x20001d1c
 80125f0:	20001d14 	.word	0x20001d14
            if(cmd_state == CMD_STATE_IN) color = recolor;
 80125f4:	f8bd 302c 	ldrh.w	r3, [sp, #44]	; 0x2c
 80125f8:	e7a8      	b.n	801254c <lv_draw_label+0x370>
        else if(flag & LV_TXT_FLAG_RIGHT) {
 80125fa:	f01b 0f08 	tst.w	fp, #8
 80125fe:	f43f af2b 	beq.w	8012458 <lv_draw_label+0x27c>
            line_width =
 8012602:	f9b4 3028 	ldrsh.w	r3, [r4, #40]	; 0x28
 8012606:	f8cd b000 	str.w	fp, [sp]
 801260a:	4652      	mov	r2, sl
 801260c:	4638      	mov	r0, r7
 801260e:	f003 fc2f 	bl	8015e70 <lv_txt_get_width>
 8012612:	88ab      	ldrh	r3, [r5, #4]
 8012614:	882a      	ldrh	r2, [r5, #0]
 8012616:	3301      	adds	r3, #1
 8012618:	1a9b      	subs	r3, r3, r2
            pos.x += lv_area_get_width(coords) - line_width;
 801261a:	b21b      	sxth	r3, r3
 801261c:	1a18      	subs	r0, r3, r0
 801261e:	e716      	b.n	801244e <lv_draw_label+0x272>
    if(hint && y_ofs == 0) {
 8012620:	f1b8 0f00 	cmp.w	r8, #0
 8012624:	f47f ae97 	bne.w	8012356 <lv_draw_label+0x17a>
    lv_coord_t x_ofs = 0;
 8012628:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
    uint32_t line_start     = 0;
 801262c:	2700      	movs	r7, #0
 801262e:	e632      	b.n	8012296 <lv_draw_label+0xba>
                        cmd_state = CMD_STATE_WAIT;
 8012630:	2700      	movs	r7, #0
 8012632:	e78a      	b.n	801254a <lv_draw_label+0x36e>

08012634 <lv_color_mix>:
    ret.ch.red = (uint16_t)((uint16_t)c1.ch.red * mix + (c2.ch.red * (255 - mix))) >> 8;
 8012634:	f1c2 03ff 	rsb	r3, r2, #255	; 0xff
{
 8012638:	b570      	push	{r4, r5, r6, lr}
    ret.ch.red = (uint16_t)((uint16_t)c1.ch.red * mix + (c2.ch.red * (255 - mix))) >> 8;
 801263a:	b294      	uxth	r4, r2
 801263c:	b29a      	uxth	r2, r3
 801263e:	f3c1 23c4 	ubfx	r3, r1, #11, #5
 8012642:	fb13 f302 	smulbb	r3, r3, r2
 8012646:	f3c0 25c4 	ubfx	r5, r0, #11, #5
    ret.ch.green = (uint16_t)((uint16_t)c1.ch.green * mix + (c2.ch.green * (255 - mix))) >> 8;
 801264a:	f3c1 1645 	ubfx	r6, r1, #5, #6
    ret.ch.blue = (uint16_t)((uint16_t)c1.ch.blue * mix + (c2.ch.blue * (255 - mix))) >> 8;
 801264e:	f001 011f 	and.w	r1, r1, #31
    ret.ch.red = (uint16_t)((uint16_t)c1.ch.red * mix + (c2.ch.red * (255 - mix))) >> 8;
 8012652:	fb05 3504 	mla	r5, r5, r4, r3
    ret.ch.green = (uint16_t)((uint16_t)c1.ch.green * mix + (c2.ch.green * (255 - mix))) >> 8;
 8012656:	fb16 f602 	smulbb	r6, r6, r2
 801265a:	f3c0 1345 	ubfx	r3, r0, #5, #6
    ret.ch.blue = (uint16_t)((uint16_t)c1.ch.blue * mix + (c2.ch.blue * (255 - mix))) >> 8;
 801265e:	fb11 f202 	smulbb	r2, r1, r2
 8012662:	f000 001f 	and.w	r0, r0, #31
 8012666:	fb00 2204 	mla	r2, r0, r4, r2
    ret.ch.green = (uint16_t)((uint16_t)c1.ch.green * mix + (c2.ch.green * (255 - mix))) >> 8;
 801266a:	fb03 6304 	mla	r3, r3, r4, r6
    ret.ch.blue = (uint16_t)((uint16_t)c1.ch.blue * mix + (c2.ch.blue * (255 - mix))) >> 8;
 801266e:	f3c2 2207 	ubfx	r2, r2, #8, #8
    return ret;
 8012672:	f04f 0000 	mov.w	r0, #0
    ret.ch.green = (uint16_t)((uint16_t)c1.ch.green * mix + (c2.ch.green * (255 - mix))) >> 8;
 8012676:	f3c3 2305 	ubfx	r3, r3, #8, #6
    return ret;
 801267a:	f362 0004 	bfi	r0, r2, #0, #5
    ret.ch.red = (uint16_t)((uint16_t)c1.ch.red * mix + (c2.ch.red * (255 - mix))) >> 8;
 801267e:	f3c5 2504 	ubfx	r5, r5, #8, #5
    return ret;
 8012682:	f363 104a 	bfi	r0, r3, #5, #6
 8012686:	f365 20cf 	bfi	r0, r5, #11, #5
}
 801268a:	bd70      	pop	{r4, r5, r6, pc}

0801268c <lv_draw_cont_radius_corr>:
}

#endif

static uint16_t lv_draw_cont_radius_corr(uint16_t r, lv_coord_t w, lv_coord_t h)
{
 801268c:	b570      	push	{r4, r5, r6, lr}
 801268e:	460e      	mov	r6, r1
 8012690:	4604      	mov	r4, r0
 8012692:	4615      	mov	r5, r2
    bool aa = lv_disp_get_antialiasing(lv_refr_get_disp_refreshing());
 8012694:	f7fe f908 	bl	80108a8 <lv_refr_get_disp_refreshing>
 8012698:	f002 fc62 	bl	8014f60 <lv_disp_get_antialiasing>

    if(r >= (w >> 1)) {
 801269c:	1071      	asrs	r1, r6, #1
 801269e:	428c      	cmp	r4, r1
 80126a0:	db03      	blt.n	80126aa <lv_draw_cont_radius_corr+0x1e>
        r = (w >> 1);
 80126a2:	b28c      	uxth	r4, r1
        if(r != 0) r--;
 80126a4:	b10c      	cbz	r4, 80126aa <lv_draw_cont_radius_corr+0x1e>
 80126a6:	3c01      	subs	r4, #1
 80126a8:	b2a4      	uxth	r4, r4
    }
    if(r >= (h >> 1)) {
 80126aa:	106a      	asrs	r2, r5, #1
 80126ac:	4294      	cmp	r4, r2
 80126ae:	db03      	blt.n	80126b8 <lv_draw_cont_radius_corr+0x2c>
        r = (h >> 1);
 80126b0:	b294      	uxth	r4, r2
        if(r != 0) r--;
 80126b2:	b124      	cbz	r4, 80126be <lv_draw_cont_radius_corr+0x32>
 80126b4:	3c01      	subs	r4, #1
 80126b6:	b2a4      	uxth	r4, r4
    }

    if(r > 0) r -= aa;
 80126b8:	b10c      	cbz	r4, 80126be <lv_draw_cont_radius_corr+0x32>
 80126ba:	1a24      	subs	r4, r4, r0
 80126bc:	b2a4      	uxth	r4, r4

    return r;
}
 80126be:	4620      	mov	r0, r4
 80126c0:	bd70      	pop	{r4, r5, r6, pc}
	...

080126c4 <antialias_get_opa_circ>:
#if CIRCLE_AA_NON_LINEAR_OPA_THRESHOLD < 1
    if(seg == 1) return 170;
#endif

#if CIRCLE_AA_NON_LINEAR_OPA_THRESHOLD < 2
    if(seg == 2) return (opa_map2[px_id] * opa) >> 8;
 80126c4:	2802      	cmp	r0, #2
 80126c6:	d105      	bne.n	80126d4 <antialias_get_opa_circ+0x10>
 80126c8:	4b0b      	ldr	r3, [pc, #44]	; (80126f8 <antialias_get_opa_circ+0x34>)
#if CIRCLE_AA_NON_LINEAR_OPA_THRESHOLD < 4
    if(seg == 4) return (opa_map4[px_id] * opa) >> 8;
#endif

    uint8_t id = (uint32_t)((uint32_t)px_id * (sizeof(opa_map8) - 1)) / (seg - 1);
    return (uint32_t)((uint32_t)opa_map8[id] * opa) >> 8;
 80126ca:	5c58      	ldrb	r0, [r3, r1]
 80126cc:	fb10 f002 	smulbb	r0, r0, r2
 80126d0:	0a00      	lsrs	r0, r0, #8
}
 80126d2:	4770      	bx	lr
    if(seg == 3) return (opa_map3[px_id] * opa) >> 8;
 80126d4:	2803      	cmp	r0, #3
 80126d6:	d101      	bne.n	80126dc <antialias_get_opa_circ+0x18>
 80126d8:	4b08      	ldr	r3, [pc, #32]	; (80126fc <antialias_get_opa_circ+0x38>)
 80126da:	e7f6      	b.n	80126ca <antialias_get_opa_circ+0x6>
    if(seg == 4) return (opa_map4[px_id] * opa) >> 8;
 80126dc:	2804      	cmp	r0, #4
    uint8_t id = (uint32_t)((uint32_t)px_id * (sizeof(opa_map8) - 1)) / (seg - 1);
 80126de:	bf1b      	ittet	ne
 80126e0:	ebc1 01c1 	rsbne	r1, r1, r1, lsl #3
 80126e4:	f100 33ff 	addne.w	r3, r0, #4294967295	; 0xffffffff
    if(seg == 4) return (opa_map4[px_id] * opa) >> 8;
 80126e8:	4b05      	ldreq	r3, [pc, #20]	; (8012700 <antialias_get_opa_circ+0x3c>)
    uint8_t id = (uint32_t)((uint32_t)px_id * (sizeof(opa_map8) - 1)) / (seg - 1);
 80126ea:	fbb1 f1f3 	udivne	r1, r1, r3
    return (uint32_t)((uint32_t)opa_map8[id] * opa) >> 8;
 80126ee:	bf1c      	itt	ne
 80126f0:	4b04      	ldrne	r3, [pc, #16]	; (8012704 <antialias_get_opa_circ+0x40>)
 80126f2:	b2c9      	uxtbne	r1, r1
 80126f4:	e7e9      	b.n	80126ca <antialias_get_opa_circ+0x6>
 80126f6:	bf00      	nop
 80126f8:	080f4f49 	.word	0x080f4f49
 80126fc:	080f4f4b 	.word	0x080f4f4b
 8012700:	080f4f4e 	.word	0x080f4f4e
 8012704:	080f4f52 	.word	0x080f4f52

08012708 <lv_draw_rect>:
{
 8012708:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801270c:	b0a9      	sub	sp, #164	; 0xa4
 801270e:	4682      	mov	sl, r0
 8012710:	9202      	str	r2, [sp, #8]
 * @param area_p pointer to an area
 * @return the height of the area (if y1 == y2 -> height = 1)
 */
static inline lv_coord_t lv_area_get_height(const lv_area_t * area_p)
{
    return area_p->y2 - area_p->y1 + 1;
 8012712:	88c2      	ldrh	r2, [r0, #6]
 8012714:	9308      	str	r3, [sp, #32]
 8012716:	8843      	ldrh	r3, [r0, #2]
 8012718:	3201      	adds	r2, #1
 801271a:	1ad2      	subs	r2, r2, r3
 801271c:	b212      	sxth	r2, r2
    if(lv_area_get_height(coords) < 1 || lv_area_get_width(coords) < 1) return;
 801271e:	2a00      	cmp	r2, #0
{
 8012720:	468b      	mov	fp, r1
    if(lv_area_get_height(coords) < 1 || lv_area_get_width(coords) < 1) return;
 8012722:	f340 869c 	ble.w	801345e <lv_draw_rect+0xd56>
    return area_p->x2 - area_p->x1 + 1;
 8012726:	8881      	ldrh	r1, [r0, #4]
 8012728:	8803      	ldrh	r3, [r0, #0]
 801272a:	3101      	adds	r1, #1
 801272c:	1ac9      	subs	r1, r1, r3
 801272e:	b209      	sxth	r1, r1
 8012730:	2900      	cmp	r1, #0
 8012732:	f340 8694 	ble.w	801345e <lv_draw_rect+0xd56>
    if(style->body.shadow.width != 0) {
 8012736:	9b02      	ldr	r3, [sp, #8]
 8012738:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 801273c:	2b00      	cmp	r3, #0
 801273e:	f000 82d3 	beq.w	8012ce8 <lv_draw_rect+0x5e0>
    radius            = lv_draw_cont_radius_corr(radius, width, height);
 8012742:	9b02      	ldr	r3, [sp, #8]
 8012744:	88d8      	ldrh	r0, [r3, #6]
 8012746:	f7ff ffa1 	bl	801268c <lv_draw_cont_radius_corr>
    memcpy(dest, src, sizeof(lv_area_t));
 801274a:	f8da 1004 	ldr.w	r1, [sl, #4]
 801274e:	4604      	mov	r4, r0
 8012750:	f8da 0000 	ldr.w	r0, [sl]
 8012754:	ab1e      	add	r3, sp, #120	; 0x78
 8012756:	c303      	stmia	r3!, {r0, r1}
    area_tmp.x1 += radius;
 8012758:	f8bd 3078 	ldrh.w	r3, [sp, #120]	; 0x78
 801275c:	4423      	add	r3, r4
 801275e:	f8ad 3078 	strh.w	r3, [sp, #120]	; 0x78
    area_tmp.x2 -= radius;
 8012762:	f8bd 307c 	ldrh.w	r3, [sp, #124]	; 0x7c
    if(lv_area_is_in(mask, &area_tmp) != false) return;
 8012766:	a91e      	add	r1, sp, #120	; 0x78
    area_tmp.x2 -= radius;
 8012768:	1b1b      	subs	r3, r3, r4
    if(lv_area_is_in(mask, &area_tmp) != false) return;
 801276a:	4658      	mov	r0, fp
    area_tmp.x2 -= radius;
 801276c:	f8ad 307c 	strh.w	r3, [sp, #124]	; 0x7c
    if(lv_area_is_in(mask, &area_tmp) != false) return;
 8012770:	f002 fe24 	bl	80153bc <lv_area_is_in>
 8012774:	2800      	cmp	r0, #0
 8012776:	f040 82b7 	bne.w	8012ce8 <lv_draw_rect+0x5e0>
 801277a:	f8da 0000 	ldr.w	r0, [sl]
 801277e:	f8da 1004 	ldr.w	r1, [sl, #4]
 8012782:	ab1e      	add	r3, sp, #120	; 0x78
 8012784:	c303      	stmia	r3!, {r0, r1}
    area_tmp.y1 += radius;
 8012786:	f8bd 307a 	ldrh.w	r3, [sp, #122]	; 0x7a
 801278a:	4423      	add	r3, r4
 801278c:	f8ad 307a 	strh.w	r3, [sp, #122]	; 0x7a
    area_tmp.y2 -= radius;
 8012790:	f8bd 307e 	ldrh.w	r3, [sp, #126]	; 0x7e
    if(lv_area_is_in(mask, &area_tmp) != false) return;
 8012794:	a91e      	add	r1, sp, #120	; 0x78
    area_tmp.y2 -= radius;
 8012796:	1b1c      	subs	r4, r3, r4
    if(lv_area_is_in(mask, &area_tmp) != false) return;
 8012798:	4658      	mov	r0, fp
    area_tmp.y2 -= radius;
 801279a:	f8ad 407e 	strh.w	r4, [sp, #126]	; 0x7e
    if(lv_area_is_in(mask, &area_tmp) != false) return;
 801279e:	f002 fe0d 	bl	80153bc <lv_area_is_in>
 80127a2:	4605      	mov	r5, r0
 80127a4:	2800      	cmp	r0, #0
 80127a6:	f040 829f 	bne.w	8012ce8 <lv_draw_rect+0x5e0>
    if(style->body.shadow.type == LV_SHADOW_FULL) {
 80127aa:	9b02      	ldr	r3, [sp, #8]
 80127ac:	7d1b      	ldrb	r3, [r3, #20]
 80127ae:	2b01      	cmp	r3, #1
 80127b0:	f040 8212 	bne.w	8012bd8 <lv_draw_rect+0x4d0>
    bool aa = lv_disp_get_antialiasing(lv_refr_get_disp_refreshing());
 80127b4:	f7fe f878 	bl	80108a8 <lv_refr_get_disp_refreshing>
 80127b8:	f002 fbd2 	bl	8014f60 <lv_disp_get_antialiasing>
    lv_coord_t swidth = style->body.shadow.width;
 80127bc:	9b02      	ldr	r3, [sp, #8]
    return area_p->y2 - area_p->y1 + 1;
 80127be:	f8ba 2006 	ldrh.w	r2, [sl, #6]
 80127c2:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 80127c6:	9304      	str	r3, [sp, #16]
 80127c8:	f8ba 3002 	ldrh.w	r3, [sl, #2]
    return area_p->x2 - area_p->x1 + 1;
 80127cc:	f8ba 1004 	ldrh.w	r1, [sl, #4]
    return area_p->y2 - area_p->y1 + 1;
 80127d0:	3201      	adds	r2, #1
 80127d2:	1ad2      	subs	r2, r2, r3
    return area_p->x2 - area_p->x1 + 1;
 80127d4:	f8ba 3000 	ldrh.w	r3, [sl]
 80127d8:	3101      	adds	r1, #1
 80127da:	1ac9      	subs	r1, r1, r3
    radius = lv_draw_cont_radius_corr(radius, width, height);
 80127dc:	9b02      	ldr	r3, [sp, #8]
 80127de:	b209      	sxth	r1, r1
    bool aa = lv_disp_get_antialiasing(lv_refr_get_disp_refreshing());
 80127e0:	4604      	mov	r4, r0
    radius = lv_draw_cont_radius_corr(radius, width, height);
 80127e2:	b212      	sxth	r2, r2
 80127e4:	88d8      	ldrh	r0, [r3, #6]
 80127e6:	f7ff ff51 	bl	801268c <lv_draw_cont_radius_corr>
    radius += aa;
 80127ea:	b2a4      	uxth	r4, r4
 80127ec:	4420      	add	r0, r4
 80127ee:	b283      	uxth	r3, r0
 80127f0:	9305      	str	r3, [sp, #20]
    int16_t filter_width = 2 * swidth + 1;
 80127f2:	f8bd 6010 	ldrh.w	r6, [sp, #16]
    radius += aa;
 80127f6:	f9bd 3014 	ldrsh.w	r3, [sp, #20]
    uint32_t curve_x_size = ((radius + swidth + 1) + 3) & ~0x3; /*Round to 4*/
 80127fa:	9a04      	ldr	r2, [sp, #16]
    radius += aa;
 80127fc:	9309      	str	r3, [sp, #36]	; 0x24
    int16_t filter_width = 2 * swidth + 1;
 80127fe:	ea4f 0846 	mov.w	r8, r6, lsl #1
    uint32_t curve_x_size = ((radius + swidth + 1) + 3) & ~0x3; /*Round to 4*/
 8012802:	4413      	add	r3, r2
    int16_t filter_width = 2 * swidth + 1;
 8012804:	f108 0801 	add.w	r8, r8, #1
    uint32_t curve_x_size = ((radius + swidth + 1) + 3) & ~0x3; /*Round to 4*/
 8012808:	1d18      	adds	r0, r3, #4
    int16_t filter_width = 2 * swidth + 1;
 801280a:	fa0f f888 	sxth.w	r8, r8
    uint32_t curve_x_size = ((radius + swidth + 1) + 3) & ~0x3; /*Round to 4*/
 801280e:	f020 0003 	bic.w	r0, r0, #3
    uint32_t line_1d_blur_size = (filter_width + 3) & ~0x3;     /*Round to 4*/
 8012812:	f108 0703 	add.w	r7, r8, #3
    curve_x_size *= sizeof(lv_coord_t);
 8012816:	ea4f 0940 	mov.w	r9, r0, lsl #1
    uint32_t line_1d_blur_size = (filter_width + 3) & ~0x3;     /*Round to 4*/
 801281a:	f027 0703 	bic.w	r7, r7, #3
    uint8_t * draw_buf = lv_draw_get_buf(curve_x_size + line_1d_blur_size + line_2d_blur_size);
 801281e:	eb09 0787 	add.w	r7, r9, r7, lsl #2
 8012822:	4438      	add	r0, r7
    uint32_t curve_x_size = ((radius + swidth + 1) + 3) & ~0x3; /*Round to 4*/
 8012824:	930a      	str	r3, [sp, #40]	; 0x28
    uint8_t * draw_buf = lv_draw_get_buf(curve_x_size + line_1d_blur_size + line_2d_blur_size);
 8012826:	f7fe ff4b 	bl	80116c0 <lv_draw_get_buf>
    uint32_t * line_1d_blur = (uint32_t *)&draw_buf[curve_x_size];
 801282a:	4603      	mov	r3, r0
 801282c:	444b      	add	r3, r9
 801282e:	930b      	str	r3, [sp, #44]	; 0x2c
    lv_opa_t * line_2d_blur = (lv_opa_t *)&draw_buf[curve_x_size + line_1d_blur_size];
 8012830:	4603      	mov	r3, r0
 8012832:	443b      	add	r3, r7
    memset(curve_x, 0, curve_x_size);
 8012834:	4629      	mov	r1, r5
 8012836:	464a      	mov	r2, r9
    lv_circ_init(&circ, &circ_tmp, radius);
 8012838:	f10d 0772 	add.w	r7, sp, #114	; 0x72
 801283c:	ad1d      	add	r5, sp, #116	; 0x74
    uint8_t * draw_buf = lv_draw_get_buf(curve_x_size + line_1d_blur_size + line_2d_blur_size);
 801283e:	9003      	str	r0, [sp, #12]
    lv_opa_t * line_2d_blur = (lv_opa_t *)&draw_buf[curve_x_size + line_1d_blur_size];
 8012840:	930c      	str	r3, [sp, #48]	; 0x30
    memset(curve_x, 0, curve_x_size);
 8012842:	f008 fac4 	bl	801adce <memset>
    lv_circ_init(&circ, &circ_tmp, radius);
 8012846:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8012848:	4639      	mov	r1, r7
 801284a:	4628      	mov	r0, r5
 801284c:	f002 fdd3 	bl	80153f6 <lv_circ_init>
    while(lv_circ_cont(&circ)) {
 8012850:	4628      	mov	r0, r5
 8012852:	f002 fdd7 	bl	8015404 <lv_circ_cont>
 8012856:	2800      	cmp	r0, #0
 8012858:	d15a      	bne.n	8012910 <lv_draw_rect+0x208>
    lv_opa_t opa = opa_scale == LV_OPA_COVER ? style->body.opa : (uint16_t)((uint16_t)style->body.opa * opa_scale) >> 8;
 801285a:	9b08      	ldr	r3, [sp, #32]
 801285c:	2bff      	cmp	r3, #255	; 0xff
 801285e:	9b02      	ldr	r3, [sp, #8]
 8012860:	bf18      	it	ne
 8012862:	9a08      	ldrne	r2, [sp, #32]
 8012864:	7a1b      	ldrb	r3, [r3, #8]
 8012866:	bf1c      	itt	ne
 8012868:	4353      	mulne	r3, r2
 801286a:	f3c3 2307 	ubfxne	r3, r3, #8, #8
 801286e:	005b      	lsls	r3, r3, #1
 8012870:	ea4f 2208 	mov.w	r2, r8, lsl #8
 8012874:	f06f 01ff 	mvn.w	r1, #255	; 0xff
 8012878:	4359      	muls	r1, r3
                             (filter_width * filter_width);
 801287a:	fb08 f508 	mul.w	r5, r8, r8
 801287e:	4353      	muls	r3, r2
 8012880:	2200      	movs	r2, #0
    for(line = 0; line < filter_width; line++) {
 8012882:	b210      	sxth	r0, r2
 8012884:	4580      	cmp	r8, r0
 8012886:	dc55      	bgt.n	8012934 <lv_draw_rect+0x22c>
    ofs_rb.x = coords->x2 - radius - aa;
 8012888:	9a05      	ldr	r2, [sp, #20]
 801288a:	f8ba 3004 	ldrh.w	r3, [sl, #4]
 801288e:	1a9b      	subs	r3, r3, r2
 8012890:	1b1b      	subs	r3, r3, r4
 8012892:	b29b      	uxth	r3, r3
 8012894:	930e      	str	r3, [sp, #56]	; 0x38
 8012896:	f9bd 3038 	ldrsh.w	r3, [sp, #56]	; 0x38
 801289a:	9314      	str	r3, [sp, #80]	; 0x50
    ofs_rb.y = coords->y2 - radius - aa;
 801289c:	f8ba 3006 	ldrh.w	r3, [sl, #6]
 80128a0:	1a9b      	subs	r3, r3, r2
 80128a2:	1b1b      	subs	r3, r3, r4
 80128a4:	b29b      	uxth	r3, r3
 80128a6:	930f      	str	r3, [sp, #60]	; 0x3c
 80128a8:	f9bd 303c 	ldrsh.w	r3, [sp, #60]	; 0x3c
 80128ac:	9310      	str	r3, [sp, #64]	; 0x40
    ofs_rt.y = coords->y1 + radius + aa;
 80128ae:	f8ba 3002 	ldrh.w	r3, [sl, #2]
 80128b2:	4423      	add	r3, r4
 80128b4:	4413      	add	r3, r2
 80128b6:	b29b      	uxth	r3, r3
 80128b8:	9311      	str	r3, [sp, #68]	; 0x44
 80128ba:	f9bd 3044 	ldrsh.w	r3, [sp, #68]	; 0x44
 80128be:	9312      	str	r3, [sp, #72]	; 0x48
    ofs_lb.x = coords->x1 + radius + aa;
 80128c0:	f8ba 3000 	ldrh.w	r3, [sl]
 80128c4:	441c      	add	r4, r3
 80128c6:	4414      	add	r4, r2
 80128c8:	b2a3      	uxth	r3, r4
 80128ca:	9313      	str	r3, [sp, #76]	; 0x4c
 80128cc:	f9bd 304c 	ldrsh.w	r3, [sp, #76]	; 0x4c
 80128d0:	9315      	str	r3, [sp, #84]	; 0x54
            for(line_rel = -swidth; line_rel <= swidth; line_rel++) {
 80128d2:	4276      	negs	r6, r6
    ofs_lb.x = coords->x1 + radius + aa;
 80128d4:	2300      	movs	r3, #0
 80128d6:	9307      	str	r3, [sp, #28]
            for(line_rel = -swidth; line_rel <= swidth; line_rel++) {
 80128d8:	b233      	sxth	r3, r6
 80128da:	9318      	str	r3, [sp, #96]	; 0x60
 80128dc:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
 80128e0:	9306      	str	r3, [sp, #24]
    for(line = 0; line <= radius + swidth; line++) { /*Check all rows and make the 1D blur to 2D*/
 80128e2:	9a06      	ldr	r2, [sp, #24]
 80128e4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80128e6:	4293      	cmp	r3, r2
 80128e8:	f2c0 81fe 	blt.w	8012ce8 <lv_draw_rect+0x5e0>
                    col_rel = curve_x[line + line_rel] - curve_x[line] - col;
 80128ec:	9b03      	ldr	r3, [sp, #12]
 80128ee:	eb03 0542 	add.w	r5, r3, r2, lsl #1
                if(col_rel < -swidth) { /*Outside of the blurred area. */
 80128f2:	9b04      	ldr	r3, [sp, #16]
                    col_rel = curve_x[line + line_rel] - curve_x[line] - col;
 80128f4:	2000      	movs	r0, #0
                if(col_rel < -swidth) { /*Outside of the blurred area. */
 80128f6:	425c      	negs	r4, r3
        for(col = 0; col <= radius + swidth; col++) { /*Check all pixels in a 1D blur line (from the origo to last
 80128f8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80128fa:	fa1f f980 	uxth.w	r9, r0
 80128fe:	454a      	cmp	r2, r9
 8012900:	db3b      	blt.n	801297a <lv_draw_rect+0x272>
            for(line_rel = -swidth; line_rel <= swidth; line_rel++) {
 8012902:	9a18      	ldr	r2, [sp, #96]	; 0x60
            uint32_t px_opa_sum = 0;
 8012904:	2100      	movs	r1, #0
            for(line_rel = -swidth; line_rel <= swidth; line_rel++) {
 8012906:	9b04      	ldr	r3, [sp, #16]
 8012908:	4293      	cmp	r3, r2
 801290a:	da1b      	bge.n	8012944 <lv_draw_rect+0x23c>
                } else if(line + line_rel > radius) { /*Above the radius, here won't be more 1D blur*/
 801290c:	2200      	movs	r2, #0
 801290e:	e029      	b.n	8012964 <lv_draw_rect+0x25c>
        curve_x[LV_CIRC_OCT1_Y(circ)] = LV_CIRC_OCT1_X(circ);
 8012910:	f9bd 3076 	ldrsh.w	r3, [sp, #118]	; 0x76
 8012914:	9903      	ldr	r1, [sp, #12]
 8012916:	f9bd 2074 	ldrsh.w	r2, [sp, #116]	; 0x74
 801291a:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
        curve_x[LV_CIRC_OCT2_Y(circ)] = LV_CIRC_OCT2_X(circ);
 801291e:	f9bd 3074 	ldrsh.w	r3, [sp, #116]	; 0x74
 8012922:	f9bd 2076 	ldrsh.w	r2, [sp, #118]	; 0x76
 8012926:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
        lv_circ_next(&circ, &circ_tmp);
 801292a:	4628      	mov	r0, r5
 801292c:	4639      	mov	r1, r7
 801292e:	f002 fd72 	bl	8015416 <lv_circ_next>
 8012932:	e78d      	b.n	8012850 <lv_draw_rect+0x148>
        line_1d_blur[line] = (uint32_t)((uint32_t)(filter_width - line) * (opa * 2) << SHADOW_OPA_EXTRA_PRECISION) /
 8012934:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 8012936:	fbb3 f0f5 	udiv	r0, r3, r5
 801293a:	440b      	add	r3, r1
 801293c:	f847 0022 	str.w	r0, [r7, r2, lsl #2]
 8012940:	3201      	adds	r2, #1
 8012942:	e79e      	b.n	8012882 <lv_draw_rect+0x17a>
                if(line + line_rel < 0) { /*Below the radius, here is the blur of the edge */
 8012944:	9b06      	ldr	r3, [sp, #24]
 8012946:	18d3      	adds	r3, r2, r3
 8012948:	f140 80a9 	bpl.w	8012a9e <lv_draw_rect+0x396>
                    col_rel = radius - curve_x[line] - col;
 801294c:	882b      	ldrh	r3, [r5, #0]
 801294e:	9e05      	ldr	r6, [sp, #20]
 8012950:	1af3      	subs	r3, r6, r3
                    col_rel = curve_x[line + line_rel] - curve_x[line] - col;
 8012952:	eba3 0309 	sub.w	r3, r3, r9
 8012956:	b21b      	sxth	r3, r3
                if(col_rel < -swidth) { /*Outside of the blurred area. */
 8012958:	42a3      	cmp	r3, r4
 801295a:	f280 80aa 	bge.w	8012ab2 <lv_draw_rect+0x3aa>
                    if(line_rel == -swidth)
 801295e:	1b16      	subs	r6, r2, r4
 8012960:	4272      	negs	r2, r6
 8012962:	4172      	adcs	r2, r6
            line_2d_blur[col] = px_opa_sum >> SHADOW_OPA_EXTRA_PRECISION;
 8012964:	b283      	uxth	r3, r0
 8012966:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8012968:	0a09      	lsrs	r1, r1, #8
 801296a:	54f1      	strb	r1, [r6, r3]
 801296c:	3001      	adds	r0, #1
            if(line_ready) {
 801296e:	2a00      	cmp	r2, #0
 8012970:	d0c2      	beq.n	80128f8 <lv_draw_rect+0x1f0>
                col++; /*To make this line to the last one ( drawing will go to '< col')*/
 8012972:	f109 0301 	add.w	r3, r9, #1
 8012976:	fa1f f983 	uxth.w	r9, r3
        point_rt.x = curve_x[line] + ofs_rt.x + 1;
 801297a:	9b03      	ldr	r3, [sp, #12]
 801297c:	9a06      	ldr	r2, [sp, #24]
 801297e:	f8bd 401c 	ldrh.w	r4, [sp, #28]
 8012982:	f833 1012 	ldrh.w	r1, [r3, r2, lsl #1]
 8012986:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8012988:	1c5a      	adds	r2, r3, #1
 801298a:	440a      	add	r2, r1
 801298c:	b293      	uxth	r3, r2
 801298e:	9316      	str	r3, [sp, #88]	; 0x58
 8012990:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8012992:	1b1d      	subs	r5, r3, r4
 8012994:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8012996:	441c      	add	r4, r3
        point_lt.x = ofs_lt.x - curve_x[line] - 1;
 8012998:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801299a:	3b01      	subs	r3, #1
 801299c:	1a5b      	subs	r3, r3, r1
 801299e:	b29b      	uxth	r3, r3
 80129a0:	9317      	str	r3, [sp, #92]	; 0x5c
 80129a2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80129a4:	1c5e      	adds	r6, r3, #1
 80129a6:	2300      	movs	r3, #0
 80129a8:	b22d      	sxth	r5, r5
 80129aa:	b224      	sxth	r4, r4
 80129ac:	930d      	str	r3, [sp, #52]	; 0x34
 80129ae:	f8bd 3034 	ldrh.w	r3, [sp, #52]	; 0x34
 80129b2:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80129b4:	eba2 0803 	sub.w	r8, r2, r3
 80129b8:	9a16      	ldr	r2, [sp, #88]	; 0x58
 80129ba:	18d7      	adds	r7, r2, r3
        for(d = 1; d < col; d++) {
 80129bc:	3301      	adds	r3, #1
 80129be:	b29b      	uxth	r3, r3
 80129c0:	4599      	cmp	r9, r3
 80129c2:	fa0f f888 	sxth.w	r8, r8
 80129c6:	b23f      	sxth	r7, r7
 80129c8:	f200 8082 	bhi.w	8012ad0 <lv_draw_rect+0x3c8>
        if(line == 0) lv_draw_shadow_full_straight(coords, mask, style, line_2d_blur);
 80129cc:	9b06      	ldr	r3, [sp, #24]
 80129ce:	2b00      	cmp	r3, #0
 80129d0:	d161      	bne.n	8012a96 <lv_draw_rect+0x38e>
    bool aa           = lv_disp_get_antialiasing(lv_refr_get_disp_refreshing());
 80129d2:	f7fd ff69 	bl	80108a8 <lv_refr_get_disp_refreshing>
 80129d6:	f002 fac3 	bl	8014f60 <lv_disp_get_antialiasing>
    lv_coord_t swidth = style->body.shadow.width;
 80129da:	9b02      	ldr	r3, [sp, #8]
    return area_p->y2 - area_p->y1 + 1;
 80129dc:	f8ba 2006 	ldrh.w	r2, [sl, #6]
 80129e0:	f9b3 8012 	ldrsh.w	r8, [r3, #18]
 80129e4:	f8ba 3002 	ldrh.w	r3, [sl, #2]
    return area_p->x2 - area_p->x1 + 1;
 80129e8:	f8ba 1004 	ldrh.w	r1, [sl, #4]
    return area_p->y2 - area_p->y1 + 1;
 80129ec:	3201      	adds	r2, #1
 80129ee:	1ad2      	subs	r2, r2, r3
    return area_p->x2 - area_p->x1 + 1;
 80129f0:	f8ba 3000 	ldrh.w	r3, [sl]
 80129f4:	3101      	adds	r1, #1
 80129f6:	1ac9      	subs	r1, r1, r3
    radius = lv_draw_cont_radius_corr(radius, width, height);
 80129f8:	9b02      	ldr	r3, [sp, #8]
    bool aa           = lv_disp_get_antialiasing(lv_refr_get_disp_refreshing());
 80129fa:	4604      	mov	r4, r0
    radius = lv_draw_cont_radius_corr(radius, width, height);
 80129fc:	b212      	sxth	r2, r2
 80129fe:	b209      	sxth	r1, r1
 8012a00:	88d8      	ldrh	r0, [r3, #6]
 8012a02:	f7ff fe43 	bl	801268c <lv_draw_cont_radius_corr>
    right_area.x1 = coords->x2 + 1 - aa;
 8012a06:	f8ba 1004 	ldrh.w	r1, [sl, #4]
    right_area.y1 = coords->y1 + radius + aa;
 8012a0a:	f8ba 5002 	ldrh.w	r5, [sl, #2]
    radius += aa;
 8012a0e:	b2a3      	uxth	r3, r4
    right_area.x1 = coords->x2 + 1 - aa;
 8012a10:	1c4a      	adds	r2, r1, #1
 8012a12:	1ad2      	subs	r2, r2, r3
 8012a14:	b212      	sxth	r2, r2
    radius += aa;
 8012a16:	4418      	add	r0, r3
    left_area.x1 = coords->x1 - 1 + aa;
 8012a18:	f8ba 4000 	ldrh.w	r4, [sl]
    right_area.x1 = coords->x2 + 1 - aa;
 8012a1c:	f8ad 2080 	strh.w	r2, [sp, #128]	; 0x80
    right_area.x2 = right_area.x1;
 8012a20:	f8ad 2084 	strh.w	r2, [sp, #132]	; 0x84
    right_area.y2 = coords->y2 - radius - aa;
 8012a24:	f8ba 2006 	ldrh.w	r2, [sl, #6]
    radius += aa;
 8012a28:	b280      	uxth	r0, r0
    right_area.y1 = coords->y1 + radius + aa;
 8012a2a:	eb03 0e05 	add.w	lr, r3, r5
    right_area.y2 = coords->y2 - radius - aa;
 8012a2e:	1a16      	subs	r6, r2, r0
    left_area.x1 = coords->x1 - 1 + aa;
 8012a30:	1e67      	subs	r7, r4, #1
    top_area.y1 = coords->y1 - 1 + aa;
 8012a32:	3d01      	subs	r5, #1
    top_area.x1 = coords->x1 + radius + aa;
 8012a34:	441c      	add	r4, r3
    top_area.x2 = coords->x2 - radius - aa;
 8012a36:	1a09      	subs	r1, r1, r0
    bottom_area.y1 = coords->y2 + 1 - aa;
 8012a38:	3201      	adds	r2, #1
    right_area.y2 = coords->y2 - radius - aa;
 8012a3a:	1af6      	subs	r6, r6, r3
    left_area.x1 = coords->x1 - 1 + aa;
 8012a3c:	441f      	add	r7, r3
    top_area.y1 = coords->y1 - 1 + aa;
 8012a3e:	441d      	add	r5, r3
    top_area.x2 = coords->x2 - radius - aa;
 8012a40:	1ac9      	subs	r1, r1, r3
    right_area.y1 = coords->y1 + radius + aa;
 8012a42:	4486      	add	lr, r0
    top_area.x1 = coords->x1 + radius + aa;
 8012a44:	4404      	add	r4, r0
    bottom_area.y1 = coords->y2 + 1 - aa;
 8012a46:	1ad3      	subs	r3, r2, r3
    top_area.x1 = coords->x1 + radius + aa;
 8012a48:	b224      	sxth	r4, r4
    right_area.y1 = coords->y1 + radius + aa;
 8012a4a:	fa0f fe8e 	sxth.w	lr, lr
    right_area.y2 = coords->y2 - radius - aa;
 8012a4e:	b236      	sxth	r6, r6
    left_area.x1 = coords->x1 - 1 + aa;
 8012a50:	b23f      	sxth	r7, r7
    top_area.y1 = coords->y1 - 1 + aa;
 8012a52:	b22d      	sxth	r5, r5
    top_area.x2 = coords->x2 - radius - aa;
 8012a54:	b209      	sxth	r1, r1
    bottom_area.y1 = coords->y2 + 1 - aa;
 8012a56:	b21b      	sxth	r3, r3
    top_area.x1 = coords->x1 + radius + aa;
 8012a58:	f8ad 4090 	strh.w	r4, [sp, #144]	; 0x90
    bottom_area.x1 = coords->x1 + radius + aa;
 8012a5c:	f8ad 4098 	strh.w	r4, [sp, #152]	; 0x98
    right_area.y1 = coords->y1 + radius + aa;
 8012a60:	f8ad e082 	strh.w	lr, [sp, #130]	; 0x82
    right_area.y2 = coords->y2 - radius - aa;
 8012a64:	f8ad 6086 	strh.w	r6, [sp, #134]	; 0x86
    left_area.x1 = coords->x1 - 1 + aa;
 8012a68:	f8ad 7088 	strh.w	r7, [sp, #136]	; 0x88
    left_area.y1 = coords->y1 + radius + aa;
 8012a6c:	f8ad e08a 	strh.w	lr, [sp, #138]	; 0x8a
    left_area.x2 = left_area.x1;
 8012a70:	f8ad 708c 	strh.w	r7, [sp, #140]	; 0x8c
    left_area.y2 = coords->y2 - radius - aa;
 8012a74:	f8ad 608e 	strh.w	r6, [sp, #142]	; 0x8e
    top_area.y1 = coords->y1 - 1 + aa;
 8012a78:	f8ad 5092 	strh.w	r5, [sp, #146]	; 0x92
    top_area.x2 = coords->x2 - radius - aa;
 8012a7c:	f8ad 1094 	strh.w	r1, [sp, #148]	; 0x94
    top_area.y2 = top_area.y1;
 8012a80:	f8ad 5096 	strh.w	r5, [sp, #150]	; 0x96
    bottom_area.y1 = coords->y2 + 1 - aa;
 8012a84:	f8ad 309a 	strh.w	r3, [sp, #154]	; 0x9a
    bottom_area.x2 = coords->x2 - radius - aa;
 8012a88:	f8ad 109c 	strh.w	r1, [sp, #156]	; 0x9c
    bottom_area.y2 = bottom_area.y1;
 8012a8c:	f8ad 309e 	strh.w	r3, [sp, #158]	; 0x9e
    for(d = 1 /*+ LV_ANTIALIAS*/; d <= swidth /* - LV_ANTIALIAS*/; d++) {
 8012a90:	2401      	movs	r4, #1
 8012a92:	45a0      	cmp	r8, r4
 8012a94:	da57      	bge.n	8012b46 <lv_draw_rect+0x43e>
 8012a96:	9b07      	ldr	r3, [sp, #28]
 8012a98:	3301      	adds	r3, #1
 8012a9a:	9307      	str	r3, [sp, #28]
 8012a9c:	e71e      	b.n	80128dc <lv_draw_rect+0x1d4>
                } else if(line + line_rel > radius) { /*Above the radius, here won't be more 1D blur*/
 8012a9e:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8012aa0:	429e      	cmp	r6, r3
 8012aa2:	f6ff af33 	blt.w	801290c <lv_draw_rect+0x204>
                    col_rel = curve_x[line + line_rel] - curve_x[line] - col;
 8012aa6:	9e03      	ldr	r6, [sp, #12]
 8012aa8:	f836 3013 	ldrh.w	r3, [r6, r3, lsl #1]
 8012aac:	882e      	ldrh	r6, [r5, #0]
 8012aae:	1b9b      	subs	r3, r3, r6
 8012ab0:	e74f      	b.n	8012952 <lv_draw_rect+0x24a>
                } else if(col_rel > swidth)
 8012ab2:	9e04      	ldr	r6, [sp, #16]
 8012ab4:	429e      	cmp	r6, r3
                    px_opa_sum += line_1d_blur[swidth - col_rel]; /*On the 1D blur (+ swidth to align to the center)*/
 8012ab6:	bfa9      	itett	ge
 8012ab8:	9e04      	ldrge	r6, [sp, #16]
                    px_opa_sum += line_1d_blur[0]; /*Inside the not blurred area*/
 8012aba:	9b0b      	ldrlt	r3, [sp, #44]	; 0x2c
                    px_opa_sum += line_1d_blur[swidth - col_rel]; /*On the 1D blur (+ swidth to align to the center)*/
 8012abc:	1af3      	subge	r3, r6, r3
 8012abe:	9e0b      	ldrge	r6, [sp, #44]	; 0x2c
                    px_opa_sum += line_1d_blur[0]; /*Inside the not blurred area*/
 8012ac0:	bfb4      	ite	lt
 8012ac2:	681b      	ldrlt	r3, [r3, #0]
                    px_opa_sum += line_1d_blur[swidth - col_rel]; /*On the 1D blur (+ swidth to align to the center)*/
 8012ac4:	f856 3023 	ldrge.w	r3, [r6, r3, lsl #2]
 8012ac8:	3201      	adds	r2, #1
 8012aca:	4419      	add	r1, r3
 8012acc:	b212      	sxth	r2, r2
 8012ace:	e71a      	b.n	8012906 <lv_draw_rect+0x1fe>
            if(point_lt.x < ofs_lt.x && point_lt.y < ofs_lt.y) {
 8012ad0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8012ad2:	4543      	cmp	r3, r8
 8012ad4:	dd17      	ble.n	8012b06 <lv_draw_rect+0x3fe>
 8012ad6:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8012ad8:	42ab      	cmp	r3, r5
 8012ada:	dd08      	ble.n	8012aee <lv_draw_rect+0x3e6>
                lv_draw_px(point_lt.x, point_lt.y, mask, style->body.shadow.color, line_2d_blur[d]);
 8012adc:	7833      	ldrb	r3, [r6, #0]
 8012ade:	9300      	str	r3, [sp, #0]
 8012ae0:	9b02      	ldr	r3, [sp, #8]
 8012ae2:	465a      	mov	r2, fp
 8012ae4:	8a1b      	ldrh	r3, [r3, #16]
 8012ae6:	4629      	mov	r1, r5
 8012ae8:	4640      	mov	r0, r8
 8012aea:	f7fe fe59 	bl	80117a0 <lv_draw_px>
            if(point_lb.x < ofs_lb.x && point_lb.y > ofs_lb.y) {
 8012aee:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8012af0:	42a3      	cmp	r3, r4
 8012af2:	da08      	bge.n	8012b06 <lv_draw_rect+0x3fe>
                lv_draw_px(point_lb.x, point_lb.y, mask, style->body.shadow.color, line_2d_blur[d]);
 8012af4:	7833      	ldrb	r3, [r6, #0]
 8012af6:	9300      	str	r3, [sp, #0]
 8012af8:	9b02      	ldr	r3, [sp, #8]
 8012afa:	465a      	mov	r2, fp
 8012afc:	8a1b      	ldrh	r3, [r3, #16]
 8012afe:	4621      	mov	r1, r4
 8012b00:	4640      	mov	r0, r8
 8012b02:	f7fe fe4d 	bl	80117a0 <lv_draw_px>
            if(point_rt.x > ofs_rt.x && point_rt.y < ofs_rt.y) {
 8012b06:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8012b08:	42bb      	cmp	r3, r7
 8012b0a:	da17      	bge.n	8012b3c <lv_draw_rect+0x434>
 8012b0c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8012b0e:	42ab      	cmp	r3, r5
 8012b10:	dd08      	ble.n	8012b24 <lv_draw_rect+0x41c>
                lv_draw_px(point_rt.x, point_rt.y, mask, style->body.shadow.color, line_2d_blur[d]);
 8012b12:	7833      	ldrb	r3, [r6, #0]
 8012b14:	9300      	str	r3, [sp, #0]
 8012b16:	9b02      	ldr	r3, [sp, #8]
 8012b18:	465a      	mov	r2, fp
 8012b1a:	8a1b      	ldrh	r3, [r3, #16]
 8012b1c:	4629      	mov	r1, r5
 8012b1e:	4638      	mov	r0, r7
 8012b20:	f7fe fe3e 	bl	80117a0 <lv_draw_px>
            if(point_rb.x > ofs_rb.x && point_rb.y > ofs_rb.y) {
 8012b24:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8012b26:	42a3      	cmp	r3, r4
 8012b28:	da08      	bge.n	8012b3c <lv_draw_rect+0x434>
                lv_draw_px(point_rb.x, point_rb.y, mask, style->body.shadow.color, line_2d_blur[d]);
 8012b2a:	7833      	ldrb	r3, [r6, #0]
 8012b2c:	9300      	str	r3, [sp, #0]
 8012b2e:	9b02      	ldr	r3, [sp, #8]
 8012b30:	465a      	mov	r2, fp
 8012b32:	8a1b      	ldrh	r3, [r3, #16]
 8012b34:	4621      	mov	r1, r4
 8012b36:	4638      	mov	r0, r7
 8012b38:	f7fe fe32 	bl	80117a0 <lv_draw_px>
 8012b3c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8012b3e:	3301      	adds	r3, #1
 8012b40:	930d      	str	r3, [sp, #52]	; 0x34
 8012b42:	3601      	adds	r6, #1
 8012b44:	e733      	b.n	80129ae <lv_draw_rect+0x2a6>
        opa_act = map[d];
 8012b46:	9b0c      	ldr	r3, [sp, #48]	; 0x30
        lv_draw_fill(&right_area, mask, style->body.shadow.color, opa_act);
 8012b48:	9a02      	ldr	r2, [sp, #8]
        opa_act = map[d];
 8012b4a:	5d1d      	ldrb	r5, [r3, r4]
        lv_draw_fill(&right_area, mask, style->body.shadow.color, opa_act);
 8012b4c:	8a12      	ldrh	r2, [r2, #16]
 8012b4e:	462b      	mov	r3, r5
 8012b50:	4659      	mov	r1, fp
 8012b52:	a820      	add	r0, sp, #128	; 0x80
 8012b54:	f7fe fe73 	bl	801183e <lv_draw_fill>
        right_area.x1++;
 8012b58:	f8bd 3080 	ldrh.w	r3, [sp, #128]	; 0x80
        lv_draw_fill(&left_area, mask, style->body.shadow.color, opa_act);
 8012b5c:	9a02      	ldr	r2, [sp, #8]
        right_area.x1++;
 8012b5e:	3301      	adds	r3, #1
 8012b60:	f8ad 3080 	strh.w	r3, [sp, #128]	; 0x80
        right_area.x2++;
 8012b64:	f8bd 3084 	ldrh.w	r3, [sp, #132]	; 0x84
        lv_draw_fill(&left_area, mask, style->body.shadow.color, opa_act);
 8012b68:	8a12      	ldrh	r2, [r2, #16]
        right_area.x2++;
 8012b6a:	3301      	adds	r3, #1
 8012b6c:	f8ad 3084 	strh.w	r3, [sp, #132]	; 0x84
        lv_draw_fill(&left_area, mask, style->body.shadow.color, opa_act);
 8012b70:	4659      	mov	r1, fp
 8012b72:	462b      	mov	r3, r5
 8012b74:	a822      	add	r0, sp, #136	; 0x88
 8012b76:	f7fe fe62 	bl	801183e <lv_draw_fill>
        left_area.x1--;
 8012b7a:	f8bd 3088 	ldrh.w	r3, [sp, #136]	; 0x88
        lv_draw_fill(&top_area, mask, style->body.shadow.color, opa_act);
 8012b7e:	9a02      	ldr	r2, [sp, #8]
        left_area.x1--;
 8012b80:	3b01      	subs	r3, #1
 8012b82:	f8ad 3088 	strh.w	r3, [sp, #136]	; 0x88
        left_area.x2--;
 8012b86:	f8bd 308c 	ldrh.w	r3, [sp, #140]	; 0x8c
        lv_draw_fill(&top_area, mask, style->body.shadow.color, opa_act);
 8012b8a:	8a12      	ldrh	r2, [r2, #16]
        left_area.x2--;
 8012b8c:	3b01      	subs	r3, #1
 8012b8e:	f8ad 308c 	strh.w	r3, [sp, #140]	; 0x8c
        lv_draw_fill(&top_area, mask, style->body.shadow.color, opa_act);
 8012b92:	4659      	mov	r1, fp
 8012b94:	462b      	mov	r3, r5
 8012b96:	a824      	add	r0, sp, #144	; 0x90
 8012b98:	f7fe fe51 	bl	801183e <lv_draw_fill>
        top_area.y1--;
 8012b9c:	f8bd 3092 	ldrh.w	r3, [sp, #146]	; 0x92
        lv_draw_fill(&bottom_area, mask, style->body.shadow.color, opa_act);
 8012ba0:	9a02      	ldr	r2, [sp, #8]
        top_area.y1--;
 8012ba2:	3b01      	subs	r3, #1
 8012ba4:	f8ad 3092 	strh.w	r3, [sp, #146]	; 0x92
        top_area.y2--;
 8012ba8:	f8bd 3096 	ldrh.w	r3, [sp, #150]	; 0x96
        lv_draw_fill(&bottom_area, mask, style->body.shadow.color, opa_act);
 8012bac:	8a12      	ldrh	r2, [r2, #16]
        top_area.y2--;
 8012bae:	3b01      	subs	r3, #1
 8012bb0:	f8ad 3096 	strh.w	r3, [sp, #150]	; 0x96
        lv_draw_fill(&bottom_area, mask, style->body.shadow.color, opa_act);
 8012bb4:	4659      	mov	r1, fp
 8012bb6:	462b      	mov	r3, r5
 8012bb8:	a826      	add	r0, sp, #152	; 0x98
 8012bba:	f7fe fe40 	bl	801183e <lv_draw_fill>
        bottom_area.y1++;
 8012bbe:	f8bd 309a 	ldrh.w	r3, [sp, #154]	; 0x9a
 8012bc2:	3301      	adds	r3, #1
 8012bc4:	f8ad 309a 	strh.w	r3, [sp, #154]	; 0x9a
        bottom_area.y2++;
 8012bc8:	f8bd 309e 	ldrh.w	r3, [sp, #158]	; 0x9e
 8012bcc:	3401      	adds	r4, #1
 8012bce:	3301      	adds	r3, #1
 8012bd0:	f8ad 309e 	strh.w	r3, [sp, #158]	; 0x9e
 8012bd4:	b224      	sxth	r4, r4
 8012bd6:	e75c      	b.n	8012a92 <lv_draw_rect+0x38a>
    } else if(style->body.shadow.type == LV_SHADOW_BOTTOM) {
 8012bd8:	2b00      	cmp	r3, #0
 8012bda:	f040 8085 	bne.w	8012ce8 <lv_draw_rect+0x5e0>
    bool aa           = lv_disp_get_antialiasing(lv_refr_get_disp_refreshing());
 8012bde:	f7fd fe63 	bl	80108a8 <lv_refr_get_disp_refreshing>
 8012be2:	f002 f9bd 	bl	8014f60 <lv_disp_get_antialiasing>
    lv_coord_t swidth = style->body.shadow.width;
 8012be6:	9b02      	ldr	r3, [sp, #8]
    return area_p->y2 - area_p->y1 + 1;
 8012be8:	f8ba 2006 	ldrh.w	r2, [sl, #6]
 8012bec:	f9b3 4012 	ldrsh.w	r4, [r3, #18]
 8012bf0:	f8ba 3002 	ldrh.w	r3, [sl, #2]
    return area_p->x2 - area_p->x1 + 1;
 8012bf4:	f8ba 1004 	ldrh.w	r1, [sl, #4]
    return area_p->y2 - area_p->y1 + 1;
 8012bf8:	3201      	adds	r2, #1
 8012bfa:	1ad2      	subs	r2, r2, r3
    return area_p->x2 - area_p->x1 + 1;
 8012bfc:	f8ba 3000 	ldrh.w	r3, [sl]
 8012c00:	3101      	adds	r1, #1
 8012c02:	1ac9      	subs	r1, r1, r3
    radius = lv_draw_cont_radius_corr(radius, width, height);
 8012c04:	9b02      	ldr	r3, [sp, #8]
 8012c06:	b212      	sxth	r2, r2
 8012c08:	b209      	sxth	r1, r1
    bool aa           = lv_disp_get_antialiasing(lv_refr_get_disp_refreshing());
 8012c0a:	4680      	mov	r8, r0
    radius = lv_draw_cont_radius_corr(radius, width, height);
 8012c0c:	88d8      	ldrh	r0, [r3, #6]
 8012c0e:	f7ff fd3d 	bl	801268c <lv_draw_cont_radius_corr>
    radius += aa * SHADOW_BOTTOM_AA_EXTRA_RADIUS;
 8012c12:	fa1f f888 	uxth.w	r8, r8
 8012c16:	eb08 0548 	add.w	r5, r8, r8, lsl #1
 8012c1a:	4405      	add	r5, r0
 8012c1c:	b2ad      	uxth	r5, r5
 8012c1e:	b22b      	sxth	r3, r5
    swidth += aa;
 8012c20:	eb08 0004 	add.w	r0, r8, r4
 8012c24:	b280      	uxth	r0, r0
    uint32_t curve_x_size = ((radius + 1) + 3) & ~0x3; /*Round to 4*/
 8012c26:	1d1c      	adds	r4, r3, #4
    swidth += aa;
 8012c28:	b206      	sxth	r6, r0
    uint32_t curve_x_size = ((radius + 1) + 3) & ~0x3; /*Round to 4*/
 8012c2a:	f024 0403 	bic.w	r4, r4, #3
    lv_opa_t line_1d_blur_size = (swidth + 3) & ~0x3;     /*Round to 4*/
 8012c2e:	3003      	adds	r0, #3
    curve_x_size *= sizeof(lv_coord_t);
 8012c30:	0064      	lsls	r4, r4, #1
    uint8_t * draw_buf = lv_draw_get_buf(curve_x_size + line_1d_blur_size);
 8012c32:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
 8012c36:	4420      	add	r0, r4
    radius += aa * SHADOW_BOTTOM_AA_EXTRA_RADIUS;
 8012c38:	9303      	str	r3, [sp, #12]
    uint8_t * draw_buf = lv_draw_get_buf(curve_x_size + line_1d_blur_size);
 8012c3a:	f7fe fd41 	bl	80116c0 <lv_draw_get_buf>
    lv_circ_init(&circ, &circ_tmp, radius);
 8012c3e:	f10d 0990 	add.w	r9, sp, #144	; 0x90
    uint8_t * draw_buf = lv_draw_get_buf(curve_x_size + line_1d_blur_size);
 8012c42:	4607      	mov	r7, r0
    lv_opa_t * line_1d_blur = (lv_opa_t *)&draw_buf[curve_x_size];
 8012c44:	4404      	add	r4, r0
    lv_circ_init(&circ, &circ_tmp, radius);
 8012c46:	9a03      	ldr	r2, [sp, #12]
 8012c48:	a922      	add	r1, sp, #136	; 0x88
 8012c4a:	4648      	mov	r0, r9
 8012c4c:	f002 fbd3 	bl	80153f6 <lv_circ_init>
    while(lv_circ_cont(&circ)) {
 8012c50:	4648      	mov	r0, r9
 8012c52:	f002 fbd7 	bl	8015404 <lv_circ_cont>
 8012c56:	2800      	cmp	r0, #0
 8012c58:	f040 8404 	bne.w	8013464 <lv_draw_rect+0xd5c>
    lv_opa_t opa = opa_scale == LV_OPA_COVER ? style->body.opa : (uint16_t)((uint16_t)style->body.opa * opa_scale) >> 8;
 8012c5c:	9b08      	ldr	r3, [sp, #32]
 8012c5e:	2bff      	cmp	r3, #255	; 0xff
 8012c60:	9b02      	ldr	r3, [sp, #8]
 8012c62:	bf18      	it	ne
 8012c64:	9a08      	ldrne	r2, [sp, #32]
 8012c66:	7a1b      	ldrb	r3, [r3, #8]
 8012c68:	bf1c      	itt	ne
 8012c6a:	4353      	mulne	r3, r2
 8012c6c:	f3c3 2307 	ubfxne	r3, r3, #8, #8
 8012c70:	fb13 f006 	smulbb	r0, r3, r6
    ofs_lb.x = coords->x1 + radius + aa;
 8012c74:	4621      	mov	r1, r4
    for(col = 0; col < swidth; col++) {
 8012c76:	1b0a      	subs	r2, r1, r4
 8012c78:	b212      	sxth	r2, r2
 8012c7a:	4296      	cmp	r6, r2
 8012c7c:	f300 8404 	bgt.w	8013488 <lv_draw_rect+0xd80>
    ofs_l.x = coords->x1 + radius;
 8012c80:	f8ba 3000 	ldrh.w	r3, [sl]
    ofs_r.x = coords->x2 - radius;
 8012c84:	f8ba 0004 	ldrh.w	r0, [sl, #4]
    ofs_l.x = coords->x1 + radius;
 8012c88:	442b      	add	r3, r5
 8012c8a:	b29b      	uxth	r3, r3
 8012c8c:	9304      	str	r3, [sp, #16]
 8012c8e:	f9bd 3010 	ldrsh.w	r3, [sp, #16]
 8012c92:	930b      	str	r3, [sp, #44]	; 0x2c
 8012c94:	f8ba 3006 	ldrh.w	r3, [sl, #6]
 8012c98:	3301      	adds	r3, #1
 8012c9a:	eba3 0808 	sub.w	r8, r3, r8
 8012c9e:	fa1f f388 	uxth.w	r3, r8
 8012ca2:	9305      	str	r3, [sp, #20]
    ofs_l.y = coords->y2 - radius + 1 - aa;
 8012ca4:	1b5b      	subs	r3, r3, r5
 8012ca6:	b29b      	uxth	r3, r3
    ofs_r.x = coords->x2 - radius;
 8012ca8:	1b45      	subs	r5, r0, r5
    ofs_l.y = coords->y2 - radius + 1 - aa;
 8012caa:	930c      	str	r3, [sp, #48]	; 0x30
    ofs_r.x = coords->x2 - radius;
 8012cac:	b2ab      	uxth	r3, r5
 8012cae:	9306      	str	r3, [sp, #24]
 8012cb0:	f04f 0800 	mov.w	r8, #0
    for(col = 0; col <= radius; col++) {
 8012cb4:	9a03      	ldr	r2, [sp, #12]
 8012cb6:	fa0f f388 	sxth.w	r3, r8
 8012cba:	429a      	cmp	r2, r3
 8012cbc:	f280 83ec 	bge.w	8013498 <lv_draw_rect+0xd90>
    area_mid.x1 = ofs_l.x + 1;
 8012cc0:	9b04      	ldr	r3, [sp, #16]
    area_mid.y1 = ofs_l.y + radius;
 8012cc2:	f9bd 8014 	ldrsh.w	r8, [sp, #20]
 8012cc6:	f8ad 809a 	strh.w	r8, [sp, #154]	; 0x9a
    area_mid.x1 = ofs_l.x + 1;
 8012cca:	3301      	adds	r3, #1
 8012ccc:	f8ad 3098 	strh.w	r3, [sp, #152]	; 0x98
    area_mid.x2 = ofs_r.x - 1;
 8012cd0:	9b06      	ldr	r3, [sp, #24]
    area_mid.y2 = area_mid.y1;
 8012cd2:	f8ad 809e 	strh.w	r8, [sp, #158]	; 0x9e
    area_mid.x2 = ofs_r.x - 1;
 8012cd6:	1e5d      	subs	r5, r3, #1
 8012cd8:	f8ad 509c 	strh.w	r5, [sp, #156]	; 0x9c
    area_mid.y2 = area_mid.y1;
 8012cdc:	2300      	movs	r3, #0
 8012cde:	1c5d      	adds	r5, r3, #1
    for(d = 0; d < swidth; d++) {
 8012ce0:	b29b      	uxth	r3, r3
 8012ce2:	42b3      	cmp	r3, r6
 8012ce4:	f2c0 8420 	blt.w	8013528 <lv_draw_rect+0xe20>
    if(lv_area_is_on(coords, mask) == false) return;
 8012ce8:	4659      	mov	r1, fp
 8012cea:	4650      	mov	r0, sl
 8012cec:	f002 fb49 	bl	8015382 <lv_area_is_on>
 8012cf0:	2800      	cmp	r0, #0
 8012cf2:	f000 83b4 	beq.w	801345e <lv_draw_rect+0xd56>
    if(style->body.opa > LV_OPA_MIN) {
 8012cf6:	9b02      	ldr	r3, [sp, #8]
 8012cf8:	7a1b      	ldrb	r3, [r3, #8]
 8012cfa:	2b10      	cmp	r3, #16
 8012cfc:	f240 81e9 	bls.w	80130d2 <lv_draw_rect+0x9ca>
    uint16_t radius = style->body.radius;
 8012d00:	9b02      	ldr	r3, [sp, #8]
 8012d02:	88dd      	ldrh	r5, [r3, #6]
    bool aa         = lv_disp_get_antialiasing(lv_refr_get_disp_refreshing());
 8012d04:	f7fd fdd0 	bl	80108a8 <lv_refr_get_disp_refreshing>
 8012d08:	f002 f92a 	bl	8014f60 <lv_disp_get_antialiasing>
    lv_color_t mcolor = style->body.main_color;
 8012d0c:	9b02      	ldr	r3, [sp, #8]
    return area_p->y2 - area_p->y1 + 1;
 8012d0e:	f8ba 6006 	ldrh.w	r6, [sl, #6]
 8012d12:	f8b3 8002 	ldrh.w	r8, [r3, #2]
    lv_color_t gcolor = style->body.grad_color;
 8012d16:	f8b3 9004 	ldrh.w	r9, [r3, #4]
 8012d1a:	f8ba 3002 	ldrh.w	r3, [sl, #2]
    return area_p->x2 - area_p->x1 + 1;
 8012d1e:	f8ba 1004 	ldrh.w	r1, [sl, #4]
    return area_p->y2 - area_p->y1 + 1;
 8012d22:	3601      	adds	r6, #1
 8012d24:	1af6      	subs	r6, r6, r3
    return area_p->x2 - area_p->x1 + 1;
 8012d26:	f8ba 3000 	ldrh.w	r3, [sl]
 8012d2a:	3101      	adds	r1, #1
 8012d2c:	1ac9      	subs	r1, r1, r3
    lv_opa_t opa = opa_scale == LV_OPA_COVER ? style->body.opa : (uint16_t)((uint16_t)style->body.opa * opa_scale) >> 8;
 8012d2e:	9b08      	ldr	r3, [sp, #32]
 8012d30:	2bff      	cmp	r3, #255	; 0xff
 8012d32:	9b02      	ldr	r3, [sp, #8]
 8012d34:	7a1f      	ldrb	r7, [r3, #8]
 8012d36:	bf18      	it	ne
 8012d38:	9b08      	ldrne	r3, [sp, #32]
    return area_p->y2 - area_p->y1 + 1;
 8012d3a:	b236      	sxth	r6, r6
 8012d3c:	bf18      	it	ne
 8012d3e:	435f      	mulne	r7, r3
    bool aa         = lv_disp_get_antialiasing(lv_refr_get_disp_refreshing());
 8012d40:	4604      	mov	r4, r0
    return area_p->x2 - area_p->x1 + 1;
 8012d42:	b209      	sxth	r1, r1
    radius = lv_draw_cont_radius_corr(radius, width, height);
 8012d44:	4632      	mov	r2, r6
 8012d46:	4628      	mov	r0, r5
    lv_opa_t opa = opa_scale == LV_OPA_COVER ? style->body.opa : (uint16_t)((uint16_t)style->body.opa * opa_scale) >> 8;
 8012d48:	bf18      	it	ne
 8012d4a:	f3c7 2707 	ubfxne	r7, r7, #8, #8
    radius = lv_draw_cont_radius_corr(radius, width, height);
 8012d4e:	f7ff fc9d 	bl	801268c <lv_draw_cont_radius_corr>
    if(radius > height / 2) return;
 8012d52:	2302      	movs	r3, #2
 8012d54:	fb96 f3f3 	sdiv	r3, r6, r3
 8012d58:	4298      	cmp	r0, r3
 8012d5a:	dc29      	bgt.n	8012db0 <lv_draw_rect+0x6a8>
    work_area.x1 = coords->x1;
 8012d5c:	f8ba 3000 	ldrh.w	r3, [sl]
 8012d60:	f8ad 3098 	strh.w	r3, [sp, #152]	; 0x98
    work_area.x2 = coords->x2;
 8012d64:	f8ba 3004 	ldrh.w	r3, [sl, #4]
 8012d68:	f8ad 309c 	strh.w	r3, [sp, #156]	; 0x9c
 8012d6c:	f8ba 3002 	ldrh.w	r3, [sl, #2]
 8012d70:	f8ba 5006 	ldrh.w	r5, [sl, #6]
        work_area.y1 = coords->y1 + radius;
 8012d74:	4403      	add	r3, r0
    if(mcolor.full == gcolor.full) {
 8012d76:	45c8      	cmp	r8, r9
        work_area.y1 = coords->y1 + radius;
 8012d78:	b29b      	uxth	r3, r3
    if(mcolor.full == gcolor.full) {
 8012d7a:	f040 83ee 	bne.w	801355a <lv_draw_rect+0xe52>
        if(style->body.radius != 0) {
 8012d7e:	9a02      	ldr	r2, [sp, #8]
        work_area.y1 = coords->y1 + radius;
 8012d80:	f8ad 309a 	strh.w	r3, [sp, #154]	; 0x9a
        work_area.y2 = coords->y2 - radius;
 8012d84:	1a2d      	subs	r5, r5, r0
        if(style->body.radius != 0) {
 8012d86:	f9b2 2006 	ldrsh.w	r2, [r2, #6]
        work_area.y2 = coords->y2 - radius;
 8012d8a:	b2ad      	uxth	r5, r5
 8012d8c:	f8ad 509e 	strh.w	r5, [sp, #158]	; 0x9e
        if(style->body.radius != 0) {
 8012d90:	b142      	cbz	r2, 8012da4 <lv_draw_rect+0x69c>
            if(aa) {
 8012d92:	2c00      	cmp	r4, #0
 8012d94:	f000 83dc 	beq.w	8013550 <lv_draw_rect+0xe48>
                work_area.y1 += 2;
 8012d98:	3302      	adds	r3, #2
 8012d9a:	f8ad 309a 	strh.w	r3, [sp, #154]	; 0x9a
                work_area.y2 -= 2;
 8012d9e:	3d02      	subs	r5, #2
                work_area.y2 -= 1;
 8012da0:	f8ad 509e 	strh.w	r5, [sp, #158]	; 0x9e
        lv_draw_fill(&work_area, mask, mcolor, opa);
 8012da4:	463b      	mov	r3, r7
 8012da6:	4642      	mov	r2, r8
 8012da8:	4659      	mov	r1, fp
 8012daa:	a826      	add	r0, sp, #152	; 0x98
 8012dac:	f7fe fd47 	bl	801183e <lv_draw_fill>
        if(style->body.radius != 0) {
 8012db0:	9b02      	ldr	r3, [sp, #8]
 8012db2:	f9b3 4006 	ldrsh.w	r4, [r3, #6]
 8012db6:	2c00      	cmp	r4, #0
 8012db8:	f000 818b 	beq.w	80130d2 <lv_draw_rect+0x9ca>
    bool aa         = lv_disp_get_antialiasing(lv_refr_get_disp_refreshing());
 8012dbc:	f7fd fd74 	bl	80108a8 <lv_refr_get_disp_refreshing>
 8012dc0:	f002 f8ce 	bl	8014f60 <lv_disp_get_antialiasing>
    lv_color_t mcolor = style->body.main_color;
 8012dc4:	9b02      	ldr	r3, [sp, #8]
    return area_p->y2 - area_p->y1 + 1;
 8012dc6:	f8ba 2002 	ldrh.w	r2, [sl, #2]
 8012dca:	885b      	ldrh	r3, [r3, #2]
 8012dcc:	9303      	str	r3, [sp, #12]
    lv_color_t gcolor = style->body.grad_color;
 8012dce:	9b02      	ldr	r3, [sp, #8]
    return area_p->x2 - area_p->x1 + 1;
 8012dd0:	f8ba 1004 	ldrh.w	r1, [sl, #4]
 8012dd4:	f8b3 9004 	ldrh.w	r9, [r3, #4]
    lv_opa_t opa = opa_scale == LV_OPA_COVER ? style->body.opa : (uint16_t)((uint16_t)style->body.opa * opa_scale) >> 8;
 8012dd8:	9b08      	ldr	r3, [sp, #32]
    bool aa         = lv_disp_get_antialiasing(lv_refr_get_disp_refreshing());
 8012dda:	9014      	str	r0, [sp, #80]	; 0x50
    lv_opa_t opa = opa_scale == LV_OPA_COVER ? style->body.opa : (uint16_t)((uint16_t)style->body.opa * opa_scale) >> 8;
 8012ddc:	2bff      	cmp	r3, #255	; 0xff
 8012dde:	9b02      	ldr	r3, [sp, #8]
 8012de0:	7a1e      	ldrb	r6, [r3, #8]
 8012de2:	bf17      	itett	ne
 8012de4:	9b08      	ldrne	r3, [sp, #32]
 8012de6:	9604      	streq	r6, [sp, #16]
 8012de8:	435e      	mulne	r6, r3
 8012dea:	f3c6 2307 	ubfxne	r3, r6, #8, #8
 8012dee:	bf18      	it	ne
 8012df0:	9304      	strne	r3, [sp, #16]
    return area_p->y2 - area_p->y1 + 1;
 8012df2:	f8ba 3006 	ldrh.w	r3, [sl, #6]
 8012df6:	3301      	adds	r3, #1
 8012df8:	1a9b      	subs	r3, r3, r2
 8012dfa:	b21b      	sxth	r3, r3
 8012dfc:	9305      	str	r3, [sp, #20]
    return area_p->x2 - area_p->x1 + 1;
 8012dfe:	f8ba 3000 	ldrh.w	r3, [sl]
    radius = lv_draw_cont_radius_corr(radius, width, height);
 8012e02:	9a05      	ldr	r2, [sp, #20]
 8012e04:	3101      	adds	r1, #1
 8012e06:	1ac9      	subs	r1, r1, r3
    uint16_t radius = style->body.radius;
 8012e08:	b2a4      	uxth	r4, r4
    radius = lv_draw_cont_radius_corr(radius, width, height);
 8012e0a:	b209      	sxth	r1, r1
 8012e0c:	4620      	mov	r0, r4
 8012e0e:	f7ff fc3d 	bl	801268c <lv_draw_cont_radius_corr>
    lt_origo.x = coords->x1 + radius + aa;
 8012e12:	f8bd 5050 	ldrh.w	r5, [sp, #80]	; 0x50
 8012e16:	f8ba 7000 	ldrh.w	r7, [sl]
    lt_origo.y = coords->y1 + radius + aa;
 8012e1a:	f8ba 4002 	ldrh.w	r4, [sl, #2]
    lb_origo.y = coords->y2 - radius - aa;
 8012e1e:	f8ba 8006 	ldrh.w	r8, [sl, #6]
    radius = lv_draw_cont_radius_corr(radius, width, height);
 8012e22:	9009      	str	r0, [sp, #36]	; 0x24
    lt_origo.x = coords->x1 + radius + aa;
 8012e24:	442f      	add	r7, r5
 8012e26:	4407      	add	r7, r0
    lt_origo.y = coords->y1 + radius + aa;
 8012e28:	442c      	add	r4, r5
 8012e2a:	4404      	add	r4, r0
    lt_origo.x = coords->x1 + radius + aa;
 8012e2c:	b2bb      	uxth	r3, r7
 8012e2e:	9306      	str	r3, [sp, #24]
    lt_origo.y = coords->y1 + radius + aa;
 8012e30:	b2a3      	uxth	r3, r4
 8012e32:	930a      	str	r3, [sp, #40]	; 0x28
    lb_origo.y = coords->y2 - radius - aa;
 8012e34:	eba8 0800 	sub.w	r8, r8, r0
    lt_origo.y = coords->y1 + radius + aa;
 8012e38:	f9bd 3028 	ldrsh.w	r3, [sp, #40]	; 0x28
 8012e3c:	9315      	str	r3, [sp, #84]	; 0x54
    lb_origo.y = coords->y2 - radius - aa;
 8012e3e:	eba8 0805 	sub.w	r8, r8, r5
 8012e42:	fa1f f388 	uxth.w	r3, r8
 8012e46:	930b      	str	r3, [sp, #44]	; 0x2c
 8012e48:	f9bd 302c 	ldrsh.w	r3, [sp, #44]	; 0x2c
 8012e4c:	9316      	str	r3, [sp, #88]	; 0x58
    rt_origo.x = coords->x2 - radius - aa;
 8012e4e:	f8ba 3004 	ldrh.w	r3, [sl, #4]
    lv_circ_init(&cir, &cir_tmp, radius);
 8012e52:	f9bd 8024 	ldrsh.w	r8, [sp, #36]	; 0x24
    rt_origo.x = coords->x2 - radius - aa;
 8012e56:	1a1b      	subs	r3, r3, r0
    lv_circ_init(&cir, &cir_tmp, radius);
 8012e58:	ac1e      	add	r4, sp, #120	; 0x78
    rt_origo.x = coords->x2 - radius - aa;
 8012e5a:	1b5d      	subs	r5, r3, r5
 8012e5c:	b2ab      	uxth	r3, r5
    lv_circ_init(&cir, &cir_tmp, radius);
 8012e5e:	4642      	mov	r2, r8
 8012e60:	a91d      	add	r1, sp, #116	; 0x74
 8012e62:	4620      	mov	r0, r4
    rt_origo.x = coords->x2 - radius - aa;
 8012e64:	9307      	str	r3, [sp, #28]
    lv_circ_init(&cir, &cir_tmp, radius);
 8012e66:	f002 fac6 	bl	80153f6 <lv_circ_init>
    lv_area_set(&mid_bot_area, lb_origo.x + LV_CIRC_OCT4_X(cir), lb_origo.y + LV_CIRC_OCT4_Y(cir),
 8012e6a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8012e6c:	f8bd 207a 	ldrh.w	r2, [sp, #122]	; 0x7a
 8012e70:	f8bd 1078 	ldrh.w	r1, [sp, #120]	; 0x78
 8012e74:	9806      	ldr	r0, [sp, #24]
 8012e76:	441a      	add	r2, r3
                rb_origo.x + LV_CIRC_OCT1_X(cir), rb_origo.y + LV_CIRC_OCT1_Y(cir));
 8012e78:	9b07      	ldr	r3, [sp, #28]
    lv_area_set(&mid_bot_area, lb_origo.x + LV_CIRC_OCT4_X(cir), lb_origo.y + LV_CIRC_OCT4_Y(cir),
 8012e7a:	b212      	sxth	r2, r2
                rb_origo.x + LV_CIRC_OCT1_X(cir), rb_origo.y + LV_CIRC_OCT1_Y(cir));
 8012e7c:	440b      	add	r3, r1
    lv_area_set(&mid_bot_area, lb_origo.x + LV_CIRC_OCT4_X(cir), lb_origo.y + LV_CIRC_OCT4_Y(cir),
 8012e7e:	1a41      	subs	r1, r0, r1
 8012e80:	9200      	str	r2, [sp, #0]
 8012e82:	b21b      	sxth	r3, r3
 8012e84:	b209      	sxth	r1, r1
 8012e86:	a824      	add	r0, sp, #144	; 0x90
 8012e88:	f002 fa02 	bl	8015290 <lv_area_set>
    lv_area_set(&edge_bot_area, lb_origo.x + LV_CIRC_OCT3_X(cir), lb_origo.y + LV_CIRC_OCT3_Y(cir),
 8012e8c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8012e8e:	f8bd 2078 	ldrh.w	r2, [sp, #120]	; 0x78
 8012e92:	f8bd 107a 	ldrh.w	r1, [sp, #122]	; 0x7a
 8012e96:	9806      	ldr	r0, [sp, #24]
 8012e98:	441a      	add	r2, r3
                rb_origo.x + LV_CIRC_OCT2_X(cir), rb_origo.y + LV_CIRC_OCT2_Y(cir));
 8012e9a:	9b07      	ldr	r3, [sp, #28]
    lv_area_set(&edge_bot_area, lb_origo.x + LV_CIRC_OCT3_X(cir), lb_origo.y + LV_CIRC_OCT3_Y(cir),
 8012e9c:	b212      	sxth	r2, r2
                rb_origo.x + LV_CIRC_OCT2_X(cir), rb_origo.y + LV_CIRC_OCT2_Y(cir));
 8012e9e:	440b      	add	r3, r1
    lv_area_set(&edge_bot_area, lb_origo.x + LV_CIRC_OCT3_X(cir), lb_origo.y + LV_CIRC_OCT3_Y(cir),
 8012ea0:	1a41      	subs	r1, r0, r1
 8012ea2:	9200      	str	r2, [sp, #0]
 8012ea4:	b21b      	sxth	r3, r3
 8012ea6:	b209      	sxth	r1, r1
 8012ea8:	a826      	add	r0, sp, #152	; 0x98
 8012eaa:	f002 f9f1 	bl	8015290 <lv_area_set>
    lv_area_set(&mid_top_area, lt_origo.x + LV_CIRC_OCT5_X(cir), lt_origo.y + LV_CIRC_OCT5_Y(cir),
 8012eae:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012eb0:	f8bd 207a 	ldrh.w	r2, [sp, #122]	; 0x7a
 8012eb4:	f8bd 1078 	ldrh.w	r1, [sp, #120]	; 0x78
 8012eb8:	9806      	ldr	r0, [sp, #24]
 8012eba:	1a9a      	subs	r2, r3, r2
                rt_origo.x + LV_CIRC_OCT8_X(cir), rt_origo.y + LV_CIRC_OCT8_Y(cir));
 8012ebc:	9b07      	ldr	r3, [sp, #28]
    lv_area_set(&mid_top_area, lt_origo.x + LV_CIRC_OCT5_X(cir), lt_origo.y + LV_CIRC_OCT5_Y(cir),
 8012ebe:	b212      	sxth	r2, r2
                rt_origo.x + LV_CIRC_OCT8_X(cir), rt_origo.y + LV_CIRC_OCT8_Y(cir));
 8012ec0:	440b      	add	r3, r1
    lv_area_set(&mid_top_area, lt_origo.x + LV_CIRC_OCT5_X(cir), lt_origo.y + LV_CIRC_OCT5_Y(cir),
 8012ec2:	1a41      	subs	r1, r0, r1
 8012ec4:	9200      	str	r2, [sp, #0]
 8012ec6:	b21b      	sxth	r3, r3
 8012ec8:	b209      	sxth	r1, r1
 8012eca:	a822      	add	r0, sp, #136	; 0x88
 8012ecc:	f002 f9e0 	bl	8015290 <lv_area_set>
    lv_area_set(&edge_top_area, lt_origo.x + LV_CIRC_OCT6_X(cir), lt_origo.y + LV_CIRC_OCT6_Y(cir),
 8012ed0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012ed2:	f8bd 2078 	ldrh.w	r2, [sp, #120]	; 0x78
 8012ed6:	f8bd 107a 	ldrh.w	r1, [sp, #122]	; 0x7a
 8012eda:	9806      	ldr	r0, [sp, #24]
 8012edc:	1a9a      	subs	r2, r3, r2
                rt_origo.x + LV_CIRC_OCT7_X(cir), rt_origo.y + LV_CIRC_OCT7_Y(cir));
 8012ede:	9b07      	ldr	r3, [sp, #28]
    lv_area_set(&edge_top_area, lt_origo.x + LV_CIRC_OCT6_X(cir), lt_origo.y + LV_CIRC_OCT6_Y(cir),
 8012ee0:	b212      	sxth	r2, r2
                rt_origo.x + LV_CIRC_OCT7_X(cir), rt_origo.y + LV_CIRC_OCT7_Y(cir));
 8012ee2:	440b      	add	r3, r1
    lv_area_set(&edge_top_area, lt_origo.x + LV_CIRC_OCT6_X(cir), lt_origo.y + LV_CIRC_OCT6_Y(cir),
 8012ee4:	1a41      	subs	r1, r0, r1
 8012ee6:	b21b      	sxth	r3, r3
 8012ee8:	9200      	str	r2, [sp, #0]
 8012eea:	b209      	sxth	r1, r1
 8012eec:	a820      	add	r0, sp, #128	; 0x80
 8012eee:	f002 f9cf 	bl	8015290 <lv_area_set>
    lv_coord_t out_y_seg_start = 0;
 8012ef2:	2300      	movs	r3, #0
 8012ef4:	930e      	str	r3, [sp, #56]	; 0x38
                    lv_draw_px(rb_origo.x + LV_CIRC_OCT2_X(aa_p) + i, rb_origo.y + LV_CIRC_OCT2_Y(aa_p) + 1, mask,
 8012ef6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    while(lv_circ_cont(&cir)) {
 8012ef8:	9419      	str	r4, [sp, #100]	; 0x64
                    lv_draw_px(rb_origo.x + LV_CIRC_OCT2_X(aa_p) + i, rb_origo.y + LV_CIRC_OCT2_Y(aa_p) + 1, mask,
 8012efa:	3301      	adds	r3, #1
 8012efc:	931b      	str	r3, [sp, #108]	; 0x6c
    while(lv_circ_cont(&cir)) {
 8012efe:	9819      	ldr	r0, [sp, #100]	; 0x64
 8012f00:	f002 fa80 	bl	8015404 <lv_circ_cont>
 8012f04:	2800      	cmp	r0, #0
 8012f06:	f040 8357 	bne.w	80135b8 <lv_draw_rect+0xeb0>
    if(mcolor.full == gcolor.full)
 8012f0a:	9b03      	ldr	r3, [sp, #12]
 8012f0c:	454b      	cmp	r3, r9
 8012f0e:	f040 84fc 	bne.w	801390a <lv_draw_rect+0x1202>
        act_color = mcolor;
 8012f12:	f8bd 200c 	ldrh.w	r2, [sp, #12]
    lv_draw_fill(&edge_top_area, mask, act_color, opa);
 8012f16:	9b04      	ldr	r3, [sp, #16]
 8012f18:	4659      	mov	r1, fp
 8012f1a:	a820      	add	r0, sp, #128	; 0x80
 8012f1c:	f7fe fc8f 	bl	801183e <lv_draw_fill>
    if(edge_top_area.y1 != mid_top_area.y1) {
 8012f20:	f9bd 308a 	ldrsh.w	r3, [sp, #138]	; 0x8a
 8012f24:	f9bd 2082 	ldrsh.w	r2, [sp, #130]	; 0x82
 8012f28:	429a      	cmp	r2, r3
 8012f2a:	d00a      	beq.n	8012f42 <lv_draw_rect+0x83a>
        if(mcolor.full == gcolor.full)
 8012f2c:	9a03      	ldr	r2, [sp, #12]
 8012f2e:	454a      	cmp	r2, r9
 8012f30:	f040 84fe 	bne.w	8013930 <lv_draw_rect+0x1228>
            act_color = mcolor;
 8012f34:	f8bd 200c 	ldrh.w	r2, [sp, #12]
        lv_draw_fill(&mid_top_area, mask, act_color, opa);
 8012f38:	9b04      	ldr	r3, [sp, #16]
 8012f3a:	4659      	mov	r1, fp
 8012f3c:	a822      	add	r0, sp, #136	; 0x88
 8012f3e:	f7fe fc7e 	bl	801183e <lv_draw_fill>
    if(mcolor.full == gcolor.full)
 8012f42:	9b03      	ldr	r3, [sp, #12]
 8012f44:	454b      	cmp	r3, r9
 8012f46:	f040 8504 	bne.w	8013952 <lv_draw_rect+0x124a>
        act_color = mcolor;
 8012f4a:	f8bd 200c 	ldrh.w	r2, [sp, #12]
    lv_draw_fill(&mid_bot_area, mask, act_color, opa);
 8012f4e:	9b04      	ldr	r3, [sp, #16]
 8012f50:	4659      	mov	r1, fp
 8012f52:	a824      	add	r0, sp, #144	; 0x90
 8012f54:	f7fe fc73 	bl	801183e <lv_draw_fill>
    if(edge_bot_area.y1 != mid_bot_area.y1) {
 8012f58:	f9bd 309a 	ldrsh.w	r3, [sp, #154]	; 0x9a
 8012f5c:	f9bd 2092 	ldrsh.w	r2, [sp, #146]	; 0x92
 8012f60:	429a      	cmp	r2, r3
 8012f62:	d00a      	beq.n	8012f7a <lv_draw_rect+0x872>
        if(mcolor.full == gcolor.full)
 8012f64:	9a03      	ldr	r2, [sp, #12]
 8012f66:	454a      	cmp	r2, r9
 8012f68:	f040 8506 	bne.w	8013978 <lv_draw_rect+0x1270>
            act_color = mcolor;
 8012f6c:	f8bd 200c 	ldrh.w	r2, [sp, #12]
        lv_draw_fill(&edge_bot_area, mask, act_color, opa);
 8012f70:	9b04      	ldr	r3, [sp, #16]
 8012f72:	4659      	mov	r1, fp
 8012f74:	a826      	add	r0, sp, #152	; 0x98
 8012f76:	f7fe fc62 	bl	801183e <lv_draw_fill>
    if(aa) {
 8012f7a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8012f7c:	2b00      	cmp	r3, #0
 8012f7e:	f000 80a8 	beq.w	80130d2 <lv_draw_rect+0x9ca>
        edge_top_area.x1 = coords->x1 + radius + 2;
 8012f82:	f8ba 3000 	ldrh.w	r3, [sl]
 8012f86:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8012f88:	3302      	adds	r3, #2
 8012f8a:	4413      	add	r3, r2
 8012f8c:	f8ad 3080 	strh.w	r3, [sp, #128]	; 0x80
        edge_top_area.x2 = coords->x2 - radius - 2;
 8012f90:	f8ba 3004 	ldrh.w	r3, [sl, #4]
 8012f94:	3b02      	subs	r3, #2
 8012f96:	1a9b      	subs	r3, r3, r2
        lv_draw_fill(&edge_top_area, mask, style->body.main_color, opa);
 8012f98:	9a02      	ldr	r2, [sp, #8]
        edge_top_area.x2 = coords->x2 - radius - 2;
 8012f9a:	f8ad 3084 	strh.w	r3, [sp, #132]	; 0x84
        edge_top_area.y1 = coords->y1;
 8012f9e:	f9ba 3002 	ldrsh.w	r3, [sl, #2]
 8012fa2:	f8ad 3082 	strh.w	r3, [sp, #130]	; 0x82
        edge_top_area.y2 = coords->y1;
 8012fa6:	f8ad 3086 	strh.w	r3, [sp, #134]	; 0x86
        lv_draw_fill(&edge_top_area, mask, style->body.main_color, opa);
 8012faa:	8852      	ldrh	r2, [r2, #2]
 8012fac:	9b04      	ldr	r3, [sp, #16]
 8012fae:	4659      	mov	r1, fp
 8012fb0:	a820      	add	r0, sp, #128	; 0x80
 8012fb2:	f7fe fc44 	bl	801183e <lv_draw_fill>
        lv_draw_fill(&edge_top_area, mask, style->body.grad_color, opa);
 8012fb6:	9a02      	ldr	r2, [sp, #8]
        edge_top_area.y1 = coords->y2;
 8012fb8:	f9ba 3006 	ldrsh.w	r3, [sl, #6]
 8012fbc:	f8ad 3082 	strh.w	r3, [sp, #130]	; 0x82
        edge_top_area.y2 = coords->y2;
 8012fc0:	f8ad 3086 	strh.w	r3, [sp, #134]	; 0x86
        lv_draw_fill(&edge_top_area, mask, style->body.grad_color, opa);
 8012fc4:	8892      	ldrh	r2, [r2, #4]
 8012fc6:	9b04      	ldr	r3, [sp, #16]
 8012fc8:	4659      	mov	r1, fp
 8012fca:	a820      	add	r0, sp, #128	; 0x80
 8012fcc:	f7fe fc37 	bl	801183e <lv_draw_fill>
        lv_coord_t seg_size = out_y_seg_end - out_y_seg_start;
 8012fd0:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
 8012fd4:	930f      	str	r3, [sp, #60]	; 0x3c
 8012fd6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8012fd8:	f8bd 307a 	ldrh.w	r3, [sp, #122]	; 0x7a
        aa_color_hor_bottom = lv_color_mix(gcolor, mcolor, mix);
 8012fdc:	f8bd 100c 	ldrh.w	r1, [sp, #12]
        lv_coord_t seg_size = out_y_seg_end - out_y_seg_start;
 8012fe0:	1a9b      	subs	r3, r3, r2
 8012fe2:	b21b      	sxth	r3, r3
 8012fe4:	9313      	str	r3, [sp, #76]	; 0x4c
        mix                 = (uint32_t)((uint32_t)(radius - out_x_last) * 255) / height;
 8012fe6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012fe8:	eba3 0408 	sub.w	r4, r3, r8
 8012fec:	ebc4 2404 	rsb	r4, r4, r4, lsl #8
 8012ff0:	9b05      	ldr	r3, [sp, #20]
 8012ff2:	fbb4 f4f3 	udiv	r4, r4, r3
 8012ff6:	b2e4      	uxtb	r4, r4
        aa_color_hor_bottom = lv_color_mix(gcolor, mcolor, mix);
 8012ff8:	4622      	mov	r2, r4
 8012ffa:	4648      	mov	r0, r9
 8012ffc:	f7ff fb1a 	bl	8012634 <lv_color_mix>
        aa_color_hor_top    = lv_color_mix(mcolor, gcolor, mix);
 8013000:	4622      	mov	r2, r4
        aa_color_hor_bottom = lv_color_mix(gcolor, mcolor, mix);
 8013002:	f8ad 0034 	strh.w	r0, [sp, #52]	; 0x34
        aa_color_hor_top    = lv_color_mix(mcolor, gcolor, mix);
 8013006:	4649      	mov	r1, r9
 8013008:	f8bd 000c 	ldrh.w	r0, [sp, #12]
 801300c:	f7ff fb12 	bl	8012634 <lv_color_mix>
 8013010:	2300      	movs	r3, #0
 8013012:	9310      	str	r3, [sp, #64]	; 0x40
            lv_draw_px(rb_origo.x + LV_CIRC_OCT2_X(aa_p) + i, rb_origo.y + LV_CIRC_OCT2_Y(aa_p) + 1, mask,
 8013014:	fa1f f388 	uxth.w	r3, r8
 8013018:	9312      	str	r3, [sp, #72]	; 0x48
 801301a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801301c:	9a12      	ldr	r2, [sp, #72]	; 0x48
        aa_color_hor_top    = lv_color_mix(mcolor, gcolor, mix);
 801301e:	f8ad 0030 	strh.w	r0, [sp, #48]	; 0x30
            lv_draw_px(rb_origo.x + LV_CIRC_OCT2_X(aa_p) + i, rb_origo.y + LV_CIRC_OCT2_Y(aa_p) + 1, mask,
 8013022:	3301      	adds	r3, #1
 8013024:	18d3      	adds	r3, r2, r3
 8013026:	9316      	str	r3, [sp, #88]	; 0x58
 8013028:	f9bd 1040 	ldrsh.w	r1, [sp, #64]	; 0x40
        for(i = 0; i < seg_size; i++) {
 801302c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801302e:	428b      	cmp	r3, r1
 8013030:	f300 84b3 	bgt.w	801399a <lv_draw_rect+0x1292>
        if(LV_MATH_ABS(aa_p.x - aa_p.y) == seg_size) {
 8013034:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8013036:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8013038:	eba8 0303 	sub.w	r3, r8, r3
 801303c:	2b00      	cmp	r3, #0
 801303e:	bfb8      	it	lt
 8013040:	425b      	neglt	r3, r3
 8013042:	4293      	cmp	r3, r2
 8013044:	d145      	bne.n	80130d2 <lv_draw_rect+0x9ca>
            mix                 = (uint32_t)((uint32_t)(out_x_last)*255) / height;
 8013046:	9b05      	ldr	r3, [sp, #20]
            aa_color_hor_top    = lv_color_mix(gcolor, mcolor, mix);
 8013048:	f8bd 100c 	ldrh.w	r1, [sp, #12]
            mix                 = (uint32_t)((uint32_t)(out_x_last)*255) / height;
 801304c:	ebc8 2408 	rsb	r4, r8, r8, lsl #8
 8013050:	fbb4 f4f3 	udiv	r4, r4, r3
 8013054:	b2e4      	uxtb	r4, r4
            aa_color_hor_top    = lv_color_mix(gcolor, mcolor, mix);
 8013056:	4622      	mov	r2, r4
 8013058:	4648      	mov	r0, r9
 801305a:	f7ff faeb 	bl	8012634 <lv_color_mix>
            aa_color_hor_bottom = lv_color_mix(mcolor, gcolor, mix);
 801305e:	4622      	mov	r2, r4
            aa_color_hor_top    = lv_color_mix(gcolor, mcolor, mix);
 8013060:	f8ad 0030 	strh.w	r0, [sp, #48]	; 0x30
            aa_color_hor_bottom = lv_color_mix(mcolor, gcolor, mix);
 8013064:	4649      	mov	r1, r9
 8013066:	f8bd 000c 	ldrh.w	r0, [sp, #12]
 801306a:	f7ff fae3 	bl	8012634 <lv_color_mix>
            lv_opa_t aa_opa = opa >> 1;
 801306e:	9b04      	ldr	r3, [sp, #16]
            aa_color_hor_bottom = lv_color_mix(mcolor, gcolor, mix);
 8013070:	f8ad 0034 	strh.w	r0, [sp, #52]	; 0x34
            lv_opa_t aa_opa = opa >> 1;
 8013074:	085e      	lsrs	r6, r3, #1
            lv_draw_px(rb_origo.x + LV_CIRC_OCT2_X(aa_p), rb_origo.y + LV_CIRC_OCT2_Y(aa_p), mask, aa_color_hor_bottom,
 8013076:	9b07      	ldr	r3, [sp, #28]
 8013078:	9600      	str	r6, [sp, #0]
 801307a:	fa1f f488 	uxth.w	r4, r8
 801307e:	4423      	add	r3, r4
 8013080:	b21d      	sxth	r5, r3
 8013082:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8013084:	4423      	add	r3, r4
 8013086:	fa0f f883 	sxth.w	r8, r3
 801308a:	465a      	mov	r2, fp
 801308c:	b283      	uxth	r3, r0
 801308e:	4641      	mov	r1, r8
 8013090:	4628      	mov	r0, r5
 8013092:	f7fe fb85 	bl	80117a0 <lv_draw_px>
            lv_draw_px(lb_origo.x + LV_CIRC_OCT4_X(aa_p), lb_origo.y + LV_CIRC_OCT4_Y(aa_p), mask, aa_color_hor_bottom,
 8013096:	9b06      	ldr	r3, [sp, #24]
 8013098:	9600      	str	r6, [sp, #0]
 801309a:	1b1f      	subs	r7, r3, r4
 801309c:	b23f      	sxth	r7, r7
 801309e:	f8bd 3034 	ldrh.w	r3, [sp, #52]	; 0x34
 80130a2:	465a      	mov	r2, fp
 80130a4:	4641      	mov	r1, r8
 80130a6:	4638      	mov	r0, r7
 80130a8:	f7fe fb7a 	bl	80117a0 <lv_draw_px>
            lv_draw_px(lt_origo.x + LV_CIRC_OCT6_X(aa_p), lt_origo.y + LV_CIRC_OCT6_Y(aa_p), mask, aa_color_hor_top,
 80130ac:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80130ae:	9600      	str	r6, [sp, #0]
 80130b0:	1b1c      	subs	r4, r3, r4
 80130b2:	b224      	sxth	r4, r4
 80130b4:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
 80130b8:	465a      	mov	r2, fp
 80130ba:	4621      	mov	r1, r4
 80130bc:	4638      	mov	r0, r7
 80130be:	f7fe fb6f 	bl	80117a0 <lv_draw_px>
            lv_draw_px(rt_origo.x + LV_CIRC_OCT8_X(aa_p), rt_origo.y + LV_CIRC_OCT8_Y(aa_p), mask, aa_color_hor_top,
 80130c2:	9600      	str	r6, [sp, #0]
 80130c4:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
 80130c8:	465a      	mov	r2, fp
 80130ca:	4621      	mov	r1, r4
 80130cc:	4628      	mov	r0, r5
 80130ce:	f7fe fb67 	bl	80117a0 <lv_draw_px>
    if(style->body.border.width != 0 && style->body.border.part != LV_BORDER_NONE &&
 80130d2:	9b02      	ldr	r3, [sp, #8]
 80130d4:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 80130d8:	2b00      	cmp	r3, #0
 80130da:	f000 81c0 	beq.w	801345e <lv_draw_rect+0xd56>
 80130de:	9b02      	ldr	r3, [sp, #8]
 80130e0:	7b9b      	ldrb	r3, [r3, #14]
 80130e2:	2b00      	cmp	r3, #0
 80130e4:	f000 81bb 	beq.w	801345e <lv_draw_rect+0xd56>
 80130e8:	9b02      	ldr	r3, [sp, #8]
 80130ea:	7bdb      	ldrb	r3, [r3, #15]
 80130ec:	2b0f      	cmp	r3, #15
 80130ee:	f240 81b6 	bls.w	801345e <lv_draw_rect+0xd56>
    uint16_t radius = style->body.radius;
 80130f2:	9b02      	ldr	r3, [sp, #8]
 80130f4:	f8b3 9006 	ldrh.w	r9, [r3, #6]
    bool aa         = lv_disp_get_antialiasing(lv_refr_get_disp_refreshing());
 80130f8:	f7fd fbd6 	bl	80108a8 <lv_refr_get_disp_refreshing>
 80130fc:	f001 ff30 	bl	8014f60 <lv_disp_get_antialiasing>
 8013100:	f8ba 1004 	ldrh.w	r1, [sl, #4]
 8013104:	f8ba 3000 	ldrh.w	r3, [sl]
    return area_p->y2 - area_p->y1 + 1;
 8013108:	f8ba 2006 	ldrh.w	r2, [sl, #6]
    return area_p->x2 - area_p->x1 + 1;
 801310c:	3101      	adds	r1, #1
 801310e:	1ac9      	subs	r1, r1, r3
    return area_p->y2 - area_p->y1 + 1;
 8013110:	f8ba 3002 	ldrh.w	r3, [sl, #2]
 8013114:	4680      	mov	r8, r0
 8013116:	3201      	adds	r2, #1
    lv_opa_t opa      = opa_scale == LV_OPA_COVER ? style->body.border.opa
 8013118:	9808      	ldr	r0, [sp, #32]
 801311a:	1ad2      	subs	r2, r2, r3
    lv_coord_t bwidth = style->body.border.width;
 801311c:	9b02      	ldr	r3, [sp, #8]
    lv_opa_t opa      = opa_scale == LV_OPA_COVER ? style->body.border.opa
 801311e:	28ff      	cmp	r0, #255	; 0xff
 8013120:	9802      	ldr	r0, [sp, #8]
    lv_coord_t bwidth = style->body.border.width;
 8013122:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8013126:	7bc4      	ldrb	r4, [r0, #15]
    lv_opa_t opa      = opa_scale == LV_OPA_COVER ? style->body.border.opa
 8013128:	bf18      	it	ne
 801312a:	9808      	ldrne	r0, [sp, #32]
    bwidth--;
 801312c:	b29b      	uxth	r3, r3
    lv_opa_t opa      = opa_scale == LV_OPA_COVER ? style->body.border.opa
 801312e:	bf18      	it	ne
 8013130:	4344      	mulne	r4, r0
    bwidth--;
 8013132:	f103 36ff 	add.w	r6, r3, #4294967295	; 0xffffffff
    lv_border_part_t part = style->body.border.part;
 8013136:	9802      	ldr	r0, [sp, #8]
    bwidth--;
 8013138:	9303      	str	r3, [sp, #12]
 801313a:	b2b6      	uxth	r6, r6
 801313c:	b212      	sxth	r2, r2
    lv_border_part_t part = style->body.border.part;
 801313e:	7b85      	ldrb	r5, [r0, #14]
    lv_color_t color      = style->body.border.color;
 8013140:	8947      	ldrh	r7, [r0, #10]
    bwidth--;
 8013142:	b233      	sxth	r3, r6
    return area_p->x2 - area_p->x1 + 1;
 8013144:	b209      	sxth	r1, r1
    radius = lv_draw_cont_radius_corr(radius, width, height);
 8013146:	4648      	mov	r0, r9
    lv_opa_t opa      = opa_scale == LV_OPA_COVER ? style->body.border.opa
 8013148:	bf18      	it	ne
 801314a:	f3c4 2407 	ubfxne	r4, r4, #8, #8
    bwidth--;
 801314e:	9304      	str	r3, [sp, #16]
    radius = lv_draw_cont_radius_corr(radius, width, height);
 8013150:	f7ff fa9c 	bl	801268c <lv_draw_cont_radius_corr>
    if(radius < bwidth) {
 8013154:	9b04      	ldr	r3, [sp, #16]
 8013156:	4298      	cmp	r0, r3
        length_corr = bwidth - radius - aa;
 8013158:	bfbd      	ittte	lt
 801315a:	1a32      	sublt	r2, r6, r0
 801315c:	eba2 0208 	sublt.w	r2, r2, r8
 8013160:	b212      	sxthlt	r2, r2
    lv_coord_t length_corr = 0;
 8013162:	2200      	movge	r2, #0
 8013164:	9204      	str	r2, [sp, #16]
    if(style->body.radius == 0) {
 8013166:	9a02      	ldr	r2, [sp, #8]
 8013168:	f9b2 1006 	ldrsh.w	r1, [r2, #6]
        corner_size = radius + aa;
 801316c:	bfa8      	it	ge
 801316e:	eb00 0308 	addge.w	r3, r0, r8
    radius = lv_draw_cont_radius_corr(radius, width, height);
 8013172:	4681      	mov	r9, r0
        corner_size = radius + aa;
 8013174:	bfa8      	it	ge
 8013176:	b21b      	sxthge	r3, r3
 8013178:	f005 0202 	and.w	r2, r5, #2
    if(style->body.radius == 0) {
 801317c:	2900      	cmp	r1, #0
 801317e:	f040 849b 	bne.w	8013ab8 <lv_draw_rect+0x13b0>
        if(part & LV_BORDER_TOP) {
 8013182:	f002 08ff 	and.w	r8, r2, #255	; 0xff
 8013186:	b1a2      	cbz	r2, 80131b2 <lv_draw_rect+0xaaa>
            work_area.x1 = coords->x1;
 8013188:	f8ba 3000 	ldrh.w	r3, [sl]
 801318c:	f8ad 3098 	strh.w	r3, [sp, #152]	; 0x98
            work_area.x2 = coords->x2;
 8013190:	f8ba 3004 	ldrh.w	r3, [sl, #4]
 8013194:	f8ad 309c 	strh.w	r3, [sp, #156]	; 0x9c
            work_area.y1 = coords->y1;
 8013198:	f9ba 3002 	ldrsh.w	r3, [sl, #2]
 801319c:	f8ad 309a 	strh.w	r3, [sp, #154]	; 0x9a
            work_area.y2 = coords->y1 + bwidth;
 80131a0:	4433      	add	r3, r6
 80131a2:	f8ad 309e 	strh.w	r3, [sp, #158]	; 0x9e
            lv_draw_fill(&work_area, mask, color, opa);
 80131a6:	463a      	mov	r2, r7
 80131a8:	4623      	mov	r3, r4
 80131aa:	4659      	mov	r1, fp
 80131ac:	a826      	add	r0, sp, #152	; 0x98
 80131ae:	f7fe fb46 	bl	801183e <lv_draw_fill>
        if(part & LV_BORDER_RIGHT) {
 80131b2:	0729      	lsls	r1, r5, #28
 80131b4:	d520      	bpl.n	80131f8 <lv_draw_rect+0xaf0>
            work_area.x1 = coords->x2 - bwidth;
 80131b6:	f9ba 3004 	ldrsh.w	r3, [sl, #4]
            work_area.x2 = coords->x2;
 80131ba:	f8ad 309c 	strh.w	r3, [sp, #156]	; 0x9c
            work_area.x1 = coords->x2 - bwidth;
 80131be:	1b9a      	subs	r2, r3, r6
            work_area.y1 = coords->y1 + (part & LV_BORDER_TOP ? bwidth + 1 : 0);
 80131c0:	f1b8 0f00 	cmp.w	r8, #0
            work_area.x1 = coords->x2 - bwidth;
 80131c4:	f8ad 2098 	strh.w	r2, [sp, #152]	; 0x98
            work_area.y1 = coords->y1 + (part & LV_BORDER_TOP ? bwidth + 1 : 0);
 80131c8:	f8ba 3002 	ldrh.w	r3, [sl, #2]
 80131cc:	9a03      	ldr	r2, [sp, #12]
 80131ce:	bf08      	it	eq
 80131d0:	2200      	moveq	r2, #0
 80131d2:	4413      	add	r3, r2
 80131d4:	f8ad 309a 	strh.w	r3, [sp, #154]	; 0x9a
            work_area.y2 = coords->y2 - (part & LV_BORDER_BOTTOM ? bwidth + 1 : 0);
 80131d8:	9a03      	ldr	r2, [sp, #12]
 80131da:	f8ba 3006 	ldrh.w	r3, [sl, #6]
 80131de:	f015 0f01 	tst.w	r5, #1
 80131e2:	bf08      	it	eq
 80131e4:	2200      	moveq	r2, #0
 80131e6:	1a9b      	subs	r3, r3, r2
 80131e8:	f8ad 309e 	strh.w	r3, [sp, #158]	; 0x9e
            lv_draw_fill(&work_area, mask, color, opa);
 80131ec:	463a      	mov	r2, r7
 80131ee:	4623      	mov	r3, r4
 80131f0:	4659      	mov	r1, fp
 80131f2:	a826      	add	r0, sp, #152	; 0x98
 80131f4:	f7fe fb23 	bl	801183e <lv_draw_fill>
        if(part & LV_BORDER_LEFT) {
 80131f8:	f015 0f04 	tst.w	r5, #4
 80131fc:	f005 0501 	and.w	r5, r5, #1
 8013200:	d020      	beq.n	8013244 <lv_draw_rect+0xb3c>
            work_area.x1 = coords->x1;
 8013202:	f9ba 3000 	ldrsh.w	r3, [sl]
 8013206:	f8ad 3098 	strh.w	r3, [sp, #152]	; 0x98
            work_area.x2 = coords->x1 + bwidth;
 801320a:	4433      	add	r3, r6
            work_area.y1 = coords->y1 + (part & LV_BORDER_TOP ? bwidth + 1 : 0);
 801320c:	9a03      	ldr	r2, [sp, #12]
            work_area.x2 = coords->x1 + bwidth;
 801320e:	f8ad 309c 	strh.w	r3, [sp, #156]	; 0x9c
            work_area.y1 = coords->y1 + (part & LV_BORDER_TOP ? bwidth + 1 : 0);
 8013212:	f1b8 0f00 	cmp.w	r8, #0
 8013216:	f8ba 3002 	ldrh.w	r3, [sl, #2]
 801321a:	bf08      	it	eq
 801321c:	2200      	moveq	r2, #0
 801321e:	4413      	add	r3, r2
 8013220:	f8ad 309a 	strh.w	r3, [sp, #154]	; 0x9a
            work_area.y2 = coords->y2 - (part & LV_BORDER_BOTTOM ? bwidth + 1 : 0);
 8013224:	9a03      	ldr	r2, [sp, #12]
 8013226:	f8ba 3006 	ldrh.w	r3, [sl, #6]
 801322a:	2d00      	cmp	r5, #0
 801322c:	bf08      	it	eq
 801322e:	2200      	moveq	r2, #0
 8013230:	1a9b      	subs	r3, r3, r2
 8013232:	9203      	str	r2, [sp, #12]
 8013234:	f8ad 309e 	strh.w	r3, [sp, #158]	; 0x9e
            lv_draw_fill(&work_area, mask, color, opa);
 8013238:	463a      	mov	r2, r7
 801323a:	4623      	mov	r3, r4
 801323c:	4659      	mov	r1, fp
 801323e:	a826      	add	r0, sp, #152	; 0x98
 8013240:	f7fe fafd 	bl	801183e <lv_draw_fill>
        if(part & LV_BORDER_BOTTOM) {
 8013244:	b1a5      	cbz	r5, 8013270 <lv_draw_rect+0xb68>
            work_area.x1 = coords->x1;
 8013246:	f8ba 3000 	ldrh.w	r3, [sl]
 801324a:	f8ad 3098 	strh.w	r3, [sp, #152]	; 0x98
            work_area.x2 = coords->x2;
 801324e:	f8ba 3004 	ldrh.w	r3, [sl, #4]
 8013252:	f8ad 309c 	strh.w	r3, [sp, #156]	; 0x9c
            work_area.y1 = coords->y2 - bwidth;
 8013256:	f9ba 3006 	ldrsh.w	r3, [sl, #6]
 801325a:	1b9e      	subs	r6, r3, r6
 801325c:	f8ad 609a 	strh.w	r6, [sp, #154]	; 0x9a
            work_area.y2 = coords->y2;
 8013260:	f8ad 309e 	strh.w	r3, [sp, #158]	; 0x9e
            lv_draw_fill(&work_area, mask, color, opa);
 8013264:	463a      	mov	r2, r7
 8013266:	4623      	mov	r3, r4
 8013268:	4659      	mov	r1, fp
 801326a:	a826      	add	r0, sp, #152	; 0x98
 801326c:	f7fe fae7 	bl	801183e <lv_draw_fill>
        if(style->body.radius != 0) {
 8013270:	9b02      	ldr	r3, [sp, #8]
 8013272:	f9b3 5006 	ldrsh.w	r5, [r3, #6]
 8013276:	2d00      	cmp	r5, #0
 8013278:	f000 80f1 	beq.w	801345e <lv_draw_rect+0xd56>
    bool aa               = lv_disp_get_antialiasing(lv_refr_get_disp_refreshing());
 801327c:	f7fd fb14 	bl	80108a8 <lv_refr_get_disp_refreshing>
 8013280:	f001 fe6e 	bl	8014f60 <lv_disp_get_antialiasing>
    lv_coord_t bwidth     = style->body.border.width;
 8013284:	9b02      	ldr	r3, [sp, #8]
    bool aa               = lv_disp_get_antialiasing(lv_refr_get_disp_refreshing());
 8013286:	900e      	str	r0, [sp, #56]	; 0x38
    lv_coord_t bwidth     = style->body.border.width;
 8013288:	f9b3 400c 	ldrsh.w	r4, [r3, #12]
    lv_color_t color      = style->body.border.color;
 801328c:	895b      	ldrh	r3, [r3, #10]
 801328e:	f8ad 3028 	strh.w	r3, [sp, #40]	; 0x28
    lv_border_part_t part = style->body.border.part;
 8013292:	9b02      	ldr	r3, [sp, #8]
 8013294:	7b9b      	ldrb	r3, [r3, #14]
 8013296:	9305      	str	r3, [sp, #20]
    lv_opa_t opa          = opa_scale == LV_OPA_COVER ? style->body.border.opa
 8013298:	9b08      	ldr	r3, [sp, #32]
 801329a:	2bff      	cmp	r3, #255	; 0xff
 801329c:	9b02      	ldr	r3, [sp, #8]
 801329e:	bf18      	it	ne
 80132a0:	9a08      	ldrne	r2, [sp, #32]
 80132a2:	7bdb      	ldrb	r3, [r3, #15]
 80132a4:	bf1c      	itt	ne
 80132a6:	4353      	mulne	r3, r2
 80132a8:	f3c3 2307 	ubfxne	r3, r3, #8, #8
 80132ac:	9307      	str	r3, [sp, #28]
    if(aa) bwidth--; /*Because of anti-aliasing the border seems one pixel ticker*/
 80132ae:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    uint16_t radius       = style->body.radius;
 80132b0:	b2ad      	uxth	r5, r5
    bwidth--;
 80132b2:	b2a4      	uxth	r4, r4
    if(aa) bwidth--; /*Because of anti-aliasing the border seems one pixel ticker*/
 80132b4:	2b00      	cmp	r3, #0
 80132b6:	f040 854f 	bne.w	8013d58 <lv_draw_rect+0x1650>
    bwidth--;
 80132ba:	3c01      	subs	r4, #1
    return area_p->y2 - area_p->y1 + 1;
 80132bc:	f8ba 2006 	ldrh.w	r2, [sl, #6]
 80132c0:	f8ba 3002 	ldrh.w	r3, [sl, #2]
    return area_p->x2 - area_p->x1 + 1;
 80132c4:	f8ba 1004 	ldrh.w	r1, [sl, #4]
    return area_p->y2 - area_p->y1 + 1;
 80132c8:	3201      	adds	r2, #1
 80132ca:	1ad2      	subs	r2, r2, r3
    return area_p->x2 - area_p->x1 + 1;
 80132cc:	f8ba 3000 	ldrh.w	r3, [sl]
 80132d0:	3101      	adds	r1, #1
 80132d2:	1ac9      	subs	r1, r1, r3
    radius = lv_draw_cont_radius_corr(radius, width, height);
 80132d4:	b212      	sxth	r2, r2
 80132d6:	b209      	sxth	r1, r1
 80132d8:	4628      	mov	r0, r5
 80132da:	f7ff f9d7 	bl	801268c <lv_draw_cont_radius_corr>
    lt_origo.x = coords->x1 + radius + aa;
 80132de:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
 80132e2:	f8ba 2000 	ldrh.w	r2, [sl]
 80132e6:	441a      	add	r2, r3
 80132e8:	4402      	add	r2, r0
 80132ea:	b292      	uxth	r2, r2
 80132ec:	9206      	str	r2, [sp, #24]
    lt_origo.y = coords->y1 + radius + aa;
 80132ee:	f8ba 2002 	ldrh.w	r2, [sl, #2]
 80132f2:	441a      	add	r2, r3
 80132f4:	4402      	add	r2, r0
 80132f6:	b292      	uxth	r2, r2
 80132f8:	9203      	str	r2, [sp, #12]
 80132fa:	f9bd 200c 	ldrsh.w	r2, [sp, #12]
 80132fe:	9211      	str	r2, [sp, #68]	; 0x44
    lb_origo.y = coords->y2 - radius - aa;
 8013300:	f8ba 2006 	ldrh.w	r2, [sl, #6]
 8013304:	1a12      	subs	r2, r2, r0
 8013306:	1ad2      	subs	r2, r2, r3
 8013308:	b292      	uxth	r2, r2
 801330a:	9204      	str	r2, [sp, #16]
 801330c:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 8013310:	9212      	str	r2, [sp, #72]	; 0x48
    rt_origo.x = coords->x2 - radius - aa;
 8013312:	f8ba 2004 	ldrh.w	r2, [sl, #4]
 8013316:	1a12      	subs	r2, r2, r0
    radius = lv_draw_cont_radius_corr(radius, width, height);
 8013318:	4605      	mov	r5, r0
    rt_origo.x = coords->x2 - radius - aa;
 801331a:	1ad3      	subs	r3, r2, r3
    lv_circ_init(&cir_out, &tmp_out, radius);
 801331c:	fa0f f980 	sxth.w	r9, r0
    if(aa) bwidth--; /*Because of anti-aliasing the border seems one pixel ticker*/
 8013320:	b2a4      	uxth	r4, r4
    rt_origo.x = coords->x2 - radius - aa;
 8013322:	b29b      	uxth	r3, r3
    lv_circ_init(&cir_out, &tmp_out, radius);
 8013324:	464a      	mov	r2, r9
 8013326:	a91e      	add	r1, sp, #120	; 0x78
 8013328:	a822      	add	r0, sp, #136	; 0x88
    lv_coord_t radius_in = radius - bwidth;
 801332a:	1b2c      	subs	r4, r5, r4
    rt_origo.x = coords->x2 - radius - aa;
 801332c:	9309      	str	r3, [sp, #36]	; 0x24
    lv_circ_init(&cir_out, &tmp_out, radius);
 801332e:	f002 f862 	bl	80153f6 <lv_circ_init>
    lv_coord_t radius_in = radius - bwidth;
 8013332:	b223      	sxth	r3, r4
    lv_circ_init(&cir_in, &tmp_in, radius_in);
 8013334:	ea23 72e3 	bic.w	r2, r3, r3, asr #31
 8013338:	a920      	add	r1, sp, #128	; 0x80
 801333a:	a824      	add	r0, sp, #144	; 0x90
    lv_coord_t radius_in = radius - bwidth;
 801333c:	9308      	str	r3, [sp, #32]
    lv_circ_init(&cir_in, &tmp_in, radius_in);
 801333e:	f002 f85a 	bl	80153f6 <lv_circ_init>
    lv_coord_t in_y_seg_start = 0;
 8013342:	2300      	movs	r3, #0
 8013344:	930c      	str	r3, [sp, #48]	; 0x30
    lv_coord_t out_y_seg_start = 0;
 8013346:	930f      	str	r3, [sp, #60]	; 0x3c
                        lv_draw_px(rb_origo.x + LV_CIRC_OCT1_X(aa_p) - 1, rb_origo.y + LV_CIRC_OCT1_Y(aa_p) + i, mask,
 8013348:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801334a:	3b01      	subs	r3, #1
 801334c:	9316      	str	r3, [sp, #88]	; 0x58
 801334e:	9b05      	ldr	r3, [sp, #20]
 8013350:	f003 0309 	and.w	r3, r3, #9
 8013354:	9310      	str	r3, [sp, #64]	; 0x40
    while(cir_out.y <= cir_out.x) {
 8013356:	f9bd a08a 	ldrsh.w	sl, [sp, #138]	; 0x8a
 801335a:	f9bd 2088 	ldrsh.w	r2, [sp, #136]	; 0x88
 801335e:	4552      	cmp	r2, sl
 8013360:	f280 84fd 	bge.w	8013d5e <lv_draw_rect+0x1656>
    if(aa) {
 8013364:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8013366:	2b00      	cmp	r3, #0
 8013368:	d079      	beq.n	801345e <lv_draw_rect+0xd56>
                lv_draw_px(rb_origo.x + LV_CIRC_OCT1_X(aa_p) + 1, rb_origo.y + LV_CIRC_OCT1_Y(aa_p) + i, mask,
 801336a:	9b09      	ldr	r3, [sp, #36]	; 0x24
        lv_coord_t seg_size = out_y_seg_end - out_y_seg_start;
 801336c:	f8bd 503c 	ldrh.w	r5, [sp, #60]	; 0x3c
                lv_draw_px(rb_origo.x + LV_CIRC_OCT1_X(aa_p) + 1, rb_origo.y + LV_CIRC_OCT1_Y(aa_p) + i, mask,
 8013370:	fa1f f789 	uxth.w	r7, r9
 8013374:	3301      	adds	r3, #1
        lv_coord_t seg_size = out_y_seg_end - out_y_seg_start;
 8013376:	ebaa 0a05 	sub.w	sl, sl, r5
                lv_draw_px(rb_origo.x + LV_CIRC_OCT1_X(aa_p) + 1, rb_origo.y + LV_CIRC_OCT1_Y(aa_p) + i, mask,
 801337a:	18fb      	adds	r3, r7, r3
        lv_coord_t seg_size = out_y_seg_end - out_y_seg_start;
 801337c:	fa0f fa8a 	sxth.w	sl, sl
 8013380:	2600      	movs	r6, #0
                lv_draw_px(rb_origo.x + LV_CIRC_OCT1_X(aa_p) + 1, rb_origo.y + LV_CIRC_OCT1_Y(aa_p) + i, mask,
 8013382:	930a      	str	r3, [sp, #40]	; 0x28
 8013384:	b231      	sxth	r1, r6
        for(i = 0; i < seg_size; i++) {
 8013386:	458a      	cmp	sl, r1
 8013388:	f300 877e 	bgt.w	8014288 <lv_draw_rect+0x1b80>
        if(LV_MATH_ABS(aa_p.x - aa_p.y) == seg_size) {
 801338c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801338e:	eba9 0503 	sub.w	r5, r9, r3
 8013392:	2d00      	cmp	r5, #0
 8013394:	bfb8      	it	lt
 8013396:	426d      	neglt	r5, r5
 8013398:	4555      	cmp	r5, sl
 801339a:	d14d      	bne.n	8013438 <lv_draw_rect+0xd30>
            lv_opa_t aa_opa = opa >> 1;
 801339c:	9b07      	ldr	r3, [sp, #28]
 801339e:	085c      	lsrs	r4, r3, #1
            if((part & LV_BORDER_BOTTOM) && (part & LV_BORDER_RIGHT)) {
 80133a0:	9b05      	ldr	r3, [sp, #20]
 80133a2:	f003 0309 	and.w	r3, r3, #9
 80133a6:	2b09      	cmp	r3, #9
 80133a8:	d10d      	bne.n	80133c6 <lv_draw_rect+0xcbe>
                lv_draw_px(rb_origo.x + LV_CIRC_OCT2_X(aa_p), rb_origo.y + LV_CIRC_OCT2_Y(aa_p), mask,
 80133aa:	9b04      	ldr	r3, [sp, #16]
 80133ac:	9400      	str	r4, [sp, #0]
 80133ae:	fa1f f089 	uxth.w	r0, r9
 80133b2:	1819      	adds	r1, r3, r0
 80133b4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80133b6:	4418      	add	r0, r3
 80133b8:	9b02      	ldr	r3, [sp, #8]
 80133ba:	465a      	mov	r2, fp
 80133bc:	895b      	ldrh	r3, [r3, #10]
 80133be:	b209      	sxth	r1, r1
 80133c0:	b200      	sxth	r0, r0
 80133c2:	f7fe f9ed 	bl	80117a0 <lv_draw_px>
            if((part & LV_BORDER_BOTTOM) && (part & LV_BORDER_LEFT)) {
 80133c6:	9b05      	ldr	r3, [sp, #20]
 80133c8:	f003 0305 	and.w	r3, r3, #5
 80133cc:	2b05      	cmp	r3, #5
 80133ce:	d10d      	bne.n	80133ec <lv_draw_rect+0xce4>
                lv_draw_px(lb_origo.x + LV_CIRC_OCT4_X(aa_p), lb_origo.y + LV_CIRC_OCT4_Y(aa_p), mask,
 80133d0:	9b04      	ldr	r3, [sp, #16]
 80133d2:	9400      	str	r4, [sp, #0]
 80133d4:	fa1f f089 	uxth.w	r0, r9
 80133d8:	1819      	adds	r1, r3, r0
 80133da:	9b06      	ldr	r3, [sp, #24]
 80133dc:	1a18      	subs	r0, r3, r0
 80133de:	9b02      	ldr	r3, [sp, #8]
 80133e0:	465a      	mov	r2, fp
 80133e2:	895b      	ldrh	r3, [r3, #10]
 80133e4:	b209      	sxth	r1, r1
 80133e6:	b200      	sxth	r0, r0
 80133e8:	f7fe f9da 	bl	80117a0 <lv_draw_px>
            if((part & LV_BORDER_TOP) && (part & LV_BORDER_LEFT)) {
 80133ec:	9b05      	ldr	r3, [sp, #20]
 80133ee:	f003 0306 	and.w	r3, r3, #6
 80133f2:	2b06      	cmp	r3, #6
 80133f4:	d10d      	bne.n	8013412 <lv_draw_rect+0xd0a>
                lv_draw_px(lt_origo.x + LV_CIRC_OCT6_X(aa_p), lt_origo.y + LV_CIRC_OCT6_Y(aa_p), mask,
 80133f6:	9b03      	ldr	r3, [sp, #12]
 80133f8:	9400      	str	r4, [sp, #0]
 80133fa:	fa1f f089 	uxth.w	r0, r9
 80133fe:	1a19      	subs	r1, r3, r0
 8013400:	9b06      	ldr	r3, [sp, #24]
 8013402:	1a18      	subs	r0, r3, r0
 8013404:	9b02      	ldr	r3, [sp, #8]
 8013406:	465a      	mov	r2, fp
 8013408:	895b      	ldrh	r3, [r3, #10]
 801340a:	b209      	sxth	r1, r1
 801340c:	b200      	sxth	r0, r0
 801340e:	f7fe f9c7 	bl	80117a0 <lv_draw_px>
            if((part & LV_BORDER_TOP) && (part & LV_BORDER_RIGHT)) {
 8013412:	9b05      	ldr	r3, [sp, #20]
 8013414:	f003 030a 	and.w	r3, r3, #10
 8013418:	2b0a      	cmp	r3, #10
 801341a:	d10d      	bne.n	8013438 <lv_draw_rect+0xd30>
                lv_draw_px(rt_origo.x + LV_CIRC_OCT8_X(aa_p), rt_origo.y + LV_CIRC_OCT8_Y(aa_p), mask,
 801341c:	9b03      	ldr	r3, [sp, #12]
 801341e:	9400      	str	r4, [sp, #0]
 8013420:	fa1f f789 	uxth.w	r7, r9
 8013424:	1bd9      	subs	r1, r3, r7
 8013426:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013428:	441f      	add	r7, r3
 801342a:	9b02      	ldr	r3, [sp, #8]
 801342c:	465a      	mov	r2, fp
 801342e:	895b      	ldrh	r3, [r3, #10]
 8013430:	b209      	sxth	r1, r1
 8013432:	b238      	sxth	r0, r7
 8013434:	f7fe f9b4 	bl	80117a0 <lv_draw_px>
        seg_size     = in_y_seg_end - in_y_seg_start;
 8013438:	f8bd 5030 	ldrh.w	r5, [sp, #48]	; 0x30
 801343c:	f8bd 3092 	ldrh.w	r3, [sp, #146]	; 0x92
                lv_draw_px(rb_origo.x + LV_CIRC_OCT1_X(aa_p) - 1, rb_origo.y + LV_CIRC_OCT1_Y(aa_p) + i, mask,
 8013440:	9a08      	ldr	r2, [sp, #32]
        seg_size     = in_y_seg_end - in_y_seg_start;
 8013442:	1b5b      	subs	r3, r3, r5
 8013444:	b21b      	sxth	r3, r3
 8013446:	930a      	str	r3, [sp, #40]	; 0x28
                lv_draw_px(rb_origo.x + LV_CIRC_OCT1_X(aa_p) - 1, rb_origo.y + LV_CIRC_OCT1_Y(aa_p) + i, mask,
 8013448:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801344a:	3b01      	subs	r3, #1
 801344c:	4413      	add	r3, r2
 801344e:	b21b      	sxth	r3, r3
        seg_size     = in_y_seg_end - in_y_seg_start;
 8013450:	2400      	movs	r4, #0
                lv_draw_px(rb_origo.x + LV_CIRC_OCT1_X(aa_p) - 1, rb_origo.y + LV_CIRC_OCT1_Y(aa_p) + i, mask,
 8013452:	930b      	str	r3, [sp, #44]	; 0x2c
        for(i = 0; i < seg_size; i++) {
 8013454:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8013456:	b221      	sxth	r1, r4
 8013458:	428b      	cmp	r3, r1
 801345a:	f300 87b0 	bgt.w	80143be <lv_draw_rect+0x1cb6>
}
 801345e:	b029      	add	sp, #164	; 0xa4
 8013460:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        curve_x[LV_CIRC_OCT1_Y(circ)] = LV_CIRC_OCT1_X(circ);
 8013464:	f9bd 3092 	ldrsh.w	r3, [sp, #146]	; 0x92
 8013468:	f9bd 2090 	ldrsh.w	r2, [sp, #144]	; 0x90
 801346c:	f827 2013 	strh.w	r2, [r7, r3, lsl #1]
        curve_x[LV_CIRC_OCT2_Y(circ)] = LV_CIRC_OCT2_X(circ);
 8013470:	f9bd 3090 	ldrsh.w	r3, [sp, #144]	; 0x90
 8013474:	f9bd 2092 	ldrsh.w	r2, [sp, #146]	; 0x92
 8013478:	f827 2013 	strh.w	r2, [r7, r3, lsl #1]
        lv_circ_next(&circ, &circ_tmp);
 801347c:	a922      	add	r1, sp, #136	; 0x88
 801347e:	4648      	mov	r0, r9
 8013480:	f001 ffc9 	bl	8015416 <lv_circ_next>
 8013484:	f7ff bbe4 	b.w	8012c50 <lv_draw_rect+0x548>
        line_1d_blur[col] = (uint32_t)((uint32_t)(swidth - col) * opa / 2) / (swidth);
 8013488:	0842      	lsrs	r2, r0, #1
 801348a:	1ac0      	subs	r0, r0, r3
 801348c:	fbb2 f2f6 	udiv	r2, r2, r6
 8013490:	f801 2b01 	strb.w	r2, [r1], #1
 8013494:	f7ff bbef 	b.w	8012c76 <lv_draw_rect+0x56e>
        point_l.y = ofs_l.y + curve_x[col];
 8013498:	f837 5013 	ldrh.w	r5, [r7, r3, lsl #1]
 801349c:	980c      	ldr	r0, [sp, #48]	; 0x30
 801349e:	9904      	ldr	r1, [sp, #16]
 80134a0:	4428      	add	r0, r5
 80134a2:	b280      	uxth	r0, r0
 80134a4:	900d      	str	r0, [sp, #52]	; 0x34
 80134a6:	9806      	ldr	r0, [sp, #24]
 80134a8:	fa1f f288 	uxth.w	r2, r8
 80134ac:	1a89      	subs	r1, r1, r2
 80134ae:	4402      	add	r2, r0
 80134b0:	b209      	sxth	r1, r1
 80134b2:	b212      	sxth	r2, r2
 80134b4:	910e      	str	r1, [sp, #56]	; 0x38
 80134b6:	920a      	str	r2, [sp, #40]	; 0x28
 80134b8:	0059      	lsls	r1, r3, #1
        int16_t diff = col == 0 ? 0 : curve_x[col - 1] - curve_x[col];
 80134ba:	b123      	cbz	r3, 80134c6 <lv_draw_rect+0xdbe>
 80134bc:	187a      	adds	r2, r7, r1
 80134be:	f832 3c02 	ldrh.w	r3, [r2, #-2]
 80134c2:	1b5b      	subs	r3, r3, r5
 80134c4:	b29b      	uxth	r3, r3
 80134c6:	b21b      	sxth	r3, r3
 80134c8:	9307      	str	r3, [sp, #28]
 80134ca:	f04f 0900 	mov.w	r9, #0
 80134ce:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80134d0:	444b      	add	r3, r9
 80134d2:	b21b      	sxth	r3, r3
 80134d4:	9309      	str	r3, [sp, #36]	; 0x24
        for(d = 0; d < swidth; d++) {
 80134d6:	fa1f f389 	uxth.w	r3, r9
 80134da:	42b3      	cmp	r3, r6
 80134dc:	db03      	blt.n	80134e6 <lv_draw_rect+0xdde>
 80134de:	f108 0801 	add.w	r8, r8, #1
 80134e2:	f7ff bbe7 	b.w	8012cb4 <lv_draw_rect+0x5ac>
            if(diff == 0) {
 80134e6:	9a07      	ldr	r2, [sp, #28]
                px_opa = line_1d_blur[d];
 80134e8:	5ce5      	ldrb	r5, [r4, r3]
            if(diff == 0) {
 80134ea:	b9b2      	cbnz	r2, 801351a <lv_draw_rect+0xe12>
            lv_draw_px(point_l.x, point_l.y, mask, style->body.shadow.color, px_opa);
 80134ec:	9b02      	ldr	r3, [sp, #8]
 80134ee:	9500      	str	r5, [sp, #0]
 80134f0:	8a1b      	ldrh	r3, [r3, #16]
 80134f2:	9909      	ldr	r1, [sp, #36]	; 0x24
 80134f4:	980e      	ldr	r0, [sp, #56]	; 0x38
 80134f6:	465a      	mov	r2, fp
 80134f8:	f7fe f952 	bl	80117a0 <lv_draw_px>
            if(point_r.x > ofs_l.x) {
 80134fc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80134fe:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8013500:	4293      	cmp	r3, r2
 8013502:	da07      	bge.n	8013514 <lv_draw_rect+0xe0c>
                lv_draw_px(point_r.x, point_r.y, mask, style->body.shadow.color, px_opa);
 8013504:	9b02      	ldr	r3, [sp, #8]
 8013506:	9500      	str	r5, [sp, #0]
 8013508:	8a1b      	ldrh	r3, [r3, #16]
 801350a:	9909      	ldr	r1, [sp, #36]	; 0x24
 801350c:	980a      	ldr	r0, [sp, #40]	; 0x28
 801350e:	465a      	mov	r2, fp
 8013510:	f7fe f946 	bl	80117a0 <lv_draw_px>
 8013514:	f109 0901 	add.w	r9, r9, #1
 8013518:	e7d9      	b.n	80134ce <lv_draw_rect+0xdc6>
                px_opa = (uint16_t)((uint16_t)line_1d_blur[d] + line_1d_blur[d - diff]) >> 1;
 801351a:	9a07      	ldr	r2, [sp, #28]
 801351c:	1a9b      	subs	r3, r3, r2
 801351e:	5ce3      	ldrb	r3, [r4, r3]
 8013520:	441d      	add	r5, r3
 8013522:	f3c5 0547 	ubfx	r5, r5, #1, #8
 8013526:	e7e1      	b.n	80134ec <lv_draw_rect+0xde4>
        lv_draw_fill(&area_mid, mask, style->body.shadow.color, line_1d_blur[d]);
 8013528:	9a02      	ldr	r2, [sp, #8]
 801352a:	5ce3      	ldrb	r3, [r4, r3]
 801352c:	8a12      	ldrh	r2, [r2, #16]
 801352e:	4659      	mov	r1, fp
 8013530:	a826      	add	r0, sp, #152	; 0x98
 8013532:	f7fe f984 	bl	801183e <lv_draw_fill>
        area_mid.y1++;
 8013536:	f8bd 309a 	ldrh.w	r3, [sp, #154]	; 0x9a
 801353a:	3301      	adds	r3, #1
 801353c:	f8ad 309a 	strh.w	r3, [sp, #154]	; 0x9a
        area_mid.y2++;
 8013540:	f8bd 309e 	ldrh.w	r3, [sp, #158]	; 0x9e
 8013544:	3301      	adds	r3, #1
 8013546:	f8ad 309e 	strh.w	r3, [sp, #158]	; 0x9e
 801354a:	462b      	mov	r3, r5
 801354c:	f7ff bbc7 	b.w	8012cde <lv_draw_rect+0x5d6>
                work_area.y1 += 1;
 8013550:	3301      	adds	r3, #1
 8013552:	f8ad 309a 	strh.w	r3, [sp, #154]	; 0x9a
                work_area.y2 -= 1;
 8013556:	3d01      	subs	r5, #1
 8013558:	e422      	b.n	8012da0 <lv_draw_rect+0x698>
        if(style->body.radius != 0) {
 801355a:	9a02      	ldr	r2, [sp, #8]
 801355c:	f9b2 2006 	ldrsh.w	r2, [r2, #6]
        lv_coord_t row_end   = coords->y2 - radius;
 8013560:	1a2d      	subs	r5, r5, r0
 8013562:	b2ad      	uxth	r5, r5
        if(style->body.radius != 0) {
 8013564:	b9fa      	cbnz	r2, 80135a6 <lv_draw_rect+0xe9e>
        lv_coord_t row_start = coords->y1 + radius;
 8013566:	b21c      	sxth	r4, r3
                row_end -= 1;
 8013568:	b22d      	sxth	r5, r5
 801356a:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
        for(row = row_start; row <= row_end; row++) {
 801356e:	42ac      	cmp	r4, r5
 8013570:	f73f ac1e 	bgt.w	8012db0 <lv_draw_rect+0x6a8>
            mix          = (uint32_t)((uint32_t)(coords->y2 - work_area.y1) * 255) / height;
 8013574:	f9ba 2006 	ldrsh.w	r2, [sl, #6]
            work_area.y1 = row;
 8013578:	f8ad 409a 	strh.w	r4, [sp, #154]	; 0x9a
            mix          = (uint32_t)((uint32_t)(coords->y2 - work_area.y1) * 255) / height;
 801357c:	1b12      	subs	r2, r2, r4
            act_color    = lv_color_mix(mcolor, gcolor, mix);
 801357e:	4649      	mov	r1, r9
            mix          = (uint32_t)((uint32_t)(coords->y2 - work_area.y1) * 255) / height;
 8013580:	ebc2 2202 	rsb	r2, r2, r2, lsl #8
            act_color    = lv_color_mix(mcolor, gcolor, mix);
 8013584:	4640      	mov	r0, r8
            mix          = (uint32_t)((uint32_t)(coords->y2 - work_area.y1) * 255) / height;
 8013586:	fbb2 f2f6 	udiv	r2, r2, r6
            act_color    = lv_color_mix(mcolor, gcolor, mix);
 801358a:	b2d2      	uxtb	r2, r2
            work_area.y2 = row;
 801358c:	f8ad 409e 	strh.w	r4, [sp, #158]	; 0x9e
            act_color    = lv_color_mix(mcolor, gcolor, mix);
 8013590:	f7ff f850 	bl	8012634 <lv_color_mix>
 8013594:	3401      	adds	r4, #1
            lv_draw_fill(&work_area, mask, act_color, opa);
 8013596:	4602      	mov	r2, r0
 8013598:	463b      	mov	r3, r7
 801359a:	4659      	mov	r1, fp
 801359c:	a826      	add	r0, sp, #152	; 0x98
 801359e:	f7fe f94e 	bl	801183e <lv_draw_fill>
 80135a2:	b224      	sxth	r4, r4
 80135a4:	e7e3      	b.n	801356e <lv_draw_rect+0xe66>
            if(aa) {
 80135a6:	b11c      	cbz	r4, 80135b0 <lv_draw_rect+0xea8>
                row_start += 2;
 80135a8:	1c9c      	adds	r4, r3, #2
 80135aa:	b224      	sxth	r4, r4
                row_end -= 2;
 80135ac:	3d02      	subs	r5, #2
 80135ae:	e7db      	b.n	8013568 <lv_draw_rect+0xe60>
                row_start += 1;
 80135b0:	1c5c      	adds	r4, r3, #1
 80135b2:	b224      	sxth	r4, r4
                row_end -= 1;
 80135b4:	3d01      	subs	r5, #1
 80135b6:	e7d7      	b.n	8013568 <lv_draw_rect+0xe60>
        if(aa) {
 80135b8:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80135ba:	2b00      	cmp	r3, #0
 80135bc:	d039      	beq.n	8013632 <lv_draw_rect+0xf2a>
            if(out_x_last != cir.x) {
 80135be:	f9bd 3078 	ldrsh.w	r3, [sp, #120]	; 0x78
 80135c2:	4543      	cmp	r3, r8
 80135c4:	d035      	beq.n	8013632 <lv_draw_rect+0xf2a>
                out_y_seg_end       = cir.y;
 80135c6:	f9bd 307a 	ldrsh.w	r3, [sp, #122]	; 0x7a
 80135ca:	9317      	str	r3, [sp, #92]	; 0x5c
                lv_coord_t seg_size = out_y_seg_end - out_y_seg_start;
 80135cc:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
 80135d0:	930f      	str	r3, [sp, #60]	; 0x3c
 80135d2:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80135d4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
                aa_color_hor_top    = lv_color_mix(gcolor, mcolor, mix);
 80135d6:	f8bd 100c 	ldrh.w	r1, [sp, #12]
                lv_coord_t seg_size = out_y_seg_end - out_y_seg_start;
 80135da:	1a9b      	subs	r3, r3, r2
 80135dc:	b21b      	sxth	r3, r3
 80135de:	9311      	str	r3, [sp, #68]	; 0x44
                mix                 = (uint32_t)((uint32_t)(radius - out_x_last) * 255) / height;
 80135e0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80135e2:	eba3 0408 	sub.w	r4, r3, r8
 80135e6:	ebc4 2404 	rsb	r4, r4, r4, lsl #8
 80135ea:	9b05      	ldr	r3, [sp, #20]
 80135ec:	fbb4 f4f3 	udiv	r4, r4, r3
 80135f0:	b2e4      	uxtb	r4, r4
                aa_color_hor_top    = lv_color_mix(gcolor, mcolor, mix);
 80135f2:	4622      	mov	r2, r4
 80135f4:	4648      	mov	r0, r9
 80135f6:	f7ff f81d 	bl	8012634 <lv_color_mix>
                aa_color_hor_bottom = lv_color_mix(mcolor, gcolor, mix);
 80135fa:	4622      	mov	r2, r4
                aa_color_hor_top    = lv_color_mix(gcolor, mcolor, mix);
 80135fc:	f8ad 0030 	strh.w	r0, [sp, #48]	; 0x30
                aa_color_hor_bottom = lv_color_mix(mcolor, gcolor, mix);
 8013600:	4649      	mov	r1, r9
 8013602:	f8bd 000c 	ldrh.w	r0, [sp, #12]
 8013606:	f7ff f815 	bl	8012634 <lv_color_mix>
 801360a:	2300      	movs	r3, #0
                    lv_draw_px(rb_origo.x + LV_CIRC_OCT2_X(aa_p) + i, rb_origo.y + LV_CIRC_OCT2_Y(aa_p) + 1, mask,
 801360c:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
                aa_color_hor_bottom = lv_color_mix(mcolor, gcolor, mix);
 801360e:	9310      	str	r3, [sp, #64]	; 0x40
                    lv_draw_px(rb_origo.x + LV_CIRC_OCT2_X(aa_p) + i, rb_origo.y + LV_CIRC_OCT2_Y(aa_p) + 1, mask,
 8013610:	fa1f f388 	uxth.w	r3, r8
 8013614:	9313      	str	r3, [sp, #76]	; 0x4c
 8013616:	4413      	add	r3, r2
                aa_color_hor_bottom = lv_color_mix(mcolor, gcolor, mix);
 8013618:	f8ad 0034 	strh.w	r0, [sp, #52]	; 0x34
                    lv_draw_px(rb_origo.x + LV_CIRC_OCT2_X(aa_p) + i, rb_origo.y + LV_CIRC_OCT2_Y(aa_p) + 1, mask,
 801361c:	931a      	str	r3, [sp, #104]	; 0x68
 801361e:	f9bd 1040 	ldrsh.w	r1, [sp, #64]	; 0x40
                for(i = 0; i < seg_size; i++) {
 8013622:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8013624:	428b      	cmp	r3, r1
 8013626:	f300 8090 	bgt.w	801374a <lv_draw_rect+0x1042>
                out_y_seg_start = out_y_seg_end;
 801362a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
                out_x_last      = cir.x;
 801362c:	f9bd 8078 	ldrsh.w	r8, [sp, #120]	; 0x78
                out_y_seg_start = out_y_seg_end;
 8013630:	930e      	str	r3, [sp, #56]	; 0x38
        if(mid_bot_area.y1 != LV_CIRC_OCT4_Y(cir) + lb_origo.y) mid_bot_refr = 1;
 8013632:	f9bd 407a 	ldrsh.w	r4, [sp, #122]	; 0x7a
 8013636:	9b16      	ldr	r3, [sp, #88]	; 0x58
        if(edge_bot_area.y1 != LV_CIRC_OCT2_Y(cir) + lb_origo.y) edge_bot_refr = 1;
 8013638:	9a16      	ldr	r2, [sp, #88]	; 0x58
        if(edge_top_area.y1 != LV_CIRC_OCT7_Y(cir) + lt_origo.y) edge_top_refr = 1;
 801363a:	f9bd 1082 	ldrsh.w	r1, [sp, #130]	; 0x82
        if(mid_bot_area.y1 != LV_CIRC_OCT4_Y(cir) + lb_origo.y) mid_bot_refr = 1;
 801363e:	f9bd 7092 	ldrsh.w	r7, [sp, #146]	; 0x92
        if(mid_top_area.y1 != LV_CIRC_OCT8_Y(cir) + lt_origo.y) mid_top_refr = 1;
 8013642:	f9bd 608a 	ldrsh.w	r6, [sp, #138]	; 0x8a
        if(mid_bot_area.y1 != LV_CIRC_OCT4_Y(cir) + lb_origo.y) mid_bot_refr = 1;
 8013646:	18e5      	adds	r5, r4, r3
        if(edge_bot_area.y1 != LV_CIRC_OCT2_Y(cir) + lb_origo.y) edge_bot_refr = 1;
 8013648:	f9bd 309a 	ldrsh.w	r3, [sp, #154]	; 0x9a
 801364c:	930c      	str	r3, [sp, #48]	; 0x30
 801364e:	f9bd 3078 	ldrsh.w	r3, [sp, #120]	; 0x78
 8013652:	441a      	add	r2, r3
 8013654:	920d      	str	r2, [sp, #52]	; 0x34
        if(mid_top_area.y1 != LV_CIRC_OCT8_Y(cir) + lt_origo.y) mid_top_refr = 1;
 8013656:	9a15      	ldr	r2, [sp, #84]	; 0x54
        if(edge_top_area.y1 != LV_CIRC_OCT7_Y(cir) + lt_origo.y) edge_top_refr = 1;
 8013658:	1ad3      	subs	r3, r2, r3
 801365a:	4299      	cmp	r1, r3
        if(mid_top_area.y1 != LV_CIRC_OCT8_Y(cir) + lt_origo.y) mid_top_refr = 1;
 801365c:	eba2 0404 	sub.w	r4, r2, r4
        if(edge_top_area.y1 != LV_CIRC_OCT7_Y(cir) + lt_origo.y) edge_top_refr = 1;
 8013660:	f040 874d 	bne.w	80144fe <lv_draw_rect+0x1df6>
        if(mid_top_refr != 0) {
 8013664:	42a6      	cmp	r6, r4
 8013666:	d00a      	beq.n	801367e <lv_draw_rect+0xf76>
            if(mcolor.full == gcolor.full)
 8013668:	9b03      	ldr	r3, [sp, #12]
 801366a:	454b      	cmp	r3, r9
 801366c:	f040 8117 	bne.w	801389e <lv_draw_rect+0x1196>
                act_color = mcolor;
 8013670:	f8bd 200c 	ldrh.w	r2, [sp, #12]
            lv_draw_fill(&mid_top_area, mask, act_color, opa);
 8013674:	9b04      	ldr	r3, [sp, #16]
 8013676:	4659      	mov	r1, fp
 8013678:	a822      	add	r0, sp, #136	; 0x88
 801367a:	f7fe f8e0 	bl	801183e <lv_draw_fill>
        if(mid_bot_refr != 0) {
 801367e:	42af      	cmp	r7, r5
 8013680:	d00a      	beq.n	8013698 <lv_draw_rect+0xf90>
            if(mcolor.full == gcolor.full)
 8013682:	9b03      	ldr	r3, [sp, #12]
 8013684:	454b      	cmp	r3, r9
 8013686:	f040 811c 	bne.w	80138c2 <lv_draw_rect+0x11ba>
                act_color = mcolor;
 801368a:	f8bd 200c 	ldrh.w	r2, [sp, #12]
            lv_draw_fill(&mid_bot_area, mask, act_color, opa);
 801368e:	9b04      	ldr	r3, [sp, #16]
 8013690:	4659      	mov	r1, fp
 8013692:	a824      	add	r0, sp, #144	; 0x90
 8013694:	f7fe f8d3 	bl	801183e <lv_draw_fill>
        if(edge_bot_refr != 0) {
 8013698:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801369a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801369c:	4293      	cmp	r3, r2
 801369e:	d00a      	beq.n	80136b6 <lv_draw_rect+0xfae>
            if(mcolor.full == gcolor.full)
 80136a0:	9b03      	ldr	r3, [sp, #12]
 80136a2:	454b      	cmp	r3, r9
 80136a4:	f040 811f 	bne.w	80138e6 <lv_draw_rect+0x11de>
                act_color = mcolor;
 80136a8:	f8bd 200c 	ldrh.w	r2, [sp, #12]
            lv_draw_fill(&edge_bot_area, mask, act_color, opa);
 80136ac:	9b04      	ldr	r3, [sp, #16]
 80136ae:	4659      	mov	r1, fp
 80136b0:	a826      	add	r0, sp, #152	; 0x98
 80136b2:	f7fe f8c4 	bl	801183e <lv_draw_fill>
        lv_area_set(&mid_bot_area, lb_origo.x + LV_CIRC_OCT4_X(cir), lb_origo.y + LV_CIRC_OCT4_Y(cir),
 80136b6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80136b8:	f8bd 207a 	ldrh.w	r2, [sp, #122]	; 0x7a
 80136bc:	f8bd 1078 	ldrh.w	r1, [sp, #120]	; 0x78
 80136c0:	9806      	ldr	r0, [sp, #24]
 80136c2:	441a      	add	r2, r3
                    rb_origo.x + LV_CIRC_OCT1_X(cir), rb_origo.y + LV_CIRC_OCT1_Y(cir));
 80136c4:	9b07      	ldr	r3, [sp, #28]
        lv_area_set(&mid_bot_area, lb_origo.x + LV_CIRC_OCT4_X(cir), lb_origo.y + LV_CIRC_OCT4_Y(cir),
 80136c6:	b212      	sxth	r2, r2
                    rb_origo.x + LV_CIRC_OCT1_X(cir), rb_origo.y + LV_CIRC_OCT1_Y(cir));
 80136c8:	440b      	add	r3, r1
        lv_area_set(&mid_bot_area, lb_origo.x + LV_CIRC_OCT4_X(cir), lb_origo.y + LV_CIRC_OCT4_Y(cir),
 80136ca:	1a41      	subs	r1, r0, r1
 80136cc:	9200      	str	r2, [sp, #0]
 80136ce:	a824      	add	r0, sp, #144	; 0x90
 80136d0:	b21b      	sxth	r3, r3
 80136d2:	b209      	sxth	r1, r1
 80136d4:	f001 fddc 	bl	8015290 <lv_area_set>
        lv_area_set(&edge_bot_area, lb_origo.x + LV_CIRC_OCT3_X(cir), lb_origo.y + LV_CIRC_OCT3_Y(cir),
 80136d8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80136da:	f8bd 2078 	ldrh.w	r2, [sp, #120]	; 0x78
 80136de:	f8bd 107a 	ldrh.w	r1, [sp, #122]	; 0x7a
 80136e2:	9806      	ldr	r0, [sp, #24]
 80136e4:	441a      	add	r2, r3
                    rb_origo.x + LV_CIRC_OCT2_X(cir), rb_origo.y + LV_CIRC_OCT2_Y(cir));
 80136e6:	9b07      	ldr	r3, [sp, #28]
        lv_area_set(&edge_bot_area, lb_origo.x + LV_CIRC_OCT3_X(cir), lb_origo.y + LV_CIRC_OCT3_Y(cir),
 80136e8:	b212      	sxth	r2, r2
                    rb_origo.x + LV_CIRC_OCT2_X(cir), rb_origo.y + LV_CIRC_OCT2_Y(cir));
 80136ea:	440b      	add	r3, r1
        lv_area_set(&edge_bot_area, lb_origo.x + LV_CIRC_OCT3_X(cir), lb_origo.y + LV_CIRC_OCT3_Y(cir),
 80136ec:	1a41      	subs	r1, r0, r1
 80136ee:	9200      	str	r2, [sp, #0]
 80136f0:	a826      	add	r0, sp, #152	; 0x98
 80136f2:	b21b      	sxth	r3, r3
 80136f4:	b209      	sxth	r1, r1
 80136f6:	f001 fdcb 	bl	8015290 <lv_area_set>
        lv_area_set(&mid_top_area, lt_origo.x + LV_CIRC_OCT5_X(cir), lt_origo.y + LV_CIRC_OCT5_Y(cir),
 80136fa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80136fc:	f8bd 207a 	ldrh.w	r2, [sp, #122]	; 0x7a
 8013700:	f8bd 1078 	ldrh.w	r1, [sp, #120]	; 0x78
 8013704:	9806      	ldr	r0, [sp, #24]
 8013706:	1a9a      	subs	r2, r3, r2
                    rt_origo.x + LV_CIRC_OCT8_X(cir), rt_origo.y + LV_CIRC_OCT8_Y(cir));
 8013708:	9b07      	ldr	r3, [sp, #28]
        lv_area_set(&mid_top_area, lt_origo.x + LV_CIRC_OCT5_X(cir), lt_origo.y + LV_CIRC_OCT5_Y(cir),
 801370a:	b212      	sxth	r2, r2
                    rt_origo.x + LV_CIRC_OCT8_X(cir), rt_origo.y + LV_CIRC_OCT8_Y(cir));
 801370c:	440b      	add	r3, r1
        lv_area_set(&mid_top_area, lt_origo.x + LV_CIRC_OCT5_X(cir), lt_origo.y + LV_CIRC_OCT5_Y(cir),
 801370e:	1a41      	subs	r1, r0, r1
 8013710:	9200      	str	r2, [sp, #0]
 8013712:	a822      	add	r0, sp, #136	; 0x88
 8013714:	b21b      	sxth	r3, r3
 8013716:	b209      	sxth	r1, r1
 8013718:	f001 fdba 	bl	8015290 <lv_area_set>
        lv_area_set(&edge_top_area, lt_origo.x + LV_CIRC_OCT6_X(cir), lt_origo.y + LV_CIRC_OCT6_Y(cir),
 801371c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801371e:	f8bd 2078 	ldrh.w	r2, [sp, #120]	; 0x78
 8013722:	f8bd 107a 	ldrh.w	r1, [sp, #122]	; 0x7a
 8013726:	9806      	ldr	r0, [sp, #24]
 8013728:	1a9a      	subs	r2, r3, r2
                    rt_origo.x + LV_CIRC_OCT7_X(cir), rt_origo.y + LV_CIRC_OCT7_Y(cir));
 801372a:	9b07      	ldr	r3, [sp, #28]
        lv_area_set(&edge_top_area, lt_origo.x + LV_CIRC_OCT6_X(cir), lt_origo.y + LV_CIRC_OCT6_Y(cir),
 801372c:	b212      	sxth	r2, r2
                    rt_origo.x + LV_CIRC_OCT7_X(cir), rt_origo.y + LV_CIRC_OCT7_Y(cir));
 801372e:	440b      	add	r3, r1
        lv_area_set(&edge_top_area, lt_origo.x + LV_CIRC_OCT6_X(cir), lt_origo.y + LV_CIRC_OCT6_Y(cir),
 8013730:	1a41      	subs	r1, r0, r1
 8013732:	9200      	str	r2, [sp, #0]
 8013734:	a820      	add	r0, sp, #128	; 0x80
 8013736:	b21b      	sxth	r3, r3
 8013738:	b209      	sxth	r1, r1
 801373a:	f001 fda9 	bl	8015290 <lv_area_set>
        lv_circ_next(&cir, &cir_tmp);
 801373e:	a91d      	add	r1, sp, #116	; 0x74
 8013740:	9819      	ldr	r0, [sp, #100]	; 0x64
 8013742:	f001 fe68 	bl	8015416 <lv_circ_next>
 8013746:	f7ff bbda 	b.w	8012efe <lv_draw_rect+0x7f6>
                    if(seg_size > CIRCLE_AA_NON_LINEAR_OPA_THRESHOLD) { /*Use non-linear opa mapping
 801374a:	9b11      	ldr	r3, [sp, #68]	; 0x44
                        aa_opa = antialias_get_opa_circ(seg_size, i, opa);
 801374c:	9a04      	ldr	r2, [sp, #16]
                    if(seg_size > CIRCLE_AA_NON_LINEAR_OPA_THRESHOLD) { /*Use non-linear opa mapping
 801374e:	2b01      	cmp	r3, #1
 8013750:	f000 808d 	beq.w	801386e <lv_draw_rect+0x1166>
                        aa_opa = antialias_get_opa_circ(seg_size, i, opa);
 8013754:	4618      	mov	r0, r3
 8013756:	f7fe ffb5 	bl	80126c4 <antialias_get_opa_circ>
 801375a:	4605      	mov	r5, r0
 801375c:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 8013760:	9312      	str	r3, [sp, #72]	; 0x48
                    lv_draw_px(rb_origo.x + LV_CIRC_OCT2_X(aa_p) + i, rb_origo.y + LV_CIRC_OCT2_Y(aa_p) + 1, mask,
 8013762:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8013764:	9b07      	ldr	r3, [sp, #28]
 8013766:	f9bd 6068 	ldrsh.w	r6, [sp, #104]	; 0x68
 801376a:	9500      	str	r5, [sp, #0]
 801376c:	189c      	adds	r4, r3, r2
 801376e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8013770:	441c      	add	r4, r3
 8013772:	b224      	sxth	r4, r4
 8013774:	4631      	mov	r1, r6
 8013776:	4620      	mov	r0, r4
 8013778:	f8bd 3034 	ldrh.w	r3, [sp, #52]	; 0x34
 801377c:	465a      	mov	r2, fp
 801377e:	f7fe f80f 	bl	80117a0 <lv_draw_px>
                    lv_draw_px(lb_origo.x + LV_CIRC_OCT3_X(aa_p) - i, lb_origo.y + LV_CIRC_OCT3_Y(aa_p) + 1, mask,
 8013782:	9b06      	ldr	r3, [sp, #24]
 8013784:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8013786:	9500      	str	r5, [sp, #0]
 8013788:	1a9f      	subs	r7, r3, r2
 801378a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801378c:	1aff      	subs	r7, r7, r3
 801378e:	b23f      	sxth	r7, r7
 8013790:	4631      	mov	r1, r6
 8013792:	4638      	mov	r0, r7
 8013794:	f8bd 3034 	ldrh.w	r3, [sp, #52]	; 0x34
 8013798:	465a      	mov	r2, fp
 801379a:	f7fe f801 	bl	80117a0 <lv_draw_px>
                    lv_draw_px(lt_origo.x + LV_CIRC_OCT6_X(aa_p) - i, lt_origo.y + LV_CIRC_OCT6_Y(aa_p) - 1, mask,
 801379e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80137a0:	9500      	str	r5, [sp, #0]
 80137a2:	1e5e      	subs	r6, r3, #1
 80137a4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80137a6:	1af6      	subs	r6, r6, r3
 80137a8:	b236      	sxth	r6, r6
 80137aa:	4631      	mov	r1, r6
 80137ac:	4638      	mov	r0, r7
 80137ae:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
 80137b2:	465a      	mov	r2, fp
 80137b4:	f7fd fff4 	bl	80117a0 <lv_draw_px>
                    lv_draw_px(rt_origo.x + LV_CIRC_OCT7_X(aa_p) + i, rt_origo.y + LV_CIRC_OCT7_Y(aa_p) - 1, mask,
 80137b8:	4631      	mov	r1, r6
 80137ba:	4620      	mov	r0, r4
 80137bc:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
 80137c0:	9500      	str	r5, [sp, #0]
 80137c2:	465a      	mov	r2, fp
 80137c4:	f7fd ffec 	bl	80117a0 <lv_draw_px>
                    mix          = (uint32_t)((uint32_t)(radius - out_y_seg_start + i) * 255) / height;
 80137c8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80137ca:	9a0e      	ldr	r2, [sp, #56]	; 0x38
                    aa_color_ver = lv_color_mix(mcolor, gcolor, mix);
 80137cc:	f8bd 000c 	ldrh.w	r0, [sp, #12]
                    mix          = (uint32_t)((uint32_t)(radius - out_y_seg_start + i) * 255) / height;
 80137d0:	1a9e      	subs	r6, r3, r2
 80137d2:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80137d4:	441e      	add	r6, r3
 80137d6:	ebc6 2606 	rsb	r6, r6, r6, lsl #8
 80137da:	9b05      	ldr	r3, [sp, #20]
 80137dc:	fbb6 f6f3 	udiv	r6, r6, r3
 80137e0:	b2f6      	uxtb	r6, r6
                    aa_color_ver = lv_color_mix(mcolor, gcolor, mix);
 80137e2:	4632      	mov	r2, r6
 80137e4:	4649      	mov	r1, r9
 80137e6:	f7fe ff25 	bl	8012634 <lv_color_mix>
                    lv_draw_px(rb_origo.x + LV_CIRC_OCT1_X(aa_p) + 1, rb_origo.y + LV_CIRC_OCT1_Y(aa_p) + i, mask,
 80137ea:	9b07      	ldr	r3, [sp, #28]
 80137ec:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80137ee:	9500      	str	r5, [sp, #0]
 80137f0:	1c5f      	adds	r7, r3, #1
 80137f2:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80137f4:	441f      	add	r7, r3
 80137f6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80137f8:	4413      	add	r3, r2
 80137fa:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80137fc:	4413      	add	r3, r2
 80137fe:	b21b      	sxth	r3, r3
 8013800:	9318      	str	r3, [sp, #96]	; 0x60
 8013802:	b23f      	sxth	r7, r7
                    aa_color_ver = lv_color_mix(mcolor, gcolor, mix);
 8013804:	4604      	mov	r4, r0
                    lv_draw_px(rb_origo.x + LV_CIRC_OCT1_X(aa_p) + 1, rb_origo.y + LV_CIRC_OCT1_Y(aa_p) + i, mask,
 8013806:	4603      	mov	r3, r0
 8013808:	465a      	mov	r2, fp
 801380a:	9918      	ldr	r1, [sp, #96]	; 0x60
 801380c:	4638      	mov	r0, r7
 801380e:	f7fd ffc7 	bl	80117a0 <lv_draw_px>
                    lv_draw_px(lb_origo.x + LV_CIRC_OCT4_X(aa_p) - 1, lb_origo.y + LV_CIRC_OCT4_Y(aa_p) + i, mask,
 8013812:	9b06      	ldr	r3, [sp, #24]
 8013814:	9918      	ldr	r1, [sp, #96]	; 0x60
 8013816:	9500      	str	r5, [sp, #0]
 8013818:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 801381c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801381e:	eba8 0803 	sub.w	r8, r8, r3
 8013822:	fa0f f888 	sxth.w	r8, r8
 8013826:	4623      	mov	r3, r4
 8013828:	465a      	mov	r2, fp
 801382a:	4640      	mov	r0, r8
 801382c:	f7fd ffb8 	bl	80117a0 <lv_draw_px>
                    aa_color_ver = lv_color_mix(gcolor, mcolor, mix);
 8013830:	4632      	mov	r2, r6
 8013832:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 8013836:	4648      	mov	r0, r9
 8013838:	f7fe fefc 	bl	8012634 <lv_color_mix>
                    lv_draw_px(lt_origo.x + LV_CIRC_OCT5_X(aa_p) - 1, lt_origo.y + LV_CIRC_OCT5_Y(aa_p) - i, mask,
 801383c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801383e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8013840:	9500      	str	r5, [sp, #0]
 8013842:	1a9b      	subs	r3, r3, r2
 8013844:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8013846:	1a9b      	subs	r3, r3, r2
 8013848:	b21e      	sxth	r6, r3
                    aa_color_ver = lv_color_mix(gcolor, mcolor, mix);
 801384a:	4604      	mov	r4, r0
                    lv_draw_px(lt_origo.x + LV_CIRC_OCT5_X(aa_p) - 1, lt_origo.y + LV_CIRC_OCT5_Y(aa_p) - i, mask,
 801384c:	4603      	mov	r3, r0
 801384e:	465a      	mov	r2, fp
 8013850:	4631      	mov	r1, r6
 8013852:	4640      	mov	r0, r8
 8013854:	f7fd ffa4 	bl	80117a0 <lv_draw_px>
                    lv_draw_px(rt_origo.x + LV_CIRC_OCT8_X(aa_p) + 1, rt_origo.y + LV_CIRC_OCT8_Y(aa_p) - i, mask,
 8013858:	4623      	mov	r3, r4
 801385a:	9500      	str	r5, [sp, #0]
 801385c:	465a      	mov	r2, fp
 801385e:	4631      	mov	r1, r6
 8013860:	4638      	mov	r0, r7
 8013862:	f7fd ff9d 	bl	80117a0 <lv_draw_px>
 8013866:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8013868:	3301      	adds	r3, #1
 801386a:	9310      	str	r3, [sp, #64]	; 0x40
 801386c:	e6d7      	b.n	801361e <lv_draw_rect+0xf16>
                        aa_opa = opa - lv_draw_aa_get_opa(seg_size, i, opa);
 801386e:	9811      	ldr	r0, [sp, #68]	; 0x44
 8013870:	f7fd ff54 	bl	801171c <lv_draw_aa_get_opa>
 8013874:	9b04      	ldr	r3, [sp, #16]
 8013876:	1a18      	subs	r0, r3, r0
 8013878:	b2c5      	uxtb	r5, r0
 801387a:	e76f      	b.n	801375c <lv_draw_rect+0x1054>
                mix       = (uint32_t)((uint32_t)(coords->y2 - edge_top_area.y1) * 255) / height;
 801387c:	f9ba 2006 	ldrsh.w	r2, [sl, #6]
 8013880:	9b05      	ldr	r3, [sp, #20]
                act_color = lv_color_mix(mcolor, gcolor, mix);
 8013882:	f8bd 000c 	ldrh.w	r0, [sp, #12]
                mix       = (uint32_t)((uint32_t)(coords->y2 - edge_top_area.y1) * 255) / height;
 8013886:	1a52      	subs	r2, r2, r1
 8013888:	ebc2 2202 	rsb	r2, r2, r2, lsl #8
                act_color = lv_color_mix(mcolor, gcolor, mix);
 801388c:	4649      	mov	r1, r9
                mix       = (uint32_t)((uint32_t)(coords->y2 - edge_top_area.y1) * 255) / height;
 801388e:	fbb2 f2f3 	udiv	r2, r2, r3
                act_color = lv_color_mix(mcolor, gcolor, mix);
 8013892:	b2d2      	uxtb	r2, r2
 8013894:	f7fe fece 	bl	8012634 <lv_color_mix>
 8013898:	4602      	mov	r2, r0
 801389a:	f000 be36 	b.w	801450a <lv_draw_rect+0x1e02>
                mix       = (uint32_t)((uint32_t)(coords->y2 - mid_top_area.y1) * 255) / height;
 801389e:	f9bd 308a 	ldrsh.w	r3, [sp, #138]	; 0x8a
 80138a2:	f9ba 2006 	ldrsh.w	r2, [sl, #6]
                act_color = lv_color_mix(mcolor, gcolor, mix);
 80138a6:	f8bd 000c 	ldrh.w	r0, [sp, #12]
                mix       = (uint32_t)((uint32_t)(coords->y2 - mid_top_area.y1) * 255) / height;
 80138aa:	1ad2      	subs	r2, r2, r3
 80138ac:	ebc2 2202 	rsb	r2, r2, r2, lsl #8
 80138b0:	9b05      	ldr	r3, [sp, #20]
 80138b2:	fbb2 f2f3 	udiv	r2, r2, r3
                act_color = lv_color_mix(mcolor, gcolor, mix);
 80138b6:	4649      	mov	r1, r9
 80138b8:	b2d2      	uxtb	r2, r2
 80138ba:	f7fe febb 	bl	8012634 <lv_color_mix>
 80138be:	4602      	mov	r2, r0
 80138c0:	e6d8      	b.n	8013674 <lv_draw_rect+0xf6c>
                mix       = (uint32_t)((uint32_t)(coords->y2 - mid_bot_area.y1) * 255) / height;
 80138c2:	f9bd 3092 	ldrsh.w	r3, [sp, #146]	; 0x92
 80138c6:	f9ba 2006 	ldrsh.w	r2, [sl, #6]
                act_color = lv_color_mix(mcolor, gcolor, mix);
 80138ca:	f8bd 000c 	ldrh.w	r0, [sp, #12]
                mix       = (uint32_t)((uint32_t)(coords->y2 - mid_bot_area.y1) * 255) / height;
 80138ce:	1ad2      	subs	r2, r2, r3
 80138d0:	ebc2 2202 	rsb	r2, r2, r2, lsl #8
 80138d4:	9b05      	ldr	r3, [sp, #20]
 80138d6:	fbb2 f2f3 	udiv	r2, r2, r3
                act_color = lv_color_mix(mcolor, gcolor, mix);
 80138da:	4649      	mov	r1, r9
 80138dc:	b2d2      	uxtb	r2, r2
 80138de:	f7fe fea9 	bl	8012634 <lv_color_mix>
 80138e2:	4602      	mov	r2, r0
 80138e4:	e6d3      	b.n	801368e <lv_draw_rect+0xf86>
                mix       = (uint32_t)((uint32_t)(coords->y2 - edge_bot_area.y1) * 255) / height;
 80138e6:	f9bd 309a 	ldrsh.w	r3, [sp, #154]	; 0x9a
 80138ea:	f9ba 2006 	ldrsh.w	r2, [sl, #6]
                act_color = lv_color_mix(mcolor, gcolor, mix);
 80138ee:	f8bd 000c 	ldrh.w	r0, [sp, #12]
                mix       = (uint32_t)((uint32_t)(coords->y2 - edge_bot_area.y1) * 255) / height;
 80138f2:	1ad2      	subs	r2, r2, r3
 80138f4:	ebc2 2202 	rsb	r2, r2, r2, lsl #8
 80138f8:	9b05      	ldr	r3, [sp, #20]
 80138fa:	fbb2 f2f3 	udiv	r2, r2, r3
                act_color = lv_color_mix(mcolor, gcolor, mix);
 80138fe:	4649      	mov	r1, r9
 8013900:	b2d2      	uxtb	r2, r2
 8013902:	f7fe fe97 	bl	8012634 <lv_color_mix>
 8013906:	4602      	mov	r2, r0
 8013908:	e6d0      	b.n	80136ac <lv_draw_rect+0xfa4>
        mix       = (uint32_t)((uint32_t)(coords->y2 - edge_top_area.y1) * 255) / height;
 801390a:	f9bd 3082 	ldrsh.w	r3, [sp, #130]	; 0x82
 801390e:	f9ba 2006 	ldrsh.w	r2, [sl, #6]
        act_color = lv_color_mix(mcolor, gcolor, mix);
 8013912:	f8bd 000c 	ldrh.w	r0, [sp, #12]
        mix       = (uint32_t)((uint32_t)(coords->y2 - edge_top_area.y1) * 255) / height;
 8013916:	1ad2      	subs	r2, r2, r3
 8013918:	ebc2 2202 	rsb	r2, r2, r2, lsl #8
 801391c:	9b05      	ldr	r3, [sp, #20]
 801391e:	fbb2 f2f3 	udiv	r2, r2, r3
        act_color = lv_color_mix(mcolor, gcolor, mix);
 8013922:	4649      	mov	r1, r9
 8013924:	b2d2      	uxtb	r2, r2
 8013926:	f7fe fe85 	bl	8012634 <lv_color_mix>
 801392a:	4602      	mov	r2, r0
 801392c:	f7ff baf3 	b.w	8012f16 <lv_draw_rect+0x80e>
            mix       = (uint32_t)((uint32_t)(coords->y2 - mid_top_area.y1) * 255) / height;
 8013930:	f9ba 2006 	ldrsh.w	r2, [sl, #6]
            act_color = lv_color_mix(mcolor, gcolor, mix);
 8013934:	f8bd 000c 	ldrh.w	r0, [sp, #12]
            mix       = (uint32_t)((uint32_t)(coords->y2 - mid_top_area.y1) * 255) / height;
 8013938:	1ad2      	subs	r2, r2, r3
 801393a:	ebc2 2202 	rsb	r2, r2, r2, lsl #8
 801393e:	9b05      	ldr	r3, [sp, #20]
 8013940:	fbb2 f2f3 	udiv	r2, r2, r3
            act_color = lv_color_mix(mcolor, gcolor, mix);
 8013944:	4649      	mov	r1, r9
 8013946:	b2d2      	uxtb	r2, r2
 8013948:	f7fe fe74 	bl	8012634 <lv_color_mix>
 801394c:	4602      	mov	r2, r0
 801394e:	f7ff baf3 	b.w	8012f38 <lv_draw_rect+0x830>
        mix       = (uint32_t)((uint32_t)(coords->y2 - mid_bot_area.y1) * 255) / height;
 8013952:	f9bd 3092 	ldrsh.w	r3, [sp, #146]	; 0x92
 8013956:	f9ba 2006 	ldrsh.w	r2, [sl, #6]
        act_color = lv_color_mix(mcolor, gcolor, mix);
 801395a:	f8bd 000c 	ldrh.w	r0, [sp, #12]
        mix       = (uint32_t)((uint32_t)(coords->y2 - mid_bot_area.y1) * 255) / height;
 801395e:	1ad2      	subs	r2, r2, r3
 8013960:	ebc2 2202 	rsb	r2, r2, r2, lsl #8
 8013964:	9b05      	ldr	r3, [sp, #20]
 8013966:	fbb2 f2f3 	udiv	r2, r2, r3
        act_color = lv_color_mix(mcolor, gcolor, mix);
 801396a:	4649      	mov	r1, r9
 801396c:	b2d2      	uxtb	r2, r2
 801396e:	f7fe fe61 	bl	8012634 <lv_color_mix>
 8013972:	4602      	mov	r2, r0
 8013974:	f7ff baeb 	b.w	8012f4e <lv_draw_rect+0x846>
            mix       = (uint32_t)((uint32_t)(coords->y2 - edge_bot_area.y1) * 255) / height;
 8013978:	f9ba 2006 	ldrsh.w	r2, [sl, #6]
            act_color = lv_color_mix(mcolor, gcolor, mix);
 801397c:	f8bd 000c 	ldrh.w	r0, [sp, #12]
            mix       = (uint32_t)((uint32_t)(coords->y2 - edge_bot_area.y1) * 255) / height;
 8013980:	1ad2      	subs	r2, r2, r3
 8013982:	ebc2 2202 	rsb	r2, r2, r2, lsl #8
 8013986:	9b05      	ldr	r3, [sp, #20]
 8013988:	fbb2 f2f3 	udiv	r2, r2, r3
            act_color = lv_color_mix(mcolor, gcolor, mix);
 801398c:	4649      	mov	r1, r9
 801398e:	b2d2      	uxtb	r2, r2
 8013990:	f7fe fe50 	bl	8012634 <lv_color_mix>
 8013994:	4602      	mov	r2, r0
 8013996:	f7ff baeb 	b.w	8012f70 <lv_draw_rect+0x868>
            lv_opa_t aa_opa = opa - lv_draw_aa_get_opa(seg_size, i, opa);
 801399a:	9a04      	ldr	r2, [sp, #16]
 801399c:	9813      	ldr	r0, [sp, #76]	; 0x4c
 801399e:	f7fd febd 	bl	801171c <lv_draw_aa_get_opa>
 80139a2:	9b04      	ldr	r3, [sp, #16]
            lv_draw_px(rb_origo.x + LV_CIRC_OCT2_X(aa_p) + i, rb_origo.y + LV_CIRC_OCT2_Y(aa_p) + 1, mask,
 80139a4:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80139a6:	f9bd 5058 	ldrsh.w	r5, [sp, #88]	; 0x58
            lv_opa_t aa_opa = opa - lv_draw_aa_get_opa(seg_size, i, opa);
 80139aa:	1a18      	subs	r0, r3, r0
 80139ac:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 80139b0:	9311      	str	r3, [sp, #68]	; 0x44
            lv_draw_px(rb_origo.x + LV_CIRC_OCT2_X(aa_p) + i, rb_origo.y + LV_CIRC_OCT2_Y(aa_p) + 1, mask,
 80139b2:	9b07      	ldr	r3, [sp, #28]
 80139b4:	189c      	adds	r4, r3, r2
 80139b6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80139b8:	441c      	add	r4, r3
            lv_opa_t aa_opa = opa - lv_draw_aa_get_opa(seg_size, i, opa);
 80139ba:	b2c6      	uxtb	r6, r0
 80139bc:	b224      	sxth	r4, r4
            lv_draw_px(rb_origo.x + LV_CIRC_OCT2_X(aa_p) + i, rb_origo.y + LV_CIRC_OCT2_Y(aa_p) + 1, mask,
 80139be:	4629      	mov	r1, r5
 80139c0:	4620      	mov	r0, r4
 80139c2:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
 80139c6:	9600      	str	r6, [sp, #0]
 80139c8:	465a      	mov	r2, fp
 80139ca:	f7fd fee9 	bl	80117a0 <lv_draw_px>
            lv_draw_px(lb_origo.x + LV_CIRC_OCT3_X(aa_p) - i, lb_origo.y + LV_CIRC_OCT3_Y(aa_p) + 1, mask,
 80139ce:	9b06      	ldr	r3, [sp, #24]
 80139d0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80139d2:	9600      	str	r6, [sp, #0]
 80139d4:	1a9f      	subs	r7, r3, r2
 80139d6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80139d8:	1aff      	subs	r7, r7, r3
 80139da:	b23f      	sxth	r7, r7
 80139dc:	4629      	mov	r1, r5
 80139de:	4638      	mov	r0, r7
 80139e0:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
 80139e4:	465a      	mov	r2, fp
 80139e6:	f7fd fedb 	bl	80117a0 <lv_draw_px>
            lv_draw_px(lt_origo.x + LV_CIRC_OCT6_X(aa_p) - i, lt_origo.y + LV_CIRC_OCT6_Y(aa_p) - 1, mask,
 80139ea:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80139ec:	9600      	str	r6, [sp, #0]
 80139ee:	1e5d      	subs	r5, r3, #1
 80139f0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80139f2:	1aed      	subs	r5, r5, r3
 80139f4:	b22d      	sxth	r5, r5
 80139f6:	4629      	mov	r1, r5
 80139f8:	4638      	mov	r0, r7
 80139fa:	f8bd 3034 	ldrh.w	r3, [sp, #52]	; 0x34
 80139fe:	465a      	mov	r2, fp
 8013a00:	f7fd fece 	bl	80117a0 <lv_draw_px>
            lv_draw_px(rt_origo.x + LV_CIRC_OCT7_X(aa_p) + i, rt_origo.y + LV_CIRC_OCT7_Y(aa_p) - 1, mask,
 8013a04:	4629      	mov	r1, r5
 8013a06:	4620      	mov	r0, r4
 8013a08:	f8bd 3034 	ldrh.w	r3, [sp, #52]	; 0x34
 8013a0c:	9600      	str	r6, [sp, #0]
 8013a0e:	465a      	mov	r2, fp
 8013a10:	f7fd fec6 	bl	80117a0 <lv_draw_px>
            mix          = (uint32_t)((uint32_t)(radius - out_y_seg_start + i) * 255) / height;
 8013a14:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013a16:	9a0e      	ldr	r2, [sp, #56]	; 0x38
            aa_color_ver = lv_color_mix(mcolor, gcolor, mix);
 8013a18:	f8bd 000c 	ldrh.w	r0, [sp, #12]
            mix          = (uint32_t)((uint32_t)(radius - out_y_seg_start + i) * 255) / height;
 8013a1c:	1a9d      	subs	r5, r3, r2
 8013a1e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8013a20:	441d      	add	r5, r3
 8013a22:	ebc5 2505 	rsb	r5, r5, r5, lsl #8
 8013a26:	9b05      	ldr	r3, [sp, #20]
 8013a28:	fbb5 f5f3 	udiv	r5, r5, r3
 8013a2c:	b2ed      	uxtb	r5, r5
            aa_color_ver = lv_color_mix(mcolor, gcolor, mix);
 8013a2e:	462a      	mov	r2, r5
 8013a30:	4649      	mov	r1, r9
 8013a32:	f7fe fdff 	bl	8012634 <lv_color_mix>
            lv_draw_px(rb_origo.x + LV_CIRC_OCT1_X(aa_p) + 1, rb_origo.y + LV_CIRC_OCT1_Y(aa_p) + i, mask, aa_color_ver,
 8013a36:	9b07      	ldr	r3, [sp, #28]
 8013a38:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8013a3a:	9600      	str	r6, [sp, #0]
 8013a3c:	1c5f      	adds	r7, r3, #1
 8013a3e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8013a40:	441f      	add	r7, r3
 8013a42:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8013a44:	4413      	add	r3, r2
 8013a46:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8013a48:	4413      	add	r3, r2
 8013a4a:	b21b      	sxth	r3, r3
 8013a4c:	9315      	str	r3, [sp, #84]	; 0x54
 8013a4e:	b23f      	sxth	r7, r7
            aa_color_ver = lv_color_mix(mcolor, gcolor, mix);
 8013a50:	4604      	mov	r4, r0
            lv_draw_px(rb_origo.x + LV_CIRC_OCT1_X(aa_p) + 1, rb_origo.y + LV_CIRC_OCT1_Y(aa_p) + i, mask, aa_color_ver,
 8013a52:	4603      	mov	r3, r0
 8013a54:	465a      	mov	r2, fp
 8013a56:	9915      	ldr	r1, [sp, #84]	; 0x54
 8013a58:	4638      	mov	r0, r7
 8013a5a:	f7fd fea1 	bl	80117a0 <lv_draw_px>
            lv_draw_px(lb_origo.x + LV_CIRC_OCT4_X(aa_p) - 1, lb_origo.y + LV_CIRC_OCT4_Y(aa_p) + i, mask, aa_color_ver,
 8013a5e:	9b06      	ldr	r3, [sp, #24]
 8013a60:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8013a62:	9915      	ldr	r1, [sp, #84]	; 0x54
 8013a64:	9600      	str	r6, [sp, #0]
 8013a66:	3b01      	subs	r3, #1
 8013a68:	1a9b      	subs	r3, r3, r2
 8013a6a:	b21b      	sxth	r3, r3
 8013a6c:	9314      	str	r3, [sp, #80]	; 0x50
 8013a6e:	465a      	mov	r2, fp
 8013a70:	4623      	mov	r3, r4
 8013a72:	9814      	ldr	r0, [sp, #80]	; 0x50
 8013a74:	f7fd fe94 	bl	80117a0 <lv_draw_px>
            aa_color_ver = lv_color_mix(gcolor, mcolor, mix);
 8013a78:	462a      	mov	r2, r5
 8013a7a:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 8013a7e:	4648      	mov	r0, r9
 8013a80:	f7fe fdd8 	bl	8012634 <lv_color_mix>
            lv_draw_px(lt_origo.x + LV_CIRC_OCT5_X(aa_p) - 1, lt_origo.y + LV_CIRC_OCT5_Y(aa_p) - i, mask, aa_color_ver,
 8013a84:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8013a86:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8013a88:	9600      	str	r6, [sp, #0]
 8013a8a:	1a9b      	subs	r3, r3, r2
 8013a8c:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8013a8e:	1a9b      	subs	r3, r3, r2
 8013a90:	b21d      	sxth	r5, r3
            aa_color_ver = lv_color_mix(gcolor, mcolor, mix);
 8013a92:	4604      	mov	r4, r0
            lv_draw_px(lt_origo.x + LV_CIRC_OCT5_X(aa_p) - 1, lt_origo.y + LV_CIRC_OCT5_Y(aa_p) - i, mask, aa_color_ver,
 8013a94:	4603      	mov	r3, r0
 8013a96:	465a      	mov	r2, fp
 8013a98:	4629      	mov	r1, r5
 8013a9a:	9814      	ldr	r0, [sp, #80]	; 0x50
 8013a9c:	f7fd fe80 	bl	80117a0 <lv_draw_px>
            lv_draw_px(rt_origo.x + LV_CIRC_OCT8_X(aa_p) + 1, rt_origo.y + LV_CIRC_OCT8_Y(aa_p) - i, mask, aa_color_ver,
 8013aa0:	4623      	mov	r3, r4
 8013aa2:	9600      	str	r6, [sp, #0]
 8013aa4:	465a      	mov	r2, fp
 8013aa6:	4629      	mov	r1, r5
 8013aa8:	4638      	mov	r0, r7
 8013aaa:	f7fd fe79 	bl	80117a0 <lv_draw_px>
 8013aae:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8013ab0:	3301      	adds	r3, #1
 8013ab2:	9310      	str	r3, [sp, #64]	; 0x40
 8013ab4:	f7ff bab8 	b.w	8013028 <lv_draw_rect+0x920>
    corner_size++;
 8013ab8:	3301      	adds	r3, #1
 8013aba:	b29b      	uxth	r3, r3
 8013abc:	9303      	str	r3, [sp, #12]
    if(part & LV_BORDER_TOP)
 8013abe:	f002 03ff 	and.w	r3, r2, #255	; 0xff
 8013ac2:	9305      	str	r3, [sp, #20]
 8013ac4:	f8ba 3002 	ldrh.w	r3, [sl, #2]
 8013ac8:	2a00      	cmp	r2, #0
 8013aca:	f000 8143 	beq.w	8013d54 <lv_draw_rect+0x164c>
        work_area.y1 = coords->y1 + corner_size;
 8013ace:	9a03      	ldr	r2, [sp, #12]
 8013ad0:	4413      	add	r3, r2
        work_area.y1 = coords->y1 + radius;
 8013ad2:	f8ad 309a 	strh.w	r3, [sp, #154]	; 0x9a
    if(part & LV_BORDER_BOTTOM)
 8013ad6:	f015 0301 	ands.w	r3, r5, #1
        work_area.y2 = coords->y2 - corner_size;
 8013ada:	bf18      	it	ne
 8013adc:	9a03      	ldrne	r2, [sp, #12]
    if(part & LV_BORDER_BOTTOM)
 8013ade:	9306      	str	r3, [sp, #24]
 8013ae0:	f8ba 3006 	ldrh.w	r3, [sl, #6]
        work_area.y2 = coords->y2 - corner_size;
 8013ae4:	bf14      	ite	ne
 8013ae6:	1a9b      	subne	r3, r3, r2
        work_area.y2 = coords->y2 - radius;
 8013ae8:	eba3 0309 	subeq.w	r3, r3, r9
    if(part & LV_BORDER_LEFT) {
 8013aec:	076a      	lsls	r2, r5, #29
        work_area.y2 = coords->y2 - radius;
 8013aee:	f8ad 309e 	strh.w	r3, [sp, #158]	; 0x9e
    if(part & LV_BORDER_LEFT) {
 8013af2:	d50c      	bpl.n	8013b0e <lv_draw_rect+0x1406>
        work_area.x1 = coords->x1;
 8013af4:	f9ba 3000 	ldrsh.w	r3, [sl]
 8013af8:	f8ad 3098 	strh.w	r3, [sp, #152]	; 0x98
        work_area.x2 = work_area.x1 + bwidth;
 8013afc:	4433      	add	r3, r6
 8013afe:	f8ad 309c 	strh.w	r3, [sp, #156]	; 0x9c
        lv_draw_fill(&work_area, mask, color, opa);
 8013b02:	463a      	mov	r2, r7
 8013b04:	4623      	mov	r3, r4
 8013b06:	4659      	mov	r1, fp
 8013b08:	a826      	add	r0, sp, #152	; 0x98
 8013b0a:	f7fd fe98 	bl	801183e <lv_draw_fill>
    if(part & LV_BORDER_RIGHT) {
 8013b0e:	072b      	lsls	r3, r5, #28
 8013b10:	d50c      	bpl.n	8013b2c <lv_draw_rect+0x1424>
        work_area.x2 = coords->x2;
 8013b12:	f9ba 3004 	ldrsh.w	r3, [sl, #4]
 8013b16:	f8ad 309c 	strh.w	r3, [sp, #156]	; 0x9c
        work_area.x1 = work_area.x2 - bwidth;
 8013b1a:	a828      	add	r0, sp, #160	; 0xa0
 8013b1c:	1b9b      	subs	r3, r3, r6
 8013b1e:	f820 3d08 	strh.w	r3, [r0, #-8]!
        lv_draw_fill(&work_area, mask, color, opa);
 8013b22:	463a      	mov	r2, r7
 8013b24:	4623      	mov	r3, r4
 8013b26:	4659      	mov	r1, fp
 8013b28:	f7fd fe89 	bl	801183e <lv_draw_fill>
    work_area.x1 = coords->x1 + corner_size - length_corr;
 8013b2c:	f8bd 3010 	ldrh.w	r3, [sp, #16]
 8013b30:	9a03      	ldr	r2, [sp, #12]
 8013b32:	f8ba 1000 	ldrh.w	r1, [sl]
 8013b36:	1ad2      	subs	r2, r2, r3
 8013b38:	440a      	add	r2, r1
 8013b3a:	f8ad 2098 	strh.w	r2, [sp, #152]	; 0x98
    work_area.x2 = coords->x2 - corner_size + length_corr;
 8013b3e:	f8ba 2004 	ldrh.w	r2, [sl, #4]
 8013b42:	4413      	add	r3, r2
 8013b44:	9a03      	ldr	r2, [sp, #12]
 8013b46:	1a9b      	subs	r3, r3, r2
 8013b48:	f8ad 309c 	strh.w	r3, [sp, #156]	; 0x9c
    if(part & LV_BORDER_TOP) {
 8013b4c:	9b05      	ldr	r3, [sp, #20]
 8013b4e:	b163      	cbz	r3, 8013b6a <lv_draw_rect+0x1462>
        work_area.y1 = coords->y1;
 8013b50:	f9ba 3002 	ldrsh.w	r3, [sl, #2]
 8013b54:	f8ad 309a 	strh.w	r3, [sp, #154]	; 0x9a
        work_area.y2 = coords->y1 + bwidth;
 8013b58:	4433      	add	r3, r6
 8013b5a:	f8ad 309e 	strh.w	r3, [sp, #158]	; 0x9e
        lv_draw_fill(&work_area, mask, color, opa);
 8013b5e:	463a      	mov	r2, r7
 8013b60:	4623      	mov	r3, r4
 8013b62:	4659      	mov	r1, fp
 8013b64:	a826      	add	r0, sp, #152	; 0x98
 8013b66:	f7fd fe6a 	bl	801183e <lv_draw_fill>
    if(part & LV_BORDER_BOTTOM) {
 8013b6a:	9b06      	ldr	r3, [sp, #24]
 8013b6c:	b163      	cbz	r3, 8013b88 <lv_draw_rect+0x1480>
        work_area.y2 = coords->y2;
 8013b6e:	f9ba 3006 	ldrsh.w	r3, [sl, #6]
 8013b72:	f8ad 309e 	strh.w	r3, [sp, #158]	; 0x9e
        work_area.y1 = work_area.y2 - bwidth;
 8013b76:	1b9b      	subs	r3, r3, r6
 8013b78:	f8ad 309a 	strh.w	r3, [sp, #154]	; 0x9a
        lv_draw_fill(&work_area, mask, color, opa);
 8013b7c:	463a      	mov	r2, r7
 8013b7e:	4623      	mov	r3, r4
 8013b80:	4659      	mov	r1, fp
 8013b82:	a826      	add	r0, sp, #152	; 0x98
 8013b84:	f7fd fe5b 	bl	801183e <lv_draw_fill>
    if(length_corr != 0) {
 8013b88:	9b04      	ldr	r3, [sp, #16]
 8013b8a:	2b00      	cmp	r3, #0
 8013b8c:	d07b      	beq.n	8013c86 <lv_draw_rect+0x157e>
        if((part & LV_BORDER_TOP) && (part & LV_BORDER_LEFT)) {
 8013b8e:	f005 0306 	and.w	r3, r5, #6
 8013b92:	2b06      	cmp	r3, #6
 8013b94:	d119      	bne.n	8013bca <lv_draw_rect+0x14c2>
            work_area.x1 = coords->x1;
 8013b96:	f9ba 2000 	ldrsh.w	r2, [sl]
 8013b9a:	f8ad 2098 	strh.w	r2, [sp, #152]	; 0x98
            work_area.x2 = coords->x1 + radius + aa;
 8013b9e:	fa1f f388 	uxth.w	r3, r8
 8013ba2:	441a      	add	r2, r3
 8013ba4:	444a      	add	r2, r9
 8013ba6:	f8ad 209c 	strh.w	r2, [sp, #156]	; 0x9c
            work_area.y1 = coords->y1 + radius + 1 + aa;
 8013baa:	f8ba 2002 	ldrh.w	r2, [sl, #2]
 8013bae:	1c51      	adds	r1, r2, #1
 8013bb0:	440b      	add	r3, r1
 8013bb2:	444b      	add	r3, r9
            work_area.y2 = coords->y1 + bwidth;
 8013bb4:	4432      	add	r2, r6
            work_area.y1 = coords->y1 + radius + 1 + aa;
 8013bb6:	f8ad 309a 	strh.w	r3, [sp, #154]	; 0x9a
            work_area.y2 = coords->y1 + bwidth;
 8013bba:	f8ad 209e 	strh.w	r2, [sp, #158]	; 0x9e
            lv_draw_fill(&work_area, mask, color, opa);
 8013bbe:	4623      	mov	r3, r4
 8013bc0:	463a      	mov	r2, r7
 8013bc2:	4659      	mov	r1, fp
 8013bc4:	a826      	add	r0, sp, #152	; 0x98
 8013bc6:	f7fd fe3a 	bl	801183e <lv_draw_fill>
        if((part & LV_BORDER_TOP) && (part & LV_BORDER_RIGHT)) {
 8013bca:	f005 030a 	and.w	r3, r5, #10
 8013bce:	2b0a      	cmp	r3, #10
 8013bd0:	d11a      	bne.n	8013c08 <lv_draw_rect+0x1500>
            work_area.x1 = coords->x2 - radius - aa;
 8013bd2:	f9ba 1004 	ldrsh.w	r1, [sl, #4]
            work_area.x2 = coords->x2;
 8013bd6:	f8ad 109c 	strh.w	r1, [sp, #156]	; 0x9c
            work_area.x1 = coords->x2 - radius - aa;
 8013bda:	fa1f f388 	uxth.w	r3, r8
 8013bde:	eba1 0209 	sub.w	r2, r1, r9
 8013be2:	1ad2      	subs	r2, r2, r3
 8013be4:	f8ad 2098 	strh.w	r2, [sp, #152]	; 0x98
            work_area.y1 = coords->y1 + radius + 1 + aa;
 8013be8:	f8ba 2002 	ldrh.w	r2, [sl, #2]
 8013bec:	1c51      	adds	r1, r2, #1
 8013bee:	440b      	add	r3, r1
 8013bf0:	444b      	add	r3, r9
            work_area.y2 = coords->y1 + bwidth;
 8013bf2:	4432      	add	r2, r6
            work_area.y1 = coords->y1 + radius + 1 + aa;
 8013bf4:	f8ad 309a 	strh.w	r3, [sp, #154]	; 0x9a
            work_area.y2 = coords->y1 + bwidth;
 8013bf8:	f8ad 209e 	strh.w	r2, [sp, #158]	; 0x9e
            lv_draw_fill(&work_area, mask, color, opa);
 8013bfc:	4623      	mov	r3, r4
 8013bfe:	463a      	mov	r2, r7
 8013c00:	4659      	mov	r1, fp
 8013c02:	a826      	add	r0, sp, #152	; 0x98
 8013c04:	f7fd fe1b 	bl	801183e <lv_draw_fill>
        if((part & LV_BORDER_BOTTOM) && (part & LV_BORDER_LEFT)) {
 8013c08:	f005 0305 	and.w	r3, r5, #5
 8013c0c:	2b05      	cmp	r3, #5
 8013c0e:	d11a      	bne.n	8013c46 <lv_draw_rect+0x153e>
            work_area.x1 = coords->x1;
 8013c10:	f9ba 2000 	ldrsh.w	r2, [sl]
            work_area.y1 = coords->y2 - bwidth;
 8013c14:	f8ba 3006 	ldrh.w	r3, [sl, #6]
            work_area.x1 = coords->x1;
 8013c18:	f8ad 2098 	strh.w	r2, [sp, #152]	; 0x98
            work_area.x2 = coords->x1 + radius + aa;
 8013c1c:	fa1f f188 	uxth.w	r1, r8
 8013c20:	440a      	add	r2, r1
 8013c22:	444a      	add	r2, r9
            work_area.y2 = coords->y2 - radius - 1 - aa;
 8013c24:	43c9      	mvns	r1, r1
            work_area.x2 = coords->x1 + radius + aa;
 8013c26:	f8ad 209c 	strh.w	r2, [sp, #156]	; 0x9c
            work_area.y1 = coords->y2 - bwidth;
 8013c2a:	1b9a      	subs	r2, r3, r6
            work_area.y2 = coords->y2 - radius - 1 - aa;
 8013c2c:	440b      	add	r3, r1
 8013c2e:	eba3 0309 	sub.w	r3, r3, r9
            work_area.y1 = coords->y2 - bwidth;
 8013c32:	f8ad 209a 	strh.w	r2, [sp, #154]	; 0x9a
            work_area.y2 = coords->y2 - radius - 1 - aa;
 8013c36:	f8ad 309e 	strh.w	r3, [sp, #158]	; 0x9e
            lv_draw_fill(&work_area, mask, color, opa);
 8013c3a:	463a      	mov	r2, r7
 8013c3c:	4623      	mov	r3, r4
 8013c3e:	4659      	mov	r1, fp
 8013c40:	a826      	add	r0, sp, #152	; 0x98
 8013c42:	f7fd fdfc 	bl	801183e <lv_draw_fill>
        if((part & LV_BORDER_BOTTOM) && (part & LV_BORDER_RIGHT)) {
 8013c46:	f005 0309 	and.w	r3, r5, #9
 8013c4a:	2b09      	cmp	r3, #9
 8013c4c:	d11b      	bne.n	8013c86 <lv_draw_rect+0x157e>
            work_area.x1 = coords->x2 - radius - aa;
 8013c4e:	f9ba 1004 	ldrsh.w	r1, [sl, #4]
            work_area.x2 = coords->x2;
 8013c52:	f8ad 109c 	strh.w	r1, [sp, #156]	; 0x9c
            work_area.x1 = coords->x2 - radius - aa;
 8013c56:	eba1 0309 	sub.w	r3, r1, r9
 8013c5a:	fa1f f288 	uxth.w	r2, r8
 8013c5e:	1a9b      	subs	r3, r3, r2
 8013c60:	f8ad 3098 	strh.w	r3, [sp, #152]	; 0x98
            work_area.y1 = coords->y2 - bwidth;
 8013c64:	f8ba 3006 	ldrh.w	r3, [sl, #6]
            work_area.y2 = coords->y2 - radius - 1 - aa;
 8013c68:	43d2      	mvns	r2, r2
            work_area.y1 = coords->y2 - bwidth;
 8013c6a:	1b9e      	subs	r6, r3, r6
            work_area.y2 = coords->y2 - radius - 1 - aa;
 8013c6c:	4413      	add	r3, r2
 8013c6e:	eba3 0909 	sub.w	r9, r3, r9
            lv_draw_fill(&work_area, mask, color, opa);
 8013c72:	463a      	mov	r2, r7
 8013c74:	4623      	mov	r3, r4
 8013c76:	4659      	mov	r1, fp
 8013c78:	a826      	add	r0, sp, #152	; 0x98
            work_area.y1 = coords->y2 - bwidth;
 8013c7a:	f8ad 609a 	strh.w	r6, [sp, #154]	; 0x9a
            work_area.y2 = coords->y2 - radius - 1 - aa;
 8013c7e:	f8ad 909e 	strh.w	r9, [sp, #158]	; 0x9e
            lv_draw_fill(&work_area, mask, color, opa);
 8013c82:	f7fd fddc 	bl	801183e <lv_draw_fill>
    if(style->body.radius == 0) {
 8013c86:	9b02      	ldr	r3, [sp, #8]
 8013c88:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8013c8c:	2b00      	cmp	r3, #0
 8013c8e:	f47f aaef 	bne.w	8013270 <lv_draw_rect+0xb68>
        if(part & (LV_BORDER_TOP | LV_BORDER_LEFT)) {
 8013c92:	f015 0f06 	tst.w	r5, #6
 8013c96:	d015      	beq.n	8013cc4 <lv_draw_rect+0x15bc>
            work_area.x1 = coords->x1;
 8013c98:	f9ba 2000 	ldrsh.w	r2, [sl]
 8013c9c:	f8ad 2098 	strh.w	r2, [sp, #152]	; 0x98
            work_area.x2 = coords->x1 + aa;
 8013ca0:	fa1f f388 	uxth.w	r3, r8
 8013ca4:	441a      	add	r2, r3
 8013ca6:	f8ad 209c 	strh.w	r2, [sp, #156]	; 0x9c
            work_area.y1 = coords->y1;
 8013caa:	f9ba 2002 	ldrsh.w	r2, [sl, #2]
 8013cae:	f8ad 209a 	strh.w	r2, [sp, #154]	; 0x9a
            work_area.y2 = coords->y1 + aa;
 8013cb2:	4413      	add	r3, r2
 8013cb4:	f8ad 309e 	strh.w	r3, [sp, #158]	; 0x9e
            lv_draw_fill(&work_area, mask, color, opa);
 8013cb8:	463a      	mov	r2, r7
 8013cba:	4623      	mov	r3, r4
 8013cbc:	4659      	mov	r1, fp
 8013cbe:	a826      	add	r0, sp, #152	; 0x98
 8013cc0:	f7fd fdbd 	bl	801183e <lv_draw_fill>
        if(part & (LV_BORDER_TOP | LV_BORDER_RIGHT)) {
 8013cc4:	f015 0f0a 	tst.w	r5, #10
 8013cc8:	d015      	beq.n	8013cf6 <lv_draw_rect+0x15ee>
            work_area.x1 = coords->x2 - aa;
 8013cca:	f9ba 2004 	ldrsh.w	r2, [sl, #4]
            work_area.x2 = coords->x2;
 8013cce:	f8ad 209c 	strh.w	r2, [sp, #156]	; 0x9c
            work_area.x1 = coords->x2 - aa;
 8013cd2:	fa1f f388 	uxth.w	r3, r8
 8013cd6:	1ad1      	subs	r1, r2, r3
            work_area.y1 = coords->y1;
 8013cd8:	f9ba 2002 	ldrsh.w	r2, [sl, #2]
            work_area.x1 = coords->x2 - aa;
 8013cdc:	f8ad 1098 	strh.w	r1, [sp, #152]	; 0x98
            work_area.y2 = coords->y1 + aa;
 8013ce0:	4413      	add	r3, r2
            work_area.y1 = coords->y1;
 8013ce2:	f8ad 209a 	strh.w	r2, [sp, #154]	; 0x9a
            work_area.y2 = coords->y1 + aa;
 8013ce6:	f8ad 309e 	strh.w	r3, [sp, #158]	; 0x9e
            lv_draw_fill(&work_area, mask, color, opa);
 8013cea:	463a      	mov	r2, r7
 8013cec:	4623      	mov	r3, r4
 8013cee:	4659      	mov	r1, fp
 8013cf0:	a826      	add	r0, sp, #152	; 0x98
 8013cf2:	f7fd fda4 	bl	801183e <lv_draw_fill>
        if(part & (LV_BORDER_BOTTOM | LV_BORDER_LEFT)) {
 8013cf6:	f015 0f05 	tst.w	r5, #5
 8013cfa:	d015      	beq.n	8013d28 <lv_draw_rect+0x1620>
            work_area.x1 = coords->x1;
 8013cfc:	f9ba 2000 	ldrsh.w	r2, [sl]
 8013d00:	f8ad 2098 	strh.w	r2, [sp, #152]	; 0x98
            work_area.x2 = coords->x1 + aa;
 8013d04:	fa1f f388 	uxth.w	r3, r8
 8013d08:	441a      	add	r2, r3
 8013d0a:	f8ad 209c 	strh.w	r2, [sp, #156]	; 0x9c
            work_area.y1 = coords->y2 - aa;
 8013d0e:	f9ba 2006 	ldrsh.w	r2, [sl, #6]
            work_area.y2 = coords->y2;
 8013d12:	f8ad 209e 	strh.w	r2, [sp, #158]	; 0x9e
            work_area.y1 = coords->y2 - aa;
 8013d16:	1ad3      	subs	r3, r2, r3
 8013d18:	f8ad 309a 	strh.w	r3, [sp, #154]	; 0x9a
            lv_draw_fill(&work_area, mask, color, opa);
 8013d1c:	463a      	mov	r2, r7
 8013d1e:	4623      	mov	r3, r4
 8013d20:	4659      	mov	r1, fp
 8013d22:	a826      	add	r0, sp, #152	; 0x98
 8013d24:	f7fd fd8b 	bl	801183e <lv_draw_fill>
        if(part & (LV_BORDER_BOTTOM | LV_BORDER_RIGHT)) {
 8013d28:	f015 0f09 	tst.w	r5, #9
 8013d2c:	f43f aaa0 	beq.w	8013270 <lv_draw_rect+0xb68>
            work_area.x1 = coords->x2 - aa;
 8013d30:	f9ba 3004 	ldrsh.w	r3, [sl, #4]
            work_area.x2 = coords->x2;
 8013d34:	f8ad 309c 	strh.w	r3, [sp, #156]	; 0x9c
            work_area.x1 = coords->x2 - aa;
 8013d38:	fa1f f888 	uxth.w	r8, r8
 8013d3c:	eba3 0208 	sub.w	r2, r3, r8
            work_area.y1 = coords->y2 - aa;
 8013d40:	f9ba 3006 	ldrsh.w	r3, [sl, #6]
            work_area.x1 = coords->x2 - aa;
 8013d44:	f8ad 2098 	strh.w	r2, [sp, #152]	; 0x98
            work_area.y1 = coords->y2 - aa;
 8013d48:	eba3 0808 	sub.w	r8, r3, r8
 8013d4c:	f8ad 809a 	strh.w	r8, [sp, #154]	; 0x9a
 8013d50:	f7ff ba86 	b.w	8013260 <lv_draw_rect+0xb58>
        work_area.y1 = coords->y1 + radius;
 8013d54:	4403      	add	r3, r0
 8013d56:	e6bc      	b.n	8013ad2 <lv_draw_rect+0x13ca>
    if(aa) bwidth--; /*Because of anti-aliasing the border seems one pixel ticker*/
 8013d58:	3c02      	subs	r4, #2
 8013d5a:	f7ff baaf 	b.w	80132bc <lv_draw_rect+0xbb4>
        if(cir_in.y < cir_in.x) {
 8013d5e:	f9bd 3090 	ldrsh.w	r3, [sp, #144]	; 0x90
 8013d62:	f9bd 1092 	ldrsh.w	r1, [sp, #146]	; 0x92
 8013d66:	4299      	cmp	r1, r3
 8013d68:	f280 8140 	bge.w	8013fec <lv_draw_rect+0x18e4>
            act_w1 = cir_out.x - cir_in.x;
 8013d6c:	1ad3      	subs	r3, r2, r3
 8013d6e:	b21b      	sxth	r3, r3
 8013d70:	930b      	str	r3, [sp, #44]	; 0x2c
            act_w2 = act_w1 - 1;
 8013d72:	930d      	str	r3, [sp, #52]	; 0x34
        if(aa) {
 8013d74:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8013d76:	b393      	cbz	r3, 8013dde <lv_draw_rect+0x16d6>
            if(out_x_last != cir_out.x) {
 8013d78:	454a      	cmp	r2, r9
 8013d7a:	d014      	beq.n	8013da6 <lv_draw_rect+0x169e>
                        lv_draw_px(rb_origo.x + LV_CIRC_OCT1_X(aa_p) + 1, rb_origo.y + LV_CIRC_OCT1_Y(aa_p) + i, mask,
 8013d7c:	9b09      	ldr	r3, [sp, #36]	; 0x24
                lv_coord_t seg_size = out_y_seg_end - out_y_seg_start;
 8013d7e:	f8bd 503c 	ldrh.w	r5, [sp, #60]	; 0x3c
                        lv_draw_px(rb_origo.x + LV_CIRC_OCT1_X(aa_p) + 1, rb_origo.y + LV_CIRC_OCT1_Y(aa_p) + i, mask,
 8013d82:	fa1f f789 	uxth.w	r7, r9
 8013d86:	3301      	adds	r3, #1
                lv_coord_t seg_size = out_y_seg_end - out_y_seg_start;
 8013d88:	ebaa 0805 	sub.w	r8, sl, r5
                        lv_draw_px(rb_origo.x + LV_CIRC_OCT1_X(aa_p) + 1, rb_origo.y + LV_CIRC_OCT1_Y(aa_p) + i, mask,
 8013d8c:	18fb      	adds	r3, r7, r3
                lv_coord_t seg_size = out_y_seg_end - out_y_seg_start;
 8013d8e:	fa0f f888 	sxth.w	r8, r8
 8013d92:	2600      	movs	r6, #0
                        lv_draw_px(rb_origo.x + LV_CIRC_OCT1_X(aa_p) + 1, rb_origo.y + LV_CIRC_OCT1_Y(aa_p) + i, mask,
 8013d94:	930f      	str	r3, [sp, #60]	; 0x3c
 8013d96:	b231      	sxth	r1, r6
                for(i = 0; i < seg_size; i++) {
 8013d98:	4588      	cmp	r8, r1
 8013d9a:	f300 812f 	bgt.w	8013ffc <lv_draw_rect+0x18f4>
                out_x_last      = cir_out.x;
 8013d9e:	f9bd 9088 	ldrsh.w	r9, [sp, #136]	; 0x88
 8013da2:	f8cd a03c 	str.w	sl, [sp, #60]	; 0x3c
            if(in_x_last != cir_in.x) {
 8013da6:	f9bd 3090 	ldrsh.w	r3, [sp, #144]	; 0x90
 8013daa:	9a08      	ldr	r2, [sp, #32]
 8013dac:	4293      	cmp	r3, r2
 8013dae:	d016      	beq.n	8013dde <lv_draw_rect+0x16d6>
                in_y_seg_end        = cir_out.y;
 8013db0:	f9bd 308a 	ldrsh.w	r3, [sp, #138]	; 0x8a
                lv_coord_t seg_size = in_y_seg_end - in_y_seg_start;
 8013db4:	f8bd 6030 	ldrh.w	r6, [sp, #48]	; 0x30
                in_y_seg_end        = cir_out.y;
 8013db8:	9313      	str	r3, [sp, #76]	; 0x4c
                lv_coord_t seg_size = in_y_seg_end - in_y_seg_start;
 8013dba:	eba3 0a06 	sub.w	sl, r3, r6
                        lv_draw_px(rb_origo.x + LV_CIRC_OCT1_X(aa_p) - 1, rb_origo.y + LV_CIRC_OCT1_Y(aa_p) + i, mask,
 8013dbe:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8013dc0:	4413      	add	r3, r2
 8013dc2:	b21b      	sxth	r3, r3
                lv_coord_t seg_size = in_y_seg_end - in_y_seg_start;
 8013dc4:	fa0f fa8a 	sxth.w	sl, sl
 8013dc8:	2400      	movs	r4, #0
                        lv_draw_px(rb_origo.x + LV_CIRC_OCT1_X(aa_p) - 1, rb_origo.y + LV_CIRC_OCT1_Y(aa_p) + i, mask,
 8013dca:	9315      	str	r3, [sp, #84]	; 0x54
 8013dcc:	b221      	sxth	r1, r4
                for(i = 0; i < seg_size; i++) {
 8013dce:	458a      	cmp	sl, r1
 8013dd0:	f300 81b4 	bgt.w	801413c <lv_draw_rect+0x1a34>
                in_x_last      = cir_in.x;
 8013dd4:	f9bd 3090 	ldrsh.w	r3, [sp, #144]	; 0x90
 8013dd8:	9308      	str	r3, [sp, #32]
                in_y_seg_start = in_y_seg_end;
 8013dda:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8013ddc:	930c      	str	r3, [sp, #48]	; 0x30
        if((part & LV_BORDER_BOTTOM) && (part & LV_BORDER_RIGHT)) {
 8013dde:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8013de0:	2b09      	cmp	r3, #9
 8013de2:	d135      	bne.n	8013e50 <lv_draw_rect+0x1748>
            circ_area.x1 = rb_origo.x + LV_CIRC_OCT1_X(cir_out) - act_w2;
 8013de4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8013de6:	f8bd 3088 	ldrh.w	r3, [sp, #136]	; 0x88
 8013dea:	4413      	add	r3, r2
 8013dec:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8013dee:	b29b      	uxth	r3, r3
 8013df0:	1a9a      	subs	r2, r3, r2
 8013df2:	f8ad 2098 	strh.w	r2, [sp, #152]	; 0x98
            circ_area.x2 = rb_origo.x + LV_CIRC_OCT1_X(cir_out);
 8013df6:	f8ad 309c 	strh.w	r3, [sp, #156]	; 0x9c
            circ_area.y1 = rb_origo.y + LV_CIRC_OCT1_Y(cir_out);
 8013dfa:	9a04      	ldr	r2, [sp, #16]
 8013dfc:	f8bd 308a 	ldrh.w	r3, [sp, #138]	; 0x8a
 8013e00:	4413      	add	r3, r2
 8013e02:	b21b      	sxth	r3, r3
 8013e04:	f8ad 309a 	strh.w	r3, [sp, #154]	; 0x9a
            circ_area.y2 = rb_origo.y + LV_CIRC_OCT1_Y(cir_out);
 8013e08:	f8ad 309e 	strh.w	r3, [sp, #158]	; 0x9e
            lv_draw_fill(&circ_area, mask, color, opa);
 8013e0c:	f8bd 2028 	ldrh.w	r2, [sp, #40]	; 0x28
 8013e10:	9b07      	ldr	r3, [sp, #28]
 8013e12:	4659      	mov	r1, fp
 8013e14:	a826      	add	r0, sp, #152	; 0x98
 8013e16:	f7fd fd12 	bl	801183e <lv_draw_fill>
            circ_area.x1 = rb_origo.x + LV_CIRC_OCT2_X(cir_out);
 8013e1a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8013e1c:	f8bd 308a 	ldrh.w	r3, [sp, #138]	; 0x8a
 8013e20:	4413      	add	r3, r2
 8013e22:	b21b      	sxth	r3, r3
            circ_area.y1 = rb_origo.y + LV_CIRC_OCT2_Y(cir_out) - act_w1;
 8013e24:	9a04      	ldr	r2, [sp, #16]
            circ_area.x1 = rb_origo.x + LV_CIRC_OCT2_X(cir_out);
 8013e26:	f8ad 3098 	strh.w	r3, [sp, #152]	; 0x98
            circ_area.x2 = rb_origo.x + LV_CIRC_OCT2_X(cir_out);
 8013e2a:	f8ad 309c 	strh.w	r3, [sp, #156]	; 0x9c
            circ_area.y1 = rb_origo.y + LV_CIRC_OCT2_Y(cir_out) - act_w1;
 8013e2e:	f8bd 3088 	ldrh.w	r3, [sp, #136]	; 0x88
 8013e32:	4413      	add	r3, r2
 8013e34:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8013e36:	b29b      	uxth	r3, r3
 8013e38:	1a9a      	subs	r2, r3, r2
 8013e3a:	f8ad 209a 	strh.w	r2, [sp, #154]	; 0x9a
            circ_area.y2 = rb_origo.y + LV_CIRC_OCT2_Y(cir_out);
 8013e3e:	f8ad 309e 	strh.w	r3, [sp, #158]	; 0x9e
            lv_draw_fill(&circ_area, mask, color, opa);
 8013e42:	f8bd 2028 	ldrh.w	r2, [sp, #40]	; 0x28
 8013e46:	9b07      	ldr	r3, [sp, #28]
 8013e48:	4659      	mov	r1, fp
 8013e4a:	a826      	add	r0, sp, #152	; 0x98
 8013e4c:	f7fd fcf7 	bl	801183e <lv_draw_fill>
        if((part & LV_BORDER_BOTTOM) && (part & LV_BORDER_LEFT)) {
 8013e50:	9b05      	ldr	r3, [sp, #20]
 8013e52:	f003 0305 	and.w	r3, r3, #5
 8013e56:	2b05      	cmp	r3, #5
 8013e58:	d135      	bne.n	8013ec6 <lv_draw_rect+0x17be>
            circ_area.x1 = lb_origo.x + LV_CIRC_OCT3_X(cir_out);
 8013e5a:	9a06      	ldr	r2, [sp, #24]
 8013e5c:	f8bd 308a 	ldrh.w	r3, [sp, #138]	; 0x8a
 8013e60:	1ad3      	subs	r3, r2, r3
 8013e62:	b21b      	sxth	r3, r3
            circ_area.y1 = lb_origo.y + LV_CIRC_OCT3_Y(cir_out) - act_w2;
 8013e64:	9a04      	ldr	r2, [sp, #16]
            circ_area.x1 = lb_origo.x + LV_CIRC_OCT3_X(cir_out);
 8013e66:	f8ad 3098 	strh.w	r3, [sp, #152]	; 0x98
            circ_area.x2 = lb_origo.x + LV_CIRC_OCT3_X(cir_out);
 8013e6a:	f8ad 309c 	strh.w	r3, [sp, #156]	; 0x9c
            circ_area.y1 = lb_origo.y + LV_CIRC_OCT3_Y(cir_out) - act_w2;
 8013e6e:	f8bd 3088 	ldrh.w	r3, [sp, #136]	; 0x88
 8013e72:	4413      	add	r3, r2
 8013e74:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8013e76:	b29b      	uxth	r3, r3
 8013e78:	1a9a      	subs	r2, r3, r2
 8013e7a:	f8ad 209a 	strh.w	r2, [sp, #154]	; 0x9a
            circ_area.y2 = lb_origo.y + LV_CIRC_OCT3_Y(cir_out);
 8013e7e:	f8ad 309e 	strh.w	r3, [sp, #158]	; 0x9e
            lv_draw_fill(&circ_area, mask, color, opa);
 8013e82:	f8bd 2028 	ldrh.w	r2, [sp, #40]	; 0x28
 8013e86:	9b07      	ldr	r3, [sp, #28]
 8013e88:	4659      	mov	r1, fp
 8013e8a:	a826      	add	r0, sp, #152	; 0x98
 8013e8c:	f7fd fcd7 	bl	801183e <lv_draw_fill>
            circ_area.x1 = lb_origo.x + LV_CIRC_OCT4_X(cir_out);
 8013e90:	9a06      	ldr	r2, [sp, #24]
 8013e92:	f8bd 3088 	ldrh.w	r3, [sp, #136]	; 0x88
 8013e96:	1ad3      	subs	r3, r2, r3
            circ_area.x2 = lb_origo.x + LV_CIRC_OCT4_X(cir_out) + act_w1;
 8013e98:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
            circ_area.x1 = lb_origo.x + LV_CIRC_OCT4_X(cir_out);
 8013e9a:	b29b      	uxth	r3, r3
 8013e9c:	f8ad 3098 	strh.w	r3, [sp, #152]	; 0x98
            circ_area.x2 = lb_origo.x + LV_CIRC_OCT4_X(cir_out) + act_w1;
 8013ea0:	4413      	add	r3, r2
 8013ea2:	f8ad 309c 	strh.w	r3, [sp, #156]	; 0x9c
            circ_area.y1 = lb_origo.y + LV_CIRC_OCT4_Y(cir_out);
 8013ea6:	9a04      	ldr	r2, [sp, #16]
 8013ea8:	f8bd 308a 	ldrh.w	r3, [sp, #138]	; 0x8a
 8013eac:	4413      	add	r3, r2
 8013eae:	b21b      	sxth	r3, r3
 8013eb0:	f8ad 309a 	strh.w	r3, [sp, #154]	; 0x9a
            circ_area.y2 = lb_origo.y + LV_CIRC_OCT4_Y(cir_out);
 8013eb4:	f8ad 309e 	strh.w	r3, [sp, #158]	; 0x9e
            lv_draw_fill(&circ_area, mask, color, opa);
 8013eb8:	f8bd 2028 	ldrh.w	r2, [sp, #40]	; 0x28
 8013ebc:	9b07      	ldr	r3, [sp, #28]
 8013ebe:	4659      	mov	r1, fp
 8013ec0:	a826      	add	r0, sp, #152	; 0x98
 8013ec2:	f7fd fcbc 	bl	801183e <lv_draw_fill>
        if((part & LV_BORDER_TOP) && (part & LV_BORDER_LEFT)) {
 8013ec6:	9b05      	ldr	r3, [sp, #20]
 8013ec8:	f003 0306 	and.w	r3, r3, #6
 8013ecc:	2b06      	cmp	r3, #6
 8013ece:	d13b      	bne.n	8013f48 <lv_draw_rect+0x1840>
            if(lb_origo.y + LV_CIRC_OCT4_Y(cir_out) > lt_origo.y + LV_CIRC_OCT5_Y(cir_out)) {
 8013ed0:	f9bd 308a 	ldrsh.w	r3, [sp, #138]	; 0x8a
 8013ed4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8013ed6:	18d1      	adds	r1, r2, r3
 8013ed8:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8013eda:	1ad2      	subs	r2, r2, r3
 8013edc:	4291      	cmp	r1, r2
 8013ede:	dd18      	ble.n	8013f12 <lv_draw_rect+0x180a>
                circ_area.x1 = lt_origo.x + LV_CIRC_OCT5_X(cir_out);
 8013ee0:	9906      	ldr	r1, [sp, #24]
 8013ee2:	f8bd 2088 	ldrh.w	r2, [sp, #136]	; 0x88
 8013ee6:	1a8a      	subs	r2, r1, r2
                circ_area.x2 = lt_origo.x + LV_CIRC_OCT5_X(cir_out) + act_w2;
 8013ee8:	990d      	ldr	r1, [sp, #52]	; 0x34
                circ_area.x1 = lt_origo.x + LV_CIRC_OCT5_X(cir_out);
 8013eea:	b292      	uxth	r2, r2
 8013eec:	f8ad 2098 	strh.w	r2, [sp, #152]	; 0x98
                circ_area.x2 = lt_origo.x + LV_CIRC_OCT5_X(cir_out) + act_w2;
 8013ef0:	440a      	add	r2, r1
 8013ef2:	f8ad 209c 	strh.w	r2, [sp, #156]	; 0x9c
                circ_area.y1 = lt_origo.y + LV_CIRC_OCT5_Y(cir_out);
 8013ef6:	9a03      	ldr	r2, [sp, #12]
 8013ef8:	1ad3      	subs	r3, r2, r3
 8013efa:	b21b      	sxth	r3, r3
 8013efc:	f8ad 309a 	strh.w	r3, [sp, #154]	; 0x9a
                circ_area.y2 = lt_origo.y + LV_CIRC_OCT5_Y(cir_out);
 8013f00:	f8ad 309e 	strh.w	r3, [sp, #158]	; 0x9e
                lv_draw_fill(&circ_area, mask, color, opa);
 8013f04:	f8bd 2028 	ldrh.w	r2, [sp, #40]	; 0x28
 8013f08:	9b07      	ldr	r3, [sp, #28]
 8013f0a:	4659      	mov	r1, fp
 8013f0c:	a826      	add	r0, sp, #152	; 0x98
 8013f0e:	f7fd fc96 	bl	801183e <lv_draw_fill>
            circ_area.x1 = lt_origo.x + LV_CIRC_OCT6_X(cir_out);
 8013f12:	9a06      	ldr	r2, [sp, #24]
 8013f14:	f8bd 308a 	ldrh.w	r3, [sp, #138]	; 0x8a
 8013f18:	1ad3      	subs	r3, r2, r3
 8013f1a:	b21b      	sxth	r3, r3
            circ_area.y1 = lt_origo.y + LV_CIRC_OCT6_Y(cir_out);
 8013f1c:	9a03      	ldr	r2, [sp, #12]
            circ_area.x1 = lt_origo.x + LV_CIRC_OCT6_X(cir_out);
 8013f1e:	f8ad 3098 	strh.w	r3, [sp, #152]	; 0x98
            circ_area.x2 = lt_origo.x + LV_CIRC_OCT6_X(cir_out);
 8013f22:	f8ad 309c 	strh.w	r3, [sp, #156]	; 0x9c
            circ_area.y1 = lt_origo.y + LV_CIRC_OCT6_Y(cir_out);
 8013f26:	f8bd 3088 	ldrh.w	r3, [sp, #136]	; 0x88
 8013f2a:	1ad3      	subs	r3, r2, r3
            circ_area.y2 = lt_origo.y + LV_CIRC_OCT6_Y(cir_out) + act_w1;
 8013f2c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
            circ_area.y1 = lt_origo.y + LV_CIRC_OCT6_Y(cir_out);
 8013f2e:	b29b      	uxth	r3, r3
 8013f30:	f8ad 309a 	strh.w	r3, [sp, #154]	; 0x9a
            circ_area.y2 = lt_origo.y + LV_CIRC_OCT6_Y(cir_out) + act_w1;
 8013f34:	4413      	add	r3, r2
 8013f36:	f8ad 309e 	strh.w	r3, [sp, #158]	; 0x9e
            lv_draw_fill(&circ_area, mask, color, opa);
 8013f3a:	f8bd 2028 	ldrh.w	r2, [sp, #40]	; 0x28
 8013f3e:	9b07      	ldr	r3, [sp, #28]
 8013f40:	4659      	mov	r1, fp
 8013f42:	a826      	add	r0, sp, #152	; 0x98
 8013f44:	f7fd fc7b 	bl	801183e <lv_draw_fill>
        if((part & LV_BORDER_TOP) && (part & LV_BORDER_RIGHT)) {
 8013f48:	9b05      	ldr	r3, [sp, #20]
 8013f4a:	f003 030a 	and.w	r3, r3, #10
 8013f4e:	2b0a      	cmp	r3, #10
 8013f50:	d13b      	bne.n	8013fca <lv_draw_rect+0x18c2>
            circ_area.x1 = rt_origo.x + LV_CIRC_OCT7_X(cir_out);
 8013f52:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8013f54:	f8bd 308a 	ldrh.w	r3, [sp, #138]	; 0x8a
 8013f58:	4413      	add	r3, r2
 8013f5a:	b21b      	sxth	r3, r3
            circ_area.y1 = rt_origo.y + LV_CIRC_OCT7_Y(cir_out);
 8013f5c:	9a03      	ldr	r2, [sp, #12]
            circ_area.x1 = rt_origo.x + LV_CIRC_OCT7_X(cir_out);
 8013f5e:	f8ad 3098 	strh.w	r3, [sp, #152]	; 0x98
            circ_area.x2 = rt_origo.x + LV_CIRC_OCT7_X(cir_out);
 8013f62:	f8ad 309c 	strh.w	r3, [sp, #156]	; 0x9c
            circ_area.y1 = rt_origo.y + LV_CIRC_OCT7_Y(cir_out);
 8013f66:	f8bd 3088 	ldrh.w	r3, [sp, #136]	; 0x88
 8013f6a:	1ad3      	subs	r3, r2, r3
            circ_area.y2 = rt_origo.y + LV_CIRC_OCT7_Y(cir_out) + act_w2;
 8013f6c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
            circ_area.y1 = rt_origo.y + LV_CIRC_OCT7_Y(cir_out);
 8013f6e:	b29b      	uxth	r3, r3
 8013f70:	f8ad 309a 	strh.w	r3, [sp, #154]	; 0x9a
            circ_area.y2 = rt_origo.y + LV_CIRC_OCT7_Y(cir_out) + act_w2;
 8013f74:	4413      	add	r3, r2
 8013f76:	f8ad 309e 	strh.w	r3, [sp, #158]	; 0x9e
            lv_draw_fill(&circ_area, mask, color, opa);
 8013f7a:	f8bd 2028 	ldrh.w	r2, [sp, #40]	; 0x28
 8013f7e:	9b07      	ldr	r3, [sp, #28]
 8013f80:	4659      	mov	r1, fp
 8013f82:	a826      	add	r0, sp, #152	; 0x98
 8013f84:	f7fd fc5b 	bl	801183e <lv_draw_fill>
            if(rb_origo.y + LV_CIRC_OCT1_Y(cir_out) > rt_origo.y + LV_CIRC_OCT8_Y(cir_out)) {
 8013f88:	f9bd 308a 	ldrsh.w	r3, [sp, #138]	; 0x8a
 8013f8c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8013f8e:	18d1      	adds	r1, r2, r3
 8013f90:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8013f92:	1ad2      	subs	r2, r2, r3
 8013f94:	4291      	cmp	r1, r2
 8013f96:	dd18      	ble.n	8013fca <lv_draw_rect+0x18c2>
                circ_area.x1 = rt_origo.x + LV_CIRC_OCT8_X(cir_out) - act_w1;
 8013f98:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8013f9a:	f8bd 1088 	ldrh.w	r1, [sp, #136]	; 0x88
 8013f9e:	4411      	add	r1, r2
 8013fa0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8013fa2:	b289      	uxth	r1, r1
 8013fa4:	1a8a      	subs	r2, r1, r2
 8013fa6:	f8ad 2098 	strh.w	r2, [sp, #152]	; 0x98
                circ_area.y1 = rt_origo.y + LV_CIRC_OCT8_Y(cir_out);
 8013faa:	9a03      	ldr	r2, [sp, #12]
                circ_area.x2 = rt_origo.x + LV_CIRC_OCT8_X(cir_out);
 8013fac:	f8ad 109c 	strh.w	r1, [sp, #156]	; 0x9c
                circ_area.y1 = rt_origo.y + LV_CIRC_OCT8_Y(cir_out);
 8013fb0:	1ad3      	subs	r3, r2, r3
 8013fb2:	b21b      	sxth	r3, r3
 8013fb4:	f8ad 309a 	strh.w	r3, [sp, #154]	; 0x9a
                circ_area.y2 = rt_origo.y + LV_CIRC_OCT8_Y(cir_out);
 8013fb8:	f8ad 309e 	strh.w	r3, [sp, #158]	; 0x9e
                lv_draw_fill(&circ_area, mask, color, opa);
 8013fbc:	f8bd 2028 	ldrh.w	r2, [sp, #40]	; 0x28
 8013fc0:	9b07      	ldr	r3, [sp, #28]
 8013fc2:	4659      	mov	r1, fp
 8013fc4:	a826      	add	r0, sp, #152	; 0x98
 8013fc6:	f7fd fc3a 	bl	801183e <lv_draw_fill>
        lv_circ_next(&cir_out, &tmp_out);
 8013fca:	a91e      	add	r1, sp, #120	; 0x78
 8013fcc:	a822      	add	r0, sp, #136	; 0x88
 8013fce:	f001 fa22 	bl	8015416 <lv_circ_next>
        if(cir_in.y < cir_in.x) {
 8013fd2:	f9bd 2092 	ldrsh.w	r2, [sp, #146]	; 0x92
 8013fd6:	f9bd 3090 	ldrsh.w	r3, [sp, #144]	; 0x90
 8013fda:	429a      	cmp	r2, r3
 8013fdc:	f6bf a9bb 	bge.w	8013356 <lv_draw_rect+0xc4e>
            lv_circ_next(&cir_in, &tmp_in);
 8013fe0:	a920      	add	r1, sp, #128	; 0x80
 8013fe2:	a824      	add	r0, sp, #144	; 0x90
 8013fe4:	f001 fa17 	bl	8015416 <lv_circ_next>
 8013fe8:	f7ff b9b5 	b.w	8013356 <lv_draw_rect+0xc4e>
            act_w1 = cir_out.x - cir_out.y;
 8013fec:	eba2 030a 	sub.w	r3, r2, sl
 8013ff0:	b29b      	uxth	r3, r3
 8013ff2:	b219      	sxth	r1, r3
            act_w2 = act_w1 - 1;
 8013ff4:	3b01      	subs	r3, #1
            act_w1 = cir_out.x - cir_out.y;
 8013ff6:	910b      	str	r1, [sp, #44]	; 0x2c
            act_w2 = act_w1 - 1;
 8013ff8:	b21b      	sxth	r3, r3
 8013ffa:	e6ba      	b.n	8013d72 <lv_draw_rect+0x166a>
                    if(seg_size > CIRCLE_AA_NON_LINEAR_OPA_THRESHOLD) { /*Use non-linear opa mapping
 8013ffc:	f1b8 0f01 	cmp.w	r8, #1
                        aa_opa = antialias_get_opa_circ(seg_size, i, opa);
 8014000:	9a07      	ldr	r2, [sp, #28]
 8014002:	4640      	mov	r0, r8
                    if(seg_size > CIRCLE_AA_NON_LINEAR_OPA_THRESHOLD) { /*Use non-linear opa mapping
 8014004:	f000 8094 	beq.w	8014130 <lv_draw_rect+0x1a28>
                        aa_opa = antialias_get_opa_circ(seg_size, i, opa);
 8014008:	f7fe fb5c 	bl	80126c4 <antialias_get_opa_circ>
 801400c:	4604      	mov	r4, r0
                    if((part & LV_BORDER_BOTTOM) && (part & LV_BORDER_RIGHT)) {
 801400e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8014010:	2b09      	cmp	r3, #9
 8014012:	d11b      	bne.n	801404c <lv_draw_rect+0x1944>
                        lv_draw_px(rb_origo.x + LV_CIRC_OCT1_X(aa_p) + 1, rb_origo.y + LV_CIRC_OCT1_Y(aa_p) + i, mask,
 8014014:	9b04      	ldr	r3, [sp, #16]
 8014016:	9400      	str	r4, [sp, #0]
 8014018:	fa1f f986 	uxth.w	r9, r6
 801401c:	1959      	adds	r1, r3, r5
 801401e:	9b02      	ldr	r3, [sp, #8]
 8014020:	f9bd 003c 	ldrsh.w	r0, [sp, #60]	; 0x3c
 8014024:	895b      	ldrh	r3, [r3, #10]
 8014026:	4449      	add	r1, r9
 8014028:	465a      	mov	r2, fp
 801402a:	b209      	sxth	r1, r1
 801402c:	f7fd fbb8 	bl	80117a0 <lv_draw_px>
                        lv_draw_px(rb_origo.x + LV_CIRC_OCT2_X(aa_p) + i, rb_origo.y + LV_CIRC_OCT2_Y(aa_p) + 1, mask,
 8014030:	9b04      	ldr	r3, [sp, #16]
 8014032:	9400      	str	r4, [sp, #0]
 8014034:	1c59      	adds	r1, r3, #1
 8014036:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014038:	1958      	adds	r0, r3, r5
 801403a:	9b02      	ldr	r3, [sp, #8]
 801403c:	4439      	add	r1, r7
 801403e:	4448      	add	r0, r9
 8014040:	895b      	ldrh	r3, [r3, #10]
 8014042:	465a      	mov	r2, fp
 8014044:	b209      	sxth	r1, r1
 8014046:	b200      	sxth	r0, r0
 8014048:	f7fd fbaa 	bl	80117a0 <lv_draw_px>
                    if((part & LV_BORDER_BOTTOM) && (part & LV_BORDER_LEFT)) {
 801404c:	9b05      	ldr	r3, [sp, #20]
 801404e:	f003 0305 	and.w	r3, r3, #5
 8014052:	2b05      	cmp	r3, #5
 8014054:	d120      	bne.n	8014098 <lv_draw_rect+0x1990>
                        lv_draw_px(lb_origo.x + LV_CIRC_OCT3_X(aa_p) - i, lb_origo.y + LV_CIRC_OCT3_Y(aa_p) + 1, mask,
 8014056:	9b04      	ldr	r3, [sp, #16]
 8014058:	9400      	str	r4, [sp, #0]
 801405a:	f103 0e01 	add.w	lr, r3, #1
 801405e:	9b06      	ldr	r3, [sp, #24]
 8014060:	fa1f f986 	uxth.w	r9, r6
 8014064:	1b58      	subs	r0, r3, r5
 8014066:	9b02      	ldr	r3, [sp, #8]
 8014068:	44be      	add	lr, r7
 801406a:	eba0 0009 	sub.w	r0, r0, r9
 801406e:	895b      	ldrh	r3, [r3, #10]
 8014070:	465a      	mov	r2, fp
 8014072:	fa0f f18e 	sxth.w	r1, lr
 8014076:	b200      	sxth	r0, r0
 8014078:	f7fd fb92 	bl	80117a0 <lv_draw_px>
                        lv_draw_px(lb_origo.x + LV_CIRC_OCT4_X(aa_p) - 1, lb_origo.y + LV_CIRC_OCT4_Y(aa_p) + i, mask,
 801407c:	9b04      	ldr	r3, [sp, #16]
 801407e:	9400      	str	r4, [sp, #0]
 8014080:	1959      	adds	r1, r3, r5
 8014082:	9b06      	ldr	r3, [sp, #24]
 8014084:	1e58      	subs	r0, r3, #1
 8014086:	9b02      	ldr	r3, [sp, #8]
 8014088:	4449      	add	r1, r9
 801408a:	1bc0      	subs	r0, r0, r7
 801408c:	895b      	ldrh	r3, [r3, #10]
 801408e:	465a      	mov	r2, fp
 8014090:	b209      	sxth	r1, r1
 8014092:	b200      	sxth	r0, r0
 8014094:	f7fd fb84 	bl	80117a0 <lv_draw_px>
                    if((part & LV_BORDER_TOP) && (part & LV_BORDER_LEFT)) {
 8014098:	9b05      	ldr	r3, [sp, #20]
 801409a:	f003 0306 	and.w	r3, r3, #6
 801409e:	2b06      	cmp	r3, #6
 80140a0:	d11f      	bne.n	80140e2 <lv_draw_rect+0x19da>
                        lv_draw_px(lt_origo.x + LV_CIRC_OCT5_X(aa_p) - 1, lt_origo.y + LV_CIRC_OCT5_Y(aa_p) - i, mask,
 80140a2:	9b03      	ldr	r3, [sp, #12]
 80140a4:	9400      	str	r4, [sp, #0]
 80140a6:	1b59      	subs	r1, r3, r5
 80140a8:	9b06      	ldr	r3, [sp, #24]
 80140aa:	fa1f f986 	uxth.w	r9, r6
 80140ae:	1e58      	subs	r0, r3, #1
 80140b0:	9b02      	ldr	r3, [sp, #8]
 80140b2:	eba1 0109 	sub.w	r1, r1, r9
 80140b6:	1bc0      	subs	r0, r0, r7
 80140b8:	895b      	ldrh	r3, [r3, #10]
 80140ba:	465a      	mov	r2, fp
 80140bc:	b209      	sxth	r1, r1
 80140be:	b200      	sxth	r0, r0
 80140c0:	f7fd fb6e 	bl	80117a0 <lv_draw_px>
                        lv_draw_px(lt_origo.x + LV_CIRC_OCT6_X(aa_p) - i, lt_origo.y + LV_CIRC_OCT6_Y(aa_p) - 1, mask,
 80140c4:	9b03      	ldr	r3, [sp, #12]
 80140c6:	9400      	str	r4, [sp, #0]
 80140c8:	1e59      	subs	r1, r3, #1
 80140ca:	9b06      	ldr	r3, [sp, #24]
 80140cc:	1b58      	subs	r0, r3, r5
 80140ce:	9b02      	ldr	r3, [sp, #8]
 80140d0:	1bc9      	subs	r1, r1, r7
 80140d2:	eba0 0009 	sub.w	r0, r0, r9
 80140d6:	895b      	ldrh	r3, [r3, #10]
 80140d8:	465a      	mov	r2, fp
 80140da:	b209      	sxth	r1, r1
 80140dc:	b200      	sxth	r0, r0
 80140de:	f7fd fb5f 	bl	80117a0 <lv_draw_px>
                    if((part & LV_BORDER_TOP) && (part & LV_BORDER_RIGHT)) {
 80140e2:	9b05      	ldr	r3, [sp, #20]
 80140e4:	f003 030a 	and.w	r3, r3, #10
 80140e8:	2b0a      	cmp	r3, #10
 80140ea:	d11f      	bne.n	801412c <lv_draw_rect+0x1a24>
                        lv_draw_px(rt_origo.x + LV_CIRC_OCT7_X(aa_p) + i, rt_origo.y + LV_CIRC_OCT7_Y(aa_p) - 1, mask,
 80140ec:	9b03      	ldr	r3, [sp, #12]
 80140ee:	9400      	str	r4, [sp, #0]
 80140f0:	f103 3eff 	add.w	lr, r3, #4294967295	; 0xffffffff
 80140f4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80140f6:	fa1f f986 	uxth.w	r9, r6
 80140fa:	1958      	adds	r0, r3, r5
 80140fc:	9b02      	ldr	r3, [sp, #8]
 80140fe:	ebae 0e07 	sub.w	lr, lr, r7
 8014102:	4448      	add	r0, r9
 8014104:	895b      	ldrh	r3, [r3, #10]
 8014106:	465a      	mov	r2, fp
 8014108:	fa0f f18e 	sxth.w	r1, lr
 801410c:	b200      	sxth	r0, r0
 801410e:	f7fd fb47 	bl	80117a0 <lv_draw_px>
                        lv_draw_px(rt_origo.x + LV_CIRC_OCT8_X(aa_p) + 1, rt_origo.y + LV_CIRC_OCT8_Y(aa_p) - i, mask,
 8014112:	9b03      	ldr	r3, [sp, #12]
 8014114:	9400      	str	r4, [sp, #0]
 8014116:	1b59      	subs	r1, r3, r5
 8014118:	9b02      	ldr	r3, [sp, #8]
 801411a:	f9bd 003c 	ldrsh.w	r0, [sp, #60]	; 0x3c
 801411e:	895b      	ldrh	r3, [r3, #10]
 8014120:	eba1 0109 	sub.w	r1, r1, r9
 8014124:	465a      	mov	r2, fp
 8014126:	b209      	sxth	r1, r1
 8014128:	f7fd fb3a 	bl	80117a0 <lv_draw_px>
 801412c:	3601      	adds	r6, #1
 801412e:	e632      	b.n	8013d96 <lv_draw_rect+0x168e>
                        aa_opa = opa - lv_draw_aa_get_opa(seg_size, i, opa);
 8014130:	f7fd faf4 	bl	801171c <lv_draw_aa_get_opa>
 8014134:	9b07      	ldr	r3, [sp, #28]
 8014136:	1a18      	subs	r0, r3, r0
 8014138:	b2c4      	uxtb	r4, r0
 801413a:	e768      	b.n	801400e <lv_draw_rect+0x1906>
                    if(seg_size > CIRCLE_AA_NON_LINEAR_OPA_THRESHOLD) { /*Use non-linear opa mapping
 801413c:	f1ba 0f01 	cmp.w	sl, #1
                        aa_opa = opa - antialias_get_opa_circ(seg_size, i, opa);
 8014140:	9a07      	ldr	r2, [sp, #28]
 8014142:	4650      	mov	r0, sl
                    if(seg_size > CIRCLE_AA_NON_LINEAR_OPA_THRESHOLD) { /*Use non-linear opa mapping
 8014144:	f000 809c 	beq.w	8014280 <lv_draw_rect+0x1b78>
                        aa_opa = opa - antialias_get_opa_circ(seg_size, i, opa);
 8014148:	f7fe fabc 	bl	80126c4 <antialias_get_opa_circ>
 801414c:	9b07      	ldr	r3, [sp, #28]
 801414e:	1a18      	subs	r0, r3, r0
 8014150:	b2c5      	uxtb	r5, r0
                    if((part & LV_BORDER_BOTTOM) && (part & LV_BORDER_RIGHT)) {
 8014152:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8014154:	2b09      	cmp	r3, #9
 8014156:	d10a      	bne.n	801416e <lv_draw_rect+0x1a66>
                        lv_draw_px(rb_origo.x + LV_CIRC_OCT1_X(aa_p) - 1, rb_origo.y + LV_CIRC_OCT1_Y(aa_p) + i, mask,
 8014158:	9b04      	ldr	r3, [sp, #16]
 801415a:	9500      	str	r5, [sp, #0]
 801415c:	1999      	adds	r1, r3, r6
 801415e:	9b02      	ldr	r3, [sp, #8]
 8014160:	9815      	ldr	r0, [sp, #84]	; 0x54
 8014162:	895b      	ldrh	r3, [r3, #10]
 8014164:	4421      	add	r1, r4
 8014166:	465a      	mov	r2, fp
 8014168:	b209      	sxth	r1, r1
 801416a:	f7fd fb19 	bl	80117a0 <lv_draw_px>
 801416e:	9b05      	ldr	r3, [sp, #20]
 8014170:	f003 0305 	and.w	r3, r3, #5
                    if((part & LV_BORDER_BOTTOM) && (part & LV_BORDER_LEFT)) {
 8014174:	2b05      	cmp	r3, #5
 8014176:	9314      	str	r3, [sp, #80]	; 0x50
 8014178:	d10e      	bne.n	8014198 <lv_draw_rect+0x1a90>
                        lv_draw_px(lb_origo.x + LV_CIRC_OCT3_X(aa_p) - i, lb_origo.y + LV_CIRC_OCT3_Y(aa_p) - 1, mask,
 801417a:	9b04      	ldr	r3, [sp, #16]
 801417c:	9500      	str	r5, [sp, #0]
 801417e:	1e59      	subs	r1, r3, #1
 8014180:	9b08      	ldr	r3, [sp, #32]
 8014182:	4419      	add	r1, r3
 8014184:	9b06      	ldr	r3, [sp, #24]
 8014186:	1b98      	subs	r0, r3, r6
 8014188:	9b02      	ldr	r3, [sp, #8]
 801418a:	1b00      	subs	r0, r0, r4
 801418c:	895b      	ldrh	r3, [r3, #10]
 801418e:	465a      	mov	r2, fp
 8014190:	b209      	sxth	r1, r1
 8014192:	b200      	sxth	r0, r0
 8014194:	f7fd fb04 	bl	80117a0 <lv_draw_px>
 8014198:	9b05      	ldr	r3, [sp, #20]
 801419a:	f003 0806 	and.w	r8, r3, #6
                    if((part & LV_BORDER_TOP) && (part & LV_BORDER_LEFT)) {
 801419e:	f1b8 0f06 	cmp.w	r8, #6
 80141a2:	d10e      	bne.n	80141c2 <lv_draw_rect+0x1aba>
                        lv_draw_px(lt_origo.x + LV_CIRC_OCT5_X(aa_p) + 1, lt_origo.y + LV_CIRC_OCT5_Y(aa_p) - i, mask,
 80141a4:	9b03      	ldr	r3, [sp, #12]
 80141a6:	9500      	str	r5, [sp, #0]
 80141a8:	1b99      	subs	r1, r3, r6
 80141aa:	9b06      	ldr	r3, [sp, #24]
 80141ac:	1c58      	adds	r0, r3, #1
 80141ae:	9b08      	ldr	r3, [sp, #32]
 80141b0:	1ac0      	subs	r0, r0, r3
 80141b2:	9b02      	ldr	r3, [sp, #8]
 80141b4:	1b09      	subs	r1, r1, r4
 80141b6:	895b      	ldrh	r3, [r3, #10]
 80141b8:	465a      	mov	r2, fp
 80141ba:	b209      	sxth	r1, r1
 80141bc:	b200      	sxth	r0, r0
 80141be:	f7fd faef 	bl	80117a0 <lv_draw_px>
 80141c2:	9b05      	ldr	r3, [sp, #20]
 80141c4:	f003 070a 	and.w	r7, r3, #10
                    if((part & LV_BORDER_TOP) && (part & LV_BORDER_RIGHT)) {
 80141c8:	2f0a      	cmp	r7, #10
 80141ca:	d10e      	bne.n	80141ea <lv_draw_rect+0x1ae2>
                        lv_draw_px(rt_origo.x + LV_CIRC_OCT7_X(aa_p) + i, rt_origo.y + LV_CIRC_OCT7_Y(aa_p) + 1, mask,
 80141cc:	9b03      	ldr	r3, [sp, #12]
 80141ce:	9500      	str	r5, [sp, #0]
 80141d0:	1c59      	adds	r1, r3, #1
 80141d2:	9b08      	ldr	r3, [sp, #32]
 80141d4:	1ac9      	subs	r1, r1, r3
 80141d6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80141d8:	1998      	adds	r0, r3, r6
 80141da:	9b02      	ldr	r3, [sp, #8]
 80141dc:	4420      	add	r0, r4
 80141de:	895b      	ldrh	r3, [r3, #10]
 80141e0:	465a      	mov	r2, fp
 80141e2:	b209      	sxth	r1, r1
 80141e4:	b200      	sxth	r0, r0
 80141e6:	f7fd fadb 	bl	80117a0 <lv_draw_px>
                    if(LV_CIRC_OCT1_X(aa_p) - 1 != LV_CIRC_OCT2_X(aa_p) + i) {
 80141ea:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80141ec:	9a08      	ldr	r2, [sp, #32]
 80141ee:	4423      	add	r3, r4
 80141f0:	3a01      	subs	r2, #1
 80141f2:	4293      	cmp	r3, r2
 80141f4:	d042      	beq.n	801427c <lv_draw_rect+0x1b74>
                        if((part & LV_BORDER_BOTTOM) && (part & LV_BORDER_RIGHT)) {
 80141f6:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80141f8:	2b09      	cmp	r3, #9
 80141fa:	d10e      	bne.n	801421a <lv_draw_rect+0x1b12>
                            lv_draw_px(rb_origo.x + LV_CIRC_OCT2_X(aa_p) + i, rb_origo.y + LV_CIRC_OCT2_Y(aa_p) - 1,
 80141fc:	9b04      	ldr	r3, [sp, #16]
 80141fe:	9500      	str	r5, [sp, #0]
 8014200:	1e59      	subs	r1, r3, #1
 8014202:	9b08      	ldr	r3, [sp, #32]
 8014204:	4419      	add	r1, r3
 8014206:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014208:	1998      	adds	r0, r3, r6
 801420a:	9b02      	ldr	r3, [sp, #8]
 801420c:	4420      	add	r0, r4
 801420e:	895b      	ldrh	r3, [r3, #10]
 8014210:	465a      	mov	r2, fp
 8014212:	b209      	sxth	r1, r1
 8014214:	b200      	sxth	r0, r0
 8014216:	f7fd fac3 	bl	80117a0 <lv_draw_px>
                        if((part & LV_BORDER_BOTTOM) && (part & LV_BORDER_LEFT)) {
 801421a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801421c:	2b05      	cmp	r3, #5
 801421e:	d10e      	bne.n	801423e <lv_draw_rect+0x1b36>
                            lv_draw_px(lb_origo.x + LV_CIRC_OCT4_X(aa_p) + 1, lb_origo.y + LV_CIRC_OCT4_Y(aa_p) + i,
 8014220:	9b04      	ldr	r3, [sp, #16]
 8014222:	9500      	str	r5, [sp, #0]
 8014224:	1999      	adds	r1, r3, r6
 8014226:	9b06      	ldr	r3, [sp, #24]
 8014228:	1c58      	adds	r0, r3, #1
 801422a:	9b08      	ldr	r3, [sp, #32]
 801422c:	1ac0      	subs	r0, r0, r3
 801422e:	9b02      	ldr	r3, [sp, #8]
 8014230:	4421      	add	r1, r4
 8014232:	895b      	ldrh	r3, [r3, #10]
 8014234:	465a      	mov	r2, fp
 8014236:	b209      	sxth	r1, r1
 8014238:	b200      	sxth	r0, r0
 801423a:	f7fd fab1 	bl	80117a0 <lv_draw_px>
                        if((part & LV_BORDER_TOP) && (part & LV_BORDER_LEFT)) {
 801423e:	f1b8 0f06 	cmp.w	r8, #6
 8014242:	d10e      	bne.n	8014262 <lv_draw_rect+0x1b5a>
                            lv_draw_px(lt_origo.x + LV_CIRC_OCT6_X(aa_p) - i, lt_origo.y + LV_CIRC_OCT6_Y(aa_p) + 1,
 8014244:	9b03      	ldr	r3, [sp, #12]
 8014246:	9500      	str	r5, [sp, #0]
 8014248:	1c59      	adds	r1, r3, #1
 801424a:	9b08      	ldr	r3, [sp, #32]
 801424c:	1ac9      	subs	r1, r1, r3
 801424e:	9b06      	ldr	r3, [sp, #24]
 8014250:	1b98      	subs	r0, r3, r6
 8014252:	9b02      	ldr	r3, [sp, #8]
 8014254:	1b00      	subs	r0, r0, r4
 8014256:	895b      	ldrh	r3, [r3, #10]
 8014258:	465a      	mov	r2, fp
 801425a:	b209      	sxth	r1, r1
 801425c:	b200      	sxth	r0, r0
 801425e:	f7fd fa9f 	bl	80117a0 <lv_draw_px>
                        if((part & LV_BORDER_TOP) && (part & LV_BORDER_RIGHT)) {
 8014262:	2f0a      	cmp	r7, #10
 8014264:	d10a      	bne.n	801427c <lv_draw_rect+0x1b74>
                            lv_draw_px(rt_origo.x + LV_CIRC_OCT8_X(aa_p) - 1, rt_origo.y + LV_CIRC_OCT8_Y(aa_p) - i,
 8014266:	9b03      	ldr	r3, [sp, #12]
 8014268:	9500      	str	r5, [sp, #0]
 801426a:	1b99      	subs	r1, r3, r6
 801426c:	9b02      	ldr	r3, [sp, #8]
 801426e:	9815      	ldr	r0, [sp, #84]	; 0x54
 8014270:	895b      	ldrh	r3, [r3, #10]
 8014272:	1b09      	subs	r1, r1, r4
 8014274:	465a      	mov	r2, fp
 8014276:	b209      	sxth	r1, r1
 8014278:	f7fd fa92 	bl	80117a0 <lv_draw_px>
 801427c:	3401      	adds	r4, #1
 801427e:	e5a5      	b.n	8013dcc <lv_draw_rect+0x16c4>
                        aa_opa = lv_draw_aa_get_opa(seg_size, i, opa);
 8014280:	f7fd fa4c 	bl	801171c <lv_draw_aa_get_opa>
 8014284:	4605      	mov	r5, r0
 8014286:	e764      	b.n	8014152 <lv_draw_rect+0x1a4a>
            lv_opa_t aa_opa = opa - lv_draw_aa_get_opa(seg_size, i, opa);
 8014288:	9a07      	ldr	r2, [sp, #28]
 801428a:	4650      	mov	r0, sl
 801428c:	f7fd fa46 	bl	801171c <lv_draw_aa_get_opa>
 8014290:	9b07      	ldr	r3, [sp, #28]
 8014292:	1a18      	subs	r0, r3, r0
            if((part & LV_BORDER_BOTTOM) && (part & LV_BORDER_RIGHT)) {
 8014294:	9b05      	ldr	r3, [sp, #20]
 8014296:	f003 0309 	and.w	r3, r3, #9
 801429a:	2b09      	cmp	r3, #9
            lv_opa_t aa_opa = opa - lv_draw_aa_get_opa(seg_size, i, opa);
 801429c:	b2c4      	uxtb	r4, r0
            if((part & LV_BORDER_BOTTOM) && (part & LV_BORDER_RIGHT)) {
 801429e:	d11b      	bne.n	80142d8 <lv_draw_rect+0x1bd0>
                lv_draw_px(rb_origo.x + LV_CIRC_OCT1_X(aa_p) + 1, rb_origo.y + LV_CIRC_OCT1_Y(aa_p) + i, mask,
 80142a0:	9b04      	ldr	r3, [sp, #16]
 80142a2:	9400      	str	r4, [sp, #0]
 80142a4:	fa1f f886 	uxth.w	r8, r6
 80142a8:	1959      	adds	r1, r3, r5
 80142aa:	9b02      	ldr	r3, [sp, #8]
 80142ac:	f9bd 0028 	ldrsh.w	r0, [sp, #40]	; 0x28
 80142b0:	895b      	ldrh	r3, [r3, #10]
 80142b2:	4441      	add	r1, r8
 80142b4:	465a      	mov	r2, fp
 80142b6:	b209      	sxth	r1, r1
 80142b8:	f7fd fa72 	bl	80117a0 <lv_draw_px>
                lv_draw_px(rb_origo.x + LV_CIRC_OCT2_X(aa_p) + i, rb_origo.y + LV_CIRC_OCT2_Y(aa_p) + 1, mask,
 80142bc:	9b04      	ldr	r3, [sp, #16]
 80142be:	9400      	str	r4, [sp, #0]
 80142c0:	1c59      	adds	r1, r3, #1
 80142c2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80142c4:	1958      	adds	r0, r3, r5
 80142c6:	9b02      	ldr	r3, [sp, #8]
 80142c8:	4439      	add	r1, r7
 80142ca:	4440      	add	r0, r8
 80142cc:	895b      	ldrh	r3, [r3, #10]
 80142ce:	465a      	mov	r2, fp
 80142d0:	b209      	sxth	r1, r1
 80142d2:	b200      	sxth	r0, r0
 80142d4:	f7fd fa64 	bl	80117a0 <lv_draw_px>
            if((part & LV_BORDER_BOTTOM) && (part & LV_BORDER_LEFT)) {
 80142d8:	9b05      	ldr	r3, [sp, #20]
 80142da:	f003 0305 	and.w	r3, r3, #5
 80142de:	2b05      	cmp	r3, #5
 80142e0:	d120      	bne.n	8014324 <lv_draw_rect+0x1c1c>
                lv_draw_px(lb_origo.x + LV_CIRC_OCT3_X(aa_p) - i, lb_origo.y + LV_CIRC_OCT3_Y(aa_p) + 1, mask,
 80142e2:	9b04      	ldr	r3, [sp, #16]
 80142e4:	9400      	str	r4, [sp, #0]
 80142e6:	f103 0e01 	add.w	lr, r3, #1
 80142ea:	9b06      	ldr	r3, [sp, #24]
 80142ec:	fa1f f886 	uxth.w	r8, r6
 80142f0:	1b58      	subs	r0, r3, r5
 80142f2:	9b02      	ldr	r3, [sp, #8]
 80142f4:	44be      	add	lr, r7
 80142f6:	eba0 0008 	sub.w	r0, r0, r8
 80142fa:	895b      	ldrh	r3, [r3, #10]
 80142fc:	465a      	mov	r2, fp
 80142fe:	fa0f f18e 	sxth.w	r1, lr
 8014302:	b200      	sxth	r0, r0
 8014304:	f7fd fa4c 	bl	80117a0 <lv_draw_px>
                lv_draw_px(lb_origo.x + LV_CIRC_OCT4_X(aa_p) - 1, lb_origo.y + LV_CIRC_OCT4_Y(aa_p) + i, mask,
 8014308:	9b04      	ldr	r3, [sp, #16]
 801430a:	9400      	str	r4, [sp, #0]
 801430c:	1959      	adds	r1, r3, r5
 801430e:	9b06      	ldr	r3, [sp, #24]
 8014310:	1e58      	subs	r0, r3, #1
 8014312:	9b02      	ldr	r3, [sp, #8]
 8014314:	4441      	add	r1, r8
 8014316:	1bc0      	subs	r0, r0, r7
 8014318:	895b      	ldrh	r3, [r3, #10]
 801431a:	465a      	mov	r2, fp
 801431c:	b209      	sxth	r1, r1
 801431e:	b200      	sxth	r0, r0
 8014320:	f7fd fa3e 	bl	80117a0 <lv_draw_px>
            if((part & LV_BORDER_TOP) && (part & LV_BORDER_LEFT)) {
 8014324:	9b05      	ldr	r3, [sp, #20]
 8014326:	f003 0306 	and.w	r3, r3, #6
 801432a:	2b06      	cmp	r3, #6
 801432c:	d11f      	bne.n	801436e <lv_draw_rect+0x1c66>
                lv_draw_px(lt_origo.x + LV_CIRC_OCT5_X(aa_p) - 1, lt_origo.y + LV_CIRC_OCT5_Y(aa_p) - i, mask,
 801432e:	9b03      	ldr	r3, [sp, #12]
 8014330:	9400      	str	r4, [sp, #0]
 8014332:	1b59      	subs	r1, r3, r5
 8014334:	9b06      	ldr	r3, [sp, #24]
 8014336:	fa1f f886 	uxth.w	r8, r6
 801433a:	1e58      	subs	r0, r3, #1
 801433c:	9b02      	ldr	r3, [sp, #8]
 801433e:	eba1 0108 	sub.w	r1, r1, r8
 8014342:	1bc0      	subs	r0, r0, r7
 8014344:	895b      	ldrh	r3, [r3, #10]
 8014346:	465a      	mov	r2, fp
 8014348:	b209      	sxth	r1, r1
 801434a:	b200      	sxth	r0, r0
 801434c:	f7fd fa28 	bl	80117a0 <lv_draw_px>
                lv_draw_px(lt_origo.x + LV_CIRC_OCT6_X(aa_p) - i, lt_origo.y + LV_CIRC_OCT6_Y(aa_p) - 1, mask,
 8014350:	9b03      	ldr	r3, [sp, #12]
 8014352:	9400      	str	r4, [sp, #0]
 8014354:	1e59      	subs	r1, r3, #1
 8014356:	9b06      	ldr	r3, [sp, #24]
 8014358:	1b58      	subs	r0, r3, r5
 801435a:	9b02      	ldr	r3, [sp, #8]
 801435c:	1bc9      	subs	r1, r1, r7
 801435e:	eba0 0008 	sub.w	r0, r0, r8
 8014362:	895b      	ldrh	r3, [r3, #10]
 8014364:	465a      	mov	r2, fp
 8014366:	b209      	sxth	r1, r1
 8014368:	b200      	sxth	r0, r0
 801436a:	f7fd fa19 	bl	80117a0 <lv_draw_px>
            if((part & LV_BORDER_TOP) && (part & LV_BORDER_RIGHT)) {
 801436e:	9b05      	ldr	r3, [sp, #20]
 8014370:	f003 030a 	and.w	r3, r3, #10
 8014374:	2b0a      	cmp	r3, #10
 8014376:	d11f      	bne.n	80143b8 <lv_draw_rect+0x1cb0>
                lv_draw_px(rt_origo.x + LV_CIRC_OCT7_X(aa_p) + i, rt_origo.y + LV_CIRC_OCT7_Y(aa_p) - 1, mask,
 8014378:	9b03      	ldr	r3, [sp, #12]
 801437a:	9400      	str	r4, [sp, #0]
 801437c:	f103 3eff 	add.w	lr, r3, #4294967295	; 0xffffffff
 8014380:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014382:	fa1f f886 	uxth.w	r8, r6
 8014386:	1958      	adds	r0, r3, r5
 8014388:	9b02      	ldr	r3, [sp, #8]
 801438a:	ebae 0e07 	sub.w	lr, lr, r7
 801438e:	4440      	add	r0, r8
 8014390:	895b      	ldrh	r3, [r3, #10]
 8014392:	465a      	mov	r2, fp
 8014394:	fa0f f18e 	sxth.w	r1, lr
 8014398:	b200      	sxth	r0, r0
 801439a:	f7fd fa01 	bl	80117a0 <lv_draw_px>
                lv_draw_px(rt_origo.x + LV_CIRC_OCT8_X(aa_p) + 1, rt_origo.y + LV_CIRC_OCT8_Y(aa_p) - i, mask,
 801439e:	9b03      	ldr	r3, [sp, #12]
 80143a0:	9400      	str	r4, [sp, #0]
 80143a2:	1b59      	subs	r1, r3, r5
 80143a4:	9b02      	ldr	r3, [sp, #8]
 80143a6:	f9bd 0028 	ldrsh.w	r0, [sp, #40]	; 0x28
 80143aa:	895b      	ldrh	r3, [r3, #10]
 80143ac:	eba1 0108 	sub.w	r1, r1, r8
 80143b0:	465a      	mov	r2, fp
 80143b2:	b209      	sxth	r1, r1
 80143b4:	f7fd f9f4 	bl	80117a0 <lv_draw_px>
 80143b8:	3601      	adds	r6, #1
 80143ba:	f7fe bfe3 	b.w	8013384 <lv_draw_rect+0xc7c>
            lv_opa_t aa_opa = lv_draw_aa_get_opa(seg_size, i, opa);
 80143be:	9a07      	ldr	r2, [sp, #28]
 80143c0:	980a      	ldr	r0, [sp, #40]	; 0x28
 80143c2:	f7fd f9ab 	bl	801171c <lv_draw_aa_get_opa>
 80143c6:	9b05      	ldr	r3, [sp, #20]
 80143c8:	f003 0909 	and.w	r9, r3, #9
            if((part & LV_BORDER_BOTTOM) && (part & LV_BORDER_RIGHT)) {
 80143cc:	f1b9 0f09 	cmp.w	r9, #9
            lv_opa_t aa_opa = lv_draw_aa_get_opa(seg_size, i, opa);
 80143d0:	4606      	mov	r6, r0
            if((part & LV_BORDER_BOTTOM) && (part & LV_BORDER_RIGHT)) {
 80143d2:	d10a      	bne.n	80143ea <lv_draw_rect+0x1ce2>
                lv_draw_px(rb_origo.x + LV_CIRC_OCT1_X(aa_p) - 1, rb_origo.y + LV_CIRC_OCT1_Y(aa_p) + i, mask,
 80143d4:	9b04      	ldr	r3, [sp, #16]
 80143d6:	9000      	str	r0, [sp, #0]
 80143d8:	1959      	adds	r1, r3, r5
 80143da:	9b02      	ldr	r3, [sp, #8]
 80143dc:	980b      	ldr	r0, [sp, #44]	; 0x2c
 80143de:	895b      	ldrh	r3, [r3, #10]
 80143e0:	4421      	add	r1, r4
 80143e2:	465a      	mov	r2, fp
 80143e4:	b209      	sxth	r1, r1
 80143e6:	f7fd f9db 	bl	80117a0 <lv_draw_px>
 80143ea:	9b05      	ldr	r3, [sp, #20]
 80143ec:	f003 0a05 	and.w	sl, r3, #5
            if((part & LV_BORDER_BOTTOM) && (part & LV_BORDER_LEFT)) {
 80143f0:	f1ba 0f05 	cmp.w	sl, #5
 80143f4:	d10e      	bne.n	8014414 <lv_draw_rect+0x1d0c>
                lv_draw_px(lb_origo.x + LV_CIRC_OCT3_X(aa_p) - i, lb_origo.y + LV_CIRC_OCT3_Y(aa_p) - 1, mask,
 80143f6:	9b04      	ldr	r3, [sp, #16]
 80143f8:	9600      	str	r6, [sp, #0]
 80143fa:	1e59      	subs	r1, r3, #1
 80143fc:	9b08      	ldr	r3, [sp, #32]
 80143fe:	4419      	add	r1, r3
 8014400:	9b06      	ldr	r3, [sp, #24]
 8014402:	1b58      	subs	r0, r3, r5
 8014404:	9b02      	ldr	r3, [sp, #8]
 8014406:	1b00      	subs	r0, r0, r4
 8014408:	895b      	ldrh	r3, [r3, #10]
 801440a:	465a      	mov	r2, fp
 801440c:	b209      	sxth	r1, r1
 801440e:	b200      	sxth	r0, r0
 8014410:	f7fd f9c6 	bl	80117a0 <lv_draw_px>
 8014414:	9b05      	ldr	r3, [sp, #20]
 8014416:	f003 0806 	and.w	r8, r3, #6
            if((part & LV_BORDER_TOP) && (part & LV_BORDER_LEFT)) {
 801441a:	f1b8 0f06 	cmp.w	r8, #6
 801441e:	d10e      	bne.n	801443e <lv_draw_rect+0x1d36>
                lv_draw_px(lt_origo.x + LV_CIRC_OCT5_X(aa_p) + 1, lt_origo.y + LV_CIRC_OCT5_Y(aa_p) - i, mask,
 8014420:	9b03      	ldr	r3, [sp, #12]
 8014422:	9600      	str	r6, [sp, #0]
 8014424:	1b59      	subs	r1, r3, r5
 8014426:	9b06      	ldr	r3, [sp, #24]
 8014428:	1c58      	adds	r0, r3, #1
 801442a:	9b08      	ldr	r3, [sp, #32]
 801442c:	1ac0      	subs	r0, r0, r3
 801442e:	9b02      	ldr	r3, [sp, #8]
 8014430:	1b09      	subs	r1, r1, r4
 8014432:	895b      	ldrh	r3, [r3, #10]
 8014434:	465a      	mov	r2, fp
 8014436:	b209      	sxth	r1, r1
 8014438:	b200      	sxth	r0, r0
 801443a:	f7fd f9b1 	bl	80117a0 <lv_draw_px>
 801443e:	9b05      	ldr	r3, [sp, #20]
 8014440:	f003 070a 	and.w	r7, r3, #10
            if((part & LV_BORDER_TOP) && (part & LV_BORDER_RIGHT)) {
 8014444:	2f0a      	cmp	r7, #10
 8014446:	d10e      	bne.n	8014466 <lv_draw_rect+0x1d5e>
                lv_draw_px(rt_origo.x + LV_CIRC_OCT7_X(aa_p) + i, rt_origo.y + LV_CIRC_OCT7_Y(aa_p) + 1, mask,
 8014448:	9b03      	ldr	r3, [sp, #12]
 801444a:	9600      	str	r6, [sp, #0]
 801444c:	1c59      	adds	r1, r3, #1
 801444e:	9b08      	ldr	r3, [sp, #32]
 8014450:	1ac9      	subs	r1, r1, r3
 8014452:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014454:	1958      	adds	r0, r3, r5
 8014456:	9b02      	ldr	r3, [sp, #8]
 8014458:	4420      	add	r0, r4
 801445a:	895b      	ldrh	r3, [r3, #10]
 801445c:	465a      	mov	r2, fp
 801445e:	b209      	sxth	r1, r1
 8014460:	b200      	sxth	r0, r0
 8014462:	f7fd f99d 	bl	80117a0 <lv_draw_px>
            if(LV_CIRC_OCT1_X(aa_p) - 1 != LV_CIRC_OCT2_X(aa_p) + i) {
 8014466:	9b08      	ldr	r3, [sp, #32]
 8014468:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801446a:	3b01      	subs	r3, #1
 801446c:	4422      	add	r2, r4
 801446e:	4293      	cmp	r3, r2
 8014470:	d042      	beq.n	80144f8 <lv_draw_rect+0x1df0>
                if((part & LV_BORDER_BOTTOM) && (part & LV_BORDER_RIGHT)) {
 8014472:	f1b9 0f09 	cmp.w	r9, #9
 8014476:	d10e      	bne.n	8014496 <lv_draw_rect+0x1d8e>
                    lv_draw_px(rb_origo.x + LV_CIRC_OCT2_X(aa_p) + i, rb_origo.y + LV_CIRC_OCT2_Y(aa_p) - 1, mask,
 8014478:	9b04      	ldr	r3, [sp, #16]
 801447a:	9600      	str	r6, [sp, #0]
 801447c:	1e59      	subs	r1, r3, #1
 801447e:	9b08      	ldr	r3, [sp, #32]
 8014480:	4419      	add	r1, r3
 8014482:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014484:	1958      	adds	r0, r3, r5
 8014486:	9b02      	ldr	r3, [sp, #8]
 8014488:	4420      	add	r0, r4
 801448a:	895b      	ldrh	r3, [r3, #10]
 801448c:	465a      	mov	r2, fp
 801448e:	b209      	sxth	r1, r1
 8014490:	b200      	sxth	r0, r0
 8014492:	f7fd f985 	bl	80117a0 <lv_draw_px>
                if((part & LV_BORDER_BOTTOM) && (part & LV_BORDER_LEFT)) {
 8014496:	f1ba 0f05 	cmp.w	sl, #5
 801449a:	d10e      	bne.n	80144ba <lv_draw_rect+0x1db2>
                    lv_draw_px(lb_origo.x + LV_CIRC_OCT4_X(aa_p) + 1, lb_origo.y + LV_CIRC_OCT4_Y(aa_p) + i, mask,
 801449c:	9b04      	ldr	r3, [sp, #16]
 801449e:	9600      	str	r6, [sp, #0]
 80144a0:	1959      	adds	r1, r3, r5
 80144a2:	9b06      	ldr	r3, [sp, #24]
 80144a4:	1c58      	adds	r0, r3, #1
 80144a6:	9b08      	ldr	r3, [sp, #32]
 80144a8:	1ac0      	subs	r0, r0, r3
 80144aa:	9b02      	ldr	r3, [sp, #8]
 80144ac:	4421      	add	r1, r4
 80144ae:	895b      	ldrh	r3, [r3, #10]
 80144b0:	465a      	mov	r2, fp
 80144b2:	b209      	sxth	r1, r1
 80144b4:	b200      	sxth	r0, r0
 80144b6:	f7fd f973 	bl	80117a0 <lv_draw_px>
                if((part & LV_BORDER_TOP) && (part & LV_BORDER_LEFT)) {
 80144ba:	f1b8 0f06 	cmp.w	r8, #6
 80144be:	d10e      	bne.n	80144de <lv_draw_rect+0x1dd6>
                    lv_draw_px(lt_origo.x + LV_CIRC_OCT6_X(aa_p) - i, lt_origo.y + LV_CIRC_OCT6_Y(aa_p) + 1, mask,
 80144c0:	9b03      	ldr	r3, [sp, #12]
 80144c2:	9600      	str	r6, [sp, #0]
 80144c4:	1c59      	adds	r1, r3, #1
 80144c6:	9b08      	ldr	r3, [sp, #32]
 80144c8:	1ac9      	subs	r1, r1, r3
 80144ca:	9b06      	ldr	r3, [sp, #24]
 80144cc:	1b58      	subs	r0, r3, r5
 80144ce:	9b02      	ldr	r3, [sp, #8]
 80144d0:	1b00      	subs	r0, r0, r4
 80144d2:	895b      	ldrh	r3, [r3, #10]
 80144d4:	465a      	mov	r2, fp
 80144d6:	b209      	sxth	r1, r1
 80144d8:	b200      	sxth	r0, r0
 80144da:	f7fd f961 	bl	80117a0 <lv_draw_px>
                if((part & LV_BORDER_TOP) && (part & LV_BORDER_RIGHT)) {
 80144de:	2f0a      	cmp	r7, #10
 80144e0:	d10a      	bne.n	80144f8 <lv_draw_rect+0x1df0>
                    lv_draw_px(rt_origo.x + LV_CIRC_OCT8_X(aa_p) - 1, rt_origo.y + LV_CIRC_OCT8_Y(aa_p) - i, mask,
 80144e2:	9b03      	ldr	r3, [sp, #12]
 80144e4:	9600      	str	r6, [sp, #0]
 80144e6:	1b59      	subs	r1, r3, r5
 80144e8:	9b02      	ldr	r3, [sp, #8]
 80144ea:	980b      	ldr	r0, [sp, #44]	; 0x2c
 80144ec:	895b      	ldrh	r3, [r3, #10]
 80144ee:	1b09      	subs	r1, r1, r4
 80144f0:	465a      	mov	r2, fp
 80144f2:	b209      	sxth	r1, r1
 80144f4:	f7fd f954 	bl	80117a0 <lv_draw_px>
 80144f8:	3401      	adds	r4, #1
 80144fa:	f7fe bfab 	b.w	8013454 <lv_draw_rect+0xd4c>
            if(mcolor.full == gcolor.full)
 80144fe:	9b03      	ldr	r3, [sp, #12]
 8014500:	454b      	cmp	r3, r9
 8014502:	f47f a9bb 	bne.w	801387c <lv_draw_rect+0x1174>
                act_color = mcolor;
 8014506:	f8bd 200c 	ldrh.w	r2, [sp, #12]
            lv_draw_fill(&edge_top_area, mask, act_color, opa);
 801450a:	9b04      	ldr	r3, [sp, #16]
 801450c:	4659      	mov	r1, fp
 801450e:	a820      	add	r0, sp, #128	; 0x80
 8014510:	f7fd f995 	bl	801183e <lv_draw_fill>
 8014514:	f7ff b8a6 	b.w	8013664 <lv_draw_rect+0xf5c>

08014518 <lv_img_cache_open>:
 * @param style style of the image
 * @return pointer to the cache entry or NULL if can open the image
 */
lv_img_cache_entry_t * lv_img_cache_open(const void * src, const lv_style_t * style)
{
    if(entry_cnt == 0) {
 8014518:	4b34      	ldr	r3, [pc, #208]	; (80145ec <lv_img_cache_open+0xd4>)
{
 801451a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    if(entry_cnt == 0) {
 801451e:	881c      	ldrh	r4, [r3, #0]
{
 8014520:	4605      	mov	r5, r0
 8014522:	460e      	mov	r6, r1
    if(entry_cnt == 0) {
 8014524:	b1ec      	cbz	r4, 8014562 <lv_img_cache_open+0x4a>
        LV_LOG_WARN("lv_img_cache_open: the cache size is 0");
        return NULL;
    }

    lv_img_cache_entry_t * cache = LV_GC_ROOT(_lv_img_cache_array);
 8014526:	4b32      	ldr	r3, [pc, #200]	; (80145f0 <lv_img_cache_open+0xd8>)

    /*Decrement all lifes. Make the entries older*/
    uint16_t i;
    for(i = 0; i < entry_cnt; i++) {
        if(cache[i].life > INT32_MIN + LV_IMG_CACHE_AGING) {
 8014528:	f8df e0c8 	ldr.w	lr, [pc, #200]	; 80145f4 <lv_img_cache_open+0xdc>
    lv_img_cache_entry_t * cache = LV_GC_ROOT(_lv_img_cache_array);
 801452c:	681a      	ldr	r2, [r3, #0]
 801452e:	2728      	movs	r7, #40	; 0x28
 8014530:	4613      	mov	r3, r2
 8014532:	fb07 2704 	mla	r7, r7, r4, r2
    for(i = 0; i < entry_cnt; i++) {
 8014536:	4611      	mov	r1, r2
 8014538:	428f      	cmp	r7, r1
 801453a:	d115      	bne.n	8014568 <lv_img_cache_open+0x50>
 801453c:	3c01      	subs	r4, #1
 801453e:	b2a4      	uxth	r4, r4
 8014540:	2128      	movs	r1, #40	; 0x28
 8014542:	fb04 1101 	mla	r1, r4, r1, r1
 8014546:	4411      	add	r1, r2
    }

    /*Is the image cached?*/
    lv_img_cache_entry_t * cached_src = NULL;
    for(i = 0; i < entry_cnt; i++) {
        if(cache[i].dec_dsc.src == src) {
 8014548:	6858      	ldr	r0, [r3, #4]
 801454a:	42a8      	cmp	r0, r5
 801454c:	461c      	mov	r4, r3
 801454e:	d113      	bne.n	8014578 <lv_img_cache_open+0x60>
            /* If opened increment its life.
             * Image difficult to open should live longer to keep avoid frequent their recaching.
             * Therefore increase `life` with `time_to_open`*/
            cached_src = &cache[i];
            cached_src->life += cached_src->dec_dsc.time_to_open * LV_IMG_CACHE_LIFE_GAIN;
 8014550:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014552:	69a2      	ldr	r2, [r4, #24]
 8014554:	4413      	add	r3, r2
            if(cached_src->life > LV_IMG_CACHE_LIFE_LIMIT) cached_src->life = LV_IMG_CACHE_LIFE_LIMIT;
 8014556:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 801455a:	bfc8      	it	gt
 801455c:	f44f 737a 	movgt.w	r3, #1000	; 0x3e8
 8014560:	6263      	str	r3, [r4, #36]	; 0x24

        if(cached_src->dec_dsc.time_to_open == 0) cached_src->dec_dsc.time_to_open = 1;
    }

    return cached_src;
}
 8014562:	4620      	mov	r0, r4
 8014564:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        if(cache[i].life > INT32_MIN + LV_IMG_CACHE_AGING) {
 8014568:	6a48      	ldr	r0, [r1, #36]	; 0x24
 801456a:	4570      	cmp	r0, lr
            cache[i].life -= LV_IMG_CACHE_AGING;
 801456c:	bfa4      	itt	ge
 801456e:	f100 30ff 	addge.w	r0, r0, #4294967295	; 0xffffffff
 8014572:	6248      	strge	r0, [r1, #36]	; 0x24
 8014574:	3128      	adds	r1, #40	; 0x28
 8014576:	e7df      	b.n	8014538 <lv_img_cache_open+0x20>
 8014578:	3328      	adds	r3, #40	; 0x28
    for(i = 0; i < entry_cnt; i++) {
 801457a:	428b      	cmp	r3, r1
 801457c:	d1e4      	bne.n	8014548 <lv_img_cache_open+0x30>
 801457e:	f102 0128 	add.w	r1, r2, #40	; 0x28
 8014582:	4614      	mov	r4, r2
        for(i = 1; i < entry_cnt; i++) {
 8014584:	428b      	cmp	r3, r1
 8014586:	d11d      	bne.n	80145c4 <lv_img_cache_open+0xac>
        if(cached_src->dec_dsc.src) {
 8014588:	6863      	ldr	r3, [r4, #4]
 801458a:	b113      	cbz	r3, 8014592 <lv_img_cache_open+0x7a>
            lv_img_decoder_close(&cached_src->dec_dsc);
 801458c:	4620      	mov	r0, r4
 801458e:	f000 fadd 	bl	8014b4c <lv_img_decoder_close>
        t_start                          = lv_tick_get();
 8014592:	f000 fd2f 	bl	8014ff4 <lv_tick_get>
        cached_src->dec_dsc.time_to_open = 0;
 8014596:	2700      	movs	r7, #0
        lv_res_t open_res                = lv_img_decoder_open(&cached_src->dec_dsc, src, style);
 8014598:	4629      	mov	r1, r5
        t_start                          = lv_tick_get();
 801459a:	4680      	mov	r8, r0
        cached_src->dec_dsc.time_to_open = 0;
 801459c:	61a7      	str	r7, [r4, #24]
        lv_res_t open_res                = lv_img_decoder_open(&cached_src->dec_dsc, src, style);
 801459e:	4632      	mov	r2, r6
 80145a0:	4620      	mov	r0, r4
 80145a2:	f000 fa85 	bl	8014ab0 <lv_img_decoder_open>
        if(open_res == LV_RES_INV) {
 80145a6:	4605      	mov	r5, r0
 80145a8:	b998      	cbnz	r0, 80145d2 <lv_img_cache_open+0xba>
            lv_img_decoder_close(&cached_src->dec_dsc);
 80145aa:	4620      	mov	r0, r4
 80145ac:	f000 face 	bl	8014b4c <lv_img_decoder_close>
            memset(cached_src, 0, sizeof(lv_img_cache_entry_t));
 80145b0:	4620      	mov	r0, r4
 80145b2:	2228      	movs	r2, #40	; 0x28
 80145b4:	4629      	mov	r1, r5
 80145b6:	f006 fc0a 	bl	801adce <memset>
            cached_src->life = INT32_MIN; /*Make the empty entry very "weak" to force its use  */
 80145ba:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80145be:	6263      	str	r3, [r4, #36]	; 0x24
            return NULL;
 80145c0:	462c      	mov	r4, r5
 80145c2:	e7ce      	b.n	8014562 <lv_img_cache_open+0x4a>
            if(cache[i].life < cached_src->life) {
 80145c4:	6a48      	ldr	r0, [r1, #36]	; 0x24
 80145c6:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80145c8:	4290      	cmp	r0, r2
 80145ca:	bfb8      	it	lt
 80145cc:	460c      	movlt	r4, r1
 80145ce:	3128      	adds	r1, #40	; 0x28
 80145d0:	e7d8      	b.n	8014584 <lv_img_cache_open+0x6c>
        if(cached_src->dec_dsc.time_to_open == 0) {
 80145d2:	69a3      	ldr	r3, [r4, #24]
        cached_src->life = 0;
 80145d4:	6267      	str	r7, [r4, #36]	; 0x24
        if(cached_src->dec_dsc.time_to_open == 0) {
 80145d6:	b91b      	cbnz	r3, 80145e0 <lv_img_cache_open+0xc8>
            cached_src->dec_dsc.time_to_open = lv_tick_elaps(t_start);
 80145d8:	4640      	mov	r0, r8
 80145da:	f000 fd19 	bl	8015010 <lv_tick_elaps>
 80145de:	61a0      	str	r0, [r4, #24]
        if(cached_src->dec_dsc.time_to_open == 0) cached_src->dec_dsc.time_to_open = 1;
 80145e0:	69a3      	ldr	r3, [r4, #24]
 80145e2:	2b00      	cmp	r3, #0
 80145e4:	d1bd      	bne.n	8014562 <lv_img_cache_open+0x4a>
 80145e6:	2301      	movs	r3, #1
 80145e8:	61a3      	str	r3, [r4, #24]
 80145ea:	e7ba      	b.n	8014562 <lv_img_cache_open+0x4a>
 80145ec:	200061f4 	.word	0x200061f4
 80145f0:	2000c818 	.word	0x2000c818
 80145f4:	80000002 	.word	0x80000002

080145f8 <lv_img_cache_invalidate_src>:
 * Invalidate an image source in the cache.
 * Useful if the image source is updated therefore it needs to be cached again.
 * @param src an image source path to a file or pointer to an `lv_img_dsc_t` variable.
 */
void lv_img_cache_invalidate_src(const void * src)
{
 80145f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}

    lv_img_cache_entry_t * cache = LV_GC_ROOT(_lv_img_cache_array);
 80145fc:	4b0f      	ldr	r3, [pc, #60]	; (801463c <lv_img_cache_invalidate_src+0x44>)

    uint16_t i;
    for(i = 0; i < entry_cnt; i++) {
 80145fe:	4f10      	ldr	r7, [pc, #64]	; (8014640 <lv_img_cache_invalidate_src+0x48>)
    lv_img_cache_entry_t * cache = LV_GC_ROOT(_lv_img_cache_array);
 8014600:	f8d3 8000 	ldr.w	r8, [r3]
{
 8014604:	4606      	mov	r6, r0
    for(i = 0; i < entry_cnt; i++) {
 8014606:	2500      	movs	r5, #0
        if(cache[i].dec_dsc.src == src || src == NULL) {
 8014608:	f04f 0928 	mov.w	r9, #40	; 0x28
    for(i = 0; i < entry_cnt; i++) {
 801460c:	883a      	ldrh	r2, [r7, #0]
 801460e:	b2ab      	uxth	r3, r5
 8014610:	429a      	cmp	r2, r3
 8014612:	d801      	bhi.n	8014618 <lv_img_cache_invalidate_src+0x20>

            memset(&cache[i].dec_dsc, 0, sizeof(lv_img_decoder_dsc_t));
            memset(&cache[i], 0, sizeof(lv_img_cache_entry_t));
        }
    }
}
 8014614:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        if(cache[i].dec_dsc.src == src || src == NULL) {
 8014618:	b2ac      	uxth	r4, r5
 801461a:	fb09 8404 	mla	r4, r9, r4, r8
 801461e:	6863      	ldr	r3, [r4, #4]
 8014620:	42b3      	cmp	r3, r6
 8014622:	d000      	beq.n	8014626 <lv_img_cache_invalidate_src+0x2e>
 8014624:	b946      	cbnz	r6, 8014638 <lv_img_cache_invalidate_src+0x40>
            if(cache[i].dec_dsc.src != NULL) {
 8014626:	b113      	cbz	r3, 801462e <lv_img_cache_invalidate_src+0x36>
                lv_img_decoder_close(&cache[i].dec_dsc);
 8014628:	4620      	mov	r0, r4
 801462a:	f000 fa8f 	bl	8014b4c <lv_img_decoder_close>
            memset(&cache[i], 0, sizeof(lv_img_cache_entry_t));
 801462e:	2228      	movs	r2, #40	; 0x28
 8014630:	2100      	movs	r1, #0
 8014632:	4620      	mov	r0, r4
 8014634:	f006 fbcb 	bl	801adce <memset>
 8014638:	3501      	adds	r5, #1
 801463a:	e7e7      	b.n	801460c <lv_img_cache_invalidate_src+0x14>
 801463c:	2000c818 	.word	0x2000c818
 8014640:	200061f4 	.word	0x200061f4

08014644 <lv_img_cache_set_size>:
{
 8014644:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    if(LV_GC_ROOT(_lv_img_cache_array) != NULL) {
 8014648:	4c14      	ldr	r4, [pc, #80]	; (801469c <lv_img_cache_set_size+0x58>)
 801464a:	6823      	ldr	r3, [r4, #0]
{
 801464c:	4680      	mov	r8, r0
    if(LV_GC_ROOT(_lv_img_cache_array) != NULL) {
 801464e:	b12b      	cbz	r3, 801465c <lv_img_cache_set_size+0x18>
        lv_img_cache_invalidate_src(NULL);
 8014650:	2000      	movs	r0, #0
 8014652:	f7ff ffd1 	bl	80145f8 <lv_img_cache_invalidate_src>
        lv_mem_free(LV_GC_ROOT(_lv_img_cache_array));
 8014656:	6820      	ldr	r0, [r4, #0]
 8014658:	f001 f8ca 	bl	80157f0 <lv_mem_free>
    LV_GC_ROOT(_lv_img_cache_array) = lv_mem_alloc(sizeof(lv_img_cache_entry_t) * new_entry_cnt);
 801465c:	2628      	movs	r6, #40	; 0x28
 801465e:	fb06 f008 	mul.w	r0, r6, r8
 8014662:	f001 f88f 	bl	8015784 <lv_mem_alloc>
 8014666:	6020      	str	r0, [r4, #0]
    lv_mem_assert(LV_GC_ROOT(_lv_img_cache_array));
 8014668:	b900      	cbnz	r0, 801466c <lv_img_cache_set_size+0x28>
 801466a:	e7fe      	b.n	801466a <lv_img_cache_set_size+0x26>
    entry_cnt = new_entry_cnt;
 801466c:	4b0c      	ldr	r3, [pc, #48]	; (80146a0 <lv_img_cache_set_size+0x5c>)
    for(i = 0; i < entry_cnt; i++) {
 801466e:	2500      	movs	r5, #0
    entry_cnt = new_entry_cnt;
 8014670:	f8a3 8000 	strh.w	r8, [r3]
    for(i = 0; i < entry_cnt; i++) {
 8014674:	45a8      	cmp	r8, r5
 8014676:	d101      	bne.n	801467c <lv_img_cache_set_size+0x38>
}
 8014678:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        memset(&LV_GC_ROOT(_lv_img_cache_array)[i].dec_dsc, 0, sizeof(lv_img_decoder_dsc_t));
 801467c:	6820      	ldr	r0, [r4, #0]
 801467e:	fb06 f705 	mul.w	r7, r6, r5
 8014682:	2224      	movs	r2, #36	; 0x24
 8014684:	2100      	movs	r1, #0
 8014686:	4438      	add	r0, r7
 8014688:	f006 fba1 	bl	801adce <memset>
        memset(&LV_GC_ROOT(_lv_img_cache_array)[i], 0, sizeof(lv_img_cache_entry_t));
 801468c:	6820      	ldr	r0, [r4, #0]
 801468e:	2228      	movs	r2, #40	; 0x28
 8014690:	2100      	movs	r1, #0
 8014692:	4438      	add	r0, r7
 8014694:	f006 fb9b 	bl	801adce <memset>
 8014698:	3501      	adds	r5, #1
 801469a:	e7eb      	b.n	8014674 <lv_img_cache_set_size+0x30>
 801469c:	2000c818 	.word	0x2000c818
 80146a0:	200061f4 	.word	0x200061f4

080146a4 <lv_img_decoder_built_in_close>:
 * Close the pending decoding. Free resources etc.
 * @param decoder pointer to the decoder the function associated with
 * @param dsc pointer to decoder descriptor
 */
void lv_img_decoder_built_in_close(lv_img_decoder_t * decoder, lv_img_decoder_dsc_t * dsc)
{
 80146a4:	b538      	push	{r3, r4, r5, lr}
    (void)decoder; /*Unused*/

    lv_img_decoder_built_in_data_t * user_data = dsc->user_data;
 80146a6:	6a0c      	ldr	r4, [r1, #32]
{
 80146a8:	460d      	mov	r5, r1
    if(user_data) {
 80146aa:	b144      	cbz	r4, 80146be <lv_img_decoder_built_in_close+0x1a>
        if(user_data->f) {
            lv_fs_close(user_data->f);
            lv_mem_free(user_data->f);
        }
#endif
        if(user_data->palette) lv_mem_free(user_data->palette);
 80146ac:	6820      	ldr	r0, [r4, #0]
 80146ae:	b108      	cbz	r0, 80146b4 <lv_img_decoder_built_in_close+0x10>
 80146b0:	f001 f89e 	bl	80157f0 <lv_mem_free>

        lv_mem_free(user_data);
 80146b4:	4620      	mov	r0, r4
 80146b6:	f001 f89b 	bl	80157f0 <lv_mem_free>

        dsc->user_data = NULL;
 80146ba:	2300      	movs	r3, #0
 80146bc:	622b      	str	r3, [r5, #32]
 80146be:	bd38      	pop	{r3, r4, r5, pc}

080146c0 <lv_img_decoder_built_in_read_line>:
{
 80146c0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    if(dsc->header.cf == LV_IMG_CF_TRUE_COLOR || dsc->header.cf == LV_IMG_CF_TRUE_COLOR_ALPHA ||
 80146c4:	7c08      	ldrb	r0, [r1, #16]
{
 80146c6:	461e      	mov	r6, r3
    if(dsc->header.cf == LV_IMG_CF_TRUE_COLOR || dsc->header.cf == LV_IMG_CF_TRUE_COLOR_ALPHA ||
 80146c8:	f000 031f 	and.w	r3, r0, #31
{
 80146cc:	b087      	sub	sp, #28
 80146ce:	4614      	mov	r4, r2
    if(dsc->header.cf == LV_IMG_CF_TRUE_COLOR || dsc->header.cf == LV_IMG_CF_TRUE_COLOR_ALPHA ||
 80146d0:	1f1a      	subs	r2, r3, #4
 80146d2:	2a02      	cmp	r2, #2
{
 80146d4:	460d      	mov	r5, r1
 80146d6:	f9bd 8038 	ldrsh.w	r8, [sp, #56]	; 0x38
 80146da:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
    if(dsc->header.cf == LV_IMG_CF_TRUE_COLOR || dsc->header.cf == LV_IMG_CF_TRUE_COLOR_ALPHA ||
 80146dc:	d803      	bhi.n	80146e6 <lv_img_decoder_built_in_read_line+0x26>
        lv_fs_read(user_data->f, fs_buf, w, NULL);
        data_tmp = fs_buf;
#else
        LV_LOG_WARN("Image built-in alpha line reader can't read file because LV_USE_FILESYSTEM = 0");
        data_tmp = NULL; /*To avoid warnings*/
        return LV_RES_INV;
 80146de:	2000      	movs	r0, #0
}
 80146e0:	b007      	add	sp, #28
 80146e2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    } else if(dsc->header.cf == LV_IMG_CF_ALPHA_1BIT || dsc->header.cf == LV_IMG_CF_ALPHA_2BIT ||
 80146e6:	f1a3 020b 	sub.w	r2, r3, #11
 80146ea:	2a03      	cmp	r2, #3
 80146ec:	f200 80b3 	bhi.w	8014856 <lv_img_decoder_built_in_read_line+0x196>
    const lv_opa_t alpha1_opa_table[2]  = {0, 255};          /*Opacity mapping with bpp = 1 (Just for compatibility)*/
 80146f0:	2200      	movs	r2, #0
 80146f2:	23ff      	movs	r3, #255	; 0xff
 80146f4:	f88d 2000 	strb.w	r2, [sp]
    const lv_opa_t alpha2_opa_table[4]  = {0, 85, 170, 255}; /*Opacity mapping with bpp = 2*/
 80146f8:	f88d 2004 	strb.w	r2, [sp, #4]
 80146fc:	2255      	movs	r2, #85	; 0x55
    const lv_opa_t alpha1_opa_table[2]  = {0, 255};          /*Opacity mapping with bpp = 1 (Just for compatibility)*/
 80146fe:	f88d 3001 	strb.w	r3, [sp, #1]
    const lv_opa_t alpha2_opa_table[4]  = {0, 85, 170, 255}; /*Opacity mapping with bpp = 2*/
 8014702:	f88d 2005 	strb.w	r2, [sp, #5]
 8014706:	f88d 3007 	strb.w	r3, [sp, #7]
 801470a:	22aa      	movs	r2, #170	; 0xaa
    const lv_opa_t alpha4_opa_table[16] = {0,  17, 34,  51,  /*Opacity mapping with bpp = 4*/
 801470c:	4b92      	ldr	r3, [pc, #584]	; (8014958 <lv_img_decoder_built_in_read_line+0x298>)
    const lv_opa_t alpha2_opa_table[4]  = {0, 85, 170, 255}; /*Opacity mapping with bpp = 2*/
 801470e:	f88d 2006 	strb.w	r2, [sp, #6]
    const lv_opa_t alpha4_opa_table[16] = {0,  17, 34,  51,  /*Opacity mapping with bpp = 4*/
 8014712:	aa02      	add	r2, sp, #8
 8014714:	f103 0c10 	add.w	ip, r3, #16
 8014718:	4691      	mov	r9, r2
 801471a:	6818      	ldr	r0, [r3, #0]
 801471c:	6859      	ldr	r1, [r3, #4]
 801471e:	4696      	mov	lr, r2
 8014720:	e8ae 0003 	stmia.w	lr!, {r0, r1}
 8014724:	3308      	adds	r3, #8
 8014726:	4563      	cmp	r3, ip
 8014728:	4672      	mov	r2, lr
 801472a:	d1f6      	bne.n	801471a <lv_img_decoder_built_in_read_line+0x5a>
    lv_color_t bg_color = dsc->style->image.color;
 801472c:	68ab      	ldr	r3, [r5, #8]
 801472e:	8e19      	ldrh	r1, [r3, #48]	; 0x30
        buf[i * LV_IMG_PX_SIZE_ALPHA_BYTE + 1] = (bg_color.full >> 8) & 0xFF;
 8014730:	2200      	movs	r2, #0
 8014732:	ea4f 2e11 	mov.w	lr, r1, lsr #8
 8014736:	463b      	mov	r3, r7
    for(i = 0; i < len; i++) {
 8014738:	b210      	sxth	r0, r2
 801473a:	4580      	cmp	r8, r0
 801473c:	f103 0303 	add.w	r3, r3, #3
 8014740:	dc0e      	bgt.n	8014760 <lv_img_decoder_built_in_read_line+0xa0>
    uint8_t px_size            = lv_img_color_format_get_px_size(dsc->header.cf);
 8014742:	7c28      	ldrb	r0, [r5, #16]
 8014744:	f000 001f 	and.w	r0, r0, #31
 8014748:	f7fd fc20 	bl	8011f8c <lv_img_color_format_get_px_size>
    switch(dsc->header.cf) {
 801474c:	7c2b      	ldrb	r3, [r5, #16]
 801474e:	f003 031f 	and.w	r3, r3, #31
 8014752:	3b0b      	subs	r3, #11
 8014754:	2b03      	cmp	r3, #3
 8014756:	d85d      	bhi.n	8014814 <lv_img_decoder_built_in_read_line+0x154>
 8014758:	e8df f003 	tbb	[pc, r3]
 801475c:	54402c08 	.word	0x54402c08
        buf[i * LV_IMG_PX_SIZE_ALPHA_BYTE] = bg_color.full & 0xFF;
 8014760:	f803 1c03 	strb.w	r1, [r3, #-3]
        buf[i * LV_IMG_PX_SIZE_ALPHA_BYTE + 1] = (bg_color.full >> 8) & 0xFF;
 8014764:	f803 ec02 	strb.w	lr, [r3, #-2]
 8014768:	3201      	adds	r2, #1
 801476a:	e7e5      	b.n	8014738 <lv_img_decoder_built_in_read_line+0x78>
            w = (dsc->header.w >> 3); /*E.g. w = 20 -> w = 2 + 1*/
 801476c:	692a      	ldr	r2, [r5, #16]
 801476e:	f3c2 228a 	ubfx	r2, r2, #10, #11
 8014772:	10d3      	asrs	r3, r2, #3
            if(dsc->header.w & 0x7) w++;
 8014774:	0751      	lsls	r1, r2, #29
            w = (dsc->header.w >> 3); /*E.g. w = 20 -> w = 2 + 1*/
 8014776:	bf08      	it	eq
 8014778:	b21b      	sxtheq	r3, r3
            ofs += w * y + (x >> 3); /*First pixel*/
 801477a:	ea4f 02e4 	mov.w	r2, r4, asr #3
            if(dsc->header.w & 0x7) w++;
 801477e:	bf18      	it	ne
 8014780:	3301      	addne	r3, #1
            pos       = 7 - (x & 0x7);
 8014782:	43e4      	mvns	r4, r4
            ofs += w * y + (x >> 3); /*First pixel*/
 8014784:	fb03 2306 	mla	r3, r3, r6, r2
            pos       = 7 - (x & 0x7);
 8014788:	f004 0407 	and.w	r4, r4, #7
            opa_table = alpha1_opa_table;
 801478c:	46ee      	mov	lr, sp
    if(dsc->src_type == LV_IMG_SRC_VARIABLE) {
 801478e:	7b29      	ldrb	r1, [r5, #12]
 8014790:	2900      	cmp	r1, #0
 8014792:	d1a4      	bne.n	80146de <lv_img_decoder_built_in_read_line+0x1e>
        data_tmp = img_dsc->data + ofs;
 8014794:	686a      	ldr	r2, [r5, #4]
    uint16_t mask              = (1 << px_size) - 1; /*E.g. px_size = 2; mask = 0x03*/
 8014796:	2601      	movs	r6, #1
        data_tmp = img_dsc->data + ofs;
 8014798:	6892      	ldr	r2, [r2, #8]
    uint16_t mask              = (1 << px_size) - 1; /*E.g. px_size = 2; mask = 0x03*/
 801479a:	4086      	lsls	r6, r0
 801479c:	3e01      	subs	r6, #1
        buf[i * LV_IMG_PX_SIZE_ALPHA_BYTE + LV_IMG_PX_SIZE_ALPHA_BYTE - 1] =
            dsc->header.cf == LV_IMG_CF_ALPHA_8BIT ? val_act : opa_table[val_act];

        pos -= px_size;
        if(pos < 0) {
            pos = 8 - px_size;
 801479e:	f1c0 0c08 	rsb	ip, r0, #8
        data_tmp = img_dsc->data + ofs;
 80147a2:	4413      	add	r3, r2
        val_act = (data_tmp[byte_act] & (mask << pos)) >> pos;
 80147a4:	b2b6      	uxth	r6, r6
            pos = 8 - px_size;
 80147a6:	fa4f fc8c 	sxtb.w	ip, ip
    for(i = 0; i < len; i++) {
 80147aa:	b20a      	sxth	r2, r1
 80147ac:	4590      	cmp	r8, r2
 80147ae:	dc34      	bgt.n	801481a <lv_img_decoder_built_in_read_line+0x15a>
            pos = 8 - px_size;
            data_tmp++;
        }
    }

    return LV_RES_OK;
 80147b0:	2001      	movs	r0, #1
 80147b2:	e795      	b.n	80146e0 <lv_img_decoder_built_in_read_line+0x20>
            w = (dsc->header.w >> 2); /*E.g. w = 13 -> w = 3 + 1 (bytes)*/
 80147b4:	692a      	ldr	r2, [r5, #16]
 80147b6:	f3c2 228a 	ubfx	r2, r2, #10, #11
 80147ba:	1093      	asrs	r3, r2, #2
            if(dsc->header.w & 0x3) w++;
 80147bc:	0792      	lsls	r2, r2, #30
            ofs += w * y + (x >> 2); /*First pixel*/
 80147be:	ea4f 02a4 	mov.w	r2, r4, asr #2
            pos       = 6 - ((x & 0x3) * 2);
 80147c2:	ea6f 0404 	mvn.w	r4, r4
            w = (dsc->header.w >> 2); /*E.g. w = 13 -> w = 3 + 1 (bytes)*/
 80147c6:	bf0c      	ite	eq
 80147c8:	b21b      	sxtheq	r3, r3
            if(dsc->header.w & 0x3) w++;
 80147ca:	3301      	addne	r3, #1
            pos       = 6 - ((x & 0x3) * 2);
 80147cc:	f004 0403 	and.w	r4, r4, #3
            ofs += w * y + (x >> 2); /*First pixel*/
 80147d0:	fb03 2306 	mla	r3, r3, r6, r2
            pos       = 6 - ((x & 0x3) * 2);
 80147d4:	0064      	lsls	r4, r4, #1
            opa_table = alpha2_opa_table;
 80147d6:	f10d 0e04 	add.w	lr, sp, #4
 80147da:	e7d8      	b.n	801478e <lv_img_decoder_built_in_read_line+0xce>
            w = (dsc->header.w >> 1); /*E.g. w = 13 -> w = 6 + 1 (bytes)*/
 80147dc:	692a      	ldr	r2, [r5, #16]
 80147de:	f3c2 228a 	ubfx	r2, r2, #10, #11
 80147e2:	1053      	asrs	r3, r2, #1
            if(dsc->header.w & 0x1) w++;
 80147e4:	07d1      	lsls	r1, r2, #31
            w = (dsc->header.w >> 1); /*E.g. w = 13 -> w = 6 + 1 (bytes)*/
 80147e6:	bf58      	it	pl
 80147e8:	b21b      	sxthpl	r3, r3
            ofs += w * y + (x >> 1); /*First pixel*/
 80147ea:	ea4f 0264 	mov.w	r2, r4, asr #1
            if(dsc->header.w & 0x1) w++;
 80147ee:	bf48      	it	mi
 80147f0:	3301      	addmi	r3, #1
            pos       = 4 - ((x & 0x1) * 4);
 80147f2:	f014 0f01 	tst.w	r4, #1
            ofs += w * y + (x >> 1); /*First pixel*/
 80147f6:	fb03 2306 	mla	r3, r3, r6, r2
            pos       = 4 - ((x & 0x1) * 4);
 80147fa:	bf0c      	ite	eq
 80147fc:	2404      	moveq	r4, #4
 80147fe:	2400      	movne	r4, #0
 8014800:	46ce      	mov	lr, r9
 8014802:	e7c4      	b.n	801478e <lv_img_decoder_built_in_read_line+0xce>
            w = dsc->header.w; /*E.g. x = 7 -> w = 7 (bytes)*/
 8014804:	692b      	ldr	r3, [r5, #16]
 8014806:	f3c3 238a 	ubfx	r3, r3, #10, #11
            ofs += w * y + x;  /*First pixel*/
 801480a:	fb16 4303 	smlabb	r3, r6, r3, r4
            pos = 0;
 801480e:	2400      	movs	r4, #0
    const lv_opa_t * opa_table = NULL;
 8014810:	46a6      	mov	lr, r4
 8014812:	e7bc      	b.n	801478e <lv_img_decoder_built_in_read_line+0xce>
    int8_t pos   = 0;
 8014814:	2400      	movs	r4, #0
    uint32_t ofs = 0;
 8014816:	4623      	mov	r3, r4
 8014818:	e7fa      	b.n	8014810 <lv_img_decoder_built_in_read_line+0x150>
        val_act = (data_tmp[byte_act] & (mask << pos)) >> pos;
 801481a:	781a      	ldrb	r2, [r3, #0]
 801481c:	fa06 f904 	lsl.w	r9, r6, r4
 8014820:	ea02 0209 	and.w	r2, r2, r9
            dsc->header.cf == LV_IMG_CF_ALPHA_8BIT ? val_act : opa_table[val_act];
 8014824:	f895 9010 	ldrb.w	r9, [r5, #16]
        val_act = (data_tmp[byte_act] & (mask << pos)) >> pos;
 8014828:	4122      	asrs	r2, r4
        buf[i * LV_IMG_PX_SIZE_ALPHA_BYTE + LV_IMG_PX_SIZE_ALPHA_BYTE - 1] =
 801482a:	f009 091f 	and.w	r9, r9, #31
 801482e:	f1b9 0f0e 	cmp.w	r9, #14
 8014832:	b2d2      	uxtb	r2, r2
 8014834:	eb01 0941 	add.w	r9, r1, r1, lsl #1
        pos -= px_size;
 8014838:	eba4 0400 	sub.w	r4, r4, r0
 801483c:	b264      	sxtb	r4, r4
        buf[i * LV_IMG_PX_SIZE_ALPHA_BYTE + LV_IMG_PX_SIZE_ALPHA_BYTE - 1] =
 801483e:	44b9      	add	r9, r7
 8014840:	bf18      	it	ne
 8014842:	f81e 2002 	ldrbne.w	r2, [lr, r2]
 8014846:	f889 2002 	strb.w	r2, [r9, #2]
        if(pos < 0) {
 801484a:	2c00      	cmp	r4, #0
            pos = 8 - px_size;
 801484c:	bfbc      	itt	lt
 801484e:	4664      	movlt	r4, ip
            data_tmp++;
 8014850:	3301      	addlt	r3, #1
 8014852:	3101      	adds	r1, #1
 8014854:	e7a9      	b.n	80147aa <lv_img_decoder_built_in_read_line+0xea>
    } else if(dsc->header.cf == LV_IMG_CF_INDEXED_1BIT || dsc->header.cf == LV_IMG_CF_INDEXED_2BIT ||
 8014856:	3b07      	subs	r3, #7
 8014858:	2b03      	cmp	r3, #3
 801485a:	f63f af40 	bhi.w	80146de <lv_img_decoder_built_in_read_line+0x1e>
    uint8_t px_size = lv_img_color_format_get_px_size(dsc->header.cf);
 801485e:	f000 001f 	and.w	r0, r0, #31
 8014862:	f7fd fb93 	bl	8011f8c <lv_img_color_format_get_px_size>
    switch(dsc->header.cf) {
 8014866:	7c2b      	ldrb	r3, [r5, #16]
 8014868:	f003 031f 	and.w	r3, r3, #31
 801486c:	3b07      	subs	r3, #7
 801486e:	2b03      	cmp	r3, #3
 8014870:	d86f      	bhi.n	8014952 <lv_img_decoder_built_in_read_line+0x292>
 8014872:	e8df f003 	tbb	[pc, r3]
 8014876:	3d02      	.short	0x3d02
 8014878:	6550      	.short	0x6550
            w = (dsc->header.w >> 3); /*E.g. w = 20 -> w = 2 + 1*/
 801487a:	692a      	ldr	r2, [r5, #16]
 801487c:	f3c2 228a 	ubfx	r2, r2, #10, #11
 8014880:	10d3      	asrs	r3, r2, #3
            if(dsc->header.w & 0x7) w++;
 8014882:	0752      	lsls	r2, r2, #29
            w = (dsc->header.w >> 3); /*E.g. w = 20 -> w = 2 + 1*/
 8014884:	bf08      	it	eq
 8014886:	b21b      	sxtheq	r3, r3
            ofs += w * y + (x >> 3); /*First pixel*/
 8014888:	ea4f 02e4 	mov.w	r2, r4, asr #3
            if(dsc->header.w & 0x7) w++;
 801488c:	bf18      	it	ne
 801488e:	3301      	addne	r3, #1
            ofs += w * y + (x >> 3); /*First pixel*/
 8014890:	fb03 2306 	mla	r3, r3, r6, r2
            pos = 7 - (x & 0x7);
 8014894:	43e4      	mvns	r4, r4
            ofs += 8;                /*Skip the palette*/
 8014896:	3308      	adds	r3, #8
            pos = 7 - (x & 0x7);
 8014898:	f004 0407 	and.w	r4, r4, #7
    if(dsc->src_type == LV_IMG_SRC_VARIABLE) {
 801489c:	7b2e      	ldrb	r6, [r5, #12]
 801489e:	2e00      	cmp	r6, #0
 80148a0:	f47f af1d 	bne.w	80146de <lv_img_decoder_built_in_read_line+0x1e>
        data_tmp                     = img_dsc->data + ofs;
 80148a4:	6869      	ldr	r1, [r5, #4]
    lv_img_decoder_built_in_data_t * user_data = dsc->user_data;
 80148a6:	6a2a      	ldr	r2, [r5, #32]
        data_tmp                     = img_dsc->data + ofs;
 80148a8:	6889      	ldr	r1, [r1, #8]
 80148aa:	440b      	add	r3, r1
    uint16_t mask   = (1 << px_size) - 1; /*E.g. px_size = 2; mask = 0x03*/
 80148ac:	2101      	movs	r1, #1
 80148ae:	4081      	lsls	r1, r0
 80148b0:	3901      	subs	r1, #1
        val_act = (data_tmp[byte_act] & (mask << pos)) >> pos;
 80148b2:	4635      	mov	r5, r6
            pos = 8 - px_size;
 80148b4:	f1c0 0608 	rsb	r6, r0, #8
        val_act = (data_tmp[byte_act] & (mask << pos)) >> pos;
 80148b8:	fa1f fe81 	uxth.w	lr, r1
            pos = 8 - px_size;
 80148bc:	b276      	sxtb	r6, r6
    for(i = 0; i < len; i++) {
 80148be:	b229      	sxth	r1, r5
 80148c0:	4588      	cmp	r8, r1
 80148c2:	f77f af75 	ble.w	80147b0 <lv_img_decoder_built_in_read_line+0xf0>
        val_act = (data_tmp[byte_act] & (mask << pos)) >> pos;
 80148c6:	7819      	ldrb	r1, [r3, #0]
 80148c8:	fa0e fc04 	lsl.w	ip, lr, r4
 80148cc:	ea01 010c 	and.w	r1, r1, ip
 80148d0:	4121      	asrs	r1, r4
        cbuf[i] = user_data->palette[val_act];
 80148d2:	f8d2 c000 	ldr.w	ip, [r2]
 80148d6:	b2c9      	uxtb	r1, r1
        pos -= px_size;
 80148d8:	1a24      	subs	r4, r4, r0
 80148da:	b264      	sxtb	r4, r4
        if(pos < 0) {
 80148dc:	2c00      	cmp	r4, #0
        cbuf[i] = user_data->palette[val_act];
 80148de:	f83c 1011 	ldrh.w	r1, [ip, r1, lsl #1]
 80148e2:	f827 1015 	strh.w	r1, [r7, r5, lsl #1]
            pos = 8 - px_size;
 80148e6:	bfbc      	itt	lt
 80148e8:	4634      	movlt	r4, r6
            data_tmp++;
 80148ea:	3301      	addlt	r3, #1
 80148ec:	3501      	adds	r5, #1
 80148ee:	e7e6      	b.n	80148be <lv_img_decoder_built_in_read_line+0x1fe>
            w = (dsc->header.w >> 2); /*E.g. w = 13 -> w = 3 + 1 (bytes)*/
 80148f0:	692a      	ldr	r2, [r5, #16]
 80148f2:	f3c2 228a 	ubfx	r2, r2, #10, #11
 80148f6:	1093      	asrs	r3, r2, #2
            if(dsc->header.w & 0x3) w++;
 80148f8:	0791      	lsls	r1, r2, #30
            w = (dsc->header.w >> 2); /*E.g. w = 13 -> w = 3 + 1 (bytes)*/
 80148fa:	bf08      	it	eq
 80148fc:	b21b      	sxtheq	r3, r3
            ofs += w * y + (x >> 2); /*First pixel*/
 80148fe:	ea4f 02a4 	mov.w	r2, r4, asr #2
            if(dsc->header.w & 0x3) w++;
 8014902:	bf18      	it	ne
 8014904:	3301      	addne	r3, #1
            pos = 6 - ((x & 0x3) * 2);
 8014906:	43e4      	mvns	r4, r4
            ofs += w * y + (x >> 2); /*First pixel*/
 8014908:	fb03 2306 	mla	r3, r3, r6, r2
            pos = 6 - ((x & 0x3) * 2);
 801490c:	f004 0403 	and.w	r4, r4, #3
            ofs += 16;               /*Skip the palette*/
 8014910:	3310      	adds	r3, #16
            pos = 6 - ((x & 0x3) * 2);
 8014912:	0064      	lsls	r4, r4, #1
 8014914:	e7c2      	b.n	801489c <lv_img_decoder_built_in_read_line+0x1dc>
            w = (dsc->header.w >> 1); /*E.g. w = 13 -> w = 6 + 1 (bytes)*/
 8014916:	692a      	ldr	r2, [r5, #16]
 8014918:	f3c2 228a 	ubfx	r2, r2, #10, #11
 801491c:	1053      	asrs	r3, r2, #1
            if(dsc->header.w & 0x1) w++;
 801491e:	07d2      	lsls	r2, r2, #31
            w = (dsc->header.w >> 1); /*E.g. w = 13 -> w = 6 + 1 (bytes)*/
 8014920:	bf58      	it	pl
 8014922:	b21b      	sxthpl	r3, r3
            ofs += w * y + (x >> 1); /*First pixel*/
 8014924:	ea4f 0264 	mov.w	r2, r4, asr #1
            if(dsc->header.w & 0x1) w++;
 8014928:	bf48      	it	mi
 801492a:	3301      	addmi	r3, #1
            ofs += w * y + (x >> 1); /*First pixel*/
 801492c:	fb03 2306 	mla	r3, r3, r6, r2
            pos = 4 - ((x & 0x1) * 4);
 8014930:	f014 0f01 	tst.w	r4, #1
            ofs += 64;               /*Skip the palette*/
 8014934:	f103 0340 	add.w	r3, r3, #64	; 0x40
            pos = 4 - ((x & 0x1) * 4);
 8014938:	bf0c      	ite	eq
 801493a:	2404      	moveq	r4, #4
 801493c:	2400      	movne	r4, #0
 801493e:	e7ad      	b.n	801489c <lv_img_decoder_built_in_read_line+0x1dc>
            w = dsc->header.w; /*E.g. x = 7 -> w = 7 (bytes)*/
 8014940:	692b      	ldr	r3, [r5, #16]
 8014942:	f3c3 238a 	ubfx	r3, r3, #10, #11
            ofs += w * y + x;  /*First pixel*/
 8014946:	fb16 4303 	smlabb	r3, r6, r3, r4
            ofs += 1024;       /*Skip the palette*/
 801494a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
            pos = 0;
 801494e:	2400      	movs	r4, #0
 8014950:	e7a4      	b.n	801489c <lv_img_decoder_built_in_read_line+0x1dc>
    uint32_t ofs = 0;
 8014952:	2300      	movs	r3, #0
    int8_t pos   = 0;
 8014954:	461c      	mov	r4, r3
 8014956:	e7a1      	b.n	801489c <lv_img_decoder_built_in_read_line+0x1dc>
 8014958:	0801d8f0 	.word	0x0801d8f0

0801495c <lv_img_decoder_built_in_open>:
{
 801495c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if(dsc->src_type == LV_IMG_SRC_FILE) {
 801495e:	7b0a      	ldrb	r2, [r1, #12]
 8014960:	2a01      	cmp	r2, #1
{
 8014962:	460c      	mov	r4, r1
    if(dsc->src_type == LV_IMG_SRC_FILE) {
 8014964:	d101      	bne.n	801496a <lv_img_decoder_built_in_open+0xe>
        return LV_RES_INV;
 8014966:	2000      	movs	r0, #0
}
 8014968:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    lv_img_cf_t cf = dsc->header.cf;
 801496a:	7c0b      	ldrb	r3, [r1, #16]
 801496c:	f003 031f 	and.w	r3, r3, #31
    if(cf == LV_IMG_CF_TRUE_COLOR || cf == LV_IMG_CF_TRUE_COLOR_ALPHA || cf == LV_IMG_CF_TRUE_COLOR_CHROMA_KEYED) {
 8014970:	1f1d      	subs	r5, r3, #4
 8014972:	2d02      	cmp	r5, #2
 8014974:	d805      	bhi.n	8014982 <lv_img_decoder_built_in_open+0x26>
        if(dsc->src_type == LV_IMG_SRC_VARIABLE) {
 8014976:	bb2a      	cbnz	r2, 80149c4 <lv_img_decoder_built_in_open+0x68>
            dsc->img_data = ((lv_img_dsc_t *)dsc->src)->data;
 8014978:	684b      	ldr	r3, [r1, #4]
 801497a:	689b      	ldr	r3, [r3, #8]
            dsc->img_data = NULL;
 801497c:	6163      	str	r3, [r4, #20]
            return LV_RES_OK;
 801497e:	2001      	movs	r0, #1
 8014980:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    else if(cf == LV_IMG_CF_INDEXED_1BIT || cf == LV_IMG_CF_INDEXED_2BIT || cf == LV_IMG_CF_INDEXED_4BIT ||
 8014982:	1fda      	subs	r2, r3, #7
 8014984:	2a03      	cmp	r2, #3
 8014986:	d836      	bhi.n	80149f6 <lv_img_decoder_built_in_open+0x9a>
        uint8_t px_size       = lv_img_color_format_get_px_size(cf);
 8014988:	4618      	mov	r0, r3
 801498a:	f7fd faff 	bl	8011f8c <lv_img_color_format_get_px_size>
        if(dsc->user_data == NULL) {
 801498e:	6a26      	ldr	r6, [r4, #32]
        uint8_t px_size       = lv_img_color_format_get_px_size(cf);
 8014990:	4607      	mov	r7, r0
        if(dsc->user_data == NULL) {
 8014992:	b936      	cbnz	r6, 80149a2 <lv_img_decoder_built_in_open+0x46>
            dsc->user_data = lv_mem_alloc(sizeof(lv_img_decoder_built_in_data_t));
 8014994:	2004      	movs	r0, #4
 8014996:	f000 fef5 	bl	8015784 <lv_mem_alloc>
 801499a:	6220      	str	r0, [r4, #32]
            if(dsc->user_data == NULL) {
 801499c:	b900      	cbnz	r0, 80149a0 <lv_img_decoder_built_in_open+0x44>
 801499e:	e7fe      	b.n	801499e <lv_img_decoder_built_in_open+0x42>
            memset(dsc->user_data, 0, sizeof(lv_img_decoder_built_in_data_t));
 80149a0:	6006      	str	r6, [r0, #0]
        user_data->palette                         = lv_mem_alloc(palette_size * sizeof(lv_color_t));
 80149a2:	2502      	movs	r5, #2
 80149a4:	40bd      	lsls	r5, r7
 80149a6:	4628      	mov	r0, r5
        lv_img_decoder_built_in_data_t * user_data = dsc->user_data;
 80149a8:	6a26      	ldr	r6, [r4, #32]
        user_data->palette                         = lv_mem_alloc(palette_size * sizeof(lv_color_t));
 80149aa:	f000 feeb 	bl	8015784 <lv_mem_alloc>
 80149ae:	6030      	str	r0, [r6, #0]
        if(dsc->src_type == LV_IMG_SRC_FILE) {
 80149b0:	7b23      	ldrb	r3, [r4, #12]
 80149b2:	2b01      	cmp	r3, #1
 80149b4:	d0d7      	beq.n	8014966 <lv_img_decoder_built_in_open+0xa>
            lv_color32_t * palette_p = (lv_color32_t *)((lv_img_dsc_t *)dsc->src)->data;
 80149b6:	6863      	ldr	r3, [r4, #4]
 80149b8:	689a      	ldr	r2, [r3, #8]
 80149ba:	4405      	add	r5, r0
            for(i = 0; i < palette_size; i++) {
 80149bc:	4285      	cmp	r5, r0
 80149be:	f102 0204 	add.w	r2, r2, #4
 80149c2:	d101      	bne.n	80149c8 <lv_img_decoder_built_in_open+0x6c>
            dsc->img_data = NULL;
 80149c4:	2300      	movs	r3, #0
 80149c6:	e7d9      	b.n	801497c <lv_img_decoder_built_in_open+0x20>
    color.ch.blue  = (uint16_t)(b8 >> 3);
 80149c8:	f812 3c04 	ldrb.w	r3, [r2, #-4]
                user_data->palette[i] = lv_color_make(palette_p[i].ch.red, palette_p[i].ch.green, palette_p[i].ch.blue);
 80149cc:	7807      	ldrb	r7, [r0, #0]
    color.ch.green = (uint16_t)(g8 >> 2);
 80149ce:	f812 6c03 	ldrb.w	r6, [r2, #-3]
    color.ch.red   = (uint16_t)(r8 >> 3);
 80149d2:	f812 1c02 	ldrb.w	r1, [r2, #-2]
    color.ch.blue  = (uint16_t)(b8 >> 3);
 80149d6:	08db      	lsrs	r3, r3, #3
 80149d8:	f363 0704 	bfi	r7, r3, #0, #5
 80149dc:	7007      	strb	r7, [r0, #0]
 80149de:	8803      	ldrh	r3, [r0, #0]
    color.ch.green = (uint16_t)(g8 >> 2);
 80149e0:	08b6      	lsrs	r6, r6, #2
 80149e2:	f366 134a 	bfi	r3, r6, #5, #6
 80149e6:	8003      	strh	r3, [r0, #0]
    color.ch.red   = (uint16_t)(r8 >> 3);
 80149e8:	08c9      	lsrs	r1, r1, #3
 80149ea:	0a1b      	lsrs	r3, r3, #8
 80149ec:	f361 03c7 	bfi	r3, r1, #3, #5
 80149f0:	7043      	strb	r3, [r0, #1]
 80149f2:	3002      	adds	r0, #2
 80149f4:	e7e2      	b.n	80149bc <lv_img_decoder_built_in_open+0x60>
    else if(cf == LV_IMG_CF_ALPHA_1BIT || cf == LV_IMG_CF_ALPHA_2BIT || cf == LV_IMG_CF_ALPHA_4BIT ||
 80149f6:	3b0b      	subs	r3, #11
 80149f8:	2b03      	cmp	r3, #3
 80149fa:	d9e3      	bls.n	80149c4 <lv_img_decoder_built_in_open+0x68>
        lv_img_decoder_built_in_close(decoder, dsc);
 80149fc:	f7ff fe52 	bl	80146a4 <lv_img_decoder_built_in_close>
 8014a00:	e7b1      	b.n	8014966 <lv_img_decoder_built_in_open+0xa>

08014a02 <lv_img_decoder_built_in_info>:
{
 8014a02:	b538      	push	{r3, r4, r5, lr}
    lv_img_src_t src_type = lv_img_src_get_type(src);
 8014a04:	4608      	mov	r0, r1
{
 8014a06:	460d      	mov	r5, r1
 8014a08:	4614      	mov	r4, r2
    lv_img_src_t src_type = lv_img_src_get_type(src);
 8014a0a:	f7fd fbc1 	bl	8012190 <lv_img_src_get_type>
    if(src_type == LV_IMG_SRC_VARIABLE) {
 8014a0e:	b9c8      	cbnz	r0, 8014a44 <lv_img_decoder_built_in_info+0x42>
        lv_img_cf_t cf = ((lv_img_dsc_t *)src)->header.cf;
 8014a10:	782b      	ldrb	r3, [r5, #0]
 8014a12:	f003 031f 	and.w	r3, r3, #31
        if(cf < CF_BUILT_IN_FIRST || cf > CF_BUILT_IN_LAST) return LV_RES_INV;
 8014a16:	1f1a      	subs	r2, r3, #4
 8014a18:	2a0a      	cmp	r2, #10
 8014a1a:	d824      	bhi.n	8014a66 <lv_img_decoder_built_in_info+0x64>
        header->w  = ((lv_img_dsc_t *)src)->header.w;
 8014a1c:	682a      	ldr	r2, [r5, #0]
 8014a1e:	6821      	ldr	r1, [r4, #0]
 8014a20:	f3c2 228a 	ubfx	r2, r2, #10, #11
 8014a24:	f362 2194 	bfi	r1, r2, #10, #11
 8014a28:	6021      	str	r1, [r4, #0]
        header->h  = ((lv_img_dsc_t *)src)->header.h;
 8014a2a:	886a      	ldrh	r2, [r5, #2]
 8014a2c:	8861      	ldrh	r1, [r4, #2]
 8014a2e:	f3c2 124a 	ubfx	r2, r2, #5, #11
 8014a32:	f362 114f 	bfi	r1, r2, #5, #11
        header->cf = ((lv_img_dsc_t *)src)->header.cf;
 8014a36:	7822      	ldrb	r2, [r4, #0]
        header->h  = ((lv_img_dsc_t *)src)->header.h;
 8014a38:	8061      	strh	r1, [r4, #2]
        header->cf = ((lv_img_dsc_t *)src)->header.cf;
 8014a3a:	f363 0204 	bfi	r2, r3, #0, #5
 8014a3e:	7022      	strb	r2, [r4, #0]
    return LV_RES_OK;
 8014a40:	2001      	movs	r0, #1
 8014a42:	bd38      	pop	{r3, r4, r5, pc}
    else if(src_type == LV_IMG_SRC_SYMBOL) {
 8014a44:	2802      	cmp	r0, #2
 8014a46:	d10d      	bne.n	8014a64 <lv_img_decoder_built_in_info+0x62>
        header->w = 1;
 8014a48:	6823      	ldr	r3, [r4, #0]
 8014a4a:	2001      	movs	r0, #1
 8014a4c:	f360 2394 	bfi	r3, r0, #10, #11
        header->h = 1;
 8014a50:	0c1a      	lsrs	r2, r3, #16
 8014a52:	f360 124f 	bfi	r2, r0, #5, #11
        header->w = 1;
 8014a56:	6023      	str	r3, [r4, #0]
        header->h = 1;
 8014a58:	8062      	strh	r2, [r4, #2]
        header->cf = LV_IMG_CF_ALPHA_1BIT;
 8014a5a:	220b      	movs	r2, #11
 8014a5c:	f362 0304 	bfi	r3, r2, #0, #5
 8014a60:	7023      	strb	r3, [r4, #0]
 8014a62:	bd38      	pop	{r3, r4, r5, pc}
        if(cf < CF_BUILT_IN_FIRST || cf > CF_BUILT_IN_LAST) return LV_RES_INV;
 8014a64:	2000      	movs	r0, #0
}
 8014a66:	bd38      	pop	{r3, r4, r5, pc}

08014a68 <lv_img_decoder_get_info>:
    header->always_zero = 0;
 8014a68:	780b      	ldrb	r3, [r1, #0]
 8014a6a:	f36f 1347 	bfc	r3, #5, #3
{
 8014a6e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014a72:	4607      	mov	r7, r0
    header->always_zero = 0;
 8014a74:	700b      	strb	r3, [r1, #0]
    LV_LL_READ(LV_GC_ROOT(_lv_img_defoder_ll), d)
 8014a76:	480d      	ldr	r0, [pc, #52]	; (8014aac <lv_img_decoder_get_info+0x44>)
 8014a78:	f8df 8030 	ldr.w	r8, [pc, #48]	; 8014aac <lv_img_decoder_get_info+0x44>
{
 8014a7c:	460e      	mov	r6, r1
    LV_LL_READ(LV_GC_ROOT(_lv_img_defoder_ll), d)
 8014a7e:	f000 fd39 	bl	80154f4 <lv_ll_get_head>
    lv_res_t res = LV_RES_INV;
 8014a82:	2400      	movs	r4, #0
    LV_LL_READ(LV_GC_ROOT(_lv_img_defoder_ll), d)
 8014a84:	4605      	mov	r5, r0
 8014a86:	b915      	cbnz	r5, 8014a8e <lv_img_decoder_get_info+0x26>
}
 8014a88:	4620      	mov	r0, r4
 8014a8a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        if(d->info_cb) {
 8014a8e:	682c      	ldr	r4, [r5, #0]
 8014a90:	b134      	cbz	r4, 8014aa0 <lv_img_decoder_get_info+0x38>
            res = d->info_cb(d, src, header);
 8014a92:	4632      	mov	r2, r6
 8014a94:	4639      	mov	r1, r7
 8014a96:	4628      	mov	r0, r5
 8014a98:	47a0      	blx	r4
            if(res == LV_RES_OK) break;
 8014a9a:	2801      	cmp	r0, #1
            res = d->info_cb(d, src, header);
 8014a9c:	4604      	mov	r4, r0
            if(res == LV_RES_OK) break;
 8014a9e:	d0f3      	beq.n	8014a88 <lv_img_decoder_get_info+0x20>
    LV_LL_READ(LV_GC_ROOT(_lv_img_defoder_ll), d)
 8014aa0:	4629      	mov	r1, r5
 8014aa2:	4640      	mov	r0, r8
 8014aa4:	f000 fd2c 	bl	8015500 <lv_ll_get_next>
 8014aa8:	4605      	mov	r5, r0
 8014aaa:	e7ec      	b.n	8014a86 <lv_img_decoder_get_info+0x1e>
 8014aac:	2000c7fc 	.word	0x2000c7fc

08014ab0 <lv_img_decoder_open>:
{
 8014ab0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014ab4:	4605      	mov	r5, r0
    dsc->style     = style;
 8014ab6:	6082      	str	r2, [r0, #8]
    dsc->src       = src;
 8014ab8:	6069      	str	r1, [r5, #4]
    dsc->src_type  = lv_img_src_get_type(src);
 8014aba:	4608      	mov	r0, r1
{
 8014abc:	460f      	mov	r7, r1
    dsc->src_type  = lv_img_src_get_type(src);
 8014abe:	f7fd fb67 	bl	8012190 <lv_img_src_get_type>
    dsc->user_data = NULL;
 8014ac2:	2400      	movs	r4, #0
    dsc->src_type  = lv_img_src_get_type(src);
 8014ac4:	7328      	strb	r0, [r5, #12]
    dsc->user_data = NULL;
 8014ac6:	622c      	str	r4, [r5, #32]
    LV_LL_READ(LV_GC_ROOT(_lv_img_defoder_ll), d)
 8014ac8:	4817      	ldr	r0, [pc, #92]	; (8014b28 <lv_img_decoder_open+0x78>)
 8014aca:	f8df a05c 	ldr.w	sl, [pc, #92]	; 8014b28 <lv_img_decoder_open+0x78>
 8014ace:	f000 fd11 	bl	80154f4 <lv_ll_get_head>
        res = d->info_cb(d, src, &dsc->header);
 8014ad2:	f105 0910 	add.w	r9, r5, #16
    LV_LL_READ(LV_GC_ROOT(_lv_img_defoder_ll), d)
 8014ad6:	4606      	mov	r6, r0
        dsc->error_msg = NULL;
 8014ad8:	46a0      	mov	r8, r4
    LV_LL_READ(LV_GC_ROOT(_lv_img_defoder_ll), d)
 8014ada:	b946      	cbnz	r6, 8014aee <lv_img_decoder_open+0x3e>
    if(res == LV_RES_INV) {
 8014adc:	b924      	cbnz	r4, 8014ae8 <lv_img_decoder_open+0x38>
        memset(dsc, 0, sizeof(lv_img_decoder_dsc_t));
 8014ade:	2224      	movs	r2, #36	; 0x24
 8014ae0:	4621      	mov	r1, r4
 8014ae2:	4628      	mov	r0, r5
 8014ae4:	f006 f973 	bl	801adce <memset>
}
 8014ae8:	4620      	mov	r0, r4
 8014aea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        if(d->info_cb == NULL || d->open_cb == NULL) continue;
 8014aee:	6833      	ldr	r3, [r6, #0]
 8014af0:	b1a3      	cbz	r3, 8014b1c <lv_img_decoder_open+0x6c>
 8014af2:	6872      	ldr	r2, [r6, #4]
 8014af4:	b192      	cbz	r2, 8014b1c <lv_img_decoder_open+0x6c>
        res = d->info_cb(d, src, &dsc->header);
 8014af6:	464a      	mov	r2, r9
 8014af8:	4639      	mov	r1, r7
 8014afa:	4630      	mov	r0, r6
 8014afc:	4798      	blx	r3
        if(res != LV_RES_OK) continue;
 8014afe:	2801      	cmp	r0, #1
        res = d->info_cb(d, src, &dsc->header);
 8014b00:	4604      	mov	r4, r0
        if(res != LV_RES_OK) continue;
 8014b02:	d10b      	bne.n	8014b1c <lv_img_decoder_open+0x6c>
        dsc->error_msg = NULL;
 8014b04:	f8c5 801c 	str.w	r8, [r5, #28]
        dsc->img_data  = NULL;
 8014b08:	f8c5 8014 	str.w	r8, [r5, #20]
        dsc->decoder   = d;
 8014b0c:	602e      	str	r6, [r5, #0]
        res = d->open_cb(d, dsc);
 8014b0e:	6873      	ldr	r3, [r6, #4]
 8014b10:	4629      	mov	r1, r5
 8014b12:	4630      	mov	r0, r6
 8014b14:	4798      	blx	r3
        if(res == LV_RES_OK) break;
 8014b16:	2801      	cmp	r0, #1
        res = d->open_cb(d, dsc);
 8014b18:	4604      	mov	r4, r0
        if(res == LV_RES_OK) break;
 8014b1a:	d0e5      	beq.n	8014ae8 <lv_img_decoder_open+0x38>
    LV_LL_READ(LV_GC_ROOT(_lv_img_defoder_ll), d)
 8014b1c:	4631      	mov	r1, r6
 8014b1e:	4650      	mov	r0, sl
 8014b20:	f000 fcee 	bl	8015500 <lv_ll_get_next>
 8014b24:	4606      	mov	r6, r0
 8014b26:	e7d8      	b.n	8014ada <lv_img_decoder_open+0x2a>
 8014b28:	2000c7fc 	.word	0x2000c7fc

08014b2c <lv_img_decoder_read_line>:
{
 8014b2c:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8014b2e:	4605      	mov	r5, r0
    if(dsc->decoder->read_line_cb) res = dsc->decoder->read_line_cb(dsc->decoder, dsc, x, y, len, buf);
 8014b30:	6800      	ldr	r0, [r0, #0]
 8014b32:	6884      	ldr	r4, [r0, #8]
 8014b34:	b144      	cbz	r4, 8014b48 <lv_img_decoder_read_line+0x1c>
 8014b36:	9e06      	ldr	r6, [sp, #24]
 8014b38:	e88d 0048 	stmia.w	sp, {r3, r6}
 8014b3c:	4613      	mov	r3, r2
 8014b3e:	460a      	mov	r2, r1
 8014b40:	4629      	mov	r1, r5
 8014b42:	47a0      	blx	r4
}
 8014b44:	b002      	add	sp, #8
 8014b46:	bd70      	pop	{r4, r5, r6, pc}
    lv_res_t res = LV_RES_INV;
 8014b48:	4620      	mov	r0, r4
 8014b4a:	e7fb      	b.n	8014b44 <lv_img_decoder_read_line+0x18>

08014b4c <lv_img_decoder_close>:
{
 8014b4c:	4601      	mov	r1, r0
    if(dsc->decoder) {
 8014b4e:	6800      	ldr	r0, [r0, #0]
 8014b50:	b110      	cbz	r0, 8014b58 <lv_img_decoder_close+0xc>
        if(dsc->decoder->close_cb) dsc->decoder->close_cb(dsc->decoder, dsc);
 8014b52:	68c2      	ldr	r2, [r0, #12]
 8014b54:	b102      	cbz	r2, 8014b58 <lv_img_decoder_close+0xc>
 8014b56:	4710      	bx	r2
 8014b58:	4770      	bx	lr
	...

08014b5c <lv_img_decoder_create>:
{
 8014b5c:	b510      	push	{r4, lr}
    decoder = lv_ll_ins_head(&LV_GC_ROOT(_lv_img_defoder_ll));
 8014b5e:	4806      	ldr	r0, [pc, #24]	; (8014b78 <lv_img_decoder_create+0x1c>)
 8014b60:	f000 fc8c 	bl	801547c <lv_ll_ins_head>
    lv_mem_assert(decoder);
 8014b64:	4604      	mov	r4, r0
 8014b66:	b900      	cbnz	r0, 8014b6a <lv_img_decoder_create+0xe>
 8014b68:	e7fe      	b.n	8014b68 <lv_img_decoder_create+0xc>
    memset(decoder, 0, sizeof(lv_img_decoder_t));
 8014b6a:	2214      	movs	r2, #20
 8014b6c:	2100      	movs	r1, #0
 8014b6e:	f006 f92e 	bl	801adce <memset>
}
 8014b72:	4620      	mov	r0, r4
 8014b74:	bd10      	pop	{r4, pc}
 8014b76:	bf00      	nop
 8014b78:	2000c7fc 	.word	0x2000c7fc

08014b7c <lv_img_decoder_init>:
{
 8014b7c:	b508      	push	{r3, lr}
    lv_ll_init(&LV_GC_ROOT(_lv_img_defoder_ll), sizeof(lv_img_decoder_t));
 8014b7e:	2114      	movs	r1, #20
 8014b80:	4807      	ldr	r0, [pc, #28]	; (8014ba0 <lv_img_decoder_init+0x24>)
 8014b82:	f000 fc71 	bl	8015468 <lv_ll_init>
    decoder = lv_img_decoder_create();
 8014b86:	f7ff ffe9 	bl	8014b5c <lv_img_decoder_create>
    if(decoder == NULL) {
 8014b8a:	b900      	cbnz	r0, 8014b8e <lv_img_decoder_init+0x12>
 8014b8c:	e7fe      	b.n	8014b8c <lv_img_decoder_init+0x10>
    decoder->info_cb = info_cb;
 8014b8e:	4b05      	ldr	r3, [pc, #20]	; (8014ba4 <lv_img_decoder_init+0x28>)
 8014b90:	6003      	str	r3, [r0, #0]
    decoder->open_cb = open_cb;
 8014b92:	4b05      	ldr	r3, [pc, #20]	; (8014ba8 <lv_img_decoder_init+0x2c>)
 8014b94:	6043      	str	r3, [r0, #4]
    decoder->read_line_cb = read_line_cb;
 8014b96:	4b05      	ldr	r3, [pc, #20]	; (8014bac <lv_img_decoder_init+0x30>)
 8014b98:	6083      	str	r3, [r0, #8]
    decoder->close_cb = close_cb;
 8014b9a:	4b05      	ldr	r3, [pc, #20]	; (8014bb0 <lv_img_decoder_init+0x34>)
 8014b9c:	60c3      	str	r3, [r0, #12]
 8014b9e:	bd08      	pop	{r3, pc}
 8014ba0:	2000c7fc 	.word	0x2000c7fc
 8014ba4:	08014a03 	.word	0x08014a03
 8014ba8:	0801495d 	.word	0x0801495d
 8014bac:	080146c1 	.word	0x080146c1
 8014bb0:	080146a5 	.word	0x080146a5

08014bb4 <lv_font_get_glyph_bitmap>:
 * @param letter an UNICODE character code
 * @return  pointer to the bitmap of the letter
 */
const uint8_t * lv_font_get_glyph_bitmap(const lv_font_t * font_p, uint32_t letter)
{
    return font_p->get_glyph_bitmap(font_p, letter);
 8014bb4:	6843      	ldr	r3, [r0, #4]
 8014bb6:	4718      	bx	r3

08014bb8 <lv_font_get_glyph_dsc>:
 * @param letter an UNICODE letter code
 * @return true: descriptor is successfully loaded into `dsc_out`.
 *         false: the letter was not found, no data is loaded to `dsc_out`
 */
bool lv_font_get_glyph_dsc(const lv_font_t * font_p, lv_font_glyph_dsc_t * dsc_out, uint32_t letter, uint32_t letter_next)
{
 8014bb8:	b410      	push	{r4}
    return font_p->get_glyph_dsc(font_p, dsc_out, letter, letter_next);
 8014bba:	6804      	ldr	r4, [r0, #0]
 8014bbc:	46a4      	mov	ip, r4
}
 8014bbe:	f85d 4b04 	ldr.w	r4, [sp], #4
    return font_p->get_glyph_dsc(font_p, dsc_out, letter, letter_next);
 8014bc2:	4760      	bx	ip

08014bc4 <lv_font_get_glyph_width>:
 * @param letter an UNICODE letter
 * @param letter_next the next letter after `letter`. Used for kerning
 * @return the width of the glyph
 */
uint16_t lv_font_get_glyph_width(const lv_font_t * font, uint32_t letter, uint32_t letter_next)
{
 8014bc4:	b507      	push	{r0, r1, r2, lr}
    lv_font_glyph_dsc_t g;
    bool ret;
    ret = lv_font_get_glyph_dsc(font, &g, letter, letter_next);
 8014bc6:	4613      	mov	r3, r2
 8014bc8:	460a      	mov	r2, r1
 8014bca:	4669      	mov	r1, sp
 8014bcc:	f7ff fff4 	bl	8014bb8 <lv_font_get_glyph_dsc>
    if(ret) return g.adv_w;
 8014bd0:	b108      	cbz	r0, 8014bd6 <lv_font_get_glyph_width+0x12>
 8014bd2:	f8bd 0000 	ldrh.w	r0, [sp]
    else return 0;
}
 8014bd6:	b003      	add	sp, #12
 8014bd8:	f85d fb04 	ldr.w	pc, [sp], #4

08014bdc <kern_pair_8_compare>:
{
    const uint8_t * ref8_p = ref;
    const uint8_t * element8_p = element;

    /*If the MSB is different it will matter. If not return the diff. of the LSB*/
    if(ref8_p[0] != element8_p[0]) return (int32_t)ref8_p[0] - element8_p[0];
 8014bdc:	7803      	ldrb	r3, [r0, #0]
 8014bde:	780a      	ldrb	r2, [r1, #0]
 8014be0:	4293      	cmp	r3, r2
 8014be2:	bf11      	iteee	ne
 8014be4:	1a98      	subne	r0, r3, r2
    else return (int32_t) ref8_p[1] - element8_p[1];
 8014be6:	784b      	ldrbeq	r3, [r1, #1]
 8014be8:	7840      	ldrbeq	r0, [r0, #1]
 8014bea:	1ac0      	subeq	r0, r0, r3

}
 8014bec:	4770      	bx	lr

08014bee <kern_pair_16_compare>:
{
    const uint16_t * ref16_p = ref;
    const uint16_t * element16_p = element;

    /*If the MSB is different it will matter. If not return the diff. of the LSB*/
    if(ref16_p[0] != element16_p[0]) return (int32_t)ref16_p[0] - element16_p[0];
 8014bee:	8803      	ldrh	r3, [r0, #0]
 8014bf0:	880a      	ldrh	r2, [r1, #0]
 8014bf2:	4293      	cmp	r3, r2
 8014bf4:	bf11      	iteee	ne
 8014bf6:	1a98      	subne	r0, r3, r2
    else return (int32_t) ref16_p[1] - element16_p[1];
 8014bf8:	884b      	ldrheq	r3, [r1, #2]
 8014bfa:	8840      	ldrheq	r0, [r0, #2]
 8014bfc:	1ac0      	subeq	r0, r0, r3
}
 8014bfe:	4770      	bx	lr

08014c00 <unicode_list_compare>:
 *  @retval > 0   Reference is less than element.
 *
 */
static int32_t unicode_list_compare(const void * ref, const void * element)
{
    return (*(uint16_t *)ref) - (*(uint16_t *)element);
 8014c00:	8800      	ldrh	r0, [r0, #0]
 8014c02:	880b      	ldrh	r3, [r1, #0]
}
 8014c04:	1ac0      	subs	r0, r0, r3
 8014c06:	4770      	bx	lr

08014c08 <get_glyph_dsc_id.isra.0.part.1>:
static uint32_t get_glyph_dsc_id(const lv_font_t * font, uint32_t letter)
 8014c08:	b5f0      	push	{r4, r5, r6, r7, lr}
    lv_font_fmt_txt_dsc_t * fdsc = (lv_font_fmt_txt_dsc_t *) font->dsc;
 8014c0a:	6804      	ldr	r4, [r0, #0]
    if(letter == fdsc->last_letter) return fdsc->last_glyph_id;
 8014c0c:	6963      	ldr	r3, [r4, #20]
 8014c0e:	428b      	cmp	r3, r1
static uint32_t get_glyph_dsc_id(const lv_font_t * font, uint32_t letter)
 8014c10:	b085      	sub	sp, #20
 8014c12:	460d      	mov	r5, r1
    if(letter == fdsc->last_letter) return fdsc->last_glyph_id;
 8014c14:	d00b      	beq.n	8014c2e <get_glyph_dsc_id.isra.0.part.1+0x26>
 8014c16:	2700      	movs	r7, #0
        uint32_t rcp = letter - fdsc->cmaps[i].range_start;
 8014c18:	f04f 0e14 	mov.w	lr, #20
    for(i = 0; i < fdsc->cmap_num; i++) {
 8014c1c:	8a63      	ldrh	r3, [r4, #18]
 8014c1e:	b2be      	uxth	r6, r7
 8014c20:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8014c24:	429e      	cmp	r6, r3
 8014c26:	db05      	blt.n	8014c34 <get_glyph_dsc_id.isra.0.part.1+0x2c>
    fdsc->last_letter = letter;
 8014c28:	6165      	str	r5, [r4, #20]
    fdsc->last_glyph_id = 0;
 8014c2a:	2000      	movs	r0, #0
 8014c2c:	e015      	b.n	8014c5a <get_glyph_dsc_id.isra.0.part.1+0x52>
    if(letter == fdsc->last_letter) return fdsc->last_glyph_id;
 8014c2e:	69a0      	ldr	r0, [r4, #24]
}
 8014c30:	b005      	add	sp, #20
 8014c32:	bdf0      	pop	{r4, r5, r6, r7, pc}
        uint32_t rcp = letter - fdsc->cmaps[i].range_start;
 8014c34:	68a3      	ldr	r3, [r4, #8]
 8014c36:	fb0e f606 	mul.w	r6, lr, r6
 8014c3a:	1999      	adds	r1, r3, r6
 8014c3c:	599a      	ldr	r2, [r3, r6]
        if(rcp > fdsc->cmaps[i].range_length) continue;
 8014c3e:	888b      	ldrh	r3, [r1, #4]
        uint32_t rcp = letter - fdsc->cmaps[i].range_start;
 8014c40:	1aaa      	subs	r2, r5, r2
        if(rcp > fdsc->cmaps[i].range_length) continue;
 8014c42:	429a      	cmp	r2, r3
        uint32_t rcp = letter - fdsc->cmaps[i].range_start;
 8014c44:	9203      	str	r2, [sp, #12]
 8014c46:	f107 0701 	add.w	r7, r7, #1
        if(rcp > fdsc->cmaps[i].range_length) continue;
 8014c4a:	d8e7      	bhi.n	8014c1c <get_glyph_dsc_id.isra.0.part.1+0x14>
        if(fdsc->cmaps[i].type == LV_FONT_FMT_TXT_CMAP_FORMAT0_TINY) {
 8014c4c:	7c8b      	ldrb	r3, [r1, #18]
 8014c4e:	f013 0303 	ands.w	r3, r3, #3
 8014c52:	d104      	bne.n	8014c5e <get_glyph_dsc_id.isra.0.part.1+0x56>
            glyph_id = fdsc->cmaps[i].glyph_id_start + rcp;
 8014c54:	88c8      	ldrh	r0, [r1, #6]
 8014c56:	4410      	add	r0, r2
        fdsc->last_letter = letter;
 8014c58:	6165      	str	r5, [r4, #20]
    fdsc->last_glyph_id = 0;
 8014c5a:	61a0      	str	r0, [r4, #24]
 8014c5c:	e7e8      	b.n	8014c30 <get_glyph_dsc_id.isra.0.part.1+0x28>
        else if(fdsc->cmaps[i].type == LV_FONT_FMT_TXT_CMAP_FORMAT0_FULL) {
 8014c5e:	2b01      	cmp	r3, #1
 8014c60:	d104      	bne.n	8014c6c <get_glyph_dsc_id.isra.0.part.1+0x64>
            glyph_id = fdsc->cmaps[i].glyph_id_start + gid_ofs_8[rcp];
 8014c62:	68cb      	ldr	r3, [r1, #12]
 8014c64:	5c98      	ldrb	r0, [r3, r2]
 8014c66:	88cb      	ldrh	r3, [r1, #6]
                glyph_id = fdsc->cmaps[i].glyph_id_start + gid_ofs_16[ofs];
 8014c68:	4418      	add	r0, r3
 8014c6a:	e7f5      	b.n	8014c58 <get_glyph_dsc_id.isra.0.part.1+0x50>
 8014c6c:	4811      	ldr	r0, [pc, #68]	; (8014cb4 <get_glyph_dsc_id.isra.0.part.1+0xac>)
 8014c6e:	8a0a      	ldrh	r2, [r1, #16]
            uint8_t * p = lv_utils_bsearch(&rcp, fdsc->cmaps[i].unicode_list, fdsc->cmaps[i].list_length, sizeof(fdsc->cmaps[i].unicode_list[0]), unicode_list_compare);
 8014c70:	9000      	str	r0, [sp, #0]
        else if(fdsc->cmaps[i].type == LV_FONT_FMT_TXT_CMAP_SPARSE_TINY) {
 8014c72:	2b02      	cmp	r3, #2
 8014c74:	d10e      	bne.n	8014c94 <get_glyph_dsc_id.isra.0.part.1+0x8c>
            uint8_t * p = lv_utils_bsearch(&rcp, fdsc->cmaps[i].unicode_list, fdsc->cmaps[i].list_length, sizeof(fdsc->cmaps[i].unicode_list[0]), unicode_list_compare);
 8014c76:	6889      	ldr	r1, [r1, #8]
 8014c78:	a803      	add	r0, sp, #12
 8014c7a:	f001 f996 	bl	8015faa <lv_utils_bsearch>
            if(p) {
 8014c7e:	b908      	cbnz	r0, 8014c84 <get_glyph_dsc_id.isra.0.part.1+0x7c>
        uint32_t glyph_id = 0;
 8014c80:	2000      	movs	r0, #0
 8014c82:	e7e9      	b.n	8014c58 <get_glyph_dsc_id.isra.0.part.1+0x50>
                uint32_t ofs = (lv_uintptr_t)p - (lv_uintptr_t) fdsc->cmaps[i].unicode_list;
 8014c84:	68a3      	ldr	r3, [r4, #8]
 8014c86:	441e      	add	r6, r3
 8014c88:	68b3      	ldr	r3, [r6, #8]
 8014c8a:	1ac3      	subs	r3, r0, r3
                glyph_id = fdsc->cmaps[i].glyph_id_start + ofs;
 8014c8c:	88f0      	ldrh	r0, [r6, #6]
 8014c8e:	eb00 0053 	add.w	r0, r0, r3, lsr #1
 8014c92:	e7e1      	b.n	8014c58 <get_glyph_dsc_id.isra.0.part.1+0x50>
            uint8_t * p = lv_utils_bsearch(&rcp, fdsc->cmaps[i].unicode_list, fdsc->cmaps[i].list_length, sizeof(fdsc->cmaps[i].unicode_list[0]), unicode_list_compare);
 8014c94:	2302      	movs	r3, #2
 8014c96:	6889      	ldr	r1, [r1, #8]
 8014c98:	a803      	add	r0, sp, #12
 8014c9a:	f001 f986 	bl	8015faa <lv_utils_bsearch>
            if(p) {
 8014c9e:	2800      	cmp	r0, #0
 8014ca0:	d0ee      	beq.n	8014c80 <get_glyph_dsc_id.isra.0.part.1+0x78>
                uint32_t ofs = (lv_uintptr_t)p - (lv_uintptr_t) fdsc->cmaps[i].unicode_list;
 8014ca2:	68a3      	ldr	r3, [r4, #8]
 8014ca4:	441e      	add	r6, r3
 8014ca6:	68b3      	ldr	r3, [r6, #8]
 8014ca8:	1ac0      	subs	r0, r0, r3
                ofs = ofs >> 1;     /*The list stores `uint16_t` so the get the index divide by 2*/
 8014caa:	0840      	lsrs	r0, r0, #1
                glyph_id = fdsc->cmaps[i].glyph_id_start + gid_ofs_16[ofs];
 8014cac:	68f3      	ldr	r3, [r6, #12]
 8014cae:	5c18      	ldrb	r0, [r3, r0]
 8014cb0:	88f3      	ldrh	r3, [r6, #6]
 8014cb2:	e7d9      	b.n	8014c68 <get_glyph_dsc_id.isra.0.part.1+0x60>
 8014cb4:	08014c01 	.word	0x08014c01

08014cb8 <lv_font_get_bitmap_fmt_txt>:
{
 8014cb8:	b510      	push	{r4, lr}
    if(letter == '\0') return 0;
 8014cba:	b909      	cbnz	r1, 8014cc0 <lv_font_get_bitmap_fmt_txt+0x8>
    if(!gid) return false;
 8014cbc:	2000      	movs	r0, #0
 8014cbe:	bd10      	pop	{r4, pc}
    lv_font_fmt_txt_dsc_t * fdsc = (lv_font_fmt_txt_dsc_t *) font->dsc;
 8014cc0:	f850 4f0c 	ldr.w	r4, [r0, #12]!
 8014cc4:	f7ff ffa0 	bl	8014c08 <get_glyph_dsc_id.isra.0.part.1>
    if(!gid) return false;
 8014cc8:	2800      	cmp	r0, #0
 8014cca:	d0f7      	beq.n	8014cbc <lv_font_get_bitmap_fmt_txt+0x4>
    const lv_font_fmt_txt_glyph_dsc_t * gdsc = &fdsc->glyph_dsc[gid];
 8014ccc:	6863      	ldr	r3, [r4, #4]
 8014cce:	eb03 02c0 	add.w	r2, r3, r0, lsl #3
    if(gdsc) return &fdsc->glyph_bitmap[gdsc->bitmap_index];
 8014cd2:	2a00      	cmp	r2, #0
 8014cd4:	d0f2      	beq.n	8014cbc <lv_font_get_bitmap_fmt_txt+0x4>
 8014cd6:	f853 3030 	ldr.w	r3, [r3, r0, lsl #3]
 8014cda:	6820      	ldr	r0, [r4, #0]
 8014cdc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8014ce0:	4418      	add	r0, r3
}
 8014ce2:	bd10      	pop	{r4, pc}

08014ce4 <lv_font_get_glyph_dsc_fmt_txt>:
{
 8014ce4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8014ce8:	4680      	mov	r8, r0
 8014cea:	b085      	sub	sp, #20
 8014cec:	460c      	mov	r4, r1
 8014cee:	4699      	mov	r9, r3
    if(letter == '\0') return 0;
 8014cf0:	b91a      	cbnz	r2, 8014cfa <lv_font_get_glyph_dsc_fmt_txt+0x16>
    if(!gid) return false;
 8014cf2:	2000      	movs	r0, #0
}
 8014cf4:	b005      	add	sp, #20
 8014cf6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    lv_font_fmt_txt_dsc_t * fdsc = (lv_font_fmt_txt_dsc_t *) font->dsc;
 8014cfa:	4607      	mov	r7, r0
 8014cfc:	4611      	mov	r1, r2
 8014cfe:	f857 5f0c 	ldr.w	r5, [r7, #12]!
 8014d02:	4638      	mov	r0, r7
 8014d04:	f7ff ff80 	bl	8014c08 <get_glyph_dsc_id.isra.0.part.1>
    if(!gid) return false;
 8014d08:	4606      	mov	r6, r0
 8014d0a:	2800      	cmp	r0, #0
 8014d0c:	d0f1      	beq.n	8014cf2 <lv_font_get_glyph_dsc_fmt_txt+0xe>
    if(fdsc->kern_dsc) {
 8014d0e:	68eb      	ldr	r3, [r5, #12]
 8014d10:	b9db      	cbnz	r3, 8014d4a <lv_font_get_glyph_dsc_fmt_txt+0x66>
    int8_t kvalue = 0;
 8014d12:	2000      	movs	r0, #0
    const lv_font_fmt_txt_glyph_dsc_t * gdsc = &fdsc->glyph_dsc[gid];
 8014d14:	686b      	ldr	r3, [r5, #4]
 8014d16:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
    uint32_t adv_w = gdsc->adv_w + ((int32_t)((int32_t)kvalue * fdsc->kern_scale) >> 4);
 8014d1a:	8a2b      	ldrh	r3, [r5, #16]
 8014d1c:	4358      	muls	r0, r3
 8014d1e:	8873      	ldrh	r3, [r6, #2]
 8014d20:	f3c3 130b 	ubfx	r3, r3, #4, #12
 8014d24:	eb03 1020 	add.w	r0, r3, r0, asr #4
    adv_w  = (adv_w + (1 << 3)) >> 4;
 8014d28:	3008      	adds	r0, #8
 8014d2a:	0900      	lsrs	r0, r0, #4
    dsc_out->adv_w = adv_w;
 8014d2c:	8020      	strh	r0, [r4, #0]
    dsc_out->box_h = gdsc->box_h;
 8014d2e:	7973      	ldrb	r3, [r6, #5]
 8014d30:	70e3      	strb	r3, [r4, #3]
    dsc_out->box_w = gdsc->box_w;
 8014d32:	7933      	ldrb	r3, [r6, #4]
 8014d34:	70a3      	strb	r3, [r4, #2]
    dsc_out->ofs_x = gdsc->ofs_x;
 8014d36:	79b3      	ldrb	r3, [r6, #6]
 8014d38:	7123      	strb	r3, [r4, #4]
    dsc_out->ofs_y = gdsc->ofs_y;
 8014d3a:	79f3      	ldrb	r3, [r6, #7]
 8014d3c:	7163      	strb	r3, [r4, #5]
    dsc_out->bpp   = fdsc->bpp;
 8014d3e:	7ceb      	ldrb	r3, [r5, #19]
 8014d40:	f3c3 0382 	ubfx	r3, r3, #2, #3
 8014d44:	71a3      	strb	r3, [r4, #6]
    return true;
 8014d46:	2001      	movs	r0, #1
 8014d48:	e7d4      	b.n	8014cf4 <lv_font_get_glyph_dsc_fmt_txt+0x10>
    if(letter == '\0') return 0;
 8014d4a:	f1b9 0f00 	cmp.w	r9, #0
 8014d4e:	d0e0      	beq.n	8014d12 <lv_font_get_glyph_dsc_fmt_txt+0x2e>
 8014d50:	4649      	mov	r1, r9
 8014d52:	4638      	mov	r0, r7
 8014d54:	f7ff ff58 	bl	8014c08 <get_glyph_dsc_id.isra.0.part.1>
        if(gid_next) {
 8014d58:	2800      	cmp	r0, #0
 8014d5a:	d0da      	beq.n	8014d12 <lv_font_get_glyph_dsc_fmt_txt+0x2e>
 8014d5c:	f8d8 300c 	ldr.w	r3, [r8, #12]
    if(fdsc->kern_classes == 0) {
 8014d60:	7cda      	ldrb	r2, [r3, #19]
 8014d62:	68df      	ldr	r7, [r3, #12]
 8014d64:	f012 0f20 	tst.w	r2, #32
 8014d68:	d133      	bne.n	8014dd2 <lv_font_get_glyph_dsc_fmt_txt+0xee>
        if(kdsc->glyph_ids_size == 0) {
 8014d6a:	7afb      	ldrb	r3, [r7, #11]
 8014d6c:	f013 0303 	ands.w	r3, r3, #3
 8014d70:	d117      	bne.n	8014da2 <lv_font_get_glyph_dsc_fmt_txt+0xbe>
            uint16_t g_id_both = (gid_right << 8) + gid_left; /*Create one number from the ids*/
 8014d72:	eb06 2300 	add.w	r3, r6, r0, lsl #8
 8014d76:	a804      	add	r0, sp, #16
            const uint8_t * g_ids = kdsc->glyph_ids;
 8014d78:	f8d7 8000 	ldr.w	r8, [r7]
            uint8_t * kid_p = lv_utils_bsearch(&g_id_both, g_ids, kdsc->pair_cnt, 2, kern_pair_8_compare);
 8014d7c:	68ba      	ldr	r2, [r7, #8]
            uint16_t g_id_both = (gid_right << 8) + gid_left; /*Create one number from the ids*/
 8014d7e:	f820 3d04 	strh.w	r3, [r0, #-4]!
            uint8_t * kid_p = lv_utils_bsearch(&g_id_both, g_ids, kdsc->pair_cnt, 2, kern_pair_8_compare);
 8014d82:	4b1c      	ldr	r3, [pc, #112]	; (8014df4 <lv_font_get_glyph_dsc_fmt_txt+0x110>)
 8014d84:	9300      	str	r3, [sp, #0]
 8014d86:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8014d8a:	2302      	movs	r3, #2
 8014d8c:	4641      	mov	r1, r8
 8014d8e:	f001 f90c 	bl	8015faa <lv_utils_bsearch>
            if(kid_p) {
 8014d92:	2800      	cmp	r0, #0
 8014d94:	d0be      	beq.n	8014d14 <lv_font_get_glyph_dsc_fmt_txt+0x30>
                uint32_t ofs = (lv_uintptr_t)kid_p - (lv_uintptr_t)g_ids;
 8014d96:	eba0 0008 	sub.w	r0, r0, r8
                ofs = ofs >> 1;     /*ofs is for pair, divide by 2 to refer as a single value*/
 8014d9a:	0840      	lsrs	r0, r0, #1
                value = kdsc->values[ofs];
 8014d9c:	687b      	ldr	r3, [r7, #4]
 8014d9e:	5618      	ldrsb	r0, [r3, r0]
 8014da0:	e7b8      	b.n	8014d14 <lv_font_get_glyph_dsc_fmt_txt+0x30>
        } else if(kdsc->glyph_ids_size == 1) {
 8014da2:	2b01      	cmp	r3, #1
 8014da4:	d1b5      	bne.n	8014d12 <lv_font_get_glyph_dsc_fmt_txt+0x2e>
            uint32_t g_id_both = (uint32_t)((uint32_t)gid_right << 8) + gid_left; /*Create one number from the ids*/
 8014da6:	eb06 2300 	add.w	r3, r6, r0, lsl #8
 8014daa:	a804      	add	r0, sp, #16
            const uint16_t * g_ids = kdsc->glyph_ids;
 8014dac:	f8d7 8000 	ldr.w	r8, [r7]
            uint8_t * kid_p = lv_utils_bsearch(&g_id_both, g_ids, kdsc->pair_cnt, 4, kern_pair_16_compare);
 8014db0:	68ba      	ldr	r2, [r7, #8]
            uint32_t g_id_both = (uint32_t)((uint32_t)gid_right << 8) + gid_left; /*Create one number from the ids*/
 8014db2:	f840 3d04 	str.w	r3, [r0, #-4]!
            uint8_t * kid_p = lv_utils_bsearch(&g_id_both, g_ids, kdsc->pair_cnt, 4, kern_pair_16_compare);
 8014db6:	4b10      	ldr	r3, [pc, #64]	; (8014df8 <lv_font_get_glyph_dsc_fmt_txt+0x114>)
 8014db8:	9300      	str	r3, [sp, #0]
 8014dba:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8014dbe:	2304      	movs	r3, #4
 8014dc0:	4641      	mov	r1, r8
 8014dc2:	f001 f8f2 	bl	8015faa <lv_utils_bsearch>
            if(kid_p) {
 8014dc6:	2800      	cmp	r0, #0
 8014dc8:	d0a4      	beq.n	8014d14 <lv_font_get_glyph_dsc_fmt_txt+0x30>
                uint32_t ofs = (lv_uintptr_t)kid_p - (lv_uintptr_t)g_ids;
 8014dca:	eba0 0008 	sub.w	r0, r0, r8
                ofs = ofs >> 4;     /*ofs is 4 byte pairs, divide by 4 to refer as a single value*/
 8014dce:	0900      	lsrs	r0, r0, #4
 8014dd0:	e7e4      	b.n	8014d9c <lv_font_get_glyph_dsc_fmt_txt+0xb8>
        uint8_t left_class = kdsc->left_class_mapping[gid_left];
 8014dd2:	687a      	ldr	r2, [r7, #4]
 8014dd4:	5d93      	ldrb	r3, [r2, r6]
        if(left_class > 0 && right_class > 0) {
 8014dd6:	2b00      	cmp	r3, #0
 8014dd8:	d09b      	beq.n	8014d12 <lv_font_get_glyph_dsc_fmt_txt+0x2e>
        uint8_t right_class = kdsc->left_class_mapping[gid_right];
 8014dda:	5c11      	ldrb	r1, [r2, r0]
        if(left_class > 0 && right_class > 0) {
 8014ddc:	2900      	cmp	r1, #0
 8014dde:	d098      	beq.n	8014d12 <lv_font_get_glyph_dsc_fmt_txt+0x2e>
            value = kdsc->class_pair_values[(left_class-1)* kdsc->right_class_cnt + (right_class-1)];
 8014de0:	683a      	ldr	r2, [r7, #0]
 8014de2:	7b78      	ldrb	r0, [r7, #13]
 8014de4:	3b01      	subs	r3, #1
 8014de6:	440a      	add	r2, r1
 8014de8:	fb00 2303 	mla	r3, r0, r3, r2
 8014dec:	f913 0c01 	ldrsb.w	r0, [r3, #-1]
 8014df0:	e790      	b.n	8014d14 <lv_font_get_glyph_dsc_fmt_txt+0x30>
 8014df2:	bf00      	nop
 8014df4:	08014bdd 	.word	0x08014bdd
 8014df8:	08014bef 	.word	0x08014bef

08014dfc <lv_disp_drv_init>:
 * It is used to surly have known values in the fields ant not memory junk.
 * After it you can set the fields.
 * @param driver pointer to driver variable to initialize
 */
void lv_disp_drv_init(lv_disp_drv_t * driver)
{
 8014dfc:	b510      	push	{r4, lr}
    memset(driver, 0, sizeof(lv_disp_drv_t));
 8014dfe:	2224      	movs	r2, #36	; 0x24
{
 8014e00:	4604      	mov	r4, r0
    memset(driver, 0, sizeof(lv_disp_drv_t));
 8014e02:	2100      	movs	r1, #0
 8014e04:	f005 ffe3 	bl	801adce <memset>

    driver->flush_cb         = NULL;
    driver->hor_res          = LV_HOR_RES_MAX;
 8014e08:	23a0      	movs	r3, #160	; 0xa0
 8014e0a:	8023      	strh	r3, [r4, #0]
    driver->ver_res          = LV_VER_RES_MAX;
 8014e0c:	2380      	movs	r3, #128	; 0x80
    driver->flush_cb         = NULL;
 8014e0e:	2200      	movs	r2, #0
    driver->ver_res          = LV_VER_RES_MAX;
 8014e10:	8063      	strh	r3, [r4, #2]
    driver->buffer           = NULL;
    driver->rotated          = 0;
    driver->color_chroma_key = LV_COLOR_TRANSP;
 8014e12:	f04f 0300 	mov.w	r3, #0
 8014e16:	f362 0304 	bfi	r3, r2, #0, #5
 8014e1a:	7723      	strb	r3, [r4, #28]
 8014e1c:	8ba3      	ldrh	r3, [r4, #28]
    driver->gpu_blend_cb = NULL;
    driver->gpu_fill_cb  = NULL;
#endif

#if LV_USE_USER_DATA
    driver->user_data = NULL;
 8014e1e:	6222      	str	r2, [r4, #32]
    driver->color_chroma_key = LV_COLOR_TRANSP;
 8014e20:	f443 63fc 	orr.w	r3, r3, #2016	; 0x7e0
 8014e24:	83a3      	strh	r3, [r4, #28]
 8014e26:	0a1b      	lsrs	r3, r3, #8
 8014e28:	f362 03c7 	bfi	r3, r2, #3, #5
 8014e2c:	7763      	strb	r3, [r4, #29]
    driver->antialiasing = true;
 8014e2e:	2301      	movs	r3, #1
 8014e30:	7223      	strb	r3, [r4, #8]
#endif

    driver->set_px_cb = NULL;
 8014e32:	6162      	str	r2, [r4, #20]
 8014e34:	bd10      	pop	{r4, pc}

08014e36 <lv_disp_buf_init>:
 *             It lets LittlevGL to render next frame into the other buffer while previous is being
 * sent. Set to `NULL` if unused.
 * @param size_in_px_cnt size of the `buf1` and `buf2` in pixel count.
 */
void lv_disp_buf_init(lv_disp_buf_t * disp_buf, void * buf1, void * buf2, uint32_t size_in_px_cnt)
{
 8014e36:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014e38:	4604      	mov	r4, r0
 8014e3a:	460d      	mov	r5, r1
 8014e3c:	4617      	mov	r7, r2
 8014e3e:	461e      	mov	r6, r3
    memset(disp_buf, 0, sizeof(lv_disp_buf_t));
 8014e40:	221c      	movs	r2, #28
 8014e42:	2100      	movs	r1, #0
 8014e44:	f005 ffc3 	bl	801adce <memset>

    disp_buf->buf1    = buf1;
    disp_buf->buf2    = buf2;
 8014e48:	e884 00a0 	stmia.w	r4, {r5, r7}
    disp_buf->buf_act = disp_buf->buf1;
 8014e4c:	60a5      	str	r5, [r4, #8]
    disp_buf->size    = size_in_px_cnt;
 8014e4e:	60e6      	str	r6, [r4, #12]
 8014e50:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08014e54 <lv_disp_drv_register>:
 * Automatically set the first display as active.
 * @param driver pointer to an initialized 'lv_disp_drv_t' variable (can be local variable)
 * @return pointer to the new display or NULL on error
 */
lv_disp_t * lv_disp_drv_register(lv_disp_drv_t * driver)
{
 8014e54:	b570      	push	{r4, r5, r6, lr}
 8014e56:	4605      	mov	r5, r0
    lv_disp_t * disp = lv_ll_ins_head(&LV_GC_ROOT(_lv_disp_ll));
 8014e58:	482a      	ldr	r0, [pc, #168]	; (8014f04 <lv_disp_drv_register+0xb0>)
 8014e5a:	f000 fb0f 	bl	801547c <lv_ll_ins_head>
    if(!disp) {
 8014e5e:	4604      	mov	r4, r0
 8014e60:	b900      	cbnz	r0, 8014e64 <lv_disp_drv_register+0x10>
 8014e62:	e7fe      	b.n	8014e62 <lv_disp_drv_register+0xe>
        lv_mem_assert(disp);
        return NULL;
    }

    memcpy(&disp->driver, driver, sizeof(lv_disp_drv_t));
 8014e64:	4628      	mov	r0, r5
 8014e66:	4623      	mov	r3, r4
 8014e68:	f105 0224 	add.w	r2, r5, #36	; 0x24
 8014e6c:	f850 1b04 	ldr.w	r1, [r0], #4
 8014e70:	f843 1b04 	str.w	r1, [r3], #4
 8014e74:	4290      	cmp	r0, r2
 8014e76:	d1f9      	bne.n	8014e6c <lv_disp_drv_register+0x18>
    memset(&disp->inv_area_joined, 0, sizeof(disp->inv_area_joined));
 8014e78:	2220      	movs	r2, #32
 8014e7a:	2100      	movs	r1, #0
 8014e7c:	f504 70a0 	add.w	r0, r4, #320	; 0x140
 8014e80:	f005 ffa5 	bl	801adce <memset>
    memset(&disp->inv_areas, 0, sizeof(disp->inv_areas));
    lv_ll_init(&disp->scr_ll, sizeof(lv_obj_t));

    if(disp_def == NULL) disp_def = disp;
 8014e84:	4d20      	ldr	r5, [pc, #128]	; (8014f08 <lv_disp_drv_register+0xb4>)
    memset(&disp->inv_areas, 0, sizeof(disp->inv_areas));
 8014e86:	f44f 7280 	mov.w	r2, #256	; 0x100
 8014e8a:	2100      	movs	r1, #0
 8014e8c:	f104 0040 	add.w	r0, r4, #64	; 0x40
 8014e90:	f005 ff9d 	bl	801adce <memset>
    lv_ll_init(&disp->scr_ll, sizeof(lv_obj_t));
 8014e94:	2148      	movs	r1, #72	; 0x48
 8014e96:	f104 0028 	add.w	r0, r4, #40	; 0x28
 8014e9a:	f000 fae5 	bl	8015468 <lv_ll_init>
    if(disp_def == NULL) disp_def = disp;
 8014e9e:	682b      	ldr	r3, [r5, #0]
 8014ea0:	b903      	cbnz	r3, 8014ea4 <lv_disp_drv_register+0x50>
 8014ea2:	602c      	str	r4, [r5, #0]

    lv_disp_t * disp_def_tmp = disp_def;
    disp_def                 = disp; /*Temporarily change the default screen to create the default screens on the
                                        new display*/

    disp->inv_p = 0;
 8014ea4:	f8b4 3160 	ldrh.w	r3, [r4, #352]	; 0x160
    lv_disp_t * disp_def_tmp = disp_def;
 8014ea8:	682e      	ldr	r6, [r5, #0]
    disp_def                 = disp; /*Temporarily change the default screen to create the default screens on the
 8014eaa:	602c      	str	r4, [r5, #0]
    disp->inv_p = 0;
 8014eac:	f36f 0309 	bfc	r3, #0, #10

    disp->act_scr   = lv_obj_create(NULL, NULL); /*Create a default screen on the display*/
 8014eb0:	2100      	movs	r1, #0
    disp->inv_p = 0;
 8014eb2:	f8a4 3160 	strh.w	r3, [r4, #352]	; 0x160
    disp->act_scr   = lv_obj_create(NULL, NULL); /*Create a default screen on the display*/
 8014eb6:	4608      	mov	r0, r1
 8014eb8:	f7fa ff8c 	bl	800fdd4 <lv_obj_create>
    disp->top_layer = lv_obj_create(NULL, NULL); /*Create top layer on the display*/
 8014ebc:	2100      	movs	r1, #0
    disp->act_scr   = lv_obj_create(NULL, NULL); /*Create a default screen on the display*/
 8014ebe:	6360      	str	r0, [r4, #52]	; 0x34
    disp->top_layer = lv_obj_create(NULL, NULL); /*Create top layer on the display*/
 8014ec0:	4608      	mov	r0, r1
 8014ec2:	f7fa ff87 	bl	800fdd4 <lv_obj_create>
    disp->sys_layer = lv_obj_create(NULL, NULL); /*Create top layer on the display*/
 8014ec6:	2100      	movs	r1, #0
    disp->top_layer = lv_obj_create(NULL, NULL); /*Create top layer on the display*/
 8014ec8:	63a0      	str	r0, [r4, #56]	; 0x38
    disp->sys_layer = lv_obj_create(NULL, NULL); /*Create top layer on the display*/
 8014eca:	4608      	mov	r0, r1
 8014ecc:	f7fa ff82 	bl	800fdd4 <lv_obj_create>
    lv_obj_set_style(disp->top_layer, &lv_style_transp);
 8014ed0:	490e      	ldr	r1, [pc, #56]	; (8014f0c <lv_disp_drv_register+0xb8>)
    disp->sys_layer = lv_obj_create(NULL, NULL); /*Create top layer on the display*/
 8014ed2:	63e0      	str	r0, [r4, #60]	; 0x3c
    lv_obj_set_style(disp->top_layer, &lv_style_transp);
 8014ed4:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8014ed6:	f7fb f9fd 	bl	80102d4 <lv_obj_set_style>
    lv_obj_set_style(disp->sys_layer, &lv_style_transp);
 8014eda:	490c      	ldr	r1, [pc, #48]	; (8014f0c <lv_disp_drv_register+0xb8>)
 8014edc:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8014ede:	f7fb f9f9 	bl	80102d4 <lv_obj_set_style>

    lv_obj_invalidate(disp->act_scr);
 8014ee2:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8014ee4:	f7fa fc92 	bl	800f80c <lv_obj_invalidate>

    disp_def = disp_def_tmp; /*Revert the default display*/

    /*Create a refresh task*/
    disp->refr_task = lv_task_create(lv_disp_refr_task, LV_DISP_DEF_REFR_PERIOD, LV_TASK_PRIO_MID, disp);
 8014ee8:	4623      	mov	r3, r4
 8014eea:	2203      	movs	r2, #3
 8014eec:	211e      	movs	r1, #30
 8014eee:	4808      	ldr	r0, [pc, #32]	; (8014f10 <lv_disp_drv_register+0xbc>)
    disp_def = disp_def_tmp; /*Revert the default display*/
 8014ef0:	602e      	str	r6, [r5, #0]
    disp->refr_task = lv_task_create(lv_disp_refr_task, LV_DISP_DEF_REFR_PERIOD, LV_TASK_PRIO_MID, disp);
 8014ef2:	f000 fe0d 	bl	8015b10 <lv_task_create>
 8014ef6:	6260      	str	r0, [r4, #36]	; 0x24
    lv_mem_assert(disp->refr_task);
 8014ef8:	b900      	cbnz	r0, 8014efc <lv_disp_drv_register+0xa8>
 8014efa:	e7fe      	b.n	8014efa <lv_disp_drv_register+0xa6>
    if(disp->refr_task == NULL) return NULL;

    lv_task_ready(disp->refr_task); /*Be sure the screen will be refreshed immediately on start up*/
 8014efc:	f000 fe1d 	bl	8015b3a <lv_task_ready>

    return disp;
}
 8014f00:	4620      	mov	r0, r4
 8014f02:	bd70      	pop	{r4, r5, r6, pc}
 8014f04:	2000c7f0 	.word	0x2000c7f0
 8014f08:	200061f8 	.word	0x200061f8
 8014f0c:	2000c504 	.word	0x2000c504
 8014f10:	080108b5 	.word	0x080108b5

08014f14 <lv_disp_get_default>:
 * @return pointer to the default display
 */
lv_disp_t * lv_disp_get_default(void)
{
    return disp_def;
}
 8014f14:	4b01      	ldr	r3, [pc, #4]	; (8014f1c <lv_disp_get_default+0x8>)
 8014f16:	6818      	ldr	r0, [r3, #0]
 8014f18:	4770      	bx	lr
 8014f1a:	bf00      	nop
 8014f1c:	200061f8 	.word	0x200061f8

08014f20 <lv_disp_get_hor_res>:
 * @param disp pointer to a display (NULL to use the default display)
 * @return the horizontal resolution of the display
 */
lv_coord_t lv_disp_get_hor_res(lv_disp_t * disp)
{
    if(disp == NULL) disp = lv_disp_get_default();
 8014f20:	b910      	cbnz	r0, 8014f28 <lv_disp_get_hor_res+0x8>
    return disp_def;
 8014f22:	4b06      	ldr	r3, [pc, #24]	; (8014f3c <lv_disp_get_hor_res+0x1c>)
 8014f24:	6818      	ldr	r0, [r3, #0]

    if(disp == NULL)
 8014f26:	b138      	cbz	r0, 8014f38 <lv_disp_get_hor_res+0x18>
        return LV_HOR_RES_MAX;
    else
        return disp->driver.rotated == 0 ? disp->driver.hor_res : disp->driver.ver_res;
 8014f28:	7a03      	ldrb	r3, [r0, #8]
 8014f2a:	079b      	lsls	r3, r3, #30
 8014f2c:	bf54      	ite	pl
 8014f2e:	f9b0 0000 	ldrshpl.w	r0, [r0]
 8014f32:	f9b0 0002 	ldrshmi.w	r0, [r0, #2]
 8014f36:	4770      	bx	lr
        return LV_HOR_RES_MAX;
 8014f38:	20a0      	movs	r0, #160	; 0xa0
}
 8014f3a:	4770      	bx	lr
 8014f3c:	200061f8 	.word	0x200061f8

08014f40 <lv_disp_get_ver_res>:
 * @param disp pointer to a display (NULL to use the default display)
 * @return the vertical resolution of the display
 */
lv_coord_t lv_disp_get_ver_res(lv_disp_t * disp)
{
    if(disp == NULL) disp = lv_disp_get_default();
 8014f40:	b910      	cbnz	r0, 8014f48 <lv_disp_get_ver_res+0x8>
    return disp_def;
 8014f42:	4b06      	ldr	r3, [pc, #24]	; (8014f5c <lv_disp_get_ver_res+0x1c>)
 8014f44:	6818      	ldr	r0, [r3, #0]

    if(disp == NULL)
 8014f46:	b138      	cbz	r0, 8014f58 <lv_disp_get_ver_res+0x18>
        return LV_VER_RES_MAX;
    else
        return disp->driver.rotated == 0 ? disp->driver.ver_res : disp->driver.hor_res;
 8014f48:	7a03      	ldrb	r3, [r0, #8]
 8014f4a:	079b      	lsls	r3, r3, #30
 8014f4c:	bf54      	ite	pl
 8014f4e:	f9b0 0002 	ldrshpl.w	r0, [r0, #2]
 8014f52:	f9b0 0000 	ldrshmi.w	r0, [r0]
 8014f56:	4770      	bx	lr
        return LV_VER_RES_MAX;
 8014f58:	2080      	movs	r0, #128	; 0x80
}
 8014f5a:	4770      	bx	lr
 8014f5c:	200061f8 	.word	0x200061f8

08014f60 <lv_disp_get_antialiasing>:
bool lv_disp_get_antialiasing(lv_disp_t * disp)
{
#if LV_ANTIALIAS == 0
    return false;
#else
    if(disp == NULL) disp = lv_disp_get_default();
 8014f60:	b910      	cbnz	r0, 8014f68 <lv_disp_get_antialiasing+0x8>
    return disp_def;
 8014f62:	4b03      	ldr	r3, [pc, #12]	; (8014f70 <lv_disp_get_antialiasing+0x10>)
 8014f64:	6818      	ldr	r0, [r3, #0]
    if(disp == NULL) return false;
 8014f66:	b110      	cbz	r0, 8014f6e <lv_disp_get_antialiasing+0xe>

    return disp->driver.antialiasing ? true : false;
 8014f68:	7a00      	ldrb	r0, [r0, #8]
 8014f6a:	f000 0001 	and.w	r0, r0, #1
#endif
}
 8014f6e:	4770      	bx	lr
 8014f70:	200061f8 	.word	0x200061f8

08014f74 <lv_disp_flush_ready>:
 * Call in the display driver's `flush_cb` function when the flushing is finished
 * @param disp_drv pointer to display driver in `flush_cb` where this function is called
 */
LV_ATTRIBUTE_FLUSH_READY void lv_disp_flush_ready(lv_disp_drv_t * disp_drv)
{
    disp_drv->buffer->flushing = 0;
 8014f74:	6842      	ldr	r2, [r0, #4]
 8014f76:	7e13      	ldrb	r3, [r2, #24]
 8014f78:	f36f 0300 	bfc	r3, #0, #1
 8014f7c:	7613      	strb	r3, [r2, #24]
 8014f7e:	4770      	bx	lr

08014f80 <lv_disp_get_next>:
 * @param disp pointer to the current display. NULL to initialize.
 * @return the next display or NULL if no more. Give the first display when the parameter is NULL
 */
lv_disp_t * lv_disp_get_next(lv_disp_t * disp)
{
    if(disp == NULL)
 8014f80:	4601      	mov	r1, r0
        return lv_ll_get_head(&LV_GC_ROOT(_lv_disp_ll));
 8014f82:	4803      	ldr	r0, [pc, #12]	; (8014f90 <lv_disp_get_next+0x10>)
    if(disp == NULL)
 8014f84:	b909      	cbnz	r1, 8014f8a <lv_disp_get_next+0xa>
        return lv_ll_get_head(&LV_GC_ROOT(_lv_disp_ll));
 8014f86:	f000 bab5 	b.w	80154f4 <lv_ll_get_head>
    else
        return lv_ll_get_next(&LV_GC_ROOT(_lv_disp_ll), disp);
 8014f8a:	f000 bab9 	b.w	8015500 <lv_ll_get_next>
 8014f8e:	bf00      	nop
 8014f90:	2000c7f0 	.word	0x2000c7f0

08014f94 <lv_disp_get_buf>:
 * @return pointer to the internal buffers
 */
lv_disp_buf_t * lv_disp_get_buf(lv_disp_t * disp)
{
    return disp->driver.buffer;
}
 8014f94:	6840      	ldr	r0, [r0, #4]
 8014f96:	4770      	bx	lr

08014f98 <lv_disp_is_double_buf>:
 * @param disp pointer to to display to check
 * @return true: double buffered; false: not double buffered
 */
bool lv_disp_is_double_buf(lv_disp_t * disp)
{
    if(disp->driver.buffer->buf1 && disp->driver.buffer->buf2)
 8014f98:	6843      	ldr	r3, [r0, #4]
 8014f9a:	6818      	ldr	r0, [r3, #0]
 8014f9c:	b118      	cbz	r0, 8014fa6 <lv_disp_is_double_buf+0xe>
 8014f9e:	6858      	ldr	r0, [r3, #4]
 8014fa0:	3000      	adds	r0, #0
 8014fa2:	bf18      	it	ne
 8014fa4:	2001      	movne	r0, #1
        return true;
    else
        return false;
}
 8014fa6:	4770      	bx	lr

08014fa8 <lv_disp_is_true_double_buf>:
 * `size` is screen sized)
 * @param disp pointer to to display to check
 * @return true: double buffered; false: not double buffered
 */
bool lv_disp_is_true_double_buf(lv_disp_t * disp)
{
 8014fa8:	b508      	push	{r3, lr}
 8014faa:	4602      	mov	r2, r0
    uint32_t scr_size = disp->driver.hor_res * disp->driver.ver_res;

    if(lv_disp_is_double_buf(disp) && disp->driver.buffer->size == scr_size) {
 8014fac:	f7ff fff4 	bl	8014f98 <lv_disp_is_double_buf>
 8014fb0:	b140      	cbz	r0, 8014fc4 <lv_disp_is_true_double_buf+0x1c>
    uint32_t scr_size = disp->driver.hor_res * disp->driver.ver_res;
 8014fb2:	8853      	ldrh	r3, [r2, #2]
 8014fb4:	8810      	ldrh	r0, [r2, #0]
 8014fb6:	fb10 f003 	smulbb	r0, r0, r3
    if(lv_disp_is_double_buf(disp) && disp->driver.buffer->size == scr_size) {
 8014fba:	6853      	ldr	r3, [r2, #4]
 8014fbc:	68db      	ldr	r3, [r3, #12]
 8014fbe:	1ac3      	subs	r3, r0, r3
 8014fc0:	4258      	negs	r0, r3
 8014fc2:	4158      	adcs	r0, r3
        return true;
    } else {
        return false;
    }
}
 8014fc4:	bd08      	pop	{r3, pc}
	...

08014fc8 <lv_indev_get_next>:
 * @return the next input devise or NULL if no more. Give the first input device when the parameter
 * is NULL
 */
lv_indev_t * lv_indev_get_next(lv_indev_t * indev)
{
    if(indev == NULL)
 8014fc8:	4601      	mov	r1, r0
        return lv_ll_get_head(&LV_GC_ROOT(_lv_indev_ll));
 8014fca:	4803      	ldr	r0, [pc, #12]	; (8014fd8 <lv_indev_get_next+0x10>)
    if(indev == NULL)
 8014fcc:	b909      	cbnz	r1, 8014fd2 <lv_indev_get_next+0xa>
        return lv_ll_get_head(&LV_GC_ROOT(_lv_indev_ll));
 8014fce:	f000 ba91 	b.w	80154f4 <lv_ll_get_head>
    else
        return lv_ll_get_next(&LV_GC_ROOT(_lv_indev_ll), indev);
 8014fd2:	f000 ba95 	b.w	8015500 <lv_ll_get_next>
 8014fd6:	bf00      	nop
 8014fd8:	2000c7e0 	.word	0x2000c7e0

08014fdc <lv_tick_inc>:
 * You have to call this function periodically
 * @param tick_period the call period of this function in milliseconds
 */
LV_ATTRIBUTE_TICK_INC void lv_tick_inc(uint32_t tick_period)
{
    tick_irq_flag = 0;
 8014fdc:	4b03      	ldr	r3, [pc, #12]	; (8014fec <lv_tick_inc+0x10>)
 8014fde:	2200      	movs	r2, #0
 8014fe0:	701a      	strb	r2, [r3, #0]
    sys_time += tick_period;
 8014fe2:	4a03      	ldr	r2, [pc, #12]	; (8014ff0 <lv_tick_inc+0x14>)
 8014fe4:	6813      	ldr	r3, [r2, #0]
 8014fe6:	4418      	add	r0, r3
 8014fe8:	6010      	str	r0, [r2, #0]
 8014fea:	4770      	bx	lr
 8014fec:	20006200 	.word	0x20006200
 8014ff0:	200061fc 	.word	0x200061fc

08014ff4 <lv_tick_get>:
uint32_t lv_tick_get(void)
{
#if LV_TICK_CUSTOM == 0
    uint32_t result;
    do {
        tick_irq_flag = 1;
 8014ff4:	4b04      	ldr	r3, [pc, #16]	; (8015008 <lv_tick_get+0x14>)
 8014ff6:	f04f 0101 	mov.w	r1, #1
 8014ffa:	7019      	strb	r1, [r3, #0]
        result        = sys_time;
    } while(!tick_irq_flag); /*'lv_tick_inc()' clears this flag which can be in an interrupt.
 8014ffc:	781a      	ldrb	r2, [r3, #0]
 8014ffe:	2a00      	cmp	r2, #0
 8015000:	d0fb      	beq.n	8014ffa <lv_tick_get+0x6>

    return result;
#else
    return LV_TICK_CUSTOM_SYS_TIME_EXPR;
#endif
}
 8015002:	4b02      	ldr	r3, [pc, #8]	; (801500c <lv_tick_get+0x18>)
 8015004:	6818      	ldr	r0, [r3, #0]
 8015006:	4770      	bx	lr
 8015008:	20006200 	.word	0x20006200
 801500c:	200061fc 	.word	0x200061fc

08015010 <lv_tick_elaps>:
 * Get the elapsed milliseconds since a previous time stamp
 * @param prev_tick a previous time stamp (return value of systick_get() )
 * @return the elapsed milliseconds since 'prev_tick'
 */
uint32_t lv_tick_elaps(uint32_t prev_tick)
{
 8015010:	b510      	push	{r4, lr}
 8015012:	4604      	mov	r4, r0
    uint32_t act_time = lv_tick_get();
 8015014:	f7ff ffee 	bl	8014ff4 <lv_tick_get>
        prev_tick = UINT32_MAX - prev_tick + 1;
        prev_tick += act_time;
    }

    return prev_tick;
}
 8015018:	1b00      	subs	r0, r0, r4
 801501a:	bd10      	pop	{r4, pc}

0801501c <lv_anim_path_linear>:
 */
lv_anim_value_t lv_anim_path_linear(const lv_anim_t * a)
{
    /*Calculate the current step*/
    uint32_t step;
    if(a->time == a->act_time) {
 801501c:	f9b0 301a 	ldrsh.w	r3, [r0, #26]
 8015020:	8b02      	ldrh	r2, [r0, #24]
 8015022:	429a      	cmp	r2, r3
        step = LV_ANIM_RESOLUTION; /*Use the last value if the time fully elapsed*/
    } else {
        step = ((int32_t)a->act_time * LV_ANIM_RESOLUTION) / a->time;
 8015024:	bf1c      	itt	ne
 8015026:	029b      	lslne	r3, r3, #10
 8015028:	fb93 f3f2 	sdivne	r3, r3, r2
    }

    /* Get the new value which will be proportional to `step`
     * and the `start` and `end` values*/
    int32_t new_value;
    new_value = (int32_t)step * (a->end - a->start);
 801502c:	6902      	ldr	r2, [r0, #16]
 801502e:	6940      	ldr	r0, [r0, #20]
 8015030:	bf08      	it	eq
 8015032:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8015036:	1a80      	subs	r0, r0, r2
 8015038:	4343      	muls	r3, r0
    new_value = new_value >> LV_ANIM_RES_SHIFT;
    new_value += a->start;
 801503a:	eb02 23a3 	add.w	r3, r2, r3, asr #10

    return (lv_anim_value_t)new_value;
}
 801503e:	b218      	sxth	r0, r3
 8015040:	4770      	bx	lr
	...

08015044 <anim_task>:
/**
 * Periodically handle the animations.
 * @param param unused
 */
static void anim_task(lv_task_t * param)
{
 8015044:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    (void)param;

    lv_anim_t * a;
    LV_LL_READ(LV_GC_ROOT(_lv_anim_ll), a)
 8015048:	4844      	ldr	r0, [pc, #272]	; (801515c <anim_task+0x118>)
 801504a:	4c44      	ldr	r4, [pc, #272]	; (801515c <anim_task+0x118>)
{
 801504c:	b08a      	sub	sp, #40	; 0x28
    LV_LL_READ(LV_GC_ROOT(_lv_anim_ll), a)
 801504e:	f000 fa51 	bl	80154f4 <lv_ll_get_head>
 8015052:	b988      	cbnz	r0, 8015078 <anim_task+0x34>
    {
        a->has_run = 0;
    }

    uint32_t elaps = lv_tick_elaps(last_task_run);
 8015054:	4d42      	ldr	r5, [pc, #264]	; (8015160 <anim_task+0x11c>)
    while(a != NULL) {
        /*It can be set by `lv_anim_del()` typically in `end_cb`. If set then an animation delete
         * happened in `anim_ready_handler` which could make this linked list reading corrupt
         * because the list is changed meanwhile
         */
        anim_list_changed = false;
 8015056:	4e43      	ldr	r6, [pc, #268]	; (8015164 <anim_task+0x120>)
    uint32_t elaps = lv_tick_elaps(last_task_run);
 8015058:	6828      	ldr	r0, [r5, #0]
        /* If the linked list changed due to anim. delete then it's not safe to continue
         * the reading of the list from here -> start from the head*/
        if(anim_list_changed)
            a = lv_ll_get_head(&LV_GC_ROOT(_lv_anim_ll));
        else
            a = lv_ll_get_next(&LV_GC_ROOT(_lv_anim_ll), a);
 801505a:	4f40      	ldr	r7, [pc, #256]	; (801515c <anim_task+0x118>)
    uint32_t elaps = lv_tick_elaps(last_task_run);
 801505c:	f7ff ffd8 	bl	8015010 <lv_tick_elaps>
 8015060:	4680      	mov	r8, r0
    a = lv_ll_get_head(&LV_GC_ROOT(_lv_anim_ll));
 8015062:	483e      	ldr	r0, [pc, #248]	; (801515c <anim_task+0x118>)
 8015064:	f000 fa46 	bl	80154f4 <lv_ll_get_head>
 8015068:	4604      	mov	r4, r0
    while(a != NULL) {
 801506a:	b984      	cbnz	r4, 801508e <anim_task+0x4a>
    }

    last_task_run = lv_tick_get();
 801506c:	f7ff ffc2 	bl	8014ff4 <lv_tick_get>
 8015070:	6028      	str	r0, [r5, #0]
}
 8015072:	b00a      	add	sp, #40	; 0x28
 8015074:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        a->has_run = 0;
 8015078:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
 801507c:	f36f 03c3 	bfc	r3, #3, #1
 8015080:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
    LV_LL_READ(LV_GC_ROOT(_lv_anim_ll), a)
 8015084:	4601      	mov	r1, r0
 8015086:	4620      	mov	r0, r4
 8015088:	f000 fa3a 	bl	8015500 <lv_ll_get_next>
 801508c:	e7e1      	b.n	8015052 <anim_task+0xe>
        anim_list_changed = false;
 801508e:	2300      	movs	r3, #0
 8015090:	7033      	strb	r3, [r6, #0]
        if(!a->has_run) {
 8015092:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 8015096:	0718      	lsls	r0, r3, #28
 8015098:	d45b      	bmi.n	8015152 <anim_task+0x10e>
            a->has_run = 1; /*The list readying might be reseted so need to know which anim has run already*/
 801509a:	f043 0308 	orr.w	r3, r3, #8
 801509e:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
            a->act_time += elaps;
 80150a2:	8b63      	ldrh	r3, [r4, #26]
 80150a4:	4443      	add	r3, r8
 80150a6:	b21b      	sxth	r3, r3
            if(a->act_time >= 0) {
 80150a8:	2b00      	cmp	r3, #0
            a->act_time += elaps;
 80150aa:	8363      	strh	r3, [r4, #26]
            if(a->act_time >= 0) {
 80150ac:	db51      	blt.n	8015152 <anim_task+0x10e>
                if(a->act_time > a->time) a->act_time = a->time;
 80150ae:	8b22      	ldrh	r2, [r4, #24]
 80150b0:	4293      	cmp	r3, r2
 80150b2:	bfc8      	it	gt
 80150b4:	8362      	strhgt	r2, [r4, #26]
                new_value = a->path_cb(a);
 80150b6:	68a3      	ldr	r3, [r4, #8]
 80150b8:	4620      	mov	r0, r4
 80150ba:	4798      	blx	r3
                if(a->exec_cb) a->exec_cb(a->var, new_value);
 80150bc:	6863      	ldr	r3, [r4, #4]
                new_value = a->path_cb(a);
 80150be:	4601      	mov	r1, r0
                if(a->exec_cb) a->exec_cb(a->var, new_value);
 80150c0:	b10b      	cbz	r3, 80150c6 <anim_task+0x82>
 80150c2:	6820      	ldr	r0, [r4, #0]
 80150c4:	4798      	blx	r3
                if(a->act_time >= a->time) {
 80150c6:	f9b4 201a 	ldrsh.w	r2, [r4, #26]
 80150ca:	8b23      	ldrh	r3, [r4, #24]
 80150cc:	429a      	cmp	r2, r3
 80150ce:	db20      	blt.n	8015112 <anim_task+0xce>
{

    /*Delete the animation if
     * - no repeat and no play back (simple one shot animation)
     * - no repeat, play back is enabled and play back is ready */
    if((a->repeat == 0 && a->playback == 0) || (a->repeat == 0 && a->playback == 1 && a->playback_now == 1)) {
 80150d0:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 80150d4:	0799      	lsls	r1, r3, #30
 80150d6:	d003      	beq.n	80150e0 <anim_task+0x9c>
 80150d8:	f003 0207 	and.w	r2, r3, #7
 80150dc:	2a05      	cmp	r2, #5
 80150de:	d11f      	bne.n	8015120 <anim_task+0xdc>

        /*Create copy from the animation and delete the animation from the list.
         * This way the `ready_cb` will see the animations like it's animation is ready deleted*/
        lv_anim_t a_tmp;
        memcpy(&a_tmp, a, sizeof(lv_anim_t));
 80150e0:	4623      	mov	r3, r4
 80150e2:	46ee      	mov	lr, sp
 80150e4:	f104 0c28 	add.w	ip, r4, #40	; 0x28
 80150e8:	6818      	ldr	r0, [r3, #0]
 80150ea:	6859      	ldr	r1, [r3, #4]
 80150ec:	4672      	mov	r2, lr
 80150ee:	c203      	stmia	r2!, {r0, r1}
 80150f0:	3308      	adds	r3, #8
 80150f2:	4563      	cmp	r3, ip
 80150f4:	4696      	mov	lr, r2
 80150f6:	d1f7      	bne.n	80150e8 <anim_task+0xa4>
        lv_ll_rem(&LV_GC_ROOT(_lv_anim_ll), a);
 80150f8:	4621      	mov	r1, r4
 80150fa:	4638      	mov	r0, r7
 80150fc:	f000 fa39 	bl	8015572 <lv_ll_rem>
        lv_mem_free(a);
 8015100:	4620      	mov	r0, r4
 8015102:	f000 fb75 	bl	80157f0 <lv_mem_free>
        anim_list_changed = true;
 8015106:	2301      	movs	r3, #1
 8015108:	7033      	strb	r3, [r6, #0]

        /* Call the callback function at the end*/
        if(a_tmp.ready_cb != NULL) a_tmp.ready_cb(&a_tmp);
 801510a:	9b03      	ldr	r3, [sp, #12]
 801510c:	b10b      	cbz	r3, 8015112 <anim_task+0xce>
 801510e:	4668      	mov	r0, sp
 8015110:	4798      	blx	r3
        if(anim_list_changed)
 8015112:	7833      	ldrb	r3, [r6, #0]
 8015114:	b1eb      	cbz	r3, 8015152 <anim_task+0x10e>
            a = lv_ll_get_head(&LV_GC_ROOT(_lv_anim_ll));
 8015116:	4638      	mov	r0, r7
 8015118:	f000 f9ec 	bl	80154f4 <lv_ll_get_head>
            a = lv_ll_get_next(&LV_GC_ROOT(_lv_anim_ll), a);
 801511c:	4604      	mov	r4, r0
 801511e:	e7a4      	b.n	801506a <anim_task+0x26>
    }
    /*If the animation is not deleted then restart it*/
    else {
        a->act_time = -a->repeat_pause; /*Restart the animation*/
 8015120:	8be2      	ldrh	r2, [r4, #30]
 8015122:	4252      	negs	r2, r2
 8015124:	8362      	strh	r2, [r4, #26]
        /*Swap the start and end values in play back mode*/
        if(a->playback != 0) {
 8015126:	07da      	lsls	r2, r3, #31
 8015128:	d5f3      	bpl.n	8015112 <anim_task+0xce>
            /*If now turning back use the 'playback_pause*/
            if(a->playback_now == 0) a->act_time = -a->playback_pause;
 801512a:	f013 0304 	ands.w	r3, r3, #4
 801512e:	bf02      	ittt	eq
 8015130:	8ba2      	ldrheq	r2, [r4, #28]
 8015132:	4252      	negeq	r2, r2
 8015134:	8362      	strheq	r2, [r4, #26]

            /*Toggle the play back state*/
            a->playback_now = a->playback_now == 0 ? 1 : 0;
 8015136:	fab3 f383 	clz	r3, r3
 801513a:	f894 2024 	ldrb.w	r2, [r4, #36]	; 0x24
 801513e:	095b      	lsrs	r3, r3, #5
 8015140:	f363 0282 	bfi	r2, r3, #2, #1
 8015144:	f884 2024 	strb.w	r2, [r4, #36]	; 0x24
            /*Swap the start and end values*/
            int32_t tmp;
            tmp      = a->start;
 8015148:	6923      	ldr	r3, [r4, #16]
            a->start = a->end;
 801514a:	6962      	ldr	r2, [r4, #20]
 801514c:	6122      	str	r2, [r4, #16]
            a->end   = tmp;
 801514e:	6163      	str	r3, [r4, #20]
 8015150:	e7df      	b.n	8015112 <anim_task+0xce>
            a = lv_ll_get_next(&LV_GC_ROOT(_lv_anim_ll), a);
 8015152:	4621      	mov	r1, r4
 8015154:	4638      	mov	r0, r7
 8015156:	f000 f9d3 	bl	8015500 <lv_ll_get_next>
 801515a:	e7df      	b.n	801511c <anim_task+0xd8>
 801515c:	2000c81c 	.word	0x2000c81c
 8015160:	20006204 	.word	0x20006204
 8015164:	20006201 	.word	0x20006201

08015168 <lv_anim_core_init>:
{
 8015168:	b510      	push	{r4, lr}
    lv_ll_init(&LV_GC_ROOT(_lv_anim_ll), sizeof(lv_anim_t));
 801516a:	2128      	movs	r1, #40	; 0x28
 801516c:	4807      	ldr	r0, [pc, #28]	; (801518c <lv_anim_core_init+0x24>)
 801516e:	f000 f97b 	bl	8015468 <lv_ll_init>
    last_task_run = lv_tick_get();
 8015172:	f7ff ff3f 	bl	8014ff4 <lv_tick_get>
 8015176:	4b06      	ldr	r3, [pc, #24]	; (8015190 <lv_anim_core_init+0x28>)
    lv_task_create(anim_task, LV_DISP_DEF_REFR_PERIOD, LV_TASK_PRIO_MID, NULL);
 8015178:	2203      	movs	r2, #3
    last_task_run = lv_tick_get();
 801517a:	6018      	str	r0, [r3, #0]
    lv_task_create(anim_task, LV_DISP_DEF_REFR_PERIOD, LV_TASK_PRIO_MID, NULL);
 801517c:	211e      	movs	r1, #30
 801517e:	2300      	movs	r3, #0
 8015180:	4804      	ldr	r0, [pc, #16]	; (8015194 <lv_anim_core_init+0x2c>)
}
 8015182:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    lv_task_create(anim_task, LV_DISP_DEF_REFR_PERIOD, LV_TASK_PRIO_MID, NULL);
 8015186:	f000 bcc3 	b.w	8015b10 <lv_task_create>
 801518a:	bf00      	nop
 801518c:	2000c81c 	.word	0x2000c81c
 8015190:	20006204 	.word	0x20006204
 8015194:	08015045 	.word	0x08015045

08015198 <lv_anim_init>:
{
 8015198:	b510      	push	{r4, lr}
    memset(a, 0, sizeof(lv_anim_t));
 801519a:	2228      	movs	r2, #40	; 0x28
{
 801519c:	4604      	mov	r4, r0
    memset(a, 0, sizeof(lv_anim_t));
 801519e:	2100      	movs	r1, #0
 80151a0:	f005 fe15 	bl	801adce <memset>
    a->time    = 500;
 80151a4:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80151a8:	8323      	strh	r3, [r4, #24]
    a->end     = 100;
 80151aa:	2364      	movs	r3, #100	; 0x64
 80151ac:	6163      	str	r3, [r4, #20]
    a->path_cb = lv_anim_path_linear;
 80151ae:	4b01      	ldr	r3, [pc, #4]	; (80151b4 <lv_anim_init+0x1c>)
 80151b0:	60a3      	str	r3, [r4, #8]
 80151b2:	bd10      	pop	{r4, pc}
 80151b4:	0801501d 	.word	0x0801501d

080151b8 <lv_anim_del>:
{
 80151b8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80151bc:	4680      	mov	r8, r0
    a        = lv_ll_get_head(&LV_GC_ROOT(_lv_anim_ll));
 80151be:	4813      	ldr	r0, [pc, #76]	; (801520c <lv_anim_del+0x54>)
        a_next = lv_ll_get_next(&LV_GC_ROOT(_lv_anim_ll), a);
 80151c0:	4f12      	ldr	r7, [pc, #72]	; (801520c <lv_anim_del+0x54>)
            anim_list_changed = true; /*Read by `anim_task`. It need to know if a delete occurred in
 80151c2:	f8df 904c 	ldr.w	r9, [pc, #76]	; 8015210 <lv_anim_del+0x58>
{
 80151c6:	460e      	mov	r6, r1
    a        = lv_ll_get_head(&LV_GC_ROOT(_lv_anim_ll));
 80151c8:	f000 f994 	bl	80154f4 <lv_ll_get_head>
    bool del = false;
 80151cc:	2500      	movs	r5, #0
    a        = lv_ll_get_head(&LV_GC_ROOT(_lv_anim_ll));
 80151ce:	4604      	mov	r4, r0
            anim_list_changed = true; /*Read by `anim_task`. It need to know if a delete occurred in
 80151d0:	f04f 0a01 	mov.w	sl, #1
    while(a != NULL) {
 80151d4:	b914      	cbnz	r4, 80151dc <lv_anim_del+0x24>
}
 80151d6:	4628      	mov	r0, r5
 80151d8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
        a_next = lv_ll_get_next(&LV_GC_ROOT(_lv_anim_ll), a);
 80151dc:	4621      	mov	r1, r4
 80151de:	4638      	mov	r0, r7
 80151e0:	f000 f98e 	bl	8015500 <lv_ll_get_next>
        if(a->var == var && (a->exec_cb == exec_cb || exec_cb == NULL)) {
 80151e4:	6823      	ldr	r3, [r4, #0]
 80151e6:	4543      	cmp	r3, r8
        a_next = lv_ll_get_next(&LV_GC_ROOT(_lv_anim_ll), a);
 80151e8:	4683      	mov	fp, r0
        if(a->var == var && (a->exec_cb == exec_cb || exec_cb == NULL)) {
 80151ea:	d10d      	bne.n	8015208 <lv_anim_del+0x50>
 80151ec:	6863      	ldr	r3, [r4, #4]
 80151ee:	42b3      	cmp	r3, r6
 80151f0:	d000      	beq.n	80151f4 <lv_anim_del+0x3c>
 80151f2:	b94e      	cbnz	r6, 8015208 <lv_anim_del+0x50>
            lv_ll_rem(&LV_GC_ROOT(_lv_anim_ll), a);
 80151f4:	4621      	mov	r1, r4
 80151f6:	4638      	mov	r0, r7
 80151f8:	f000 f9bb 	bl	8015572 <lv_ll_rem>
            lv_mem_free(a);
 80151fc:	4620      	mov	r0, r4
 80151fe:	f000 faf7 	bl	80157f0 <lv_mem_free>
            del = true;
 8015202:	2501      	movs	r5, #1
            anim_list_changed = true; /*Read by `anim_task`. It need to know if a delete occurred in
 8015204:	f889 a000 	strb.w	sl, [r9]
            del = true;
 8015208:	465c      	mov	r4, fp
 801520a:	e7e3      	b.n	80151d4 <lv_anim_del+0x1c>
 801520c:	2000c81c 	.word	0x2000c81c
 8015210:	20006201 	.word	0x20006201

08015214 <lv_anim_create>:
    if(a->exec_cb != NULL) lv_anim_del(a->var, a->exec_cb); /*fp == NULL would delete all animations of var*/
 8015214:	6841      	ldr	r1, [r0, #4]
{
 8015216:	b510      	push	{r4, lr}
 8015218:	4604      	mov	r4, r0
    if(a->exec_cb != NULL) lv_anim_del(a->var, a->exec_cb); /*fp == NULL would delete all animations of var*/
 801521a:	b111      	cbz	r1, 8015222 <lv_anim_create+0xe>
 801521c:	6800      	ldr	r0, [r0, #0]
 801521e:	f7ff ffcb 	bl	80151b8 <lv_anim_del>
    lv_anim_t * new_anim = lv_ll_ins_head(&LV_GC_ROOT(_lv_anim_ll));
 8015222:	480f      	ldr	r0, [pc, #60]	; (8015260 <lv_anim_create+0x4c>)
 8015224:	f000 f92a 	bl	801547c <lv_ll_ins_head>
    lv_mem_assert(new_anim);
 8015228:	b900      	cbnz	r0, 801522c <lv_anim_create+0x18>
 801522a:	e7fe      	b.n	801522a <lv_anim_create+0x16>
    a->playback_now = 0;
 801522c:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 8015230:	f36f 0382 	bfc	r3, #2, #1
 8015234:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
    memcpy(new_anim, a, sizeof(lv_anim_t));
 8015238:	f104 0228 	add.w	r2, r4, #40	; 0x28
 801523c:	4603      	mov	r3, r0
 801523e:	f854 1b04 	ldr.w	r1, [r4], #4
 8015242:	f843 1b04 	str.w	r1, [r3], #4
 8015246:	4294      	cmp	r4, r2
 8015248:	d1f9      	bne.n	801523e <lv_anim_create+0x2a>
    if(new_anim->exec_cb) new_anim->exec_cb(new_anim->var, new_anim->start);
 801524a:	6843      	ldr	r3, [r0, #4]
 801524c:	b11b      	cbz	r3, 8015256 <lv_anim_create+0x42>
 801524e:	f9b0 1010 	ldrsh.w	r1, [r0, #16]
 8015252:	6800      	ldr	r0, [r0, #0]
 8015254:	4798      	blx	r3
    anim_list_changed = true;
 8015256:	4b03      	ldr	r3, [pc, #12]	; (8015264 <lv_anim_create+0x50>)
 8015258:	2201      	movs	r2, #1
 801525a:	701a      	strb	r2, [r3, #0]
 801525c:	bd10      	pop	{r4, pc}
 801525e:	bf00      	nop
 8015260:	2000c81c 	.word	0x2000c81c
 8015264:	20006201 	.word	0x20006201

08015268 <lv_anim_speed_to_time>:
    int32_t d     = LV_MATH_ABS((int32_t)start - end);
 8015268:	1a89      	subs	r1, r1, r2
 801526a:	2900      	cmp	r1, #0
 801526c:	bfb8      	it	lt
 801526e:	4249      	neglt	r1, r1
    uint32_t time = (int32_t)((int32_t)(d * 1000) / speed);
 8015270:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8015274:	434a      	muls	r2, r1
 8015276:	fb92 f0f0 	sdiv	r0, r2, r0
    if(time > UINT16_MAX) time = UINT16_MAX;
 801527a:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
 801527e:	da04      	bge.n	801528a <lv_anim_speed_to_time+0x22>
        time++;
 8015280:	2800      	cmp	r0, #0
 8015282:	bf08      	it	eq
 8015284:	2001      	moveq	r0, #1
}
 8015286:	b280      	uxth	r0, r0
 8015288:	4770      	bx	lr
    if(time > UINT16_MAX) time = UINT16_MAX;
 801528a:	f64f 70ff 	movw	r0, #65535	; 0xffff
 801528e:	e7fa      	b.n	8015286 <lv_anim_speed_to_time+0x1e>

08015290 <lv_area_set>:
 */
void lv_area_set(lv_area_t * area_p, lv_coord_t x1, lv_coord_t y1, lv_coord_t x2, lv_coord_t y2)
{
    area_p->x1 = x1;
    area_p->y1 = y1;
    area_p->x2 = x2;
 8015290:	8083      	strh	r3, [r0, #4]
    area_p->y2 = y2;
 8015292:	f9bd 3000 	ldrsh.w	r3, [sp]
    area_p->x1 = x1;
 8015296:	8001      	strh	r1, [r0, #0]
    area_p->y1 = y1;
 8015298:	8042      	strh	r2, [r0, #2]
    area_p->y2 = y2;
 801529a:	80c3      	strh	r3, [r0, #6]
 801529c:	4770      	bx	lr

0801529e <lv_area_set_width>:
 * @param area_p pointer to an area
 * @param w the new width of the area (w == 1 makes x1 == x2)
 */
void lv_area_set_width(lv_area_t * area_p, lv_coord_t w)
{
    area_p->x2 = area_p->x1 + w - 1;
 801529e:	8803      	ldrh	r3, [r0, #0]
 80152a0:	3901      	subs	r1, #1
 80152a2:	4419      	add	r1, r3
 80152a4:	8081      	strh	r1, [r0, #4]
 80152a6:	4770      	bx	lr

080152a8 <lv_area_set_height>:
 * @param area_p pointer to an area
 * @param h the new height of the area (h == 1 makes y1 == y2)
 */
void lv_area_set_height(lv_area_t * area_p, lv_coord_t h)
{
    area_p->y2 = area_p->y1 + h - 1;
 80152a8:	8843      	ldrh	r3, [r0, #2]
 80152aa:	3901      	subs	r1, #1
 80152ac:	4419      	add	r1, r3
 80152ae:	80c1      	strh	r1, [r0, #6]
 80152b0:	4770      	bx	lr

080152b2 <lv_area_set_pos>:
 * @param area_p pointer to an area
 * @param x the new x coordinate of the area
 * @param y the new y coordinate of the area
 */
void lv_area_set_pos(lv_area_t * area_p, lv_coord_t x, lv_coord_t y)
{
 80152b2:	b570      	push	{r4, r5, r6, lr}
 * @param area_p pointer to an area
 * @return the height of the area (if y1 == y2 -> height = 1)
 */
static inline lv_coord_t lv_area_get_height(const lv_area_t * area_p)
{
    return area_p->y2 - area_p->y1 + 1;
 80152b4:	88c3      	ldrh	r3, [r0, #6]
    return area_p->x2 - area_p->x1 + 1;
 80152b6:	8884      	ldrh	r4, [r0, #4]
 80152b8:	8806      	ldrh	r6, [r0, #0]
    return area_p->y2 - area_p->y1 + 1;
 80152ba:	8845      	ldrh	r5, [r0, #2]
    lv_coord_t w = lv_area_get_width(area_p);
    lv_coord_t h = lv_area_get_height(area_p);
    area_p->x1   = x;
 80152bc:	8001      	strh	r1, [r0, #0]
    area_p->y1   = y;
 80152be:	8042      	strh	r2, [r0, #2]
    area_p->x2 = area_p->x1 + w - 1;
 80152c0:	4421      	add	r1, r4
    area_p->y2 = area_p->y1 + h - 1;
 80152c2:	441a      	add	r2, r3
    area_p->x2 = area_p->x1 + w - 1;
 80152c4:	1b89      	subs	r1, r1, r6
    area_p->y2 = area_p->y1 + h - 1;
 80152c6:	1b52      	subs	r2, r2, r5
    area_p->x2 = area_p->x1 + w - 1;
 80152c8:	8081      	strh	r1, [r0, #4]
    area_p->y2 = area_p->y1 + h - 1;
 80152ca:	80c2      	strh	r2, [r0, #6]
 80152cc:	bd70      	pop	{r4, r5, r6, pc}

080152ce <lv_area_get_size>:
 */
uint32_t lv_area_get_size(const lv_area_t * area_p)
{
    uint32_t size;

    size = (uint32_t)(area_p->x2 - area_p->x1 + 1) * (area_p->y2 - area_p->y1 + 1);
 80152ce:	f9b0 3000 	ldrsh.w	r3, [r0]
 80152d2:	f9b0 2004 	ldrsh.w	r2, [r0, #4]
 80152d6:	1ad2      	subs	r2, r2, r3
 80152d8:	f9b0 3006 	ldrsh.w	r3, [r0, #6]
 80152dc:	f9b0 0002 	ldrsh.w	r0, [r0, #2]
 80152e0:	1a18      	subs	r0, r3, r0
 80152e2:	3001      	adds	r0, #1

    return size;
}
 80152e4:	fb02 0000 	mla	r0, r2, r0, r0
 80152e8:	4770      	bx	lr

080152ea <lv_area_intersect>:
 * @return false: the two area has NO common parts, res_p is invalid
 */
bool lv_area_intersect(lv_area_t * res_p, const lv_area_t * a1_p, const lv_area_t * a2_p)
{
    /* Get the smaller area from 'a1_p' and 'a2_p' */
    res_p->x1 = LV_MATH_MAX(a1_p->x1, a2_p->x1);
 80152ea:	f9b1 3000 	ldrsh.w	r3, [r1]
{
 80152ee:	b570      	push	{r4, r5, r6, lr}
    res_p->x1 = LV_MATH_MAX(a1_p->x1, a2_p->x1);
 80152f0:	f9b2 5000 	ldrsh.w	r5, [r2]
    res_p->y1 = LV_MATH_MAX(a1_p->y1, a2_p->y1);
 80152f4:	f9b1 4002 	ldrsh.w	r4, [r1, #2]
    res_p->x2 = LV_MATH_MIN(a1_p->x2, a2_p->x2);
 80152f8:	f9b1 6004 	ldrsh.w	r6, [r1, #4]
    res_p->y2 = LV_MATH_MIN(a1_p->y2, a2_p->y2);
 80152fc:	f9b1 1006 	ldrsh.w	r1, [r1, #6]
    res_p->x1 = LV_MATH_MAX(a1_p->x1, a2_p->x1);
 8015300:	429d      	cmp	r5, r3
 8015302:	bfb8      	it	lt
 8015304:	461d      	movlt	r5, r3
    res_p->y1 = LV_MATH_MAX(a1_p->y1, a2_p->y1);
 8015306:	f9b2 3002 	ldrsh.w	r3, [r2, #2]
    res_p->x1 = LV_MATH_MAX(a1_p->x1, a2_p->x1);
 801530a:	8005      	strh	r5, [r0, #0]
    res_p->y1 = LV_MATH_MAX(a1_p->y1, a2_p->y1);
 801530c:	42a3      	cmp	r3, r4
 801530e:	bfb8      	it	lt
 8015310:	4623      	movlt	r3, r4
    res_p->x2 = LV_MATH_MIN(a1_p->x2, a2_p->x2);
 8015312:	f9b2 4004 	ldrsh.w	r4, [r2, #4]
    res_p->y2 = LV_MATH_MIN(a1_p->y2, a2_p->y2);
 8015316:	f9b2 2006 	ldrsh.w	r2, [r2, #6]
    res_p->y1 = LV_MATH_MAX(a1_p->y1, a2_p->y1);
 801531a:	8043      	strh	r3, [r0, #2]
    res_p->x2 = LV_MATH_MIN(a1_p->x2, a2_p->x2);
 801531c:	42b4      	cmp	r4, r6
 801531e:	bfa8      	it	ge
 8015320:	4634      	movge	r4, r6
    res_p->y2 = LV_MATH_MIN(a1_p->y2, a2_p->y2);
 8015322:	428a      	cmp	r2, r1
 8015324:	bfa8      	it	ge
 8015326:	460a      	movge	r2, r1

    /*If x1 or y1 greater then x2 or y2 then the areas union is empty*/
    bool union_ok = true;
    if((res_p->x1 > res_p->x2) || (res_p->y1 > res_p->y2)) {
 8015328:	42a5      	cmp	r5, r4
    res_p->x2 = LV_MATH_MIN(a1_p->x2, a2_p->x2);
 801532a:	8084      	strh	r4, [r0, #4]
    res_p->y2 = LV_MATH_MIN(a1_p->y2, a2_p->y2);
 801532c:	80c2      	strh	r2, [r0, #6]
    if((res_p->x1 > res_p->x2) || (res_p->y1 > res_p->y2)) {
 801532e:	dc04      	bgt.n	801533a <lv_area_intersect+0x50>
 8015330:	4293      	cmp	r3, r2
 8015332:	bfcc      	ite	gt
 8015334:	2000      	movgt	r0, #0
 8015336:	2001      	movle	r0, #1
 8015338:	bd70      	pop	{r4, r5, r6, pc}
        union_ok = false;
 801533a:	2000      	movs	r0, #0
    }

    return union_ok;
}
 801533c:	bd70      	pop	{r4, r5, r6, pc}

0801533e <lv_area_join>:
 * @param a1_p pointer to the first area
 * @param a2_p pointer to the second area
 */
void lv_area_join(lv_area_t * a_res_p, const lv_area_t * a1_p, const lv_area_t * a2_p)
{
    a_res_p->x1 = LV_MATH_MIN(a1_p->x1, a2_p->x1);
 801533e:	f9b2 3000 	ldrsh.w	r3, [r2]
{
 8015342:	b510      	push	{r4, lr}
    a_res_p->x1 = LV_MATH_MIN(a1_p->x1, a2_p->x1);
 8015344:	f9b1 4000 	ldrsh.w	r4, [r1]
 8015348:	42a3      	cmp	r3, r4
 801534a:	bfa8      	it	ge
 801534c:	4623      	movge	r3, r4
 801534e:	8003      	strh	r3, [r0, #0]
    a_res_p->y1 = LV_MATH_MIN(a1_p->y1, a2_p->y1);
 8015350:	f9b1 4002 	ldrsh.w	r4, [r1, #2]
 8015354:	f9b2 3002 	ldrsh.w	r3, [r2, #2]
 8015358:	42a3      	cmp	r3, r4
 801535a:	bfa8      	it	ge
 801535c:	4623      	movge	r3, r4
 801535e:	8043      	strh	r3, [r0, #2]
    a_res_p->x2 = LV_MATH_MAX(a1_p->x2, a2_p->x2);
 8015360:	f9b1 4004 	ldrsh.w	r4, [r1, #4]
 8015364:	f9b2 3004 	ldrsh.w	r3, [r2, #4]
 8015368:	42a3      	cmp	r3, r4
 801536a:	bfb8      	it	lt
 801536c:	4623      	movlt	r3, r4
 801536e:	8083      	strh	r3, [r0, #4]
    a_res_p->y2 = LV_MATH_MAX(a1_p->y2, a2_p->y2);
 8015370:	f9b2 3006 	ldrsh.w	r3, [r2, #6]
 8015374:	f9b1 2006 	ldrsh.w	r2, [r1, #6]
 8015378:	4293      	cmp	r3, r2
 801537a:	bfb8      	it	lt
 801537c:	4613      	movlt	r3, r2
 801537e:	80c3      	strh	r3, [r0, #6]
 8015380:	bd10      	pop	{r4, pc}

08015382 <lv_area_is_on>:
 * @param a2_p pointer to an other area
 * @return false: a1_p and a2_p has no common parts
 */
bool lv_area_is_on(const lv_area_t * a1_p, const lv_area_t * a2_p)
{
    if((a1_p->x1 <= a2_p->x2) && (a1_p->x2 >= a2_p->x1) && (a1_p->y1 <= a2_p->y2) && (a1_p->y2 >= a2_p->y1)) {
 8015382:	f9b0 2000 	ldrsh.w	r2, [r0]
 8015386:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
 801538a:	429a      	cmp	r2, r3
 801538c:	dc14      	bgt.n	80153b8 <lv_area_is_on+0x36>
 801538e:	f9b0 2004 	ldrsh.w	r2, [r0, #4]
 8015392:	f9b1 3000 	ldrsh.w	r3, [r1]
 8015396:	429a      	cmp	r2, r3
 8015398:	db0e      	blt.n	80153b8 <lv_area_is_on+0x36>
 801539a:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
 801539e:	f9b1 3006 	ldrsh.w	r3, [r1, #6]
 80153a2:	429a      	cmp	r2, r3
 80153a4:	dc08      	bgt.n	80153b8 <lv_area_is_on+0x36>
 80153a6:	f9b0 0006 	ldrsh.w	r0, [r0, #6]
 80153aa:	f9b1 3002 	ldrsh.w	r3, [r1, #2]
 80153ae:	4298      	cmp	r0, r3
 80153b0:	bfb4      	ite	lt
 80153b2:	2000      	movlt	r0, #0
 80153b4:	2001      	movge	r0, #1
 80153b6:	4770      	bx	lr
        return true;
    } else {
        return false;
 80153b8:	2000      	movs	r0, #0
    }
}
 80153ba:	4770      	bx	lr

080153bc <lv_area_is_in>:
 */
bool lv_area_is_in(const lv_area_t * ain_p, const lv_area_t * aholder_p)
{
    bool is_in = false;

    if(ain_p->x1 >= aholder_p->x1 && ain_p->y1 >= aholder_p->y1 && ain_p->x2 <= aholder_p->x2 &&
 80153bc:	f9b0 2000 	ldrsh.w	r2, [r0]
 80153c0:	f9b1 3000 	ldrsh.w	r3, [r1]
 80153c4:	429a      	cmp	r2, r3
 80153c6:	db14      	blt.n	80153f2 <lv_area_is_in+0x36>
 80153c8:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
 80153cc:	f9b1 3002 	ldrsh.w	r3, [r1, #2]
 80153d0:	429a      	cmp	r2, r3
 80153d2:	db0e      	blt.n	80153f2 <lv_area_is_in+0x36>
 80153d4:	f9b0 2004 	ldrsh.w	r2, [r0, #4]
 80153d8:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
 80153dc:	429a      	cmp	r2, r3
 80153de:	dc08      	bgt.n	80153f2 <lv_area_is_in+0x36>
 80153e0:	f9b0 0006 	ldrsh.w	r0, [r0, #6]
 80153e4:	f9b1 3006 	ldrsh.w	r3, [r1, #6]
 80153e8:	4298      	cmp	r0, r3
 80153ea:	bfcc      	ite	gt
 80153ec:	2000      	movgt	r0, #0
 80153ee:	2001      	movle	r0, #1
 80153f0:	4770      	bx	lr
    bool is_in = false;
 80153f2:	2000      	movs	r0, #0
       ain_p->y2 <= aholder_p->y2) {
        is_in = true;
    }

    return is_in;
}
 80153f4:	4770      	bx	lr

080153f6 <lv_circ_init>:
 * @param tmp point to a variable. It will store temporary data
 * @param radius radius of the circle
 */
void lv_circ_init(lv_point_t * c, lv_coord_t * tmp, lv_coord_t radius)
{
    c->x = radius;
 80153f6:	8002      	strh	r2, [r0, #0]
    c->y = 0;
 80153f8:	2300      	movs	r3, #0
    *tmp = 1 - radius;
 80153fa:	f1c2 0201 	rsb	r2, r2, #1
    c->y = 0;
 80153fe:	8043      	strh	r3, [r0, #2]
    *tmp = 1 - radius;
 8015400:	800a      	strh	r2, [r1, #0]
 8015402:	4770      	bx	lr

08015404 <lv_circ_cont>:
 * @param c same as in circ_init
 * @return true if the circle is not ready yet
 */
bool lv_circ_cont(lv_point_t * c)
{
    return c->y <= c->x ? true : false;
 8015404:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
 8015408:	f9b0 0000 	ldrsh.w	r0, [r0]
}
 801540c:	4282      	cmp	r2, r0
 801540e:	bfcc      	ite	gt
 8015410:	2000      	movgt	r0, #0
 8015412:	2001      	movle	r0, #1
 8015414:	4770      	bx	lr

08015416 <lv_circ_next>:
 * @param c same as in circ_init. The next point stored here.
 * @param tmp same as in circ_init.
 */
void lv_circ_next(lv_point_t * c, lv_coord_t * tmp)
{
    c->y++;
 8015416:	8842      	ldrh	r2, [r0, #2]
 8015418:	3201      	adds	r2, #1
{
 801541a:	b530      	push	{r4, r5, lr}
    c->y++;
 801541c:	b294      	uxth	r4, r2
 801541e:	b225      	sxth	r5, r4
 8015420:	8045      	strh	r5, [r0, #2]

    if(*tmp <= 0) {
 8015422:	f9b1 2000 	ldrsh.w	r2, [r1]
 8015426:	2a00      	cmp	r2, #0
 8015428:	dc04      	bgt.n	8015434 <lv_circ_next+0x1e>
        (*tmp) += 2 * c->y + 1; // Change in decision criterion for y -> y+1
 801542a:	3201      	adds	r2, #1
 801542c:	eb02 0244 	add.w	r2, r2, r4, lsl #1
 8015430:	800a      	strh	r2, [r1, #0]
 8015432:	bd30      	pop	{r4, r5, pc}
    } else {
        c->x--;
 8015434:	8803      	ldrh	r3, [r0, #0]
 8015436:	3b01      	subs	r3, #1
 8015438:	b21b      	sxth	r3, r3
 801543a:	8003      	strh	r3, [r0, #0]
        (*tmp) += 2 * (c->y - c->x) + 1; // Change for y -> y+1, x -> x-1
 801543c:	1aed      	subs	r5, r5, r3
 801543e:	880b      	ldrh	r3, [r1, #0]
 8015440:	3301      	adds	r3, #1
 8015442:	eb03 0345 	add.w	r3, r3, r5, lsl #1
 8015446:	800b      	strh	r3, [r1, #0]
 8015448:	bd30      	pop	{r4, r5, pc}

0801544a <node_set_next.isra.0>:
 * @param act pointer to a node which next node pointer should be set
 * @param next pointer to a node which should be the next node before 'act'
 */
static void node_set_next(lv_ll_t * ll_p, lv_ll_node_t * act, lv_ll_node_t * next)
{
    if(act == NULL) return; /*Can't set the next node of `NULL`*/
 801544a:	b131      	cbz	r1, 801545a <node_set_next.isra.0+0x10>
 801544c:	6803      	ldr	r3, [r0, #0]

    uint32_t node_p_size = sizeof(lv_ll_node_t *);
    if(next)
 801544e:	b112      	cbz	r2, 8015456 <node_set_next.isra.0+0xc>
        memcpy(act + LL_NEXT_P_OFFSET(ll_p), &next, node_p_size);
 8015450:	4419      	add	r1, r3
 8015452:	604a      	str	r2, [r1, #4]
 8015454:	4770      	bx	lr
    else
        memset(act + LL_NEXT_P_OFFSET(ll_p), 0, node_p_size);
 8015456:	3304      	adds	r3, #4
 8015458:	50ca      	str	r2, [r1, r3]
 801545a:	4770      	bx	lr

0801545c <node_set_prev.isra.2>:
    if(act == NULL) return; /*Can't set the prev node of `NULL`*/
 801545c:	b119      	cbz	r1, 8015466 <node_set_prev.isra.2+0xa>
 801545e:	6803      	ldr	r3, [r0, #0]
        memcpy(act + LL_PREV_P_OFFSET(ll_p), &prev, node_p_size);
 8015460:	50ca      	str	r2, [r1, r3]
    if(prev)
 8015462:	b102      	cbz	r2, 8015466 <node_set_prev.isra.2+0xa>
 8015464:	4770      	bx	lr
 8015466:	4770      	bx	lr

08015468 <lv_ll_init>:
    ll_p->head = NULL;
 8015468:	2300      	movs	r3, #0
 801546a:	6043      	str	r3, [r0, #4]
    ll_p->tail = NULL;
 801546c:	6083      	str	r3, [r0, #8]
    if(node_size & 0x3) {
 801546e:	078b      	lsls	r3, r1, #30
        node_size = node_size & (~0x3);
 8015470:	bf1c      	itt	ne
 8015472:	f021 0103 	bicne.w	r1, r1, #3
        node_size += 4;
 8015476:	3104      	addne	r1, #4
    ll_p->n_size = node_size;
 8015478:	6001      	str	r1, [r0, #0]
 801547a:	4770      	bx	lr

0801547c <lv_ll_ins_head>:
{
 801547c:	b538      	push	{r3, r4, r5, lr}
 801547e:	4604      	mov	r4, r0
    n_new = lv_mem_alloc(ll_p->n_size + LL_NODE_META_SIZE);
 8015480:	6800      	ldr	r0, [r0, #0]
 8015482:	3008      	adds	r0, #8
 8015484:	f000 f97e 	bl	8015784 <lv_mem_alloc>
    if(n_new != NULL) {
 8015488:	4605      	mov	r5, r0
 801548a:	b198      	cbz	r0, 80154b4 <lv_ll_ins_head+0x38>
        node_set_prev(ll_p, n_new, NULL);       /*No prev. before the new head*/
 801548c:	4601      	mov	r1, r0
 801548e:	2200      	movs	r2, #0
 8015490:	4620      	mov	r0, r4
 8015492:	f7ff ffe3 	bl	801545c <node_set_prev.isra.2>
        node_set_next(ll_p, n_new, ll_p->head); /*After new comes the old head*/
 8015496:	4629      	mov	r1, r5
 8015498:	6862      	ldr	r2, [r4, #4]
 801549a:	4620      	mov	r0, r4
 801549c:	f7ff ffd5 	bl	801544a <node_set_next.isra.0>
        if(ll_p->head != NULL) { /*If there is old head then before it goes the new*/
 80154a0:	6861      	ldr	r1, [r4, #4]
 80154a2:	b119      	cbz	r1, 80154ac <lv_ll_ins_head+0x30>
            node_set_prev(ll_p, ll_p->head, n_new);
 80154a4:	462a      	mov	r2, r5
 80154a6:	4620      	mov	r0, r4
 80154a8:	f7ff ffd8 	bl	801545c <node_set_prev.isra.2>
        if(ll_p->tail == NULL) { /*If there is no tail (1. node) set the tail too*/
 80154ac:	68a3      	ldr	r3, [r4, #8]
        ll_p->head = n_new;      /*Set the new head in the dsc.*/
 80154ae:	6065      	str	r5, [r4, #4]
        if(ll_p->tail == NULL) { /*If there is no tail (1. node) set the tail too*/
 80154b0:	b903      	cbnz	r3, 80154b4 <lv_ll_ins_head+0x38>
            ll_p->tail = n_new;
 80154b2:	60a5      	str	r5, [r4, #8]
}
 80154b4:	4628      	mov	r0, r5
 80154b6:	bd38      	pop	{r3, r4, r5, pc}

080154b8 <lv_ll_ins_tail>:
{
 80154b8:	b538      	push	{r3, r4, r5, lr}
 80154ba:	4604      	mov	r4, r0
    n_new = lv_mem_alloc(ll_p->n_size + LL_NODE_META_SIZE);
 80154bc:	6800      	ldr	r0, [r0, #0]
 80154be:	3008      	adds	r0, #8
 80154c0:	f000 f960 	bl	8015784 <lv_mem_alloc>
    if(n_new == NULL) return NULL;
 80154c4:	4605      	mov	r5, r0
 80154c6:	b198      	cbz	r0, 80154f0 <lv_ll_ins_tail+0x38>
        node_set_next(ll_p, n_new, NULL);       /*No next after the new tail*/
 80154c8:	4601      	mov	r1, r0
 80154ca:	2200      	movs	r2, #0
 80154cc:	4620      	mov	r0, r4
 80154ce:	f7ff ffbc 	bl	801544a <node_set_next.isra.0>
        node_set_prev(ll_p, n_new, ll_p->tail); /*The prev. before new is tho old tail*/
 80154d2:	4629      	mov	r1, r5
 80154d4:	68a2      	ldr	r2, [r4, #8]
 80154d6:	4620      	mov	r0, r4
 80154d8:	f7ff ffc0 	bl	801545c <node_set_prev.isra.2>
        if(ll_p->tail != NULL) {                /*If there is old tail then the new comes after it*/
 80154dc:	68a1      	ldr	r1, [r4, #8]
 80154de:	b119      	cbz	r1, 80154e8 <lv_ll_ins_tail+0x30>
            node_set_next(ll_p, ll_p->tail, n_new);
 80154e0:	462a      	mov	r2, r5
 80154e2:	4620      	mov	r0, r4
 80154e4:	f7ff ffb1 	bl	801544a <node_set_next.isra.0>
        if(ll_p->head == NULL) { /*If there is no head (1. node) set the head too*/
 80154e8:	6863      	ldr	r3, [r4, #4]
        ll_p->tail = n_new;      /*Set the new tail in the dsc.*/
 80154ea:	60a5      	str	r5, [r4, #8]
        if(ll_p->head == NULL) { /*If there is no head (1. node) set the head too*/
 80154ec:	b903      	cbnz	r3, 80154f0 <lv_ll_ins_tail+0x38>
            ll_p->head = n_new;
 80154ee:	6065      	str	r5, [r4, #4]
}
 80154f0:	4628      	mov	r0, r5
 80154f2:	bd38      	pop	{r3, r4, r5, pc}

080154f4 <lv_ll_get_head>:
    if(ll_p != NULL) {
 80154f4:	b100      	cbz	r0, 80154f8 <lv_ll_get_head+0x4>
        head = ll_p->head;
 80154f6:	6840      	ldr	r0, [r0, #4]
}
 80154f8:	4770      	bx	lr

080154fa <lv_ll_get_tail>:
    if(ll_p != NULL) {
 80154fa:	b100      	cbz	r0, 80154fe <lv_ll_get_tail+0x4>
        tail = ll_p->tail;
 80154fc:	6880      	ldr	r0, [r0, #8]
}
 80154fe:	4770      	bx	lr

08015500 <lv_ll_get_next>:
    if(ll_p != NULL) {
 8015500:	b110      	cbz	r0, 8015508 <lv_ll_get_next+0x8>
        memcpy(&next, n_act_d + LL_NEXT_P_OFFSET(ll_p), sizeof(void *));
 8015502:	6803      	ldr	r3, [r0, #0]
 8015504:	4419      	add	r1, r3
 8015506:	6848      	ldr	r0, [r1, #4]
}
 8015508:	4770      	bx	lr

0801550a <lv_ll_get_prev>:
    if(ll_p != NULL) {
 801550a:	b108      	cbz	r0, 8015510 <lv_ll_get_prev+0x6>
        memcpy(&prev, n_act_d + LL_PREV_P_OFFSET(ll_p), sizeof(void *));
 801550c:	6803      	ldr	r3, [r0, #0]
 801550e:	58c8      	ldr	r0, [r1, r3]
}
 8015510:	4770      	bx	lr

08015512 <lv_ll_ins_prev>:
{
 8015512:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015514:	460c      	mov	r4, r1
    if(NULL == ll_p || NULL == n_act) return NULL;
 8015516:	4605      	mov	r5, r0
 8015518:	b340      	cbz	r0, 801556c <lv_ll_ins_prev+0x5a>
 801551a:	b341      	cbz	r1, 801556e <lv_ll_ins_prev+0x5c>
    if(lv_ll_get_head(ll_p) == n_act) {
 801551c:	6843      	ldr	r3, [r0, #4]
 801551e:	4299      	cmp	r1, r3
 8015520:	d103      	bne.n	801552a <lv_ll_ins_prev+0x18>
}
 8015522:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
        n_new = lv_ll_ins_head(ll_p);
 8015526:	f7ff bfa9 	b.w	801547c <lv_ll_ins_head>
        n_new = lv_mem_alloc(ll_p->n_size + LL_NODE_META_SIZE);
 801552a:	6800      	ldr	r0, [r0, #0]
 801552c:	3008      	adds	r0, #8
 801552e:	f000 f929 	bl	8015784 <lv_mem_alloc>
        if(n_new == NULL) return NULL;
 8015532:	4606      	mov	r6, r0
 8015534:	b1c0      	cbz	r0, 8015568 <lv_ll_ins_prev+0x56>
        n_prev = lv_ll_get_prev(ll_p, n_act);
 8015536:	4621      	mov	r1, r4
 8015538:	4628      	mov	r0, r5
 801553a:	f7ff ffe6 	bl	801550a <lv_ll_get_prev>
        node_set_next(ll_p, n_prev, n_new);
 801553e:	4632      	mov	r2, r6
 8015540:	4601      	mov	r1, r0
        n_prev = lv_ll_get_prev(ll_p, n_act);
 8015542:	4607      	mov	r7, r0
        node_set_next(ll_p, n_prev, n_new);
 8015544:	4628      	mov	r0, r5
 8015546:	f7ff ff80 	bl	801544a <node_set_next.isra.0>
        node_set_prev(ll_p, n_new, n_prev);
 801554a:	463a      	mov	r2, r7
 801554c:	4631      	mov	r1, r6
 801554e:	4628      	mov	r0, r5
 8015550:	f7ff ff84 	bl	801545c <node_set_prev.isra.2>
        node_set_prev(ll_p, n_act, n_new);
 8015554:	4632      	mov	r2, r6
 8015556:	4621      	mov	r1, r4
 8015558:	4628      	mov	r0, r5
 801555a:	f7ff ff7f 	bl	801545c <node_set_prev.isra.2>
        node_set_next(ll_p, n_new, n_act);
 801555e:	4622      	mov	r2, r4
 8015560:	4631      	mov	r1, r6
 8015562:	4628      	mov	r0, r5
 8015564:	f7ff ff71 	bl	801544a <node_set_next.isra.0>
        if(n_new == NULL) return NULL;
 8015568:	4634      	mov	r4, r6
 801556a:	e000      	b.n	801556e <lv_ll_ins_prev+0x5c>
    if(NULL == ll_p || NULL == n_act) return NULL;
 801556c:	4604      	mov	r4, r0
}
 801556e:	4620      	mov	r0, r4
 8015570:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08015572 <lv_ll_rem>:
{
 8015572:	b570      	push	{r4, r5, r6, lr}
 8015574:	460a      	mov	r2, r1
    if(ll_p != NULL) {
 8015576:	4604      	mov	r4, r0
 8015578:	b308      	cbz	r0, 80155be <lv_ll_rem+0x4c>
    if(lv_ll_get_head(ll_p) == node_p) {
 801557a:	6843      	ldr	r3, [r0, #4]
 801557c:	4299      	cmp	r1, r3
 801557e:	d10e      	bne.n	801559e <lv_ll_rem+0x2c>
        ll_p->head = lv_ll_get_next(ll_p, node_p);
 8015580:	4611      	mov	r1, r2
 8015582:	4620      	mov	r0, r4
 8015584:	f7ff ffbc 	bl	8015500 <lv_ll_get_next>
 8015588:	4601      	mov	r1, r0
 801558a:	6060      	str	r0, [r4, #4]
        if(ll_p->head == NULL) {
 801558c:	b908      	cbnz	r0, 8015592 <lv_ll_rem+0x20>
            ll_p->tail = NULL;
 801558e:	60a0      	str	r0, [r4, #8]
 8015590:	bd70      	pop	{r4, r5, r6, pc}
            node_set_prev(ll_p, ll_p->head, NULL);
 8015592:	2200      	movs	r2, #0
        node_set_prev(ll_p, n_next, n_prev);
 8015594:	4620      	mov	r0, r4
}
 8015596:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        node_set_prev(ll_p, n_next, n_prev);
 801559a:	f7ff bf5f 	b.w	801545c <node_set_prev.isra.2>
    } else if(lv_ll_get_tail(ll_p) == node_p) {
 801559e:	6883      	ldr	r3, [r0, #8]
 80155a0:	4299      	cmp	r1, r3
 80155a2:	d10e      	bne.n	80155c2 <lv_ll_rem+0x50>
        ll_p->tail = lv_ll_get_prev(ll_p, node_p);
 80155a4:	f7ff ffb1 	bl	801550a <lv_ll_get_prev>
 80155a8:	4601      	mov	r1, r0
 80155aa:	60a0      	str	r0, [r4, #8]
        if(ll_p->tail == NULL) {
 80155ac:	b908      	cbnz	r0, 80155b2 <lv_ll_rem+0x40>
            ll_p->head = NULL;
 80155ae:	6060      	str	r0, [r4, #4]
 80155b0:	bd70      	pop	{r4, r5, r6, pc}
            node_set_next(ll_p, ll_p->tail, NULL);
 80155b2:	4620      	mov	r0, r4
 80155b4:	2200      	movs	r2, #0
}
 80155b6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
            node_set_next(ll_p, ll_p->tail, NULL);
 80155ba:	f7ff bf46 	b.w	801544a <node_set_next.isra.0>
    if(lv_ll_get_head(ll_p) == node_p) {
 80155be:	2900      	cmp	r1, #0
 80155c0:	d0de      	beq.n	8015580 <lv_ll_rem+0xe>
        lv_ll_node_t * n_prev = lv_ll_get_prev(ll_p, node_p);
 80155c2:	4611      	mov	r1, r2
 80155c4:	4620      	mov	r0, r4
 80155c6:	f7ff ffa0 	bl	801550a <lv_ll_get_prev>
 80155ca:	4606      	mov	r6, r0
        lv_ll_node_t * n_next = lv_ll_get_next(ll_p, node_p);
 80155cc:	4611      	mov	r1, r2
 80155ce:	4620      	mov	r0, r4
 80155d0:	f7ff ff96 	bl	8015500 <lv_ll_get_next>
        node_set_next(ll_p, n_prev, n_next);
 80155d4:	4631      	mov	r1, r6
 80155d6:	4602      	mov	r2, r0
        lv_ll_node_t * n_next = lv_ll_get_next(ll_p, node_p);
 80155d8:	4605      	mov	r5, r0
        node_set_next(ll_p, n_prev, n_next);
 80155da:	4620      	mov	r0, r4
 80155dc:	f7ff ff35 	bl	801544a <node_set_next.isra.0>
        node_set_prev(ll_p, n_next, n_prev);
 80155e0:	4632      	mov	r2, r6
 80155e2:	4629      	mov	r1, r5
 80155e4:	e7d6      	b.n	8015594 <lv_ll_rem+0x22>

080155e6 <lv_ll_chg_list>:
{
 80155e6:	b570      	push	{r4, r5, r6, lr}
 80155e8:	460c      	mov	r4, r1
 80155ea:	461e      	mov	r6, r3
    lv_ll_rem(ll_ori_p, node);
 80155ec:	4611      	mov	r1, r2
{
 80155ee:	4615      	mov	r5, r2
    lv_ll_rem(ll_ori_p, node);
 80155f0:	f7ff ffbf 	bl	8015572 <lv_ll_rem>
    if(head) {
 80155f4:	b1a6      	cbz	r6, 8015620 <lv_ll_chg_list+0x3a>
        node_set_prev(ll_new_p, node, NULL);
 80155f6:	2200      	movs	r2, #0
 80155f8:	4629      	mov	r1, r5
 80155fa:	4620      	mov	r0, r4
 80155fc:	f7ff ff2e 	bl	801545c <node_set_prev.isra.2>
        node_set_next(ll_new_p, node, ll_new_p->head);
 8015600:	4629      	mov	r1, r5
 8015602:	6862      	ldr	r2, [r4, #4]
 8015604:	4620      	mov	r0, r4
 8015606:	f7ff ff20 	bl	801544a <node_set_next.isra.0>
        if(ll_new_p->head != NULL) { /*If there is old head then before it goes the new*/
 801560a:	6861      	ldr	r1, [r4, #4]
 801560c:	b119      	cbz	r1, 8015616 <lv_ll_chg_list+0x30>
            node_set_prev(ll_new_p, ll_new_p->head, node);
 801560e:	462a      	mov	r2, r5
 8015610:	4620      	mov	r0, r4
 8015612:	f7ff ff23 	bl	801545c <node_set_prev.isra.2>
        if(ll_new_p->tail == NULL) { /*If there is no tail (first node) set the tail too*/
 8015616:	68a3      	ldr	r3, [r4, #8]
        ll_new_p->head = node;       /*Set the new head in the dsc.*/
 8015618:	6065      	str	r5, [r4, #4]
        if(ll_new_p->tail == NULL) { /*If there is no tail (first node) set the tail too*/
 801561a:	b9ab      	cbnz	r3, 8015648 <lv_ll_chg_list+0x62>
            ll_new_p->tail = node;
 801561c:	60a5      	str	r5, [r4, #8]
 801561e:	bd70      	pop	{r4, r5, r6, pc}
        node_set_prev(ll_new_p, node, ll_new_p->tail);
 8015620:	68a2      	ldr	r2, [r4, #8]
 8015622:	4629      	mov	r1, r5
 8015624:	4620      	mov	r0, r4
 8015626:	f7ff ff19 	bl	801545c <node_set_prev.isra.2>
        node_set_next(ll_new_p, node, NULL);
 801562a:	4629      	mov	r1, r5
 801562c:	4632      	mov	r2, r6
 801562e:	4620      	mov	r0, r4
 8015630:	f7ff ff0b 	bl	801544a <node_set_next.isra.0>
        if(ll_new_p->tail != NULL) { /*If there is old tail then after it goes the new*/
 8015634:	68a1      	ldr	r1, [r4, #8]
 8015636:	b119      	cbz	r1, 8015640 <lv_ll_chg_list+0x5a>
            node_set_next(ll_new_p, ll_new_p->tail, node);
 8015638:	462a      	mov	r2, r5
 801563a:	4620      	mov	r0, r4
 801563c:	f7ff ff05 	bl	801544a <node_set_next.isra.0>
        if(ll_new_p->head == NULL) { /*If there is no head (first node) set the head too*/
 8015640:	6863      	ldr	r3, [r4, #4]
        ll_new_p->tail = node;       /*Set the new tail in the dsc.*/
 8015642:	60a5      	str	r5, [r4, #8]
        if(ll_new_p->head == NULL) { /*If there is no head (first node) set the head too*/
 8015644:	b903      	cbnz	r3, 8015648 <lv_ll_chg_list+0x62>
            ll_new_p->head = node;
 8015646:	6065      	str	r5, [r4, #4]
 8015648:	bd70      	pop	{r4, r5, r6, pc}

0801564a <lv_ll_move_before>:
    if(n_act == n_after) return; /*Can't move before itself*/
 801564a:	4291      	cmp	r1, r2
{
 801564c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801564e:	4605      	mov	r5, r0
 8015650:	460c      	mov	r4, r1
 8015652:	4616      	mov	r6, r2
    if(n_act == n_after) return; /*Can't move before itself*/
 8015654:	d042      	beq.n	80156dc <lv_ll_move_before+0x92>
    if(n_after != NULL)
 8015656:	b132      	cbz	r2, 8015666 <lv_ll_move_before+0x1c>
        n_before = lv_ll_get_prev(ll_p, n_after);
 8015658:	4611      	mov	r1, r2
 801565a:	f7ff ff56 	bl	801550a <lv_ll_get_prev>
    if(n_act == n_before) return; /*Already before `n_after`*/
 801565e:	4284      	cmp	r4, r0
        n_before = lv_ll_get_prev(ll_p, n_after);
 8015660:	4607      	mov	r7, r0
    if(n_act == n_before) return; /*Already before `n_after`*/
 8015662:	d121      	bne.n	80156a8 <lv_ll_move_before+0x5e>
 8015664:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if(ll_p != NULL) {
 8015666:	b100      	cbz	r0, 801566a <lv_ll_move_before+0x20>
        tail = ll_p->tail;
 8015668:	6886      	ldr	r6, [r0, #8]
    if(n_act == n_before) return; /*Already before `n_after`*/
 801566a:	42b4      	cmp	r4, r6
 801566c:	d100      	bne.n	8015670 <lv_ll_move_before+0x26>
 801566e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    lv_ll_rem(ll_p, n_act);
 8015670:	4621      	mov	r1, r4
 8015672:	4628      	mov	r0, r5
 8015674:	f7ff ff7d 	bl	8015572 <lv_ll_rem>
    node_set_next(ll_p, n_before, n_act);
 8015678:	4622      	mov	r2, r4
 801567a:	4631      	mov	r1, r6
 801567c:	4628      	mov	r0, r5
 801567e:	f7ff fee4 	bl	801544a <node_set_next.isra.0>
    node_set_prev(ll_p, n_act, n_before);
 8015682:	4632      	mov	r2, r6
 8015684:	4621      	mov	r1, r4
 8015686:	4628      	mov	r0, r5
 8015688:	f7ff fee8 	bl	801545c <node_set_prev.isra.2>
    node_set_prev(ll_p, n_after, n_act);
 801568c:	4622      	mov	r2, r4
 801568e:	2100      	movs	r1, #0
 8015690:	4628      	mov	r0, r5
 8015692:	f7ff fee3 	bl	801545c <node_set_prev.isra.2>
    node_set_next(ll_p, n_act, n_after);
 8015696:	2200      	movs	r2, #0
 8015698:	4621      	mov	r1, r4
 801569a:	4628      	mov	r0, r5
 801569c:	f7ff fed5 	bl	801544a <node_set_next.isra.0>
    if(n_after == NULL) ll_p->tail = n_act;
 80156a0:	60ac      	str	r4, [r5, #8]
    if(n_before == NULL) ll_p->head = n_act;
 80156a2:	b9de      	cbnz	r6, 80156dc <lv_ll_move_before+0x92>
 80156a4:	606c      	str	r4, [r5, #4]
 80156a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    lv_ll_rem(ll_p, n_act);
 80156a8:	4621      	mov	r1, r4
 80156aa:	4628      	mov	r0, r5
 80156ac:	f7ff ff61 	bl	8015572 <lv_ll_rem>
    node_set_next(ll_p, n_before, n_act);
 80156b0:	4622      	mov	r2, r4
 80156b2:	4639      	mov	r1, r7
 80156b4:	4628      	mov	r0, r5
 80156b6:	f7ff fec8 	bl	801544a <node_set_next.isra.0>
    node_set_prev(ll_p, n_act, n_before);
 80156ba:	463a      	mov	r2, r7
 80156bc:	4621      	mov	r1, r4
 80156be:	4628      	mov	r0, r5
 80156c0:	f7ff fecc 	bl	801545c <node_set_prev.isra.2>
    node_set_prev(ll_p, n_after, n_act);
 80156c4:	4631      	mov	r1, r6
 80156c6:	4622      	mov	r2, r4
 80156c8:	4628      	mov	r0, r5
 80156ca:	f7ff fec7 	bl	801545c <node_set_prev.isra.2>
    node_set_next(ll_p, n_act, n_after);
 80156ce:	4632      	mov	r2, r6
 80156d0:	4621      	mov	r1, r4
 80156d2:	4628      	mov	r0, r5
 80156d4:	f7ff feb9 	bl	801544a <node_set_next.isra.0>
 80156d8:	463e      	mov	r6, r7
 80156da:	e7e2      	b.n	80156a2 <lv_ll_move_before+0x58>
 80156dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080156de <lv_ll_is_empty>:
    if(ll_p == NULL) return true;
 80156de:	b130      	cbz	r0, 80156ee <lv_ll_is_empty+0x10>
    if(ll_p->head == NULL && ll_p->tail == NULL) return true;
 80156e0:	6843      	ldr	r3, [r0, #4]
 80156e2:	b933      	cbnz	r3, 80156f2 <lv_ll_is_empty+0x14>
 80156e4:	6880      	ldr	r0, [r0, #8]
 80156e6:	fab0 f080 	clz	r0, r0
 80156ea:	0940      	lsrs	r0, r0, #5
 80156ec:	4770      	bx	lr
    if(ll_p == NULL) return true;
 80156ee:	2001      	movs	r0, #1
 80156f0:	4770      	bx	lr
    return false;
 80156f2:	2000      	movs	r0, #0
}
 80156f4:	4770      	bx	lr
	...

080156f8 <ent_get_next>:
 * Give the next entry after 'act_e'
 * @param act_e pointer to an entry
 * @return pointer to an entry after 'act_e'
 */
static lv_mem_ent_t * ent_get_next(lv_mem_ent_t * act_e)
{
 80156f8:	4a07      	ldr	r2, [pc, #28]	; (8015718 <ent_get_next+0x20>)
    lv_mem_ent_t * next_e = NULL;

    if(act_e == NULL) { /*NULL means: get the first entry*/
 80156fa:	b908      	cbnz	r0, 8015700 <ent_get_next+0x8>
        next_e = (lv_mem_ent_t *)work_mem;
 80156fc:	6810      	ldr	r0, [r2, #0]
 80156fe:	4770      	bx	lr
    } else { /*Get the next entry */
        uint8_t * data = &act_e->first_data;
 8015700:	1d03      	adds	r3, r0, #4
        next_e         = (lv_mem_ent_t *)&data[act_e->header.s.d_size];
 8015702:	6800      	ldr	r0, [r0, #0]
 8015704:	eb03 0050 	add.w	r0, r3, r0, lsr #1

        if(&next_e->first_data >= &work_mem[LV_MEM_SIZE]) next_e = NULL;
 8015708:	6813      	ldr	r3, [r2, #0]
 801570a:	1d01      	adds	r1, r0, #4
 801570c:	f503 43a0 	add.w	r3, r3, #20480	; 0x5000
 8015710:	4299      	cmp	r1, r3
 8015712:	bf28      	it	cs
 8015714:	2000      	movcs	r0, #0
    }

    return next_e;
}
 8015716:	4770      	bx	lr
 8015718:	20006208 	.word	0x20006208

0801571c <ent_trunc>:
        size = size & (~0x7);
        size += 8;
    }
#else
    /*Round the size up to 4*/
    if(size & 0x3) {
 801571c:	078b      	lsls	r3, r1, #30
        size = size & (~0x3);
 801571e:	bf18      	it	ne
 8015720:	f021 0103 	bicne.w	r1, r1, #3
        size += 4;
    }
#endif

    /*Don't let empty space only for a header without data*/
    if(e->header.s.d_size == size + sizeof(lv_mem_header_t)) {
 8015724:	6803      	ldr	r3, [r0, #0]
        size += 4;
 8015726:	bf18      	it	ne
 8015728:	3104      	addne	r1, #4
    if(e->header.s.d_size == size + sizeof(lv_mem_header_t)) {
 801572a:	f3c3 035e 	ubfx	r3, r3, #1, #31
 801572e:	1d0a      	adds	r2, r1, #4
 8015730:	4293      	cmp	r3, r2
{
 8015732:	b510      	push	{r4, lr}
    if(e->header.s.d_size == size + sizeof(lv_mem_header_t)) {
 8015734:	d011      	beq.n	801575a <ent_trunc+0x3e>
        size = e->header.s.d_size;
    }

    /* Create the new entry after the current if there is space for it */
    if(e->header.s.d_size != size) {
 8015736:	4299      	cmp	r1, r3
 8015738:	d00a      	beq.n	8015750 <ent_trunc+0x34>
        uint8_t * e_data             = &e->first_data;
 801573a:	1d02      	adds	r2, r0, #4
        lv_mem_ent_t * after_new_e   = (lv_mem_ent_t *)&e_data[size];
        after_new_e->header.s.used   = 0;
        after_new_e->header.s.d_size = e->header.s.d_size - size - sizeof(lv_mem_header_t);
 801573c:	3b04      	subs	r3, #4
        after_new_e->header.s.used   = 0;
 801573e:	5c54      	ldrb	r4, [r2, r1]
 8015740:	f36f 0400 	bfc	r4, #0, #1
 8015744:	5454      	strb	r4, [r2, r1]
        after_new_e->header.s.d_size = e->header.s.d_size - size - sizeof(lv_mem_header_t);
 8015746:	5854      	ldr	r4, [r2, r1]
 8015748:	1a5b      	subs	r3, r3, r1
 801574a:	f363 045f 	bfi	r4, r3, #1, #31
 801574e:	5054      	str	r4, [r2, r1]
    }

    /* Set the new size for the original entry */
    e->header.s.d_size = size;
 8015750:	6803      	ldr	r3, [r0, #0]
 8015752:	f361 035f 	bfi	r3, r1, #1, #31
 8015756:	6003      	str	r3, [r0, #0]
 8015758:	bd10      	pop	{r4, pc}
 801575a:	4619      	mov	r1, r3
 801575c:	e7f8      	b.n	8015750 <ent_trunc+0x34>
	...

08015760 <lv_mem_init>:
    work_mem = (uint8_t *)work_mem_int;
 8015760:	4b06      	ldr	r3, [pc, #24]	; (801577c <lv_mem_init+0x1c>)
 8015762:	4a07      	ldr	r2, [pc, #28]	; (8015780 <lv_mem_init+0x20>)
 8015764:	6013      	str	r3, [r2, #0]
    full->header.s.used = 0;
 8015766:	781a      	ldrb	r2, [r3, #0]
 8015768:	f36f 0200 	bfc	r2, #0, #1
 801576c:	701a      	strb	r2, [r3, #0]
    full->header.s.d_size = LV_MEM_SIZE - sizeof(lv_mem_header_t);
 801576e:	681a      	ldr	r2, [r3, #0]
 8015770:	f644 71fc 	movw	r1, #20476	; 0x4ffc
 8015774:	f361 025f 	bfi	r2, r1, #1, #31
 8015778:	601a      	str	r2, [r3, #0]
 801577a:	4770      	bx	lr
 801577c:	2000620c 	.word	0x2000620c
 8015780:	20006208 	.word	0x20006208

08015784 <lv_mem_alloc>:
{
 8015784:	b538      	push	{r3, r4, r5, lr}
    if(size == 0) {
 8015786:	4605      	mov	r5, r0
 8015788:	b300      	cbz	r0, 80157cc <lv_mem_alloc+0x48>
    if(size & 0x3) {
 801578a:	0782      	lsls	r2, r0, #30
        size = size & (~0x3);
 801578c:	bf1c      	itt	ne
 801578e:	f020 0503 	bicne.w	r5, r0, #3
        size += 4;
 8015792:	3504      	addne	r5, #4
    lv_mem_ent_t * e = NULL;
 8015794:	2400      	movs	r4, #0
        e = ent_get_next(e);
 8015796:	4620      	mov	r0, r4
 8015798:	f7ff ffae 	bl	80156f8 <ent_get_next>
        if(e != NULL) {
 801579c:	4604      	mov	r4, r0
 801579e:	b198      	cbz	r0, 80157c8 <lv_mem_alloc+0x44>
    if(e->header.s.used == 0 && e->header.s.d_size >= size) {
 80157a0:	7803      	ldrb	r3, [r0, #0]
 80157a2:	07db      	lsls	r3, r3, #31
 80157a4:	d4f7      	bmi.n	8015796 <lv_mem_alloc+0x12>
 80157a6:	6803      	ldr	r3, [r0, #0]
 80157a8:	ebb5 0f53 	cmp.w	r5, r3, lsr #1
 80157ac:	d8f3      	bhi.n	8015796 <lv_mem_alloc+0x12>
        ent_trunc(e, size),
 80157ae:	4629      	mov	r1, r5
 80157b0:	f7ff ffb4 	bl	801571c <ent_trunc>
            e->header.s.used = 1;
 80157b4:	7803      	ldrb	r3, [r0, #0]
 80157b6:	f043 0301 	orr.w	r3, r3, #1
 80157ba:	f804 3b04 	strb.w	r3, [r4], #4
    if(alloc != NULL) memset(alloc, 0xaa, size);
 80157be:	462a      	mov	r2, r5
 80157c0:	21aa      	movs	r1, #170	; 0xaa
 80157c2:	4620      	mov	r0, r4
 80157c4:	f005 fb03 	bl	801adce <memset>
}
 80157c8:	4620      	mov	r0, r4
 80157ca:	bd38      	pop	{r3, r4, r5, pc}
        return &zero_mem;
 80157cc:	4c00      	ldr	r4, [pc, #0]	; (80157d0 <lv_mem_alloc+0x4c>)
 80157ce:	e7fb      	b.n	80157c8 <lv_mem_alloc+0x44>
 80157d0:	2000b20c 	.word	0x2000b20c

080157d4 <lv_mem_get_size>:
    if(data == NULL) return 0;
 80157d4:	b140      	cbz	r0, 80157e8 <lv_mem_get_size+0x14>
    if(data == &zero_mem) return 0;
 80157d6:	4b05      	ldr	r3, [pc, #20]	; (80157ec <lv_mem_get_size+0x18>)
 80157d8:	4298      	cmp	r0, r3
 80157da:	d004      	beq.n	80157e6 <lv_mem_get_size+0x12>
    return e->header.s.d_size;
 80157dc:	f850 0c04 	ldr.w	r0, [r0, #-4]
 80157e0:	f3c0 005e 	ubfx	r0, r0, #1, #31
 80157e4:	4770      	bx	lr
    if(data == NULL) return 0;
 80157e6:	2000      	movs	r0, #0
}
 80157e8:	4770      	bx	lr
 80157ea:	bf00      	nop
 80157ec:	2000b20c 	.word	0x2000b20c

080157f0 <lv_mem_free>:
    if(data == &zero_mem) return;
 80157f0:	4b13      	ldr	r3, [pc, #76]	; (8015840 <lv_mem_free+0x50>)
 80157f2:	4298      	cmp	r0, r3
{
 80157f4:	b510      	push	{r4, lr}
 80157f6:	4604      	mov	r4, r0
    if(data == &zero_mem) return;
 80157f8:	d011      	beq.n	801581e <lv_mem_free+0x2e>
    if(data == NULL) return;
 80157fa:	b180      	cbz	r0, 801581e <lv_mem_free+0x2e>
    memset((void *)data, 0xbb, lv_mem_get_size(data));
 80157fc:	f7ff ffea 	bl	80157d4 <lv_mem_get_size>
 8015800:	21bb      	movs	r1, #187	; 0xbb
 8015802:	4602      	mov	r2, r0
 8015804:	4620      	mov	r0, r4
 8015806:	f005 fae2 	bl	801adce <memset>
    e->header.s.used = 0;
 801580a:	f814 3c04 	ldrb.w	r3, [r4, #-4]
 801580e:	4620      	mov	r0, r4
 8015810:	f36f 0300 	bfc	r3, #0, #1
 8015814:	f800 3d04 	strb.w	r3, [r0, #-4]!
        e_next = ent_get_next(e_next);
 8015818:	f7ff ff6e 	bl	80156f8 <ent_get_next>
    while(e_next != NULL) {
 801581c:	b900      	cbnz	r0, 8015820 <lv_mem_free+0x30>
 801581e:	bd10      	pop	{r4, pc}
        if(e_next->header.s.used == 0) {
 8015820:	7803      	ldrb	r3, [r0, #0]
 8015822:	07db      	lsls	r3, r3, #31
 8015824:	d4fb      	bmi.n	801581e <lv_mem_free+0x2e>
            e->header.s.d_size += e_next->header.s.d_size + sizeof(e->header);
 8015826:	f854 3c04 	ldr.w	r3, [r4, #-4]
 801582a:	6801      	ldr	r1, [r0, #0]
 801582c:	f3c3 025e 	ubfx	r2, r3, #1, #31
 8015830:	3204      	adds	r2, #4
 8015832:	eb02 0251 	add.w	r2, r2, r1, lsr #1
 8015836:	f362 035f 	bfi	r3, r2, #1, #31
 801583a:	f844 3c04 	str.w	r3, [r4, #-4]
 801583e:	e7eb      	b.n	8015818 <lv_mem_free+0x28>
 8015840:	2000b20c 	.word	0x2000b20c

08015844 <lv_mem_realloc>:
{
 8015844:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015846:	460d      	mov	r5, r1
    if(data_p != NULL) {
 8015848:	4604      	mov	r4, r0
 801584a:	b128      	cbz	r0, 8015858 <lv_mem_realloc+0x14>
        if(e->header.s.used == 0) {
 801584c:	f810 3c04 	ldrb.w	r3, [r0, #-4]
            data_p = NULL;
 8015850:	f013 0f01 	tst.w	r3, #1
 8015854:	bf08      	it	eq
 8015856:	2400      	moveq	r4, #0
    uint32_t old_size = lv_mem_get_size(data_p);
 8015858:	4620      	mov	r0, r4
 801585a:	f7ff ffbb 	bl	80157d4 <lv_mem_get_size>
    if(old_size == new_size) return data_p; /*Also avoid reallocating the same memory*/
 801585e:	42a8      	cmp	r0, r5
    uint32_t old_size = lv_mem_get_size(data_p);
 8015860:	4607      	mov	r7, r0
    if(old_size == new_size) return data_p; /*Also avoid reallocating the same memory*/
 8015862:	d004      	beq.n	801586e <lv_mem_realloc+0x2a>
    if(new_size < old_size) {
 8015864:	d905      	bls.n	8015872 <lv_mem_realloc+0x2e>
        ent_trunc(e, new_size);
 8015866:	4629      	mov	r1, r5
 8015868:	1f20      	subs	r0, r4, #4
 801586a:	f7ff ff57 	bl	801571c <ent_trunc>
 801586e:	4626      	mov	r6, r4
 8015870:	e010      	b.n	8015894 <lv_mem_realloc+0x50>
    new_p = lv_mem_alloc(new_size);
 8015872:	4628      	mov	r0, r5
 8015874:	f7ff ff86 	bl	8015784 <lv_mem_alloc>
    if(new_p != NULL && data_p != NULL) {
 8015878:	4606      	mov	r6, r0
 801587a:	b158      	cbz	r0, 8015894 <lv_mem_realloc+0x50>
 801587c:	b154      	cbz	r4, 8015894 <lv_mem_realloc+0x50>
        if(old_size != 0) {
 801587e:	b14f      	cbz	r7, 8015894 <lv_mem_realloc+0x50>
            memcpy(new_p, data_p, LV_MATH_MIN(new_size, old_size));
 8015880:	42af      	cmp	r7, r5
 8015882:	463a      	mov	r2, r7
 8015884:	4621      	mov	r1, r4
 8015886:	bf28      	it	cs
 8015888:	462a      	movcs	r2, r5
 801588a:	f005 fa95 	bl	801adb8 <memcpy>
            lv_mem_free(data_p);
 801588e:	4620      	mov	r0, r4
 8015890:	f7ff ffae 	bl	80157f0 <lv_mem_free>
}
 8015894:	4630      	mov	r0, r6
 8015896:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08015898 <lv_task_core_init>:

/**
 * Init the lv_task module
 */
void lv_task_core_init(void)
{
 8015898:	b508      	push	{r3, lr}
    lv_ll_init(&LV_GC_ROOT(_lv_task_ll), sizeof(lv_task_t));
 801589a:	2114      	movs	r1, #20
 801589c:	4803      	ldr	r0, [pc, #12]	; (80158ac <lv_task_core_init+0x14>)
 801589e:	f7ff fde3 	bl	8015468 <lv_ll_init>
 * Enable or disable the whole lv_task handling
 * @param en: true: lv_task handling is running, false: lv_task handling is suspended
 */
void lv_task_enable(bool en)
{
    lv_task_run = en;
 80158a2:	4b03      	ldr	r3, [pc, #12]	; (80158b0 <lv_task_core_init+0x18>)
 80158a4:	2201      	movs	r2, #1
 80158a6:	701a      	strb	r2, [r3, #0]
 80158a8:	bd08      	pop	{r3, pc}
 80158aa:	bf00      	nop
 80158ac:	2000c7d4 	.word	0x2000c7d4
 80158b0:	2000b220 	.word	0x2000b220

080158b4 <lv_task_create_basic>:
{
 80158b4:	b538      	push	{r3, r4, r5, lr}
    tmp = lv_ll_get_head(&LV_GC_ROOT(_lv_task_ll));
 80158b6:	481c      	ldr	r0, [pc, #112]	; (8015928 <lv_task_create_basic+0x74>)
 80158b8:	f7ff fe1c 	bl	80154f4 <lv_ll_get_head>
    if(NULL == tmp) {
 80158bc:	4601      	mov	r1, r0
 80158be:	b928      	cbnz	r0, 80158cc <lv_task_create_basic+0x18>
        new_task = lv_ll_ins_head(&LV_GC_ROOT(_lv_task_ll));
 80158c0:	4819      	ldr	r0, [pc, #100]	; (8015928 <lv_task_create_basic+0x74>)
 80158c2:	f7ff fddb 	bl	801547c <lv_ll_ins_head>
        lv_mem_assert(new_task);
 80158c6:	4604      	mov	r4, r0
 80158c8:	b9b8      	cbnz	r0, 80158fa <lv_task_create_basic+0x46>
 80158ca:	e7fe      	b.n	80158ca <lv_task_create_basic+0x16>
            tmp = lv_ll_get_next(&LV_GC_ROOT(_lv_task_ll), tmp);
 80158cc:	4c16      	ldr	r4, [pc, #88]	; (8015928 <lv_task_create_basic+0x74>)
            if(tmp->prio <= DEF_PRIO) {
 80158ce:	7c0b      	ldrb	r3, [r1, #16]
 80158d0:	f003 0307 	and.w	r3, r3, #7
 80158d4:	2b03      	cmp	r3, #3
 80158d6:	dc05      	bgt.n	80158e4 <lv_task_create_basic+0x30>
                new_task = lv_ll_ins_prev(&LV_GC_ROOT(_lv_task_ll), tmp);
 80158d8:	4813      	ldr	r0, [pc, #76]	; (8015928 <lv_task_create_basic+0x74>)
 80158da:	f7ff fe1a 	bl	8015512 <lv_ll_ins_prev>
                lv_mem_assert(new_task);
 80158de:	4604      	mov	r4, r0
 80158e0:	b958      	cbnz	r0, 80158fa <lv_task_create_basic+0x46>
 80158e2:	e7fe      	b.n	80158e2 <lv_task_create_basic+0x2e>
            tmp = lv_ll_get_next(&LV_GC_ROOT(_lv_task_ll), tmp);
 80158e4:	4620      	mov	r0, r4
 80158e6:	f7ff fe0b 	bl	8015500 <lv_ll_get_next>
        } while(tmp != NULL);
 80158ea:	4601      	mov	r1, r0
 80158ec:	2800      	cmp	r0, #0
 80158ee:	d1ee      	bne.n	80158ce <lv_task_create_basic+0x1a>
            new_task = lv_ll_ins_tail(&LV_GC_ROOT(_lv_task_ll));
 80158f0:	480d      	ldr	r0, [pc, #52]	; (8015928 <lv_task_create_basic+0x74>)
 80158f2:	f7ff fde1 	bl	80154b8 <lv_ll_ins_tail>
            lv_mem_assert(new_task);
 80158f6:	4604      	mov	r4, r0
 80158f8:	b1a0      	cbz	r0, 8015924 <lv_task_create_basic+0x70>
    new_task->period  = DEF_PERIOD;
 80158fa:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80158fe:	6023      	str	r3, [r4, #0]
    new_task->prio    = DEF_PRIO;
 8015900:	7c23      	ldrb	r3, [r4, #16]
 8015902:	2203      	movs	r2, #3
    new_task->task_cb = NULL;
 8015904:	2500      	movs	r5, #0
    new_task->prio    = DEF_PRIO;
 8015906:	f362 0302 	bfi	r3, r2, #0, #3
    new_task->once     = 0;
 801590a:	f365 03c3 	bfi	r3, r5, #3, #1
 801590e:	7423      	strb	r3, [r4, #16]
    new_task->task_cb = NULL;
 8015910:	60a5      	str	r5, [r4, #8]
    new_task->last_run = lv_tick_get();
 8015912:	f7ff fb6f 	bl	8014ff4 <lv_tick_get>
    task_created = true;
 8015916:	4b05      	ldr	r3, [pc, #20]	; (801592c <lv_task_create_basic+0x78>)
    new_task->last_run = lv_tick_get();
 8015918:	6060      	str	r0, [r4, #4]
    task_created = true;
 801591a:	2201      	movs	r2, #1
    new_task->user_data = NULL;
 801591c:	60e5      	str	r5, [r4, #12]
    task_created = true;
 801591e:	701a      	strb	r2, [r3, #0]
}
 8015920:	4620      	mov	r0, r4
 8015922:	bd38      	pop	{r3, r4, r5, pc}
 8015924:	e7fe      	b.n	8015924 <lv_task_create_basic+0x70>
 8015926:	bf00      	nop
 8015928:	2000c7d4 	.word	0x2000c7d4
 801592c:	2000b221 	.word	0x2000b221

08015930 <lv_task_del>:
{
 8015930:	b510      	push	{r4, lr}
    lv_ll_rem(&LV_GC_ROOT(_lv_task_ll), task);
 8015932:	4601      	mov	r1, r0
{
 8015934:	4604      	mov	r4, r0
    lv_ll_rem(&LV_GC_ROOT(_lv_task_ll), task);
 8015936:	4807      	ldr	r0, [pc, #28]	; (8015954 <lv_task_del+0x24>)
 8015938:	f7ff fe1b 	bl	8015572 <lv_ll_rem>
    lv_mem_free(task);
 801593c:	4620      	mov	r0, r4
 801593e:	f7ff ff57 	bl	80157f0 <lv_mem_free>
    if(LV_GC_ROOT(_lv_task_act) == task) task_deleted = true; /*The active task was deleted*/
 8015942:	4b05      	ldr	r3, [pc, #20]	; (8015958 <lv_task_del+0x28>)
 8015944:	681b      	ldr	r3, [r3, #0]
 8015946:	429c      	cmp	r4, r3
 8015948:	bf02      	ittt	eq
 801594a:	4b04      	ldreq	r3, [pc, #16]	; (801595c <lv_task_del+0x2c>)
 801594c:	2201      	moveq	r2, #1
 801594e:	701a      	strbeq	r2, [r3, #0]
 8015950:	bd10      	pop	{r4, pc}
 8015952:	bf00      	nop
 8015954:	2000c7d4 	.word	0x2000c7d4
 8015958:	2000c814 	.word	0x2000c814
 801595c:	2000b222 	.word	0x2000b222

08015960 <lv_task_exec>:
 * Execute task if its the priority is appropriate
 * @param task pointer to lv_task
 * @return true: execute, false: not executed
 */
static bool lv_task_exec(lv_task_t * task)
{
 8015960:	b538      	push	{r3, r4, r5, lr}
 8015962:	4604      	mov	r4, r0
    bool exec = false;

    /*Execute if at least 'period' time elapsed*/
    uint32_t elp = lv_tick_elaps(task->last_run);
 8015964:	6840      	ldr	r0, [r0, #4]
 8015966:	f7ff fb53 	bl	8015010 <lv_tick_elaps>
    if(elp >= task->period) {
 801596a:	6823      	ldr	r3, [r4, #0]
 801596c:	4298      	cmp	r0, r3
 801596e:	d315      	bcc.n	801599c <lv_task_exec+0x3c>
        task->last_run = lv_tick_get();
 8015970:	f7ff fb40 	bl	8014ff4 <lv_tick_get>
        task_deleted   = false;
 8015974:	4d0a      	ldr	r5, [pc, #40]	; (80159a0 <lv_task_exec+0x40>)
        task_created   = false;
 8015976:	490b      	ldr	r1, [pc, #44]	; (80159a4 <lv_task_exec+0x44>)
        task->last_run = lv_tick_get();
 8015978:	6060      	str	r0, [r4, #4]
        task_deleted   = false;
 801597a:	2200      	movs	r2, #0
 801597c:	702a      	strb	r2, [r5, #0]
        task_created   = false;
 801597e:	700a      	strb	r2, [r1, #0]
        if(task->task_cb) task->task_cb(task);
 8015980:	68a2      	ldr	r2, [r4, #8]
 8015982:	b10a      	cbz	r2, 8015988 <lv_task_exec+0x28>
 8015984:	4620      	mov	r0, r4
 8015986:	4790      	blx	r2

        /*Delete if it was a one shot lv_task*/
        if(task_deleted == false) { /*The task might be deleted by itself as well*/
 8015988:	7828      	ldrb	r0, [r5, #0]
 801598a:	b930      	cbnz	r0, 801599a <lv_task_exec+0x3a>
            if(task->once != 0) {
 801598c:	7c23      	ldrb	r3, [r4, #16]
 801598e:	071b      	lsls	r3, r3, #28
 8015990:	d502      	bpl.n	8015998 <lv_task_exec+0x38>
                lv_task_del(task);
 8015992:	4620      	mov	r0, r4
 8015994:	f7ff ffcc 	bl	8015930 <lv_task_del>
            }
        }
        exec = true;
 8015998:	2001      	movs	r0, #1
    }

    return exec;
}
 801599a:	bd38      	pop	{r3, r4, r5, pc}
    bool exec = false;
 801599c:	2000      	movs	r0, #0
 801599e:	bd38      	pop	{r3, r4, r5, pc}
 80159a0:	2000b222 	.word	0x2000b222
 80159a4:	2000b221 	.word	0x2000b221

080159a8 <lv_task_handler>:
{
 80159a8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    if(task_handler_mutex) return;
 80159ac:	4d3a      	ldr	r5, [pc, #232]	; (8015a98 <lv_task_handler+0xf0>)
 80159ae:	782c      	ldrb	r4, [r5, #0]
 80159b0:	b934      	cbnz	r4, 80159c0 <lv_task_handler+0x18>
    task_handler_mutex = true;
 80159b2:	2301      	movs	r3, #1
 80159b4:	702b      	strb	r3, [r5, #0]
    if(lv_task_run == false) {
 80159b6:	4b39      	ldr	r3, [pc, #228]	; (8015a9c <lv_task_handler+0xf4>)
 80159b8:	781b      	ldrb	r3, [r3, #0]
 80159ba:	b923      	cbnz	r3, 80159c6 <lv_task_handler+0x1e>
        task_handler_mutex = false; /*Release mutex*/
 80159bc:	2300      	movs	r3, #0
 80159be:	702b      	strb	r3, [r5, #0]
}
 80159c0:	b003      	add	sp, #12
 80159c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    handler_start = lv_tick_get();
 80159c6:	f7ff fb15 	bl	8014ff4 <lv_tick_get>
 80159ca:	4b35      	ldr	r3, [pc, #212]	; (8015aa0 <lv_task_handler+0xf8>)
        task_deleted             = false;
 80159cc:	f8df 80ec 	ldr.w	r8, [pc, #236]	; 8015abc <lv_task_handler+0x114>
    handler_start = lv_tick_get();
 80159d0:	6018      	str	r0, [r3, #0]
 80159d2:	469b      	mov	fp, r3
        task_deleted             = false;
 80159d4:	46a1      	mov	r9, r4
        task_created             = false;
 80159d6:	4e33      	ldr	r6, [pc, #204]	; (8015aa4 <lv_task_handler+0xfc>)
        LV_GC_ROOT(_lv_task_act) = lv_ll_get_head(&LV_GC_ROOT(_lv_task_ll));
 80159d8:	4833      	ldr	r0, [pc, #204]	; (8015aa8 <lv_task_handler+0x100>)
        task_created             = false;
 80159da:	f886 9000 	strb.w	r9, [r6]
        task_deleted             = false;
 80159de:	f888 9000 	strb.w	r9, [r8]
        LV_GC_ROOT(_lv_task_act) = lv_ll_get_head(&LV_GC_ROOT(_lv_task_ll));
 80159e2:	f7ff fd87 	bl	80154f4 <lv_ll_get_head>
 80159e6:	4f31      	ldr	r7, [pc, #196]	; (8015aac <lv_task_handler+0x104>)
 80159e8:	9601      	str	r6, [sp, #4]
 80159ea:	6038      	str	r0, [r7, #0]
 80159ec:	463e      	mov	r6, r7
        while(LV_GC_ROOT(_lv_task_act)) {
 80159ee:	6831      	ldr	r1, [r6, #0]
 80159f0:	bb29      	cbnz	r1, 8015a3e <lv_task_handler+0x96>
    busy_time += lv_tick_elaps(handler_start);
 80159f2:	4c2f      	ldr	r4, [pc, #188]	; (8015ab0 <lv_task_handler+0x108>)
 80159f4:	f8db 0000 	ldr.w	r0, [fp]
    uint32_t idle_period_time = lv_tick_elaps(idle_period_start);
 80159f8:	4e2e      	ldr	r6, [pc, #184]	; (8015ab4 <lv_task_handler+0x10c>)
    busy_time += lv_tick_elaps(handler_start);
 80159fa:	f7ff fb09 	bl	8015010 <lv_tick_elaps>
 80159fe:	6823      	ldr	r3, [r4, #0]
 8015a00:	4418      	add	r0, r3
 8015a02:	6020      	str	r0, [r4, #0]
    uint32_t idle_period_time = lv_tick_elaps(idle_period_start);
 8015a04:	6830      	ldr	r0, [r6, #0]
 8015a06:	f7ff fb03 	bl	8015010 <lv_tick_elaps>
    if(idle_period_time >= IDLE_MEAS_PERIOD) {
 8015a0a:	f5b0 7ffa 	cmp.w	r0, #500	; 0x1f4
 8015a0e:	d3d5      	bcc.n	80159bc <lv_task_handler+0x14>
        idle_last         = (uint32_t)((uint32_t)busy_time * 100) / IDLE_MEAS_PERIOD; /*Calculate the busy percentage*/
 8015a10:	6822      	ldr	r2, [r4, #0]
 8015a12:	2364      	movs	r3, #100	; 0x64
 8015a14:	4353      	muls	r3, r2
 8015a16:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8015a1a:	fbb3 f3f2 	udiv	r3, r3, r2
 8015a1e:	b2db      	uxtb	r3, r3
        idle_last         = idle_last > 100 ? 0 : 100 - idle_last;                    /*But we need idle time*/
 8015a20:	2b64      	cmp	r3, #100	; 0x64
 8015a22:	bf98      	it	ls
 8015a24:	f1c3 0364 	rsbls	r3, r3, #100	; 0x64
 8015a28:	4a23      	ldr	r2, [pc, #140]	; (8015ab8 <lv_task_handler+0x110>)
 8015a2a:	bf94      	ite	ls
 8015a2c:	b2db      	uxtbls	r3, r3
 8015a2e:	2300      	movhi	r3, #0
 8015a30:	7013      	strb	r3, [r2, #0]
        busy_time         = 0;
 8015a32:	2300      	movs	r3, #0
 8015a34:	6023      	str	r3, [r4, #0]
        idle_period_start = lv_tick_get();
 8015a36:	f7ff fadd 	bl	8014ff4 <lv_tick_get>
 8015a3a:	6030      	str	r0, [r6, #0]
 8015a3c:	e7be      	b.n	80159bc <lv_task_handler+0x14>
            next = lv_ll_get_next(&LV_GC_ROOT(_lv_task_ll), LV_GC_ROOT(_lv_task_act));
 8015a3e:	481a      	ldr	r0, [pc, #104]	; (8015aa8 <lv_task_handler+0x100>)
 8015a40:	f7ff fd5e 	bl	8015500 <lv_ll_get_next>
 8015a44:	4682      	mov	sl, r0
            if(((lv_task_t *)LV_GC_ROOT(_lv_task_act))->prio == LV_TASK_PRIO_OFF) {
 8015a46:	6830      	ldr	r0, [r6, #0]
 8015a48:	7c03      	ldrb	r3, [r0, #16]
 8015a4a:	f013 0207 	ands.w	r2, r3, #7
 8015a4e:	d0d0      	beq.n	80159f2 <lv_task_handler+0x4a>
            if(LV_GC_ROOT(_lv_task_act) == task_interrupter) {
 8015a50:	4284      	cmp	r4, r0
 8015a52:	d103      	bne.n	8015a5c <lv_task_handler+0xb4>
                LV_GC_ROOT(_lv_task_act) = next;
 8015a54:	f8c6 a000 	str.w	sl, [r6]
                task_interrupter = NULL; /*From this point only task after the interrupter comes, so
 8015a58:	2400      	movs	r4, #0
                continue; /*Load the next task*/
 8015a5a:	e7c8      	b.n	80159ee <lv_task_handler+0x46>
            if(((lv_task_t *)LV_GC_ROOT(_lv_task_act))->prio == LV_TASK_PRIO_HIGHEST) {
 8015a5c:	2a05      	cmp	r2, #5
 8015a5e:	d10c      	bne.n	8015a7a <lv_task_handler+0xd2>
                lv_task_exec(LV_GC_ROOT(_lv_task_act));
 8015a60:	f7ff ff7e 	bl	8015960 <lv_task_exec>
            if(task_deleted) break; /*If a task was deleted then this or the next item might be corrupted*/
 8015a64:	f898 3000 	ldrb.w	r3, [r8]
 8015a68:	2b00      	cmp	r3, #0
 8015a6a:	d1c2      	bne.n	80159f2 <lv_task_handler+0x4a>
            if(task_created) break; /*If a task was created then this or the next item might be corrupted*/
 8015a6c:	9b01      	ldr	r3, [sp, #4]
 8015a6e:	781b      	ldrb	r3, [r3, #0]
 8015a70:	2b00      	cmp	r3, #0
 8015a72:	d1be      	bne.n	80159f2 <lv_task_handler+0x4a>
            LV_GC_ROOT(_lv_task_act) = next; /*Load the next task*/
 8015a74:	f8c6 a000 	str.w	sl, [r6]
 8015a78:	e7b9      	b.n	80159ee <lv_task_handler+0x46>
            else if(task_interrupter) {
 8015a7a:	b134      	cbz	r4, 8015a8a <lv_task_handler+0xe2>
                if(((lv_task_t *)LV_GC_ROOT(_lv_task_act))->prio > task_interrupter->prio) {
 8015a7c:	7c22      	ldrb	r2, [r4, #16]
 8015a7e:	f003 0307 	and.w	r3, r3, #7
 8015a82:	f002 0207 	and.w	r2, r2, #7
 8015a86:	4293      	cmp	r3, r2
 8015a88:	ddec      	ble.n	8015a64 <lv_task_handler+0xbc>
                if(lv_task_exec(LV_GC_ROOT(_lv_task_act))) {
 8015a8a:	f7ff ff69 	bl	8015960 <lv_task_exec>
 8015a8e:	2800      	cmp	r0, #0
 8015a90:	d0e8      	beq.n	8015a64 <lv_task_handler+0xbc>
                    task_interrupter = LV_GC_ROOT(_lv_task_act); /*Check all tasks again from the highest priority */
 8015a92:	683c      	ldr	r4, [r7, #0]
                    break;
 8015a94:	e79f      	b.n	80159d6 <lv_task_handler+0x2e>
 8015a96:	bf00      	nop
 8015a98:	2000b223 	.word	0x2000b223
 8015a9c:	2000b220 	.word	0x2000b220
 8015aa0:	2000b214 	.word	0x2000b214
 8015aa4:	2000b221 	.word	0x2000b221
 8015aa8:	2000c7d4 	.word	0x2000c7d4
 8015aac:	2000c814 	.word	0x2000c814
 8015ab0:	2000b210 	.word	0x2000b210
 8015ab4:	2000b21c 	.word	0x2000b21c
 8015ab8:	2000b218 	.word	0x2000b218
 8015abc:	2000b222 	.word	0x2000b222

08015ac0 <lv_task_set_prio>:
    if(task->prio == prio) return;
 8015ac0:	7c03      	ldrb	r3, [r0, #16]
 8015ac2:	f003 0307 	and.w	r3, r3, #7
 8015ac6:	428b      	cmp	r3, r1
{
 8015ac8:	b570      	push	{r4, r5, r6, lr}
 8015aca:	4604      	mov	r4, r0
 8015acc:	460d      	mov	r5, r1
    if(task->prio == prio) return;
 8015ace:	d01b      	beq.n	8015b08 <lv_task_set_prio+0x48>
    LV_LL_READ(LV_GC_ROOT(_lv_task_ll), i)
 8015ad0:	480e      	ldr	r0, [pc, #56]	; (8015b0c <lv_task_set_prio+0x4c>)
 8015ad2:	4e0e      	ldr	r6, [pc, #56]	; (8015b0c <lv_task_set_prio+0x4c>)
 8015ad4:	f7ff fd0e 	bl	80154f4 <lv_ll_get_head>
 8015ad8:	4602      	mov	r2, r0
 8015ada:	b132      	cbz	r2, 8015aea <lv_task_set_prio+0x2a>
        if(i->prio <= prio) {
 8015adc:	7c13      	ldrb	r3, [r2, #16]
 8015ade:	f003 0307 	and.w	r3, r3, #7
 8015ae2:	429d      	cmp	r5, r3
 8015ae4:	db0a      	blt.n	8015afc <lv_task_set_prio+0x3c>
            if(i != task) lv_ll_move_before(&LV_GC_ROOT(_lv_task_ll), task, i);
 8015ae6:	42a2      	cmp	r2, r4
 8015ae8:	d003      	beq.n	8015af2 <lv_task_set_prio+0x32>
        lv_ll_move_before(&LV_GC_ROOT(_lv_task_ll), task, NULL);
 8015aea:	4621      	mov	r1, r4
 8015aec:	4807      	ldr	r0, [pc, #28]	; (8015b0c <lv_task_set_prio+0x4c>)
 8015aee:	f7ff fdac 	bl	801564a <lv_ll_move_before>
    task->prio = prio;
 8015af2:	7c23      	ldrb	r3, [r4, #16]
 8015af4:	f365 0302 	bfi	r3, r5, #0, #3
 8015af8:	7423      	strb	r3, [r4, #16]
 8015afa:	bd70      	pop	{r4, r5, r6, pc}
    LV_LL_READ(LV_GC_ROOT(_lv_task_ll), i)
 8015afc:	4611      	mov	r1, r2
 8015afe:	4630      	mov	r0, r6
 8015b00:	f7ff fcfe 	bl	8015500 <lv_ll_get_next>
 8015b04:	4602      	mov	r2, r0
 8015b06:	e7e8      	b.n	8015ada <lv_task_set_prio+0x1a>
 8015b08:	bd70      	pop	{r4, r5, r6, pc}
 8015b0a:	bf00      	nop
 8015b0c:	2000c7d4 	.word	0x2000c7d4

08015b10 <lv_task_create>:
{
 8015b10:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015b14:	4680      	mov	r8, r0
 8015b16:	460f      	mov	r7, r1
 8015b18:	4616      	mov	r6, r2
 8015b1a:	461d      	mov	r5, r3
    lv_task_t * new_task = lv_task_create_basic();
 8015b1c:	f7ff feca 	bl	80158b4 <lv_task_create_basic>
    lv_mem_assert(new_task);
 8015b20:	4604      	mov	r4, r0
 8015b22:	b900      	cbnz	r0, 8015b26 <lv_task_create+0x16>
 8015b24:	e7fe      	b.n	8015b24 <lv_task_create+0x14>
    task->task_cb = task_cb;
 8015b26:	f8c0 8008 	str.w	r8, [r0, #8]
    task->period = period;
 8015b2a:	6007      	str	r7, [r0, #0]
    lv_task_set_prio(new_task, prio);
 8015b2c:	4631      	mov	r1, r6
 8015b2e:	f7ff ffc7 	bl	8015ac0 <lv_task_set_prio>
    new_task->user_data = user_data;
 8015b32:	60e5      	str	r5, [r4, #12]
}
 8015b34:	4620      	mov	r0, r4
 8015b36:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08015b3a <lv_task_ready>:
{
 8015b3a:	b510      	push	{r4, lr}
 8015b3c:	4604      	mov	r4, r0
    task->last_run = lv_tick_get() - task->period - 1;
 8015b3e:	f7ff fa59 	bl	8014ff4 <lv_tick_get>
 8015b42:	6823      	ldr	r3, [r4, #0]
 8015b44:	43db      	mvns	r3, r3
 8015b46:	4403      	add	r3, r0
 8015b48:	6063      	str	r3, [r4, #4]
 8015b4a:	bd10      	pop	{r4, pc}

08015b4c <lv_txt_utf8_size>:
 * @param str pointer to a character in a string
 * @return length of the UTF-8 character (1,2,3 or 4). O on invalid code
 */
static uint8_t lv_txt_utf8_size(const char * str)
{
    if((str[0] & 0x80) == 0)
 8015b4c:	7803      	ldrb	r3, [r0, #0]
 8015b4e:	061a      	lsls	r2, r3, #24
 8015b50:	d50e      	bpl.n	8015b70 <lv_txt_utf8_size+0x24>
        return 1;
    else if((str[0] & 0xE0) == 0xC0)
 8015b52:	f003 02e0 	and.w	r2, r3, #224	; 0xe0
 8015b56:	2ac0      	cmp	r2, #192	; 0xc0
 8015b58:	d00c      	beq.n	8015b74 <lv_txt_utf8_size+0x28>
        return 2;
    else if((str[0] & 0xF0) == 0xE0)
 8015b5a:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8015b5e:	2ae0      	cmp	r2, #224	; 0xe0
 8015b60:	d00a      	beq.n	8015b78 <lv_txt_utf8_size+0x2c>
        return 3;
    else if((str[0] & 0xF8) == 0xF0)
 8015b62:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
 8015b66:	2bf0      	cmp	r3, #240	; 0xf0
        return 4;
 8015b68:	bf14      	ite	ne
 8015b6a:	2001      	movne	r0, #1
 8015b6c:	2004      	moveq	r0, #4
 8015b6e:	4770      	bx	lr
    return 1; /*If the char was invalid step tell it's 1 byte long*/
 8015b70:	2001      	movs	r0, #1
 8015b72:	4770      	bx	lr
        return 2;
 8015b74:	2002      	movs	r0, #2
 8015b76:	4770      	bx	lr
        return 3;
 8015b78:	2003      	movs	r0, #3
}
 8015b7a:	4770      	bx	lr

08015b7c <lv_txt_utf8_next>:
 *          After call it will point to the next UTF-8 char in 'txt'.
 *          NULL to use txt[0] as index
 * @return the decoded Unicode character or 0 on invalid UTF-8 code
 */
static uint32_t lv_txt_utf8_next(const char * txt, uint32_t * i)
{
 8015b7c:	b573      	push	{r0, r1, r4, r5, r6, lr}
     * */

    uint32_t result = 0;

    /*Dummy 'i' pointer is required*/
    uint32_t i_tmp = 0;
 8015b7e:	2300      	movs	r3, #0
 8015b80:	9301      	str	r3, [sp, #4]
    if(i == NULL) i = &i_tmp;
 8015b82:	b901      	cbnz	r1, 8015b86 <lv_txt_utf8_next+0xa>
 8015b84:	a901      	add	r1, sp, #4

    /*Normal ASCII*/
    if((txt[*i] & 0x80) == 0) {
 8015b86:	680a      	ldr	r2, [r1, #0]
 8015b88:	5c83      	ldrb	r3, [r0, r2]
 8015b8a:	f013 0f80 	tst.w	r3, #128	; 0x80
 8015b8e:	f102 0401 	add.w	r4, r2, #1
 8015b92:	d103      	bne.n	8015b9c <lv_txt_utf8_next+0x20>
        result = txt[*i];
 8015b94:	4618      	mov	r0, r3
        (*i)++;
 8015b96:	600c      	str	r4, [r1, #0]
        } else {
            (*i)++; /*Not UTF-8 char. Go the next.*/
        }
    }
    return result;
}
 8015b98:	b002      	add	sp, #8
 8015b9a:	bd70      	pop	{r4, r5, r6, pc}
        if((txt[*i] & 0xE0) == 0xC0) {
 8015b9c:	f003 05e0 	and.w	r5, r3, #224	; 0xe0
 8015ba0:	2dc0      	cmp	r5, #192	; 0xc0
 8015ba2:	d110      	bne.n	8015bc6 <lv_txt_utf8_next+0x4a>
            (*i)++;
 8015ba4:	600c      	str	r4, [r1, #0]
            if((txt[*i] & 0xC0) != 0x80) return 0; /*Invalid UTF-8 code*/
 8015ba6:	5d00      	ldrb	r0, [r0, r4]
 8015ba8:	f000 04c0 	and.w	r4, r0, #192	; 0xc0
 8015bac:	2c80      	cmp	r4, #128	; 0x80
 8015bae:	d001      	beq.n	8015bb4 <lv_txt_utf8_next+0x38>
    uint32_t result = 0;
 8015bb0:	2000      	movs	r0, #0
 8015bb2:	e7f1      	b.n	8015b98 <lv_txt_utf8_next+0x1c>
            result = (uint32_t)(txt[*i] & 0x1F) << 6;
 8015bb4:	019b      	lsls	r3, r3, #6
 8015bb6:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
            result += (txt[*i] & 0x3F);
 8015bba:	f000 003f 	and.w	r0, r0, #63	; 0x3f
 8015bbe:	4418      	add	r0, r3
            (*i)++;
 8015bc0:	3202      	adds	r2, #2
            (*i)++;
 8015bc2:	600a      	str	r2, [r1, #0]
 8015bc4:	e7e8      	b.n	8015b98 <lv_txt_utf8_next+0x1c>
        else if((txt[*i] & 0xF0) == 0xE0) {
 8015bc6:	f003 05f0 	and.w	r5, r3, #240	; 0xf0
 8015bca:	2de0      	cmp	r5, #224	; 0xe0
 8015bcc:	d117      	bne.n	8015bfe <lv_txt_utf8_next+0x82>
            (*i)++;
 8015bce:	600c      	str	r4, [r1, #0]
            if((txt[*i] & 0xC0) != 0x80) return 0; /*Invalid UTF-8 code*/
 8015bd0:	5d04      	ldrb	r4, [r0, r4]
 8015bd2:	f004 05c0 	and.w	r5, r4, #192	; 0xc0
 8015bd6:	2d80      	cmp	r5, #128	; 0x80
 8015bd8:	d1ea      	bne.n	8015bb0 <lv_txt_utf8_next+0x34>
            (*i)++;
 8015bda:	1c95      	adds	r5, r2, #2
 8015bdc:	600d      	str	r5, [r1, #0]
            if((txt[*i] & 0xC0) != 0x80) return 0; /*Invalid UTF-8 code*/
 8015bde:	5d45      	ldrb	r5, [r0, r5]
 8015be0:	f005 00c0 	and.w	r0, r5, #192	; 0xc0
 8015be4:	2880      	cmp	r0, #128	; 0x80
 8015be6:	d1e3      	bne.n	8015bb0 <lv_txt_utf8_next+0x34>
            result = (uint32_t)(txt[*i] & 0x0F) << 12;
 8015be8:	0318      	lsls	r0, r3, #12
 8015bea:	b280      	uxth	r0, r0
            result += (txt[*i] & 0x3F);
 8015bec:	f005 053f 	and.w	r5, r5, #63	; 0x3f
            result += (uint32_t)(txt[*i] & 0x3F) << 6;
 8015bf0:	01a3      	lsls	r3, r4, #6
 8015bf2:	4428      	add	r0, r5
 8015bf4:	f403 637c 	and.w	r3, r3, #4032	; 0xfc0
            result += (txt[*i] & 0x3F);
 8015bf8:	4418      	add	r0, r3
            (*i)++;
 8015bfa:	3203      	adds	r2, #3
 8015bfc:	e7e1      	b.n	8015bc2 <lv_txt_utf8_next+0x46>
        else if((txt[*i] & 0xF8) == 0xF0) {
 8015bfe:	f003 05f8 	and.w	r5, r3, #248	; 0xf8
 8015c02:	2df0      	cmp	r5, #240	; 0xf0
            (*i)++;
 8015c04:	600c      	str	r4, [r1, #0]
        else if((txt[*i] & 0xF8) == 0xF0) {
 8015c06:	d1d3      	bne.n	8015bb0 <lv_txt_utf8_next+0x34>
            if((txt[*i] & 0xC0) != 0x80) return 0; /*Invalid UTF-8 code*/
 8015c08:	5d04      	ldrb	r4, [r0, r4]
 8015c0a:	f004 05c0 	and.w	r5, r4, #192	; 0xc0
 8015c0e:	2d80      	cmp	r5, #128	; 0x80
 8015c10:	d1ce      	bne.n	8015bb0 <lv_txt_utf8_next+0x34>
            (*i)++;
 8015c12:	1c95      	adds	r5, r2, #2
 8015c14:	600d      	str	r5, [r1, #0]
            if((txt[*i] & 0xC0) != 0x80) return 0; /*Invalid UTF-8 code*/
 8015c16:	5d45      	ldrb	r5, [r0, r5]
 8015c18:	f005 06c0 	and.w	r6, r5, #192	; 0xc0
 8015c1c:	2e80      	cmp	r6, #128	; 0x80
 8015c1e:	d1c7      	bne.n	8015bb0 <lv_txt_utf8_next+0x34>
            (*i)++;
 8015c20:	1cd6      	adds	r6, r2, #3
 8015c22:	600e      	str	r6, [r1, #0]
            if((txt[*i] & 0xC0) != 0x80) return 0; /*Invalid UTF-8 code*/
 8015c24:	5d86      	ldrb	r6, [r0, r6]
 8015c26:	f006 00c0 	and.w	r0, r6, #192	; 0xc0
 8015c2a:	2880      	cmp	r0, #128	; 0x80
 8015c2c:	d1c0      	bne.n	8015bb0 <lv_txt_utf8_next+0x34>
            result = (uint32_t)(txt[*i] & 0x07) << 18;
 8015c2e:	049b      	lsls	r3, r3, #18
            result += (uint32_t)(txt[*i] & 0x3F) << 12;
 8015c30:	0320      	lsls	r0, r4, #12
 8015c32:	f400 307c 	and.w	r0, r0, #258048	; 0x3f000
            result = (uint32_t)(txt[*i] & 0x07) << 18;
 8015c36:	f403 13e0 	and.w	r3, r3, #1835008	; 0x1c0000
            result += (uint32_t)(txt[*i] & 0x3F) << 12;
 8015c3a:	4303      	orrs	r3, r0
            result += (uint32_t)(txt[*i] & 0x3F) << 6;
 8015c3c:	01a8      	lsls	r0, r5, #6
 8015c3e:	f400 607c 	and.w	r0, r0, #4032	; 0xfc0
            result += txt[*i] & 0x3F;
 8015c42:	f006 063f 	and.w	r6, r6, #63	; 0x3f
 8015c46:	4430      	add	r0, r6
 8015c48:	4418      	add	r0, r3
            (*i)++;
 8015c4a:	3204      	adds	r2, #4
 8015c4c:	e7b9      	b.n	8015bc2 <lv_txt_utf8_next+0x46>
	...

08015c50 <lv_txt_utf8_get_byte_id>:
 * @param txt a '\0' terminated UTF-8 string
 * @param utf8_id character index
 * @return byte index of the 'utf8_id'th letter
 */
static uint32_t lv_txt_utf8_get_byte_id(const char * txt, uint32_t utf8_id)
{
 8015c50:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    uint32_t i;
    uint32_t byte_cnt = 0;
 8015c54:	2400      	movs	r4, #0
    for(i = 0; i < utf8_id; i++) {
        byte_cnt += lv_txt_encoded_size(&txt[byte_cnt]);
 8015c56:	f8df 8020 	ldr.w	r8, [pc, #32]	; 8015c78 <lv_txt_utf8_get_byte_id+0x28>
{
 8015c5a:	4607      	mov	r7, r0
 8015c5c:	460e      	mov	r6, r1
    for(i = 0; i < utf8_id; i++) {
 8015c5e:	4625      	mov	r5, r4
 8015c60:	42b5      	cmp	r5, r6
 8015c62:	d102      	bne.n	8015c6a <lv_txt_utf8_get_byte_id+0x1a>
    }

    return byte_cnt;
}
 8015c64:	4620      	mov	r0, r4
 8015c66:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        byte_cnt += lv_txt_encoded_size(&txt[byte_cnt]);
 8015c6a:	1938      	adds	r0, r7, r4
 8015c6c:	f8d8 3000 	ldr.w	r3, [r8]
 8015c70:	4798      	blx	r3
    for(i = 0; i < utf8_id; i++) {
 8015c72:	3501      	adds	r5, #1
        byte_cnt += lv_txt_encoded_size(&txt[byte_cnt]);
 8015c74:	4404      	add	r4, r0
 8015c76:	e7f3      	b.n	8015c60 <lv_txt_utf8_get_byte_id+0x10>
 8015c78:	20001d24 	.word	0x20001d24

08015c7c <lv_txt_utf8_get_char_id>:
 * @param txt a '\0' terminated UTF-8 string
 * @param byte_id byte index
 * @return character index of the letter at 'byte_id'th position
 */
static uint32_t lv_txt_utf8_get_char_id(const char * txt, uint32_t byte_id)
{
 8015c7c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    uint32_t i        = 0;
 8015c80:	ad02      	add	r5, sp, #8
 8015c82:	2400      	movs	r4, #0
 8015c84:	f845 4d04 	str.w	r4, [r5, #-4]!
    uint32_t char_cnt = 0;

    while(i < byte_id) {
        lv_txt_encoded_next(txt, &i); /*'i' points to the next letter so use the prev. value*/
 8015c88:	f8df 8020 	ldr.w	r8, [pc, #32]	; 8015cac <lv_txt_utf8_get_char_id+0x30>
{
 8015c8c:	4607      	mov	r7, r0
 8015c8e:	460e      	mov	r6, r1
    while(i < byte_id) {
 8015c90:	9b01      	ldr	r3, [sp, #4]
 8015c92:	42b3      	cmp	r3, r6
 8015c94:	d303      	bcc.n	8015c9e <lv_txt_utf8_get_char_id+0x22>
        char_cnt++;
    }

    return char_cnt;
}
 8015c96:	4620      	mov	r0, r4
 8015c98:	b002      	add	sp, #8
 8015c9a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        lv_txt_encoded_next(txt, &i); /*'i' points to the next letter so use the prev. value*/
 8015c9e:	4629      	mov	r1, r5
 8015ca0:	4638      	mov	r0, r7
 8015ca2:	f8d8 3000 	ldr.w	r3, [r8]
 8015ca6:	4798      	blx	r3
        char_cnt++;
 8015ca8:	3401      	adds	r4, #1
 8015caa:	e7f1      	b.n	8015c90 <lv_txt_utf8_get_char_id+0x14>
 8015cac:	20001d1c 	.word	0x20001d1c

08015cb0 <lv_txt_utf8_get_length>:
 * E.g.: "ÁBC" is 3 characters (but 4 bytes)
 * @param txt a '\0' terminated char string
 * @return number of characters
 */
static uint32_t lv_txt_utf8_get_length(const char * txt)
{
 8015cb0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    uint32_t len = 0;
    uint32_t i   = 0;
 8015cb2:	ad02      	add	r5, sp, #8
 8015cb4:	2400      	movs	r4, #0
 8015cb6:	f845 4d04 	str.w	r4, [r5, #-4]!

    while(txt[i] != '\0') {
        lv_txt_encoded_next(txt, &i);
 8015cba:	4f07      	ldr	r7, [pc, #28]	; (8015cd8 <lv_txt_utf8_get_length+0x28>)
{
 8015cbc:	4606      	mov	r6, r0
    while(txt[i] != '\0') {
 8015cbe:	9b01      	ldr	r3, [sp, #4]
 8015cc0:	5cf3      	ldrb	r3, [r6, r3]
 8015cc2:	b913      	cbnz	r3, 8015cca <lv_txt_utf8_get_length+0x1a>
        len++;
    }

    return len;
}
 8015cc4:	4620      	mov	r0, r4
 8015cc6:	b003      	add	sp, #12
 8015cc8:	bdf0      	pop	{r4, r5, r6, r7, pc}
        lv_txt_encoded_next(txt, &i);
 8015cca:	4629      	mov	r1, r5
 8015ccc:	4630      	mov	r0, r6
 8015cce:	683b      	ldr	r3, [r7, #0]
 8015cd0:	4798      	blx	r3
        len++;
 8015cd2:	3401      	adds	r4, #1
 8015cd4:	e7f3      	b.n	8015cbe <lv_txt_utf8_get_length+0xe>
 8015cd6:	bf00      	nop
 8015cd8:	20001d1c 	.word	0x20001d1c

08015cdc <lv_txt_utf8_prev>:
    (*i)--;
 8015cdc:	680b      	ldr	r3, [r1, #0]
{
 8015cde:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    (*i)--;
 8015ce0:	3b01      	subs	r3, #1
        c_size = lv_txt_encoded_size(&txt[*i]);
 8015ce2:	4f0e      	ldr	r7, [pc, #56]	; (8015d1c <lv_txt_utf8_prev+0x40>)
    (*i)--;
 8015ce4:	600b      	str	r3, [r1, #0]
{
 8015ce6:	4606      	mov	r6, r0
 8015ce8:	460d      	mov	r5, r1
    (*i)--;
 8015cea:	2404      	movs	r4, #4
        c_size = lv_txt_encoded_size(&txt[*i]);
 8015cec:	6828      	ldr	r0, [r5, #0]
 8015cee:	683b      	ldr	r3, [r7, #0]
 8015cf0:	4430      	add	r0, r6
 8015cf2:	4798      	blx	r3
 8015cf4:	682b      	ldr	r3, [r5, #0]
        if(c_size == 0) {
 8015cf6:	b948      	cbnz	r0, 8015d0c <lv_txt_utf8_prev+0x30>
            if(*i != 0)
 8015cf8:	b12b      	cbz	r3, 8015d06 <lv_txt_utf8_prev+0x2a>
 8015cfa:	3c01      	subs	r4, #1
                (*i)--;
 8015cfc:	3b01      	subs	r3, #1
        if(cnt >= 4) return 0; /*No UTF-8 char found before the initial*/
 8015cfe:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
                (*i)--;
 8015d02:	602b      	str	r3, [r5, #0]
        if(cnt >= 4) return 0; /*No UTF-8 char found before the initial*/
 8015d04:	d1f2      	bne.n	8015cec <lv_txt_utf8_prev+0x10>
 8015d06:	2000      	movs	r0, #0
}
 8015d08:	b003      	add	sp, #12
 8015d0a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    uint32_t i_tmp  = *i;
 8015d0c:	a902      	add	r1, sp, #8
    uint32_t letter = lv_txt_encoded_next(txt, &i_tmp); /*Character found, get it*/
 8015d0e:	4630      	mov	r0, r6
    uint32_t i_tmp  = *i;
 8015d10:	f841 3d04 	str.w	r3, [r1, #-4]!
    uint32_t letter = lv_txt_encoded_next(txt, &i_tmp); /*Character found, get it*/
 8015d14:	4b02      	ldr	r3, [pc, #8]	; (8015d20 <lv_txt_utf8_prev+0x44>)
 8015d16:	681b      	ldr	r3, [r3, #0]
 8015d18:	4798      	blx	r3
 8015d1a:	e7f5      	b.n	8015d08 <lv_txt_utf8_prev+0x2c>
 8015d1c:	20001d24 	.word	0x20001d24
 8015d20:	20001d1c 	.word	0x20001d1c

08015d24 <lv_txt_is_cmd>:
    if(c == (uint32_t)LV_TXT_COLOR_CMD[0]) {
 8015d24:	2923      	cmp	r1, #35	; 0x23
{
 8015d26:	4602      	mov	r2, r0
    if(c == (uint32_t)LV_TXT_COLOR_CMD[0]) {
 8015d28:	d117      	bne.n	8015d5a <lv_txt_is_cmd+0x36>
        if(*state == LV_TXT_CMD_STATE_WAIT) { /*Start char*/
 8015d2a:	7803      	ldrb	r3, [r0, #0]
 8015d2c:	b91b      	cbnz	r3, 8015d36 <lv_txt_is_cmd+0x12>
            *state = LV_TXT_CMD_STATE_PAR;
 8015d2e:	2301      	movs	r3, #1
 8015d30:	7003      	strb	r3, [r0, #0]
            ret    = true;
 8015d32:	2001      	movs	r0, #1
 8015d34:	e004      	b.n	8015d40 <lv_txt_is_cmd+0x1c>
        else if(*state == LV_TXT_CMD_STATE_PAR) {
 8015d36:	2b01      	cmp	r3, #1
 8015d38:	f04f 0000 	mov.w	r0, #0
 8015d3c:	d109      	bne.n	8015d52 <lv_txt_is_cmd+0x2e>
            *state = LV_TXT_CMD_STATE_WAIT;
 8015d3e:	7010      	strb	r0, [r2, #0]
    if(*state == LV_TXT_CMD_STATE_PAR) {
 8015d40:	7813      	ldrb	r3, [r2, #0]
 8015d42:	2b01      	cmp	r3, #1
 8015d44:	d104      	bne.n	8015d50 <lv_txt_is_cmd+0x2c>
        if(c == ' ') {
 8015d46:	2920      	cmp	r1, #32
            *state = LV_TXT_CMD_STATE_IN; /*After the parameter the text is in the command*/
 8015d48:	bf04      	itt	eq
 8015d4a:	2102      	moveq	r1, #2
 8015d4c:	7011      	strbeq	r1, [r2, #0]
        ret = true;
 8015d4e:	4618      	mov	r0, r3
}
 8015d50:	4770      	bx	lr
        else if(*state == LV_TXT_CMD_STATE_IN) {
 8015d52:	2b02      	cmp	r3, #2
 8015d54:	d1f4      	bne.n	8015d40 <lv_txt_is_cmd+0x1c>
            *state = LV_TXT_CMD_STATE_WAIT;
 8015d56:	7010      	strb	r0, [r2, #0]
 8015d58:	e7eb      	b.n	8015d32 <lv_txt_is_cmd+0xe>
    bool ret = false;
 8015d5a:	2000      	movs	r0, #0
 8015d5c:	e7f0      	b.n	8015d40 <lv_txt_is_cmd+0x1c>
	...

08015d60 <lv_txt_get_next_line>:
{
 8015d60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015d64:	b087      	sub	sp, #28
 8015d66:	460c      	mov	r4, r1
 8015d68:	9200      	str	r2, [sp, #0]
 8015d6a:	469a      	mov	sl, r3
 8015d6c:	f89d b040 	ldrb.w	fp, [sp, #64]	; 0x40
    if(txt == NULL) return 0;
 8015d70:	4607      	mov	r7, r0
 8015d72:	2800      	cmp	r0, #0
 8015d74:	d072      	beq.n	8015e5c <lv_txt_get_next_line+0xfc>
    if(font == NULL) return 0;
 8015d76:	2900      	cmp	r1, #0
 8015d78:	d071      	beq.n	8015e5e <lv_txt_get_next_line+0xfe>
    letter_next = lv_txt_encoded_next(txt, &i_next);
 8015d7a:	f8df 80f0 	ldr.w	r8, [pc, #240]	; 8015e6c <lv_txt_get_next_line+0x10c>
    uint32_t i                   = 0;
 8015d7e:	2500      	movs	r5, #0
    if(flag & LV_TXT_FLAG_EXPAND) max_width = LV_COORD_MAX;
 8015d80:	f01b 0f02 	tst.w	fp, #2
 8015d84:	f647 4218 	movw	r2, #31768	; 0x7c18
 8015d88:	bf18      	it	ne
 8015d8a:	4692      	movne	sl, r2
    uint32_t i                   = 0;
 8015d8c:	9504      	str	r5, [sp, #16]
    uint32_t i_next              = 0;
 8015d8e:	9505      	str	r5, [sp, #20]
    lv_txt_cmd_state_t cmd_state = LV_TXT_CMD_STATE_WAIT;
 8015d90:	f88d 500f 	strb.w	r5, [sp, #15]
    letter_next = lv_txt_encoded_next(txt, &i_next);
 8015d94:	f8d8 2000 	ldr.w	r2, [r8]
 8015d98:	a905      	add	r1, sp, #20
 8015d9a:	4790      	blx	r2
        if((flag & LV_TXT_FLAG_RECOLOR) != 0) {
 8015d9c:	f00b 0301 	and.w	r3, fp, #1
    letter_next = lv_txt_encoded_next(txt, &i_next);
 8015da0:	4606      	mov	r6, r0
    uint32_t last_break          = NO_BREAK_FOUND;
 8015da2:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
        if((flag & LV_TXT_FLAG_RECOLOR) != 0) {
 8015da6:	9301      	str	r3, [sp, #4]
    while(txt[i] != '\0') {
 8015da8:	9804      	ldr	r0, [sp, #16]
 8015daa:	5c3b      	ldrb	r3, [r7, r0]
 8015dac:	b90b      	cbnz	r3, 8015db2 <lv_txt_get_next_line+0x52>
    return i;
 8015dae:	b280      	uxth	r0, r0
 8015db0:	e01e      	b.n	8015df0 <lv_txt_get_next_line+0x90>
        i           = i_next;
 8015db2:	9b05      	ldr	r3, [sp, #20]
 8015db4:	9304      	str	r3, [sp, #16]
        letter_next = lv_txt_encoded_next(txt, &i_next);
 8015db6:	a905      	add	r1, sp, #20
 8015db8:	f8d8 3000 	ldr.w	r3, [r8]
 8015dbc:	4638      	mov	r0, r7
 8015dbe:	4798      	blx	r3
        if((flag & LV_TXT_FLAG_RECOLOR) != 0) {
 8015dc0:	9b01      	ldr	r3, [sp, #4]
        letter_next = lv_txt_encoded_next(txt, &i_next);
 8015dc2:	4683      	mov	fp, r0
        if((flag & LV_TXT_FLAG_RECOLOR) != 0) {
 8015dc4:	b923      	cbnz	r3, 8015dd0 <lv_txt_get_next_line+0x70>
        if(letter == '\n' || letter == '\r') {
 8015dc6:	2e0a      	cmp	r6, #10
 8015dc8:	d10b      	bne.n	8015de2 <lv_txt_get_next_line+0x82>
                return i;
 8015dca:	f8bd 0010 	ldrh.w	r0, [sp, #16]
 8015dce:	e00f      	b.n	8015df0 <lv_txt_get_next_line+0x90>
            if(lv_txt_is_cmd(&cmd_state, letter) != false) {
 8015dd0:	4631      	mov	r1, r6
 8015dd2:	f10d 000f 	add.w	r0, sp, #15
 8015dd6:	f7ff ffa5 	bl	8015d24 <lv_txt_is_cmd>
 8015dda:	2800      	cmp	r0, #0
 8015ddc:	d0f3      	beq.n	8015dc6 <lv_txt_get_next_line+0x66>
        letter_next = lv_txt_encoded_next(txt, &i_next);
 8015dde:	465e      	mov	r6, fp
 8015de0:	e7e2      	b.n	8015da8 <lv_txt_get_next_line+0x48>
        if(letter == '\n' || letter == '\r') {
 8015de2:	2e0d      	cmp	r6, #13
 8015de4:	d107      	bne.n	8015df6 <lv_txt_get_next_line+0x96>
            if(letter == '\r' && letter_next == '\n')
 8015de6:	f1bb 0f0a 	cmp.w	fp, #10
 8015dea:	d1ee      	bne.n	8015dca <lv_txt_get_next_line+0x6a>
                return i_next;
 8015dec:	f8bd 0014 	ldrh.w	r0, [sp, #20]
}
 8015df0:	b007      	add	sp, #28
 8015df2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            letter_w = lv_font_get_glyph_width(font, letter, letter_next);
 8015df6:	465a      	mov	r2, fp
 8015df8:	4631      	mov	r1, r6
 8015dfa:	4620      	mov	r0, r4
 8015dfc:	f7fe fee2 	bl	8014bc4 <lv_font_get_glyph_width>
            cur_w += letter_w;
 8015e00:	4405      	add	r5, r0
 8015e02:	b2aa      	uxth	r2, r5
 8015e04:	b215      	sxth	r5, r2
            if(cur_w > max_width) {
 8015e06:	45aa      	cmp	sl, r5
 8015e08:	da1a      	bge.n	8015e40 <lv_txt_get_next_line+0xe0>
                if(last_break != NO_BREAK_FOUND) {
 8015e0a:	f1b9 3fff 	cmp.w	r9, #4294967295	; 0xffffffff
 8015e0e:	d00a      	beq.n	8015e26 <lv_txt_get_next_line+0xc6>
                    i = last_break;
 8015e10:	f8cd 9010 	str.w	r9, [sp, #16]
                if(i == 0) lv_txt_encoded_next(txt, &i);
 8015e14:	9b04      	ldr	r3, [sp, #16]
 8015e16:	2b00      	cmp	r3, #0
 8015e18:	d1d7      	bne.n	8015dca <lv_txt_get_next_line+0x6a>
 8015e1a:	f8d8 3000 	ldr.w	r3, [r8]
 8015e1e:	a904      	add	r1, sp, #16
 8015e20:	4638      	mov	r0, r7
 8015e22:	4798      	blx	r3
 8015e24:	e7d1      	b.n	8015dca <lv_txt_get_next_line+0x6a>
                    lv_txt_encoded_prev(txt, &i);
 8015e26:	4b0f      	ldr	r3, [pc, #60]	; (8015e64 <lv_txt_get_next_line+0x104>)
 8015e28:	a904      	add	r1, sp, #16
 8015e2a:	681b      	ldr	r3, [r3, #0]
 8015e2c:	4638      	mov	r0, r7
 8015e2e:	4798      	blx	r3
 8015e30:	e7f0      	b.n	8015e14 <lv_txt_get_next_line+0xb4>
    uint8_t i;
    bool ret = false;

    /*Compare the letter to TXT_BREAK_CHARS*/
    for(i = 0; LV_TXT_BREAK_CHARS[i] != '\0'; i++) {
        if(letter == (uint32_t)LV_TXT_BREAK_CHARS[i]) {
 8015e32:	429e      	cmp	r6, r3
 8015e34:	f101 0101 	add.w	r1, r1, #1
 8015e38:	d103      	bne.n	8015e42 <lv_txt_get_next_line+0xe2>
                last_break = i; /*Save the first char index after break*/
 8015e3a:	f8dd 9010 	ldr.w	r9, [sp, #16]
 8015e3e:	e007      	b.n	8015e50 <lv_txt_get_next_line+0xf0>
 8015e40:	2100      	movs	r1, #0
    for(i = 0; LV_TXT_BREAK_CHARS[i] != '\0'; i++) {
 8015e42:	fa5f fe81 	uxtb.w	lr, r1
 8015e46:	4b08      	ldr	r3, [pc, #32]	; (8015e68 <lv_txt_get_next_line+0x108>)
 8015e48:	f813 300e 	ldrb.w	r3, [r3, lr]
 8015e4c:	2b00      	cmp	r3, #0
 8015e4e:	d1f0      	bne.n	8015e32 <lv_txt_get_next_line+0xd2>
        if(letter_w > 0) {
 8015e50:	2800      	cmp	r0, #0
 8015e52:	d0c4      	beq.n	8015dde <lv_txt_get_next_line+0x7e>
            cur_w += letter_space;
 8015e54:	9b00      	ldr	r3, [sp, #0]
 8015e56:	18d5      	adds	r5, r2, r3
 8015e58:	b22d      	sxth	r5, r5
 8015e5a:	e7c0      	b.n	8015dde <lv_txt_get_next_line+0x7e>
 8015e5c:	e7c8      	b.n	8015df0 <lv_txt_get_next_line+0x90>
    if(txt == NULL) return 0;
 8015e5e:	4608      	mov	r0, r1
 8015e60:	e7c6      	b.n	8015df0 <lv_txt_get_next_line+0x90>
 8015e62:	bf00      	nop
 8015e64:	20001d20 	.word	0x20001d20
 8015e68:	080f4f5a 	.word	0x080f4f5a
 8015e6c:	20001d1c 	.word	0x20001d1c

08015e70 <lv_txt_get_width>:
{
 8015e70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015e74:	4688      	mov	r8, r1
 8015e76:	b085      	sub	sp, #20
 8015e78:	4691      	mov	r9, r2
 8015e7a:	461d      	mov	r5, r3
    if(txt == NULL) return 0;
 8015e7c:	4606      	mov	r6, r0
 8015e7e:	b920      	cbnz	r0, 8015e8a <lv_txt_get_width+0x1a>
 8015e80:	2400      	movs	r4, #0
}
 8015e82:	4620      	mov	r0, r4
 8015e84:	b005      	add	sp, #20
 8015e86:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if(font == NULL) return 0;
 8015e8a:	2a00      	cmp	r2, #0
 8015e8c:	d0f8      	beq.n	8015e80 <lv_txt_get_width+0x10>
    uint32_t i                   = 0;
 8015e8e:	2400      	movs	r4, #0
 8015e90:	9403      	str	r4, [sp, #12]
    lv_txt_cmd_state_t cmd_state = LV_TXT_CMD_STATE_WAIT;
 8015e92:	f88d 400b 	strb.w	r4, [sp, #11]
    if(length != 0) {
 8015e96:	2900      	cmp	r1, #0
 8015e98:	d0f2      	beq.n	8015e80 <lv_txt_get_width+0x10>
            if((flag & LV_TXT_FLAG_RECOLOR) != 0) {
 8015e9a:	f89d 7038 	ldrb.w	r7, [sp, #56]	; 0x38
            letter      = lv_txt_encoded_next(txt, &i);
 8015e9e:	f8df a05c 	ldr.w	sl, [pc, #92]	; 8015efc <lv_txt_get_width+0x8c>
            if((flag & LV_TXT_FLAG_RECOLOR) != 0) {
 8015ea2:	f007 0701 	and.w	r7, r7, #1
        while(i < length) {
 8015ea6:	9b03      	ldr	r3, [sp, #12]
 8015ea8:	4598      	cmp	r8, r3
 8015eaa:	d804      	bhi.n	8015eb6 <lv_txt_get_width+0x46>
        if(width > 0) {
 8015eac:	2c00      	cmp	r4, #0
            width -= letter_space; /*Trim the last letter space. Important if the text is center
 8015eae:	bfc4      	itt	gt
 8015eb0:	1b64      	subgt	r4, r4, r5
 8015eb2:	b224      	sxthgt	r4, r4
 8015eb4:	e7e5      	b.n	8015e82 <lv_txt_get_width+0x12>
            letter      = lv_txt_encoded_next(txt, &i);
 8015eb6:	f8da 3000 	ldr.w	r3, [sl]
 8015eba:	a903      	add	r1, sp, #12
 8015ebc:	4630      	mov	r0, r6
 8015ebe:	4798      	blx	r3
 8015ec0:	4683      	mov	fp, r0
            letter_next = lv_txt_encoded_next(&txt[i], NULL);
 8015ec2:	9803      	ldr	r0, [sp, #12]
 8015ec4:	f8da 3000 	ldr.w	r3, [sl]
 8015ec8:	2100      	movs	r1, #0
 8015eca:	4430      	add	r0, r6
 8015ecc:	4798      	blx	r3
 8015ece:	4602      	mov	r2, r0
            if((flag & LV_TXT_FLAG_RECOLOR) != 0) {
 8015ed0:	b957      	cbnz	r7, 8015ee8 <lv_txt_get_width+0x78>
            lv_coord_t char_width = lv_font_get_glyph_width(font, letter, letter_next);
 8015ed2:	4659      	mov	r1, fp
 8015ed4:	4648      	mov	r0, r9
 8015ed6:	f7fe fe75 	bl	8014bc4 <lv_font_get_glyph_width>
            if(char_width > 0) {
 8015eda:	b203      	sxth	r3, r0
 8015edc:	2b00      	cmp	r3, #0
 8015ede:	dde2      	ble.n	8015ea6 <lv_txt_get_width+0x36>
                width += letter_space;
 8015ee0:	442c      	add	r4, r5
 8015ee2:	4404      	add	r4, r0
 8015ee4:	b224      	sxth	r4, r4
 8015ee6:	e7de      	b.n	8015ea6 <lv_txt_get_width+0x36>
 8015ee8:	9001      	str	r0, [sp, #4]
                if(lv_txt_is_cmd(&cmd_state, letter) != false) {
 8015eea:	4659      	mov	r1, fp
 8015eec:	f10d 000b 	add.w	r0, sp, #11
 8015ef0:	f7ff ff18 	bl	8015d24 <lv_txt_is_cmd>
 8015ef4:	2800      	cmp	r0, #0
 8015ef6:	d1d6      	bne.n	8015ea6 <lv_txt_get_width+0x36>
 8015ef8:	9a01      	ldr	r2, [sp, #4]
 8015efa:	e7ea      	b.n	8015ed2 <lv_txt_get_width+0x62>
 8015efc:	20001d1c 	.word	0x20001d1c

08015f00 <lv_txt_get_size>:
{
 8015f00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015f04:	b087      	sub	sp, #28
    size_res->x = 0;
 8015f06:	2500      	movs	r5, #0
{
 8015f08:	9304      	str	r3, [sp, #16]
 8015f0a:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
 8015f0e:	f9bd b040 	ldrsh.w	fp, [sp, #64]	; 0x40
 8015f12:	f9bd a044 	ldrsh.w	sl, [sp, #68]	; 0x44
 8015f16:	9303      	str	r3, [sp, #12]
 8015f18:	4604      	mov	r4, r0
 8015f1a:	4616      	mov	r6, r2
    size_res->x = 0;
 8015f1c:	8005      	strh	r5, [r0, #0]
    size_res->y = 0;
 8015f1e:	8045      	strh	r5, [r0, #2]
    if(text == NULL) return;
 8015f20:	4689      	mov	r9, r1
 8015f22:	b1f9      	cbz	r1, 8015f64 <lv_txt_get_size+0x64>
    if(font == NULL) return;
 8015f24:	b1f2      	cbz	r2, 8015f64 <lv_txt_get_size+0x64>
 8015f26:	7a17      	ldrb	r7, [r2, #8]
    if(flag & LV_TXT_FLAG_EXPAND) max_width = LV_COORD_MAX;
 8015f28:	f013 0f02 	tst.w	r3, #2
 8015f2c:	f647 4318 	movw	r3, #31768	; 0x7c18
 8015f30:	bf18      	it	ne
 8015f32:	469a      	movne	sl, r3
        size_res->y += line_space;
 8015f34:	eb07 030b 	add.w	r3, r7, fp
 8015f38:	9305      	str	r3, [sp, #20]
    while(text[line_start] != '\0') {
 8015f3a:	f819 3005 	ldrb.w	r3, [r9, r5]
 8015f3e:	eb09 0805 	add.w	r8, r9, r5
 8015f42:	b993      	cbnz	r3, 8015f6a <lv_txt_get_size+0x6a>
    if((line_start != 0) && (text[line_start - 1] == '\n' || text[line_start - 1] == '\r')) {
 8015f44:	b155      	cbz	r5, 8015f5c <lv_txt_get_size+0x5c>
 8015f46:	f818 3c01 	ldrb.w	r3, [r8, #-1]
 8015f4a:	2b0a      	cmp	r3, #10
 8015f4c:	d001      	beq.n	8015f52 <lv_txt_get_size+0x52>
 8015f4e:	2b0d      	cmp	r3, #13
 8015f50:	d104      	bne.n	8015f5c <lv_txt_get_size+0x5c>
        size_res->y += letter_height + line_space;
 8015f52:	8862      	ldrh	r2, [r4, #2]
 8015f54:	eb07 030b 	add.w	r3, r7, fp
 8015f58:	4413      	add	r3, r2
 8015f5a:	8063      	strh	r3, [r4, #2]
    if(size_res->y == 0)
 8015f5c:	f9b4 3002 	ldrsh.w	r3, [r4, #2]
 8015f60:	b9fb      	cbnz	r3, 8015fa2 <lv_txt_get_size+0xa2>
        size_res->y = letter_height;
 8015f62:	8067      	strh	r7, [r4, #2]
}
 8015f64:	b007      	add	sp, #28
 8015f66:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        new_line_start += lv_txt_get_next_line(&text[line_start], font, letter_space, max_width, flag);
 8015f6a:	9b03      	ldr	r3, [sp, #12]
 8015f6c:	9300      	str	r3, [sp, #0]
 8015f6e:	9a04      	ldr	r2, [sp, #16]
 8015f70:	4653      	mov	r3, sl
 8015f72:	4631      	mov	r1, r6
 8015f74:	4640      	mov	r0, r8
 8015f76:	f7ff fef3 	bl	8015d60 <lv_txt_get_next_line>
        size_res->y += line_space;
 8015f7a:	8863      	ldrh	r3, [r4, #2]
 8015f7c:	9a05      	ldr	r2, [sp, #20]
 8015f7e:	4413      	add	r3, r2
 8015f80:	8063      	strh	r3, [r4, #2]
        act_line_length = lv_txt_get_width(&text[line_start], new_line_start - line_start, font, letter_space, flag);
 8015f82:	9b03      	ldr	r3, [sp, #12]
 8015f84:	9300      	str	r3, [sp, #0]
        new_line_start += lv_txt_get_next_line(&text[line_start], font, letter_space, max_width, flag);
 8015f86:	4601      	mov	r1, r0
        act_line_length = lv_txt_get_width(&text[line_start], new_line_start - line_start, font, letter_space, flag);
 8015f88:	9b04      	ldr	r3, [sp, #16]
        new_line_start += lv_txt_get_next_line(&text[line_start], font, letter_space, max_width, flag);
 8015f8a:	4405      	add	r5, r0
        act_line_length = lv_txt_get_width(&text[line_start], new_line_start - line_start, font, letter_space, flag);
 8015f8c:	4632      	mov	r2, r6
 8015f8e:	4640      	mov	r0, r8
 8015f90:	f7ff ff6e 	bl	8015e70 <lv_txt_get_width>
        size_res->x = LV_MATH_MAX(act_line_length, size_res->x);
 8015f94:	f9b4 3000 	ldrsh.w	r3, [r4]
 8015f98:	4298      	cmp	r0, r3
 8015f9a:	bfb8      	it	lt
 8015f9c:	4618      	movlt	r0, r3
 8015f9e:	8020      	strh	r0, [r4, #0]
 8015fa0:	e7cb      	b.n	8015f3a <lv_txt_get_size+0x3a>
        size_res->y -= line_space;
 8015fa2:	eba3 030b 	sub.w	r3, r3, fp
 8015fa6:	8063      	strh	r3, [r4, #2]
 8015fa8:	e7dc      	b.n	8015f64 <lv_txt_get_size+0x64>

08015faa <lv_utils_bsearch>:
 *
 * @return a pointer to a matching item, or NULL if none exists.
 */
void * lv_utils_bsearch(const void * key, const void * base, uint32_t n, uint32_t size,
                        int32_t (*cmp)(const void * pRef, const void * pElement))
{
 8015faa:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8015fae:	9d08      	ldr	r5, [sp, #32]
 8015fb0:	4681      	mov	r9, r0
 8015fb2:	4688      	mov	r8, r1
 8015fb4:	4614      	mov	r4, r2
 8015fb6:	469a      	mov	sl, r3
    const char * middle;
    int32_t c;

    for(middle = base; n != 0;) {
 8015fb8:	b914      	cbnz	r4, 8015fc0 <lv_utils_bsearch+0x16>
            middle = base;
        } else {
            return (char *)middle;
        }
    }
    return NULL;
 8015fba:	4620      	mov	r0, r4
 8015fbc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        middle += (n / 2) * size;
 8015fc0:	0867      	lsrs	r7, r4, #1
 8015fc2:	fb0a 8607 	mla	r6, sl, r7, r8
        if((c = (*cmp)(key, middle)) > 0) {
 8015fc6:	4631      	mov	r1, r6
 8015fc8:	4648      	mov	r0, r9
 8015fca:	47a8      	blx	r5
 8015fcc:	2800      	cmp	r0, #0
 8015fce:	dd07      	ble.n	8015fe0 <lv_utils_bsearch+0x36>
 8015fd0:	43e1      	mvns	r1, r4
 8015fd2:	f001 0101 	and.w	r1, r1, #1
            n    = (n / 2) - ((n & 1) == 0);
 8015fd6:	1a7f      	subs	r7, r7, r1
            base = (middle += size);
 8015fd8:	eb06 080a 	add.w	r8, r6, sl
 8015fdc:	463c      	mov	r4, r7
 8015fde:	e7eb      	b.n	8015fb8 <lv_utils_bsearch+0xe>
        } else if(c < 0) {
 8015fe0:	d1fc      	bne.n	8015fdc <lv_utils_bsearch+0x32>
        middle += (n / 2) * size;
 8015fe2:	4630      	mov	r0, r6
}
 8015fe4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08015fe8 <lv_bar_anim>:
    return res;
}

#if LV_USE_ANIMATION
static void lv_bar_anim(void * bar, lv_anim_value_t value)
{
 8015fe8:	b538      	push	{r3, r4, r5, lr}
 8015fea:	4604      	mov	r4, r0
 8015fec:	460d      	mov	r5, r1
    lv_bar_ext_t * ext = lv_obj_get_ext_attr(bar);
 8015fee:	f7fa fac6 	bl	801057e <lv_obj_get_ext_attr>
    ext->anim_state    = value;
 8015ff2:	8145      	strh	r5, [r0, #10]
    lv_obj_invalidate(bar);
 8015ff4:	4620      	mov	r0, r4
}
 8015ff6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    lv_obj_invalidate(bar);
 8015ffa:	f7f9 bc07 	b.w	800f80c <lv_obj_invalidate>
	...

08016000 <lv_bar_signal>:
{
 8016000:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    res = ancestor_signal(bar, sign, param);
 8016002:	4b13      	ldr	r3, [pc, #76]	; (8016050 <lv_bar_signal+0x50>)
 8016004:	681b      	ldr	r3, [r3, #0]
{
 8016006:	4604      	mov	r4, r0
 8016008:	460f      	mov	r7, r1
 801600a:	4616      	mov	r6, r2
    res = ancestor_signal(bar, sign, param);
 801600c:	4798      	blx	r3
    if(res != LV_RES_OK) return res;
 801600e:	2801      	cmp	r0, #1
    res = ancestor_signal(bar, sign, param);
 8016010:	4605      	mov	r5, r0
    if(res != LV_RES_OK) return res;
 8016012:	d10c      	bne.n	801602e <lv_bar_signal+0x2e>
    if(sign == LV_SIGNAL_REFR_EXT_DRAW_PAD) {
 8016014:	2f05      	cmp	r7, #5
 8016016:	d10c      	bne.n	8016032 <lv_bar_signal+0x32>
    lv_bar_ext_t * ext       = lv_obj_get_ext_attr(bar);
 8016018:	4620      	mov	r0, r4
 801601a:	f7fa fab0 	bl	801057e <lv_obj_get_ext_attr>
        if(style_indic->body.shadow.width > bar->ext_draw_pad) bar->ext_draw_pad = style_indic->body.shadow.width;
 801601e:	6903      	ldr	r3, [r0, #16]
 8016020:	f9b4 2034 	ldrsh.w	r2, [r4, #52]	; 0x34
 8016024:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8016028:	429a      	cmp	r2, r3
 801602a:	da00      	bge.n	801602e <lv_bar_signal+0x2e>
 801602c:	86a3      	strh	r3, [r4, #52]	; 0x34
}
 801602e:	4628      	mov	r0, r5
 8016030:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    } else if(sign == LV_SIGNAL_GET_TYPE) {
 8016032:	2f06      	cmp	r7, #6
 8016034:	d1fb      	bne.n	801602e <lv_bar_signal+0x2e>
 8016036:	2300      	movs	r3, #0
            if(buf->type[i] == NULL) break;
 8016038:	f856 1023 	ldr.w	r1, [r6, r3, lsl #2]
 801603c:	b2da      	uxtb	r2, r3
 801603e:	b119      	cbz	r1, 8016048 <lv_bar_signal+0x48>
 8016040:	3301      	adds	r3, #1
        for(i = 0; i < LV_MAX_ANCESTOR_NUM - 1; i++) { /*Find the last set data*/
 8016042:	2b07      	cmp	r3, #7
 8016044:	d1f8      	bne.n	8016038 <lv_bar_signal+0x38>
 8016046:	461a      	mov	r2, r3
        buf->type[i] = "lv_bar";
 8016048:	4b02      	ldr	r3, [pc, #8]	; (8016054 <lv_bar_signal+0x54>)
 801604a:	f846 3022 	str.w	r3, [r6, r2, lsl #2]
 801604e:	e7ee      	b.n	801602e <lv_bar_signal+0x2e>
 8016050:	2000b228 	.word	0x2000b228
 8016054:	080f4f62 	.word	0x080f4f62

08016058 <lv_bar_set_value>:
{
 8016058:	b5f0      	push	{r4, r5, r6, r7, lr}
 801605a:	b08b      	sub	sp, #44	; 0x2c
 801605c:	460e      	mov	r6, r1
 801605e:	4605      	mov	r5, r0
 8016060:	4617      	mov	r7, r2
    lv_bar_ext_t * ext = lv_obj_get_ext_attr(bar);
 8016062:	f7fa fa8c 	bl	801057e <lv_obj_get_ext_attr>
    if(ext->cur_value == value) return;
 8016066:	f9b0 3000 	ldrsh.w	r3, [r0]
 801606a:	42b3      	cmp	r3, r6
 801606c:	d010      	beq.n	8016090 <lv_bar_set_value+0x38>
    new_value = value > ext->max_value ? ext->max_value : value;
 801606e:	f9b0 4004 	ldrsh.w	r4, [r0, #4]
    new_value = new_value < ext->min_value ? ext->min_value : new_value;
 8016072:	f9b0 1002 	ldrsh.w	r1, [r0, #2]
    new_value = value > ext->max_value ? ext->max_value : value;
 8016076:	42b4      	cmp	r4, r6
 8016078:	bfa8      	it	ge
 801607a:	4634      	movge	r4, r6
    new_value = new_value < ext->min_value ? ext->min_value : new_value;
 801607c:	42a1      	cmp	r1, r4
 801607e:	bfb8      	it	lt
 8016080:	4621      	movlt	r1, r4
    if(ext->cur_value == new_value) return;
 8016082:	428b      	cmp	r3, r1
 8016084:	d004      	beq.n	8016090 <lv_bar_set_value+0x38>
    if(anim == LV_ANIM_OFF) {
 8016086:	b92f      	cbnz	r7, 8016094 <lv_bar_set_value+0x3c>
        ext->cur_value = new_value;
 8016088:	8001      	strh	r1, [r0, #0]
        lv_obj_invalidate(bar);
 801608a:	4628      	mov	r0, r5
 801608c:	f7f9 fbbe 	bl	800f80c <lv_obj_invalidate>
}
 8016090:	b00b      	add	sp, #44	; 0x2c
 8016092:	bdf0      	pop	{r4, r5, r6, r7, pc}
        if(ext->anim_state == LV_BAR_ANIM_STATE_INV) {
 8016094:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
        a.var            = bar;
 8016098:	9500      	str	r5, [sp, #0]
        if(ext->anim_state == LV_BAR_ANIM_STATE_INV) {
 801609a:	3201      	adds	r2, #1
            ext->anim_start = ext->anim_end;
 801609c:	bf18      	it	ne
 801609e:	8903      	ldrhne	r3, [r0, #8]
 80160a0:	80c3      	strh	r3, [r0, #6]
        a.end            = LV_BAR_ANIM_STATE_END;
 80160a2:	f44f 7280 	mov.w	r2, #256	; 0x100
            ext->anim_end   = new_value;
 80160a6:	8101      	strh	r1, [r0, #8]
        a.end            = LV_BAR_ANIM_STATE_END;
 80160a8:	9205      	str	r2, [sp, #20]
        a.exec_cb        = (lv_anim_exec_xcb_t)lv_bar_anim;
 80160aa:	4a0e      	ldr	r2, [pc, #56]	; (80160e4 <lv_bar_set_value+0x8c>)
 80160ac:	9201      	str	r2, [sp, #4]
        a.path_cb        = lv_anim_path_linear;
 80160ae:	4a0e      	ldr	r2, [pc, #56]	; (80160e8 <lv_bar_set_value+0x90>)
 80160b0:	9202      	str	r2, [sp, #8]
        a.ready_cb       = lv_bar_anim_ready;
 80160b2:	4a0e      	ldr	r2, [pc, #56]	; (80160ec <lv_bar_set_value+0x94>)
 80160b4:	9203      	str	r2, [sp, #12]
        a.time           = ext->anim_time;
 80160b6:	8982      	ldrh	r2, [r0, #12]
 80160b8:	f8ad 2018 	strh.w	r2, [sp, #24]
        a.playback       = 0;
 80160bc:	f89d 2024 	ldrb.w	r2, [sp, #36]	; 0x24
        a.start          = LV_BAR_ANIM_STATE_START;
 80160c0:	2300      	movs	r3, #0
        a.repeat         = 0;
 80160c2:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80160c6:	f363 0241 	bfi	r2, r3, #1, #1
        lv_anim_create(&a);
 80160ca:	4668      	mov	r0, sp
        a.start          = LV_BAR_ANIM_STATE_START;
 80160cc:	9304      	str	r3, [sp, #16]
        a.act_time       = 0;
 80160ce:	f8ad 301a 	strh.w	r3, [sp, #26]
        a.playback_pause = 0;
 80160d2:	f8ad 301c 	strh.w	r3, [sp, #28]
        a.repeat         = 0;
 80160d6:	f88d 2024 	strb.w	r2, [sp, #36]	; 0x24
        a.repeat_pause   = 0;
 80160da:	f8ad 301e 	strh.w	r3, [sp, #30]
        lv_anim_create(&a);
 80160de:	f7ff f899 	bl	8015214 <lv_anim_create>
 80160e2:	e7d5      	b.n	8016090 <lv_bar_set_value+0x38>
 80160e4:	08015fe9 	.word	0x08015fe9
 80160e8:	0801501d 	.word	0x0801501d
 80160ec:	080160f1 	.word	0x080160f1

080160f0 <lv_bar_anim_ready>:

static void lv_bar_anim_ready(lv_anim_t * a)
{
 80160f0:	b510      	push	{r4, lr}
 80160f2:	4604      	mov	r4, r0
    lv_bar_ext_t * ext = lv_obj_get_ext_attr(a->var);
 80160f4:	6800      	ldr	r0, [r0, #0]
 80160f6:	f7fa fa42 	bl	801057e <lv_obj_get_ext_attr>
    ext->anim_state    = LV_BAR_ANIM_STATE_INV;
 80160fa:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80160fe:	8143      	strh	r3, [r0, #10]
    lv_bar_set_value(a->var, ext->anim_end, false);
 8016100:	f9b0 1008 	ldrsh.w	r1, [r0, #8]
 8016104:	6820      	ldr	r0, [r4, #0]
 8016106:	2200      	movs	r2, #0
}
 8016108:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    lv_bar_set_value(a->var, ext->anim_end, false);
 801610c:	f7ff bfa4 	b.w	8016058 <lv_bar_set_value>

08016110 <lv_bar_set_style>:
{
 8016110:	b570      	push	{r4, r5, r6, lr}
 8016112:	460e      	mov	r6, r1
 8016114:	4604      	mov	r4, r0
 8016116:	4615      	mov	r5, r2
    lv_bar_ext_t * ext = lv_obj_get_ext_attr(bar);
 8016118:	f7fa fa31 	bl	801057e <lv_obj_get_ext_attr>
    switch(type) {
 801611c:	b116      	cbz	r6, 8016124 <lv_bar_set_style+0x14>
 801611e:	2e01      	cmp	r6, #1
 8016120:	d006      	beq.n	8016130 <lv_bar_set_style+0x20>
 8016122:	bd70      	pop	{r4, r5, r6, pc}
        case LV_BAR_STYLE_BG: lv_obj_set_style(bar, style); break;
 8016124:	4629      	mov	r1, r5
 8016126:	4620      	mov	r0, r4
}
 8016128:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        case LV_BAR_STYLE_BG: lv_obj_set_style(bar, style); break;
 801612c:	f7fa b8d2 	b.w	80102d4 <lv_obj_set_style>
            ext->style_indic = style;
 8016130:	6105      	str	r5, [r0, #16]
            lv_obj_refresh_ext_draw_pad(bar);
 8016132:	4620      	mov	r0, r4
}
 8016134:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
            lv_obj_refresh_ext_draw_pad(bar);
 8016138:	f7fa b831 	b.w	801019e <lv_obj_refresh_ext_draw_pad>

0801613c <lv_bar_create>:
{
 801613c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801613e:	460f      	mov	r7, r1
    lv_obj_t * new_bar = lv_obj_create(par, copy);
 8016140:	f7f9 fe48 	bl	800fdd4 <lv_obj_create>
    lv_mem_assert(new_bar);
 8016144:	4605      	mov	r5, r0
 8016146:	b900      	cbnz	r0, 801614a <lv_bar_create+0xe>
 8016148:	e7fe      	b.n	8016148 <lv_bar_create+0xc>
    if(ancestor_signal == NULL) ancestor_signal = lv_obj_get_signal_cb(new_bar);
 801614a:	4c38      	ldr	r4, [pc, #224]	; (801622c <lv_bar_create+0xf0>)
 801614c:	6823      	ldr	r3, [r4, #0]
 801614e:	b913      	cbnz	r3, 8016156 <lv_bar_create+0x1a>
 8016150:	f7fa fa11 	bl	8010576 <lv_obj_get_signal_cb>
 8016154:	6020      	str	r0, [r4, #0]
    if(ancestor_design_f == NULL) ancestor_design_f = lv_obj_get_design_cb(new_bar);
 8016156:	4c36      	ldr	r4, [pc, #216]	; (8016230 <lv_bar_create+0xf4>)
 8016158:	6823      	ldr	r3, [r4, #0]
 801615a:	b91b      	cbnz	r3, 8016164 <lv_bar_create+0x28>
 801615c:	4628      	mov	r0, r5
 801615e:	f7fa fa0c 	bl	801057a <lv_obj_get_design_cb>
 8016162:	6020      	str	r0, [r4, #0]
    lv_bar_ext_t * ext = lv_obj_allocate_ext_attr(new_bar, sizeof(lv_bar_ext_t));
 8016164:	2114      	movs	r1, #20
 8016166:	4628      	mov	r0, r5
 8016168:	f7f9 fb22 	bl	800f7b0 <lv_obj_allocate_ext_attr>
    lv_mem_assert(ext);
 801616c:	4604      	mov	r4, r0
 801616e:	b900      	cbnz	r0, 8016172 <lv_bar_create+0x36>
 8016170:	e7fe      	b.n	8016170 <lv_bar_create+0x34>
    ext->max_value = 100;
 8016172:	2364      	movs	r3, #100	; 0x64
 8016174:	8083      	strh	r3, [r0, #4]
    ext->anim_time  = 200;
 8016176:	23c8      	movs	r3, #200	; 0xc8
 8016178:	8183      	strh	r3, [r0, #12]
    ext->anim_state = LV_BAR_ANIM_STATE_INV;
 801617a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801617e:	8143      	strh	r3, [r0, #10]
    ext->sym         = 0;
 8016180:	7b83      	ldrb	r3, [r0, #14]
    lv_obj_set_signal_cb(new_bar, lv_bar_signal);
 8016182:	492c      	ldr	r1, [pc, #176]	; (8016234 <lv_bar_create+0xf8>)
    ext->min_value = 0;
 8016184:	2600      	movs	r6, #0
    ext->sym         = 0;
 8016186:	f366 0300 	bfi	r3, r6, #0, #1
 801618a:	7383      	strb	r3, [r0, #14]
    ext->style_indic = &lv_style_pretty_color;
 801618c:	4b2a      	ldr	r3, [pc, #168]	; (8016238 <lv_bar_create+0xfc>)
    ext->min_value = 0;
 801618e:	8046      	strh	r6, [r0, #2]
    ext->cur_value = 0;
 8016190:	8006      	strh	r6, [r0, #0]
    ext->anim_start = 0;
 8016192:	80c6      	strh	r6, [r0, #6]
    ext->anim_end   = 0;
 8016194:	8106      	strh	r6, [r0, #8]
    ext->style_indic = &lv_style_pretty_color;
 8016196:	6103      	str	r3, [r0, #16]
    lv_obj_set_signal_cb(new_bar, lv_bar_signal);
 8016198:	4628      	mov	r0, r5
 801619a:	f7f9 fb05 	bl	800f7a8 <lv_obj_set_signal_cb>
    lv_obj_set_design_cb(new_bar, lv_bar_design);
 801619e:	4927      	ldr	r1, [pc, #156]	; (801623c <lv_bar_create+0x100>)
 80161a0:	4628      	mov	r0, r5
 80161a2:	f7f9 fb03 	bl	800f7ac <lv_obj_set_design_cb>
    if(copy == NULL) {
 80161a6:	bb1f      	cbnz	r7, 80161f0 <lv_bar_create+0xb4>
        lv_obj_set_click(new_bar, false);
 80161a8:	4639      	mov	r1, r7
 80161aa:	4628      	mov	r0, r5
 80161ac:	f7f9 fa28 	bl	800f600 <lv_obj_set_click>
        lv_obj_set_size(new_bar, LV_DPI * 2, LV_DPI / 3);
 80161b0:	2208      	movs	r2, #8
 80161b2:	2132      	movs	r1, #50	; 0x32
 80161b4:	4628      	mov	r0, r5
 80161b6:	f7f9 ff8b 	bl	80100d0 <lv_obj_set_size>
        lv_bar_set_value(new_bar, ext->cur_value, false);
 80161ba:	f9b4 1000 	ldrsh.w	r1, [r4]
 80161be:	463a      	mov	r2, r7
 80161c0:	4628      	mov	r0, r5
 80161c2:	f7ff ff49 	bl	8016058 <lv_bar_set_value>
        lv_theme_t * th = lv_theme_get_current();
 80161c6:	f004 fb5f 	bl	801a888 <lv_theme_get_current>
        if(th) {
 80161ca:	4604      	mov	r4, r0
 80161cc:	b158      	cbz	r0, 80161e6 <lv_bar_create+0xaa>
            lv_bar_set_style(new_bar, LV_BAR_STYLE_BG, th->style.bar.bg);
 80161ce:	6d42      	ldr	r2, [r0, #84]	; 0x54
 80161d0:	4639      	mov	r1, r7
 80161d2:	4628      	mov	r0, r5
 80161d4:	f7ff ff9c 	bl	8016110 <lv_bar_set_style>
            lv_bar_set_style(new_bar, LV_BAR_STYLE_INDIC, th->style.bar.indic);
 80161d8:	6da2      	ldr	r2, [r4, #88]	; 0x58
 80161da:	2101      	movs	r1, #1
 80161dc:	4628      	mov	r0, r5
 80161de:	f7ff ff97 	bl	8016110 <lv_bar_set_style>
}
 80161e2:	4628      	mov	r0, r5
 80161e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            lv_obj_set_style(new_bar, &lv_style_pretty);
 80161e6:	4916      	ldr	r1, [pc, #88]	; (8016240 <lv_bar_create+0x104>)
 80161e8:	4628      	mov	r0, r5
 80161ea:	f7fa f873 	bl	80102d4 <lv_obj_set_style>
 80161ee:	e7f8      	b.n	80161e2 <lv_bar_create+0xa6>
        lv_bar_ext_t * ext_copy = lv_obj_get_ext_attr(copy);
 80161f0:	4638      	mov	r0, r7
 80161f2:	f7fa f9c4 	bl	801057e <lv_obj_get_ext_attr>
        ext->min_value          = ext_copy->min_value;
 80161f6:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
 80161fa:	8063      	strh	r3, [r4, #2]
        ext->max_value          = ext_copy->max_value;
 80161fc:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 8016200:	80a3      	strh	r3, [r4, #4]
        ext->cur_value          = ext_copy->cur_value;
 8016202:	f9b0 3000 	ldrsh.w	r3, [r0]
 8016206:	8023      	strh	r3, [r4, #0]
        ext->style_indic        = ext_copy->style_indic;
 8016208:	6903      	ldr	r3, [r0, #16]
 801620a:	6123      	str	r3, [r4, #16]
        ext->sym                = ext_copy->sym;
 801620c:	7b82      	ldrb	r2, [r0, #14]
 801620e:	7ba3      	ldrb	r3, [r4, #14]
 8016210:	f362 0300 	bfi	r3, r2, #0, #1
        lv_obj_refresh_style(new_bar);
 8016214:	4628      	mov	r0, r5
        ext->sym                = ext_copy->sym;
 8016216:	73a3      	strb	r3, [r4, #14]
        lv_obj_refresh_style(new_bar);
 8016218:	f7f9 ffb3 	bl	8010182 <lv_obj_refresh_style>
        lv_bar_set_value(new_bar, ext->cur_value, false);
 801621c:	4632      	mov	r2, r6
 801621e:	f9b4 1000 	ldrsh.w	r1, [r4]
 8016222:	4628      	mov	r0, r5
 8016224:	f7ff ff18 	bl	8016058 <lv_bar_set_value>
 8016228:	e7db      	b.n	80161e2 <lv_bar_create+0xa6>
 801622a:	bf00      	nop
 801622c:	2000b228 	.word	0x2000b228
 8016230:	2000b224 	.word	0x2000b224
 8016234:	08016001 	.word	0x08016001
 8016238:	2000c4c8 	.word	0x2000c4c8
 801623c:	08016269 	.word	0x08016269
 8016240:	2000c5b8 	.word	0x2000c5b8

08016244 <lv_bar_get_style>:
{
 8016244:	b538      	push	{r3, r4, r5, lr}
 8016246:	460c      	mov	r4, r1
 8016248:	4605      	mov	r5, r0
    lv_bar_ext_t * ext       = lv_obj_get_ext_attr(bar);
 801624a:	f7fa f998 	bl	801057e <lv_obj_get_ext_attr>
    switch(type) {
 801624e:	b11c      	cbz	r4, 8016258 <lv_bar_get_style+0x14>
 8016250:	2c01      	cmp	r4, #1
 8016252:	d006      	beq.n	8016262 <lv_bar_get_style+0x1e>
        default: style = NULL; break;
 8016254:	2000      	movs	r0, #0
}
 8016256:	bd38      	pop	{r3, r4, r5, pc}
        case LV_BAR_STYLE_BG: style = lv_obj_get_style(bar); break;
 8016258:	4628      	mov	r0, r5
}
 801625a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        case LV_BAR_STYLE_BG: style = lv_obj_get_style(bar); break;
 801625e:	f7fa b8a3 	b.w	80103a8 <lv_obj_get_style>
        case LV_BAR_STYLE_INDIC: style = ext->style_indic; break;
 8016262:	6900      	ldr	r0, [r0, #16]
 8016264:	bd38      	pop	{r3, r4, r5, pc}
	...

08016268 <lv_bar_design>:
{
 8016268:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    if(mode == LV_DESIGN_COVER_CHK) {
 801626c:	2a02      	cmp	r2, #2
{
 801626e:	b091      	sub	sp, #68	; 0x44
 8016270:	4605      	mov	r5, r0
 8016272:	460e      	mov	r6, r1
 8016274:	4614      	mov	r4, r2
    if(mode == LV_DESIGN_COVER_CHK) {
 8016276:	d107      	bne.n	8016288 <lv_bar_design+0x20>
        return ancestor_design_f(bar, mask, mode);
 8016278:	4b98      	ldr	r3, [pc, #608]	; (80164dc <lv_bar_design+0x274>)
 801627a:	681b      	ldr	r3, [r3, #0]
 801627c:	4798      	blx	r3
 801627e:	4604      	mov	r4, r0
}
 8016280:	4620      	mov	r0, r4
 8016282:	b011      	add	sp, #68	; 0x44
 8016284:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    } else if(mode == LV_DESIGN_DRAW_MAIN) {
 8016288:	2a00      	cmp	r2, #0
 801628a:	f040 8105 	bne.w	8016498 <lv_bar_design+0x230>
        lv_opa_t opa_scale = lv_obj_get_opa_scale(bar);
 801628e:	f7fa f90e 	bl	80104ae <lv_obj_get_opa_scale>
 8016292:	4607      	mov	r7, r0
        if(lv_obj_is_focused(bar)) {
 8016294:	4628      	mov	r0, r5
 8016296:	f7fa f97a 	bl	801058e <lv_obj_is_focused>
 801629a:	4602      	mov	r2, r0
 801629c:	b318      	cbz	r0, 80162e6 <lv_bar_design+0x7e>
            const lv_style_t * style_bg = lv_bar_get_style(bar, LV_BAR_STYLE_BG);
 801629e:	4621      	mov	r1, r4
 80162a0:	4628      	mov	r0, r5
 80162a2:	f7ff ffcf 	bl	8016244 <lv_bar_get_style>
            lv_style_copy(&style_tmp, style_bg);
 80162a6:	4601      	mov	r1, r0
 80162a8:	a801      	add	r0, sp, #4
 80162aa:	f7fa fcdd 	bl	8010c68 <lv_style_copy>
            lv_draw_rect(&bar->coords, mask, &style_tmp, opa_scale);
 80162ae:	463b      	mov	r3, r7
 80162b0:	aa01      	add	r2, sp, #4
 80162b2:	4631      	mov	r1, r6
 80162b4:	f105 0010 	add.w	r0, r5, #16
            style_tmp.body.border.width = 0;
 80162b8:	f8ad 4010 	strh.w	r4, [sp, #16]
            lv_draw_rect(&bar->coords, mask, &style_tmp, opa_scale);
 80162bc:	f7fc fa24 	bl	8012708 <lv_draw_rect>
        lv_bar_ext_t * ext = lv_obj_get_ext_attr(bar);
 80162c0:	4628      	mov	r0, r5
 80162c2:	f7fa f95c 	bl	801057e <lv_obj_get_ext_attr>
        if(ext->cur_value != ext->min_value || ext->sym
 80162c6:	f9b0 2000 	ldrsh.w	r2, [r0]
 80162ca:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
 80162ce:	429a      	cmp	r2, r3
        lv_bar_ext_t * ext = lv_obj_get_ext_attr(bar);
 80162d0:	4604      	mov	r4, r0
        if(ext->cur_value != ext->min_value || ext->sym
 80162d2:	d10e      	bne.n	80162f2 <lv_bar_design+0x8a>
 80162d4:	7b83      	ldrb	r3, [r0, #14]
 80162d6:	07db      	lsls	r3, r3, #31
 80162d8:	d40b      	bmi.n	80162f2 <lv_bar_design+0x8a>
           || ext->anim_start != LV_BAR_ANIM_STATE_INV
 80162da:	f9b0 3006 	ldrsh.w	r3, [r0, #6]
 80162de:	3301      	adds	r3, #1
 80162e0:	d107      	bne.n	80162f2 <lv_bar_design+0x8a>
    return true;
 80162e2:	2401      	movs	r4, #1
 80162e4:	e7cc      	b.n	8016280 <lv_bar_design+0x18>
            ancestor_design_f(bar, mask, mode);
 80162e6:	4b7d      	ldr	r3, [pc, #500]	; (80164dc <lv_bar_design+0x274>)
 80162e8:	4631      	mov	r1, r6
 80162ea:	681b      	ldr	r3, [r3, #0]
 80162ec:	4628      	mov	r0, r5
 80162ee:	4798      	blx	r3
 80162f0:	e7e6      	b.n	80162c0 <lv_bar_design+0x58>
    lv_bar_ext_t * ext       = lv_obj_get_ext_attr(bar);
 80162f2:	4628      	mov	r0, r5
 80162f4:	f7fa f943 	bl	801057e <lv_obj_get_ext_attr>
        case LV_BAR_STYLE_INDIC: style = ext->style_indic; break;
 80162f8:	6902      	ldr	r2, [r0, #16]
 * @param dest pointer to the destination area
 * @param src pointer to the source area
 */
inline static void lv_area_copy(lv_area_t * dest, const lv_area_t * src)
{
    memcpy(dest, src, sizeof(lv_area_t));
 80162fa:	f855 0f10 	ldr.w	r0, [r5, #16]!
 80162fe:	6869      	ldr	r1, [r5, #4]
 8016300:	ab01      	add	r3, sp, #4
 8016302:	c303      	stmia	r3!, {r0, r1}
            indic_area.x1 += style_indic->body.padding.left;
 8016304:	8b53      	ldrh	r3, [r2, #26]
 8016306:	f8bd e004 	ldrh.w	lr, [sp, #4]
            indic_area.x2 -= style_indic->body.padding.right;
 801630a:	8b91      	ldrh	r1, [r2, #28]
            indic_area.y2 -= style_indic->body.padding.bottom;
 801630c:	f8bd 000a 	ldrh.w	r0, [sp, #10]
            indic_area.y1 += style_indic->body.padding.top;
 8016310:	f8b2 c016 	ldrh.w	ip, [r2, #22]
 8016314:	f8bd 5006 	ldrh.w	r5, [sp, #6]
 8016318:	f894 800e 	ldrb.w	r8, [r4, #14]
 801631c:	f9b4 900a 	ldrsh.w	r9, [r4, #10]
            indic_area.x1 += style_indic->body.padding.left;
 8016320:	449e      	add	lr, r3
            indic_area.x2 -= style_indic->body.padding.right;
 8016322:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 8016326:	1a5b      	subs	r3, r3, r1
            indic_area.y2 -= style_indic->body.padding.bottom;
 8016328:	8b11      	ldrh	r1, [r2, #24]
 801632a:	1a40      	subs	r0, r0, r1
            indic_area.x2 -= style_indic->body.padding.right;
 801632c:	b29b      	uxth	r3, r3
            indic_area.y1 += style_indic->body.padding.top;
 801632e:	4465      	add	r5, ip
            indic_area.y2 -= style_indic->body.padding.bottom;
 8016330:	b280      	uxth	r0, r0
            indic_area.y1 += style_indic->body.padding.top;
 8016332:	b2ad      	uxth	r5, r5
            indic_area.x1 += style_indic->body.padding.left;
 8016334:	fa1f fe8e 	uxth.w	lr, lr
            indic_area.x2 -= style_indic->body.padding.right;
 8016338:	f8ad 3008 	strh.w	r3, [sp, #8]
 * @param area_p pointer to an area
 * @return the height of the area (if y1 == y2 -> height = 1)
 */
static inline lv_coord_t lv_area_get_height(const lv_area_t * area_p)
{
    return area_p->y2 - area_p->y1 + 1;
 801633c:	f100 0c01 	add.w	ip, r0, #1
    return area_p->x2 - area_p->x1 + 1;
 8016340:	3301      	adds	r3, #1
    return area_p->y2 - area_p->y1 + 1;
 8016342:	ebac 0c05 	sub.w	ip, ip, r5
    return area_p->x2 - area_p->x1 + 1;
 8016346:	eba3 030e 	sub.w	r3, r3, lr
 801634a:	b21b      	sxth	r3, r3
    return area_p->y2 - area_p->y1 + 1;
 801634c:	fa0f fc8c 	sxth.w	ip, ip
            if(w >= h) {
 8016350:	459c      	cmp	ip, r3
            indic_area.y1 += style_indic->body.padding.top;
 8016352:	f8ad 5006 	strh.w	r5, [sp, #6]
            indic_area.x1 += style_indic->body.padding.left;
 8016356:	f8ad e004 	strh.w	lr, [sp, #4]
            indic_area.y2 -= style_indic->body.padding.bottom;
 801635a:	f8ad 000a 	strh.w	r0, [sp, #10]
 801635e:	f9b4 1002 	ldrsh.w	r1, [r4, #2]
 8016362:	f9b4 5004 	ldrsh.w	r5, [r4, #4]
            if(w >= h) {
 8016366:	dc4b      	bgt.n	8016400 <lv_bar_design+0x198>
                if(ext->anim_state != LV_BAR_ANIM_STATE_INV) {
 8016368:	f1b9 3fff 	cmp.w	r9, #4294967295	; 0xffffffff
 801636c:	d03e      	beq.n	80163ec <lv_bar_design+0x184>
                        (int32_t)((int32_t)w * (ext->anim_start - ext->min_value)) / (ext->max_value - ext->min_value);
 801636e:	f9b4 c006 	ldrsh.w	ip, [r4, #6]
                        (int32_t)((int32_t)w * (ext->anim_end - ext->min_value)) / (ext->max_value - ext->min_value);
 8016372:	f9b4 0008 	ldrsh.w	r0, [r4, #8]
                        (int32_t)((int32_t)w * (ext->anim_start - ext->min_value)) / (ext->max_value - ext->min_value);
 8016376:	ebac 0c01 	sub.w	ip, ip, r1
                        (int32_t)((int32_t)w * (ext->anim_end - ext->min_value)) / (ext->max_value - ext->min_value);
 801637a:	1a40      	subs	r0, r0, r1
                        (int32_t)((int32_t)w * (ext->anim_start - ext->min_value)) / (ext->max_value - ext->min_value);
 801637c:	1a6d      	subs	r5, r5, r1
 801637e:	fb03 fc0c 	mul.w	ip, r3, ip
                        (int32_t)((int32_t)w * (ext->anim_end - ext->min_value)) / (ext->max_value - ext->min_value);
 8016382:	4358      	muls	r0, r3
                        (int32_t)((int32_t)w * (ext->anim_start - ext->min_value)) / (ext->max_value - ext->min_value);
 8016384:	fb9c fcf5 	sdiv	ip, ip, r5
                        (int32_t)((int32_t)w * (ext->anim_end - ext->min_value)) / (ext->max_value - ext->min_value);
 8016388:	fb90 f0f5 	sdiv	r0, r0, r5
                        anim_start_x + (((anim_end_x - anim_start_x) * ext->anim_state) >> LV_BAR_ANIM_STATE_NORM);
 801638c:	fa0f f58c 	sxth.w	r5, ip
 8016390:	b200      	sxth	r0, r0
 8016392:	1b40      	subs	r0, r0, r5
 8016394:	fb09 f000 	mul.w	r0, r9, r0
 8016398:	eb0c 2020 	add.w	r0, ip, r0, asr #8
                    indic_area.x2 =
 801639c:	f8ad 0008 	strh.w	r0, [sp, #8]
                indic_area.x2 = indic_area.x1 + indic_area.x2 - 1;
 80163a0:	f8bd 0008 	ldrh.w	r0, [sp, #8]
 80163a4:	3801      	subs	r0, #1
 80163a6:	4470      	add	r0, lr
 80163a8:	b200      	sxth	r0, r0
                if(ext->sym && ext->min_value < 0 && ext->max_value > 0) {
 80163aa:	f018 0f01 	tst.w	r8, #1
                indic_area.x2 = indic_area.x1 + indic_area.x2 - 1;
 80163ae:	f8ad 0008 	strh.w	r0, [sp, #8]
                if(ext->sym && ext->min_value < 0 && ext->max_value > 0) {
 80163b2:	d015      	beq.n	80163e0 <lv_bar_design+0x178>
 80163b4:	2900      	cmp	r1, #0
 80163b6:	da13      	bge.n	80163e0 <lv_bar_design+0x178>
 80163b8:	f9b4 4004 	ldrsh.w	r4, [r4, #4]
 80163bc:	2c00      	cmp	r4, #0
 80163be:	dd0f      	ble.n	80163e0 <lv_bar_design+0x178>
                    zero = indic_area.x1 + (-ext->min_value * w) / (ext->max_value - ext->min_value);
 80163c0:	424d      	negs	r5, r1
 80163c2:	436b      	muls	r3, r5
 80163c4:	1a61      	subs	r1, r4, r1
 80163c6:	fb93 f3f1 	sdiv	r3, r3, r1
 80163ca:	449e      	add	lr, r3
 80163cc:	fa0f fe8e 	sxth.w	lr, lr
                    if(indic_area.x2 > zero)
 80163d0:	4570      	cmp	r0, lr
                        indic_area.x1 = zero;
 80163d2:	bfce      	itee	gt
 80163d4:	f8ad e004 	strhgt.w	lr, [sp, #4]
                        indic_area.x1 = indic_area.x2;
 80163d8:	f8ad 0004 	strhle.w	r0, [sp, #4]
                        indic_area.x2 = zero;
 80163dc:	f8ad e008 	strhle.w	lr, [sp, #8]
            lv_draw_rect(&indic_area, mask, style_indic, opa_scale);
 80163e0:	463b      	mov	r3, r7
 80163e2:	4631      	mov	r1, r6
 80163e4:	a801      	add	r0, sp, #4
 80163e6:	f7fc f98f 	bl	8012708 <lv_draw_rect>
 80163ea:	e77a      	b.n	80162e2 <lv_bar_design+0x7a>
                        (int32_t)((int32_t)w * (ext->cur_value - ext->min_value)) / (ext->max_value - ext->min_value);
 80163ec:	f9b4 0000 	ldrsh.w	r0, [r4]
 80163f0:	1a40      	subs	r0, r0, r1
 80163f2:	4358      	muls	r0, r3
 80163f4:	1a6d      	subs	r5, r5, r1
 80163f6:	fb90 f5f5 	sdiv	r5, r0, r5
                    indic_area.x2 =
 80163fa:	f8ad 5008 	strh.w	r5, [sp, #8]
 80163fe:	e7cf      	b.n	80163a0 <lv_bar_design+0x138>
                if(ext->anim_state != LV_BAR_ANIM_STATE_INV) {
 8016400:	f1b9 3fff 	cmp.w	r9, #4294967295	; 0xffffffff
 8016404:	d03d      	beq.n	8016482 <lv_bar_design+0x21a>
                        (int32_t)((int32_t)h * (ext->anim_start - ext->min_value)) / (ext->max_value - ext->min_value);
 8016406:	eba5 0e01 	sub.w	lr, r5, r1
 801640a:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
                        (int32_t)((int32_t)h * (ext->anim_end - ext->min_value)) / (ext->max_value - ext->min_value);
 801640e:	f9b4 5008 	ldrsh.w	r5, [r4, #8]
                        (int32_t)((int32_t)h * (ext->anim_start - ext->min_value)) / (ext->max_value - ext->min_value);
 8016412:	1a5b      	subs	r3, r3, r1
                        (int32_t)((int32_t)h * (ext->anim_end - ext->min_value)) / (ext->max_value - ext->min_value);
 8016414:	1a6d      	subs	r5, r5, r1
                        (int32_t)((int32_t)h * (ext->anim_start - ext->min_value)) / (ext->max_value - ext->min_value);
 8016416:	fb0c f303 	mul.w	r3, ip, r3
                        (int32_t)((int32_t)h * (ext->anim_end - ext->min_value)) / (ext->max_value - ext->min_value);
 801641a:	fb0c f505 	mul.w	r5, ip, r5
                        (int32_t)((int32_t)h * (ext->anim_start - ext->min_value)) / (ext->max_value - ext->min_value);
 801641e:	fb93 f3fe 	sdiv	r3, r3, lr
                        (int32_t)((int32_t)h * (ext->anim_end - ext->min_value)) / (ext->max_value - ext->min_value);
 8016422:	fb95 f5fe 	sdiv	r5, r5, lr
                        anim_start_y + (((anim_end_y - anim_start_y) * ext->anim_state) >> LV_BAR_ANIM_STATE_NORM);
 8016426:	fa0f fe83 	sxth.w	lr, r3
 801642a:	b22d      	sxth	r5, r5
 801642c:	eba5 050e 	sub.w	r5, r5, lr
 8016430:	fb09 f905 	mul.w	r9, r9, r5
 8016434:	eb03 2929 	add.w	r9, r3, r9, asr #8
                    indic_area.y1 =
 8016438:	f8ad 9006 	strh.w	r9, [sp, #6]
                indic_area.y1 = indic_area.y2 - indic_area.y1 + 1;
 801643c:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8016440:	f1c3 0301 	rsb	r3, r3, #1
 8016444:	4403      	add	r3, r0
 8016446:	b21b      	sxth	r3, r3
                if(ext->sym && ext->min_value < 0 && ext->max_value > 0) {
 8016448:	f018 0f01 	tst.w	r8, #1
                indic_area.y1 = indic_area.y2 - indic_area.y1 + 1;
 801644c:	f8ad 3006 	strh.w	r3, [sp, #6]
                if(ext->sym && ext->min_value < 0 && ext->max_value > 0) {
 8016450:	d0c6      	beq.n	80163e0 <lv_bar_design+0x178>
 8016452:	2900      	cmp	r1, #0
 8016454:	dac4      	bge.n	80163e0 <lv_bar_design+0x178>
 8016456:	f9b4 4004 	ldrsh.w	r4, [r4, #4]
 801645a:	2c00      	cmp	r4, #0
 801645c:	ddc0      	ble.n	80163e0 <lv_bar_design+0x178>
                    zero = indic_area.y2 - (-ext->min_value * h) / (ext->max_value - ext->min_value);
 801645e:	424d      	negs	r5, r1
 8016460:	fb0c fc05 	mul.w	ip, ip, r5
 8016464:	1a61      	subs	r1, r4, r1
 8016466:	fb9c fcf1 	sdiv	ip, ip, r1
 801646a:	eba0 000c 	sub.w	r0, r0, ip
 801646e:	b200      	sxth	r0, r0
                    if(indic_area.y1 < zero)
 8016470:	4283      	cmp	r3, r0
                        indic_area.y2 = zero;
 8016472:	bfb2      	itee	lt
 8016474:	f8ad 000a 	strhlt.w	r0, [sp, #10]
                        indic_area.y2 = indic_area.y1;
 8016478:	f8ad 300a 	strhge.w	r3, [sp, #10]
                        indic_area.y1 = zero;
 801647c:	f8ad 0006 	strhge.w	r0, [sp, #6]
 8016480:	e7ae      	b.n	80163e0 <lv_bar_design+0x178>
                        (int32_t)((int32_t)h * (ext->cur_value - ext->min_value)) / (ext->max_value - ext->min_value);
 8016482:	f9b4 3000 	ldrsh.w	r3, [r4]
 8016486:	1a5b      	subs	r3, r3, r1
 8016488:	fb0c f303 	mul.w	r3, ip, r3
 801648c:	1a6d      	subs	r5, r5, r1
 801648e:	fb93 f5f5 	sdiv	r5, r3, r5
                    indic_area.y1 =
 8016492:	f8ad 5006 	strh.w	r5, [sp, #6]
 8016496:	e7d1      	b.n	801643c <lv_bar_design+0x1d4>
    } else if(mode == LV_DESIGN_DRAW_POST) {
 8016498:	2a01      	cmp	r2, #1
 801649a:	f47f af22 	bne.w	80162e2 <lv_bar_design+0x7a>
        if(lv_obj_is_focused(bar)) {
 801649e:	f7fa f876 	bl	801058e <lv_obj_is_focused>
 80164a2:	4604      	mov	r4, r0
 80164a4:	2800      	cmp	r0, #0
 80164a6:	f43f af1c 	beq.w	80162e2 <lv_bar_design+0x7a>
            lv_opa_t opa_scale          = lv_obj_get_opa_scale(bar);
 80164aa:	4628      	mov	r0, r5
 80164ac:	f7f9 ffff 	bl	80104ae <lv_obj_get_opa_scale>
            const lv_style_t * style_bg = lv_bar_get_style(bar, LV_BAR_STYLE_BG);
 80164b0:	2100      	movs	r1, #0
            lv_opa_t opa_scale          = lv_obj_get_opa_scale(bar);
 80164b2:	4607      	mov	r7, r0
            const lv_style_t * style_bg = lv_bar_get_style(bar, LV_BAR_STYLE_BG);
 80164b4:	4628      	mov	r0, r5
 80164b6:	f7ff fec5 	bl	8016244 <lv_bar_get_style>
            lv_style_copy(&style_tmp, style_bg);
 80164ba:	4601      	mov	r1, r0
 80164bc:	a801      	add	r0, sp, #4
 80164be:	f7fa fbd3 	bl	8010c68 <lv_style_copy>
            style_tmp.body.opa          = LV_OPA_TRANSP;
 80164c2:	2200      	movs	r2, #0
 80164c4:	f88d 200c 	strb.w	r2, [sp, #12]
            style_tmp.body.shadow.width = 0;
 80164c8:	f8ad 2016 	strh.w	r2, [sp, #22]
            lv_draw_rect(&bar->coords, mask, &style_tmp, opa_scale);
 80164cc:	463b      	mov	r3, r7
 80164ce:	aa01      	add	r2, sp, #4
 80164d0:	4631      	mov	r1, r6
 80164d2:	f105 0010 	add.w	r0, r5, #16
 80164d6:	f7fc f917 	bl	8012708 <lv_draw_rect>
 80164da:	e6d1      	b.n	8016280 <lv_bar_design+0x18>
 80164dc:	2000b224 	.word	0x2000b224

080164e0 <lv_btn_design>:
 *             LV_DESIGN_DRAW_POST: drawing after every children are drawn
 * @param return true/false, depends on 'mode'
 */
static bool lv_btn_design(lv_obj_t * btn, const lv_area_t * mask, lv_design_mode_t mode)
{
    if(mode == LV_DESIGN_COVER_CHK) {
 80164e0:	2a02      	cmp	r2, #2
{
 80164e2:	b510      	push	{r4, lr}
    if(mode == LV_DESIGN_COVER_CHK) {
 80164e4:	d008      	beq.n	80164f8 <lv_btn_design+0x18>
        return false;
    } else if(mode == LV_DESIGN_DRAW_MAIN) {
 80164e6:	b91a      	cbnz	r2, 80164f0 <lv_btn_design+0x10>
        }
#else
        ancestor_design(btn, mask, mode);
#endif
    } else if(mode == LV_DESIGN_DRAW_POST) {
        ancestor_design(btn, mask, mode);
 80164e8:	4b04      	ldr	r3, [pc, #16]	; (80164fc <lv_btn_design+0x1c>)
 80164ea:	681b      	ldr	r3, [r3, #0]
 80164ec:	4798      	blx	r3
 80164ee:	e001      	b.n	80164f4 <lv_btn_design+0x14>
    } else if(mode == LV_DESIGN_DRAW_POST) {
 80164f0:	2a01      	cmp	r2, #1
 80164f2:	d0f9      	beq.n	80164e8 <lv_btn_design+0x8>
    }

    return true;
 80164f4:	2001      	movs	r0, #1
}
 80164f6:	bd10      	pop	{r4, pc}
        return false;
 80164f8:	2000      	movs	r0, #0
 80164fa:	bd10      	pop	{r4, pc}
 80164fc:	2000b22c 	.word	0x2000b22c

08016500 <lv_btn_set_state>:
{
 8016500:	b538      	push	{r3, r4, r5, lr}
 8016502:	460c      	mov	r4, r1
 8016504:	4605      	mov	r5, r0
    lv_btn_ext_t * ext = lv_obj_get_ext_attr(btn);
 8016506:	f7fa f83a 	bl	801057e <lv_obj_get_ext_attr>
    if(ext->state != state) {
 801650a:	7e03      	ldrb	r3, [r0, #24]
 801650c:	f003 0207 	and.w	r2, r3, #7
 8016510:	42a2      	cmp	r2, r4
 8016512:	d00a      	beq.n	801652a <lv_btn_set_state+0x2a>
        ext->state = state;
 8016514:	f364 0302 	bfi	r3, r4, #0, #3
 8016518:	7603      	strb	r3, [r0, #24]
        lv_obj_set_style(btn, ext->styles[state]);
 801651a:	eb00 0084 	add.w	r0, r0, r4, lsl #2
 801651e:	6841      	ldr	r1, [r0, #4]
 8016520:	4628      	mov	r0, r5
}
 8016522:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        lv_obj_set_style(btn, ext->styles[state]);
 8016526:	f7f9 bed5 	b.w	80102d4 <lv_obj_set_style>
 801652a:	bd38      	pop	{r3, r4, r5, pc}

0801652c <lv_btn_set_style>:
{
 801652c:	b570      	push	{r4, r5, r6, lr}
 801652e:	460d      	mov	r5, r1
 8016530:	4606      	mov	r6, r0
 8016532:	4614      	mov	r4, r2
    lv_btn_ext_t * ext = lv_obj_get_ext_attr(btn);
 8016534:	f7fa f823 	bl	801057e <lv_obj_get_ext_attr>
    switch(type) {
 8016538:	2d04      	cmp	r5, #4
 801653a:	d805      	bhi.n	8016548 <lv_btn_set_style+0x1c>
 801653c:	e8df f005 	tbb	[pc, r5]
 8016540:	13110f03 	.word	0x13110f03
 8016544:	15          	.byte	0x15
 8016545:	00          	.byte	0x00
        case LV_BTN_STYLE_REL: ext->styles[LV_BTN_STATE_REL] = style; break;
 8016546:	6044      	str	r4, [r0, #4]
    lv_obj_set_style(btn, ext->styles[ext->state]);
 8016548:	7e03      	ldrb	r3, [r0, #24]
 801654a:	f003 0307 	and.w	r3, r3, #7
 801654e:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 8016552:	6841      	ldr	r1, [r0, #4]
 8016554:	4630      	mov	r0, r6
}
 8016556:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    lv_obj_set_style(btn, ext->styles[ext->state]);
 801655a:	f7f9 bebb 	b.w	80102d4 <lv_obj_set_style>
        case LV_BTN_STYLE_PR: ext->styles[LV_BTN_STATE_PR] = style; break;
 801655e:	6084      	str	r4, [r0, #8]
 8016560:	e7f2      	b.n	8016548 <lv_btn_set_style+0x1c>
        case LV_BTN_STYLE_TGL_REL: ext->styles[LV_BTN_STATE_TGL_REL] = style; break;
 8016562:	60c4      	str	r4, [r0, #12]
 8016564:	e7f0      	b.n	8016548 <lv_btn_set_style+0x1c>
        case LV_BTN_STYLE_TGL_PR: ext->styles[LV_BTN_STATE_TGL_PR] = style; break;
 8016566:	6104      	str	r4, [r0, #16]
 8016568:	e7ee      	b.n	8016548 <lv_btn_set_style+0x1c>
        case LV_BTN_STYLE_INA: ext->styles[LV_BTN_STATE_INA] = style; break;
 801656a:	6144      	str	r4, [r0, #20]
 801656c:	e7ec      	b.n	8016548 <lv_btn_set_style+0x1c>
	...

08016570 <lv_btn_create>:
{
 8016570:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016572:	4607      	mov	r7, r0
 8016574:	460e      	mov	r6, r1
    new_btn = lv_cont_create(par, copy);
 8016576:	f000 fac9 	bl	8016b0c <lv_cont_create>
    lv_mem_assert(new_btn);
 801657a:	4605      	mov	r5, r0
 801657c:	b900      	cbnz	r0, 8016580 <lv_btn_create+0x10>
 801657e:	e7fe      	b.n	801657e <lv_btn_create+0xe>
    if(ancestor_signal == NULL) ancestor_signal = lv_obj_get_signal_cb(new_btn);
 8016580:	4c3a      	ldr	r4, [pc, #232]	; (801666c <lv_btn_create+0xfc>)
 8016582:	6823      	ldr	r3, [r4, #0]
 8016584:	b913      	cbnz	r3, 801658c <lv_btn_create+0x1c>
 8016586:	f7f9 fff6 	bl	8010576 <lv_obj_get_signal_cb>
 801658a:	6020      	str	r0, [r4, #0]
    if(ancestor_design == NULL) ancestor_design = lv_obj_get_design_cb(new_btn);
 801658c:	4c38      	ldr	r4, [pc, #224]	; (8016670 <lv_btn_create+0x100>)
 801658e:	6823      	ldr	r3, [r4, #0]
 8016590:	b91b      	cbnz	r3, 801659a <lv_btn_create+0x2a>
 8016592:	4628      	mov	r0, r5
 8016594:	f7f9 fff1 	bl	801057a <lv_obj_get_design_cb>
 8016598:	6020      	str	r0, [r4, #0]
    lv_btn_ext_t * ext = lv_obj_allocate_ext_attr(new_btn, sizeof(lv_btn_ext_t));
 801659a:	211c      	movs	r1, #28
 801659c:	4628      	mov	r0, r5
 801659e:	f7f9 f907 	bl	800f7b0 <lv_obj_allocate_ext_attr>
    lv_mem_assert(ext);
 80165a2:	4604      	mov	r4, r0
 80165a4:	b900      	cbnz	r0, 80165a8 <lv_btn_create+0x38>
 80165a6:	e7fe      	b.n	80165a6 <lv_btn_create+0x36>
    ext->styles[LV_BTN_STATE_REL]     = &lv_style_btn_rel;
 80165a8:	4a32      	ldr	r2, [pc, #200]	; (8016674 <lv_btn_create+0x104>)
    ext->state = LV_BTN_STATE_REL;
 80165aa:	7e03      	ldrb	r3, [r0, #24]
    ext->styles[LV_BTN_STATE_REL]     = &lv_style_btn_rel;
 80165ac:	6042      	str	r2, [r0, #4]
    ext->styles[LV_BTN_STATE_PR]      = &lv_style_btn_pr;
 80165ae:	4a32      	ldr	r2, [pc, #200]	; (8016678 <lv_btn_create+0x108>)
 80165b0:	6082      	str	r2, [r0, #8]
    ext->styles[LV_BTN_STATE_TGL_REL] = &lv_style_btn_tgl_rel;
 80165b2:	4a32      	ldr	r2, [pc, #200]	; (801667c <lv_btn_create+0x10c>)
 80165b4:	60c2      	str	r2, [r0, #12]
    ext->toggle = 0;
 80165b6:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
    ext->styles[LV_BTN_STATE_TGL_PR]  = &lv_style_btn_tgl_pr;
 80165ba:	4a31      	ldr	r2, [pc, #196]	; (8016680 <lv_btn_create+0x110>)
 80165bc:	6102      	str	r2, [r0, #16]
    ext->toggle = 0;
 80165be:	f36f 03c3 	bfc	r3, #3, #1
    ext->styles[LV_BTN_STATE_INA]     = &lv_style_btn_ina;
 80165c2:	4a30      	ldr	r2, [pc, #192]	; (8016684 <lv_btn_create+0x114>)
 80165c4:	6142      	str	r2, [r0, #20]
    ext->toggle = 0;
 80165c6:	7603      	strb	r3, [r0, #24]
    lv_obj_set_signal_cb(new_btn, lv_btn_signal);
 80165c8:	492f      	ldr	r1, [pc, #188]	; (8016688 <lv_btn_create+0x118>)
 80165ca:	4628      	mov	r0, r5
 80165cc:	f7f9 f8ec 	bl	800f7a8 <lv_obj_set_signal_cb>
    lv_obj_set_design_cb(new_btn, lv_btn_design);
 80165d0:	492e      	ldr	r1, [pc, #184]	; (801668c <lv_btn_create+0x11c>)
 80165d2:	4628      	mov	r0, r5
 80165d4:	f7f9 f8ea 	bl	800f7ac <lv_obj_set_design_cb>
    if(copy == NULL) {
 80165d8:	bb66      	cbnz	r6, 8016634 <lv_btn_create+0xc4>
        if(par != NULL) {
 80165da:	b11f      	cbz	r7, 80165e4 <lv_btn_create+0x74>
 * @param btn pointer to a button object
 * @param layout a layout from 'lv_cont_layout_t'
 */
static inline void lv_btn_set_layout(lv_obj_t * btn, lv_layout_t layout)
{
    lv_cont_set_layout(btn, layout);
 80165dc:	2101      	movs	r1, #1
 80165de:	4628      	mov	r0, r5
 80165e0:	f000 faf6 	bl	8016bd0 <lv_cont_set_layout>
        lv_obj_set_click(new_btn, true); /*Be sure the button is clickable*/
 80165e4:	2101      	movs	r1, #1
 80165e6:	4628      	mov	r0, r5
 80165e8:	f7f9 f80a 	bl	800f600 <lv_obj_set_click>
        lv_theme_t * th = lv_theme_get_current();
 80165ec:	f004 f94c 	bl	801a888 <lv_theme_get_current>
        if(th) {
 80165f0:	4606      	mov	r6, r0
 80165f2:	b1d0      	cbz	r0, 801662a <lv_btn_create+0xba>
            lv_btn_set_style(new_btn, LV_BTN_STYLE_REL, th->style.btn.rel);
 80165f4:	6902      	ldr	r2, [r0, #16]
 80165f6:	2100      	movs	r1, #0
 80165f8:	4628      	mov	r0, r5
 80165fa:	f7ff ff97 	bl	801652c <lv_btn_set_style>
            lv_btn_set_style(new_btn, LV_BTN_STYLE_PR, th->style.btn.pr);
 80165fe:	6972      	ldr	r2, [r6, #20]
 8016600:	2101      	movs	r1, #1
 8016602:	4628      	mov	r0, r5
 8016604:	f7ff ff92 	bl	801652c <lv_btn_set_style>
            lv_btn_set_style(new_btn, LV_BTN_STYLE_TGL_REL, th->style.btn.tgl_rel);
 8016608:	69b2      	ldr	r2, [r6, #24]
 801660a:	2102      	movs	r1, #2
 801660c:	4628      	mov	r0, r5
 801660e:	f7ff ff8d 	bl	801652c <lv_btn_set_style>
            lv_btn_set_style(new_btn, LV_BTN_STYLE_TGL_PR, th->style.btn.tgl_pr);
 8016612:	69f2      	ldr	r2, [r6, #28]
 8016614:	2103      	movs	r1, #3
 8016616:	4628      	mov	r0, r5
 8016618:	f7ff ff88 	bl	801652c <lv_btn_set_style>
            lv_btn_set_style(new_btn, LV_BTN_STYLE_INA, th->style.btn.ina);
 801661c:	6a32      	ldr	r2, [r6, #32]
 801661e:	2104      	movs	r1, #4
 8016620:	4628      	mov	r0, r5
 8016622:	f7ff ff83 	bl	801652c <lv_btn_set_style>
}
 8016626:	4628      	mov	r0, r5
 8016628:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            lv_obj_set_style(new_btn, ext->styles[LV_BTN_STATE_REL]);
 801662a:	6861      	ldr	r1, [r4, #4]
 801662c:	4628      	mov	r0, r5
 801662e:	f7f9 fe51 	bl	80102d4 <lv_obj_set_style>
 8016632:	e7f8      	b.n	8016626 <lv_btn_create+0xb6>
        lv_btn_ext_t * copy_ext = lv_obj_get_ext_attr(copy);
 8016634:	4630      	mov	r0, r6
 8016636:	f7f9 ffa2 	bl	801057e <lv_obj_get_ext_attr>
        ext->state              = copy_ext->state;
 801663a:	7e23      	ldrb	r3, [r4, #24]
 801663c:	7e02      	ldrb	r2, [r0, #24]
 801663e:	f362 0302 	bfi	r3, r2, #0, #3
 8016642:	7623      	strb	r3, [r4, #24]
        ext->toggle             = copy_ext->toggle;
 8016644:	7e03      	ldrb	r3, [r0, #24]
 8016646:	7e22      	ldrb	r2, [r4, #24]
 8016648:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 801664c:	f363 02c3 	bfi	r2, r3, #3, #1
 8016650:	7622      	strb	r2, [r4, #24]
        memcpy(ext->styles, copy_ext->styles, sizeof(ext->styles));
 8016652:	1d03      	adds	r3, r0, #4
 8016654:	3404      	adds	r4, #4
 8016656:	3018      	adds	r0, #24
 8016658:	f853 2b04 	ldr.w	r2, [r3], #4
 801665c:	f844 2b04 	str.w	r2, [r4], #4
 8016660:	4283      	cmp	r3, r0
 8016662:	d1f9      	bne.n	8016658 <lv_btn_create+0xe8>
        lv_obj_refresh_style(new_btn);
 8016664:	4628      	mov	r0, r5
 8016666:	f7f9 fd8c 	bl	8010182 <lv_obj_refresh_style>
 801666a:	e7dc      	b.n	8016626 <lv_btn_create+0xb6>
 801666c:	2000b230 	.word	0x2000b230
 8016670:	2000b22c 	.word	0x2000b22c
 8016674:	2000c540 	.word	0x2000c540
 8016678:	2000c57c 	.word	0x2000c57c
 801667c:	2000c6e4 	.word	0x2000c6e4
 8016680:	2000c75c 	.word	0x2000c75c
 8016684:	2000c630 	.word	0x2000c630
 8016688:	080166ad 	.word	0x080166ad
 801668c:	080164e1 	.word	0x080164e1

08016690 <lv_btn_get_state>:
{
 8016690:	b508      	push	{r3, lr}
    lv_btn_ext_t * ext = lv_obj_get_ext_attr(btn);
 8016692:	f7f9 ff74 	bl	801057e <lv_obj_get_ext_attr>
    return ext->state;
 8016696:	7e00      	ldrb	r0, [r0, #24]
}
 8016698:	f000 0007 	and.w	r0, r0, #7
 801669c:	bd08      	pop	{r3, pc}

0801669e <lv_btn_get_toggle>:
{
 801669e:	b508      	push	{r3, lr}
    lv_btn_ext_t * ext = lv_obj_get_ext_attr(btn);
 80166a0:	f7f9 ff6d 	bl	801057e <lv_obj_get_ext_attr>
    return ext->toggle != 0 ? true : false;
 80166a4:	7e00      	ldrb	r0, [r0, #24]
}
 80166a6:	f3c0 00c0 	ubfx	r0, r0, #3, #1
 80166aa:	bd08      	pop	{r3, pc}

080166ac <lv_btn_signal>:
static lv_res_t lv_btn_signal(lv_obj_t * btn, lv_signal_t sign, void * param)
{
    lv_res_t res;

    /* Include the ancient signal function */
    res = ancestor_signal(btn, sign, param);
 80166ac:	4b52      	ldr	r3, [pc, #328]	; (80167f8 <lv_btn_signal+0x14c>)
{
 80166ae:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    res = ancestor_signal(btn, sign, param);
 80166b2:	681b      	ldr	r3, [r3, #0]
{
 80166b4:	4604      	mov	r4, r0
 80166b6:	460e      	mov	r6, r1
 80166b8:	4617      	mov	r7, r2
    res = ancestor_signal(btn, sign, param);
 80166ba:	4798      	blx	r3
    if(res != LV_RES_OK) return res;
 80166bc:	2801      	cmp	r0, #1
    res = ancestor_signal(btn, sign, param);
 80166be:	4605      	mov	r5, r0
    if(res != LV_RES_OK) return res;
 80166c0:	d112      	bne.n	80166e8 <lv_btn_signal+0x3c>

    lv_btn_ext_t * ext = lv_obj_get_ext_attr(btn);
 80166c2:	4620      	mov	r0, r4
 80166c4:	f7f9 ff5b 	bl	801057e <lv_obj_get_ext_attr>
 80166c8:	4681      	mov	r9, r0
    bool tgl           = lv_btn_get_toggle(btn);
 80166ca:	4620      	mov	r0, r4
 80166cc:	f7ff ffe7 	bl	801669e <lv_btn_get_toggle>

    if(sign == LV_SIGNAL_PRESSED) {
 80166d0:	2e07      	cmp	r6, #7
    bool tgl           = lv_btn_get_toggle(btn);
 80166d2:	4680      	mov	r8, r0
    if(sign == LV_SIGNAL_PRESSED) {
 80166d4:	d110      	bne.n	80166f8 <lv_btn_signal+0x4c>
        /*Refresh the state*/
        if(ext->state == LV_BTN_STATE_REL) {
 80166d6:	f899 3018 	ldrb.w	r3, [r9, #24]
 80166da:	f013 0307 	ands.w	r3, r3, #7
 80166de:	d107      	bne.n	80166f0 <lv_btn_signal+0x44>
            lv_btn_set_state(btn, LV_BTN_STATE_PR);
 80166e0:	4629      	mov	r1, r5
        }
#endif
    } else if(sign == LV_SIGNAL_PRESS_LOST) {
        /*Refresh the state*/
        if(ext->state == LV_BTN_STATE_PR)
            lv_btn_set_state(btn, LV_BTN_STATE_REL);
 80166e2:	4620      	mov	r0, r4
 80166e4:	f7ff ff0c 	bl	8016500 <lv_btn_set_state>
        }
        buf->type[i] = "lv_btn";
    }

    return res;
}
 80166e8:	4628      	mov	r0, r5
 80166ea:	b003      	add	sp, #12
 80166ec:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        } else if(ext->state == LV_BTN_STATE_TGL_REL) {
 80166f0:	2b02      	cmp	r3, #2
 80166f2:	d1f9      	bne.n	80166e8 <lv_btn_signal+0x3c>
            lv_btn_set_state(btn, LV_BTN_STATE_TGL_PR);
 80166f4:	2103      	movs	r1, #3
 80166f6:	e7f4      	b.n	80166e2 <lv_btn_signal+0x36>
    } else if(sign == LV_SIGNAL_PRESS_LOST) {
 80166f8:	2e09      	cmp	r6, #9
 80166fa:	d10b      	bne.n	8016714 <lv_btn_signal+0x68>
        if(ext->state == LV_BTN_STATE_PR)
 80166fc:	f899 3018 	ldrb.w	r3, [r9, #24]
 8016700:	f003 0307 	and.w	r3, r3, #7
 8016704:	2b01      	cmp	r3, #1
 8016706:	d101      	bne.n	801670c <lv_btn_signal+0x60>
            lv_btn_set_state(btn, LV_BTN_STATE_REL);
 8016708:	2100      	movs	r1, #0
 801670a:	e7ea      	b.n	80166e2 <lv_btn_signal+0x36>
        else if(ext->state == LV_BTN_STATE_TGL_PR)
 801670c:	2b03      	cmp	r3, #3
 801670e:	d1eb      	bne.n	80166e8 <lv_btn_signal+0x3c>
                lv_btn_set_state(btn, LV_BTN_STATE_TGL_REL);
 8016710:	2102      	movs	r1, #2
 8016712:	e7e6      	b.n	80166e2 <lv_btn_signal+0x36>
    } else if(sign == LV_SIGNAL_PRESSING) {
 8016714:	2e08      	cmp	r6, #8
 8016716:	d105      	bne.n	8016724 <lv_btn_signal+0x78>
        if(lv_indev_is_dragging(param) != false) {
 8016718:	4638      	mov	r0, r7
 801671a:	f7f8 feee 	bl	800f4fa <lv_indev_is_dragging>
 801671e:	2800      	cmp	r0, #0
 8016720:	d1ec      	bne.n	80166fc <lv_btn_signal+0x50>
 8016722:	e7e1      	b.n	80166e8 <lv_btn_signal+0x3c>
    } else if(sign == LV_SIGNAL_RELEASED) {
 8016724:	2e0a      	cmp	r6, #10
 8016726:	d12c      	bne.n	8016782 <lv_btn_signal+0xd6>
        if(lv_indev_is_dragging(param) == false) {
 8016728:	4638      	mov	r0, r7
 801672a:	f7f8 fee6 	bl	800f4fa <lv_indev_is_dragging>
 801672e:	f899 3018 	ldrb.w	r3, [r9, #24]
 8016732:	4606      	mov	r6, r0
 8016734:	2800      	cmp	r0, #0
 8016736:	d1e3      	bne.n	8016700 <lv_btn_signal+0x54>
            if(ext->state == LV_BTN_STATE_PR && tgl == false) {
 8016738:	f003 0307 	and.w	r3, r3, #7
 801673c:	2b01      	cmp	r3, #1
            uint32_t toggled = 0;
 801673e:	9001      	str	r0, [sp, #4]
            if(ext->state == LV_BTN_STATE_PR && tgl == false) {
 8016740:	d110      	bne.n	8016764 <lv_btn_signal+0xb8>
 8016742:	f1b8 0f00 	cmp.w	r8, #0
 8016746:	d0df      	beq.n	8016708 <lv_btn_signal+0x5c>
                lv_btn_set_state(btn, LV_BTN_STATE_TGL_REL);
 8016748:	2102      	movs	r1, #2
 801674a:	4620      	mov	r0, r4
 801674c:	f7ff fed8 	bl	8016500 <lv_btn_set_state>
                toggled = 1;
 8016750:	9501      	str	r5, [sp, #4]
                res = lv_event_send(btn, LV_EVENT_VALUE_CHANGED, &toggled);
 8016752:	aa01      	add	r2, sp, #4
 8016754:	210e      	movs	r1, #14
 8016756:	4620      	mov	r0, r4
 8016758:	f7f8 ffc2 	bl	800f6e0 <lv_event_send>
                if(res != LV_RES_OK) return res;
 801675c:	2801      	cmp	r0, #1
 801675e:	bf18      	it	ne
 8016760:	4605      	movne	r5, r0
 8016762:	e7c1      	b.n	80166e8 <lv_btn_signal+0x3c>
            } else if(ext->state == LV_BTN_STATE_TGL_PR && tgl == false) {
 8016764:	2b03      	cmp	r3, #3
 8016766:	d108      	bne.n	801677a <lv_btn_signal+0xce>
 8016768:	f1b8 0f00 	cmp.w	r8, #0
 801676c:	d0d0      	beq.n	8016710 <lv_btn_signal+0x64>
                lv_btn_set_state(btn, LV_BTN_STATE_REL);
 801676e:	4601      	mov	r1, r0
 8016770:	4620      	mov	r0, r4
 8016772:	f7ff fec5 	bl	8016500 <lv_btn_set_state>
                toggled = 0;
 8016776:	9601      	str	r6, [sp, #4]
 8016778:	e7eb      	b.n	8016752 <lv_btn_signal+0xa6>
            if(tgl) {
 801677a:	f1b8 0f00 	cmp.w	r8, #0
 801677e:	d0b3      	beq.n	80166e8 <lv_btn_signal+0x3c>
 8016780:	e7e7      	b.n	8016752 <lv_btn_signal+0xa6>
    } else if(sign == LV_SIGNAL_CONTROL) {
 8016782:	2e11      	cmp	r6, #17
 8016784:	d128      	bne.n	80167d8 <lv_btn_signal+0x12c>
        char c = *((char *)param);
 8016786:	783b      	ldrb	r3, [r7, #0]
        if(c == LV_KEY_RIGHT || c == LV_KEY_UP) {
 8016788:	f003 02fd 	and.w	r2, r3, #253	; 0xfd
 801678c:	2a11      	cmp	r2, #17
 801678e:	d111      	bne.n	80167b4 <lv_btn_signal+0x108>
            if(lv_btn_get_toggle(btn)) {
 8016790:	4620      	mov	r0, r4
 8016792:	f7ff ff84 	bl	801669e <lv_btn_get_toggle>
 8016796:	2800      	cmp	r0, #0
 8016798:	d0a6      	beq.n	80166e8 <lv_btn_signal+0x3c>
                lv_btn_set_state(btn, LV_BTN_STATE_TGL_REL);
 801679a:	2102      	movs	r1, #2
 801679c:	4620      	mov	r0, r4
 801679e:	f7ff feaf 	bl	8016500 <lv_btn_set_state>
                uint32_t state = 1;
 80167a2:	aa02      	add	r2, sp, #8
 80167a4:	f842 5d04 	str.w	r5, [r2, #-4]!
                res            = lv_event_send(btn, LV_EVENT_VALUE_CHANGED, &state);
 80167a8:	210e      	movs	r1, #14
 80167aa:	4620      	mov	r0, r4
 80167ac:	f7f8 ff98 	bl	800f6e0 <lv_event_send>
 80167b0:	4605      	mov	r5, r0
 80167b2:	e799      	b.n	80166e8 <lv_btn_signal+0x3c>
        } else if(c == LV_KEY_LEFT || c == LV_KEY_DOWN) {
 80167b4:	2b14      	cmp	r3, #20
 80167b6:	d001      	beq.n	80167bc <lv_btn_signal+0x110>
 80167b8:	2b12      	cmp	r3, #18
 80167ba:	d195      	bne.n	80166e8 <lv_btn_signal+0x3c>
            if(lv_btn_get_toggle(btn)) {
 80167bc:	4620      	mov	r0, r4
 80167be:	f7ff ff6e 	bl	801669e <lv_btn_get_toggle>
 80167c2:	2800      	cmp	r0, #0
 80167c4:	d090      	beq.n	80166e8 <lv_btn_signal+0x3c>
                lv_btn_set_state(btn, LV_BTN_STATE_REL);
 80167c6:	2100      	movs	r1, #0
 80167c8:	4620      	mov	r0, r4
 80167ca:	f7ff fe99 	bl	8016500 <lv_btn_set_state>
                uint32_t state = 0;
 80167ce:	aa02      	add	r2, sp, #8
 80167d0:	2300      	movs	r3, #0
 80167d2:	f842 3d04 	str.w	r3, [r2, #-4]!
 80167d6:	e7e7      	b.n	80167a8 <lv_btn_signal+0xfc>
    } else if(sign == LV_SIGNAL_GET_TYPE) {
 80167d8:	2e06      	cmp	r6, #6
 80167da:	d185      	bne.n	80166e8 <lv_btn_signal+0x3c>
 80167dc:	2300      	movs	r3, #0
            if(buf->type[i] == NULL) break;
 80167de:	f857 1023 	ldr.w	r1, [r7, r3, lsl #2]
 80167e2:	b2da      	uxtb	r2, r3
 80167e4:	b119      	cbz	r1, 80167ee <lv_btn_signal+0x142>
 80167e6:	3301      	adds	r3, #1
        for(i = 0; i < LV_MAX_ANCESTOR_NUM - 1; i++) { /*Find the last set data*/
 80167e8:	2b07      	cmp	r3, #7
 80167ea:	d1f8      	bne.n	80167de <lv_btn_signal+0x132>
 80167ec:	461a      	mov	r2, r3
        buf->type[i] = "lv_btn";
 80167ee:	4b03      	ldr	r3, [pc, #12]	; (80167fc <lv_btn_signal+0x150>)
 80167f0:	f847 3022 	str.w	r3, [r7, r2, lsl #2]
 80167f4:	e778      	b.n	80166e8 <lv_btn_signal+0x3c>
 80167f6:	bf00      	nop
 80167f8:	2000b230 	.word	0x2000b230
 80167fc:	080f4f69 	.word	0x080f4f69

08016800 <lv_btn_get_style>:
{
 8016800:	b570      	push	{r4, r5, r6, lr}
 8016802:	4606      	mov	r6, r0
 8016804:	460d      	mov	r5, r1
    lv_btn_ext_t * ext       = lv_obj_get_ext_attr(btn);
 8016806:	f7f9 feba 	bl	801057e <lv_obj_get_ext_attr>
 801680a:	4604      	mov	r4, r0
    lv_btn_state_t state     = lv_btn_get_state(btn);
 801680c:	4630      	mov	r0, r6
 801680e:	f7ff ff3f 	bl	8016690 <lv_btn_get_state>
    if((type == LV_BTN_STYLE_REL && state == LV_BTN_STATE_REL) ||
 8016812:	b92d      	cbnz	r5, 8016820 <lv_btn_get_style+0x20>
 8016814:	b9e0      	cbnz	r0, 8016850 <lv_btn_get_style+0x50>
        style = lv_obj_get_style(btn);
 8016816:	4630      	mov	r0, r6
}
 8016818:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        style = lv_obj_get_style(btn);
 801681c:	f7f9 bdc4 	b.w	80103a8 <lv_obj_get_style>
    if((type == LV_BTN_STYLE_REL && state == LV_BTN_STATE_REL) ||
 8016820:	2d01      	cmp	r5, #1
 8016822:	d103      	bne.n	801682c <lv_btn_get_style+0x2c>
       (type == LV_BTN_STYLE_PR && state == LV_BTN_STATE_PR) ||
 8016824:	2801      	cmp	r0, #1
 8016826:	d0f6      	beq.n	8016816 <lv_btn_get_style+0x16>
            case LV_BTN_STYLE_PR: style = ext->styles[LV_BTN_STATE_PR]; break;
 8016828:	68a0      	ldr	r0, [r4, #8]
 801682a:	bd70      	pop	{r4, r5, r6, pc}
       (type == LV_BTN_STYLE_PR && state == LV_BTN_STATE_PR) ||
 801682c:	2d02      	cmp	r5, #2
 801682e:	d103      	bne.n	8016838 <lv_btn_get_style+0x38>
       (type == LV_BTN_STYLE_TGL_REL && state == LV_BTN_STATE_TGL_REL) ||
 8016830:	2802      	cmp	r0, #2
 8016832:	d0f0      	beq.n	8016816 <lv_btn_get_style+0x16>
            case LV_BTN_STYLE_TGL_REL: style = ext->styles[LV_BTN_STATE_TGL_REL]; break;
 8016834:	68e0      	ldr	r0, [r4, #12]
 8016836:	bd70      	pop	{r4, r5, r6, pc}
       (type == LV_BTN_STYLE_TGL_REL && state == LV_BTN_STATE_TGL_REL) ||
 8016838:	2d03      	cmp	r5, #3
 801683a:	d103      	bne.n	8016844 <lv_btn_get_style+0x44>
       (type == LV_BTN_STYLE_TGL_PR && state == LV_BTN_STATE_TGL_PR) ||
 801683c:	2803      	cmp	r0, #3
 801683e:	d0ea      	beq.n	8016816 <lv_btn_get_style+0x16>
            case LV_BTN_STYLE_TGL_PR: style = ext->styles[LV_BTN_STATE_TGL_PR]; break;
 8016840:	6920      	ldr	r0, [r4, #16]
 8016842:	bd70      	pop	{r4, r5, r6, pc}
       (type == LV_BTN_STYLE_TGL_PR && state == LV_BTN_STATE_TGL_PR) ||
 8016844:	2d04      	cmp	r5, #4
 8016846:	d105      	bne.n	8016854 <lv_btn_get_style+0x54>
       (type == LV_BTN_STYLE_INA && state == LV_BTN_STATE_INA)) {
 8016848:	2804      	cmp	r0, #4
 801684a:	d0e4      	beq.n	8016816 <lv_btn_get_style+0x16>
            case LV_BTN_STYLE_INA: style = ext->styles[LV_BTN_STATE_INA]; break;
 801684c:	6960      	ldr	r0, [r4, #20]
 801684e:	bd70      	pop	{r4, r5, r6, pc}
            case LV_BTN_STYLE_REL: style = ext->styles[LV_BTN_STATE_REL]; break;
 8016850:	6860      	ldr	r0, [r4, #4]
 8016852:	bd70      	pop	{r4, r5, r6, pc}
            default: style = NULL; break;
 8016854:	2000      	movs	r0, #0
}
 8016856:	bd70      	pop	{r4, r5, r6, pc}

08016858 <lv_cont_refr_autofit>:
/**
 * Handle auto fit. Set the size of the object to involve all children.
 * @param cont pointer to an object which size will be modified
 */
static void lv_cont_refr_autofit(lv_obj_t * cont)
{
 8016858:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801685c:	b08d      	sub	sp, #52	; 0x34
 801685e:	4604      	mov	r4, r0
    lv_cont_ext_t * ext = lv_obj_get_ext_attr(cont);
 8016860:	f7f9 fe8d 	bl	801057e <lv_obj_get_ext_attr>

    if(ext->fit_left == LV_FIT_NONE && ext->fit_right == LV_FIT_NONE && ext->fit_top == LV_FIT_NONE &&
 8016864:	7803      	ldrb	r3, [r0, #0]
 8016866:	f013 0ff0 	tst.w	r3, #240	; 0xf0
    lv_cont_ext_t * ext = lv_obj_get_ext_attr(cont);
 801686a:	4682      	mov	sl, r0
    if(ext->fit_left == LV_FIT_NONE && ext->fit_right == LV_FIT_NONE && ext->fit_top == LV_FIT_NONE &&
 801686c:	d103      	bne.n	8016876 <lv_cont_refr_autofit+0x1e>
 801686e:	7843      	ldrb	r3, [r0, #1]
 8016870:	071b      	lsls	r3, r3, #28
 8016872:	f000 80e8 	beq.w	8016a46 <lv_cont_refr_autofit+0x1ee>
        return;
    }

    lv_area_t tight_area;
    lv_area_t ori;
    const lv_style_t * style = lv_obj_get_style(cont);
 8016876:	4620      	mov	r0, r4
 8016878:	f7f9 fd96 	bl	80103a8 <lv_obj_get_style>
 801687c:	4683      	mov	fp, r0
    lv_obj_t * child_i;

    lv_obj_t * par               = lv_obj_get_parent(cont);
 801687e:	4620      	mov	r0, r4
 8016880:	f7f9 fd04 	bl	801028c <lv_obj_get_parent>
 8016884:	9002      	str	r0, [sp, #8]
    const lv_style_t * par_style = lv_obj_get_style(par);
 8016886:	f7f9 fd8f 	bl	80103a8 <lv_obj_get_style>
    memcpy(dest, src, sizeof(lv_area_t));
 801688a:	9902      	ldr	r1, [sp, #8]
 801688c:	4603      	mov	r3, r0
 801688e:	f851 0f10 	ldr.w	r0, [r1, #16]!
 8016892:	6849      	ldr	r1, [r1, #4]
 8016894:	aa08      	add	r2, sp, #32
 8016896:	c203      	stmia	r2!, {r0, r1}
    lv_area_t flood_area;
    lv_area_copy(&flood_area, &par->coords);
    flood_area.x1 += par_style->body.padding.left;
 8016898:	8b5a      	ldrh	r2, [r3, #26]
 801689a:	f8bd 8020 	ldrh.w	r8, [sp, #32]
    flood_area.x2 -= par_style->body.padding.right;
 801689e:	f8bd 7024 	ldrh.w	r7, [sp, #36]	; 0x24
    flood_area.y1 += par_style->body.padding.top;
 80168a2:	f8bd 6022 	ldrh.w	r6, [sp, #34]	; 0x22
    flood_area.y2 -= par_style->body.padding.bottom;
 80168a6:	f8bd 5026 	ldrh.w	r5, [sp, #38]	; 0x26
    flood_area.x1 += par_style->body.padding.left;
 80168aa:	4490      	add	r8, r2
    flood_area.x2 -= par_style->body.padding.right;
 80168ac:	8b9a      	ldrh	r2, [r3, #28]
 80168ae:	1abf      	subs	r7, r7, r2
    flood_area.y1 += par_style->body.padding.top;
 80168b0:	8ada      	ldrh	r2, [r3, #22]
    flood_area.y2 -= par_style->body.padding.bottom;
 80168b2:	8b1b      	ldrh	r3, [r3, #24]
    flood_area.y1 += par_style->body.padding.top;
 80168b4:	4416      	add	r6, r2
    flood_area.y2 -= par_style->body.padding.bottom;
 80168b6:	1aed      	subs	r5, r5, r3

    /*Search the side coordinates of the children*/
    lv_obj_get_coords(cont, &ori);
 80168b8:	a906      	add	r1, sp, #24
 80168ba:	4620      	mov	r0, r4
    flood_area.x1 += par_style->body.padding.left;
 80168bc:	fa0f f888 	sxth.w	r8, r8
    flood_area.x2 -= par_style->body.padding.right;
 80168c0:	b23f      	sxth	r7, r7
    flood_area.y1 += par_style->body.padding.top;
 80168c2:	b236      	sxth	r6, r6
    flood_area.y2 -= par_style->body.padding.bottom;
 80168c4:	b22d      	sxth	r5, r5
    flood_area.x1 += par_style->body.padding.left;
 80168c6:	f8ad 8020 	strh.w	r8, [sp, #32]
    flood_area.x2 -= par_style->body.padding.right;
 80168ca:	f8ad 7024 	strh.w	r7, [sp, #36]	; 0x24
    flood_area.y1 += par_style->body.padding.top;
 80168ce:	f8ad 6022 	strh.w	r6, [sp, #34]	; 0x22
    flood_area.y2 -= par_style->body.padding.bottom;
 80168d2:	f8ad 5026 	strh.w	r5, [sp, #38]	; 0x26
    lv_obj_get_coords(cont, &tight_area);

    bool has_children = lv_ll_is_empty(&cont->child_ll) ? false : true;
 80168d6:	f104 0904 	add.w	r9, r4, #4
    lv_obj_get_coords(cont, &ori);
 80168da:	f7f9 fd42 	bl	8010362 <lv_obj_get_coords>
    lv_obj_get_coords(cont, &tight_area);
 80168de:	a904      	add	r1, sp, #16
 80168e0:	4620      	mov	r0, r4
 80168e2:	f7f9 fd3e 	bl	8010362 <lv_obj_get_coords>
    bool has_children = lv_ll_is_empty(&cont->child_ll) ? false : true;
 80168e6:	4648      	mov	r0, r9
 80168e8:	f7fe fef9 	bl	80156de <lv_ll_is_empty>
 80168ec:	f080 0001 	eor.w	r0, r0, #1

    if(has_children) {
 80168f0:	f010 03ff 	ands.w	r3, r0, #255	; 0xff
 80168f4:	9301      	str	r3, [sp, #4]
 80168f6:	d02e      	beq.n	8016956 <lv_cont_refr_autofit+0xfe>
        tight_area.x1 = LV_COORD_MAX;
 80168f8:	f647 4318 	movw	r3, #31768	; 0x7c18
 80168fc:	f8ad 3010 	strh.w	r3, [sp, #16]
        tight_area.y1 = LV_COORD_MAX;
 8016900:	f8ad 3012 	strh.w	r3, [sp, #18]
        tight_area.x2 = LV_COORD_MIN;
        tight_area.y2 = LV_COORD_MIN;

        LV_LL_READ(cont->child_ll, child_i)
 8016904:	4648      	mov	r0, r9
        tight_area.x2 = LV_COORD_MIN;
 8016906:	f248 33e8 	movw	r3, #33768	; 0x83e8
 801690a:	f8ad 3014 	strh.w	r3, [sp, #20]
        tight_area.y2 = LV_COORD_MIN;
 801690e:	f8ad 3016 	strh.w	r3, [sp, #22]
        LV_LL_READ(cont->child_ll, child_i)
 8016912:	f7fe fdef 	bl	80154f4 <lv_ll_get_head>
 8016916:	4601      	mov	r1, r0
 8016918:	2800      	cmp	r0, #0
 801691a:	f040 8097 	bne.w	8016a4c <lv_cont_refr_autofit+0x1f4>
            tight_area.y1 = LV_MATH_MIN(tight_area.y1, child_i->coords.y1);
            tight_area.x2 = LV_MATH_MAX(tight_area.x2, child_i->coords.x2);
            tight_area.y2 = LV_MATH_MAX(tight_area.y2, child_i->coords.y2);
        }

        tight_area.x1 -= style->body.padding.left;
 801691e:	f8bd 3010 	ldrh.w	r3, [sp, #16]
 8016922:	f8bb 201a 	ldrh.w	r2, [fp, #26]
 8016926:	1a9b      	subs	r3, r3, r2
 8016928:	f8ad 3010 	strh.w	r3, [sp, #16]
        tight_area.x2 += style->body.padding.right;
 801692c:	f8bb 201c 	ldrh.w	r2, [fp, #28]
 8016930:	f8bd 3014 	ldrh.w	r3, [sp, #20]
 8016934:	4413      	add	r3, r2
 8016936:	f8ad 3014 	strh.w	r3, [sp, #20]
        tight_area.y1 -= style->body.padding.top;
 801693a:	f8bb 2016 	ldrh.w	r2, [fp, #22]
 801693e:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 8016942:	1a9b      	subs	r3, r3, r2
 8016944:	f8ad 3012 	strh.w	r3, [sp, #18]
        tight_area.y2 += style->body.padding.bottom;
 8016948:	f8bb 2018 	ldrh.w	r2, [fp, #24]
 801694c:	f8bd 3016 	ldrh.w	r3, [sp, #22]
 8016950:	4413      	add	r3, r2
 8016952:	f8ad 3016 	strh.w	r3, [sp, #22]
 8016956:	ab06      	add	r3, sp, #24
 8016958:	e893 0003 	ldmia.w	r3, {r0, r1}
    }

    lv_area_t new_area;
    lv_area_copy(&new_area, &ori);

    switch(ext->fit_left) {
 801695c:	f89a 3000 	ldrb.w	r3, [sl]
 8016960:	f3c3 1201 	ubfx	r2, r3, #4, #2
 8016964:	f10d 0b28 	add.w	fp, sp, #40	; 0x28
 8016968:	2a02      	cmp	r2, #2
 801696a:	e88b 0003 	stmia.w	fp, {r0, r1}
 801696e:	f000 80a2 	beq.w	8016ab6 <lv_cont_refr_autofit+0x25e>
 8016972:	f200 8099 	bhi.w	8016aa8 <lv_cont_refr_autofit+0x250>
 8016976:	2a01      	cmp	r2, #1
 8016978:	d103      	bne.n	8016982 <lv_cont_refr_autofit+0x12a>
        case LV_FIT_TIGHT: new_area.x1 = tight_area.x1; break;
 801697a:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 801697e:	f8ad 2028 	strh.w	r2, [sp, #40]	; 0x28
        case LV_FIT_FLOOD: new_area.x1 = flood_area.x1; break;
        case LV_FIT_FILL: new_area.x1 = has_children ? LV_MATH_MIN(tight_area.x1, flood_area.x1) : flood_area.x1; break;
        default: break;
    }

    switch(ext->fit_right) {
 8016982:	099b      	lsrs	r3, r3, #6
 8016984:	2b02      	cmp	r3, #2
 8016986:	f000 80a0 	beq.w	8016aca <lv_cont_refr_autofit+0x272>
 801698a:	f200 8097 	bhi.w	8016abc <lv_cont_refr_autofit+0x264>
 801698e:	2b01      	cmp	r3, #1
 8016990:	d103      	bne.n	801699a <lv_cont_refr_autofit+0x142>
        case LV_FIT_TIGHT: new_area.x2 = tight_area.x2; break;
 8016992:	f8bd 3014 	ldrh.w	r3, [sp, #20]
 8016996:	f8ad 302c 	strh.w	r3, [sp, #44]	; 0x2c
        case LV_FIT_FLOOD: new_area.x2 = flood_area.x2; break;
        case LV_FIT_FILL: new_area.x2 = has_children ? LV_MATH_MAX(tight_area.x2, flood_area.x2) : flood_area.x2; break;
        default: break;
    }

    switch(ext->fit_top) {
 801699a:	f89a 3001 	ldrb.w	r3, [sl, #1]
 801699e:	f003 0203 	and.w	r2, r3, #3
 80169a2:	2a02      	cmp	r2, #2
 80169a4:	f000 809b 	beq.w	8016ade <lv_cont_refr_autofit+0x286>
 80169a8:	f200 8092 	bhi.w	8016ad0 <lv_cont_refr_autofit+0x278>
 80169ac:	2a01      	cmp	r2, #1
 80169ae:	d103      	bne.n	80169b8 <lv_cont_refr_autofit+0x160>
        case LV_FIT_TIGHT: new_area.y1 = tight_area.y1; break;
 80169b0:	f8bd 2012 	ldrh.w	r2, [sp, #18]
 80169b4:	f8ad 202a 	strh.w	r2, [sp, #42]	; 0x2a
        case LV_FIT_FLOOD: new_area.y1 = flood_area.y1; break;
        case LV_FIT_FILL: new_area.y1 = has_children ? LV_MATH_MIN(tight_area.y1, flood_area.y1) : flood_area.y1; break;
        default: break;
    }

    switch(ext->fit_bottom) {
 80169b8:	f3c3 0381 	ubfx	r3, r3, #2, #2
 80169bc:	2b02      	cmp	r3, #2
 80169be:	f000 8098 	beq.w	8016af2 <lv_cont_refr_autofit+0x29a>
 80169c2:	f200 808f 	bhi.w	8016ae4 <lv_cont_refr_autofit+0x28c>
 80169c6:	2b01      	cmp	r3, #1
 80169c8:	d103      	bne.n	80169d2 <lv_cont_refr_autofit+0x17a>
        case LV_FIT_TIGHT: new_area.y2 = tight_area.y2; break;
 80169ca:	f8bd 3016 	ldrh.w	r3, [sp, #22]
 80169ce:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
        case LV_FIT_FILL: new_area.y2 = has_children ? LV_MATH_MAX(tight_area.y2, flood_area.y2) : flood_area.y2; break;
        default: break;
    }

    /*Do nothing if the coordinates are not changed*/
    if(cont->coords.x1 != new_area.x1 || cont->coords.y1 != new_area.y1 || cont->coords.x2 != new_area.x2 ||
 80169d2:	f9b4 2010 	ldrsh.w	r2, [r4, #16]
 80169d6:	f9bd 3028 	ldrsh.w	r3, [sp, #40]	; 0x28
 80169da:	429a      	cmp	r2, r3
 80169dc:	d111      	bne.n	8016a02 <lv_cont_refr_autofit+0x1aa>
 80169de:	f9b4 2012 	ldrsh.w	r2, [r4, #18]
 80169e2:	f9bd 302a 	ldrsh.w	r3, [sp, #42]	; 0x2a
 80169e6:	429a      	cmp	r2, r3
 80169e8:	d10b      	bne.n	8016a02 <lv_cont_refr_autofit+0x1aa>
 80169ea:	f9b4 2014 	ldrsh.w	r2, [r4, #20]
 80169ee:	f9bd 302c 	ldrsh.w	r3, [sp, #44]	; 0x2c
 80169f2:	429a      	cmp	r2, r3
 80169f4:	d105      	bne.n	8016a02 <lv_cont_refr_autofit+0x1aa>
 80169f6:	f9b4 2016 	ldrsh.w	r2, [r4, #22]
 80169fa:	f9bd 302e 	ldrsh.w	r3, [sp, #46]	; 0x2e
 80169fe:	429a      	cmp	r2, r3
 8016a00:	d021      	beq.n	8016a46 <lv_cont_refr_autofit+0x1ee>
       cont->coords.y2 != new_area.y2) {

        lv_obj_invalidate(cont);
 8016a02:	4620      	mov	r0, r4
 8016a04:	f7f8 ff02 	bl	800f80c <lv_obj_invalidate>
 8016a08:	465b      	mov	r3, fp
 8016a0a:	cb03      	ldmia	r3!, {r0, r1}
 8016a0c:	6120      	str	r0, [r4, #16]
 8016a0e:	6161      	str	r1, [r4, #20]
        lv_area_copy(&cont->coords, &new_area);
        lv_obj_invalidate(cont);
 8016a10:	4620      	mov	r0, r4
 8016a12:	f7f8 fefb 	bl	800f80c <lv_obj_invalidate>

        /*Notify the object about its new coordinates*/
        cont->signal_cb(cont, LV_SIGNAL_CORD_CHG, &ori);
 8016a16:	69e3      	ldr	r3, [r4, #28]
 8016a18:	aa06      	add	r2, sp, #24
 8016a1a:	2102      	movs	r1, #2
 8016a1c:	4620      	mov	r0, r4
 8016a1e:	4798      	blx	r3

        /*Inform the parent about the new coordinates*/
        par->signal_cb(par, LV_SIGNAL_CHILD_CHG, cont);
 8016a20:	9b02      	ldr	r3, [sp, #8]
 8016a22:	9802      	ldr	r0, [sp, #8]
 8016a24:	69db      	ldr	r3, [r3, #28]
 8016a26:	4622      	mov	r2, r4
 8016a28:	2101      	movs	r1, #1
 8016a2a:	4798      	blx	r3

        if(lv_obj_get_auto_realign(cont)) {
 8016a2c:	4620      	mov	r0, r4
 8016a2e:	f7f9 fcb6 	bl	801039e <lv_obj_get_auto_realign>
 8016a32:	b110      	cbz	r0, 8016a3a <lv_cont_refr_autofit+0x1e2>
            lv_obj_realign(cont);
 8016a34:	4620      	mov	r0, r4
 8016a36:	f7f9 f9b7 	bl	800fda8 <lv_obj_realign>
        }

        /*Tell the children the parent's size has changed*/
        LV_LL_READ(cont->child_ll, child_i)
 8016a3a:	4648      	mov	r0, r9
 8016a3c:	f7fe fd5a 	bl	80154f4 <lv_ll_get_head>
 8016a40:	4604      	mov	r4, r0
 8016a42:	2800      	cmp	r0, #0
 8016a44:	d158      	bne.n	8016af8 <lv_cont_refr_autofit+0x2a0>
        {
            child_i->signal_cb(child_i, LV_SIGNAL_PARENT_SIZE_CHG, NULL);
        }
    }
}
 8016a46:	b00d      	add	sp, #52	; 0x34
 8016a48:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            if(lv_obj_get_hidden(child_i) != false) continue;
 8016a4c:	4608      	mov	r0, r1
 8016a4e:	9103      	str	r1, [sp, #12]
 8016a50:	f7f9 fd28 	bl	80104a4 <lv_obj_get_hidden>
 8016a54:	9903      	ldr	r1, [sp, #12]
 8016a56:	bb18      	cbnz	r0, 8016aa0 <lv_cont_refr_autofit+0x248>
            tight_area.x1 = LV_MATH_MIN(tight_area.x1, child_i->coords.x1);
 8016a58:	f9b1 3010 	ldrsh.w	r3, [r1, #16]
 8016a5c:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 8016a60:	4293      	cmp	r3, r2
 8016a62:	bfa8      	it	ge
 8016a64:	4613      	movge	r3, r2
 8016a66:	f8ad 3010 	strh.w	r3, [sp, #16]
            tight_area.y1 = LV_MATH_MIN(tight_area.y1, child_i->coords.y1);
 8016a6a:	f9bd 2012 	ldrsh.w	r2, [sp, #18]
 8016a6e:	f9b1 3012 	ldrsh.w	r3, [r1, #18]
 8016a72:	4293      	cmp	r3, r2
 8016a74:	bfa8      	it	ge
 8016a76:	4613      	movge	r3, r2
 8016a78:	f8ad 3012 	strh.w	r3, [sp, #18]
            tight_area.x2 = LV_MATH_MAX(tight_area.x2, child_i->coords.x2);
 8016a7c:	f9bd 2014 	ldrsh.w	r2, [sp, #20]
 8016a80:	f9b1 3014 	ldrsh.w	r3, [r1, #20]
 8016a84:	4293      	cmp	r3, r2
 8016a86:	bfb8      	it	lt
 8016a88:	4613      	movlt	r3, r2
 8016a8a:	f8ad 3014 	strh.w	r3, [sp, #20]
            tight_area.y2 = LV_MATH_MAX(tight_area.y2, child_i->coords.y2);
 8016a8e:	f9bd 2016 	ldrsh.w	r2, [sp, #22]
 8016a92:	f9b1 3016 	ldrsh.w	r3, [r1, #22]
 8016a96:	4293      	cmp	r3, r2
 8016a98:	bfb8      	it	lt
 8016a9a:	4613      	movlt	r3, r2
 8016a9c:	f8ad 3016 	strh.w	r3, [sp, #22]
        LV_LL_READ(cont->child_ll, child_i)
 8016aa0:	4648      	mov	r0, r9
 8016aa2:	f7fe fd2d 	bl	8015500 <lv_ll_get_next>
 8016aa6:	e736      	b.n	8016916 <lv_cont_refr_autofit+0xbe>
        case LV_FIT_FILL: new_area.x1 = has_children ? LV_MATH_MIN(tight_area.x1, flood_area.x1) : flood_area.x1; break;
 8016aa8:	9a01      	ldr	r2, [sp, #4]
 8016aaa:	b122      	cbz	r2, 8016ab6 <lv_cont_refr_autofit+0x25e>
 8016aac:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 8016ab0:	4590      	cmp	r8, r2
 8016ab2:	bfa8      	it	ge
 8016ab4:	4690      	movge	r8, r2
 8016ab6:	f8ad 8028 	strh.w	r8, [sp, #40]	; 0x28
 8016aba:	e762      	b.n	8016982 <lv_cont_refr_autofit+0x12a>
        case LV_FIT_FILL: new_area.x2 = has_children ? LV_MATH_MAX(tight_area.x2, flood_area.x2) : flood_area.x2; break;
 8016abc:	9b01      	ldr	r3, [sp, #4]
 8016abe:	b123      	cbz	r3, 8016aca <lv_cont_refr_autofit+0x272>
 8016ac0:	f9bd 3014 	ldrsh.w	r3, [sp, #20]
 8016ac4:	429f      	cmp	r7, r3
 8016ac6:	bfb8      	it	lt
 8016ac8:	461f      	movlt	r7, r3
 8016aca:	f8ad 702c 	strh.w	r7, [sp, #44]	; 0x2c
 8016ace:	e764      	b.n	801699a <lv_cont_refr_autofit+0x142>
        case LV_FIT_FILL: new_area.y1 = has_children ? LV_MATH_MIN(tight_area.y1, flood_area.y1) : flood_area.y1; break;
 8016ad0:	9a01      	ldr	r2, [sp, #4]
 8016ad2:	b122      	cbz	r2, 8016ade <lv_cont_refr_autofit+0x286>
 8016ad4:	f9bd 2012 	ldrsh.w	r2, [sp, #18]
 8016ad8:	4296      	cmp	r6, r2
 8016ada:	bfa8      	it	ge
 8016adc:	4616      	movge	r6, r2
 8016ade:	f8ad 602a 	strh.w	r6, [sp, #42]	; 0x2a
 8016ae2:	e769      	b.n	80169b8 <lv_cont_refr_autofit+0x160>
        case LV_FIT_FILL: new_area.y2 = has_children ? LV_MATH_MAX(tight_area.y2, flood_area.y2) : flood_area.y2; break;
 8016ae4:	9b01      	ldr	r3, [sp, #4]
 8016ae6:	b123      	cbz	r3, 8016af2 <lv_cont_refr_autofit+0x29a>
 8016ae8:	f9bd 3016 	ldrsh.w	r3, [sp, #22]
 8016aec:	429d      	cmp	r5, r3
 8016aee:	bfb8      	it	lt
 8016af0:	461d      	movlt	r5, r3
 8016af2:	f8ad 502e 	strh.w	r5, [sp, #46]	; 0x2e
 8016af6:	e76c      	b.n	80169d2 <lv_cont_refr_autofit+0x17a>
            child_i->signal_cb(child_i, LV_SIGNAL_PARENT_SIZE_CHG, NULL);
 8016af8:	69e3      	ldr	r3, [r4, #28]
 8016afa:	2200      	movs	r2, #0
 8016afc:	2103      	movs	r1, #3
 8016afe:	4620      	mov	r0, r4
 8016b00:	4798      	blx	r3
        LV_LL_READ(cont->child_ll, child_i)
 8016b02:	4621      	mov	r1, r4
 8016b04:	4648      	mov	r0, r9
 8016b06:	f7fe fcfb 	bl	8015500 <lv_ll_get_next>
 8016b0a:	e799      	b.n	8016a40 <lv_cont_refr_autofit+0x1e8>

08016b0c <lv_cont_create>:
{
 8016b0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016b0e:	4607      	mov	r7, r0
 8016b10:	460e      	mov	r6, r1
    lv_obj_t * new_cont = lv_obj_create(par, copy);
 8016b12:	f7f9 f95f 	bl	800fdd4 <lv_obj_create>
    lv_mem_assert(new_cont);
 8016b16:	4605      	mov	r5, r0
 8016b18:	b900      	cbnz	r0, 8016b1c <lv_cont_create+0x10>
 8016b1a:	e7fe      	b.n	8016b1a <lv_cont_create+0xe>
    if(ancestor_signal == NULL) ancestor_signal = lv_obj_get_signal_cb(new_cont);
 8016b1c:	4c29      	ldr	r4, [pc, #164]	; (8016bc4 <lv_cont_create+0xb8>)
 8016b1e:	6823      	ldr	r3, [r4, #0]
 8016b20:	b913      	cbnz	r3, 8016b28 <lv_cont_create+0x1c>
 8016b22:	f7f9 fd28 	bl	8010576 <lv_obj_get_signal_cb>
 8016b26:	6020      	str	r0, [r4, #0]
    lv_obj_allocate_ext_attr(new_cont, sizeof(lv_cont_ext_t));
 8016b28:	2102      	movs	r1, #2
 8016b2a:	4628      	mov	r0, r5
 8016b2c:	f7f8 fe40 	bl	800f7b0 <lv_obj_allocate_ext_attr>
    lv_cont_ext_t * ext = lv_obj_get_ext_attr(new_cont);
 8016b30:	4628      	mov	r0, r5
 8016b32:	f7f9 fd24 	bl	801057e <lv_obj_get_ext_attr>
    if(ext == NULL) return NULL;
 8016b36:	4604      	mov	r4, r0
 8016b38:	2800      	cmp	r0, #0
 8016b3a:	d041      	beq.n	8016bc0 <lv_cont_create+0xb4>
    ext->fit_left   = LV_FIT_NONE;
 8016b3c:	7803      	ldrb	r3, [r0, #0]
    ext->fit_top    = LV_FIT_NONE;
 8016b3e:	7842      	ldrb	r2, [r0, #1]
    lv_obj_set_signal_cb(new_cont, lv_cont_signal);
 8016b40:	4921      	ldr	r1, [pc, #132]	; (8016bc8 <lv_cont_create+0xbc>)
    ext->fit_bottom = LV_FIT_NONE;
 8016b42:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
    ext->layout     = LV_LAYOUT_OFF;
 8016b46:	f003 030f 	and.w	r3, r3, #15
    ext->fit_bottom = LV_FIT_NONE;
 8016b4a:	f36f 0283 	bfc	r2, #2, #2
    ext->layout     = LV_LAYOUT_OFF;
 8016b4e:	f36f 0303 	bfc	r3, #0, #4
    ext->fit_bottom = LV_FIT_NONE;
 8016b52:	7042      	strb	r2, [r0, #1]
    ext->layout     = LV_LAYOUT_OFF;
 8016b54:	7003      	strb	r3, [r0, #0]
    lv_obj_set_signal_cb(new_cont, lv_cont_signal);
 8016b56:	4628      	mov	r0, r5
 8016b58:	f7f8 fe26 	bl	800f7a8 <lv_obj_set_signal_cb>
    if(copy == NULL) {
 8016b5c:	b95e      	cbnz	r6, 8016b76 <lv_cont_create+0x6a>
        if(par != NULL) {
 8016b5e:	b137      	cbz	r7, 8016b6e <lv_cont_create+0x62>
            lv_theme_t * th = lv_theme_get_current();
 8016b60:	f003 fe92 	bl	801a888 <lv_theme_get_current>
            if(th) {
 8016b64:	b128      	cbz	r0, 8016b72 <lv_cont_create+0x66>
 * @param style pointer to the new style
 */
static inline void lv_cont_set_style(lv_obj_t * cont, lv_cont_style_t type, const lv_style_t * style)
{
    (void)type; /*Unused*/
    lv_obj_set_style(cont, style);
 8016b66:	68c1      	ldr	r1, [r0, #12]
 8016b68:	4628      	mov	r0, r5
 8016b6a:	f7f9 fbb3 	bl	80102d4 <lv_obj_set_style>
}
 8016b6e:	4628      	mov	r0, r5
 8016b70:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8016b72:	4916      	ldr	r1, [pc, #88]	; (8016bcc <lv_cont_create+0xc0>)
 8016b74:	e7f8      	b.n	8016b68 <lv_cont_create+0x5c>
        lv_cont_ext_t * copy_ext = lv_obj_get_ext_attr(copy);
 8016b76:	4630      	mov	r0, r6
 8016b78:	f7f9 fd01 	bl	801057e <lv_obj_get_ext_attr>
        ext->fit_left            = copy_ext->fit_left;
 8016b7c:	7803      	ldrb	r3, [r0, #0]
 8016b7e:	7822      	ldrb	r2, [r4, #0]
 8016b80:	f3c3 1301 	ubfx	r3, r3, #4, #2
 8016b84:	f363 1205 	bfi	r2, r3, #4, #2
 8016b88:	7022      	strb	r2, [r4, #0]
        ext->fit_right           = copy_ext->fit_right;
 8016b8a:	7803      	ldrb	r3, [r0, #0]
 8016b8c:	b2d2      	uxtb	r2, r2
 8016b8e:	099b      	lsrs	r3, r3, #6
 8016b90:	f363 1287 	bfi	r2, r3, #6, #2
 8016b94:	7022      	strb	r2, [r4, #0]
        ext->fit_top             = copy_ext->fit_top;
 8016b96:	7842      	ldrb	r2, [r0, #1]
 8016b98:	7863      	ldrb	r3, [r4, #1]
 8016b9a:	f362 0301 	bfi	r3, r2, #0, #2
 8016b9e:	7063      	strb	r3, [r4, #1]
        ext->fit_bottom          = copy_ext->fit_bottom;
 8016ba0:	7843      	ldrb	r3, [r0, #1]
 8016ba2:	7862      	ldrb	r2, [r4, #1]
 8016ba4:	f3c3 0381 	ubfx	r3, r3, #2, #2
 8016ba8:	f363 0283 	bfi	r2, r3, #2, #2
 8016bac:	7062      	strb	r2, [r4, #1]
        ext->layout              = copy_ext->layout;
 8016bae:	7802      	ldrb	r2, [r0, #0]
 8016bb0:	7823      	ldrb	r3, [r4, #0]
 8016bb2:	f362 0303 	bfi	r3, r2, #0, #4
 8016bb6:	7023      	strb	r3, [r4, #0]
        lv_obj_refresh_style(new_cont);
 8016bb8:	4628      	mov	r0, r5
 8016bba:	f7f9 fae2 	bl	8010182 <lv_obj_refresh_style>
 8016bbe:	e7d6      	b.n	8016b6e <lv_cont_create+0x62>
    if(ext == NULL) return NULL;
 8016bc0:	4605      	mov	r5, r0
 8016bc2:	e7d4      	b.n	8016b6e <lv_cont_create+0x62>
 8016bc4:	2000b234 	.word	0x2000b234
 8016bc8:	080171bd 	.word	0x080171bd
 8016bcc:	2000c5b8 	.word	0x2000c5b8

08016bd0 <lv_cont_set_layout>:
{
 8016bd0:	b570      	push	{r4, r5, r6, lr}
 8016bd2:	460d      	mov	r5, r1
 8016bd4:	4604      	mov	r4, r0
    lv_cont_ext_t * ext = lv_obj_get_ext_attr(cont);
 8016bd6:	f7f9 fcd2 	bl	801057e <lv_obj_get_ext_attr>
    if(ext->layout == layout) return;
 8016bda:	7803      	ldrb	r3, [r0, #0]
 8016bdc:	f003 020f 	and.w	r2, r3, #15
 8016be0:	42aa      	cmp	r2, r5
 8016be2:	d009      	beq.n	8016bf8 <lv_cont_set_layout+0x28>
    ext->layout = layout;
 8016be4:	f365 0303 	bfi	r3, r5, #0, #4
 8016be8:	7003      	strb	r3, [r0, #0]
    cont->signal_cb(cont, LV_SIGNAL_CHILD_CHG, NULL);
 8016bea:	2200      	movs	r2, #0
 8016bec:	69e3      	ldr	r3, [r4, #28]
 8016bee:	4620      	mov	r0, r4
 8016bf0:	2101      	movs	r1, #1
}
 8016bf2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    cont->signal_cb(cont, LV_SIGNAL_CHILD_CHG, NULL);
 8016bf6:	4718      	bx	r3
 8016bf8:	bd70      	pop	{r4, r5, r6, pc}

08016bfa <lv_cont_set_fit4>:
{
 8016bfa:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8016bfe:	4605      	mov	r5, r0
 8016c00:	4689      	mov	r9, r1
 8016c02:	4690      	mov	r8, r2
 8016c04:	461f      	mov	r7, r3
 8016c06:	f89d 6020 	ldrb.w	r6, [sp, #32]
    lv_obj_invalidate(cont);
 8016c0a:	f7f8 fdff 	bl	800f80c <lv_obj_invalidate>
    lv_cont_ext_t * ext = lv_obj_get_ext_attr(cont);
 8016c0e:	4628      	mov	r0, r5
 8016c10:	f7f9 fcb5 	bl	801057e <lv_obj_get_ext_attr>
    if(ext->fit_left == left && ext->fit_right == right && ext->fit_top == top && ext->fit_bottom == bottom) {
 8016c14:	7803      	ldrb	r3, [r0, #0]
 8016c16:	f3c3 1201 	ubfx	r2, r3, #4, #2
 8016c1a:	454a      	cmp	r2, r9
 8016c1c:	d10b      	bne.n	8016c36 <lv_cont_set_fit4+0x3c>
 8016c1e:	ebb8 1f93 	cmp.w	r8, r3, lsr #6
 8016c22:	d108      	bne.n	8016c36 <lv_cont_set_fit4+0x3c>
 8016c24:	7844      	ldrb	r4, [r0, #1]
 8016c26:	f004 0303 	and.w	r3, r4, #3
 8016c2a:	42bb      	cmp	r3, r7
 8016c2c:	d103      	bne.n	8016c36 <lv_cont_set_fit4+0x3c>
 8016c2e:	f3c4 0481 	ubfx	r4, r4, #2, #2
 8016c32:	42b4      	cmp	r4, r6
 8016c34:	d014      	beq.n	8016c60 <lv_cont_set_fit4+0x66>
    ext->fit_left   = left;
 8016c36:	7804      	ldrb	r4, [r0, #0]
    ext->fit_top    = top;
 8016c38:	7842      	ldrb	r2, [r0, #1]
    ext->fit_left   = left;
 8016c3a:	f369 1405 	bfi	r4, r9, #4, #2
    ext->fit_top    = top;
 8016c3e:	f367 0201 	bfi	r2, r7, #0, #2
    ext->fit_right  = right;
 8016c42:	4621      	mov	r1, r4
    ext->fit_bottom = bottom;
 8016c44:	4613      	mov	r3, r2
    ext->fit_right  = right;
 8016c46:	f368 1187 	bfi	r1, r8, #6, #2
    ext->fit_bottom = bottom;
 8016c4a:	f366 0383 	bfi	r3, r6, #2, #2
    ext->fit_right  = right;
 8016c4e:	7001      	strb	r1, [r0, #0]
    ext->fit_bottom = bottom;
 8016c50:	7043      	strb	r3, [r0, #1]
    cont->signal_cb(cont, LV_SIGNAL_CHILD_CHG, NULL);
 8016c52:	2200      	movs	r2, #0
 8016c54:	69eb      	ldr	r3, [r5, #28]
 8016c56:	4628      	mov	r0, r5
 8016c58:	2101      	movs	r1, #1
}
 8016c5a:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    cont->signal_cb(cont, LV_SIGNAL_CHILD_CHG, NULL);
 8016c5e:	4718      	bx	r3
 8016c60:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08016c64 <lv_cont_get_layout>:
{
 8016c64:	b508      	push	{r3, lr}
    lv_cont_ext_t * ext = lv_obj_get_ext_attr(cont);
 8016c66:	f7f9 fc8a 	bl	801057e <lv_obj_get_ext_attr>
    return ext->layout;
 8016c6a:	7800      	ldrb	r0, [r0, #0]
}
 8016c6c:	f000 000f 	and.w	r0, r0, #15
 8016c70:	bd08      	pop	{r3, pc}

08016c72 <lv_cont_refr_layout>:
{
 8016c72:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016c76:	b087      	sub	sp, #28
 8016c78:	4604      	mov	r4, r0
    lv_layout_t type = lv_cont_get_layout(cont);
 8016c7a:	f7ff fff3 	bl	8016c64 <lv_cont_get_layout>
    if(lv_obj_get_child(cont, NULL) == NULL) return;
 8016c7e:	2100      	movs	r1, #0
    lv_layout_t type = lv_cont_get_layout(cont);
 8016c80:	4605      	mov	r5, r0
    if(lv_obj_get_child(cont, NULL) == NULL) return;
 8016c82:	4620      	mov	r0, r4
 8016c84:	f7f9 fb04 	bl	8010290 <lv_obj_get_child>
 8016c88:	2800      	cmp	r0, #0
 8016c8a:	f000 8293 	beq.w	80171b4 <lv_cont_refr_layout+0x542>
    if(type == LV_LAYOUT_OFF) return;
 8016c8e:	2d00      	cmp	r5, #0
 8016c90:	f000 8290 	beq.w	80171b4 <lv_cont_refr_layout+0x542>
    if(type == LV_LAYOUT_CENTER) {
 8016c94:	2d01      	cmp	r5, #1
 8016c96:	d16a      	bne.n	8016d6e <lv_cont_refr_layout+0xfc>
    const lv_style_t * style = lv_obj_get_style(cont);
 8016c98:	4620      	mov	r0, r4
 8016c9a:	f7f9 fb85 	bl	80103a8 <lv_obj_get_style>
    LV_LL_READ(cont->child_ll, child)
 8016c9e:	1d26      	adds	r6, r4, #4
    const lv_style_t * style = lv_obj_get_style(cont);
 8016ca0:	4607      	mov	r7, r0
    LV_LL_READ(cont->child_ll, child)
 8016ca2:	4630      	mov	r0, r6
 8016ca4:	f7fe fc26 	bl	80154f4 <lv_ll_get_head>
    lv_coord_t h_tot         = 0;
 8016ca8:	2500      	movs	r5, #0
    LV_LL_READ(cont->child_ll, child)
 8016caa:	4680      	mov	r8, r0
    uint32_t obj_num         = 0;
 8016cac:	46a9      	mov	r9, r5
    LV_LL_READ(cont->child_ll, child)
 8016cae:	f1b8 0f00 	cmp.w	r8, #0
 8016cb2:	d11d      	bne.n	8016cf0 <lv_cont_refr_layout+0x7e>
    if(obj_num == 0) return;
 8016cb4:	f1b9 0f00 	cmp.w	r9, #0
 8016cb8:	f000 827c 	beq.w	80171b4 <lv_cont_refr_layout+0x542>
    h_tot -= style->body.padding.inner;
 8016cbc:	8bf8      	ldrh	r0, [r7, #30]
 8016cbe:	1a2d      	subs	r5, r5, r0
 8016cc0:	b2ad      	uxth	r5, r5
    lv_obj_set_protect(cont, LV_PROTECT_CHILD_CHG);
 8016cc2:	4620      	mov	r0, r4
 8016cc4:	2101      	movs	r1, #1
 8016cc6:	f7f8 fcb7 	bl	800f638 <lv_obj_set_protect>
    lv_coord_t last_cord = -(h_tot / 2);
 8016cca:	b22d      	sxth	r5, r5
 8016ccc:	f04f 0902 	mov.w	r9, #2
    LV_LL_READ_BACK(cont->child_ll, child)
 8016cd0:	4630      	mov	r0, r6
    lv_coord_t last_cord = -(h_tot / 2);
 8016cd2:	fb95 f5f9 	sdiv	r5, r5, r9
 8016cd6:	426d      	negs	r5, r5
 8016cd8:	b22d      	sxth	r5, r5
    LV_LL_READ_BACK(cont->child_ll, child)
 8016cda:	f7fe fc0e 	bl	80154fa <lv_ll_get_tail>
 8016cde:	4680      	mov	r8, r0
 8016ce0:	b9f8      	cbnz	r0, 8016d22 <lv_cont_refr_layout+0xb0>
    lv_obj_clear_protect(cont, LV_PROTECT_CHILD_CHG);
 8016ce2:	2101      	movs	r1, #1
 8016ce4:	4620      	mov	r0, r4
}
 8016ce6:	b007      	add	sp, #28
 8016ce8:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    lv_obj_clear_protect(cont, LV_PROTECT_CHILD_CHG);
 8016cec:	f7f8 bcaa 	b.w	800f644 <lv_obj_clear_protect>
        if(lv_obj_get_hidden(child) != false || lv_obj_is_protected(child, LV_PROTECT_POS) != false) continue;
 8016cf0:	4640      	mov	r0, r8
 8016cf2:	f7f9 fbd7 	bl	80104a4 <lv_obj_get_hidden>
 8016cf6:	b970      	cbnz	r0, 8016d16 <lv_cont_refr_layout+0xa4>
 8016cf8:	2104      	movs	r1, #4
 8016cfa:	4640      	mov	r0, r8
 8016cfc:	f7f9 fc34 	bl	8010568 <lv_obj_is_protected>
 8016d00:	b948      	cbnz	r0, 8016d16 <lv_cont_refr_layout+0xa4>
        h_tot += lv_obj_get_height(child) + style->body.padding.inner;
 8016d02:	4640      	mov	r0, r8
 8016d04:	f7f9 fb45 	bl	8010392 <lv_obj_get_height>
 8016d08:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8016d0c:	4418      	add	r0, r3
 8016d0e:	4405      	add	r5, r0
 8016d10:	b22d      	sxth	r5, r5
        obj_num++;
 8016d12:	f109 0901 	add.w	r9, r9, #1
    LV_LL_READ(cont->child_ll, child)
 8016d16:	4641      	mov	r1, r8
 8016d18:	4630      	mov	r0, r6
 8016d1a:	f7fe fbf1 	bl	8015500 <lv_ll_get_next>
 8016d1e:	4680      	mov	r8, r0
 8016d20:	e7c5      	b.n	8016cae <lv_cont_refr_layout+0x3c>
        if(lv_obj_get_hidden(child) != false || lv_obj_is_protected(child, LV_PROTECT_POS) != false) continue;
 8016d22:	4640      	mov	r0, r8
 8016d24:	f7f9 fbbe 	bl	80104a4 <lv_obj_get_hidden>
 8016d28:	b9e0      	cbnz	r0, 8016d64 <lv_cont_refr_layout+0xf2>
 8016d2a:	2104      	movs	r1, #4
 8016d2c:	4640      	mov	r0, r8
 8016d2e:	f7f9 fc1b 	bl	8010568 <lv_obj_is_protected>
 8016d32:	4682      	mov	sl, r0
 8016d34:	b9b0      	cbnz	r0, 8016d64 <lv_cont_refr_layout+0xf2>
        lv_obj_align(child, cont, LV_ALIGN_CENTER, 0, last_cord + lv_obj_get_height(child) / 2);
 8016d36:	4640      	mov	r0, r8
 8016d38:	f7f9 fb2b 	bl	8010392 <lv_obj_get_height>
 8016d3c:	b2ad      	uxth	r5, r5
 8016d3e:	fb90 f0f9 	sdiv	r0, r0, r9
 8016d42:	4428      	add	r0, r5
 8016d44:	b200      	sxth	r0, r0
 8016d46:	4653      	mov	r3, sl
 8016d48:	9000      	str	r0, [sp, #0]
 8016d4a:	4652      	mov	r2, sl
 8016d4c:	4621      	mov	r1, r4
 8016d4e:	4640      	mov	r0, r8
 8016d50:	f7f8 fe1e 	bl	800f990 <lv_obj_align>
        last_cord += lv_obj_get_height(child) + style->body.padding.inner;
 8016d54:	4640      	mov	r0, r8
 8016d56:	f7f9 fb1c 	bl	8010392 <lv_obj_get_height>
 8016d5a:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8016d5e:	4418      	add	r0, r3
 8016d60:	4405      	add	r5, r0
 8016d62:	b22d      	sxth	r5, r5
    LV_LL_READ_BACK(cont->child_ll, child)
 8016d64:	4641      	mov	r1, r8
 8016d66:	4630      	mov	r0, r6
 8016d68:	f7fe fbcf 	bl	801550a <lv_ll_get_prev>
 8016d6c:	e7b7      	b.n	8016cde <lv_cont_refr_layout+0x6c>
    } else if(type == LV_LAYOUT_COL_L || type == LV_LAYOUT_COL_M || type == LV_LAYOUT_COL_R) {
 8016d6e:	1eab      	subs	r3, r5, #2
 8016d70:	b2db      	uxtb	r3, r3
 8016d72:	2b02      	cmp	r3, #2
 8016d74:	d84a      	bhi.n	8016e0c <lv_cont_refr_layout+0x19a>
    lv_layout_t type = lv_cont_get_layout(cont);
 8016d76:	4620      	mov	r0, r4
 8016d78:	f7ff ff74 	bl	8016c64 <lv_cont_get_layout>
 8016d7c:	4605      	mov	r5, r0
    const lv_style_t * style = lv_obj_get_style(cont);
 8016d7e:	4620      	mov	r0, r4
 8016d80:	f7f9 fb12 	bl	80103a8 <lv_obj_get_style>
    switch(type) {
 8016d84:	2d03      	cmp	r5, #3
    const lv_style_t * style = lv_obj_get_style(cont);
 8016d86:	4607      	mov	r7, r0
    switch(type) {
 8016d88:	d008      	beq.n	8016d9c <lv_cont_refr_layout+0x12a>
 8016d8a:	2d04      	cmp	r5, #4
 8016d8c:	d036      	beq.n	8016dfc <lv_cont_refr_layout+0x18a>
 8016d8e:	2d02      	cmp	r5, #2
 8016d90:	d13a      	bne.n	8016e08 <lv_cont_refr_layout+0x196>
            hpad_corr = style->body.padding.left;
 8016d92:	f9b0 501a 	ldrsh.w	r5, [r0, #26]
            align     = LV_ALIGN_IN_TOP_LEFT;
 8016d96:	f04f 0801 	mov.w	r8, #1
 8016d9a:	e002      	b.n	8016da2 <lv_cont_refr_layout+0x130>
            hpad_corr = 0;
 8016d9c:	2500      	movs	r5, #0
            align     = LV_ALIGN_IN_TOP_MID;
 8016d9e:	f04f 0802 	mov.w	r8, #2
    lv_obj_set_protect(cont, LV_PROTECT_CHILD_CHG);
 8016da2:	4620      	mov	r0, r4
 8016da4:	2101      	movs	r1, #1
    LV_LL_READ_BACK(cont->child_ll, child)
 8016da6:	f104 0904 	add.w	r9, r4, #4
    lv_obj_set_protect(cont, LV_PROTECT_CHILD_CHG);
 8016daa:	f7f8 fc45 	bl	800f638 <lv_obj_set_protect>
    LV_LL_READ_BACK(cont->child_ll, child)
 8016dae:	4648      	mov	r0, r9
    lv_coord_t last_cord = style->body.padding.top;
 8016db0:	f9b7 a016 	ldrsh.w	sl, [r7, #22]
    LV_LL_READ_BACK(cont->child_ll, child)
 8016db4:	f7fe fba1 	bl	80154fa <lv_ll_get_tail>
 8016db8:	4606      	mov	r6, r0
 8016dba:	2800      	cmp	r0, #0
 8016dbc:	d091      	beq.n	8016ce2 <lv_cont_refr_layout+0x70>
        if(lv_obj_get_hidden(child) != false || lv_obj_is_protected(child, LV_PROTECT_POS) != false) continue;
 8016dbe:	4630      	mov	r0, r6
 8016dc0:	f7f9 fb70 	bl	80104a4 <lv_obj_get_hidden>
 8016dc4:	b9a8      	cbnz	r0, 8016df2 <lv_cont_refr_layout+0x180>
 8016dc6:	2104      	movs	r1, #4
 8016dc8:	4630      	mov	r0, r6
 8016dca:	f7f9 fbcd 	bl	8010568 <lv_obj_is_protected>
 8016dce:	b980      	cbnz	r0, 8016df2 <lv_cont_refr_layout+0x180>
        lv_obj_align(child, cont, align, hpad_corr, last_cord);
 8016dd0:	462b      	mov	r3, r5
 8016dd2:	f8cd a000 	str.w	sl, [sp]
 8016dd6:	4642      	mov	r2, r8
 8016dd8:	4621      	mov	r1, r4
 8016dda:	4630      	mov	r0, r6
 8016ddc:	f7f8 fdd8 	bl	800f990 <lv_obj_align>
        last_cord += lv_obj_get_height(child) + style->body.padding.inner;
 8016de0:	4630      	mov	r0, r6
 8016de2:	f7f9 fad6 	bl	8010392 <lv_obj_get_height>
 8016de6:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8016dea:	4418      	add	r0, r3
 8016dec:	4450      	add	r0, sl
 8016dee:	fa0f fa80 	sxth.w	sl, r0
    LV_LL_READ_BACK(cont->child_ll, child)
 8016df2:	4631      	mov	r1, r6
 8016df4:	4648      	mov	r0, r9
 8016df6:	f7fe fb88 	bl	801550a <lv_ll_get_prev>
 8016dfa:	e7dd      	b.n	8016db8 <lv_cont_refr_layout+0x146>
            hpad_corr = -style->body.padding.right;
 8016dfc:	8b85      	ldrh	r5, [r0, #28]
 8016dfe:	426d      	negs	r5, r5
 8016e00:	b22d      	sxth	r5, r5
            align     = LV_ALIGN_IN_TOP_RIGHT;
 8016e02:	f04f 0803 	mov.w	r8, #3
 8016e06:	e7cc      	b.n	8016da2 <lv_cont_refr_layout+0x130>
            hpad_corr = 0;
 8016e08:	2500      	movs	r5, #0
 8016e0a:	e7c4      	b.n	8016d96 <lv_cont_refr_layout+0x124>
    } else if(type == LV_LAYOUT_ROW_T || type == LV_LAYOUT_ROW_M || type == LV_LAYOUT_ROW_B) {
 8016e0c:	1f6b      	subs	r3, r5, #5
 8016e0e:	b2db      	uxtb	r3, r3
 8016e10:	2b02      	cmp	r3, #2
 8016e12:	d84a      	bhi.n	8016eaa <lv_cont_refr_layout+0x238>
    lv_layout_t type = lv_cont_get_layout(cont);
 8016e14:	4620      	mov	r0, r4
 8016e16:	f7ff ff25 	bl	8016c64 <lv_cont_get_layout>
 8016e1a:	4605      	mov	r5, r0
    const lv_style_t * style = lv_obj_get_style(cont);
 8016e1c:	4620      	mov	r0, r4
 8016e1e:	f7f9 fac3 	bl	80103a8 <lv_obj_get_style>
    switch(type) {
 8016e22:	2d06      	cmp	r5, #6
    const lv_style_t * style = lv_obj_get_style(cont);
 8016e24:	4607      	mov	r7, r0
    switch(type) {
 8016e26:	d008      	beq.n	8016e3a <lv_cont_refr_layout+0x1c8>
 8016e28:	2d07      	cmp	r5, #7
 8016e2a:	d036      	beq.n	8016e9a <lv_cont_refr_layout+0x228>
 8016e2c:	2d05      	cmp	r5, #5
 8016e2e:	d13a      	bne.n	8016ea6 <lv_cont_refr_layout+0x234>
            vpad_corr = style->body.padding.top;
 8016e30:	f9b0 5016 	ldrsh.w	r5, [r0, #22]
            align     = LV_ALIGN_IN_TOP_LEFT;
 8016e34:	f04f 0801 	mov.w	r8, #1
 8016e38:	e002      	b.n	8016e40 <lv_cont_refr_layout+0x1ce>
            vpad_corr = 0;
 8016e3a:	2500      	movs	r5, #0
            align     = LV_ALIGN_IN_LEFT_MID;
 8016e3c:	f04f 0807 	mov.w	r8, #7
    lv_obj_set_protect(cont, LV_PROTECT_CHILD_CHG);
 8016e40:	4620      	mov	r0, r4
 8016e42:	2101      	movs	r1, #1
    LV_LL_READ_BACK(cont->child_ll, child)
 8016e44:	f104 0904 	add.w	r9, r4, #4
    lv_obj_set_protect(cont, LV_PROTECT_CHILD_CHG);
 8016e48:	f7f8 fbf6 	bl	800f638 <lv_obj_set_protect>
    LV_LL_READ_BACK(cont->child_ll, child)
 8016e4c:	4648      	mov	r0, r9
    lv_coord_t last_cord = style->body.padding.left;
 8016e4e:	f9b7 a01a 	ldrsh.w	sl, [r7, #26]
    LV_LL_READ_BACK(cont->child_ll, child)
 8016e52:	f7fe fb52 	bl	80154fa <lv_ll_get_tail>
 8016e56:	4606      	mov	r6, r0
 8016e58:	2800      	cmp	r0, #0
 8016e5a:	f43f af42 	beq.w	8016ce2 <lv_cont_refr_layout+0x70>
        if(lv_obj_get_hidden(child) != false || lv_obj_is_protected(child, LV_PROTECT_POS) != false) continue;
 8016e5e:	4630      	mov	r0, r6
 8016e60:	f7f9 fb20 	bl	80104a4 <lv_obj_get_hidden>
 8016e64:	b9a0      	cbnz	r0, 8016e90 <lv_cont_refr_layout+0x21e>
 8016e66:	2104      	movs	r1, #4
 8016e68:	4630      	mov	r0, r6
 8016e6a:	f7f9 fb7d 	bl	8010568 <lv_obj_is_protected>
 8016e6e:	b978      	cbnz	r0, 8016e90 <lv_cont_refr_layout+0x21e>
        lv_obj_align(child, cont, align, last_cord, vpad_corr);
 8016e70:	4653      	mov	r3, sl
 8016e72:	4642      	mov	r2, r8
 8016e74:	4621      	mov	r1, r4
 8016e76:	4630      	mov	r0, r6
 8016e78:	9500      	str	r5, [sp, #0]
 8016e7a:	f7f8 fd89 	bl	800f990 <lv_obj_align>
        last_cord += lv_obj_get_width(child) + style->body.padding.inner;
 8016e7e:	4630      	mov	r0, r6
 8016e80:	f7f9 fa81 	bl	8010386 <lv_obj_get_width>
 8016e84:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8016e88:	4403      	add	r3, r0
 8016e8a:	4453      	add	r3, sl
 8016e8c:	fa0f fa83 	sxth.w	sl, r3
    LV_LL_READ_BACK(cont->child_ll, child)
 8016e90:	4631      	mov	r1, r6
 8016e92:	4648      	mov	r0, r9
 8016e94:	f7fe fb39 	bl	801550a <lv_ll_get_prev>
 8016e98:	e7dd      	b.n	8016e56 <lv_cont_refr_layout+0x1e4>
            vpad_corr = -style->body.padding.bottom;
 8016e9a:	8b05      	ldrh	r5, [r0, #24]
 8016e9c:	426d      	negs	r5, r5
 8016e9e:	b22d      	sxth	r5, r5
            align     = LV_ALIGN_IN_BOTTOM_LEFT;
 8016ea0:	f04f 0804 	mov.w	r8, #4
 8016ea4:	e7cc      	b.n	8016e40 <lv_cont_refr_layout+0x1ce>
            vpad_corr = 0;
 8016ea6:	2500      	movs	r5, #0
 8016ea8:	e7c4      	b.n	8016e34 <lv_cont_refr_layout+0x1c2>
    } else if(type == LV_LAYOUT_PRETTY) {
 8016eaa:	2d08      	cmp	r5, #8
 8016eac:	f040 80e7 	bne.w	801707e <lv_cont_refr_layout+0x40c>
    const lv_style_t * style = lv_obj_get_style(cont);
 8016eb0:	4620      	mov	r0, r4
 8016eb2:	f7f9 fa79 	bl	80103a8 <lv_obj_get_style>
 8016eb6:	4680      	mov	r8, r0
    lv_coord_t w_obj         = lv_obj_get_width(cont);
 8016eb8:	4620      	mov	r0, r4
 8016eba:	f7f9 fa64 	bl	8010386 <lv_obj_get_width>
    child_rs = lv_ll_get_tail(&cont->child_ll); /*Set the row starter child*/
 8016ebe:	1d23      	adds	r3, r4, #4
    lv_coord_t w_obj         = lv_obj_get_width(cont);
 8016ec0:	9003      	str	r0, [sp, #12]
    child_rs = lv_ll_get_tail(&cont->child_ll); /*Set the row starter child*/
 8016ec2:	4618      	mov	r0, r3
    lv_coord_t act_y         = style->body.padding.top;
 8016ec4:	f9b8 a016 	ldrsh.w	sl, [r8, #22]
    child_rs = lv_ll_get_tail(&cont->child_ll); /*Set the row starter child*/
 8016ec8:	9302      	str	r3, [sp, #8]
 8016eca:	f7fe fb16 	bl	80154fa <lv_ll_get_tail>
    if(child_rs == NULL) return;                /*Return if no child*/
 8016ece:	4605      	mov	r5, r0
 8016ed0:	2800      	cmp	r0, #0
 8016ed2:	f000 816f 	beq.w	80171b4 <lv_cont_refr_layout+0x542>
    lv_obj_set_protect(cont, LV_PROTECT_CHILD_CHG);
 8016ed6:	2101      	movs	r1, #1
 8016ed8:	4620      	mov	r0, r4
 8016eda:	f7f8 fbad 	bl	800f638 <lv_obj_set_protect>
            style->body.padding.left + style->body.padding.right; /*The width is at least the left+right hpad*/
 8016ede:	f8b8 b01a 	ldrh.w	fp, [r8, #26]
 8016ee2:	f8b8 001c 	ldrh.w	r0, [r8, #28]
        uint32_t obj_num = 0;
 8016ee6:	2700      	movs	r7, #0
            style->body.padding.left + style->body.padding.right; /*The width is at least the left+right hpad*/
 8016ee8:	4483      	add	fp, r0
        lv_coord_t w_row =
 8016eea:	fa0f fb8b 	sxth.w	fp, fp
 8016eee:	462e      	mov	r6, r5
        lv_coord_t h_row = 0;
 8016ef0:	46b9      	mov	r9, r7
            if(lv_obj_get_hidden(child_rc) == false && lv_obj_is_protected(child_rc, LV_PROTECT_POS) == false) {
 8016ef2:	4628      	mov	r0, r5
 8016ef4:	f7f9 fad6 	bl	80104a4 <lv_obj_get_hidden>
 8016ef8:	2800      	cmp	r0, #0
 8016efa:	d13b      	bne.n	8016f74 <lv_cont_refr_layout+0x302>
 8016efc:	2104      	movs	r1, #4
 8016efe:	4628      	mov	r0, r5
 8016f00:	f7f9 fb32 	bl	8010568 <lv_obj_is_protected>
 8016f04:	bbb0      	cbnz	r0, 8016f74 <lv_cont_refr_layout+0x302>
                if(w_row + lv_obj_get_width(child_rc) > w_obj) {
 8016f06:	4628      	mov	r0, r5
 8016f08:	f7f9 fa3d 	bl	8010386 <lv_obj_get_width>
 8016f0c:	9b03      	ldr	r3, [sp, #12]
 8016f0e:	4458      	add	r0, fp
 8016f10:	4298      	cmp	r0, r3
 8016f12:	dd15      	ble.n	8016f40 <lv_cont_refr_layout+0x2ce>
                    if(child_rc != NULL && obj_num != 0) {
 8016f14:	2f00      	cmp	r7, #0
 8016f16:	f000 812c 	beq.w	8017172 <lv_cont_refr_layout+0x500>
                        child_rc = lv_ll_get_next(&cont->child_ll, child_rc);
 8016f1a:	4629      	mov	r1, r5
 8016f1c:	9802      	ldr	r0, [sp, #8]
 8016f1e:	f7fe faef 	bl	8015500 <lv_ll_get_next>
 8016f22:	4605      	mov	r5, r0
        else if(obj_num == 1) {
 8016f24:	2f01      	cmp	r7, #1
 8016f26:	d130      	bne.n	8016f8a <lv_cont_refr_layout+0x318>
            lv_obj_align(child_rs, cont, LV_ALIGN_IN_TOP_MID, 0, act_y);
 8016f28:	f8cd a000 	str.w	sl, [sp]
 8016f2c:	2300      	movs	r3, #0
 8016f2e:	2202      	movs	r2, #2
 8016f30:	4621      	mov	r1, r4
 8016f32:	4630      	mov	r0, r6
            lv_obj_align(obj2, cont, LV_ALIGN_IN_TOP_RIGHT, -pad, act_y + (h_row - lv_obj_get_height(obj2)) / 2);
 8016f34:	f7f8 fd2c 	bl	800f990 <lv_obj_align>
        if(child_rc == NULL) break;
 8016f38:	2d00      	cmp	r5, #0
 8016f3a:	f040 8126 	bne.w	801718a <lv_cont_refr_layout+0x518>
 8016f3e:	e6d0      	b.n	8016ce2 <lv_cont_refr_layout+0x70>
                w_row += lv_obj_get_width(child_rc) + style->body.padding.inner; /*Add the object width + opad*/
 8016f40:	4628      	mov	r0, r5
 8016f42:	f7f9 fa20 	bl	8010386 <lv_obj_get_width>
 8016f46:	f9b8 301e 	ldrsh.w	r3, [r8, #30]
 8016f4a:	4418      	add	r0, r3
 8016f4c:	4483      	add	fp, r0
                h_row = LV_MATH_MAX(h_row, lv_obj_get_height(child_rc));         /*Search the highest object*/
 8016f4e:	4628      	mov	r0, r5
 8016f50:	f7f9 fa1f 	bl	8010392 <lv_obj_get_height>
 8016f54:	4548      	cmp	r0, r9
                w_row += lv_obj_get_width(child_rc) + style->body.padding.inner; /*Add the object width + opad*/
 8016f56:	fa0f fb8b 	sxth.w	fp, fp
                h_row = LV_MATH_MAX(h_row, lv_obj_get_height(child_rc));         /*Search the highest object*/
 8016f5a:	db03      	blt.n	8016f64 <lv_cont_refr_layout+0x2f2>
 8016f5c:	4628      	mov	r0, r5
 8016f5e:	f7f9 fa18 	bl	8010392 <lv_obj_get_height>
 8016f62:	4681      	mov	r9, r0
                if(lv_obj_is_protected(child_rc, LV_PROTECT_FOLLOW))
 8016f64:	2108      	movs	r1, #8
 8016f66:	4628      	mov	r0, r5
                obj_num++;
 8016f68:	3701      	adds	r7, #1
                if(lv_obj_is_protected(child_rc, LV_PROTECT_FOLLOW))
 8016f6a:	f7f9 fafd 	bl	8010568 <lv_obj_is_protected>
 8016f6e:	2800      	cmp	r0, #0
 8016f70:	f040 80fc 	bne.w	801716c <lv_cont_refr_layout+0x4fa>
            child_rc = lv_ll_get_prev(&cont->child_ll, child_rc); /*Load the next object*/
 8016f74:	4629      	mov	r1, r5
 8016f76:	9802      	ldr	r0, [sp, #8]
 8016f78:	f7fe fac7 	bl	801550a <lv_ll_get_prev>
 8016f7c:	4605      	mov	r5, r0
            if(obj_num == 0)
 8016f7e:	2f00      	cmp	r7, #0
 8016f80:	f000 8113 	beq.w	80171aa <lv_cont_refr_layout+0x538>
        } while(child_rc != NULL);
 8016f84:	2800      	cmp	r0, #0
 8016f86:	d1b4      	bne.n	8016ef2 <lv_cont_refr_layout+0x280>
 8016f88:	e7cc      	b.n	8016f24 <lv_cont_refr_layout+0x2b2>
        else if(obj_num == 2) {
 8016f8a:	2f02      	cmp	r7, #2
 8016f8c:	d13a      	bne.n	8017004 <lv_cont_refr_layout+0x392>
            lv_obj_t * obj2 = lv_ll_get_prev(&cont->child_ll, child_rs);
 8016f8e:	4631      	mov	r1, r6
 8016f90:	9802      	ldr	r0, [sp, #8]
 8016f92:	f7fe faba 	bl	801550a <lv_ll_get_prev>
 8016f96:	4683      	mov	fp, r0
            w_row           = lv_obj_get_width(obj1) + lv_obj_get_width(obj2);
 8016f98:	4630      	mov	r0, r6
 8016f9a:	f7f9 f9f4 	bl	8010386 <lv_obj_get_width>
 8016f9e:	9004      	str	r0, [sp, #16]
 8016fa0:	4658      	mov	r0, fp
 8016fa2:	f7f9 f9f0 	bl	8010386 <lv_obj_get_width>
 8016fa6:	9b04      	ldr	r3, [sp, #16]
            lv_coord_t pad  = (w_obj - w_row) / 3;
 8016fa8:	9a03      	ldr	r2, [sp, #12]
            w_row           = lv_obj_get_width(obj1) + lv_obj_get_width(obj2);
 8016faa:	4403      	add	r3, r0
            lv_coord_t pad  = (w_obj - w_row) / 3;
 8016fac:	b21b      	sxth	r3, r3
            lv_obj_align(obj1, cont, LV_ALIGN_IN_TOP_LEFT, pad, act_y + (h_row - lv_obj_get_height(obj1)) / 2);
 8016fae:	4630      	mov	r0, r6
            lv_coord_t pad  = (w_obj - w_row) / 3;
 8016fb0:	1ad3      	subs	r3, r2, r3
 8016fb2:	2203      	movs	r2, #3
 8016fb4:	fb93 f3f2 	sdiv	r3, r3, r2
 8016fb8:	9304      	str	r3, [sp, #16]
            lv_obj_align(obj1, cont, LV_ALIGN_IN_TOP_LEFT, pad, act_y + (h_row - lv_obj_get_height(obj1)) / 2);
 8016fba:	f7f9 f9ea 	bl	8010392 <lv_obj_get_height>
 8016fbe:	fa1f f38a 	uxth.w	r3, sl
 8016fc2:	eba9 0000 	sub.w	r0, r9, r0
 8016fc6:	fb90 f0f7 	sdiv	r0, r0, r7
 8016fca:	4418      	add	r0, r3
 8016fcc:	b200      	sxth	r0, r0
 8016fce:	2201      	movs	r2, #1
 8016fd0:	4621      	mov	r1, r4
 8016fd2:	9305      	str	r3, [sp, #20]
 8016fd4:	9000      	str	r0, [sp, #0]
 8016fd6:	f9bd 3010 	ldrsh.w	r3, [sp, #16]
 8016fda:	4630      	mov	r0, r6
 8016fdc:	f7f8 fcd8 	bl	800f990 <lv_obj_align>
            lv_obj_align(obj2, cont, LV_ALIGN_IN_TOP_RIGHT, -pad, act_y + (h_row - lv_obj_get_height(obj2)) / 2);
 8016fe0:	4658      	mov	r0, fp
 8016fe2:	f7f9 f9d6 	bl	8010392 <lv_obj_get_height>
 8016fe6:	9a05      	ldr	r2, [sp, #20]
 8016fe8:	9b04      	ldr	r3, [sp, #16]
 8016fea:	eba9 0000 	sub.w	r0, r9, r0
 8016fee:	fb90 f7f7 	sdiv	r7, r0, r7
 8016ff2:	4417      	add	r7, r2
 8016ff4:	425b      	negs	r3, r3
 8016ff6:	b23f      	sxth	r7, r7
 8016ff8:	9700      	str	r7, [sp, #0]
 8016ffa:	b21b      	sxth	r3, r3
 8016ffc:	2203      	movs	r2, #3
 8016ffe:	4621      	mov	r1, r4
 8017000:	4658      	mov	r0, fp
 8017002:	e797      	b.n	8016f34 <lv_cont_refr_layout+0x2c2>
            w_row -= style->body.padding.inner * obj_num;
 8017004:	f9b8 001e 	ldrsh.w	r0, [r8, #30]
            lv_coord_t new_opad = (w_obj - w_row) / (obj_num - 1);
 8017008:	9b03      	ldr	r3, [sp, #12]
            w_row -= style->body.padding.inner * obj_num;
 801700a:	fb10 f007 	smulbb	r0, r0, r7
 801700e:	ebab 0b00 	sub.w	fp, fp, r0
            lv_coord_t new_opad = (w_obj - w_row) / (obj_num - 1);
 8017012:	fa0f fb8b 	sxth.w	fp, fp
 8017016:	eba3 0b0b 	sub.w	fp, r3, fp
 801701a:	3f01      	subs	r7, #1
 801701c:	fbbb f7f7 	udiv	r7, fp, r7
            lv_coord_t act_x    = style->body.padding.left; /*x init*/
 8017020:	f9b8 b01a 	ldrsh.w	fp, [r8, #26]
            lv_coord_t new_opad = (w_obj - w_row) / (obj_num - 1);
 8017024:	b23f      	sxth	r7, r7
                if(lv_obj_get_hidden(child_tmp) == false && lv_obj_is_protected(child_tmp, LV_PROTECT_POS) == false) {
 8017026:	4630      	mov	r0, r6
 8017028:	f7f9 fa3c 	bl	80104a4 <lv_obj_get_hidden>
 801702c:	b9e0      	cbnz	r0, 8017068 <lv_cont_refr_layout+0x3f6>
 801702e:	2104      	movs	r1, #4
 8017030:	4630      	mov	r0, r6
 8017032:	f7f9 fa99 	bl	8010568 <lv_obj_is_protected>
 8017036:	b9b8      	cbnz	r0, 8017068 <lv_cont_refr_layout+0x3f6>
                                 act_y + (h_row - lv_obj_get_height(child_tmp)) / 2);
 8017038:	4630      	mov	r0, r6
 801703a:	f7f9 f9aa 	bl	8010392 <lv_obj_get_height>
 801703e:	2302      	movs	r3, #2
 8017040:	eba9 0000 	sub.w	r0, r9, r0
 8017044:	fb90 f0f3 	sdiv	r0, r0, r3
 8017048:	4450      	add	r0, sl
                    lv_obj_align(child_tmp, cont, LV_ALIGN_IN_TOP_LEFT, act_x,
 801704a:	b200      	sxth	r0, r0
 801704c:	465b      	mov	r3, fp
 801704e:	9000      	str	r0, [sp, #0]
 8017050:	2201      	movs	r2, #1
 8017052:	4621      	mov	r1, r4
 8017054:	4630      	mov	r0, r6
 8017056:	f7f8 fc9b 	bl	800f990 <lv_obj_align>
                    act_x += lv_obj_get_width(child_tmp) + new_opad;
 801705a:	4630      	mov	r0, r6
 801705c:	f7f9 f993 	bl	8010386 <lv_obj_get_width>
 8017060:	4438      	add	r0, r7
 8017062:	4483      	add	fp, r0
 8017064:	fa0f fb8b 	sxth.w	fp, fp
                if(child_tmp == child_rc) break;
 8017068:	42ae      	cmp	r6, r5
 801706a:	f000 808f 	beq.w	801718c <lv_cont_refr_layout+0x51a>
                child_tmp = lv_ll_get_prev(&cont->child_ll, child_tmp);
 801706e:	4631      	mov	r1, r6
 8017070:	9802      	ldr	r0, [sp, #8]
 8017072:	f7fe fa4a 	bl	801550a <lv_ll_get_prev>
            while(child_tmp != NULL) {
 8017076:	4606      	mov	r6, r0
 8017078:	2800      	cmp	r0, #0
 801707a:	d1d4      	bne.n	8017026 <lv_cont_refr_layout+0x3b4>
 801707c:	e75c      	b.n	8016f38 <lv_cont_refr_layout+0x2c6>
    } else if(type == LV_LAYOUT_GRID) {
 801707e:	2d09      	cmp	r5, #9
 8017080:	f040 8098 	bne.w	80171b4 <lv_cont_refr_layout+0x542>
    const lv_style_t * style = lv_obj_get_style(cont);
 8017084:	4620      	mov	r0, r4
 8017086:	f7f9 f98f 	bl	80103a8 <lv_obj_get_style>
 801708a:	4681      	mov	r9, r0
    lv_coord_t w_tot         = lv_obj_get_width(cont);
 801708c:	4620      	mov	r0, r4
 801708e:	f7f9 f97a 	bl	8010386 <lv_obj_get_width>
    lv_coord_t w_obj         = lv_obj_get_width(lv_obj_get_child(cont, NULL));
 8017092:	2100      	movs	r1, #0
    lv_coord_t w_tot         = lv_obj_get_width(cont);
 8017094:	4607      	mov	r7, r0
    lv_coord_t w_obj         = lv_obj_get_width(lv_obj_get_child(cont, NULL));
 8017096:	4620      	mov	r0, r4
 8017098:	f7f9 f8fa 	bl	8010290 <lv_obj_get_child>
 801709c:	f7f9 f973 	bl	8010386 <lv_obj_get_width>
 80170a0:	4605      	mov	r5, r0
    lv_coord_t w_fit         =  lv_obj_get_width_fit(cont);
 80170a2:	4620      	mov	r0, r4
 80170a4:	f7f9 f9f0 	bl	8010488 <lv_obj_get_width_fit>
    lv_coord_t h_obj         = lv_obj_get_height(lv_obj_get_child(cont, NULL));
 80170a8:	2100      	movs	r1, #0
    lv_coord_t w_fit         =  lv_obj_get_width_fit(cont);
 80170aa:	4606      	mov	r6, r0
    lv_coord_t h_obj         = lv_obj_get_height(lv_obj_get_child(cont, NULL));
 80170ac:	4620      	mov	r0, r4
 80170ae:	f7f9 f8ef 	bl	8010290 <lv_obj_get_child>
 80170b2:	f7f9 f96e 	bl	8010392 <lv_obj_get_height>
    uint16_t obj_row         = (w_fit) / (w_obj + style->body.padding.inner); /*Obj. num. in a row*/
 80170b6:	f9b9 201e 	ldrsh.w	r2, [r9, #30]
 80170ba:	1953      	adds	r3, r2, r5
 80170bc:	fb96 f3f3 	sdiv	r3, r6, r3
 80170c0:	fa1f fa83 	uxth.w	sl, r3
    if(obj_row > 1) {
 80170c4:	f1ba 0f01 	cmp.w	sl, #1
 80170c8:	d944      	bls.n	8017154 <lv_cont_refr_layout+0x4e2>
        x_ofs = w_obj + (w_fit - (obj_row * w_obj)) / (obj_row - 1);
 80170ca:	fb0a 6615 	mls	r6, sl, r5, r6
 80170ce:	f10a 33ff 	add.w	r3, sl, #4294967295	; 0xffffffff
 80170d2:	fb96 f3f3 	sdiv	r3, r6, r3
 80170d6:	441d      	add	r5, r3
    lv_coord_t y_ofs = h_obj + style->body.padding.inner;
 80170d8:	4410      	add	r0, r2
 80170da:	b283      	uxth	r3, r0
    lv_obj_set_protect(cont, LV_PROTECT_CHILD_CHG);
 80170dc:	2101      	movs	r1, #1
 80170de:	4620      	mov	r0, r4
    lv_coord_t y_ofs = h_obj + style->body.padding.inner;
 80170e0:	9302      	str	r3, [sp, #8]
    lv_obj_set_protect(cont, LV_PROTECT_CHILD_CHG);
 80170e2:	f7f8 faa9 	bl	800f638 <lv_obj_set_protect>
    LV_LL_READ_BACK(cont->child_ll, child)
 80170e6:	1d23      	adds	r3, r4, #4
 80170e8:	4618      	mov	r0, r3
    lv_coord_t act_x = style->body.padding.left;
 80170ea:	f9b9 601a 	ldrsh.w	r6, [r9, #26]
    lv_coord_t act_y = style->body.padding.top;
 80170ee:	f9b9 7016 	ldrsh.w	r7, [r9, #22]
    LV_LL_READ_BACK(cont->child_ll, child)
 80170f2:	9303      	str	r3, [sp, #12]
 80170f4:	f7fe fa01 	bl	80154fa <lv_ll_get_tail>
        x_ofs = w_tot / 2 - w_obj / 2;
 80170f8:	b22d      	sxth	r5, r5
    LV_LL_READ_BACK(cont->child_ll, child)
 80170fa:	4683      	mov	fp, r0
    uint16_t obj_cnt = 0;
 80170fc:	f04f 0800 	mov.w	r8, #0
    LV_LL_READ_BACK(cont->child_ll, child)
 8017100:	f1bb 0f00 	cmp.w	fp, #0
 8017104:	f43f aded 	beq.w	8016ce2 <lv_cont_refr_layout+0x70>
        if(lv_obj_get_hidden(child) != false || lv_obj_is_protected(child, LV_PROTECT_POS) != false) continue;
 8017108:	4658      	mov	r0, fp
 801710a:	f7f9 f9cb 	bl	80104a4 <lv_obj_get_hidden>
 801710e:	b9d8      	cbnz	r0, 8017148 <lv_cont_refr_layout+0x4d6>
 8017110:	2104      	movs	r1, #4
 8017112:	4658      	mov	r0, fp
 8017114:	f7f9 fa28 	bl	8010568 <lv_obj_is_protected>
 8017118:	b9b0      	cbnz	r0, 8017148 <lv_cont_refr_layout+0x4d6>
        if(obj_row > 1) {
 801711a:	f1ba 0f01 	cmp.w	sl, #1
            lv_obj_set_pos(child, act_x, act_y);
 801711e:	463a      	mov	r2, r7
        if(obj_row > 1) {
 8017120:	d91f      	bls.n	8017162 <lv_cont_refr_layout+0x4f0>
            lv_obj_set_pos(child, act_x, act_y);
 8017122:	4631      	mov	r1, r6
 8017124:	4658      	mov	r0, fp
 8017126:	f7f8 fbde 	bl	800f8e6 <lv_obj_set_pos>
            act_x += x_ofs;
 801712a:	442e      	add	r6, r5
 801712c:	b236      	sxth	r6, r6
        obj_cnt++;
 801712e:	f108 0801 	add.w	r8, r8, #1
 8017132:	fa1f f888 	uxth.w	r8, r8
        if(obj_cnt >= obj_row) {
 8017136:	45c2      	cmp	sl, r8
 8017138:	d806      	bhi.n	8017148 <lv_cont_refr_layout+0x4d6>
            act_y += y_ofs;
 801713a:	9b02      	ldr	r3, [sp, #8]
            act_x   = style->body.padding.left;
 801713c:	f9b9 601a 	ldrsh.w	r6, [r9, #26]
            act_y += y_ofs;
 8017140:	441f      	add	r7, r3
 8017142:	b23f      	sxth	r7, r7
            obj_cnt = 0;
 8017144:	f04f 0800 	mov.w	r8, #0
    LV_LL_READ_BACK(cont->child_ll, child)
 8017148:	4659      	mov	r1, fp
 801714a:	9803      	ldr	r0, [sp, #12]
 801714c:	f7fe f9dd 	bl	801550a <lv_ll_get_prev>
 8017150:	4683      	mov	fp, r0
 8017152:	e7d5      	b.n	8017100 <lv_cont_refr_layout+0x48e>
        x_ofs = w_tot / 2 - w_obj / 2;
 8017154:	2302      	movs	r3, #2
 8017156:	fb97 f7f3 	sdiv	r7, r7, r3
 801715a:	fb95 f5f3 	sdiv	r5, r5, r3
 801715e:	1b7d      	subs	r5, r7, r5
 8017160:	e7ba      	b.n	80170d8 <lv_cont_refr_layout+0x466>
            lv_obj_set_pos(child, x_ofs, act_y);
 8017162:	4629      	mov	r1, r5
 8017164:	4658      	mov	r0, fp
 8017166:	f7f8 fbbe 	bl	800f8e6 <lv_obj_set_pos>
 801716a:	e7e0      	b.n	801712e <lv_cont_refr_layout+0x4bc>
        if(obj_num == 0) {
 801716c:	2f00      	cmp	r7, #0
 801716e:	f47f aed9 	bne.w	8016f24 <lv_cont_refr_layout+0x2b2>
                lv_obj_align(child_rc, cont, LV_ALIGN_IN_TOP_MID, 0, act_y);
 8017172:	2300      	movs	r3, #0
 8017174:	2202      	movs	r2, #2
 8017176:	4621      	mov	r1, r4
 8017178:	4628      	mov	r0, r5
 801717a:	f8cd a000 	str.w	sl, [sp]
 801717e:	f7f8 fc07 	bl	800f990 <lv_obj_align>
                h_row = lv_obj_get_height(child_rc); /*Not set previously because of the early break*/
 8017182:	4628      	mov	r0, r5
 8017184:	f7f9 f905 	bl	8010392 <lv_obj_get_height>
 8017188:	4681      	mov	r9, r0
        if(child_rc == NULL) break;
 801718a:	462e      	mov	r6, r5
        act_y += style->body.padding.inner + h_row;           /*y increment*/
 801718c:	f8b8 301e 	ldrh.w	r3, [r8, #30]
        child_rs = lv_ll_get_prev(&cont->child_ll, child_rc); /*Go to the next object*/
 8017190:	9802      	ldr	r0, [sp, #8]
 8017192:	4631      	mov	r1, r6
        act_y += style->body.padding.inner + h_row;           /*y increment*/
 8017194:	449a      	add	sl, r3
        child_rs = lv_ll_get_prev(&cont->child_ll, child_rc); /*Go to the next object*/
 8017196:	f7fe f9b8 	bl	801550a <lv_ll_get_prev>
        act_y += style->body.padding.inner + h_row;           /*y increment*/
 801719a:	44d1      	add	r9, sl
 801719c:	fa0f fa89 	sxth.w	sl, r9
    while(child_rs != NULL) {
 80171a0:	4605      	mov	r5, r0
 80171a2:	2800      	cmp	r0, #0
 80171a4:	f47f ae9b 	bne.w	8016ede <lv_cont_refr_layout+0x26c>
 80171a8:	e59b      	b.n	8016ce2 <lv_cont_refr_layout+0x70>
        } while(child_rc != NULL);
 80171aa:	2800      	cmp	r0, #0
 80171ac:	f43f ad99 	beq.w	8016ce2 <lv_cont_refr_layout+0x70>
 80171b0:	462e      	mov	r6, r5
 80171b2:	e69e      	b.n	8016ef2 <lv_cont_refr_layout+0x280>
}
 80171b4:	b007      	add	sp, #28
 80171b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

080171bc <lv_cont_signal>:
{
 80171bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    res = ancestor_signal(cont, sign, param);
 80171be:	4b1e      	ldr	r3, [pc, #120]	; (8017238 <lv_cont_signal+0x7c>)
 80171c0:	681b      	ldr	r3, [r3, #0]
{
 80171c2:	4604      	mov	r4, r0
 80171c4:	460f      	mov	r7, r1
 80171c6:	4616      	mov	r6, r2
    res = ancestor_signal(cont, sign, param);
 80171c8:	4798      	blx	r3
    if(res != LV_RES_OK) return res;
 80171ca:	2801      	cmp	r0, #1
    res = ancestor_signal(cont, sign, param);
 80171cc:	4605      	mov	r5, r0
    if(res != LV_RES_OK) return res;
 80171ce:	d120      	bne.n	8017212 <lv_cont_signal+0x56>
    if(sign == LV_SIGNAL_STYLE_CHG) { /*Recalculate the padding if the style changed*/
 80171d0:	2f04      	cmp	r7, #4
 80171d2:	d106      	bne.n	80171e2 <lv_cont_signal+0x26>
        lv_cont_refr_layout(cont);
 80171d4:	4620      	mov	r0, r4
 80171d6:	f7ff fd4c 	bl	8016c72 <lv_cont_refr_layout>
        lv_cont_refr_autofit(cont);
 80171da:	4620      	mov	r0, r4
 80171dc:	f7ff fb3c 	bl	8016858 <lv_cont_refr_autofit>
 80171e0:	e017      	b.n	8017212 <lv_cont_signal+0x56>
    } else if(sign == LV_SIGNAL_CHILD_CHG) {
 80171e2:	2f01      	cmp	r7, #1
 80171e4:	d0f6      	beq.n	80171d4 <lv_cont_signal+0x18>
    } else if(sign == LV_SIGNAL_CORD_CHG) {
 80171e6:	2f02      	cmp	r7, #2
 80171e8:	d115      	bne.n	8017216 <lv_cont_signal+0x5a>
        if(lv_obj_get_width(cont) != lv_area_get_width(param) || lv_obj_get_height(cont) != lv_area_get_height(param)) {
 80171ea:	4620      	mov	r0, r4
 80171ec:	f7f9 f8cb 	bl	8010386 <lv_obj_get_width>
    return area_p->x2 - area_p->x1 + 1;
 80171f0:	88b3      	ldrh	r3, [r6, #4]
 80171f2:	8832      	ldrh	r2, [r6, #0]
 80171f4:	3301      	adds	r3, #1
 80171f6:	1a9b      	subs	r3, r3, r2
 80171f8:	b21b      	sxth	r3, r3
 80171fa:	4298      	cmp	r0, r3
 80171fc:	d1ea      	bne.n	80171d4 <lv_cont_signal+0x18>
 80171fe:	4620      	mov	r0, r4
 8017200:	f7f9 f8c7 	bl	8010392 <lv_obj_get_height>
    return area_p->y2 - area_p->y1 + 1;
 8017204:	88f3      	ldrh	r3, [r6, #6]
 8017206:	8872      	ldrh	r2, [r6, #2]
 8017208:	3301      	adds	r3, #1
 801720a:	1a9b      	subs	r3, r3, r2
 801720c:	b21b      	sxth	r3, r3
 801720e:	4298      	cmp	r0, r3
 8017210:	d1e0      	bne.n	80171d4 <lv_cont_signal+0x18>
}
 8017212:	4628      	mov	r0, r5
 8017214:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    } else if(sign == LV_SIGNAL_PARENT_SIZE_CHG) {
 8017216:	2f03      	cmp	r7, #3
 8017218:	d0df      	beq.n	80171da <lv_cont_signal+0x1e>
    } else if(sign == LV_SIGNAL_GET_TYPE) {
 801721a:	2f06      	cmp	r7, #6
 801721c:	d1f9      	bne.n	8017212 <lv_cont_signal+0x56>
 801721e:	2300      	movs	r3, #0
            if(buf->type[i] == NULL) break;
 8017220:	f856 1023 	ldr.w	r1, [r6, r3, lsl #2]
 8017224:	b2da      	uxtb	r2, r3
 8017226:	b119      	cbz	r1, 8017230 <lv_cont_signal+0x74>
 8017228:	3301      	adds	r3, #1
        for(i = 0; i < LV_MAX_ANCESTOR_NUM - 1; i++) { /*Find the last set data*/
 801722a:	2b07      	cmp	r3, #7
 801722c:	d1f8      	bne.n	8017220 <lv_cont_signal+0x64>
 801722e:	461a      	mov	r2, r3
        buf->type[i] = "lv_cont";
 8017230:	4b02      	ldr	r3, [pc, #8]	; (801723c <lv_cont_signal+0x80>)
 8017232:	f846 3022 	str.w	r3, [r6, r2, lsl #2]
 8017236:	e7ec      	b.n	8017212 <lv_cont_signal+0x56>
 8017238:	2000b234 	.word	0x2000b234
 801723c:	080f4f70 	.word	0x080f4f70

08017240 <lv_cont_get_fit_left>:
{
 8017240:	b508      	push	{r3, lr}
    lv_cont_ext_t * ext = lv_obj_get_ext_attr(cont);
 8017242:	f7f9 f99c 	bl	801057e <lv_obj_get_ext_attr>
    return ext->fit_left;
 8017246:	7800      	ldrb	r0, [r0, #0]
}
 8017248:	f3c0 1001 	ubfx	r0, r0, #4, #2
 801724c:	bd08      	pop	{r3, pc}

0801724e <lv_cont_get_fit_top>:
{
 801724e:	b508      	push	{r3, lr}
    lv_cont_ext_t * ext = lv_obj_get_ext_attr(cont);
 8017250:	f7f9 f995 	bl	801057e <lv_obj_get_ext_attr>
    return ext->fit_top;
 8017254:	7840      	ldrb	r0, [r0, #1]
}
 8017256:	f000 0003 	and.w	r0, r0, #3
 801725a:	bd08      	pop	{r3, pc}

0801725c <lv_cont_get_fit_bottom>:
{
 801725c:	b508      	push	{r3, lr}
    lv_cont_ext_t * ext = lv_obj_get_ext_attr(cont);
 801725e:	f7f9 f98e 	bl	801057e <lv_obj_get_ext_attr>
    return ext->fit_bottom;
 8017262:	7840      	ldrb	r0, [r0, #1]
}
 8017264:	f3c0 0081 	ubfx	r0, r0, #2, #2
 8017268:	bd08      	pop	{r3, pc}

0801726a <lv_ddlist_pos_current_option>:
/**
 * Set the position of list when it is closed to show the selected item
 * @param ddlist pointer to a drop down list
 */
static void lv_ddlist_pos_current_option(lv_obj_t * ddlist)
{
 801726a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801726e:	4604      	mov	r4, r0
    lv_ddlist_ext_t * ext          = lv_obj_get_ext_attr(ddlist);
 8017270:	f7f9 f985 	bl	801057e <lv_obj_get_ext_attr>
 8017274:	4606      	mov	r6, r0
    const lv_style_t * style       = lv_obj_get_style(ddlist);
 8017276:	4620      	mov	r0, r4
 8017278:	f7f9 f896 	bl	80103a8 <lv_obj_get_style>
 801727c:	6a43      	ldr	r3, [r0, #36]	; 0x24
    const lv_font_t * font         = style->text.font;
    lv_coord_t font_h              = lv_font_get_line_height(font);
    const lv_style_t * label_style = lv_obj_get_style(ext->label);
 801727e:	6b30      	ldr	r0, [r6, #48]	; 0x30
 8017280:	7a1f      	ldrb	r7, [r3, #8]
 8017282:	f7f9 f891 	bl	80103a8 <lv_obj_get_style>
 8017286:	4680      	mov	r8, r0
    lv_obj_t * scrl                = lv_page_get_scrl(ddlist);
 8017288:	4620      	mov	r0, r4
 801728a:	f002 f8b6 	bl	80193fa <lv_page_get_scrl>
 801728e:	4605      	mov	r5, r0

    lv_coord_t h = lv_obj_get_height(ddlist);
 8017290:	4620      	mov	r0, r4
 8017292:	f7f9 f87e 	bl	8010392 <lv_obj_get_height>
    lv_coord_t line_y1 =
        ext->sel_opt_id * (font_h + label_style->text.line_space) + ext->label->coords.y1 - scrl->coords.y1;
 8017296:	6b33      	ldr	r3, [r6, #48]	; 0x30

    lv_obj_set_y(scrl, -line_y1 + (h - font_h) / 2);
 8017298:	1bc1      	subs	r1, r0, r7
 801729a:	2002      	movs	r0, #2
 801729c:	fb91 f1f0 	sdiv	r1, r1, r0
 80172a0:	8a58      	ldrh	r0, [r3, #18]
 80172a2:	8a6b      	ldrh	r3, [r5, #18]
 80172a4:	1ac0      	subs	r0, r0, r3
 80172a6:	1a09      	subs	r1, r1, r0
        ext->sel_opt_id * (font_h + label_style->text.line_space) + ext->label->coords.y1 - scrl->coords.y1;
 80172a8:	f9b8 002a 	ldrsh.w	r0, [r8, #42]	; 0x2a
 80172ac:	19c3      	adds	r3, r0, r7
 80172ae:	8f70      	ldrh	r0, [r6, #58]	; 0x3a
 80172b0:	fb10 f003 	smulbb	r0, r0, r3
    lv_obj_set_y(scrl, -line_y1 + (h - font_h) / 2);
 80172b4:	1a09      	subs	r1, r1, r0
 80172b6:	b209      	sxth	r1, r1
 80172b8:	4628      	mov	r0, r5
 80172ba:	f7f8 fb61 	bl	800f980 <lv_obj_set_y>
    lv_obj_invalidate(ddlist);
 80172be:	4620      	mov	r0, r4
}
 80172c0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    lv_obj_invalidate(ddlist);
 80172c4:	f7f8 baa2 	b.w	800f80c <lv_obj_invalidate>

080172c8 <lv_ddlist_adjust_height>:
{
 80172c8:	b510      	push	{r4, lr}
 80172ca:	4604      	mov	r4, r0
    lv_obj_set_height(ddlist, height);
 80172cc:	f7f8 ff51 	bl	8010172 <lv_obj_set_height>
    lv_ddlist_pos_current_option(ddlist);
 80172d0:	4620      	mov	r0, r4
}
 80172d2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    lv_ddlist_pos_current_option(ddlist);
 80172d6:	f7ff bfc8 	b.w	801726a <lv_ddlist_pos_current_option>

080172da <lv_ddlist_anim_finish>:
{
 80172da:	b538      	push	{r3, r4, r5, lr}
 80172dc:	4604      	mov	r4, r0
    lv_ddlist_ext_t * ext = lv_obj_get_ext_attr(ddlist);
 80172de:	f7f9 f94e 	bl	801057e <lv_obj_get_ext_attr>
 80172e2:	4605      	mov	r5, r0
    lv_ddlist_pos_current_option(ddlist);
 80172e4:	4620      	mov	r0, r4
 80172e6:	f7ff ffc0 	bl	801726a <lv_ddlist_pos_current_option>
    ext->force_sel = 0; /*Turn off drawing of selection*/
 80172ea:	f895 303e 	ldrb.w	r3, [r5, #62]	; 0x3e
 80172ee:	f36f 0341 	bfc	r3, #1, #1
 80172f2:	f885 303e 	strb.w	r3, [r5, #62]	; 0x3e
    if(ext->opened) lv_page_set_sb_mode(ddlist, LV_SB_MODE_UNHIDE);
 80172f6:	07db      	lsls	r3, r3, #31
 80172f8:	d505      	bpl.n	8017306 <lv_ddlist_anim_finish+0x2c>
 80172fa:	4620      	mov	r0, r4
 80172fc:	2105      	movs	r1, #5
}
 80172fe:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    if(ext->opened) lv_page_set_sb_mode(ddlist, LV_SB_MODE_UNHIDE);
 8017302:	f002 b817 	b.w	8019334 <lv_page_set_sb_mode>
 8017306:	bd38      	pop	{r3, r4, r5, pc}

08017308 <lv_ddlist_anim_ready_cb>:
    lv_ddlist_anim_finish(ddlist);
 8017308:	6800      	ldr	r0, [r0, #0]
 801730a:	f7ff bfe6 	b.w	80172da <lv_ddlist_anim_finish>
	...

08017310 <lv_ddlist_refr_size>:
{
 8017310:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017314:	b08a      	sub	sp, #40	; 0x28
 8017316:	4605      	mov	r5, r0
 8017318:	460f      	mov	r7, r1
    lv_ddlist_ext_t * ext    = lv_obj_get_ext_attr(ddlist);
 801731a:	f7f9 f930 	bl	801057e <lv_obj_get_ext_attr>
 801731e:	4606      	mov	r6, r0
    const lv_style_t * style = lv_obj_get_style(ddlist);
 8017320:	4628      	mov	r0, r5
 8017322:	f7f9 f841 	bl	80103a8 <lv_obj_get_style>
    if(ext->opened) {
 8017326:	f896 303e 	ldrb.w	r3, [r6, #62]	; 0x3e
 801732a:	07da      	lsls	r2, r3, #31
    const lv_style_t * style = lv_obj_get_style(ddlist);
 801732c:	4680      	mov	r8, r0
    if(ext->opened) {
 801732e:	d528      	bpl.n	8017382 <lv_ddlist_refr_size+0x72>
        if(ext->fix_height == 0) {
 8017330:	f9b6 4040 	ldrsh.w	r4, [r6, #64]	; 0x40
 8017334:	b95c      	cbnz	r4, 801734e <lv_ddlist_refr_size+0x3e>
                lv_obj_get_height(lv_page_get_scrl(ddlist)) + style->body.padding.top + style->body.padding.bottom;
 8017336:	4628      	mov	r0, r5
 8017338:	f002 f85f 	bl	80193fa <lv_page_get_scrl>
 801733c:	f7f9 f829 	bl	8010392 <lv_obj_get_height>
 8017340:	f8b8 4016 	ldrh.w	r4, [r8, #22]
 8017344:	f8b8 3018 	ldrh.w	r3, [r8, #24]
 8017348:	441c      	add	r4, r3
 801734a:	4404      	add	r4, r0
            new_height =
 801734c:	b224      	sxth	r4, r4
    if(anim == LV_ANIM_OFF) {
 801734e:	bb37      	cbnz	r7, 801739e <lv_ddlist_refr_size+0x8e>
        lv_obj_set_height(ddlist, new_height);
 8017350:	4621      	mov	r1, r4
 8017352:	4628      	mov	r0, r5
 8017354:	f7f8 ff0d 	bl	8010172 <lv_obj_set_height>
        lv_ddlist_pos_current_option(ddlist);
 8017358:	4628      	mov	r0, r5
 801735a:	f7ff ff86 	bl	801726a <lv_ddlist_pos_current_option>
        if(ext->opened) lv_page_set_sb_mode(ddlist, LV_SB_MODE_UNHIDE);
 801735e:	f896 303e 	ldrb.w	r3, [r6, #62]	; 0x3e
 8017362:	07db      	lsls	r3, r3, #31
 8017364:	d503      	bpl.n	801736e <lv_ddlist_refr_size+0x5e>
 8017366:	2105      	movs	r1, #5
 8017368:	4628      	mov	r0, r5
 801736a:	f001 ffe3 	bl	8019334 <lv_page_set_sb_mode>
        lv_anim_del(ddlist, (lv_anim_exec_xcb_t)lv_ddlist_adjust_height); /*If an animation is in progress then
 801736e:	4923      	ldr	r1, [pc, #140]	; (80173fc <lv_ddlist_refr_size+0xec>)
 8017370:	4628      	mov	r0, r5
 8017372:	f7fd ff21 	bl	80151b8 <lv_anim_del>
        lv_ddlist_anim_finish(ddlist);
 8017376:	4628      	mov	r0, r5
 8017378:	f7ff ffaf 	bl	80172da <lv_ddlist_anim_finish>
}
 801737c:	b00a      	add	sp, #40	; 0x28
 801737e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        const lv_font_t * font         = style->text.font;
 8017382:	6a44      	ldr	r4, [r0, #36]	; 0x24
        const lv_style_t * label_style = lv_obj_get_style(ext->label);
 8017384:	6b30      	ldr	r0, [r6, #48]	; 0x30
 8017386:	f7f9 f80f 	bl	80103a8 <lv_obj_get_style>
        new_height                     = font_h + 2 * label_style->text.line_space;
 801738a:	7a24      	ldrb	r4, [r4, #8]
 801738c:	8d40      	ldrh	r0, [r0, #42]	; 0x2a
        lv_page_set_sb_mode(ddlist, LV_SB_MODE_HIDE);
 801738e:	2104      	movs	r1, #4
        new_height                     = font_h + 2 * label_style->text.line_space;
 8017390:	eb04 0440 	add.w	r4, r4, r0, lsl #1
        lv_page_set_sb_mode(ddlist, LV_SB_MODE_HIDE);
 8017394:	4628      	mov	r0, r5
        new_height                     = font_h + 2 * label_style->text.line_space;
 8017396:	b224      	sxth	r4, r4
        lv_page_set_sb_mode(ddlist, LV_SB_MODE_HIDE);
 8017398:	f001 ffcc 	bl	8019334 <lv_page_set_sb_mode>
 801739c:	e7d7      	b.n	801734e <lv_ddlist_refr_size+0x3e>
        if(lv_obj_get_height(ddlist) != new_height) {
 801739e:	4628      	mov	r0, r5
 80173a0:	f7f8 fff7 	bl	8010392 <lv_obj_get_height>
 80173a4:	4284      	cmp	r4, r0
 80173a6:	d0e9      	beq.n	801737c <lv_ddlist_refr_size+0x6c>
            a.start          = lv_obj_get_height(ddlist);
 80173a8:	4628      	mov	r0, r5
            a.var            = ddlist;
 80173aa:	9500      	str	r5, [sp, #0]
            a.start          = lv_obj_get_height(ddlist);
 80173ac:	f7f8 fff1 	bl	8010392 <lv_obj_get_height>
            a.exec_cb        = (lv_anim_exec_xcb_t)lv_ddlist_adjust_height;
 80173b0:	4b12      	ldr	r3, [pc, #72]	; (80173fc <lv_ddlist_refr_size+0xec>)
 80173b2:	9301      	str	r3, [sp, #4]
            a.path_cb        = lv_anim_path_linear;
 80173b4:	4b12      	ldr	r3, [pc, #72]	; (8017400 <lv_ddlist_refr_size+0xf0>)
            a.start          = lv_obj_get_height(ddlist);
 80173b6:	9004      	str	r0, [sp, #16]
            a.end            = new_height;
 80173b8:	9405      	str	r4, [sp, #20]
            a.path_cb        = lv_anim_path_linear;
 80173ba:	9302      	str	r3, [sp, #8]
            a.act_time       = 0;
 80173bc:	2400      	movs	r4, #0
            a.ready_cb       = lv_ddlist_anim_ready_cb;
 80173be:	4b11      	ldr	r3, [pc, #68]	; (8017404 <lv_ddlist_refr_size+0xf4>)
 80173c0:	9303      	str	r3, [sp, #12]
 * @param ddlist pointer to a drop down list
 * @return open/close animation time [ms]
 */
static inline uint16_t lv_ddlist_get_anim_time(const lv_obj_t * ddlist)
{
    return lv_page_get_anim_time(ddlist);
 80173c2:	4628      	mov	r0, r5
            a.act_time       = 0;
 80173c4:	f8ad 401a 	strh.w	r4, [sp, #26]
 80173c8:	f002 f81c 	bl	8019404 <lv_page_get_anim_time>
            a.playback       = 0;
 80173cc:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
            a.time           = lv_ddlist_get_anim_time(ddlist);
 80173d0:	f8ad 0018 	strh.w	r0, [sp, #24]
            a.repeat         = 0;
 80173d4:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 80173d8:	f364 0341 	bfi	r3, r4, #1, #1
 80173dc:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
            ext->force_sel = 1; /*Keep the list item selected*/
 80173e0:	f896 303e 	ldrb.w	r3, [r6, #62]	; 0x3e
            a.playback_pause = 0;
 80173e4:	f8ad 401c 	strh.w	r4, [sp, #28]
            ext->force_sel = 1; /*Keep the list item selected*/
 80173e8:	f043 0302 	orr.w	r3, r3, #2
 80173ec:	f886 303e 	strb.w	r3, [r6, #62]	; 0x3e
            lv_anim_create(&a);
 80173f0:	4668      	mov	r0, sp
            a.repeat_pause   = 0;
 80173f2:	f8ad 401e 	strh.w	r4, [sp, #30]
            lv_anim_create(&a);
 80173f6:	f7fd ff0d 	bl	8015214 <lv_anim_create>
}
 80173fa:	e7bf      	b.n	801737c <lv_ddlist_refr_size+0x6c>
 80173fc:	080172c9 	.word	0x080172c9
 8017400:	0801501d 	.word	0x0801501d
 8017404:	08017309 	.word	0x08017309

08017408 <release_handler>:
{
 8017408:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 801740c:	4605      	mov	r5, r0
    lv_ddlist_ext_t * ext = lv_obj_get_ext_attr(ddlist);
 801740e:	f7f9 f8b6 	bl	801057e <lv_obj_get_ext_attr>
    if(ext->opened == 0) { /*Open the list*/
 8017412:	f890 303e 	ldrb.w	r3, [r0, #62]	; 0x3e
 8017416:	07da      	lsls	r2, r3, #31
    lv_ddlist_ext_t * ext = lv_obj_get_ext_attr(ddlist);
 8017418:	4604      	mov	r4, r0
    if(ext->opened == 0) { /*Open the list*/
 801741a:	d412      	bmi.n	8017442 <release_handler+0x3a>
        ext->opened = 1;
 801741c:	f043 0301 	orr.w	r3, r3, #1
 8017420:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
        lv_obj_set_drag(lv_page_get_scrl(ddlist), true);
 8017424:	4628      	mov	r0, r5
 8017426:	f001 ffe8 	bl	80193fa <lv_page_get_scrl>
 801742a:	2101      	movs	r1, #1
 801742c:	f7f8 f8ef 	bl	800f60e <lv_obj_set_drag>
        lv_ddlist_refr_size(ddlist, true);
 8017430:	2101      	movs	r1, #1
 8017432:	4628      	mov	r0, r5
 8017434:	f7ff ff6c 	bl	8017310 <lv_ddlist_refr_size>
    return LV_RES_OK;
 8017438:	2601      	movs	r6, #1
}
 801743a:	4630      	mov	r0, r6
 801743c:	b002      	add	sp, #8
 801743e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        lv_indev_t * indev = lv_indev_get_act();
 8017442:	f7f8 f837 	bl	800f4b4 <lv_indev_get_act>
 8017446:	4606      	mov	r6, r0
        if(lv_indev_get_type(indev) == LV_INDEV_TYPE_ENCODER) {
 8017448:	f7f8 f83a 	bl	800f4c0 <lv_indev_get_type>
 801744c:	2804      	cmp	r0, #4
 801744e:	d10c      	bne.n	801746a <release_handler+0x62>
            ext->sel_opt_id_ori = ext->sel_opt_id;
 8017450:	8f63      	ldrh	r3, [r4, #58]	; 0x3a
 8017452:	87a3      	strh	r3, [r4, #60]	; 0x3c
            lv_group_t * g      = lv_obj_get_group(ddlist);
 8017454:	4628      	mov	r0, r5
 8017456:	f7f9 f898 	bl	801058a <lv_obj_get_group>
 801745a:	4607      	mov	r7, r0
            if(lv_group_get_editing(g)) {
 801745c:	f7f8 f815 	bl	800f48a <lv_group_get_editing>
 8017460:	b118      	cbz	r0, 801746a <release_handler+0x62>
                lv_group_set_editing(g, false);
 8017462:	2100      	movs	r1, #0
 8017464:	4638      	mov	r0, r7
 8017466:	f7f7 ffee 	bl	800f446 <lv_group_set_editing>
        if(lv_indev_get_type(indev) == LV_INDEV_TYPE_POINTER || lv_indev_get_type(indev) == LV_INDEV_TYPE_BUTTON) {
 801746a:	4630      	mov	r0, r6
 801746c:	f7f8 f828 	bl	800f4c0 <lv_indev_get_type>
 8017470:	2801      	cmp	r0, #1
 8017472:	d122      	bne.n	80174ba <release_handler+0xb2>
            lv_indev_get_point(indev, &p);
 8017474:	4630      	mov	r0, r6
 8017476:	4669      	mov	r1, sp
 8017478:	f7f8 f82f 	bl	800f4da <lv_indev_get_point>
            p.y -= ext->label->coords.y1;
 801747c:	6b20      	ldr	r0, [r4, #48]	; 0x30
 801747e:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 8017482:	8a42      	ldrh	r2, [r0, #18]
                letter = lv_txt_encoded_next(txt, &i);
 8017484:	f8df a09c 	ldr.w	sl, [pc, #156]	; 8017524 <release_handler+0x11c>
            p.y -= ext->label->coords.y1;
 8017488:	1a9b      	subs	r3, r3, r2
 801748a:	f8ad 3002 	strh.w	r3, [sp, #2]
            p.x -= ext->label->coords.x1;
 801748e:	8a02      	ldrh	r2, [r0, #16]
 8017490:	f8bd 3000 	ldrh.w	r3, [sp]
            letter_i = lv_label_get_letter_on(ext->label, &p);
 8017494:	4669      	mov	r1, sp
            p.x -= ext->label->coords.x1;
 8017496:	1a9b      	subs	r3, r3, r2
 8017498:	f8ad 3000 	strh.w	r3, [sp]
            letter_i = lv_label_get_letter_on(ext->label, &p);
 801749c:	f001 f8f4 	bl	8018688 <lv_label_get_letter_on>
 80174a0:	4680      	mov	r8, r0
            const char * txt  = lv_label_get_text(ext->label);
 80174a2:	6b20      	ldr	r0, [r4, #48]	; 0x30
 80174a4:	f001 f8ce 	bl	8018644 <lv_label_get_text>
            uint32_t i        = 0;
 80174a8:	2600      	movs	r6, #0
            const char * txt  = lv_label_get_text(ext->label);
 80174aa:	4681      	mov	r9, r0
            uint32_t i        = 0;
 80174ac:	9601      	str	r6, [sp, #4]
            uint16_t new_opt  = 0;
 80174ae:	4637      	mov	r7, r6
            for(line_cnt = 0; line_cnt < letter_i; line_cnt++) {
 80174b0:	4546      	cmp	r6, r8
 80174b2:	d325      	bcc.n	8017500 <release_handler+0xf8>
            ext->sel_opt_id     = new_opt;
 80174b4:	8767      	strh	r7, [r4, #58]	; 0x3a
            ext->sel_opt_id_ori = ext->sel_opt_id;
 80174b6:	87a7      	strh	r7, [r4, #60]	; 0x3c
 80174b8:	e004      	b.n	80174c4 <release_handler+0xbc>
        if(lv_indev_get_type(indev) == LV_INDEV_TYPE_POINTER || lv_indev_get_type(indev) == LV_INDEV_TYPE_BUTTON) {
 80174ba:	4630      	mov	r0, r6
 80174bc:	f7f8 f800 	bl	800f4c0 <lv_indev_get_type>
 80174c0:	2803      	cmp	r0, #3
 80174c2:	d0d7      	beq.n	8017474 <release_handler+0x6c>
        uint32_t id  = ext->sel_opt_id; /*Just to use uint32_t in event data*/
 80174c4:	8f63      	ldrh	r3, [r4, #58]	; 0x3a
 80174c6:	9301      	str	r3, [sp, #4]
        lv_res_t res = lv_event_send(ddlist, LV_EVENT_VALUE_CHANGED, &id);
 80174c8:	aa01      	add	r2, sp, #4
 80174ca:	210e      	movs	r1, #14
 80174cc:	4628      	mov	r0, r5
 80174ce:	f7f8 f907 	bl	800f6e0 <lv_event_send>
        if(res != LV_RES_OK) return res;
 80174d2:	2801      	cmp	r0, #1
        lv_res_t res = lv_event_send(ddlist, LV_EVENT_VALUE_CHANGED, &id);
 80174d4:	4606      	mov	r6, r0
        if(res != LV_RES_OK) return res;
 80174d6:	d1b0      	bne.n	801743a <release_handler+0x32>
        if(ext->stay_open == 0) {
 80174d8:	f894 303e 	ldrb.w	r3, [r4, #62]	; 0x3e
 80174dc:	f013 0708 	ands.w	r7, r3, #8
 80174e0:	d11c      	bne.n	801751c <release_handler+0x114>
            ext->opened = 0;
 80174e2:	f367 0300 	bfi	r3, r7, #0, #1
 80174e6:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
            lv_obj_set_drag(lv_page_get_scrl(ddlist), false);
 80174ea:	4628      	mov	r0, r5
 80174ec:	f001 ff85 	bl	80193fa <lv_page_get_scrl>
 80174f0:	4639      	mov	r1, r7
 80174f2:	f7f8 f88c 	bl	800f60e <lv_obj_set_drag>
            lv_ddlist_refr_size(ddlist, true);
 80174f6:	4631      	mov	r1, r6
 80174f8:	4628      	mov	r0, r5
 80174fa:	f7ff ff09 	bl	8017310 <lv_ddlist_refr_size>
 80174fe:	e79c      	b.n	801743a <release_handler+0x32>
                letter = lv_txt_encoded_next(txt, &i);
 8017500:	a901      	add	r1, sp, #4
 8017502:	4648      	mov	r0, r9
 8017504:	f8da 3000 	ldr.w	r3, [sl]
 8017508:	4798      	blx	r3
                if(letter == '\n' && i != letter_i) new_opt++;
 801750a:	280a      	cmp	r0, #10
 801750c:	d104      	bne.n	8017518 <release_handler+0x110>
 801750e:	9b01      	ldr	r3, [sp, #4]
 8017510:	4598      	cmp	r8, r3
 8017512:	bf1c      	itt	ne
 8017514:	3701      	addne	r7, #1
 8017516:	b2bf      	uxthne	r7, r7
            for(line_cnt = 0; line_cnt < letter_i; line_cnt++) {
 8017518:	3601      	adds	r6, #1
 801751a:	e7c9      	b.n	80174b0 <release_handler+0xa8>
            lv_obj_invalidate(ddlist);
 801751c:	4628      	mov	r0, r5
 801751e:	f7f8 f975 	bl	800f80c <lv_obj_invalidate>
 8017522:	e78a      	b.n	801743a <release_handler+0x32>
 8017524:	20001d1c 	.word	0x20001d1c

08017528 <lv_ddlist_signal>:
    res = ancestor_signal(ddlist, sign, param);
 8017528:	4b4c      	ldr	r3, [pc, #304]	; (801765c <lv_ddlist_signal+0x134>)
{
 801752a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    res = ancestor_signal(ddlist, sign, param);
 801752e:	681b      	ldr	r3, [r3, #0]
{
 8017530:	4605      	mov	r5, r0
 8017532:	460e      	mov	r6, r1
 8017534:	4690      	mov	r8, r2
    res = ancestor_signal(ddlist, sign, param);
 8017536:	4798      	blx	r3
    if(res != LV_RES_OK) return res;
 8017538:	2801      	cmp	r0, #1
    res = ancestor_signal(ddlist, sign, param);
 801753a:	4607      	mov	r7, r0
    if(res != LV_RES_OK) return res;
 801753c:	d10c      	bne.n	8017558 <lv_ddlist_signal+0x30>
    lv_ddlist_ext_t * ext = lv_obj_get_ext_attr(ddlist);
 801753e:	4628      	mov	r0, r5
 8017540:	f7f9 f81d 	bl	801057e <lv_obj_get_ext_attr>
    if(sign == LV_SIGNAL_STYLE_CHG) {
 8017544:	2e04      	cmp	r6, #4
    lv_ddlist_ext_t * ext = lv_obj_get_ext_attr(ddlist);
 8017546:	4604      	mov	r4, r0
    if(sign == LV_SIGNAL_STYLE_CHG) {
 8017548:	d104      	bne.n	8017554 <lv_ddlist_signal+0x2c>
        lv_ddlist_refr_size(ddlist, 0);
 801754a:	2100      	movs	r1, #0
                lv_ddlist_refr_size(ddlist, true);
 801754c:	4628      	mov	r0, r5
 801754e:	f7ff fedf 	bl	8017310 <lv_ddlist_refr_size>
 8017552:	e001      	b.n	8017558 <lv_ddlist_signal+0x30>
    } else if(sign == LV_SIGNAL_CLEANUP) {
 8017554:	b91e      	cbnz	r6, 801755e <lv_ddlist_signal+0x36>
        ext->label = NULL;
 8017556:	6306      	str	r6, [r0, #48]	; 0x30
}
 8017558:	4638      	mov	r0, r7
 801755a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    } else if(sign == LV_SIGNAL_FOCUS) {
 801755e:	2e0f      	cmp	r6, #15
 8017560:	d120      	bne.n	80175a4 <lv_ddlist_signal+0x7c>
        lv_group_t * g             = lv_obj_get_group(ddlist);
 8017562:	4628      	mov	r0, r5
 8017564:	f7f9 f811 	bl	801058a <lv_obj_get_group>
        bool editing               = lv_group_get_editing(g);
 8017568:	f7f7 ff8f 	bl	800f48a <lv_group_get_editing>
 801756c:	4606      	mov	r6, r0
        lv_indev_type_t indev_type = lv_indev_get_type(lv_indev_get_act());
 801756e:	f7f7 ffa1 	bl	800f4b4 <lv_indev_get_act>
 8017572:	f7f7 ffa5 	bl	800f4c0 <lv_indev_get_type>
        if(indev_type == LV_INDEV_TYPE_ENCODER) {
 8017576:	2804      	cmp	r0, #4
 8017578:	f894 303e 	ldrb.w	r3, [r4, #62]	; 0x3e
 801757c:	d10f      	bne.n	801759e <lv_ddlist_signal+0x76>
            if(editing) {
 801757e:	b13e      	cbz	r6, 8017590 <lv_ddlist_signal+0x68>
                ext->opened         = true;
 8017580:	f043 0301 	orr.w	r3, r3, #1
 8017584:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
                ext->sel_opt_id_ori = ext->sel_opt_id; /*Save the current value. Used to revert this
 8017588:	8f63      	ldrh	r3, [r4, #58]	; 0x3a
 801758a:	87a3      	strh	r3, [r4, #60]	; 0x3c
                lv_ddlist_refr_size(ddlist, true);
 801758c:	2101      	movs	r1, #1
 801758e:	e7dd      	b.n	801754c <lv_ddlist_signal+0x24>
                ext->opened     = false;
 8017590:	f366 0300 	bfi	r3, r6, #0, #1
                ext->opened     = 0;
 8017594:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
                ext->sel_opt_id = ext->sel_opt_id_ori;
 8017598:	8fa3      	ldrh	r3, [r4, #60]	; 0x3c
 801759a:	8763      	strh	r3, [r4, #58]	; 0x3a
 801759c:	e7f6      	b.n	801758c <lv_ddlist_signal+0x64>
            if(!ext->opened) {
 801759e:	07de      	lsls	r6, r3, #31
 80175a0:	d4da      	bmi.n	8017558 <lv_ddlist_signal+0x30>
 80175a2:	e7ed      	b.n	8017580 <lv_ddlist_signal+0x58>
    } else if(sign == LV_SIGNAL_RELEASED) {
 80175a4:	2e0a      	cmp	r6, #10
 80175a6:	d103      	bne.n	80175b0 <lv_ddlist_signal+0x88>
        release_handler(ddlist);
 80175a8:	4628      	mov	r0, r5
 80175aa:	f7ff ff2d 	bl	8017408 <release_handler>
 80175ae:	e7d3      	b.n	8017558 <lv_ddlist_signal+0x30>
    } else if(sign == LV_SIGNAL_DEFOCUS) {
 80175b0:	2e10      	cmp	r6, #16
 80175b2:	d106      	bne.n	80175c2 <lv_ddlist_signal+0x9a>
            if(ext->opened) {
 80175b4:	f894 303e 	ldrb.w	r3, [r4, #62]	; 0x3e
 80175b8:	07da      	lsls	r2, r3, #31
 80175ba:	d5cd      	bpl.n	8017558 <lv_ddlist_signal+0x30>
                ext->opened     = 0;
 80175bc:	f36f 0300 	bfc	r3, #0, #1
 80175c0:	e7e8      	b.n	8017594 <lv_ddlist_signal+0x6c>
    } else if(sign == LV_SIGNAL_CONTROL) {
 80175c2:	2e11      	cmp	r6, #17
 80175c4:	d136      	bne.n	8017634 <lv_ddlist_signal+0x10c>
        char c = *((char *)param);
 80175c6:	f898 3000 	ldrb.w	r3, [r8]
        if(c == LV_KEY_RIGHT || c == LV_KEY_DOWN) {
 80175ca:	f1a3 0212 	sub.w	r2, r3, #18
 80175ce:	2a01      	cmp	r2, #1
 80175d0:	d818      	bhi.n	8017604 <lv_ddlist_signal+0xdc>
            if(!ext->opened) {
 80175d2:	f890 303e 	ldrb.w	r3, [r0, #62]	; 0x3e
 80175d6:	07d8      	lsls	r0, r3, #31
 80175d8:	d407      	bmi.n	80175ea <lv_ddlist_signal+0xc2>
                ext->opened = 1;
 80175da:	f043 0301 	orr.w	r3, r3, #1
 80175de:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
                lv_ddlist_refr_size(ddlist, true);
 80175e2:	4639      	mov	r1, r7
 80175e4:	4628      	mov	r0, r5
 80175e6:	f7ff fe93 	bl	8017310 <lv_ddlist_refr_size>
            if(ext->sel_opt_id + 1 < ext->option_cnt) {
 80175ea:	8f63      	ldrh	r3, [r4, #58]	; 0x3a
 80175ec:	8f22      	ldrh	r2, [r4, #56]	; 0x38
 80175ee:	3301      	adds	r3, #1
 80175f0:	4293      	cmp	r3, r2
 80175f2:	dab1      	bge.n	8017558 <lv_ddlist_signal+0x30>
                lv_ddlist_pos_current_option(ddlist);
 80175f4:	4628      	mov	r0, r5
                ext->sel_opt_id--;
 80175f6:	8763      	strh	r3, [r4, #58]	; 0x3a
                lv_ddlist_pos_current_option(ddlist);
 80175f8:	f7ff fe37 	bl	801726a <lv_ddlist_pos_current_option>
                lv_obj_invalidate(ddlist);
 80175fc:	4628      	mov	r0, r5
 80175fe:	f7f8 f905 	bl	800f80c <lv_obj_invalidate>
 8017602:	e7a9      	b.n	8017558 <lv_ddlist_signal+0x30>
        } else if(c == LV_KEY_LEFT || c == LV_KEY_UP) {
 8017604:	2b14      	cmp	r3, #20
 8017606:	d001      	beq.n	801760c <lv_ddlist_signal+0xe4>
 8017608:	2b11      	cmp	r3, #17
 801760a:	d110      	bne.n	801762e <lv_ddlist_signal+0x106>
            if(!ext->opened) {
 801760c:	f894 303e 	ldrb.w	r3, [r4, #62]	; 0x3e
 8017610:	07d9      	lsls	r1, r3, #31
 8017612:	d407      	bmi.n	8017624 <lv_ddlist_signal+0xfc>
                ext->opened = 1;
 8017614:	f043 0301 	orr.w	r3, r3, #1
 8017618:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
                lv_ddlist_refr_size(ddlist, true);
 801761c:	2101      	movs	r1, #1
 801761e:	4628      	mov	r0, r5
 8017620:	f7ff fe76 	bl	8017310 <lv_ddlist_refr_size>
            if(ext->sel_opt_id > 0) {
 8017624:	8f63      	ldrh	r3, [r4, #58]	; 0x3a
 8017626:	2b00      	cmp	r3, #0
 8017628:	d096      	beq.n	8017558 <lv_ddlist_signal+0x30>
                ext->sel_opt_id--;
 801762a:	3b01      	subs	r3, #1
 801762c:	e7e2      	b.n	80175f4 <lv_ddlist_signal+0xcc>
        } else if(c == LV_KEY_ESC) {
 801762e:	2b1b      	cmp	r3, #27
 8017630:	d192      	bne.n	8017558 <lv_ddlist_signal+0x30>
 8017632:	e7bf      	b.n	80175b4 <lv_ddlist_signal+0x8c>
    } else if(sign == LV_SIGNAL_GET_EDITABLE) {
 8017634:	2e12      	cmp	r6, #18
 8017636:	d102      	bne.n	801763e <lv_ddlist_signal+0x116>
        *editable       = true;
 8017638:	f888 7000 	strb.w	r7, [r8]
 801763c:	e78c      	b.n	8017558 <lv_ddlist_signal+0x30>
    } else if(sign == LV_SIGNAL_GET_TYPE) {
 801763e:	2e06      	cmp	r6, #6
 8017640:	d18a      	bne.n	8017558 <lv_ddlist_signal+0x30>
 8017642:	2300      	movs	r3, #0
            if(buf->type[i] == NULL) break;
 8017644:	f858 1023 	ldr.w	r1, [r8, r3, lsl #2]
 8017648:	b2da      	uxtb	r2, r3
 801764a:	b119      	cbz	r1, 8017654 <lv_ddlist_signal+0x12c>
 801764c:	3301      	adds	r3, #1
        for(i = 0; i < LV_MAX_ANCESTOR_NUM - 1; i++) { /*Find the last set data*/
 801764e:	2b07      	cmp	r3, #7
 8017650:	d1f8      	bne.n	8017644 <lv_ddlist_signal+0x11c>
 8017652:	461a      	mov	r2, r3
        buf->type[i] = "lv_ddlist";
 8017654:	4b02      	ldr	r3, [pc, #8]	; (8017660 <lv_ddlist_signal+0x138>)
 8017656:	f848 3022 	str.w	r3, [r8, r2, lsl #2]
 801765a:	e77d      	b.n	8017558 <lv_ddlist_signal+0x30>
 801765c:	2000b240 	.word	0x2000b240
 8017660:	080f4f97 	.word	0x080f4f97

08017664 <lv_page_set_scrl_fit2>:
 * @param page pointer to a page object
 * @param hot horizontal fit policy from `lv_fit_t`
 * @param ver vertical fit policy from `lv_fit_t`
 */
static inline void lv_page_set_scrl_fit2(lv_obj_t * page, lv_fit_t hor, lv_fit_t ver)
{
 8017664:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8017666:	4614      	mov	r4, r2
 8017668:	460d      	mov	r5, r1
    lv_cont_set_fit2(lv_page_get_scrl(page), hor, ver);
 801766a:	f001 fec6 	bl	80193fa <lv_page_get_scrl>
 * @param hor horizontal fit policy from `lv_fit_t`
 * @param ver vertical fit policy from `lv_fit_t`
 */
static inline void lv_cont_set_fit2(lv_obj_t * cont, lv_fit_t hor, lv_fit_t ver)
{
    lv_cont_set_fit4(cont, hor, hor, ver, ver);
 801766e:	9400      	str	r4, [sp, #0]
 8017670:	4623      	mov	r3, r4
 8017672:	462a      	mov	r2, r5
 8017674:	4629      	mov	r1, r5
 8017676:	f7ff fac0 	bl	8016bfa <lv_cont_set_fit4>
}
 801767a:	b003      	add	sp, #12
 801767c:	bd30      	pop	{r4, r5, pc}

0801767e <lv_ddlist_refr_width>:
/**
 * Be sure the width of the scrollable exactly fits the ddlist
 * @param ddlist pointer to a ddlist
 */
static void lv_ddlist_refr_width(lv_obj_t * ddlist)
{
 801767e:	b510      	push	{r4, lr}
 8017680:	4604      	mov	r4, r0
 * @param page pointer to a page object
 * @return an element of `lv_fit_t`
 */
static inline lv_fit_t lv_page_get_scrl_fit_bottom(const lv_obj_t * page)
{
    return lv_cont_get_fit_bottom(lv_page_get_scrl(page));
 8017682:	f001 feba 	bl	80193fa <lv_page_get_scrl>
 8017686:	f7ff fde9 	bl	801725c <lv_cont_get_fit_bottom>
    /*Set the TIGHT fit horizontally the set the width to the content*/
    lv_page_set_scrl_fit2(ddlist, LV_FIT_TIGHT, lv_page_get_scrl_fit_bottom(ddlist));
 801768a:	2101      	movs	r1, #1
 801768c:	4602      	mov	r2, r0
 801768e:	4620      	mov	r0, r4
 8017690:	f7ff ffe8 	bl	8017664 <lv_page_set_scrl_fit2>
 8017694:	4620      	mov	r0, r4
 8017696:	f001 feb0 	bl	80193fa <lv_page_get_scrl>
 801769a:	f7ff fddf 	bl	801725c <lv_cont_get_fit_bottom>

    /*Revert FILL fit to fill the parent with the options area. It allows to RIGHT/CENTER align the text*/
    lv_page_set_scrl_fit2(ddlist, LV_FIT_FILL, lv_page_get_scrl_fit_bottom(ddlist));
 801769e:	2103      	movs	r1, #3
 80176a0:	4602      	mov	r2, r0
 80176a2:	4620      	mov	r0, r4
}
 80176a4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    lv_page_set_scrl_fit2(ddlist, LV_FIT_FILL, lv_page_get_scrl_fit_bottom(ddlist));
 80176a8:	f7ff bfdc 	b.w	8017664 <lv_page_set_scrl_fit2>

080176ac <lv_ddlist_set_options>:
{
 80176ac:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80176ae:	4606      	mov	r6, r0
 80176b0:	460f      	mov	r7, r1
    lv_ddlist_ext_t * ext = lv_obj_get_ext_attr(ddlist);
 80176b2:	f7f8 ff64 	bl	801057e <lv_obj_get_ext_attr>
    ext->option_cnt = 0;
 80176b6:	2300      	movs	r3, #0
    lv_ddlist_ext_t * ext = lv_obj_get_ext_attr(ddlist);
 80176b8:	4604      	mov	r4, r0
    ext->option_cnt = 0;
 80176ba:	8703      	strh	r3, [r0, #56]	; 0x38
    for(i = 0; options[i] != '\0'; i++) {
 80176bc:	b29a      	uxth	r2, r3
 80176be:	5cbd      	ldrb	r5, [r7, r2]
 80176c0:	b9d5      	cbnz	r5, 80176f8 <lv_ddlist_set_options+0x4c>
    ext->option_cnt++; /*Last option has no `\n`*/
 80176c2:	8f23      	ldrh	r3, [r4, #56]	; 0x38
    lv_label_set_text(ext->label, options);
 80176c4:	6b20      	ldr	r0, [r4, #48]	; 0x30
    ext->sel_opt_id     = 0;
 80176c6:	8765      	strh	r5, [r4, #58]	; 0x3a
    ext->option_cnt++; /*Last option has no `\n`*/
 80176c8:	3301      	adds	r3, #1
 80176ca:	8723      	strh	r3, [r4, #56]	; 0x38
    lv_label_set_text(ext->label, options);
 80176cc:	4639      	mov	r1, r7
    ext->sel_opt_id_ori = 0;
 80176ce:	87a5      	strh	r5, [r4, #60]	; 0x3c
    lv_label_set_text(ext->label, options);
 80176d0:	f001 fa9c 	bl	8018c0c <lv_label_set_text>
    lv_ddlist_refr_width(ddlist);
 80176d4:	4630      	mov	r0, r6
 80176d6:	f7ff ffd2 	bl	801767e <lv_ddlist_refr_width>
    switch(lv_label_get_align(ext->label)) {
 80176da:	6b20      	ldr	r0, [r4, #48]	; 0x30
 80176dc:	f000 ffbe 	bl	801865c <lv_label_get_align>
 80176e0:	2801      	cmp	r0, #1
 80176e2:	d018      	beq.n	8017716 <lv_ddlist_set_options+0x6a>
 80176e4:	d30f      	bcc.n	8017706 <lv_ddlist_set_options+0x5a>
 80176e6:	2802      	cmp	r0, #2
 80176e8:	d019      	beq.n	801771e <lv_ddlist_set_options+0x72>
    lv_ddlist_refr_size(ddlist, false);
 80176ea:	2100      	movs	r1, #0
 80176ec:	4630      	mov	r0, r6
}
 80176ee:	b003      	add	sp, #12
 80176f0:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    lv_ddlist_refr_size(ddlist, false);
 80176f4:	f7ff be0c 	b.w	8017310 <lv_ddlist_refr_size>
        if(options[i] == '\n') ext->option_cnt++;
 80176f8:	2d0a      	cmp	r5, #10
 80176fa:	bf02      	ittt	eq
 80176fc:	8f22      	ldrheq	r2, [r4, #56]	; 0x38
 80176fe:	3201      	addeq	r2, #1
 8017700:	8722      	strheq	r2, [r4, #56]	; 0x38
 8017702:	3301      	adds	r3, #1
 8017704:	e7da      	b.n	80176bc <lv_ddlist_set_options+0x10>
        case LV_LABEL_ALIGN_LEFT: lv_obj_align(ext->label, NULL, LV_ALIGN_IN_LEFT_MID, 0, 0); break;
 8017706:	9500      	str	r5, [sp, #0]
 8017708:	462b      	mov	r3, r5
 801770a:	2207      	movs	r2, #7
        case LV_LABEL_ALIGN_RIGHT: lv_obj_align(ext->label, NULL, LV_ALIGN_IN_RIGHT_MID, 0, 0); break;
 801770c:	4619      	mov	r1, r3
 801770e:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8017710:	f7f8 f93e 	bl	800f990 <lv_obj_align>
 8017714:	e7e9      	b.n	80176ea <lv_ddlist_set_options+0x3e>
        case LV_LABEL_ALIGN_CENTER: lv_obj_align(ext->label, NULL, LV_ALIGN_CENTER, 0, 0); break;
 8017716:	9500      	str	r5, [sp, #0]
 8017718:	462b      	mov	r3, r5
 801771a:	462a      	mov	r2, r5
 801771c:	e7f6      	b.n	801770c <lv_ddlist_set_options+0x60>
        case LV_LABEL_ALIGN_RIGHT: lv_obj_align(ext->label, NULL, LV_ALIGN_IN_RIGHT_MID, 0, 0); break;
 801771e:	9500      	str	r5, [sp, #0]
 8017720:	462b      	mov	r3, r5
 8017722:	2208      	movs	r2, #8
 8017724:	e7f2      	b.n	801770c <lv_ddlist_set_options+0x60>

08017726 <lv_ddlist_set_selected>:
{
 8017726:	b538      	push	{r3, r4, r5, lr}
 8017728:	460c      	mov	r4, r1
 801772a:	4605      	mov	r5, r0
    lv_ddlist_ext_t * ext = lv_obj_get_ext_attr(ddlist);
 801772c:	f7f8 ff27 	bl	801057e <lv_obj_get_ext_attr>
    if(ext->sel_opt_id == sel_opt) return;
 8017730:	8f43      	ldrh	r3, [r0, #58]	; 0x3a
 8017732:	42a3      	cmp	r3, r4
 8017734:	d014      	beq.n	8017760 <lv_ddlist_set_selected+0x3a>
    ext->sel_opt_id     = sel_opt < ext->option_cnt ? sel_opt : ext->option_cnt - 1;
 8017736:	8f01      	ldrh	r1, [r0, #56]	; 0x38
    if(ext->opened == 0) {
 8017738:	f890 303e 	ldrb.w	r3, [r0, #62]	; 0x3e
    ext->sel_opt_id     = sel_opt < ext->option_cnt ? sel_opt : ext->option_cnt - 1;
 801773c:	428c      	cmp	r4, r1
 801773e:	bf24      	itt	cs
 8017740:	f101 31ff 	addcs.w	r1, r1, #4294967295	; 0xffffffff
 8017744:	b28c      	uxthcs	r4, r1
    if(ext->opened == 0) {
 8017746:	07db      	lsls	r3, r3, #31
    ext->sel_opt_id     = sel_opt < ext->option_cnt ? sel_opt : ext->option_cnt - 1;
 8017748:	8744      	strh	r4, [r0, #58]	; 0x3a
    ext->sel_opt_id_ori = ext->sel_opt_id;
 801774a:	8784      	strh	r4, [r0, #60]	; 0x3c
        lv_ddlist_pos_current_option(ddlist);
 801774c:	4628      	mov	r0, r5
    if(ext->opened == 0) {
 801774e:	d403      	bmi.n	8017758 <lv_ddlist_set_selected+0x32>
}
 8017750:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        lv_ddlist_pos_current_option(ddlist);
 8017754:	f7ff bd89 	b.w	801726a <lv_ddlist_pos_current_option>
}
 8017758:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        lv_obj_invalidate(ddlist);
 801775c:	f7f8 b856 	b.w	800f80c <lv_obj_invalidate>
 8017760:	bd38      	pop	{r3, r4, r5, pc}

08017762 <lv_ddlist_set_fix_height>:
{
 8017762:	b538      	push	{r3, r4, r5, lr}
 8017764:	460c      	mov	r4, r1
 8017766:	4605      	mov	r5, r0
    lv_ddlist_ext_t * ext = lv_obj_get_ext_attr(ddlist);
 8017768:	f7f8 ff09 	bl	801057e <lv_obj_get_ext_attr>
    if(ext->fix_height == h) return;
 801776c:	f9b0 3040 	ldrsh.w	r3, [r0, #64]	; 0x40
 8017770:	42a3      	cmp	r3, r4
 8017772:	d007      	beq.n	8017784 <lv_ddlist_set_fix_height+0x22>
    ext->fix_height = h;
 8017774:	f8a0 4040 	strh.w	r4, [r0, #64]	; 0x40
    lv_ddlist_refr_size(ddlist, false);
 8017778:	2100      	movs	r1, #0
 801777a:	4628      	mov	r0, r5
}
 801777c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    lv_ddlist_refr_size(ddlist, false);
 8017780:	f7ff bdc6 	b.w	8017310 <lv_ddlist_refr_size>
 8017784:	bd38      	pop	{r3, r4, r5, pc}

08017786 <lv_ddlist_set_fix_width>:
{
 8017786:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8017788:	4604      	mov	r4, r0
    if(w == 0) {
 801778a:	460d      	mov	r5, r1
 801778c:	b979      	cbnz	r1, 80177ae <lv_ddlist_set_fix_width+0x28>
        lv_cont_set_fit2(ddlist, LV_FIT_TIGHT, lv_cont_get_fit_bottom(ddlist));
 801778e:	f7ff fd65 	bl	801725c <lv_cont_get_fit_bottom>
 8017792:	2201      	movs	r2, #1
 8017794:	4603      	mov	r3, r0
 8017796:	9000      	str	r0, [sp, #0]
 8017798:	4611      	mov	r1, r2
 801779a:	4620      	mov	r0, r4
 801779c:	f7ff fa2d 	bl	8016bfa <lv_cont_set_fit4>
    lv_ddlist_refr_size(ddlist, false);
 80177a0:	2100      	movs	r1, #0
 80177a2:	4620      	mov	r0, r4
}
 80177a4:	b003      	add	sp, #12
 80177a6:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    lv_ddlist_refr_size(ddlist, false);
 80177aa:	f7ff bdb1 	b.w	8017310 <lv_ddlist_refr_size>
        lv_cont_set_fit2(ddlist, LV_FIT_NONE, lv_cont_get_fit_bottom(ddlist));
 80177ae:	f7ff fd55 	bl	801725c <lv_cont_get_fit_bottom>
 80177b2:	2200      	movs	r2, #0
 80177b4:	4603      	mov	r3, r0
 80177b6:	9000      	str	r0, [sp, #0]
 80177b8:	4611      	mov	r1, r2
 80177ba:	4620      	mov	r0, r4
 80177bc:	f7ff fa1d 	bl	8016bfa <lv_cont_set_fit4>
        lv_obj_set_width(ddlist, w);
 80177c0:	4629      	mov	r1, r5
 80177c2:	4620      	mov	r0, r4
 80177c4:	f7f8 fcce 	bl	8010164 <lv_obj_set_width>
 80177c8:	e7ea      	b.n	80177a0 <lv_ddlist_set_fix_width+0x1a>

080177ca <lv_ddlist_set_stay_open>:
{
 80177ca:	b510      	push	{r4, lr}
 80177cc:	460c      	mov	r4, r1
    lv_ddlist_ext_t * ext = lv_obj_get_ext_attr(ddlist);
 80177ce:	f7f8 fed6 	bl	801057e <lv_obj_get_ext_attr>
    ext->stay_open = en ? 1 : 0;
 80177d2:	f890 303e 	ldrb.w	r3, [r0, #62]	; 0x3e
 80177d6:	f364 03c3 	bfi	r3, r4, #3, #1
 80177da:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
 80177de:	bd10      	pop	{r4, pc}

080177e0 <lv_ddlist_set_style>:
{
 80177e0:	b570      	push	{r4, r5, r6, lr}
 80177e2:	460e      	mov	r6, r1
 80177e4:	4604      	mov	r4, r0
 80177e6:	4615      	mov	r5, r2
    lv_ddlist_ext_t * ext = lv_obj_get_ext_attr(ddlist);
 80177e8:	f7f8 fec9 	bl	801057e <lv_obj_get_ext_attr>
    switch(type) {
 80177ec:	2e01      	cmp	r6, #1
 80177ee:	d014      	beq.n	801781a <lv_ddlist_set_style+0x3a>
 80177f0:	d302      	bcc.n	80177f8 <lv_ddlist_set_style+0x18>
 80177f2:	2e02      	cmp	r6, #2
 80177f4:	d00a      	beq.n	801780c <lv_ddlist_set_style+0x2c>
 80177f6:	bd70      	pop	{r4, r5, r6, pc}
            lv_page_set_style(ddlist, LV_PAGE_STYLE_BG, style);
 80177f8:	4620      	mov	r0, r4
 80177fa:	462a      	mov	r2, r5
 80177fc:	2100      	movs	r1, #0
 80177fe:	f001 fdcc 	bl	801939a <lv_page_set_style>
            lv_ddlist_refr_width(ddlist);
 8017802:	4620      	mov	r0, r4
}
 8017804:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
            lv_ddlist_refr_width(ddlist);
 8017808:	f7ff bf39 	b.w	801767e <lv_ddlist_refr_width>
        case LV_DDLIST_STYLE_SB: lv_page_set_style(ddlist, LV_PAGE_STYLE_SB, style); break;
 801780c:	462a      	mov	r2, r5
 801780e:	4631      	mov	r1, r6
 8017810:	4620      	mov	r0, r4
}
 8017812:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        case LV_DDLIST_STYLE_SB: lv_page_set_style(ddlist, LV_PAGE_STYLE_SB, style); break;
 8017816:	f001 bdc0 	b.w	801939a <lv_page_set_style>
            ext->sel_style  = style;
 801781a:	6345      	str	r5, [r0, #52]	; 0x34
            lv_obj_t * scrl = lv_page_get_scrl(ddlist);
 801781c:	4620      	mov	r0, r4
 801781e:	f001 fdec 	bl	80193fa <lv_page_get_scrl>
}
 8017822:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
            lv_obj_refresh_ext_draw_pad(scrl); /*Because of the wider selected rectangle*/
 8017826:	f7f8 bcba 	b.w	801019e <lv_obj_refresh_ext_draw_pad>
	...

0801782c <lv_ddlist_create>:
{
 801782c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801782e:	460e      	mov	r6, r1
    lv_obj_t * new_ddlist = lv_page_create(par, copy);
 8017830:	f001 fe06 	bl	8019440 <lv_page_create>
    lv_mem_assert(new_ddlist);
 8017834:	4604      	mov	r4, r0
 8017836:	b900      	cbnz	r0, 801783a <lv_ddlist_create+0xe>
 8017838:	e7fe      	b.n	8017838 <lv_ddlist_create+0xc>
    if(ancestor_signal == NULL) ancestor_signal = lv_obj_get_signal_cb(new_ddlist);
 801783a:	4d5f      	ldr	r5, [pc, #380]	; (80179b8 <lv_ddlist_create+0x18c>)
 801783c:	682b      	ldr	r3, [r5, #0]
 801783e:	b913      	cbnz	r3, 8017846 <lv_ddlist_create+0x1a>
 8017840:	f7f8 fe99 	bl	8010576 <lv_obj_get_signal_cb>
 8017844:	6028      	str	r0, [r5, #0]
    if(ancestor_scrl_signal == NULL) ancestor_scrl_signal = lv_obj_get_signal_cb(lv_page_get_scrl(new_ddlist));
 8017846:	4d5d      	ldr	r5, [pc, #372]	; (80179bc <lv_ddlist_create+0x190>)
 8017848:	682b      	ldr	r3, [r5, #0]
 801784a:	b92b      	cbnz	r3, 8017858 <lv_ddlist_create+0x2c>
 801784c:	4620      	mov	r0, r4
 801784e:	f001 fdd4 	bl	80193fa <lv_page_get_scrl>
 8017852:	f7f8 fe90 	bl	8010576 <lv_obj_get_signal_cb>
 8017856:	6028      	str	r0, [r5, #0]
    if(ancestor_design == NULL) ancestor_design = lv_obj_get_design_cb(new_ddlist);
 8017858:	4d59      	ldr	r5, [pc, #356]	; (80179c0 <lv_ddlist_create+0x194>)
 801785a:	682b      	ldr	r3, [r5, #0]
 801785c:	b91b      	cbnz	r3, 8017866 <lv_ddlist_create+0x3a>
 801785e:	4620      	mov	r0, r4
 8017860:	f7f8 fe8b 	bl	801057a <lv_obj_get_design_cb>
 8017864:	6028      	str	r0, [r5, #0]
    lv_ddlist_ext_t * ext = lv_obj_allocate_ext_attr(new_ddlist, sizeof(lv_ddlist_ext_t));
 8017866:	2144      	movs	r1, #68	; 0x44
 8017868:	4620      	mov	r0, r4
 801786a:	f7f7 ffa1 	bl	800f7b0 <lv_obj_allocate_ext_attr>
    lv_mem_assert(ext);
 801786e:	4605      	mov	r5, r0
 8017870:	b900      	cbnz	r0, 8017874 <lv_ddlist_create+0x48>
 8017872:	e7fe      	b.n	8017872 <lv_ddlist_create+0x46>
    ext->opened         = 0;
 8017874:	f890 203e 	ldrb.w	r2, [r0, #62]	; 0x3e
    ext->sel_style      = &lv_style_plain_color;
 8017878:	4f52      	ldr	r7, [pc, #328]	; (80179c4 <lv_ddlist_create+0x198>)
    lv_obj_set_signal_cb(new_ddlist, lv_ddlist_signal);
 801787a:	4953      	ldr	r1, [pc, #332]	; (80179c8 <lv_ddlist_create+0x19c>)
    ext->sel_style      = &lv_style_plain_color;
 801787c:	6347      	str	r7, [r0, #52]	; 0x34
    ext->label          = NULL;
 801787e:	2300      	movs	r3, #0
    ext->stay_open      = 0;
 8017880:	f002 02fa 	and.w	r2, r2, #250	; 0xfa
 8017884:	f363 02c3 	bfi	r2, r3, #3, #1
    ext->label          = NULL;
 8017888:	6303      	str	r3, [r0, #48]	; 0x30
    ext->fix_height     = 0;
 801788a:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40
    ext->sel_opt_id     = 0;
 801788e:	8743      	strh	r3, [r0, #58]	; 0x3a
    ext->sel_opt_id_ori = 0;
 8017890:	8783      	strh	r3, [r0, #60]	; 0x3c
    ext->option_cnt     = 0;
 8017892:	8703      	strh	r3, [r0, #56]	; 0x38
    ext->stay_open      = 0;
 8017894:	f880 203e 	strb.w	r2, [r0, #62]	; 0x3e
    lv_obj_set_signal_cb(new_ddlist, lv_ddlist_signal);
 8017898:	4620      	mov	r0, r4
 801789a:	f7f7 ff85 	bl	800f7a8 <lv_obj_set_signal_cb>
    lv_obj_set_signal_cb(lv_page_get_scrl(new_ddlist), lv_ddlist_scrl_signal);
 801789e:	4620      	mov	r0, r4
 80178a0:	f001 fdab 	bl	80193fa <lv_page_get_scrl>
 80178a4:	4949      	ldr	r1, [pc, #292]	; (80179cc <lv_ddlist_create+0x1a0>)
 80178a6:	f7f7 ff7f 	bl	800f7a8 <lv_obj_set_signal_cb>
    lv_obj_set_design_cb(new_ddlist, lv_ddlist_design);
 80178aa:	4949      	ldr	r1, [pc, #292]	; (80179d0 <lv_ddlist_create+0x1a4>)
 80178ac:	4620      	mov	r0, r4
 80178ae:	f7f7 ff7d 	bl	800f7ac <lv_obj_set_design_cb>
    if(copy == NULL) {
 80178b2:	2e00      	cmp	r6, #0
 80178b4:	d14c      	bne.n	8017950 <lv_ddlist_create+0x124>
        lv_page_set_anim_time(new_ddlist, LV_DDLIST_DEF_ANIM_TIME);
 80178b6:	21c8      	movs	r1, #200	; 0xc8
 80178b8:	4620      	mov	r0, r4
 80178ba:	f001 fd68 	bl	801938e <lv_page_set_anim_time>
        lv_obj_t * scrl = lv_page_get_scrl(new_ddlist);
 80178be:	4620      	mov	r0, r4
 80178c0:	f001 fd9b 	bl	80193fa <lv_page_get_scrl>
        lv_obj_set_drag(scrl, false);
 80178c4:	4631      	mov	r1, r6
 80178c6:	f7f7 fea2 	bl	800f60e <lv_obj_set_drag>
        lv_page_set_scrl_fit2(new_ddlist, LV_FIT_FILL, LV_FIT_TIGHT);
 80178ca:	2201      	movs	r2, #1
 80178cc:	2103      	movs	r1, #3
 80178ce:	4620      	mov	r0, r4
 80178d0:	f7ff fec8 	bl	8017664 <lv_page_set_scrl_fit2>
        ext->label = lv_label_create(new_ddlist, NULL);
 80178d4:	4631      	mov	r1, r6
 80178d6:	4620      	mov	r0, r4
 80178d8:	f001 fa42 	bl	8018d60 <lv_label_create>
 80178dc:	2201      	movs	r2, #1
 80178de:	4633      	mov	r3, r6
 80178e0:	6328      	str	r0, [r5, #48]	; 0x30
 80178e2:	4611      	mov	r1, r2
 80178e4:	4620      	mov	r0, r4
 80178e6:	9600      	str	r6, [sp, #0]
 80178e8:	f7ff f987 	bl	8016bfa <lv_cont_set_fit4>
        lv_page_set_sb_mode(new_ddlist, LV_SB_MODE_HIDE);
 80178ec:	2104      	movs	r1, #4
 80178ee:	4620      	mov	r0, r4
 80178f0:	f001 fd20 	bl	8019334 <lv_page_set_sb_mode>
        lv_page_set_style(new_ddlist, LV_PAGE_STYLE_SCRL, &lv_style_transp_tight);
 80178f4:	4a37      	ldr	r2, [pc, #220]	; (80179d4 <lv_ddlist_create+0x1a8>)
 80178f6:	2101      	movs	r1, #1
 80178f8:	4620      	mov	r0, r4
 80178fa:	f001 fd4e 	bl	801939a <lv_page_set_style>
        lv_ddlist_set_options(new_ddlist, "Option 1\nOption 2\nOption 3");
 80178fe:	4936      	ldr	r1, [pc, #216]	; (80179d8 <lv_ddlist_create+0x1ac>)
 8017900:	4620      	mov	r0, r4
 8017902:	f7ff fed3 	bl	80176ac <lv_ddlist_set_options>
        lv_theme_t * th = lv_theme_get_current();
 8017906:	f002 ffbf 	bl	801a888 <lv_theme_get_current>
        if(th) {
 801790a:	4605      	mov	r5, r0
 801790c:	b1a0      	cbz	r0, 8017938 <lv_ddlist_create+0x10c>
            lv_ddlist_set_style(new_ddlist, LV_DDLIST_STYLE_BG, th->style.ddlist.bg);
 801790e:	f8d0 214c 	ldr.w	r2, [r0, #332]	; 0x14c
 8017912:	4631      	mov	r1, r6
 8017914:	4620      	mov	r0, r4
 8017916:	f7ff ff63 	bl	80177e0 <lv_ddlist_set_style>
            lv_ddlist_set_style(new_ddlist, LV_DDLIST_STYLE_SEL, th->style.ddlist.sel);
 801791a:	f8d5 2150 	ldr.w	r2, [r5, #336]	; 0x150
 801791e:	2101      	movs	r1, #1
 8017920:	4620      	mov	r0, r4
 8017922:	f7ff ff5d 	bl	80177e0 <lv_ddlist_set_style>
            lv_ddlist_set_style(new_ddlist, LV_DDLIST_STYLE_SB, th->style.ddlist.sb);
 8017926:	f8d5 2154 	ldr.w	r2, [r5, #340]	; 0x154
            lv_ddlist_set_style(new_ddlist, LV_DDLIST_STYLE_SB, &lv_style_pretty_color);
 801792a:	2102      	movs	r1, #2
 801792c:	4620      	mov	r0, r4
 801792e:	f7ff ff57 	bl	80177e0 <lv_ddlist_set_style>
}
 8017932:	4620      	mov	r0, r4
 8017934:	b003      	add	sp, #12
 8017936:	bdf0      	pop	{r4, r5, r6, r7, pc}
            lv_ddlist_set_style(new_ddlist, LV_DDLIST_STYLE_BG, &lv_style_pretty);
 8017938:	4a28      	ldr	r2, [pc, #160]	; (80179dc <lv_ddlist_create+0x1b0>)
 801793a:	4631      	mov	r1, r6
 801793c:	4620      	mov	r0, r4
 801793e:	f7ff ff4f 	bl	80177e0 <lv_ddlist_set_style>
            lv_ddlist_set_style(new_ddlist, LV_DDLIST_STYLE_SEL, &lv_style_plain_color);
 8017942:	463a      	mov	r2, r7
 8017944:	2101      	movs	r1, #1
 8017946:	4620      	mov	r0, r4
 8017948:	f7ff ff4a 	bl	80177e0 <lv_ddlist_set_style>
            lv_ddlist_set_style(new_ddlist, LV_DDLIST_STYLE_SB, &lv_style_pretty_color);
 801794c:	4a24      	ldr	r2, [pc, #144]	; (80179e0 <lv_ddlist_create+0x1b4>)
 801794e:	e7ec      	b.n	801792a <lv_ddlist_create+0xfe>
        lv_ddlist_ext_t * copy_ext = lv_obj_get_ext_attr(copy);
 8017950:	4630      	mov	r0, r6
 8017952:	f7f8 fe14 	bl	801057e <lv_obj_get_ext_attr>
 8017956:	4606      	mov	r6, r0
        ext->label                 = lv_label_create(new_ddlist, copy_ext->label);
 8017958:	6b01      	ldr	r1, [r0, #48]	; 0x30
 801795a:	4620      	mov	r0, r4
 801795c:	f001 fa00 	bl	8018d60 <lv_label_create>
 8017960:	6328      	str	r0, [r5, #48]	; 0x30
 8017962:	4607      	mov	r7, r0
        lv_label_set_text(ext->label, lv_label_get_text(copy_ext->label));
 8017964:	6b30      	ldr	r0, [r6, #48]	; 0x30
 8017966:	f000 fe6d 	bl	8018644 <lv_label_get_text>
 801796a:	4601      	mov	r1, r0
 801796c:	4638      	mov	r0, r7
 801796e:	f001 f94d 	bl	8018c0c <lv_label_set_text>
        ext->sel_opt_id     = copy_ext->sel_opt_id;
 8017972:	8f73      	ldrh	r3, [r6, #58]	; 0x3a
 8017974:	876b      	strh	r3, [r5, #58]	; 0x3a
        ext->sel_opt_id_ori = copy_ext->sel_opt_id;
 8017976:	8f73      	ldrh	r3, [r6, #58]	; 0x3a
 8017978:	87ab      	strh	r3, [r5, #60]	; 0x3c
        ext->fix_height     = copy_ext->fix_height;
 801797a:	f9b6 3040 	ldrsh.w	r3, [r6, #64]	; 0x40
 801797e:	f8a5 3040 	strh.w	r3, [r5, #64]	; 0x40
        ext->option_cnt     = copy_ext->option_cnt;
 8017982:	8f33      	ldrh	r3, [r6, #56]	; 0x38
 8017984:	872b      	strh	r3, [r5, #56]	; 0x38
        ext->sel_style      = copy_ext->sel_style;
 8017986:	6b73      	ldr	r3, [r6, #52]	; 0x34
 8017988:	636b      	str	r3, [r5, #52]	; 0x34
        ext->draw_arrow     = copy_ext->draw_arrow;
 801798a:	f896 303e 	ldrb.w	r3, [r6, #62]	; 0x3e
 801798e:	f895 203e 	ldrb.w	r2, [r5, #62]	; 0x3e
 8017992:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8017996:	f363 0282 	bfi	r2, r3, #2, #1
 801799a:	f885 203e 	strb.w	r2, [r5, #62]	; 0x3e
        ext->stay_open      = copy_ext->stay_open;
 801799e:	f896 303e 	ldrb.w	r3, [r6, #62]	; 0x3e
 80179a2:	b2d2      	uxtb	r2, r2
 80179a4:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 80179a8:	f363 02c3 	bfi	r2, r3, #3, #1
 80179ac:	f885 203e 	strb.w	r2, [r5, #62]	; 0x3e
        lv_obj_refresh_style(new_ddlist);
 80179b0:	4620      	mov	r0, r4
 80179b2:	f7f8 fbe6 	bl	8010182 <lv_obj_refresh_style>
 80179b6:	e7bc      	b.n	8017932 <lv_ddlist_create+0x106>
 80179b8:	2000b240 	.word	0x2000b240
 80179bc:	2000b23c 	.word	0x2000b23c
 80179c0:	2000b238 	.word	0x2000b238
 80179c4:	2000c798 	.word	0x2000c798
 80179c8:	08017529 	.word	0x08017529
 80179cc:	08017cb1 	.word	0x08017cb1
 80179d0:	08017a89 	.word	0x08017a89
 80179d4:	2000c5f4 	.word	0x2000c5f4
 80179d8:	080f4f78 	.word	0x080f4f78
 80179dc:	2000c5b8 	.word	0x2000c5b8
 80179e0:	2000c4c8 	.word	0x2000c4c8

080179e4 <lv_ddlist_get_selected>:
{
 80179e4:	b508      	push	{r3, lr}
    lv_ddlist_ext_t * ext = lv_obj_get_ext_attr(ddlist);
 80179e6:	f7f8 fdca 	bl	801057e <lv_obj_get_ext_attr>
}
 80179ea:	8f40      	ldrh	r0, [r0, #58]	; 0x3a
 80179ec:	bd08      	pop	{r3, pc}

080179ee <lv_ddlist_get_selected_str>:
{
 80179ee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80179f2:	4690      	mov	r8, r2
 80179f4:	460f      	mov	r7, r1
    lv_ddlist_ext_t * ext = lv_obj_get_ext_attr(ddlist);
 80179f6:	f7f8 fdc2 	bl	801057e <lv_obj_get_ext_attr>
 80179fa:	4606      	mov	r6, r0
    const char * opt_txt = lv_label_get_text(ext->label);
 80179fc:	6b00      	ldr	r0, [r0, #48]	; 0x30
 80179fe:	f000 fe21 	bl	8018644 <lv_label_get_text>
 8017a02:	4604      	mov	r4, r0
    uint16_t txt_len     = strlen(opt_txt);
 8017a04:	f7e8 fbe4 	bl	80001d0 <strlen>
    for(i = 0; i < txt_len && line != ext->sel_opt_id; i++) {
 8017a08:	4622      	mov	r2, r4
    uint16_t txt_len     = strlen(opt_txt);
 8017a0a:	b280      	uxth	r0, r0
    uint16_t line        = 0;
 8017a0c:	2300      	movs	r3, #0
 8017a0e:	1b15      	subs	r5, r2, r4
 8017a10:	b2ad      	uxth	r5, r5
    for(i = 0; i < txt_len && line != ext->sel_opt_id; i++) {
 8017a12:	42a8      	cmp	r0, r5
 8017a14:	d810      	bhi.n	8017a38 <lv_ddlist_get_selected_str+0x4a>
 8017a16:	2300      	movs	r3, #0
    for(c = 0; opt_txt[i] != '\n' && i < txt_len; c++, i++) {
 8017a18:	1966      	adds	r6, r4, r5
        if(buf_size && c >= buf_size - 1) {
 8017a1a:	f108 31ff 	add.w	r1, r8, #4294967295	; 0xffffffff
    for(c = 0; opt_txt[i] != '\n' && i < txt_len; c++, i++) {
 8017a1e:	5cf2      	ldrb	r2, [r6, r3]
 8017a20:	2a0a      	cmp	r2, #10
 8017a22:	b29c      	uxth	r4, r3
 8017a24:	d003      	beq.n	8017a2e <lv_ddlist_get_selected_str+0x40>
 8017a26:	442c      	add	r4, r5
 8017a28:	b2a4      	uxth	r4, r4
 8017a2a:	42a0      	cmp	r0, r4
 8017a2c:	d80e      	bhi.n	8017a4c <lv_ddlist_get_selected_str+0x5e>
    buf[c] = '\0';
 8017a2e:	b29b      	uxth	r3, r3
 8017a30:	2200      	movs	r2, #0
 8017a32:	54fa      	strb	r2, [r7, r3]
 8017a34:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    for(i = 0; i < txt_len && line != ext->sel_opt_id; i++) {
 8017a38:	8f71      	ldrh	r1, [r6, #58]	; 0x3a
 8017a3a:	4299      	cmp	r1, r3
 8017a3c:	d0eb      	beq.n	8017a16 <lv_ddlist_get_selected_str+0x28>
        if(opt_txt[i] == '\n') line++;
 8017a3e:	f812 1b01 	ldrb.w	r1, [r2], #1
 8017a42:	290a      	cmp	r1, #10
 8017a44:	bf04      	itt	eq
 8017a46:	3301      	addeq	r3, #1
 8017a48:	b29b      	uxtheq	r3, r3
 8017a4a:	e7e0      	b.n	8017a0e <lv_ddlist_get_selected_str+0x20>
        if(buf_size && c >= buf_size - 1) {
 8017a4c:	f1b8 0f00 	cmp.w	r8, #0
 8017a50:	d001      	beq.n	8017a56 <lv_ddlist_get_selected_str+0x68>
 8017a52:	4299      	cmp	r1, r3
 8017a54:	ddeb      	ble.n	8017a2e <lv_ddlist_get_selected_str+0x40>
        buf[c] = opt_txt[i];
 8017a56:	54fa      	strb	r2, [r7, r3]
 8017a58:	3301      	adds	r3, #1
 8017a5a:	e7e0      	b.n	8017a1e <lv_ddlist_get_selected_str+0x30>

08017a5c <lv_ddlist_get_style>:
{
 8017a5c:	b538      	push	{r3, r4, r5, lr}
 8017a5e:	460c      	mov	r4, r1
 8017a60:	4605      	mov	r5, r0
    lv_ddlist_ext_t * ext = lv_obj_get_ext_attr(ddlist);
 8017a62:	f7f8 fd8c 	bl	801057e <lv_obj_get_ext_attr>
    switch(type) {
 8017a66:	2c01      	cmp	r4, #1
 8017a68:	d00c      	beq.n	8017a84 <lv_ddlist_get_style+0x28>
 8017a6a:	d303      	bcc.n	8017a74 <lv_ddlist_get_style+0x18>
 8017a6c:	2c02      	cmp	r4, #2
 8017a6e:	d007      	beq.n	8017a80 <lv_ddlist_get_style+0x24>
        default: return NULL;
 8017a70:	2000      	movs	r0, #0
}
 8017a72:	bd38      	pop	{r3, r4, r5, pc}
        case LV_DDLIST_STYLE_BG: return lv_page_get_style(ddlist, LV_PAGE_STYLE_BG);
 8017a74:	2100      	movs	r1, #0
        case LV_DDLIST_STYLE_SB: return lv_page_get_style(ddlist, LV_PAGE_STYLE_SB);
 8017a76:	4628      	mov	r0, r5
}
 8017a78:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        case LV_DDLIST_STYLE_SB: return lv_page_get_style(ddlist, LV_PAGE_STYLE_SB);
 8017a7c:	f001 bcc7 	b.w	801940e <lv_page_get_style>
 8017a80:	4621      	mov	r1, r4
 8017a82:	e7f8      	b.n	8017a76 <lv_ddlist_get_style+0x1a>
        case LV_DDLIST_STYLE_SEL: return ext->sel_style;
 8017a84:	6b40      	ldr	r0, [r0, #52]	; 0x34
 8017a86:	bd38      	pop	{r3, r4, r5, pc}

08017a88 <lv_ddlist_design>:
{
 8017a88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    if(mode == LV_DESIGN_COVER_CHK) {
 8017a8c:	2a02      	cmp	r2, #2
{
 8017a8e:	b09d      	sub	sp, #116	; 0x74
 8017a90:	4604      	mov	r4, r0
 8017a92:	460e      	mov	r6, r1
 8017a94:	4690      	mov	r8, r2
    if(mode == LV_DESIGN_COVER_CHK) {
 8017a96:	d105      	bne.n	8017aa4 <lv_ddlist_design+0x1c>
        return ancestor_design(ddlist, mask, mode);
 8017a98:	4b83      	ldr	r3, [pc, #524]	; (8017ca8 <lv_ddlist_design+0x220>)
 8017a9a:	681b      	ldr	r3, [r3, #0]
 8017a9c:	4798      	blx	r3
}
 8017a9e:	b01d      	add	sp, #116	; 0x74
 8017aa0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    else if(mode == LV_DESIGN_DRAW_MAIN) {
 8017aa4:	2a00      	cmp	r2, #0
 8017aa6:	d139      	bne.n	8017b1c <lv_ddlist_design+0x94>
        ancestor_design(ddlist, mask, mode);
 8017aa8:	4b7f      	ldr	r3, [pc, #508]	; (8017ca8 <lv_ddlist_design+0x220>)
 8017aaa:	681b      	ldr	r3, [r3, #0]
 8017aac:	4798      	blx	r3
        lv_ddlist_ext_t * ext = lv_obj_get_ext_attr(ddlist);
 8017aae:	4620      	mov	r0, r4
 8017ab0:	f7f8 fd65 	bl	801057e <lv_obj_get_ext_attr>
 8017ab4:	4605      	mov	r5, r0
        lv_opa_t opa_scale    = lv_obj_get_opa_scale(ddlist);
 8017ab6:	4620      	mov	r0, r4
 8017ab8:	f7f8 fcf9 	bl	80104ae <lv_obj_get_opa_scale>
        if(ext->opened != 0 || ext->force_sel) {
 8017abc:	f895 303e 	ldrb.w	r3, [r5, #62]	; 0x3e
 8017ac0:	079a      	lsls	r2, r3, #30
        lv_opa_t opa_scale    = lv_obj_get_opa_scale(ddlist);
 8017ac2:	4607      	mov	r7, r0
        if(ext->opened != 0 || ext->force_sel) {
 8017ac4:	d101      	bne.n	8017aca <lv_ddlist_design+0x42>
    return true;
 8017ac6:	2001      	movs	r0, #1
 8017ac8:	e7e9      	b.n	8017a9e <lv_ddlist_design+0x16>
            const lv_style_t * style = lv_ddlist_get_style(ddlist, LV_DDLIST_STYLE_BG);
 8017aca:	4641      	mov	r1, r8
 8017acc:	4620      	mov	r0, r4
 8017ace:	f7ff ffc5 	bl	8017a5c <lv_ddlist_get_style>
            rect_area.y1 += ext->sel_opt_id * (font_h + style->text.line_space);
 8017ad2:	f9b0 102a 	ldrsh.w	r1, [r0, #42]	; 0x2a
 8017ad6:	6a43      	ldr	r3, [r0, #36]	; 0x24
            rect_area.y1 = ext->label->coords.y1;
 8017ad8:	6b28      	ldr	r0, [r5, #48]	; 0x30
 8017ada:	f893 e008 	ldrb.w	lr, [r3, #8]
            rect_area.y1 -= style->text.line_space / 2;
 8017ade:	8a42      	ldrh	r2, [r0, #18]
 8017ae0:	2302      	movs	r3, #2
 8017ae2:	fb91 f3f3 	sdiv	r3, r1, r3
 8017ae6:	1ad3      	subs	r3, r2, r3
            rect_area.y1 += ext->sel_opt_id * (font_h + style->text.line_space);
 8017ae8:	8f6a      	ldrh	r2, [r5, #58]	; 0x3a
 8017aea:	eb0e 0001 	add.w	r0, lr, r1
            rect_area.y1 -= style->text.line_space / 2;
 8017aee:	fb12 3200 	smlabb	r2, r2, r0, r3
            rect_area.y2 = rect_area.y1 + font_h + style->text.line_space - 1;
 8017af2:	3901      	subs	r1, #1
 8017af4:	4471      	add	r1, lr
            rect_area.x1 = ddlist->coords.x1;
 8017af6:	8a23      	ldrh	r3, [r4, #16]
 8017af8:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
            rect_area.y1 -= style->text.line_space / 2;
 8017afc:	b292      	uxth	r2, r2
            rect_area.x2 = ddlist->coords.x2;
 8017afe:	8aa3      	ldrh	r3, [r4, #20]
            rect_area.y1 -= style->text.line_space / 2;
 8017b00:	f8ad 2036 	strh.w	r2, [sp, #54]	; 0x36
            rect_area.y2 = rect_area.y1 + font_h + style->text.line_space - 1;
 8017b04:	440a      	add	r2, r1
 8017b06:	f8ad 203a 	strh.w	r2, [sp, #58]	; 0x3a
            rect_area.x2 = ddlist->coords.x2;
 8017b0a:	f8ad 3038 	strh.w	r3, [sp, #56]	; 0x38
            lv_draw_rect(&rect_area, mask, ext->sel_style, opa_scale);
 8017b0e:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 8017b10:	463b      	mov	r3, r7
 8017b12:	4631      	mov	r1, r6
 8017b14:	a80d      	add	r0, sp, #52	; 0x34
 8017b16:	f7fa fdf7 	bl	8012708 <lv_draw_rect>
 8017b1a:	e7d4      	b.n	8017ac6 <lv_ddlist_design+0x3e>
    else if(mode == LV_DESIGN_DRAW_POST) {
 8017b1c:	2a01      	cmp	r2, #1
 8017b1e:	d1d2      	bne.n	8017ac6 <lv_ddlist_design+0x3e>
        lv_ddlist_ext_t * ext = lv_obj_get_ext_attr(ddlist);
 8017b20:	f7f8 fd2d 	bl	801057e <lv_obj_get_ext_attr>
 8017b24:	4680      	mov	r8, r0
        lv_opa_t opa_scale    = lv_obj_get_opa_scale(ddlist);
 8017b26:	4620      	mov	r0, r4
 8017b28:	f7f8 fcc1 	bl	80104ae <lv_obj_get_opa_scale>
        if(ext->opened || ext->force_sel) {
 8017b2c:	f898 303e 	ldrb.w	r3, [r8, #62]	; 0x3e
 8017b30:	f013 0503 	ands.w	r5, r3, #3
        lv_opa_t opa_scale    = lv_obj_get_opa_scale(ddlist);
 8017b34:	4607      	mov	r7, r0
        if(ext->opened || ext->force_sel) {
 8017b36:	d065      	beq.n	8017c04 <lv_ddlist_design+0x17c>
            const lv_style_t * style = lv_ddlist_get_style(ddlist, LV_DDLIST_STYLE_BG);
 8017b38:	2100      	movs	r1, #0
 8017b3a:	4620      	mov	r0, r4
 8017b3c:	f7ff ff8e 	bl	8017a5c <lv_ddlist_get_style>
 8017b40:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8017b42:	4605      	mov	r5, r0
 8017b44:	7a18      	ldrb	r0, [r3, #8]
            area_sel.y1 -= style->text.line_space / 2;
 8017b46:	f8d8 3030 	ldr.w	r3, [r8, #48]	; 0x30
            area_sel.y1 += ext->sel_opt_id * (font_h + style->text.line_space);
 8017b4a:	f9b5 202a 	ldrsh.w	r2, [r5, #42]	; 0x2a
            area_sel.y1 -= style->text.line_space / 2;
 8017b4e:	8a5b      	ldrh	r3, [r3, #18]
 8017b50:	2102      	movs	r1, #2
 8017b52:	fb92 f1f1 	sdiv	r1, r2, r1
 8017b56:	1a59      	subs	r1, r3, r1
            area_sel.y1 += ext->sel_opt_id * (font_h + style->text.line_space);
 8017b58:	f8b8 303a 	ldrh.w	r3, [r8, #58]	; 0x3a
 8017b5c:	eb00 0e02 	add.w	lr, r0, r2
            area_sel.y1 -= style->text.line_space / 2;
 8017b60:	fb13 130e 	smlabb	r3, r3, lr, r1
            area_sel.y2 = area_sel.y1 + font_h + style->text.line_space - 1;
 8017b64:	3a01      	subs	r2, #1
 8017b66:	4402      	add	r2, r0
            area_sel.y1 -= style->text.line_space / 2;
 8017b68:	b29b      	uxth	r3, r3
 8017b6a:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
            area_sel.y2 = area_sel.y1 + font_h + style->text.line_space - 1;
 8017b6e:	4413      	add	r3, r2
 8017b70:	f8ad 302a 	strh.w	r3, [sp, #42]	; 0x2a
            area_sel.x1 = ddlist->coords.x1;
 8017b74:	8a23      	ldrh	r3, [r4, #16]
 8017b76:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
            area_ok = lv_area_intersect(&mask_sel, mask, &area_sel);
 8017b7a:	aa09      	add	r2, sp, #36	; 0x24
            area_sel.x2 = ddlist->coords.x2;
 8017b7c:	8aa3      	ldrh	r3, [r4, #20]
 8017b7e:	f8ad 3028 	strh.w	r3, [sp, #40]	; 0x28
            area_ok = lv_area_intersect(&mask_sel, mask, &area_sel);
 8017b82:	4631      	mov	r1, r6
 8017b84:	a80b      	add	r0, sp, #44	; 0x2c
 8017b86:	f7fd fbb0 	bl	80152ea <lv_area_intersect>
            if(area_ok) {
 8017b8a:	b390      	cbz	r0, 8017bf2 <lv_ddlist_design+0x16a>
    lv_ddlist_ext_t * ext = lv_obj_get_ext_attr(ddlist);
 8017b8c:	4620      	mov	r0, r4
 8017b8e:	f7f8 fcf6 	bl	801057e <lv_obj_get_ext_attr>
        case LV_DDLIST_STYLE_SEL: return ext->sel_style;
 8017b92:	f8d0 9034 	ldr.w	r9, [r0, #52]	; 0x34
                lv_style_copy(&new_style, style);
 8017b96:	4629      	mov	r1, r5
 8017b98:	a80d      	add	r0, sp, #52	; 0x34
 8017b9a:	f7f9 f865 	bl	8010c68 <lv_style_copy>
                new_style.text.color = sel_style->text.color;
 8017b9e:	f8b9 3020 	ldrh.w	r3, [r9, #32]
 8017ba2:	f8ad 3054 	strh.w	r3, [sp, #84]	; 0x54
                new_style.text.opa   = sel_style->text.opa;
 8017ba6:	f899 302c 	ldrb.w	r3, [r9, #44]	; 0x2c
 8017baa:	f88d 3060 	strb.w	r3, [sp, #96]	; 0x60
    lv_ddlist_ext_t * ext = lv_obj_get_ext_attr(ddlist);
 8017bae:	4620      	mov	r0, r4
 8017bb0:	f7f8 fce5 	bl	801057e <lv_obj_get_ext_attr>
    if(!ext->label) return LV_TXT_FLAG_CENTER;
 8017bb4:	6b00      	ldr	r0, [r0, #48]	; 0x30
 8017bb6:	b318      	cbz	r0, 8017c00 <lv_ddlist_design+0x178>
    lv_label_align_t align = lv_label_get_align(ext->label);
 8017bb8:	f000 fd50 	bl	801865c <lv_label_get_align>
    switch(align) {
 8017bbc:	2801      	cmp	r0, #1
 8017bbe:	d01f      	beq.n	8017c00 <lv_ddlist_design+0x178>
        case LV_LABEL_ALIGN_LEFT: return LV_TXT_FLAG_NONE;
 8017bc0:	2802      	cmp	r0, #2
 8017bc2:	bf0c      	ite	eq
 8017bc4:	2508      	moveq	r5, #8
 8017bc6:	2500      	movne	r5, #0
                lv_draw_label(&ext->label->coords, &mask_sel, &new_style, opa_scale, lv_label_get_text(ext->label),
 8017bc8:	f8d8 8030 	ldr.w	r8, [r8, #48]	; 0x30
 8017bcc:	4640      	mov	r0, r8
 8017bce:	f000 fd39 	bl	8018644 <lv_label_get_text>
 8017bd2:	2300      	movs	r3, #0
 8017bd4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8017bd8:	9305      	str	r3, [sp, #20]
 8017bda:	9204      	str	r2, [sp, #16]
 8017bdc:	9203      	str	r2, [sp, #12]
 8017bde:	9302      	str	r3, [sp, #8]
 8017be0:	e88d 0021 	stmia.w	sp, {r0, r5}
 8017be4:	463b      	mov	r3, r7
 8017be6:	aa0d      	add	r2, sp, #52	; 0x34
 8017be8:	a90b      	add	r1, sp, #44	; 0x2c
 8017bea:	f108 0010 	add.w	r0, r8, #16
                    lv_draw_label(&area_arrow, &mask_arrow, &new_style, opa_scale, LV_SYMBOL_DOWN, LV_TXT_FLAG_NONE,
 8017bee:	f7fa faf5 	bl	80121dc <lv_draw_label>
        ancestor_design(ddlist, mask, mode);
 8017bf2:	4b2d      	ldr	r3, [pc, #180]	; (8017ca8 <lv_ddlist_design+0x220>)
 8017bf4:	2201      	movs	r2, #1
 8017bf6:	681b      	ldr	r3, [r3, #0]
 8017bf8:	4631      	mov	r1, r6
 8017bfa:	4620      	mov	r0, r4
 8017bfc:	4798      	blx	r3
 8017bfe:	e762      	b.n	8017ac6 <lv_ddlist_design+0x3e>
    if(!ext->label) return LV_TXT_FLAG_CENTER;
 8017c00:	2504      	movs	r5, #4
 8017c02:	e7e1      	b.n	8017bc8 <lv_ddlist_design+0x140>
            if(ext->draw_arrow) {
 8017c04:	075b      	lsls	r3, r3, #29
 8017c06:	d5f4      	bpl.n	8017bf2 <lv_ddlist_design+0x16a>
                const lv_style_t * style     = lv_ddlist_get_style(ddlist, LV_DDLIST_STYLE_BG);
 8017c08:	4629      	mov	r1, r5
 8017c0a:	4620      	mov	r0, r4
 8017c0c:	f7ff ff26 	bl	8017a5c <lv_ddlist_get_style>
                const lv_style_t * sel_style = lv_ddlist_get_style(ddlist, LV_DDLIST_STYLE_BG);
 8017c10:	4629      	mov	r1, r5
                const lv_style_t * style     = lv_ddlist_get_style(ddlist, LV_DDLIST_STYLE_BG);
 8017c12:	4682      	mov	sl, r0
                const lv_font_t * font       = style->text.font;
 8017c14:	f8d0 8024 	ldr.w	r8, [r0, #36]	; 0x24
                const lv_style_t * sel_style = lv_ddlist_get_style(ddlist, LV_DDLIST_STYLE_BG);
 8017c18:	4620      	mov	r0, r4
 8017c1a:	f7ff ff1f 	bl	8017a5c <lv_ddlist_get_style>
                lv_style_copy(&new_style, style);
 8017c1e:	4651      	mov	r1, sl
                const lv_style_t * sel_style = lv_ddlist_get_style(ddlist, LV_DDLIST_STYLE_BG);
 8017c20:	9007      	str	r0, [sp, #28]
                lv_style_copy(&new_style, style);
 8017c22:	a80d      	add	r0, sp, #52	; 0x34
 8017c24:	f898 9008 	ldrb.w	r9, [r8, #8]
                                lv_txt_get_width(LV_SYMBOL_DOWN, strlen(LV_SYMBOL_DOWN), sel_style->text.font, 0, 0);
 8017c28:	f8df 8080 	ldr.w	r8, [pc, #128]	; 8017cac <lv_ddlist_design+0x224>
                lv_style_copy(&new_style, style);
 8017c2c:	f7f9 f81c 	bl	8010c68 <lv_style_copy>
                new_style.text.color = sel_style->text.color;
 8017c30:	9a07      	ldr	r2, [sp, #28]
                area_arrow.x2 = ddlist->coords.x2 - style->body.padding.right;
 8017c32:	f8b4 b014 	ldrh.w	fp, [r4, #20]
                new_style.text.color = sel_style->text.color;
 8017c36:	8c13      	ldrh	r3, [r2, #32]
 8017c38:	f8ad 3054 	strh.w	r3, [sp, #84]	; 0x54
                new_style.text.opa   = sel_style->text.opa;
 8017c3c:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c
 8017c40:	f88d 3060 	strb.w	r3, [sp, #96]	; 0x60
                area_arrow.x2 = ddlist->coords.x2 - style->body.padding.right;
 8017c44:	f8ba 001c 	ldrh.w	r0, [sl, #28]
                                lv_txt_get_width(LV_SYMBOL_DOWN, strlen(LV_SYMBOL_DOWN), sel_style->text.font, 0, 0);
 8017c48:	9500      	str	r5, [sp, #0]
                area_arrow.x2 = ddlist->coords.x2 - style->body.padding.right;
 8017c4a:	ebab 0b00 	sub.w	fp, fp, r0
 8017c4e:	fa1f fb8b 	uxth.w	fp, fp
                                lv_txt_get_width(LV_SYMBOL_DOWN, strlen(LV_SYMBOL_DOWN), sel_style->text.font, 0, 0);
 8017c52:	462b      	mov	r3, r5
 8017c54:	6a52      	ldr	r2, [r2, #36]	; 0x24
                area_arrow.x2 = ddlist->coords.x2 - style->body.padding.right;
 8017c56:	f8ad b028 	strh.w	fp, [sp, #40]	; 0x28
                                lv_txt_get_width(LV_SYMBOL_DOWN, strlen(LV_SYMBOL_DOWN), sel_style->text.font, 0, 0);
 8017c5a:	2103      	movs	r1, #3
 8017c5c:	4640      	mov	r0, r8
 8017c5e:	f7fe f907 	bl	8015e70 <lv_txt_get_width>
                area_arrow.y1 = ddlist->coords.y1 + style->text.line_space;
 8017c62:	f8ba 202a 	ldrh.w	r2, [sl, #42]	; 0x2a
 8017c66:	8a63      	ldrh	r3, [r4, #18]
 8017c68:	4413      	add	r3, r2
                area_arrow.x1 = area_arrow.x2 -
 8017c6a:	ebab 0000 	sub.w	r0, fp, r0
                area_arrow.y1 = ddlist->coords.y1 + style->text.line_space;
 8017c6e:	b29b      	uxth	r3, r3
                area_arrow.x1 = area_arrow.x2 -
 8017c70:	f8ad 0024 	strh.w	r0, [sp, #36]	; 0x24
                area_arrow.y1 = ddlist->coords.y1 + style->text.line_space;
 8017c74:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
                area_ok = lv_area_intersect(&mask_arrow, mask, &area_arrow);
 8017c78:	aa09      	add	r2, sp, #36	; 0x24
                area_arrow.y2 = area_arrow.y1 + font_h;
 8017c7a:	444b      	add	r3, r9
                area_ok = lv_area_intersect(&mask_arrow, mask, &area_arrow);
 8017c7c:	4631      	mov	r1, r6
 8017c7e:	a80b      	add	r0, sp, #44	; 0x2c
                area_arrow.y2 = area_arrow.y1 + font_h;
 8017c80:	f8ad 302a 	strh.w	r3, [sp, #42]	; 0x2a
                area_ok = lv_area_intersect(&mask_arrow, mask, &area_arrow);
 8017c84:	f7fd fb31 	bl	80152ea <lv_area_intersect>
                if(area_ok) {
 8017c88:	2800      	cmp	r0, #0
 8017c8a:	d0b2      	beq.n	8017bf2 <lv_ddlist_design+0x16a>
                    lv_draw_label(&area_arrow, &mask_arrow, &new_style, opa_scale, LV_SYMBOL_DOWN, LV_TXT_FLAG_NONE,
 8017c8c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8017c90:	9304      	str	r3, [sp, #16]
 8017c92:	9303      	str	r3, [sp, #12]
 8017c94:	9505      	str	r5, [sp, #20]
 8017c96:	9502      	str	r5, [sp, #8]
 8017c98:	9501      	str	r5, [sp, #4]
 8017c9a:	f8cd 8000 	str.w	r8, [sp]
 8017c9e:	463b      	mov	r3, r7
 8017ca0:	aa0d      	add	r2, sp, #52	; 0x34
 8017ca2:	a90b      	add	r1, sp, #44	; 0x2c
 8017ca4:	a809      	add	r0, sp, #36	; 0x24
 8017ca6:	e7a2      	b.n	8017bee <lv_ddlist_design+0x166>
 8017ca8:	2000b238 	.word	0x2000b238
 8017cac:	080f4f93 	.word	0x080f4f93

08017cb0 <lv_ddlist_scrl_signal>:
{
 8017cb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    res = ancestor_scrl_signal(scrl, sign, param);
 8017cb2:	4b18      	ldr	r3, [pc, #96]	; (8017d14 <lv_ddlist_scrl_signal+0x64>)
 8017cb4:	681b      	ldr	r3, [r3, #0]
{
 8017cb6:	4605      	mov	r5, r0
 8017cb8:	460c      	mov	r4, r1
    res = ancestor_scrl_signal(scrl, sign, param);
 8017cba:	4798      	blx	r3
    if(res != LV_RES_OK) return res;
 8017cbc:	2801      	cmp	r0, #1
    res = ancestor_scrl_signal(scrl, sign, param);
 8017cbe:	4606      	mov	r6, r0
    if(res != LV_RES_OK) return res;
 8017cc0:	d114      	bne.n	8017cec <lv_ddlist_scrl_signal+0x3c>
    lv_obj_t * ddlist = lv_obj_get_parent(scrl);
 8017cc2:	4628      	mov	r0, r5
 8017cc4:	f7f8 fae2 	bl	801028c <lv_obj_get_parent>
    if(sign == LV_SIGNAL_REFR_EXT_DRAW_PAD) {
 8017cc8:	2c05      	cmp	r4, #5
    lv_obj_t * ddlist = lv_obj_get_parent(scrl);
 8017cca:	4607      	mov	r7, r0
    if(sign == LV_SIGNAL_REFR_EXT_DRAW_PAD) {
 8017ccc:	d110      	bne.n	8017cf0 <lv_ddlist_scrl_signal+0x40>
        const lv_style_t * style = lv_ddlist_get_style(ddlist, LV_DDLIST_STYLE_BG);
 8017cce:	2100      	movs	r1, #0
 8017cd0:	f7ff fec4 	bl	8017a5c <lv_ddlist_get_style>
        lv_coord_t hpad          = LV_MATH_MAX(style->body.padding.left, style->body.padding.right);
 8017cd4:	f9b0 301c 	ldrsh.w	r3, [r0, #28]
 8017cd8:	f9b0 201a 	ldrsh.w	r2, [r0, #26]
 8017cdc:	4293      	cmp	r3, r2
 8017cde:	bfb8      	it	lt
 8017ce0:	4613      	movlt	r3, r2
        if(scrl->ext_draw_pad < hpad) scrl->ext_draw_pad = hpad;
 8017ce2:	f9b5 2034 	ldrsh.w	r2, [r5, #52]	; 0x34
 8017ce6:	429a      	cmp	r2, r3
 8017ce8:	da00      	bge.n	8017cec <lv_ddlist_scrl_signal+0x3c>
 8017cea:	86ab      	strh	r3, [r5, #52]	; 0x34
}
 8017cec:	4630      	mov	r0, r6
 8017cee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    } else if(sign == LV_SIGNAL_RELEASED) {
 8017cf0:	2c0a      	cmp	r4, #10
 8017cf2:	d109      	bne.n	8017d08 <lv_ddlist_scrl_signal+0x58>
        if(lv_indev_is_dragging(lv_indev_get_act()) == false) {
 8017cf4:	f7f7 fbde 	bl	800f4b4 <lv_indev_get_act>
 8017cf8:	f7f7 fbff 	bl	800f4fa <lv_indev_is_dragging>
 8017cfc:	2800      	cmp	r0, #0
 8017cfe:	d1f5      	bne.n	8017cec <lv_ddlist_scrl_signal+0x3c>
            release_handler(ddlist);
 8017d00:	4638      	mov	r0, r7
 8017d02:	f7ff fb81 	bl	8017408 <release_handler>
 8017d06:	e7f1      	b.n	8017cec <lv_ddlist_scrl_signal+0x3c>
    } else if(sign == LV_SIGNAL_CLEANUP) {
 8017d08:	2c00      	cmp	r4, #0
 8017d0a:	d1ef      	bne.n	8017cec <lv_ddlist_scrl_signal+0x3c>
        lv_ddlist_ext_t * ext = lv_obj_get_ext_attr(ddlist);
 8017d0c:	f7f8 fc37 	bl	801057e <lv_obj_get_ext_attr>
        ext->label            = NULL; /*The label is already deleted*/
 8017d10:	6304      	str	r4, [r0, #48]	; 0x30
 8017d12:	e7eb      	b.n	8017cec <lv_ddlist_scrl_signal+0x3c>
 8017d14:	2000b23c 	.word	0x2000b23c

08017d18 <lv_ddlist_open>:
{
 8017d18:	b538      	push	{r3, r4, r5, lr}
 8017d1a:	460d      	mov	r5, r1
 8017d1c:	4604      	mov	r4, r0
    lv_ddlist_ext_t * ext = lv_obj_get_ext_attr(ddlist);
 8017d1e:	f7f8 fc2e 	bl	801057e <lv_obj_get_ext_attr>
    ext->opened           = 1;
 8017d22:	f890 303e 	ldrb.w	r3, [r0, #62]	; 0x3e
 8017d26:	f043 0301 	orr.w	r3, r3, #1
 8017d2a:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
    lv_obj_set_drag(lv_page_get_scrl(ddlist), true);
 8017d2e:	4620      	mov	r0, r4
 8017d30:	f001 fb63 	bl	80193fa <lv_page_get_scrl>
 8017d34:	2101      	movs	r1, #1
 8017d36:	f7f7 fc6a 	bl	800f60e <lv_obj_set_drag>
    lv_ddlist_refr_size(ddlist, anim);
 8017d3a:	4629      	mov	r1, r5
 8017d3c:	4620      	mov	r0, r4
}
 8017d3e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    lv_ddlist_refr_size(ddlist, anim);
 8017d42:	f7ff bae5 	b.w	8017310 <lv_ddlist_refr_size>

08017d46 <lv_img_design>:
 *             LV_DESIGN_DRAW: draw the object (always return 'true')
 *             LV_DESIGN_DRAW_POST: drawing after every children are drawn
 * @param return true/false, depends on 'mode'
 */
static bool lv_img_design(lv_obj_t * img, const lv_area_t * mask, lv_design_mode_t mode)
{
 8017d46:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8017d4a:	b099      	sub	sp, #100	; 0x64
 8017d4c:	4690      	mov	r8, r2
 8017d4e:	4681      	mov	r9, r0
 8017d50:	460d      	mov	r5, r1
    const lv_style_t * style = lv_obj_get_style(img);
 8017d52:	f7f8 fb29 	bl	80103a8 <lv_obj_get_style>
 8017d56:	4606      	mov	r6, r0
    lv_img_ext_t * ext       = lv_obj_get_ext_attr(img);
 8017d58:	4648      	mov	r0, r9
 8017d5a:	f7f8 fc10 	bl	801057e <lv_obj_get_ext_attr>

    if(mode == LV_DESIGN_COVER_CHK) {
 8017d5e:	f1b8 0f02 	cmp.w	r8, #2
    lv_img_ext_t * ext       = lv_obj_get_ext_attr(img);
 8017d62:	4604      	mov	r4, r0
    if(mode == LV_DESIGN_COVER_CHK) {
 8017d64:	d115      	bne.n	8017d92 <lv_img_design+0x4c>
        bool cover = false;
        if(ext->src_type == LV_IMG_SRC_UNKNOWN || ext->src_type == LV_IMG_SRC_SYMBOL) return false;
 8017d66:	7b03      	ldrb	r3, [r0, #12]
 8017d68:	f003 0203 	and.w	r2, r3, #3
 8017d6c:	3a02      	subs	r2, #2
 8017d6e:	2a01      	cmp	r2, #1
 8017d70:	f240 808f 	bls.w	8017e92 <lv_img_design+0x14c>

        if(ext->cf == LV_IMG_CF_TRUE_COLOR || ext->cf == LV_IMG_CF_RAW) cover = lv_area_is_in(mask, &img->coords);
 8017d74:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
 8017d78:	2b20      	cmp	r3, #32
 8017d7a:	d002      	beq.n	8017d82 <lv_img_design+0x3c>
 8017d7c:	2b08      	cmp	r3, #8
 8017d7e:	f040 8088 	bne.w	8017e92 <lv_img_design+0x14c>
 8017d82:	f109 0110 	add.w	r1, r9, #16
 8017d86:	4628      	mov	r0, r5
 8017d88:	f7fd fb18 	bl	80153bc <lv_area_is_in>
            lv_draw_img(&img->coords, mask, NULL, style, opa_scale);
        }
    }

    return true;
}
 8017d8c:	b019      	add	sp, #100	; 0x64
 8017d8e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    } else if(mode == LV_DESIGN_DRAW_MAIN) {
 8017d92:	f1b8 0f00 	cmp.w	r8, #0
 8017d96:	d105      	bne.n	8017da4 <lv_img_design+0x5e>
        if(ext->h == 0 || ext->w == 0) return true;
 8017d98:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
 8017d9c:	b113      	cbz	r3, 8017da4 <lv_img_design+0x5e>
 8017d9e:	f9b0 3008 	ldrsh.w	r3, [r0, #8]
 8017da2:	b90b      	cbnz	r3, 8017da8 <lv_img_design+0x62>
    return true;
 8017da4:	2001      	movs	r0, #1
 8017da6:	e7f1      	b.n	8017d8c <lv_img_design+0x46>
        lv_opa_t opa_scale = lv_obj_get_opa_scale(img);
 8017da8:	4648      	mov	r0, r9
 8017daa:	f7f8 fb80 	bl	80104ae <lv_obj_get_opa_scale>
        lv_obj_get_coords(img, &coords);
 8017dae:	a907      	add	r1, sp, #28
        lv_opa_t opa_scale = lv_obj_get_opa_scale(img);
 8017db0:	4607      	mov	r7, r0
        lv_obj_get_coords(img, &coords);
 8017db2:	4648      	mov	r0, r9
 8017db4:	f7f8 fad5 	bl	8010362 <lv_obj_get_coords>
        if(ext->src_type == LV_IMG_SRC_FILE || ext->src_type == LV_IMG_SRC_VARIABLE) {
 8017db8:	7b23      	ldrb	r3, [r4, #12]
 8017dba:	f003 0303 	and.w	r3, r3, #3
 8017dbe:	2b01      	cmp	r3, #1
 8017dc0:	d842      	bhi.n	8017e48 <lv_img_design+0x102>
            coords.x1 -= ext->offset.x;
 8017dc2:	88a2      	ldrh	r2, [r4, #4]
 8017dc4:	f8bd 301c 	ldrh.w	r3, [sp, #28]
 8017dc8:	1a9b      	subs	r3, r3, r2
 8017dca:	f8ad 301c 	strh.w	r3, [sp, #28]
            coords.y1 -= ext->offset.y;
 8017dce:	88e2      	ldrh	r2, [r4, #6]
 8017dd0:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 8017dd4:	1a9b      	subs	r3, r3, r2
 8017dd6:	b29b      	uxth	r3, r3
 8017dd8:	b21a      	sxth	r2, r3
 8017dda:	f8ad 201e 	strh.w	r2, [sp, #30]
            cords_tmp.y1 = coords.y1;
 8017dde:	f8ad 2026 	strh.w	r2, [sp, #38]	; 0x26
            cords_tmp.y2 = coords.y1 + ext->h - 1;
 8017de2:	8962      	ldrh	r2, [r4, #10]
 8017de4:	3a01      	subs	r2, #1
            for(; cords_tmp.y1 < coords.y2; cords_tmp.y1 += ext->h, cords_tmp.y2 += ext->h) {
 8017de6:	4413      	add	r3, r2
 8017de8:	f8ad 302a 	strh.w	r3, [sp, #42]	; 0x2a
 8017dec:	f9bd 2026 	ldrsh.w	r2, [sp, #38]	; 0x26
 8017df0:	f9bd 3022 	ldrsh.w	r3, [sp, #34]	; 0x22
 8017df4:	429a      	cmp	r2, r3
 8017df6:	dad5      	bge.n	8017da4 <lv_img_design+0x5e>
                cords_tmp.x1 = coords.x1;
 8017df8:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
                cords_tmp.x2 = coords.x1 + ext->w - 1;
 8017dfc:	8922      	ldrh	r2, [r4, #8]
                cords_tmp.x1 = coords.x1;
 8017dfe:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
                cords_tmp.x2 = coords.x1 + ext->w - 1;
 8017e02:	3b01      	subs	r3, #1
                for(; cords_tmp.x1 < coords.x2; cords_tmp.x1 += ext->w, cords_tmp.x2 += ext->w) {
 8017e04:	4413      	add	r3, r2
 8017e06:	f8ad 3028 	strh.w	r3, [sp, #40]	; 0x28
 8017e0a:	f9bd 2024 	ldrsh.w	r2, [sp, #36]	; 0x24
 8017e0e:	f9bd 3020 	ldrsh.w	r3, [sp, #32]
 8017e12:	429a      	cmp	r2, r3
 8017e14:	db08      	blt.n	8017e28 <lv_img_design+0xe2>
            for(; cords_tmp.y1 < coords.y2; cords_tmp.y1 += ext->h, cords_tmp.y2 += ext->h) {
 8017e16:	8963      	ldrh	r3, [r4, #10]
 8017e18:	f8bd 2026 	ldrh.w	r2, [sp, #38]	; 0x26
 8017e1c:	441a      	add	r2, r3
 8017e1e:	f8ad 2026 	strh.w	r2, [sp, #38]	; 0x26
 8017e22:	f8bd 202a 	ldrh.w	r2, [sp, #42]	; 0x2a
 8017e26:	e7de      	b.n	8017de6 <lv_img_design+0xa0>
                    lv_draw_img(&cords_tmp, mask, ext->src, style, opa_scale);
 8017e28:	9700      	str	r7, [sp, #0]
 8017e2a:	4633      	mov	r3, r6
 8017e2c:	6822      	ldr	r2, [r4, #0]
 8017e2e:	4629      	mov	r1, r5
 8017e30:	a809      	add	r0, sp, #36	; 0x24
 8017e32:	f7fa f8d3 	bl	8011fdc <lv_draw_img>
                for(; cords_tmp.x1 < coords.x2; cords_tmp.x1 += ext->w, cords_tmp.x2 += ext->w) {
 8017e36:	8923      	ldrh	r3, [r4, #8]
 8017e38:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
 8017e3c:	441a      	add	r2, r3
 8017e3e:	f8ad 2024 	strh.w	r2, [sp, #36]	; 0x24
 8017e42:	f8bd 2028 	ldrh.w	r2, [sp, #40]	; 0x28
 8017e46:	e7dd      	b.n	8017e04 <lv_img_design+0xbe>
        } else if(ext->src_type == LV_IMG_SRC_SYMBOL) {
 8017e48:	2b02      	cmp	r3, #2
 8017e4a:	d119      	bne.n	8017e80 <lv_img_design+0x13a>
            lv_style_copy(&style_mod, style);
 8017e4c:	4631      	mov	r1, r6
 8017e4e:	a809      	add	r0, sp, #36	; 0x24
 8017e50:	f7f8 ff0a 	bl	8010c68 <lv_style_copy>
            style_mod.text.color = style->image.color;
 8017e54:	8e33      	ldrh	r3, [r6, #48]	; 0x30
 8017e56:	f8ad 3044 	strh.w	r3, [sp, #68]	; 0x44
            lv_draw_label(&coords, mask, &style_mod, opa_scale, ext->src, LV_TXT_FLAG_NONE, NULL, -1, -1, NULL);
 8017e5a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8017e5e:	f8cd 8014 	str.w	r8, [sp, #20]
 8017e62:	9304      	str	r3, [sp, #16]
 8017e64:	9303      	str	r3, [sp, #12]
 8017e66:	f8cd 8008 	str.w	r8, [sp, #8]
 8017e6a:	f8cd 8004 	str.w	r8, [sp, #4]
 8017e6e:	6823      	ldr	r3, [r4, #0]
 8017e70:	9300      	str	r3, [sp, #0]
 8017e72:	aa09      	add	r2, sp, #36	; 0x24
 8017e74:	463b      	mov	r3, r7
 8017e76:	4629      	mov	r1, r5
 8017e78:	a807      	add	r0, sp, #28
 8017e7a:	f7fa f9af 	bl	80121dc <lv_draw_label>
 8017e7e:	e791      	b.n	8017da4 <lv_img_design+0x5e>
            lv_draw_img(&img->coords, mask, NULL, style, opa_scale);
 8017e80:	9700      	str	r7, [sp, #0]
 8017e82:	4633      	mov	r3, r6
 8017e84:	4642      	mov	r2, r8
 8017e86:	4629      	mov	r1, r5
 8017e88:	f109 0010 	add.w	r0, r9, #16
 8017e8c:	f7fa f8a6 	bl	8011fdc <lv_draw_img>
 8017e90:	e788      	b.n	8017da4 <lv_img_design+0x5e>
        if(ext->src_type == LV_IMG_SRC_UNKNOWN || ext->src_type == LV_IMG_SRC_SYMBOL) return false;
 8017e92:	2000      	movs	r0, #0
 8017e94:	e77a      	b.n	8017d8c <lv_img_design+0x46>

08017e96 <lv_img_get_auto_size>:
{
 8017e96:	b508      	push	{r3, lr}
    lv_img_ext_t * ext = lv_obj_get_ext_attr(img);
 8017e98:	f7f8 fb71 	bl	801057e <lv_obj_get_ext_attr>
    return ext->auto_size == 0 ? false : true;
 8017e9c:	7b00      	ldrb	r0, [r0, #12]
}
 8017e9e:	f3c0 0080 	ubfx	r0, r0, #2, #1
 8017ea2:	bd08      	pop	{r3, pc}

08017ea4 <lv_img_set_src>:
{
 8017ea4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017ea8:	4606      	mov	r6, r0
 8017eaa:	b086      	sub	sp, #24
    lv_img_src_t src_type = lv_img_src_get_type(src_img);
 8017eac:	4608      	mov	r0, r1
{
 8017eae:	460d      	mov	r5, r1
    lv_img_src_t src_type = lv_img_src_get_type(src_img);
 8017eb0:	f7fa f96e 	bl	8012190 <lv_img_src_get_type>
 8017eb4:	4607      	mov	r7, r0
    lv_img_ext_t * ext    = lv_obj_get_ext_attr(img);
 8017eb6:	4630      	mov	r0, r6
 8017eb8:	f7f8 fb61 	bl	801057e <lv_obj_get_ext_attr>
    if(src_type == LV_IMG_SRC_UNKNOWN) {
 8017ebc:	2f03      	cmp	r7, #3
    lv_img_ext_t * ext    = lv_obj_get_ext_attr(img);
 8017ebe:	4604      	mov	r4, r0
    if(src_type == LV_IMG_SRC_UNKNOWN) {
 8017ec0:	d111      	bne.n	8017ee6 <lv_img_set_src+0x42>
        if(ext->src_type == LV_IMG_SRC_SYMBOL || ext->src_type == LV_IMG_SRC_FILE) {
 8017ec2:	7b03      	ldrb	r3, [r0, #12]
 8017ec4:	f003 0303 	and.w	r3, r3, #3
 8017ec8:	3b01      	subs	r3, #1
 8017eca:	2b01      	cmp	r3, #1
 8017ecc:	d802      	bhi.n	8017ed4 <lv_img_set_src+0x30>
            lv_mem_free(ext->src);
 8017ece:	6800      	ldr	r0, [r0, #0]
 8017ed0:	f7fd fc8e 	bl	80157f0 <lv_mem_free>
        ext->src      = NULL;
 8017ed4:	2300      	movs	r3, #0
 8017ed6:	6023      	str	r3, [r4, #0]
        ext->src_type = LV_IMG_SRC_UNKNOWN;
 8017ed8:	7b23      	ldrb	r3, [r4, #12]
 8017eda:	f043 0303 	orr.w	r3, r3, #3
 8017ede:	7323      	strb	r3, [r4, #12]
}
 8017ee0:	b006      	add	sp, #24
 8017ee2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    lv_img_decoder_get_info(src_img, &header);
 8017ee6:	a904      	add	r1, sp, #16
 8017ee8:	4628      	mov	r0, r5
 8017eea:	f7fc fdbd 	bl	8014a68 <lv_img_decoder_get_info>
    if(src_type == LV_IMG_SRC_VARIABLE) {
 8017eee:	bb4f      	cbnz	r7, 8017f44 <lv_img_set_src+0xa0>
        if(ext->src_type == LV_IMG_SRC_FILE || ext->src_type == LV_IMG_SRC_SYMBOL) {
 8017ef0:	7b23      	ldrb	r3, [r4, #12]
 8017ef2:	f003 0303 	and.w	r3, r3, #3
 8017ef6:	3b01      	subs	r3, #1
 8017ef8:	2b01      	cmp	r3, #1
 8017efa:	d802      	bhi.n	8017f02 <lv_img_set_src+0x5e>
            lv_mem_free(ext->src);
 8017efc:	6820      	ldr	r0, [r4, #0]
 8017efe:	f7fd fc77 	bl	80157f0 <lv_mem_free>
        ext->src = src_img;
 8017f02:	6025      	str	r5, [r4, #0]
    ext->w        = header.w;
 8017f04:	9a04      	ldr	r2, [sp, #16]
    ext->src_type = src_type;
 8017f06:	7b23      	ldrb	r3, [r4, #12]
    ext->w        = header.w;
 8017f08:	f3c2 228a 	ubfx	r2, r2, #10, #11
 8017f0c:	8122      	strh	r2, [r4, #8]
    ext->h        = header.h;
 8017f0e:	f8bd 2012 	ldrh.w	r2, [sp, #18]
 8017f12:	f3c2 124a 	ubfx	r2, r2, #5, #11
 8017f16:	8162      	strh	r2, [r4, #10]
    ext->cf       = header.cf;
 8017f18:	f89d 2010 	ldrb.w	r2, [sp, #16]
    ext->src_type = src_type;
 8017f1c:	f367 0301 	bfi	r3, r7, #0, #2
    ext->cf       = header.cf;
 8017f20:	f362 03c7 	bfi	r3, r2, #3, #5
 8017f24:	7323      	strb	r3, [r4, #12]
    if(lv_img_get_auto_size(img) != false) {
 8017f26:	4630      	mov	r0, r6
 8017f28:	f7ff ffb5 	bl	8017e96 <lv_img_get_auto_size>
 8017f2c:	b130      	cbz	r0, 8017f3c <lv_img_set_src+0x98>
        lv_obj_set_size(img, ext->w, ext->h);
 8017f2e:	f9b4 200a 	ldrsh.w	r2, [r4, #10]
 8017f32:	f9b4 1008 	ldrsh.w	r1, [r4, #8]
 8017f36:	4630      	mov	r0, r6
 8017f38:	f7f8 f8ca 	bl	80100d0 <lv_obj_set_size>
    lv_obj_invalidate(img);
 8017f3c:	4630      	mov	r0, r6
 8017f3e:	f7f7 fc65 	bl	800f80c <lv_obj_invalidate>
 8017f42:	e7cd      	b.n	8017ee0 <lv_img_set_src+0x3c>
    } else if(src_type == LV_IMG_SRC_FILE || src_type == LV_IMG_SRC_SYMBOL) {
 8017f44:	1e7b      	subs	r3, r7, #1
 8017f46:	b2db      	uxtb	r3, r3
 8017f48:	2b01      	cmp	r3, #1
 8017f4a:	d8db      	bhi.n	8017f04 <lv_img_set_src+0x60>
        if(ext->src != src_img) {
 8017f4c:	6820      	ldr	r0, [r4, #0]
 8017f4e:	4285      	cmp	r5, r0
 8017f50:	d015      	beq.n	8017f7e <lv_img_set_src+0xda>
            if(ext->src_type == LV_IMG_SRC_FILE || ext->src_type == LV_IMG_SRC_SYMBOL) {
 8017f52:	7b23      	ldrb	r3, [r4, #12]
 8017f54:	f003 0303 	and.w	r3, r3, #3
 8017f58:	3b01      	subs	r3, #1
 8017f5a:	2b01      	cmp	r3, #1
 8017f5c:	d801      	bhi.n	8017f62 <lv_img_set_src+0xbe>
                lv_mem_free(ext->src);
 8017f5e:	f7fd fc47 	bl	80157f0 <lv_mem_free>
            char * new_str = lv_mem_alloc(strlen(src_img) + 1);
 8017f62:	4628      	mov	r0, r5
 8017f64:	f7e8 f934 	bl	80001d0 <strlen>
 8017f68:	3001      	adds	r0, #1
 8017f6a:	f7fd fc0b 	bl	8015784 <lv_mem_alloc>
            lv_mem_assert(new_str);
 8017f6e:	4680      	mov	r8, r0
 8017f70:	b900      	cbnz	r0, 8017f74 <lv_img_set_src+0xd0>
 8017f72:	e7fe      	b.n	8017f72 <lv_img_set_src+0xce>
            strcpy(new_str, src_img);
 8017f74:	4629      	mov	r1, r5
 8017f76:	f002 ff73 	bl	801ae60 <strcpy>
            ext->src = new_str;
 8017f7a:	f8c4 8000 	str.w	r8, [r4]
    if(src_type == LV_IMG_SRC_SYMBOL) {
 8017f7e:	2f02      	cmp	r7, #2
 8017f80:	d1c0      	bne.n	8017f04 <lv_img_set_src+0x60>
 * @return pointer to the image's style
 */
static inline const lv_style_t * lv_img_get_style(const lv_obj_t * img, lv_img_style_t type)
{
    (void)type; /*Unused*/
    return lv_obj_get_style(img);
 8017f82:	4630      	mov	r0, r6
 8017f84:	f7f8 fa10 	bl	80103a8 <lv_obj_get_style>
        lv_txt_get_size(&size, src_img, style->text.font, style->text.letter_space, style->text.line_space,
 8017f88:	2200      	movs	r2, #0
 8017f8a:	f9b0 3028 	ldrsh.w	r3, [r0, #40]	; 0x28
 8017f8e:	9202      	str	r2, [sp, #8]
 8017f90:	f647 4218 	movw	r2, #31768	; 0x7c18
 8017f94:	9201      	str	r2, [sp, #4]
 8017f96:	f9b0 202a 	ldrsh.w	r2, [r0, #42]	; 0x2a
 8017f9a:	9200      	str	r2, [sp, #0]
 8017f9c:	6a42      	ldr	r2, [r0, #36]	; 0x24
 8017f9e:	4629      	mov	r1, r5
 8017fa0:	a805      	add	r0, sp, #20
 8017fa2:	f7fd ffad 	bl	8015f00 <lv_txt_get_size>
        header.w = size.x;
 8017fa6:	9b04      	ldr	r3, [sp, #16]
 8017fa8:	f8bd 2014 	ldrh.w	r2, [sp, #20]
 8017fac:	f362 2394 	bfi	r3, r2, #10, #11
        header.h = size.y;
 8017fb0:	f8bd 2016 	ldrh.w	r2, [sp, #22]
        header.w = size.x;
 8017fb4:	9304      	str	r3, [sp, #16]
        header.h = size.y;
 8017fb6:	0c1b      	lsrs	r3, r3, #16
 8017fb8:	f362 134f 	bfi	r3, r2, #5, #11
 8017fbc:	f8ad 3012 	strh.w	r3, [sp, #18]
 8017fc0:	e7a0      	b.n	8017f04 <lv_img_set_src+0x60>
	...

08017fc4 <lv_img_create>:
{
 8017fc4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017fc8:	4680      	mov	r8, r0
 8017fca:	460e      	mov	r6, r1
    new_img = lv_obj_create(par, copy);
 8017fcc:	f7f7 ff02 	bl	800fdd4 <lv_obj_create>
    lv_mem_assert(new_img);
 8017fd0:	4605      	mov	r5, r0
 8017fd2:	b900      	cbnz	r0, 8017fd6 <lv_img_create+0x12>
 8017fd4:	e7fe      	b.n	8017fd4 <lv_img_create+0x10>
    if(ancestor_signal == NULL) ancestor_signal = lv_obj_get_signal_cb(new_img);
 8017fd6:	4c2a      	ldr	r4, [pc, #168]	; (8018080 <lv_img_create+0xbc>)
 8017fd8:	6823      	ldr	r3, [r4, #0]
 8017fda:	b913      	cbnz	r3, 8017fe2 <lv_img_create+0x1e>
 8017fdc:	f7f8 facb 	bl	8010576 <lv_obj_get_signal_cb>
 8017fe0:	6020      	str	r0, [r4, #0]
    lv_img_ext_t * ext = lv_obj_allocate_ext_attr(new_img, sizeof(lv_img_ext_t));
 8017fe2:	2110      	movs	r1, #16
 8017fe4:	4628      	mov	r0, r5
 8017fe6:	f7f7 fbe3 	bl	800f7b0 <lv_obj_allocate_ext_attr>
    lv_mem_assert(ext);
 8017fea:	4604      	mov	r4, r0
 8017fec:	b900      	cbnz	r0, 8017ff0 <lv_img_create+0x2c>
 8017fee:	e7fe      	b.n	8017fee <lv_img_create+0x2a>
    ext->src_type  = LV_IMG_SRC_UNKNOWN;
 8017ff0:	7b03      	ldrb	r3, [r0, #12]
    ext->src       = NULL;
 8017ff2:	2700      	movs	r7, #0
    ext->cf        = LV_IMG_CF_UNKNOWN;
 8017ff4:	f043 0303 	orr.w	r3, r3, #3
 8017ff8:	f367 03c7 	bfi	r3, r7, #3, #5
 8017ffc:	7303      	strb	r3, [r0, #12]
    ext->src       = NULL;
 8017ffe:	6007      	str	r7, [r0, #0]
    ext->w         = lv_obj_get_width(new_img);
 8018000:	4628      	mov	r0, r5
 8018002:	f7f8 f9c0 	bl	8010386 <lv_obj_get_width>
 8018006:	8120      	strh	r0, [r4, #8]
    ext->h         = lv_obj_get_height(new_img);
 8018008:	4628      	mov	r0, r5
 801800a:	f7f8 f9c2 	bl	8010392 <lv_obj_get_height>
    ext->auto_size = 1;
 801800e:	7b23      	ldrb	r3, [r4, #12]
    ext->h         = lv_obj_get_height(new_img);
 8018010:	8160      	strh	r0, [r4, #10]
    ext->auto_size = 1;
 8018012:	f043 0304 	orr.w	r3, r3, #4
    lv_obj_set_signal_cb(new_img, lv_img_signal);
 8018016:	491b      	ldr	r1, [pc, #108]	; (8018084 <lv_img_create+0xc0>)
    ext->auto_size = 1;
 8018018:	7323      	strb	r3, [r4, #12]
    lv_obj_set_signal_cb(new_img, lv_img_signal);
 801801a:	4628      	mov	r0, r5
    ext->offset.x  = 0;
 801801c:	80a7      	strh	r7, [r4, #4]
    ext->offset.y  = 0;
 801801e:	80e7      	strh	r7, [r4, #6]
    lv_obj_set_signal_cb(new_img, lv_img_signal);
 8018020:	f7f7 fbc2 	bl	800f7a8 <lv_obj_set_signal_cb>
    lv_obj_set_design_cb(new_img, lv_img_design);
 8018024:	4918      	ldr	r1, [pc, #96]	; (8018088 <lv_img_create+0xc4>)
 8018026:	4628      	mov	r0, r5
 8018028:	f7f7 fbc0 	bl	800f7ac <lv_obj_set_design_cb>
    if(copy == NULL) {
 801802c:	b9b6      	cbnz	r6, 801805c <lv_img_create+0x98>
        lv_obj_set_click(new_img, false);
 801802e:	4631      	mov	r1, r6
 8018030:	4628      	mov	r0, r5
 8018032:	f7f7 fae5 	bl	800f600 <lv_obj_set_click>
 8018036:	7b23      	ldrb	r3, [r4, #12]
        if(par != NULL) {
 8018038:	f1b8 0f00 	cmp.w	r8, #0
 801803c:	d009      	beq.n	8018052 <lv_img_create+0x8e>
            ext->auto_size = 1;
 801803e:	f043 0304 	orr.w	r3, r3, #4
 8018042:	7323      	strb	r3, [r4, #12]
            lv_obj_set_style(new_img, NULL); /*Inherit the style  by default*/
 8018044:	4631      	mov	r1, r6
            lv_obj_set_style(new_img, &lv_style_plain); /*Set a style for screens*/
 8018046:	4628      	mov	r0, r5
 8018048:	f7f8 f944 	bl	80102d4 <lv_obj_set_style>
}
 801804c:	4628      	mov	r0, r5
 801804e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
            ext->auto_size = 0;
 8018052:	f368 0382 	bfi	r3, r8, #2, #1
 8018056:	7323      	strb	r3, [r4, #12]
            lv_obj_set_style(new_img, &lv_style_plain); /*Set a style for screens*/
 8018058:	490c      	ldr	r1, [pc, #48]	; (801808c <lv_img_create+0xc8>)
 801805a:	e7f4      	b.n	8018046 <lv_img_create+0x82>
        lv_img_ext_t * copy_ext = lv_obj_get_ext_attr(copy);
 801805c:	4630      	mov	r0, r6
 801805e:	f7f8 fa8e 	bl	801057e <lv_obj_get_ext_attr>
        ext->auto_size          = copy_ext->auto_size;
 8018062:	7b03      	ldrb	r3, [r0, #12]
 8018064:	7b22      	ldrb	r2, [r4, #12]
 8018066:	f3c3 0380 	ubfx	r3, r3, #2, #1
 801806a:	f363 0282 	bfi	r2, r3, #2, #1
 801806e:	7322      	strb	r2, [r4, #12]
        lv_img_set_src(new_img, copy_ext->src);
 8018070:	6801      	ldr	r1, [r0, #0]
 8018072:	4628      	mov	r0, r5
 8018074:	f7ff ff16 	bl	8017ea4 <lv_img_set_src>
        lv_obj_refresh_style(new_img);
 8018078:	4628      	mov	r0, r5
 801807a:	f7f8 f882 	bl	8010182 <lv_obj_refresh_style>
 801807e:	e7e5      	b.n	801804c <lv_img_create+0x88>
 8018080:	2000b244 	.word	0x2000b244
 8018084:	08018091 	.word	0x08018091
 8018088:	08017d47 	.word	0x08017d47
 801808c:	2000c6a8 	.word	0x2000c6a8

08018090 <lv_img_signal>:
static lv_res_t lv_img_signal(lv_obj_t * img, lv_signal_t sign, void * param)
{
    lv_res_t res;

    /* Include the ancient signal function */
    res = ancestor_signal(img, sign, param);
 8018090:	4b1d      	ldr	r3, [pc, #116]	; (8018108 <lv_img_signal+0x78>)
{
 8018092:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    res = ancestor_signal(img, sign, param);
 8018096:	681b      	ldr	r3, [r3, #0]
{
 8018098:	4680      	mov	r8, r0
 801809a:	460d      	mov	r5, r1
 801809c:	4617      	mov	r7, r2
    res = ancestor_signal(img, sign, param);
 801809e:	4798      	blx	r3
    if(res != LV_RES_OK) return res;
 80180a0:	2801      	cmp	r0, #1
    res = ancestor_signal(img, sign, param);
 80180a2:	4606      	mov	r6, r0
    if(res != LV_RES_OK) return res;
 80180a4:	d112      	bne.n	80180cc <lv_img_signal+0x3c>

    lv_img_ext_t * ext = lv_obj_get_ext_attr(img);
 80180a6:	4640      	mov	r0, r8
 80180a8:	f7f8 fa69 	bl	801057e <lv_obj_get_ext_attr>
 80180ac:	4604      	mov	r4, r0
    if(sign == LV_SIGNAL_CLEANUP) {
 80180ae:	b985      	cbnz	r5, 80180d2 <lv_img_signal+0x42>
        if(ext->src_type == LV_IMG_SRC_FILE || ext->src_type == LV_IMG_SRC_SYMBOL) {
 80180b0:	7b03      	ldrb	r3, [r0, #12]
 80180b2:	f003 0303 	and.w	r3, r3, #3
 80180b6:	3b01      	subs	r3, #1
 80180b8:	2b01      	cmp	r3, #1
 80180ba:	d807      	bhi.n	80180cc <lv_img_signal+0x3c>
            lv_mem_free(ext->src);
 80180bc:	6800      	ldr	r0, [r0, #0]
 80180be:	f7fd fb97 	bl	80157f0 <lv_mem_free>
            ext->src      = NULL;
            ext->src_type = LV_IMG_SRC_UNKNOWN;
 80180c2:	7b23      	ldrb	r3, [r4, #12]
            ext->src      = NULL;
 80180c4:	6025      	str	r5, [r4, #0]
            ext->src_type = LV_IMG_SRC_UNKNOWN;
 80180c6:	f043 0303 	orr.w	r3, r3, #3
 80180ca:	7323      	strb	r3, [r4, #12]
        }
        buf->type[i] = "lv_img";
    }

    return res;
}
 80180cc:	4630      	mov	r0, r6
 80180ce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    } else if(sign == LV_SIGNAL_STYLE_CHG) {
 80180d2:	2d04      	cmp	r5, #4
 80180d4:	d109      	bne.n	80180ea <lv_img_signal+0x5a>
        if(ext->src_type == LV_IMG_SRC_SYMBOL) {
 80180d6:	7b03      	ldrb	r3, [r0, #12]
 80180d8:	f003 0303 	and.w	r3, r3, #3
 80180dc:	2b02      	cmp	r3, #2
 80180de:	d1f5      	bne.n	80180cc <lv_img_signal+0x3c>
            lv_img_set_src(img, ext->src);
 80180e0:	6801      	ldr	r1, [r0, #0]
 80180e2:	4640      	mov	r0, r8
 80180e4:	f7ff fede 	bl	8017ea4 <lv_img_set_src>
 80180e8:	e7f0      	b.n	80180cc <lv_img_signal+0x3c>
    } else if(sign == LV_SIGNAL_GET_TYPE) {
 80180ea:	2d06      	cmp	r5, #6
 80180ec:	d1ee      	bne.n	80180cc <lv_img_signal+0x3c>
 80180ee:	2300      	movs	r3, #0
            if(buf->type[i] == NULL) break;
 80180f0:	f857 1023 	ldr.w	r1, [r7, r3, lsl #2]
 80180f4:	b2da      	uxtb	r2, r3
 80180f6:	b119      	cbz	r1, 8018100 <lv_img_signal+0x70>
 80180f8:	3301      	adds	r3, #1
        for(i = 0; i < LV_MAX_ANCESTOR_NUM - 1; i++) { /*Find the last set data*/
 80180fa:	2b07      	cmp	r3, #7
 80180fc:	d1f8      	bne.n	80180f0 <lv_img_signal+0x60>
 80180fe:	461a      	mov	r2, r3
        buf->type[i] = "lv_img";
 8018100:	4b02      	ldr	r3, [pc, #8]	; (801810c <lv_img_signal+0x7c>)
 8018102:	f847 3022 	str.w	r3, [r7, r2, lsl #2]
 8018106:	e7e1      	b.n	80180cc <lv_img_signal+0x3c>
 8018108:	2000b244 	.word	0x2000b244
 801810c:	080f4fa1 	.word	0x080f4fa1

08018110 <refr_img>:

    return res;
}

static void refr_img(lv_obj_t * imgbtn)
{
 8018110:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8018112:	4604      	mov	r4, r0
    lv_imgbtn_ext_t * ext = lv_obj_get_ext_attr(imgbtn);
 8018114:	f7f8 fa33 	bl	801057e <lv_obj_get_ext_attr>
 8018118:	4605      	mov	r5, r0
 * @param imgbtn pointer to a image button object
 * @return the state of the button (from lv_btn_state_t enum)
 */
static inline lv_btn_state_t lv_imgbtn_get_state(const lv_obj_t * imgbtn)
{
    return lv_btn_get_state(imgbtn);
 801811a:	4620      	mov	r0, r4
 801811c:	f7fe fab8 	bl	8016690 <lv_btn_get_state>
    lv_btn_state_t state  = lv_imgbtn_get_state(imgbtn);
    lv_img_header_t header;

#if LV_IMGBTN_TILED == 0
    const void * src = ext->img_src[state];
 8018120:	eb05 0080 	add.w	r0, r5, r0, lsl #2
#else
    const void * src = ext->img_src_mid[state];
#endif

    lv_res_t info_res;
    info_res = lv_img_decoder_get_info(src, &header);
 8018124:	a901      	add	r1, sp, #4
 8018126:	69c0      	ldr	r0, [r0, #28]
 8018128:	f7fc fc9e 	bl	8014a68 <lv_img_decoder_get_info>
    if(info_res == LV_RES_OK) {
 801812c:	2801      	cmp	r0, #1
 801812e:	d114      	bne.n	801815a <refr_img+0x4a>
        ext->act_cf = header.cf;
 8018130:	f89d 3004 	ldrb.w	r3, [sp, #4]
#if LV_IMGBTN_TILED == 0
        lv_obj_set_size(imgbtn, header.w, header.h);
 8018134:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 8018138:	9901      	ldr	r1, [sp, #4]
        ext->act_cf = header.cf;
 801813a:	f3c3 0304 	ubfx	r3, r3, #0, #5
 801813e:	f885 3030 	strb.w	r3, [r5, #48]	; 0x30
        lv_obj_set_size(imgbtn, header.w, header.h);
 8018142:	f3c2 124a 	ubfx	r2, r2, #5, #11
 8018146:	f3c1 218a 	ubfx	r1, r1, #10, #11
 801814a:	4620      	mov	r0, r4
 801814c:	f7f7 ffc0 	bl	80100d0 <lv_obj_set_size>
#endif
    } else {
        ext->act_cf = LV_IMG_CF_UNKNOWN;
    }

    lv_obj_invalidate(imgbtn);
 8018150:	4620      	mov	r0, r4
 8018152:	f7f7 fb5b 	bl	800f80c <lv_obj_invalidate>
}
 8018156:	b003      	add	sp, #12
 8018158:	bd30      	pop	{r4, r5, pc}
        ext->act_cf = LV_IMG_CF_UNKNOWN;
 801815a:	2300      	movs	r3, #0
 801815c:	f885 3030 	strb.w	r3, [r5, #48]	; 0x30
 8018160:	e7f6      	b.n	8018150 <refr_img+0x40>
	...

08018164 <lv_imgbtn_signal>:
{
 8018164:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    res = ancestor_signal(imgbtn, sign, param);
 8018166:	4b0f      	ldr	r3, [pc, #60]	; (80181a4 <lv_imgbtn_signal+0x40>)
 8018168:	681b      	ldr	r3, [r3, #0]
{
 801816a:	4607      	mov	r7, r0
 801816c:	460e      	mov	r6, r1
 801816e:	4615      	mov	r5, r2
    res = ancestor_signal(imgbtn, sign, param);
 8018170:	4798      	blx	r3
    if(res != LV_RES_OK) return res;
 8018172:	2801      	cmp	r0, #1
    res = ancestor_signal(imgbtn, sign, param);
 8018174:	4604      	mov	r4, r0
    if(res != LV_RES_OK) return res;
 8018176:	d104      	bne.n	8018182 <lv_imgbtn_signal+0x1e>
    if(sign == LV_SIGNAL_STYLE_CHG) {
 8018178:	2e04      	cmp	r6, #4
 801817a:	d104      	bne.n	8018186 <lv_imgbtn_signal+0x22>
        refr_img(imgbtn);
 801817c:	4638      	mov	r0, r7
 801817e:	f7ff ffc7 	bl	8018110 <refr_img>
}
 8018182:	4620      	mov	r0, r4
 8018184:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    } else if(sign == LV_SIGNAL_GET_TYPE) {
 8018186:	2e06      	cmp	r6, #6
 8018188:	d1fb      	bne.n	8018182 <lv_imgbtn_signal+0x1e>
 801818a:	2300      	movs	r3, #0
            if(buf->type[i] == NULL) break;
 801818c:	f855 1023 	ldr.w	r1, [r5, r3, lsl #2]
 8018190:	b2da      	uxtb	r2, r3
 8018192:	b119      	cbz	r1, 801819c <lv_imgbtn_signal+0x38>
 8018194:	3301      	adds	r3, #1
        for(i = 0; i < LV_MAX_ANCESTOR_NUM - 1; i++) { /*Find the last set data*/
 8018196:	2b07      	cmp	r3, #7
 8018198:	d1f8      	bne.n	801818c <lv_imgbtn_signal+0x28>
 801819a:	461a      	mov	r2, r3
        buf->type[i] = "lv_imgbtn";
 801819c:	4b02      	ldr	r3, [pc, #8]	; (80181a8 <lv_imgbtn_signal+0x44>)
 801819e:	f845 3022 	str.w	r3, [r5, r2, lsl #2]
 80181a2:	e7ee      	b.n	8018182 <lv_imgbtn_signal+0x1e>
 80181a4:	2000b24c 	.word	0x2000b24c
 80181a8:	080f4fa8 	.word	0x080f4fa8

080181ac <lv_imgbtn_design>:
    if(mode == LV_DESIGN_COVER_CHK) {
 80181ac:	2a02      	cmp	r2, #2
{
 80181ae:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 80181b2:	4604      	mov	r4, r0
 80181b4:	460e      	mov	r6, r1
    if(mode == LV_DESIGN_COVER_CHK) {
 80181b6:	d10f      	bne.n	80181d8 <lv_imgbtn_design+0x2c>
        lv_imgbtn_ext_t * ext = lv_obj_get_ext_attr(imgbtn);
 80181b8:	f7f8 f9e1 	bl	801057e <lv_obj_get_ext_attr>
        if(ext->act_cf == LV_IMG_CF_TRUE_COLOR || ext->act_cf == LV_IMG_CF_RAW) {
 80181bc:	f890 3030 	ldrb.w	r3, [r0, #48]	; 0x30
 80181c0:	2b04      	cmp	r3, #4
 80181c2:	d001      	beq.n	80181c8 <lv_imgbtn_design+0x1c>
 80181c4:	2b01      	cmp	r3, #1
 80181c6:	d123      	bne.n	8018210 <lv_imgbtn_design+0x64>
            cover = lv_area_is_in(mask, &imgbtn->coords);
 80181c8:	f104 0110 	add.w	r1, r4, #16
 80181cc:	4630      	mov	r0, r6
}
 80181ce:	b002      	add	sp, #8
 80181d0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
            cover = lv_area_is_in(mask, &imgbtn->coords);
 80181d4:	f7fd b8f2 	b.w	80153bc <lv_area_is_in>
    else if(mode == LV_DESIGN_DRAW_MAIN) {
 80181d8:	b9c2      	cbnz	r2, 801820c <lv_imgbtn_design+0x60>
        lv_imgbtn_ext_t * ext    = lv_obj_get_ext_attr(imgbtn);
 80181da:	f7f8 f9d0 	bl	801057e <lv_obj_get_ext_attr>
 80181de:	4605      	mov	r5, r0
 80181e0:	4620      	mov	r0, r4
 80181e2:	f7fe fa55 	bl	8016690 <lv_btn_get_state>
    return lv_btn_get_style(imgbtn, type);
 80181e6:	4601      	mov	r1, r0
 80181e8:	4607      	mov	r7, r0
 80181ea:	4620      	mov	r0, r4
 80181ec:	f7fe fb08 	bl	8016800 <lv_btn_get_style>
 80181f0:	4680      	mov	r8, r0
        lv_opa_t opa_scale       = lv_obj_get_opa_scale(imgbtn);
 80181f2:	4620      	mov	r0, r4
 80181f4:	f7f8 f95b 	bl	80104ae <lv_obj_get_opa_scale>
        const void * src = ext->img_src[state];
 80181f8:	eb05 0587 	add.w	r5, r5, r7, lsl #2
        lv_draw_img(&imgbtn->coords, mask, src, style, opa_scale);
 80181fc:	9000      	str	r0, [sp, #0]
 80181fe:	4643      	mov	r3, r8
 8018200:	69ea      	ldr	r2, [r5, #28]
 8018202:	4631      	mov	r1, r6
 8018204:	f104 0010 	add.w	r0, r4, #16
 8018208:	f7f9 fee8 	bl	8011fdc <lv_draw_img>
    return true;
 801820c:	2001      	movs	r0, #1
 801820e:	e000      	b.n	8018212 <lv_imgbtn_design+0x66>
        bool cover            = false;
 8018210:	2000      	movs	r0, #0
}
 8018212:	b002      	add	sp, #8
 8018214:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08018218 <lv_imgbtn_create>:
{
 8018218:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801821a:	460f      	mov	r7, r1
    lv_obj_t * new_imgbtn = lv_btn_create(par, copy);
 801821c:	f7fe f9a8 	bl	8016570 <lv_btn_create>
    lv_mem_assert(new_imgbtn);
 8018220:	4604      	mov	r4, r0
 8018222:	b900      	cbnz	r0, 8018226 <lv_imgbtn_create+0xe>
 8018224:	e7fe      	b.n	8018224 <lv_imgbtn_create+0xc>
    lv_imgbtn_ext_t * ext = lv_obj_allocate_ext_attr(new_imgbtn, sizeof(lv_imgbtn_ext_t));
 8018226:	2134      	movs	r1, #52	; 0x34
 8018228:	f7f7 fac2 	bl	800f7b0 <lv_obj_allocate_ext_attr>
    lv_mem_assert(ext);
 801822c:	4606      	mov	r6, r0
 801822e:	b900      	cbnz	r0, 8018232 <lv_imgbtn_create+0x1a>
 8018230:	e7fe      	b.n	8018230 <lv_imgbtn_create+0x18>
    if(ancestor_signal == NULL) ancestor_signal = lv_obj_get_signal_cb(new_imgbtn);
 8018232:	4d19      	ldr	r5, [pc, #100]	; (8018298 <lv_imgbtn_create+0x80>)
 8018234:	682b      	ldr	r3, [r5, #0]
 8018236:	b91b      	cbnz	r3, 8018240 <lv_imgbtn_create+0x28>
 8018238:	4620      	mov	r0, r4
 801823a:	f7f8 f99c 	bl	8010576 <lv_obj_get_signal_cb>
 801823e:	6028      	str	r0, [r5, #0]
    if(ancestor_design == NULL) ancestor_design = lv_obj_get_design_cb(new_imgbtn);
 8018240:	4d16      	ldr	r5, [pc, #88]	; (801829c <lv_imgbtn_create+0x84>)
 8018242:	682b      	ldr	r3, [r5, #0]
 8018244:	b91b      	cbnz	r3, 801824e <lv_imgbtn_create+0x36>
 8018246:	4620      	mov	r0, r4
 8018248:	f7f8 f997 	bl	801057a <lv_obj_get_design_cb>
 801824c:	6028      	str	r0, [r5, #0]
    memset(ext->img_src, 0, sizeof(ext->img_src));
 801824e:	f106 051c 	add.w	r5, r6, #28
 8018252:	2214      	movs	r2, #20
 8018254:	2100      	movs	r1, #0
 8018256:	4628      	mov	r0, r5
 8018258:	f002 fdb9 	bl	801adce <memset>
    ext->act_cf = LV_IMG_CF_UNKNOWN;
 801825c:	2300      	movs	r3, #0
    lv_obj_set_signal_cb(new_imgbtn, lv_imgbtn_signal);
 801825e:	4910      	ldr	r1, [pc, #64]	; (80182a0 <lv_imgbtn_create+0x88>)
    ext->act_cf = LV_IMG_CF_UNKNOWN;
 8018260:	f886 3030 	strb.w	r3, [r6, #48]	; 0x30
    lv_obj_set_signal_cb(new_imgbtn, lv_imgbtn_signal);
 8018264:	4620      	mov	r0, r4
 8018266:	f7f7 fa9f 	bl	800f7a8 <lv_obj_set_signal_cb>
    lv_obj_set_design_cb(new_imgbtn, lv_imgbtn_design);
 801826a:	490e      	ldr	r1, [pc, #56]	; (80182a4 <lv_imgbtn_create+0x8c>)
 801826c:	4620      	mov	r0, r4
 801826e:	f7f7 fa9d 	bl	800f7ac <lv_obj_set_design_cb>
    if(copy == NULL) {
 8018272:	b177      	cbz	r7, 8018292 <lv_imgbtn_create+0x7a>
        lv_imgbtn_ext_t * copy_ext = lv_obj_get_ext_attr(copy);
 8018274:	4638      	mov	r0, r7
 8018276:	f7f8 f982 	bl	801057e <lv_obj_get_ext_attr>
        memcpy(ext->img_src, copy_ext->img_src, sizeof(ext->img_src));
 801827a:	f100 031c 	add.w	r3, r0, #28
 801827e:	3030      	adds	r0, #48	; 0x30
 8018280:	f853 2b04 	ldr.w	r2, [r3], #4
 8018284:	f845 2b04 	str.w	r2, [r5], #4
 8018288:	4283      	cmp	r3, r0
 801828a:	d1f9      	bne.n	8018280 <lv_imgbtn_create+0x68>
        lv_obj_refresh_style(new_imgbtn);
 801828c:	4620      	mov	r0, r4
 801828e:	f7f7 ff78 	bl	8010182 <lv_obj_refresh_style>
}
 8018292:	4620      	mov	r0, r4
 8018294:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8018296:	bf00      	nop
 8018298:	2000b24c 	.word	0x2000b24c
 801829c:	2000b248 	.word	0x2000b248
 80182a0:	08018165 	.word	0x08018165
 80182a4:	080181ad 	.word	0x080181ad

080182a8 <lv_imgbtn_set_src>:
{
 80182a8:	b570      	push	{r4, r5, r6, lr}
 80182aa:	4605      	mov	r5, r0
 80182ac:	460c      	mov	r4, r1
 80182ae:	4616      	mov	r6, r2
    lv_imgbtn_ext_t * ext = lv_obj_get_ext_attr(imgbtn);
 80182b0:	f7f8 f965 	bl	801057e <lv_obj_get_ext_attr>
    ext->img_src[state] = src;
 80182b4:	eb00 0084 	add.w	r0, r0, r4, lsl #2
 80182b8:	61c6      	str	r6, [r0, #28]
    refr_img(imgbtn);
 80182ba:	4628      	mov	r0, r5
}
 80182bc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    refr_img(imgbtn);
 80182c0:	f7ff bf26 	b.w	8018110 <refr_img>

080182c4 <lv_label_dot_tmp_free>:
 * Free the dot_tmp_ptr field if it was previously allocated.
 * Always clears the field
 * @param label pointer to label object.
 */
static void lv_label_dot_tmp_free(lv_obj_t * label)
{
 80182c4:	b510      	push	{r4, lr}
    lv_label_ext_t * ext = lv_obj_get_ext_attr(label);
 80182c6:	f7f8 f95a 	bl	801057e <lv_obj_get_ext_attr>
    if(ext->dot_tmp_alloc && ext->dot.tmp_ptr) {
 80182ca:	7fc3      	ldrb	r3, [r0, #31]
 80182cc:	079b      	lsls	r3, r3, #30
    lv_label_ext_t * ext = lv_obj_get_ext_attr(label);
 80182ce:	4604      	mov	r4, r0
    if(ext->dot_tmp_alloc && ext->dot.tmp_ptr) {
 80182d0:	d503      	bpl.n	80182da <lv_label_dot_tmp_free+0x16>
 80182d2:	6840      	ldr	r0, [r0, #4]
 80182d4:	b108      	cbz	r0, 80182da <lv_label_dot_tmp_free+0x16>
        lv_mem_free(ext->dot.tmp_ptr);
 80182d6:	f7fd fa8b 	bl	80157f0 <lv_mem_free>
    }
    ext->dot_tmp_alloc = false;
 80182da:	7fe3      	ldrb	r3, [r4, #31]
 80182dc:	f36f 0341 	bfc	r3, #1, #1
 80182e0:	77e3      	strb	r3, [r4, #31]
    ext->dot.tmp_ptr   = NULL;
 80182e2:	2300      	movs	r3, #0
 80182e4:	6063      	str	r3, [r4, #4]
 80182e6:	bd10      	pop	{r4, pc}

080182e8 <lv_label_revert_dots>:
{
 80182e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80182ec:	4606      	mov	r6, r0
    lv_label_ext_t * ext = lv_obj_get_ext_attr(label);
 80182ee:	f7f8 f946 	bl	801057e <lv_obj_get_ext_attr>
    if(ext->long_mode != LV_LABEL_LONG_DOT) return;
 80182f2:	7f83      	ldrb	r3, [r0, #30]
 80182f4:	f003 0307 	and.w	r3, r3, #7
 80182f8:	2b02      	cmp	r3, #2
    lv_label_ext_t * ext = lv_obj_get_ext_attr(label);
 80182fa:	4604      	mov	r4, r0
    if(ext->long_mode != LV_LABEL_LONG_DOT) return;
 80182fc:	d126      	bne.n	801834c <lv_label_revert_dots+0x64>
    if(ext->dot_end == LV_LABEL_DOT_END_INV) return;
 80182fe:	8901      	ldrh	r1, [r0, #8]
 8018300:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8018304:	4299      	cmp	r1, r3
 8018306:	d021      	beq.n	801834c <lv_label_revert_dots+0x64>
    uint32_t byte_i   = lv_txt_encoded_get_byte_id(ext->text, letter_i);
 8018308:	4b12      	ldr	r3, [pc, #72]	; (8018354 <lv_label_revert_dots+0x6c>)
 801830a:	6800      	ldr	r0, [r0, #0]
 801830c:	681b      	ldr	r3, [r3, #0]
 801830e:	3903      	subs	r1, #3
 8018310:	4798      	blx	r3
 8018312:	4680      	mov	r8, r0
    lv_label_ext_t * ext = lv_obj_get_ext_attr(label);
 8018314:	4630      	mov	r0, r6
 8018316:	f7f8 f932 	bl	801057e <lv_obj_get_ext_attr>
    if(ext->dot_tmp_alloc) {
 801831a:	7fc3      	ldrb	r3, [r0, #31]
 801831c:	079b      	lsls	r3, r3, #30
        return ext->dot.tmp_ptr;
 801831e:	bf4c      	ite	mi
 8018320:	6840      	ldrmi	r0, [r0, #4]
        return ext->dot.tmp;
 8018322:	3004      	addpl	r0, #4
    while(ext->text[byte_i + i] != '\0') {
 8018324:	2500      	movs	r5, #0
 8018326:	b2eb      	uxtb	r3, r5
 8018328:	eb08 0203 	add.w	r2, r8, r3
 801832c:	6821      	ldr	r1, [r4, #0]
        ext->text[byte_i + i] = dot_tmp[i];
 801832e:	5cc3      	ldrb	r3, [r0, r3]
    while(ext->text[byte_i + i] != '\0') {
 8018330:	f811 e002 	ldrb.w	lr, [r1, r2]
 8018334:	188f      	adds	r7, r1, r2
 8018336:	3501      	adds	r5, #1
 8018338:	f1be 0f00 	cmp.w	lr, #0
 801833c:	d108      	bne.n	8018350 <lv_label_revert_dots+0x68>
    ext->text[byte_i + i] = dot_tmp[i];
 801833e:	703b      	strb	r3, [r7, #0]
    lv_label_dot_tmp_free(label);
 8018340:	4630      	mov	r0, r6
 8018342:	f7ff ffbf 	bl	80182c4 <lv_label_dot_tmp_free>
    ext->dot_end = LV_LABEL_DOT_END_INV;
 8018346:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801834a:	8123      	strh	r3, [r4, #8]
 801834c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        ext->text[byte_i + i] = dot_tmp[i];
 8018350:	548b      	strb	r3, [r1, r2]
 8018352:	e7e8      	b.n	8018326 <lv_label_revert_dots+0x3e>
 8018354:	20001d18 	.word	0x20001d18

08018358 <lv_label_set_offset_y>:
{
 8018358:	b538      	push	{r3, r4, r5, lr}
 801835a:	4604      	mov	r4, r0
 801835c:	460d      	mov	r5, r1
    lv_label_ext_t * ext = lv_obj_get_ext_attr(label);
 801835e:	f7f8 f90e 	bl	801057e <lv_obj_get_ext_attr>
    ext->offset.y        = y;
 8018362:	8185      	strh	r5, [r0, #12]
    lv_obj_invalidate(label);
 8018364:	4620      	mov	r0, r4
}
 8018366:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    lv_obj_invalidate(label);
 801836a:	f7f7 ba4f 	b.w	800f80c <lv_obj_invalidate>

0801836e <lv_label_set_offset_x>:
{
 801836e:	b538      	push	{r3, r4, r5, lr}
 8018370:	4604      	mov	r4, r0
 8018372:	460d      	mov	r5, r1
    lv_label_ext_t * ext = lv_obj_get_ext_attr(label);
 8018374:	f7f8 f903 	bl	801057e <lv_obj_get_ext_attr>
    ext->offset.x        = x;
 8018378:	8145      	strh	r5, [r0, #10]
    lv_obj_invalidate(label);
 801837a:	4620      	mov	r0, r4
}
 801837c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    lv_obj_invalidate(label);
 8018380:	f7f7 ba44 	b.w	800f80c <lv_obj_invalidate>

08018384 <lv_label_set_dot_tmp>:
{
 8018384:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018386:	4615      	mov	r5, r2
 8018388:	4607      	mov	r7, r0
 801838a:	460e      	mov	r6, r1
    lv_label_ext_t * ext = lv_obj_get_ext_attr(label);
 801838c:	f7f8 f8f7 	bl	801057e <lv_obj_get_ext_attr>
 8018390:	4604      	mov	r4, r0
    lv_label_dot_tmp_free(label); /* Deallocate any existing space */
 8018392:	4638      	mov	r0, r7
 8018394:	f7ff ff96 	bl	80182c4 <lv_label_dot_tmp_free>
    if(len > sizeof(char *)) {
 8018398:	2d04      	cmp	r5, #4
 801839a:	d911      	bls.n	80183c0 <lv_label_set_dot_tmp+0x3c>
        ext->dot.tmp_ptr = lv_mem_alloc(len + 1);
 801839c:	1c68      	adds	r0, r5, #1
 801839e:	f7fd f9f1 	bl	8015784 <lv_mem_alloc>
 80183a2:	6060      	str	r0, [r4, #4]
        if(ext->dot.tmp_ptr == NULL) {
 80183a4:	b1b0      	cbz	r0, 80183d4 <lv_label_set_dot_tmp+0x50>
        memcpy(ext->dot.tmp_ptr, data, len);
 80183a6:	462a      	mov	r2, r5
 80183a8:	4631      	mov	r1, r6
 80183aa:	f002 fd05 	bl	801adb8 <memcpy>
        ext->dot.tmp_ptr[len] = '\0';
 80183ae:	6863      	ldr	r3, [r4, #4]
 80183b0:	2200      	movs	r2, #0
 80183b2:	555a      	strb	r2, [r3, r5]
        ext->dot_tmp_alloc    = true;
 80183b4:	7fe3      	ldrb	r3, [r4, #31]
 80183b6:	f043 0302 	orr.w	r3, r3, #2
 80183ba:	77e3      	strb	r3, [r4, #31]
    return true;
 80183bc:	2001      	movs	r0, #1
 80183be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        ext->dot_tmp_alloc = false;
 80183c0:	7fe3      	ldrb	r3, [r4, #31]
 80183c2:	f36f 0341 	bfc	r3, #1, #1
 80183c6:	77e3      	strb	r3, [r4, #31]
        memcpy(ext->dot.tmp, data, len);
 80183c8:	462a      	mov	r2, r5
 80183ca:	4631      	mov	r1, r6
 80183cc:	1d20      	adds	r0, r4, #4
 80183ce:	f002 fcf3 	bl	801adb8 <memcpy>
 80183d2:	e7f3      	b.n	80183bc <lv_label_set_dot_tmp+0x38>
}
 80183d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080183d6 <lv_label_design>:
{
 80183d6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    if(mode == LV_DESIGN_COVER_CHK)
 80183da:	2a02      	cmp	r2, #2
{
 80183dc:	b08d      	sub	sp, #52	; 0x34
 80183de:	4607      	mov	r7, r0
 80183e0:	4688      	mov	r8, r1
    if(mode == LV_DESIGN_COVER_CHK)
 80183e2:	f000 8102 	beq.w	80185ea <lv_label_design+0x214>
    else if(mode == LV_DESIGN_DRAW_MAIN) {
 80183e6:	2a00      	cmp	r2, #0
 80183e8:	f040 80f6 	bne.w	80185d8 <lv_label_design+0x202>
        const lv_style_t * style = lv_obj_get_style(label);
 80183ec:	f7f7 ffdc 	bl	80103a8 <lv_obj_get_style>
 80183f0:	4604      	mov	r4, r0
        lv_opa_t opa_scale       = lv_obj_get_opa_scale(label);
 80183f2:	4638      	mov	r0, r7
 80183f4:	f7f8 f85b 	bl	80104ae <lv_obj_get_opa_scale>
        lv_obj_get_coords(label, &coords);
 80183f8:	a908      	add	r1, sp, #32
        lv_opa_t opa_scale       = lv_obj_get_opa_scale(label);
 80183fa:	4681      	mov	r9, r0
        lv_obj_get_coords(label, &coords);
 80183fc:	4638      	mov	r0, r7
 80183fe:	f7f7 ffb0 	bl	8010362 <lv_obj_get_coords>
        lv_group_t * g = lv_obj_get_group(label);
 8018402:	4638      	mov	r0, r7
 8018404:	f7f8 f8c1 	bl	801058a <lv_obj_get_group>
        if(lv_group_get_focused(g) == label) {
 8018408:	f7f7 f818 	bl	800f43c <lv_group_get_focused>
 801840c:	4287      	cmp	r7, r0
 801840e:	d105      	bne.n	801841c <lv_label_design+0x46>
            lv_draw_rect(&coords, mask, style, opa_scale);
 8018410:	464b      	mov	r3, r9
 8018412:	4622      	mov	r2, r4
 8018414:	4641      	mov	r1, r8
 8018416:	a808      	add	r0, sp, #32
 8018418:	f7fa f976 	bl	8012708 <lv_draw_rect>
        lv_label_ext_t * ext = lv_obj_get_ext_attr(label);
 801841c:	4638      	mov	r0, r7
 801841e:	f7f8 f8ae 	bl	801057e <lv_obj_get_ext_attr>
        if(ext->body_draw) {
 8018422:	7fc3      	ldrb	r3, [r0, #31]
 8018424:	07d9      	lsls	r1, r3, #31
        lv_label_ext_t * ext = lv_obj_get_ext_attr(label);
 8018426:	4605      	mov	r5, r0
        if(ext->body_draw) {
 8018428:	d524      	bpl.n	8018474 <lv_label_design+0x9e>
            lv_obj_get_coords(label, &bg);
 801842a:	a90a      	add	r1, sp, #40	; 0x28
 801842c:	4638      	mov	r0, r7
 801842e:	f7f7 ff98 	bl	8010362 <lv_obj_get_coords>
            bg.x1 -= style->body.padding.left;
 8018432:	8b62      	ldrh	r2, [r4, #26]
 8018434:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
 8018438:	1a9b      	subs	r3, r3, r2
 801843a:	f8ad 3028 	strh.w	r3, [sp, #40]	; 0x28
            bg.x2 += style->body.padding.right;
 801843e:	8ba2      	ldrh	r2, [r4, #28]
 8018440:	f8bd 302c 	ldrh.w	r3, [sp, #44]	; 0x2c
 8018444:	4413      	add	r3, r2
 8018446:	f8ad 302c 	strh.w	r3, [sp, #44]	; 0x2c
            bg.y1 -= style->body.padding.top;
 801844a:	8ae2      	ldrh	r2, [r4, #22]
 801844c:	f8bd 302a 	ldrh.w	r3, [sp, #42]	; 0x2a
 8018450:	1a9b      	subs	r3, r3, r2
 8018452:	f8ad 302a 	strh.w	r3, [sp, #42]	; 0x2a
            bg.y2 += style->body.padding.bottom;
 8018456:	8b22      	ldrh	r2, [r4, #24]
 8018458:	f8bd 302e 	ldrh.w	r3, [sp, #46]	; 0x2e
            lv_draw_rect(&bg, mask, style, lv_obj_get_opa_scale(label));
 801845c:	4638      	mov	r0, r7
            bg.y2 += style->body.padding.bottom;
 801845e:	4413      	add	r3, r2
 8018460:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
            lv_draw_rect(&bg, mask, style, lv_obj_get_opa_scale(label));
 8018464:	f7f8 f823 	bl	80104ae <lv_obj_get_opa_scale>
 8018468:	4622      	mov	r2, r4
 801846a:	4603      	mov	r3, r0
 801846c:	4641      	mov	r1, r8
 801846e:	a80a      	add	r0, sp, #40	; 0x28
 8018470:	f7fa f94a 	bl	8012708 <lv_draw_rect>
        if(ext->recolor != 0) flag |= LV_TXT_FLAG_RECOLOR;
 8018474:	7fab      	ldrb	r3, [r5, #30]
        if(ext->expand != 0) flag |= LV_TXT_FLAG_EXPAND;
 8018476:	061a      	lsls	r2, r3, #24
        lv_txt_flag_t flag = LV_TXT_FLAG_NONE;
 8018478:	f3c3 1680 	ubfx	r6, r3, #6, #1
        if(ext->align == LV_LABEL_ALIGN_CENTER) flag |= LV_TXT_FLAG_CENTER;
 801847c:	f003 0230 	and.w	r2, r3, #48	; 0x30
        if(ext->expand != 0) flag |= LV_TXT_FLAG_EXPAND;
 8018480:	bf48      	it	mi
 8018482:	f046 0602 	orrmi.w	r6, r6, #2
        if(ext->align == LV_LABEL_ALIGN_CENTER) flag |= LV_TXT_FLAG_CENTER;
 8018486:	2a10      	cmp	r2, #16
 8018488:	f040 80a8 	bne.w	80185dc <lv_label_design+0x206>
 801848c:	f046 0604 	orr.w	r6, r6, #4
        if((ext->long_mode == LV_LABEL_LONG_SROLL || ext->long_mode == LV_LABEL_LONG_SROLL_CIRC) &&
 8018490:	f003 0307 	and.w	r3, r3, #7
 8018494:	3b03      	subs	r3, #3
 8018496:	2b01      	cmp	r3, #1
 8018498:	d81a      	bhi.n	80184d0 <lv_label_design+0xfa>
 801849a:	2a10      	cmp	r2, #16
 801849c:	d001      	beq.n	80184a2 <lv_label_design+0xcc>
           (ext->align == LV_LABEL_ALIGN_CENTER || ext->align == LV_LABEL_ALIGN_RIGHT)) {
 801849e:	2a20      	cmp	r2, #32
 80184a0:	d116      	bne.n	80184d0 <lv_label_design+0xfa>
            lv_txt_get_size(&size, ext->text, style->text.font, style->text.letter_space, style->text.line_space,
 80184a2:	f647 4218 	movw	r2, #31768	; 0x7c18
 80184a6:	f9b4 3028 	ldrsh.w	r3, [r4, #40]	; 0x28
 80184aa:	9602      	str	r6, [sp, #8]
 80184ac:	9201      	str	r2, [sp, #4]
 80184ae:	f9b4 202a 	ldrsh.w	r2, [r4, #42]	; 0x2a
 80184b2:	9200      	str	r2, [sp, #0]
 80184b4:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80184b6:	6829      	ldr	r1, [r5, #0]
 80184b8:	a80a      	add	r0, sp, #40	; 0x28
 80184ba:	f7fd fd21 	bl	8015f00 <lv_txt_get_size>
            if(size.x > lv_obj_get_width(label)) {
 80184be:	4638      	mov	r0, r7
 80184c0:	f9bd a028 	ldrsh.w	sl, [sp, #40]	; 0x28
 80184c4:	f7f7 ff5f 	bl	8010386 <lv_obj_get_width>
 80184c8:	4582      	cmp	sl, r0
                flag &= ~LV_TXT_FLAG_CENTER;
 80184ca:	bfc8      	it	gt
 80184cc:	f006 06f3 	andgt.w	r6, r6, #243	; 0xf3
        if(ext->long_mode == LV_LABEL_LONG_SROLL_CIRC || lv_obj_get_height(label) < LV_LABEL_HINT_HEIGHT_LIMIT)
 80184d0:	7fab      	ldrb	r3, [r5, #30]
 80184d2:	f003 0307 	and.w	r3, r3, #7
 80184d6:	2b04      	cmp	r3, #4
 80184d8:	f000 8085 	beq.w	80185e6 <lv_label_design+0x210>
 80184dc:	4638      	mov	r0, r7
 80184de:	f7f7 ff58 	bl	8010392 <lv_obj_get_height>
 80184e2:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 80184e6:	db7e      	blt.n	80185e6 <lv_label_design+0x210>
        lv_draw_label_hint_t * hint = &ext->hint;
 80184e8:	f105 0310 	add.w	r3, r5, #16
        lv_draw_label(&coords, mask, style, opa_scale, ext->text, flag, &ext->offset,
 80184ec:	9305      	str	r3, [sp, #20]
 80184ee:	f64f 7bff 	movw	fp, #65535	; 0xffff
 80184f2:	f105 030a 	add.w	r3, r5, #10
 80184f6:	f8cd b010 	str.w	fp, [sp, #16]
 80184fa:	f8cd b00c 	str.w	fp, [sp, #12]
 80184fe:	9302      	str	r3, [sp, #8]
 8018500:	9601      	str	r6, [sp, #4]
 8018502:	682b      	ldr	r3, [r5, #0]
 8018504:	9300      	str	r3, [sp, #0]
 8018506:	4622      	mov	r2, r4
 8018508:	464b      	mov	r3, r9
 801850a:	4641      	mov	r1, r8
 801850c:	a808      	add	r0, sp, #32
 801850e:	f7f9 fe65 	bl	80121dc <lv_draw_label>
        if(ext->long_mode == LV_LABEL_LONG_SROLL_CIRC) {
 8018512:	7fab      	ldrb	r3, [r5, #30]
 8018514:	f003 0307 	and.w	r3, r3, #7
 8018518:	2b04      	cmp	r3, #4
 801851a:	d15d      	bne.n	80185d8 <lv_label_design+0x202>
            lv_txt_get_size(&size, ext->text, style->text.font, style->text.letter_space, style->text.line_space,
 801851c:	f647 4218 	movw	r2, #31768	; 0x7c18
 8018520:	f9b4 3028 	ldrsh.w	r3, [r4, #40]	; 0x28
 8018524:	9602      	str	r6, [sp, #8]
 8018526:	9201      	str	r2, [sp, #4]
 8018528:	f9b4 202a 	ldrsh.w	r2, [r4, #42]	; 0x2a
 801852c:	9200      	str	r2, [sp, #0]
 801852e:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8018530:	6829      	ldr	r1, [r5, #0]
 8018532:	a807      	add	r0, sp, #28
 8018534:	f7fd fce4 	bl	8015f00 <lv_txt_get_size>
            if(size.x > lv_obj_get_width(label)) {
 8018538:	4638      	mov	r0, r7
 801853a:	f9bd a01c 	ldrsh.w	sl, [sp, #28]
 801853e:	f7f7 ff22 	bl	8010386 <lv_obj_get_width>
 8018542:	4582      	cmp	sl, r0
 8018544:	dd24      	ble.n	8018590 <lv_label_design+0x1ba>
                ofs.x = ext->offset.x + size.x +
 8018546:	f8bd 001c 	ldrh.w	r0, [sp, #28]
 801854a:	f8b5 a00a 	ldrh.w	sl, [r5, #10]
                        lv_font_get_glyph_width(style->text.font, ' ', ' ') * LV_LABEL_WAIT_CHAR_COUNT;
 801854e:	2220      	movs	r2, #32
 8018550:	4611      	mov	r1, r2
                ofs.x = ext->offset.x + size.x +
 8018552:	4482      	add	sl, r0
                        lv_font_get_glyph_width(style->text.font, ' ', ' ') * LV_LABEL_WAIT_CHAR_COUNT;
 8018554:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8018556:	f7fc fb35 	bl	8014bc4 <lv_font_get_glyph_width>
                ofs.y = ext->offset.y;
 801855a:	89ab      	ldrh	r3, [r5, #12]
 801855c:	f8ad 302a 	strh.w	r3, [sp, #42]	; 0x2a
                lv_draw_label(&coords, mask, style, opa_scale, ext->text, flag, &ofs,
 8018560:	2300      	movs	r3, #0
 8018562:	9305      	str	r3, [sp, #20]
 8018564:	ab0a      	add	r3, sp, #40	; 0x28
 8018566:	f8cd b010 	str.w	fp, [sp, #16]
 801856a:	f8cd b00c 	str.w	fp, [sp, #12]
 801856e:	9302      	str	r3, [sp, #8]
 8018570:	9601      	str	r6, [sp, #4]
                        lv_font_get_glyph_width(style->text.font, ' ', ' ') * LV_LABEL_WAIT_CHAR_COUNT;
 8018572:	eb00 0040 	add.w	r0, r0, r0, lsl #1
                lv_draw_label(&coords, mask, style, opa_scale, ext->text, flag, &ofs,
 8018576:	682b      	ldr	r3, [r5, #0]
 8018578:	9300      	str	r3, [sp, #0]
                ofs.x = ext->offset.x + size.x +
 801857a:	fa1f fa8a 	uxth.w	sl, sl
 801857e:	4482      	add	sl, r0
                lv_draw_label(&coords, mask, style, opa_scale, ext->text, flag, &ofs,
 8018580:	464b      	mov	r3, r9
 8018582:	4622      	mov	r2, r4
 8018584:	4641      	mov	r1, r8
 8018586:	a808      	add	r0, sp, #32
                ofs.x = ext->offset.x + size.x +
 8018588:	f8ad a028 	strh.w	sl, [sp, #40]	; 0x28
                lv_draw_label(&coords, mask, style, opa_scale, ext->text, flag, &ofs,
 801858c:	f7f9 fe26 	bl	80121dc <lv_draw_label>
            if(size.y > lv_obj_get_height(label)) {
 8018590:	4638      	mov	r0, r7
 8018592:	f9bd a01e 	ldrsh.w	sl, [sp, #30]
 8018596:	f7f7 fefc 	bl	8010392 <lv_obj_get_height>
 801859a:	4582      	cmp	sl, r0
 801859c:	dd1c      	ble.n	80185d8 <lv_label_design+0x202>
                ofs.x = ext->offset.x;
 801859e:	896b      	ldrh	r3, [r5, #10]
 80185a0:	f8ad 3028 	strh.w	r3, [sp, #40]	; 0x28
                ofs.y = ext->offset.y + size.y + lv_font_get_line_height(style->text.font);
 80185a4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80185a6:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 80185aa:	7a1b      	ldrb	r3, [r3, #8]
 80185ac:	4413      	add	r3, r2
 80185ae:	89aa      	ldrh	r2, [r5, #12]
                lv_draw_label(&coords, mask, style, opa_scale, ext->text, flag, &ofs,
 80185b0:	9601      	str	r6, [sp, #4]
                ofs.y = ext->offset.y + size.y + lv_font_get_line_height(style->text.font);
 80185b2:	4413      	add	r3, r2
 80185b4:	f8ad 302a 	strh.w	r3, [sp, #42]	; 0x2a
                lv_draw_label(&coords, mask, style, opa_scale, ext->text, flag, &ofs,
 80185b8:	2300      	movs	r3, #0
 80185ba:	9305      	str	r3, [sp, #20]
 80185bc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80185c0:	9304      	str	r3, [sp, #16]
 80185c2:	9303      	str	r3, [sp, #12]
 80185c4:	ab0a      	add	r3, sp, #40	; 0x28
 80185c6:	9302      	str	r3, [sp, #8]
 80185c8:	682b      	ldr	r3, [r5, #0]
 80185ca:	9300      	str	r3, [sp, #0]
 80185cc:	4622      	mov	r2, r4
 80185ce:	464b      	mov	r3, r9
 80185d0:	4641      	mov	r1, r8
 80185d2:	a808      	add	r0, sp, #32
 80185d4:	f7f9 fe02 	bl	80121dc <lv_draw_label>
    return true;
 80185d8:	2001      	movs	r0, #1
 80185da:	e007      	b.n	80185ec <lv_label_design+0x216>
        if(ext->align == LV_LABEL_ALIGN_RIGHT) flag |= LV_TXT_FLAG_RIGHT;
 80185dc:	2a20      	cmp	r2, #32
 80185de:	bf08      	it	eq
 80185e0:	f046 0608 	orreq.w	r6, r6, #8
 80185e4:	e754      	b.n	8018490 <lv_label_design+0xba>
            hint = NULL;
 80185e6:	2300      	movs	r3, #0
 80185e8:	e780      	b.n	80184ec <lv_label_design+0x116>
        return false;
 80185ea:	2000      	movs	r0, #0
}
 80185ec:	b00d      	add	sp, #52	; 0x34
 80185ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080185f2 <lv_label_set_align>:
{
 80185f2:	b538      	push	{r3, r4, r5, lr}
 80185f4:	460c      	mov	r4, r1
 80185f6:	4605      	mov	r5, r0
    lv_label_ext_t * ext = lv_obj_get_ext_attr(label);
 80185f8:	f7f7 ffc1 	bl	801057e <lv_obj_get_ext_attr>
    if(ext->align == align) return;
 80185fc:	7f83      	ldrb	r3, [r0, #30]
 80185fe:	f3c3 1201 	ubfx	r2, r3, #4, #2
 8018602:	42a2      	cmp	r2, r4
 8018604:	d007      	beq.n	8018616 <lv_label_set_align+0x24>
    ext->align = align;
 8018606:	f364 1305 	bfi	r3, r4, #4, #2
 801860a:	7783      	strb	r3, [r0, #30]
    lv_obj_invalidate(label); /*Enough to invalidate because alignment is only drawing related
 801860c:	4628      	mov	r0, r5
}
 801860e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    lv_obj_invalidate(label); /*Enough to invalidate because alignment is only drawing related
 8018612:	f7f7 b8fb 	b.w	800f80c <lv_obj_invalidate>
 8018616:	bd38      	pop	{r3, r4, r5, pc}

08018618 <lv_label_set_body_draw>:
{
 8018618:	b538      	push	{r3, r4, r5, lr}
 801861a:	460d      	mov	r5, r1
 801861c:	4604      	mov	r4, r0
    lv_label_ext_t * ext = lv_obj_get_ext_attr(label);
 801861e:	f7f7 ffae 	bl	801057e <lv_obj_get_ext_attr>
    if(ext->body_draw == en) return;
 8018622:	7fc3      	ldrb	r3, [r0, #31]
 8018624:	f003 0201 	and.w	r2, r3, #1
 8018628:	42aa      	cmp	r2, r5
 801862a:	d00a      	beq.n	8018642 <lv_label_set_body_draw+0x2a>
    ext->body_draw = en == false ? 0 : 1;
 801862c:	f365 0300 	bfi	r3, r5, #0, #1
 8018630:	77c3      	strb	r3, [r0, #31]
    lv_obj_refresh_ext_draw_pad(label);
 8018632:	4620      	mov	r0, r4
 8018634:	f7f7 fdb3 	bl	801019e <lv_obj_refresh_ext_draw_pad>
    lv_obj_invalidate(label);
 8018638:	4620      	mov	r0, r4
}
 801863a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    lv_obj_invalidate(label);
 801863e:	f7f7 b8e5 	b.w	800f80c <lv_obj_invalidate>
 8018642:	bd38      	pop	{r3, r4, r5, pc}

08018644 <lv_label_get_text>:
{
 8018644:	b508      	push	{r3, lr}
    lv_label_ext_t * ext = lv_obj_get_ext_attr(label);
 8018646:	f7f7 ff9a 	bl	801057e <lv_obj_get_ext_attr>
}
 801864a:	6800      	ldr	r0, [r0, #0]
 801864c:	bd08      	pop	{r3, pc}

0801864e <lv_label_get_long_mode>:
{
 801864e:	b508      	push	{r3, lr}
    lv_label_ext_t * ext = lv_obj_get_ext_attr(label);
 8018650:	f7f7 ff95 	bl	801057e <lv_obj_get_ext_attr>
    return ext->long_mode;
 8018654:	7f80      	ldrb	r0, [r0, #30]
}
 8018656:	f000 0007 	and.w	r0, r0, #7
 801865a:	bd08      	pop	{r3, pc}

0801865c <lv_label_get_align>:
{
 801865c:	b508      	push	{r3, lr}
    lv_label_ext_t * ext = lv_obj_get_ext_attr(label);
 801865e:	f7f7 ff8e 	bl	801057e <lv_obj_get_ext_attr>
    return ext->align;
 8018662:	7f80      	ldrb	r0, [r0, #30]
}
 8018664:	f3c0 1001 	ubfx	r0, r0, #4, #2
 8018668:	bd08      	pop	{r3, pc}

0801866a <lv_label_get_recolor>:
{
 801866a:	b508      	push	{r3, lr}
    lv_label_ext_t * ext = lv_obj_get_ext_attr(label);
 801866c:	f7f7 ff87 	bl	801057e <lv_obj_get_ext_attr>
    return ext->recolor == 0 ? false : true;
 8018670:	7f80      	ldrb	r0, [r0, #30]
}
 8018672:	f3c0 1080 	ubfx	r0, r0, #6, #1
 8018676:	bd08      	pop	{r3, pc}

08018678 <lv_label_get_body_draw>:
{
 8018678:	b508      	push	{r3, lr}
    lv_label_ext_t * ext = lv_obj_get_ext_attr(label);
 801867a:	f7f7 ff80 	bl	801057e <lv_obj_get_ext_attr>
    return ext->body_draw == 0 ? false : true;
 801867e:	7fc0      	ldrb	r0, [r0, #31]
}
 8018680:	f000 0001 	and.w	r0, r0, #1
 8018684:	bd08      	pop	{r3, pc}
	...

08018688 <lv_label_get_letter_on>:
{
 8018688:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801868c:	b08b      	sub	sp, #44	; 0x2c
 801868e:	4682      	mov	sl, r0
 8018690:	9106      	str	r1, [sp, #24]
    const char * txt         = lv_label_get_text(label);
 8018692:	f7ff ffd7 	bl	8018644 <lv_label_get_text>
 8018696:	4607      	mov	r7, r0
    lv_label_ext_t * ext     = lv_obj_get_ext_attr(label);
 8018698:	4650      	mov	r0, sl
 801869a:	f7f7 ff70 	bl	801057e <lv_obj_get_ext_attr>
 801869e:	9004      	str	r0, [sp, #16]
    lv_coord_t max_w         = lv_obj_get_width(label);
 80186a0:	4650      	mov	r0, sl
 80186a2:	f7f7 fe70 	bl	8010386 <lv_obj_get_width>
 80186a6:	4683      	mov	fp, r0
    const lv_style_t * style = lv_obj_get_style(label);
 80186a8:	4650      	mov	r0, sl
 80186aa:	f7f7 fe7d 	bl	80103a8 <lv_obj_get_style>
    const lv_font_t * font   = style->text.font;
 80186ae:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80186b0:	9303      	str	r3, [sp, #12]
 80186b2:	7a1b      	ldrb	r3, [r3, #8]
 80186b4:	9305      	str	r3, [sp, #20]
    if(ext->recolor != 0) flag |= LV_TXT_FLAG_RECOLOR;
 80186b6:	9b04      	ldr	r3, [sp, #16]
 80186b8:	7f9b      	ldrb	r3, [r3, #30]
    if(ext->expand != 0) flag |= LV_TXT_FLAG_EXPAND;
 80186ba:	061a      	lsls	r2, r3, #24
    lv_txt_flag_t flag       = LV_TXT_FLAG_NONE;
 80186bc:	f3c3 1680 	ubfx	r6, r3, #6, #1
    if(ext->align == LV_LABEL_ALIGN_CENTER) flag |= LV_TXT_FLAG_CENTER;
 80186c0:	f003 0230 	and.w	r2, r3, #48	; 0x30
    if(ext->expand != 0) flag |= LV_TXT_FLAG_EXPAND;
 80186c4:	bf48      	it	mi
 80186c6:	f046 0602 	orrmi.w	r6, r6, #2
    if(ext->align == LV_LABEL_ALIGN_CENTER) flag |= LV_TXT_FLAG_CENTER;
 80186ca:	2a10      	cmp	r2, #16
 80186cc:	bf08      	it	eq
 80186ce:	f046 0604 	orreq.w	r6, r6, #4
        max_w = LV_COORD_MAX;
 80186d2:	2400      	movs	r4, #0
 80186d4:	f013 0f07 	tst.w	r3, #7
 80186d8:	f647 4318 	movw	r3, #31768	; 0x7c18
    const lv_style_t * style = lv_obj_get_style(label);
 80186dc:	4681      	mov	r9, r0
        max_w = LV_COORD_MAX;
 80186de:	bf08      	it	eq
 80186e0:	469b      	moveq	fp, r3
 80186e2:	4625      	mov	r5, r4
    while(txt[line_start] != '\0') {
 80186e4:	197b      	adds	r3, r7, r5
 80186e6:	9307      	str	r3, [sp, #28]
 80186e8:	5d7b      	ldrb	r3, [r7, r5]
 80186ea:	2b00      	cmp	r3, #0
 80186ec:	d150      	bne.n	8018790 <lv_label_get_letter_on+0x108>
 80186ee:	46a8      	mov	r8, r5
    if(ext->align == LV_LABEL_ALIGN_CENTER) {
 80186f0:	9b04      	ldr	r3, [sp, #16]
 80186f2:	7f9b      	ldrb	r3, [r3, #30]
 80186f4:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80186f8:	2b10      	cmp	r3, #16
 80186fa:	d162      	bne.n	80187c2 <lv_label_get_letter_on+0x13a>
        line_w = lv_txt_get_width(&txt[line_start], new_line_start - line_start, font, style->text.letter_space, flag);
 80186fc:	eba8 0105 	sub.w	r1, r8, r5
 8018700:	f9b9 3028 	ldrsh.w	r3, [r9, #40]	; 0x28
 8018704:	9a03      	ldr	r2, [sp, #12]
 8018706:	9600      	str	r6, [sp, #0]
 8018708:	b289      	uxth	r1, r1
 801870a:	1978      	adds	r0, r7, r5
 801870c:	f7fd fbb0 	bl	8015e70 <lv_txt_get_width>
 8018710:	4604      	mov	r4, r0
        x += lv_obj_get_width(label) / 2 - line_w / 2;
 8018712:	4650      	mov	r0, sl
 8018714:	f7f7 fe37 	bl	8010386 <lv_obj_get_width>
 8018718:	2302      	movs	r3, #2
 801871a:	fb90 f0f3 	sdiv	r0, r0, r3
 801871e:	fb94 f4f3 	sdiv	r4, r4, r3
 8018722:	1b04      	subs	r4, r0, r4
 8018724:	b224      	sxth	r4, r4
    lv_txt_cmd_state_t cmd_state = LV_TXT_CMD_STATE_WAIT;
 8018726:	2300      	movs	r3, #0
 8018728:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
    uint32_t i         = line_start;
 801872c:	9509      	str	r5, [sp, #36]	; 0x24
    if(new_line_start > 0) {
 801872e:	f1b8 0f00 	cmp.w	r8, #0
 8018732:	d024      	beq.n	801877e <lv_label_get_letter_on+0xf6>
            letter = lv_txt_encoded_next(txt, &i);
 8018734:	f8df a0b4 	ldr.w	sl, [pc, #180]	; 80187ec <lv_label_get_letter_on+0x164>
            if((flag & LV_TXT_FLAG_RECOLOR) != 0) {
 8018738:	f006 0601 	and.w	r6, r6, #1
        while(i <= new_line_start - 1) {
 801873c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801873e:	f108 33ff 	add.w	r3, r8, #4294967295	; 0xffffffff
 8018742:	4293      	cmp	r3, r2
 8018744:	d31b      	bcc.n	801877e <lv_label_get_letter_on+0xf6>
            letter = lv_txt_encoded_next(txt, &i);
 8018746:	f8da 3000 	ldr.w	r3, [sl]
 801874a:	a909      	add	r1, sp, #36	; 0x24
 801874c:	4638      	mov	r0, r7
 801874e:	4798      	blx	r3
 8018750:	4683      	mov	fp, r0
            letter_next = lv_txt_encoded_next(&txt[i], NULL);
 8018752:	9809      	ldr	r0, [sp, #36]	; 0x24
 8018754:	f8da 3000 	ldr.w	r3, [sl]
 8018758:	2100      	movs	r1, #0
 801875a:	4438      	add	r0, r7
 801875c:	4798      	blx	r3
 801875e:	4602      	mov	r2, r0
            if((flag & LV_TXT_FLAG_RECOLOR) != 0) {
 8018760:	2e00      	cmp	r6, #0
 8018762:	d130      	bne.n	80187c6 <lv_label_get_letter_on+0x13e>
            x += lv_font_get_glyph_width(font, letter, letter_next);
 8018764:	4659      	mov	r1, fp
 8018766:	9803      	ldr	r0, [sp, #12]
 8018768:	f7fc fa2c 	bl	8014bc4 <lv_font_get_glyph_width>
            if(pos->x < x) {
 801876c:	9b06      	ldr	r3, [sp, #24]
            x += lv_font_get_glyph_width(font, letter, letter_next);
 801876e:	4404      	add	r4, r0
            if(pos->x < x) {
 8018770:	f9b3 2000 	ldrsh.w	r2, [r3]
            x += lv_font_get_glyph_width(font, letter, letter_next);
 8018774:	b2a4      	uxth	r4, r4
            if(pos->x < x) {
 8018776:	b223      	sxth	r3, r4
 8018778:	429a      	cmp	r2, r3
 801877a:	da2f      	bge.n	80187dc <lv_label_get_letter_on+0x154>
                i = i_current;
 801877c:	9509      	str	r5, [sp, #36]	; 0x24
    return lv_encoded_get_char_id(txt, i);
 801877e:	4b1a      	ldr	r3, [pc, #104]	; (80187e8 <lv_label_get_letter_on+0x160>)
 8018780:	9909      	ldr	r1, [sp, #36]	; 0x24
 8018782:	681b      	ldr	r3, [r3, #0]
 8018784:	4638      	mov	r0, r7
 8018786:	4798      	blx	r3
}
 8018788:	b280      	uxth	r0, r0
 801878a:	b00b      	add	sp, #44	; 0x2c
 801878c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        new_line_start += lv_txt_get_next_line(&txt[line_start], font, style->text.letter_space, max_w, flag);
 8018790:	f9b9 2028 	ldrsh.w	r2, [r9, #40]	; 0x28
 8018794:	9903      	ldr	r1, [sp, #12]
 8018796:	9600      	str	r6, [sp, #0]
 8018798:	465b      	mov	r3, fp
 801879a:	1978      	adds	r0, r7, r5
 801879c:	f7fd fae0 	bl	8015d60 <lv_txt_get_next_line>
        if(pos->y <= y + letter_height) break; /*The line is found (stored in 'line_start')*/
 80187a0:	9b06      	ldr	r3, [sp, #24]
 80187a2:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 80187a6:	9b05      	ldr	r3, [sp, #20]
 80187a8:	18e3      	adds	r3, r4, r3
 80187aa:	429a      	cmp	r2, r3
        new_line_start += lv_txt_get_next_line(&txt[line_start], font, style->text.letter_space, max_w, flag);
 80187ac:	eb00 0805 	add.w	r8, r0, r5
        if(pos->y <= y + letter_height) break; /*The line is found (stored in 'line_start')*/
 80187b0:	dd9e      	ble.n	80186f0 <lv_label_get_letter_on+0x68>
        y += letter_height + style->text.line_space;
 80187b2:	f8b9 302a 	ldrh.w	r3, [r9, #42]	; 0x2a
 80187b6:	9a05      	ldr	r2, [sp, #20]
 80187b8:	4413      	add	r3, r2
 80187ba:	441c      	add	r4, r3
 80187bc:	b224      	sxth	r4, r4
        new_line_start += lv_txt_get_next_line(&txt[line_start], font, style->text.letter_space, max_w, flag);
 80187be:	4645      	mov	r5, r8
 80187c0:	e790      	b.n	80186e4 <lv_label_get_letter_on+0x5c>
    lv_coord_t x = 0;
 80187c2:	2400      	movs	r4, #0
 80187c4:	e7af      	b.n	8018726 <lv_label_get_letter_on+0x9e>
                if(lv_txt_is_cmd(&cmd_state, txt[i]) != false) {
 80187c6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80187c8:	9004      	str	r0, [sp, #16]
 80187ca:	5cf9      	ldrb	r1, [r7, r3]
 80187cc:	f10d 0023 	add.w	r0, sp, #35	; 0x23
 80187d0:	f7fd faa8 	bl	8015d24 <lv_txt_is_cmd>
 80187d4:	2800      	cmp	r0, #0
 80187d6:	d1b1      	bne.n	801873c <lv_label_get_letter_on+0xb4>
 80187d8:	9a04      	ldr	r2, [sp, #16]
 80187da:	e7c3      	b.n	8018764 <lv_label_get_letter_on+0xdc>
            x += style->text.letter_space;
 80187dc:	f8b9 0028 	ldrh.w	r0, [r9, #40]	; 0x28
            i_current = i;
 80187e0:	9d09      	ldr	r5, [sp, #36]	; 0x24
            x += style->text.letter_space;
 80187e2:	4404      	add	r4, r0
 80187e4:	b224      	sxth	r4, r4
 80187e6:	e7a9      	b.n	801873c <lv_label_get_letter_on+0xb4>
 80187e8:	20001d14 	.word	0x20001d14
 80187ec:	20001d1c 	.word	0x20001d1c

080187f0 <lv_label_refr_text>:
{
 80187f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80187f4:	b093      	sub	sp, #76	; 0x4c
 80187f6:	4605      	mov	r5, r0
    lv_label_ext_t * ext = lv_obj_get_ext_attr(label);
 80187f8:	f7f7 fec1 	bl	801057e <lv_obj_get_ext_attr>
    if(ext->text == NULL) return;
 80187fc:	6803      	ldr	r3, [r0, #0]
    lv_label_ext_t * ext = lv_obj_get_ext_attr(label);
 80187fe:	4604      	mov	r4, r0
    if(ext->text == NULL) return;
 8018800:	b393      	cbz	r3, 8018868 <lv_label_refr_text+0x78>
    ext->hint.line_start = -1; /*The hint is invalid if the text changes*/
 8018802:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8018806:	6103      	str	r3, [r0, #16]
    lv_coord_t max_w         = lv_obj_get_width(label);
 8018808:	4628      	mov	r0, r5
 801880a:	f7f7 fdbc 	bl	8010386 <lv_obj_get_width>
 801880e:	4607      	mov	r7, r0
    const lv_style_t * style = lv_obj_get_style(label);
 8018810:	4628      	mov	r0, r5
 8018812:	f7f7 fdc9 	bl	80103a8 <lv_obj_get_style>
    if(ext->long_mode == LV_LABEL_LONG_EXPAND) {
 8018816:	7fa3      	ldrb	r3, [r4, #30]
    const lv_font_t * font   = style->text.font;
 8018818:	6a46      	ldr	r6, [r0, #36]	; 0x24
        max_w = LV_COORD_MAX;
 801881a:	f013 0f07 	tst.w	r3, #7
 801881e:	f647 4218 	movw	r2, #31768	; 0x7c18
 8018822:	bf08      	it	eq
 8018824:	4617      	moveq	r7, r2
    lv_txt_flag_t flag = LV_TXT_FLAG_NONE;
 8018826:	f3c3 1280 	ubfx	r2, r3, #6, #1
    if(ext->expand != 0) flag |= LV_TXT_FLAG_EXPAND;
 801882a:	061b      	lsls	r3, r3, #24
 801882c:	bf48      	it	mi
 801882e:	f042 0202 	orrmi.w	r2, r2, #2
    lv_txt_get_size(&size, ext->text, font, style->text.letter_space, style->text.line_space, max_w, flag);
 8018832:	f9b0 3028 	ldrsh.w	r3, [r0, #40]	; 0x28
 8018836:	9202      	str	r2, [sp, #8]
 8018838:	9701      	str	r7, [sp, #4]
 801883a:	f9b0 202a 	ldrsh.w	r2, [r0, #42]	; 0x2a
 801883e:	9200      	str	r2, [sp, #0]
    const lv_style_t * style = lv_obj_get_style(label);
 8018840:	4680      	mov	r8, r0
    lv_txt_get_size(&size, ext->text, font, style->text.letter_space, style->text.line_space, max_w, flag);
 8018842:	4632      	mov	r2, r6
 8018844:	6821      	ldr	r1, [r4, #0]
 8018846:	a806      	add	r0, sp, #24
 8018848:	f7fd fb5a 	bl	8015f00 <lv_txt_get_size>
    if(ext->long_mode == LV_LABEL_LONG_EXPAND) {
 801884c:	7fa3      	ldrb	r3, [r4, #30]
 801884e:	f013 0307 	ands.w	r3, r3, #7
 8018852:	d10c      	bne.n	801886e <lv_label_refr_text+0x7e>
        lv_obj_set_size(label, size.x, size.y);
 8018854:	f9bd 201a 	ldrsh.w	r2, [sp, #26]
 8018858:	f9bd 1018 	ldrsh.w	r1, [sp, #24]
 801885c:	4628      	mov	r0, r5
 801885e:	f7f7 fc37 	bl	80100d0 <lv_obj_set_size>
    lv_obj_invalidate(label);
 8018862:	4628      	mov	r0, r5
 8018864:	f7f6 ffd2 	bl	800f80c <lv_obj_invalidate>
}
 8018868:	b013      	add	sp, #76	; 0x4c
 801886a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    else if(ext->long_mode == LV_LABEL_LONG_SROLL) {
 801886e:	2b03      	cmp	r3, #3
 8018870:	d166      	bne.n	8018940 <lv_label_refr_text+0x150>
        anim.repeat   = 1;
 8018872:	f89d 3044 	ldrb.w	r3, [sp, #68]	; 0x44
        anim.var      = label;
 8018876:	9508      	str	r5, [sp, #32]
        anim.playback = 1;
 8018878:	f043 0303 	orr.w	r3, r3, #3
 801887c:	f88d 3044 	strb.w	r3, [sp, #68]	; 0x44
            (((lv_font_get_glyph_width(style->text.font, ' ', ' ') + style->text.letter_space) * 1000) /
 8018880:	2220      	movs	r2, #32
        anim.path_cb  = lv_anim_path_linear;
 8018882:	4b9f      	ldr	r3, [pc, #636]	; (8018b00 <lv_label_refr_text+0x310>)
            (((lv_font_get_glyph_width(style->text.font, ' ', ' ') + style->text.letter_space) * 1000) /
 8018884:	f8d8 0024 	ldr.w	r0, [r8, #36]	; 0x24
        anim.path_cb  = lv_anim_path_linear;
 8018888:	930a      	str	r3, [sp, #40]	; 0x28
        anim.start    = 0;
 801888a:	2700      	movs	r7, #0
            (((lv_font_get_glyph_width(style->text.font, ' ', ' ') + style->text.letter_space) * 1000) /
 801888c:	4611      	mov	r1, r2
        anim.start    = 0;
 801888e:	970c      	str	r7, [sp, #48]	; 0x30
        anim.ready_cb = NULL;
 8018890:	970b      	str	r7, [sp, #44]	; 0x2c
            (((lv_font_get_glyph_width(style->text.font, ' ', ' ') + style->text.letter_space) * 1000) /
 8018892:	f7fc f997 	bl	8014bc4 <lv_font_get_glyph_width>
 8018896:	f9b8 3028 	ldrsh.w	r3, [r8, #40]	; 0x28
        if(size.x > lv_obj_get_width(label)) {
 801889a:	f9bd 8018 	ldrsh.w	r8, [sp, #24]
            (((lv_font_get_glyph_width(style->text.font, ' ', ' ') + style->text.letter_space) * 1000) /
 801889e:	4418      	add	r0, r3
 80188a0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80188a4:	4343      	muls	r3, r0
             ext->anim_speed) *
 80188a6:	8ba0      	ldrh	r0, [r4, #28]
            (((lv_font_get_glyph_width(style->text.font, ' ', ' ') + style->text.letter_space) * 1000) /
 80188a8:	fb93 f3f0 	sdiv	r3, r3, r0
        anim.playback_pause =
 80188ac:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80188b0:	b29b      	uxth	r3, r3
 80188b2:	f8ad 303c 	strh.w	r3, [sp, #60]	; 0x3c
        anim.repeat_pause = anim.playback_pause;
 80188b6:	f8ad 303e 	strh.w	r3, [sp, #62]	; 0x3e
        if(size.x > lv_obj_get_width(label)) {
 80188ba:	4628      	mov	r0, r5
        anim.act_time     = -anim.playback_pause;
 80188bc:	425b      	negs	r3, r3
 80188be:	f8ad 303a 	strh.w	r3, [sp, #58]	; 0x3a
        if(size.x > lv_obj_get_width(label)) {
 80188c2:	f7f7 fd60 	bl	8010386 <lv_obj_get_width>
 80188c6:	4580      	cmp	r8, r0
 80188c8:	dd34      	ble.n	8018934 <lv_label_refr_text+0x144>
            anim.end     = lv_obj_get_width(label) - size.x;
 80188ca:	4628      	mov	r0, r5
 80188cc:	f7f7 fd5b 	bl	8010386 <lv_obj_get_width>
 80188d0:	f9bd 2018 	ldrsh.w	r2, [sp, #24]
            anim.exec_cb = (lv_anim_exec_xcb_t)lv_label_set_offset_x;
 80188d4:	4b8b      	ldr	r3, [pc, #556]	; (8018b04 <lv_label_refr_text+0x314>)
            anim.time    = lv_anim_speed_to_time(ext->anim_speed, anim.start, anim.end);
 80188d6:	f9bd 1030 	ldrsh.w	r1, [sp, #48]	; 0x30
            anim.exec_cb = (lv_anim_exec_xcb_t)lv_label_set_offset_x;
 80188da:	9309      	str	r3, [sp, #36]	; 0x24
            anim.end     = lv_obj_get_width(label) - size.x;
 80188dc:	1a82      	subs	r2, r0, r2
 80188de:	920d      	str	r2, [sp, #52]	; 0x34
            anim.time    = lv_anim_speed_to_time(ext->anim_speed, anim.start, anim.end);
 80188e0:	8ba0      	ldrh	r0, [r4, #28]
 80188e2:	b212      	sxth	r2, r2
 80188e4:	f7fc fcc0 	bl	8015268 <lv_anim_speed_to_time>
 80188e8:	f8ad 0038 	strh.w	r0, [sp, #56]	; 0x38
            lv_anim_create(&anim);
 80188ec:	a808      	add	r0, sp, #32
 80188ee:	f7fc fc91 	bl	8015214 <lv_anim_create>
            hor_anim = true;
 80188f2:	2701      	movs	r7, #1
        if(size.y > lv_obj_get_height(label) && hor_anim == false) {
 80188f4:	4628      	mov	r0, r5
 80188f6:	f9bd 801a 	ldrsh.w	r8, [sp, #26]
 80188fa:	f7f7 fd4a 	bl	8010392 <lv_obj_get_height>
 80188fe:	4580      	cmp	r8, r0
 8018900:	dd78      	ble.n	80189f4 <lv_label_refr_text+0x204>
 8018902:	2f00      	cmp	r7, #0
 8018904:	d176      	bne.n	80189f4 <lv_label_refr_text+0x204>
            anim.end     = lv_obj_get_height(label) - size.y - (lv_font_get_line_height(font));
 8018906:	4628      	mov	r0, r5
 8018908:	f7f7 fd43 	bl	8010392 <lv_obj_get_height>
 801890c:	f9bd 201a 	ldrsh.w	r2, [sp, #26]
 8018910:	1a82      	subs	r2, r0, r2
 8018912:	7a30      	ldrb	r0, [r6, #8]
 8018914:	1a12      	subs	r2, r2, r0
            anim.end     = -size.y - (lv_font_get_line_height(font));
 8018916:	920d      	str	r2, [sp, #52]	; 0x34
            anim.exec_cb = (lv_anim_exec_xcb_t)lv_label_set_offset_y;
 8018918:	4b7b      	ldr	r3, [pc, #492]	; (8018b08 <lv_label_refr_text+0x318>)
            anim.time    = lv_anim_speed_to_time(ext->anim_speed, anim.start, anim.end);
 801891a:	f9bd 1030 	ldrsh.w	r1, [sp, #48]	; 0x30
 801891e:	8ba0      	ldrh	r0, [r4, #28]
            anim.exec_cb = (lv_anim_exec_xcb_t)lv_label_set_offset_y;
 8018920:	9309      	str	r3, [sp, #36]	; 0x24
            anim.time    = lv_anim_speed_to_time(ext->anim_speed, anim.start, anim.end);
 8018922:	b212      	sxth	r2, r2
 8018924:	f7fc fca0 	bl	8015268 <lv_anim_speed_to_time>
 8018928:	f8ad 0038 	strh.w	r0, [sp, #56]	; 0x38
            lv_anim_create(&anim);
 801892c:	a808      	add	r0, sp, #32
 801892e:	f7fc fc71 	bl	8015214 <lv_anim_create>
 8018932:	e796      	b.n	8018862 <lv_label_refr_text+0x72>
            lv_anim_del(label, (lv_anim_exec_xcb_t)lv_label_set_offset_x);
 8018934:	4973      	ldr	r1, [pc, #460]	; (8018b04 <lv_label_refr_text+0x314>)
 8018936:	4628      	mov	r0, r5
 8018938:	f7fc fc3e 	bl	80151b8 <lv_anim_del>
            ext->offset.x = 0;
 801893c:	8167      	strh	r7, [r4, #10]
 801893e:	e7d9      	b.n	80188f4 <lv_label_refr_text+0x104>
    else if(ext->long_mode == LV_LABEL_LONG_SROLL_CIRC) {
 8018940:	2b04      	cmp	r3, #4
 8018942:	d15e      	bne.n	8018a02 <lv_label_refr_text+0x212>
        anim.repeat   = 1;
 8018944:	f89d 3044 	ldrb.w	r3, [sp, #68]	; 0x44
        anim.var      = label;
 8018948:	9508      	str	r5, [sp, #32]
        anim.playback = 0;
 801894a:	f043 0302 	orr.w	r3, r3, #2
 801894e:	f36f 0300 	bfc	r3, #0, #1
 8018952:	f88d 3044 	strb.w	r3, [sp, #68]	; 0x44
        anim.act_time = -(((lv_font_get_glyph_width(style->text.font, ' ', ' ') + style->text.letter_space) * 1000) /
 8018956:	2220      	movs	r2, #32
        anim.start    = 0;
 8018958:	2700      	movs	r7, #0
        anim.act_time = -(((lv_font_get_glyph_width(style->text.font, ' ', ' ') + style->text.letter_space) * 1000) /
 801895a:	4611      	mov	r1, r2
 801895c:	f8d8 0024 	ldr.w	r0, [r8, #36]	; 0x24
        anim.start    = 0;
 8018960:	970c      	str	r7, [sp, #48]	; 0x30
        anim.act_time = -(((lv_font_get_glyph_width(style->text.font, ' ', ' ') + style->text.letter_space) * 1000) /
 8018962:	f7fc f92f 	bl	8014bc4 <lv_font_get_glyph_width>
 8018966:	f9b8 3028 	ldrsh.w	r3, [r8, #40]	; 0x28
        if(size.x > lv_obj_get_width(label)) {
 801896a:	f9bd 8018 	ldrsh.w	r8, [sp, #24]
        anim.act_time = -(((lv_font_get_glyph_width(style->text.font, ' ', ' ') + style->text.letter_space) * 1000) /
 801896e:	4403      	add	r3, r0
 8018970:	4866      	ldr	r0, [pc, #408]	; (8018b0c <lv_label_refr_text+0x31c>)
 8018972:	4358      	muls	r0, r3
                          ext->anim_speed) *
 8018974:	8ba3      	ldrh	r3, [r4, #28]
        anim.act_time = -(((lv_font_get_glyph_width(style->text.font, ' ', ' ') + style->text.letter_space) * 1000) /
 8018976:	fb90 f0f3 	sdiv	r0, r0, r3
 801897a:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 801897e:	f8ad 003a 	strh.w	r0, [sp, #58]	; 0x3a
        anim.path_cb        = lv_anim_path_linear;
 8018982:	4b5f      	ldr	r3, [pc, #380]	; (8018b00 <lv_label_refr_text+0x310>)
        anim.ready_cb       = NULL;
 8018984:	970b      	str	r7, [sp, #44]	; 0x2c
        if(size.x > lv_obj_get_width(label)) {
 8018986:	4628      	mov	r0, r5
        anim.path_cb        = lv_anim_path_linear;
 8018988:	930a      	str	r3, [sp, #40]	; 0x28
        anim.playback_pause = 0;
 801898a:	f8ad 703c 	strh.w	r7, [sp, #60]	; 0x3c
        anim.repeat_pause   = 0;
 801898e:	f8ad 703e 	strh.w	r7, [sp, #62]	; 0x3e
        if(size.x > lv_obj_get_width(label)) {
 8018992:	f7f7 fcf8 	bl	8010386 <lv_obj_get_width>
 8018996:	4580      	cmp	r8, r0
 8018998:	dd26      	ble.n	80189e8 <lv_label_refr_text+0x1f8>
            anim.end     = -size.x - lv_font_get_glyph_width(font, ' ', ' ') * LV_LABEL_WAIT_CHAR_COUNT;
 801899a:	2220      	movs	r2, #32
 801899c:	4611      	mov	r1, r2
 801899e:	4630      	mov	r0, r6
 80189a0:	f7fc f910 	bl	8014bc4 <lv_font_get_glyph_width>
 80189a4:	f9bd 2018 	ldrsh.w	r2, [sp, #24]
            anim.exec_cb = (lv_anim_exec_xcb_t)lv_label_set_offset_x;
 80189a8:	4b56      	ldr	r3, [pc, #344]	; (8018b04 <lv_label_refr_text+0x314>)
            anim.time    = lv_anim_speed_to_time(ext->anim_speed, anim.start, anim.end);
 80189aa:	f9bd 1030 	ldrsh.w	r1, [sp, #48]	; 0x30
            anim.exec_cb = (lv_anim_exec_xcb_t)lv_label_set_offset_x;
 80189ae:	9309      	str	r3, [sp, #36]	; 0x24
            anim.end     = -size.x - lv_font_get_glyph_width(font, ' ', ' ') * LV_LABEL_WAIT_CHAR_COUNT;
 80189b0:	eba0 0080 	sub.w	r0, r0, r0, lsl #2
 80189b4:	1a82      	subs	r2, r0, r2
 80189b6:	920d      	str	r2, [sp, #52]	; 0x34
            anim.time    = lv_anim_speed_to_time(ext->anim_speed, anim.start, anim.end);
 80189b8:	8ba0      	ldrh	r0, [r4, #28]
 80189ba:	b212      	sxth	r2, r2
 80189bc:	f7fc fc54 	bl	8015268 <lv_anim_speed_to_time>
 80189c0:	f8ad 0038 	strh.w	r0, [sp, #56]	; 0x38
            lv_anim_create(&anim);
 80189c4:	a808      	add	r0, sp, #32
 80189c6:	f7fc fc25 	bl	8015214 <lv_anim_create>
            hor_anim = true;
 80189ca:	2701      	movs	r7, #1
        if(size.y > lv_obj_get_height(label) && hor_anim == false) {
 80189cc:	4628      	mov	r0, r5
 80189ce:	f9bd 801a 	ldrsh.w	r8, [sp, #26]
 80189d2:	f7f7 fcde 	bl	8010392 <lv_obj_get_height>
 80189d6:	4580      	cmp	r8, r0
 80189d8:	dd0c      	ble.n	80189f4 <lv_label_refr_text+0x204>
 80189da:	b95f      	cbnz	r7, 80189f4 <lv_label_refr_text+0x204>
            anim.end     = -size.y - (lv_font_get_line_height(font));
 80189dc:	f9bd 201a 	ldrsh.w	r2, [sp, #26]
 80189e0:	7a33      	ldrb	r3, [r6, #8]
 80189e2:	4252      	negs	r2, r2
 80189e4:	1ad2      	subs	r2, r2, r3
 80189e6:	e796      	b.n	8018916 <lv_label_refr_text+0x126>
            lv_anim_del(label, (lv_anim_exec_xcb_t)lv_label_set_offset_x);
 80189e8:	4946      	ldr	r1, [pc, #280]	; (8018b04 <lv_label_refr_text+0x314>)
 80189ea:	4628      	mov	r0, r5
 80189ec:	f7fc fbe4 	bl	80151b8 <lv_anim_del>
            ext->offset.x = 0;
 80189f0:	8167      	strh	r7, [r4, #10]
 80189f2:	e7eb      	b.n	80189cc <lv_label_refr_text+0x1dc>
            lv_anim_del(label, (lv_anim_exec_xcb_t)lv_label_set_offset_y);
 80189f4:	4944      	ldr	r1, [pc, #272]	; (8018b08 <lv_label_refr_text+0x318>)
 80189f6:	4628      	mov	r0, r5
 80189f8:	f7fc fbde 	bl	80151b8 <lv_anim_del>
            ext->offset.y = 0;
 80189fc:	2300      	movs	r3, #0
 80189fe:	81a3      	strh	r3, [r4, #12]
 8018a00:	e72f      	b.n	8018862 <lv_label_refr_text+0x72>
    } else if(ext->long_mode == LV_LABEL_LONG_DOT) {
 8018a02:	2b02      	cmp	r3, #2
 8018a04:	d172      	bne.n	8018aec <lv_label_refr_text+0x2fc>
        if(size.y <= lv_obj_get_height(label)) { /*No dots are required, the text is short enough*/
 8018a06:	4628      	mov	r0, r5
 8018a08:	f9bd 601a 	ldrsh.w	r6, [sp, #26]
 8018a0c:	f7f7 fcc1 	bl	8010392 <lv_obj_get_height>
 8018a10:	4286      	cmp	r6, r0
 8018a12:	dc03      	bgt.n	8018a1c <lv_label_refr_text+0x22c>
            ext->dot_end = LV_LABEL_DOT_END_INV;
 8018a14:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8018a18:	8123      	strh	r3, [r4, #8]
 8018a1a:	e722      	b.n	8018862 <lv_label_refr_text+0x72>
        } else if(lv_txt_get_encoded_length(ext->text) <= LV_LABEL_DOT_NUM) { /*Don't turn to dots all the characters*/
 8018a1c:	4b3c      	ldr	r3, [pc, #240]	; (8018b10 <lv_label_refr_text+0x320>)
 8018a1e:	6820      	ldr	r0, [r4, #0]
 8018a20:	681b      	ldr	r3, [r3, #0]
 8018a22:	4798      	blx	r3
 8018a24:	2803      	cmp	r0, #3
 8018a26:	d9f5      	bls.n	8018a14 <lv_label_refr_text+0x224>
            p.x = lv_obj_get_width(label) -
 8018a28:	4628      	mov	r0, r5
 8018a2a:	f7f7 fcac 	bl	8010386 <lv_obj_get_width>
                  (lv_font_get_glyph_width(style->text.font, '.', '.') + style->text.letter_space) *
 8018a2e:	222e      	movs	r2, #46	; 0x2e
 8018a30:	4611      	mov	r1, r2
            p.x = lv_obj_get_width(label) -
 8018a32:	4606      	mov	r6, r0
                  (lv_font_get_glyph_width(style->text.font, '.', '.') + style->text.letter_space) *
 8018a34:	f8d8 0024 	ldr.w	r0, [r8, #36]	; 0x24
                lv_txt_encoded_next(ext->text, &byte_id);
 8018a38:	f8df a0e0 	ldr.w	sl, [pc, #224]	; 8018b1c <lv_label_refr_text+0x32c>
                  (lv_font_get_glyph_width(style->text.font, '.', '.') + style->text.letter_space) *
 8018a3c:	f7fc f8c2 	bl	8014bc4 <lv_font_get_glyph_width>
 8018a40:	f9b8 3028 	ldrsh.w	r3, [r8, #40]	; 0x28
 8018a44:	4418      	add	r0, r3
            p.x = lv_obj_get_width(label) -
 8018a46:	ebc0 3380 	rsb	r3, r0, r0, lsl #14
 8018a4a:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 8018a4e:	4430      	add	r0, r6
 8018a50:	f8ad 001c 	strh.w	r0, [sp, #28]
            p.y = lv_obj_get_height(label);
 8018a54:	4628      	mov	r0, r5
 8018a56:	f7f7 fc9c 	bl	8010392 <lv_obj_get_height>
                   (lv_font_get_line_height(style->text.font) + style->text.line_space); /*Round down to the last line*/
 8018a5a:	f8d8 3024 	ldr.w	r3, [r8, #36]	; 0x24
 8018a5e:	f9b8 102a 	ldrsh.w	r1, [r8, #42]	; 0x2a
 8018a62:	7a1b      	ldrb	r3, [r3, #8]
 8018a64:	440b      	add	r3, r1
            p.y -= p.y %
 8018a66:	fb90 f2f3 	sdiv	r2, r0, r3
 8018a6a:	fb03 0312 	mls	r3, r3, r2, r0
 8018a6e:	1ac0      	subs	r0, r0, r3
            p.y -= style->text.line_space;                                               /*Trim the last line space*/
 8018a70:	1a40      	subs	r0, r0, r1
 8018a72:	f8ad 001e 	strh.w	r0, [sp, #30]
            uint32_t letter_id = lv_label_get_letter_on(label, &p);
 8018a76:	a907      	add	r1, sp, #28
 8018a78:	4628      	mov	r0, r5
 8018a7a:	f7ff fe05 	bl	8018688 <lv_label_get_letter_on>
            uint32_t byte_id     = lv_txt_encoded_get_byte_id(ext->text, letter_id);
 8018a7e:	4b25      	ldr	r3, [pc, #148]	; (8018b14 <lv_label_refr_text+0x324>)
 8018a80:	4601      	mov	r1, r0
            uint32_t letter_id = lv_label_get_letter_on(label, &p);
 8018a82:	4680      	mov	r8, r0
            uint32_t byte_id     = lv_txt_encoded_get_byte_id(ext->text, letter_id);
 8018a84:	681b      	ldr	r3, [r3, #0]
 8018a86:	6820      	ldr	r0, [r4, #0]
 8018a88:	4798      	blx	r3
 8018a8a:	f10d 0b48 	add.w	fp, sp, #72	; 0x48
                len += lv_txt_encoded_size(&ext->text[byte_id]);
 8018a8e:	4a22      	ldr	r2, [pc, #136]	; (8018b18 <lv_label_refr_text+0x328>)
            uint32_t byte_id     = lv_txt_encoded_get_byte_id(ext->text, letter_id);
 8018a90:	f84b 0d28 	str.w	r0, [fp, #-40]!
 8018a94:	4681      	mov	r9, r0
 8018a96:	2604      	movs	r6, #4
            uint8_t len          = 0;
 8018a98:	2700      	movs	r7, #0
                len += lv_txt_encoded_size(&ext->text[byte_id]);
 8018a9a:	9b08      	ldr	r3, [sp, #32]
 8018a9c:	6820      	ldr	r0, [r4, #0]
 8018a9e:	9205      	str	r2, [sp, #20]
 8018aa0:	4418      	add	r0, r3
 8018aa2:	6813      	ldr	r3, [r2, #0]
 8018aa4:	4798      	blx	r3
                lv_txt_encoded_next(ext->text, &byte_id);
 8018aa6:	4659      	mov	r1, fp
                len += lv_txt_encoded_size(&ext->text[byte_id]);
 8018aa8:	4407      	add	r7, r0
                lv_txt_encoded_next(ext->text, &byte_id);
 8018aaa:	f8da 3000 	ldr.w	r3, [sl]
 8018aae:	6820      	ldr	r0, [r4, #0]
 8018ab0:	4798      	blx	r3
            for(i = 0; i <= LV_LABEL_DOT_NUM; i++) {
 8018ab2:	3e01      	subs	r6, #1
                len += lv_txt_encoded_size(&ext->text[byte_id]);
 8018ab4:	b2ff      	uxtb	r7, r7
            for(i = 0; i <= LV_LABEL_DOT_NUM; i++) {
 8018ab6:	9a05      	ldr	r2, [sp, #20]
 8018ab8:	d1ef      	bne.n	8018a9a <lv_label_refr_text+0x2aa>
            if(lv_label_set_dot_tmp(label, &ext->text[byte_id_ori], len)) {
 8018aba:	6821      	ldr	r1, [r4, #0]
 8018abc:	463a      	mov	r2, r7
 8018abe:	4449      	add	r1, r9
 8018ac0:	4628      	mov	r0, r5
 8018ac2:	f7ff fc5f 	bl	8018384 <lv_label_set_dot_tmp>
 8018ac6:	2800      	cmp	r0, #0
 8018ac8:	f43f aecb 	beq.w	8018862 <lv_label_refr_text+0x72>
                    ext->text[byte_id_ori + i] = '.';
 8018acc:	222e      	movs	r2, #46	; 0x2e
 8018ace:	6823      	ldr	r3, [r4, #0]
 8018ad0:	444b      	add	r3, r9
 8018ad2:	559a      	strb	r2, [r3, r6]
                for(i = 0; i < LV_LABEL_DOT_NUM; i++) {
 8018ad4:	3601      	adds	r6, #1
 8018ad6:	2e03      	cmp	r6, #3
 8018ad8:	d1f9      	bne.n	8018ace <lv_label_refr_text+0x2de>
                ext->text[byte_id_ori + LV_LABEL_DOT_NUM] = '\0';
 8018ada:	6823      	ldr	r3, [r4, #0]
 8018adc:	444b      	add	r3, r9
 8018ade:	2200      	movs	r2, #0
                ext->dot_end                              = letter_id + LV_LABEL_DOT_NUM;
 8018ae0:	f108 0803 	add.w	r8, r8, #3
                ext->text[byte_id_ori + LV_LABEL_DOT_NUM] = '\0';
 8018ae4:	70da      	strb	r2, [r3, #3]
                ext->dot_end                              = letter_id + LV_LABEL_DOT_NUM;
 8018ae6:	f8a4 8008 	strh.w	r8, [r4, #8]
 8018aea:	e6ba      	b.n	8018862 <lv_label_refr_text+0x72>
    else if(ext->long_mode == LV_LABEL_LONG_BREAK) {
 8018aec:	2b01      	cmp	r3, #1
 8018aee:	f47f aeb8 	bne.w	8018862 <lv_label_refr_text+0x72>
        lv_obj_set_height(label, size.y);
 8018af2:	f9bd 101a 	ldrsh.w	r1, [sp, #26]
 8018af6:	4628      	mov	r0, r5
 8018af8:	f7f7 fb3b 	bl	8010172 <lv_obj_set_height>
 8018afc:	e6b1      	b.n	8018862 <lv_label_refr_text+0x72>
 8018afe:	bf00      	nop
 8018b00:	0801501d 	.word	0x0801501d
 8018b04:	0801836f 	.word	0x0801836f
 8018b08:	08018359 	.word	0x08018359
 8018b0c:	fffffc18 	.word	0xfffffc18
 8018b10:	20001d28 	.word	0x20001d28
 8018b14:	20001d18 	.word	0x20001d18
 8018b18:	20001d24 	.word	0x20001d24
 8018b1c:	20001d1c 	.word	0x20001d1c

08018b20 <lv_label_signal>:
    res = ancestor_signal(label, sign, param);
 8018b20:	4b38      	ldr	r3, [pc, #224]	; (8018c04 <lv_label_signal+0xe4>)
{
 8018b22:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    res = ancestor_signal(label, sign, param);
 8018b26:	681b      	ldr	r3, [r3, #0]
{
 8018b28:	4604      	mov	r4, r0
 8018b2a:	460f      	mov	r7, r1
 8018b2c:	4616      	mov	r6, r2
    res = ancestor_signal(label, sign, param);
 8018b2e:	4798      	blx	r3
    if(res != LV_RES_OK) return res;
 8018b30:	2801      	cmp	r0, #1
    res = ancestor_signal(label, sign, param);
 8018b32:	4605      	mov	r5, r0
    if(res != LV_RES_OK) return res;
 8018b34:	d110      	bne.n	8018b58 <lv_label_signal+0x38>
    lv_label_ext_t * ext = lv_obj_get_ext_attr(label);
 8018b36:	4620      	mov	r0, r4
 8018b38:	f7f7 fd21 	bl	801057e <lv_obj_get_ext_attr>
 8018b3c:	4680      	mov	r8, r0
    if(sign == LV_SIGNAL_CLEANUP) {
 8018b3e:	b977      	cbnz	r7, 8018b5e <lv_label_signal+0x3e>
        if(ext->static_txt == 0) {
 8018b40:	7f83      	ldrb	r3, [r0, #30]
 8018b42:	f013 0608 	ands.w	r6, r3, #8
 8018b46:	d104      	bne.n	8018b52 <lv_label_signal+0x32>
            lv_mem_free(ext->text);
 8018b48:	6800      	ldr	r0, [r0, #0]
 8018b4a:	f7fc fe51 	bl	80157f0 <lv_mem_free>
            ext->text = NULL;
 8018b4e:	f8c8 6000 	str.w	r6, [r8]
        lv_label_dot_tmp_free(label);
 8018b52:	4620      	mov	r0, r4
 8018b54:	f7ff fbb6 	bl	80182c4 <lv_label_dot_tmp_free>
}
 8018b58:	4628      	mov	r0, r5
 8018b5a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    } else if(sign == LV_SIGNAL_STYLE_CHG) {
 8018b5e:	2f04      	cmp	r7, #4
 8018b60:	d106      	bne.n	8018b70 <lv_label_signal+0x50>
        lv_label_revert_dots(label);
 8018b62:	4620      	mov	r0, r4
 8018b64:	f7ff fbc0 	bl	80182e8 <lv_label_revert_dots>
        lv_label_refr_text(label);
 8018b68:	4620      	mov	r0, r4
 8018b6a:	f7ff fe41 	bl	80187f0 <lv_label_refr_text>
 8018b6e:	e7f3      	b.n	8018b58 <lv_label_signal+0x38>
    } else if(sign == LV_SIGNAL_CORD_CHG) {
 8018b70:	2f02      	cmp	r7, #2
 8018b72:	d118      	bne.n	8018ba6 <lv_label_signal+0x86>
    return area_p->x2 - area_p->x1 + 1;
 8018b74:	8aa2      	ldrh	r2, [r4, #20]
 8018b76:	8a23      	ldrh	r3, [r4, #16]
 8018b78:	8831      	ldrh	r1, [r6, #0]
 8018b7a:	3201      	adds	r2, #1
 8018b7c:	1ad2      	subs	r2, r2, r3
 8018b7e:	88b3      	ldrh	r3, [r6, #4]
 8018b80:	3301      	adds	r3, #1
 8018b82:	1a5b      	subs	r3, r3, r1
        if(lv_area_get_width(&label->coords) != lv_area_get_width(param) ||
 8018b84:	b292      	uxth	r2, r2
 8018b86:	b29b      	uxth	r3, r3
 8018b88:	429a      	cmp	r2, r3
 8018b8a:	d1ea      	bne.n	8018b62 <lv_label_signal+0x42>
    return area_p->y2 - area_p->y1 + 1;
 8018b8c:	8ae2      	ldrh	r2, [r4, #22]
 8018b8e:	8a63      	ldrh	r3, [r4, #18]
 8018b90:	8871      	ldrh	r1, [r6, #2]
 8018b92:	3201      	adds	r2, #1
 8018b94:	1ad2      	subs	r2, r2, r3
 8018b96:	88f3      	ldrh	r3, [r6, #6]
 8018b98:	3301      	adds	r3, #1
 8018b9a:	1a5b      	subs	r3, r3, r1
 8018b9c:	b292      	uxth	r2, r2
 8018b9e:	b29b      	uxth	r3, r3
 8018ba0:	429a      	cmp	r2, r3
 8018ba2:	d1de      	bne.n	8018b62 <lv_label_signal+0x42>
 8018ba4:	e7d8      	b.n	8018b58 <lv_label_signal+0x38>
    } else if(sign == LV_SIGNAL_REFR_EXT_DRAW_PAD) {
 8018ba6:	2f05      	cmp	r7, #5
 8018ba8:	d11d      	bne.n	8018be6 <lv_label_signal+0xc6>
        if(ext->body_draw) {
 8018baa:	7fc3      	ldrb	r3, [r0, #31]
 8018bac:	07db      	lsls	r3, r3, #31
 8018bae:	d5d3      	bpl.n	8018b58 <lv_label_signal+0x38>
 * @return pointer to the label's style
 */
static inline const lv_style_t * lv_label_get_style(const lv_obj_t * label, lv_label_style_t type)
{
    (void)type; /*Unused*/
    return lv_obj_get_style(label);
 8018bb0:	4620      	mov	r0, r4
 8018bb2:	f7f7 fbf9 	bl	80103a8 <lv_obj_get_style>
            label->ext_draw_pad = LV_MATH_MAX(label->ext_draw_pad, style->body.padding.right);
 8018bb6:	f9b0 301a 	ldrsh.w	r3, [r0, #26]
 8018bba:	f9b0 201c 	ldrsh.w	r2, [r0, #28]
 8018bbe:	4293      	cmp	r3, r2
 8018bc0:	bfb8      	it	lt
 8018bc2:	4613      	movlt	r3, r2
 8018bc4:	f9b4 2034 	ldrsh.w	r2, [r4, #52]	; 0x34
            label->ext_draw_pad = LV_MATH_MAX(label->ext_draw_pad, style->body.padding.top);
 8018bc8:	4293      	cmp	r3, r2
 8018bca:	bfb8      	it	lt
 8018bcc:	4613      	movlt	r3, r2
 8018bce:	f9b0 2016 	ldrsh.w	r2, [r0, #22]
            label->ext_draw_pad = LV_MATH_MAX(label->ext_draw_pad, style->body.padding.bottom);
 8018bd2:	4293      	cmp	r3, r2
 8018bd4:	bfb8      	it	lt
 8018bd6:	4613      	movlt	r3, r2
 8018bd8:	f9b0 2018 	ldrsh.w	r2, [r0, #24]
 8018bdc:	4293      	cmp	r3, r2
 8018bde:	bfb8      	it	lt
 8018be0:	4613      	movlt	r3, r2
 8018be2:	86a3      	strh	r3, [r4, #52]	; 0x34
 8018be4:	e7b8      	b.n	8018b58 <lv_label_signal+0x38>
    } else if(sign == LV_SIGNAL_GET_TYPE) {
 8018be6:	2f06      	cmp	r7, #6
 8018be8:	d1b6      	bne.n	8018b58 <lv_label_signal+0x38>
 8018bea:	2300      	movs	r3, #0
            if(buf->type[i] == NULL) break;
 8018bec:	f856 1023 	ldr.w	r1, [r6, r3, lsl #2]
 8018bf0:	b2da      	uxtb	r2, r3
 8018bf2:	b119      	cbz	r1, 8018bfc <lv_label_signal+0xdc>
 8018bf4:	3301      	adds	r3, #1
        for(i = 0; i < LV_MAX_ANCESTOR_NUM - 1; i++) { /*Find the last set data*/
 8018bf6:	2b07      	cmp	r3, #7
 8018bf8:	d1f8      	bne.n	8018bec <lv_label_signal+0xcc>
 8018bfa:	461a      	mov	r2, r3
        buf->type[i] = "lv_label";
 8018bfc:	4b02      	ldr	r3, [pc, #8]	; (8018c08 <lv_label_signal+0xe8>)
 8018bfe:	f846 3022 	str.w	r3, [r6, r2, lsl #2]
 8018c02:	e7a9      	b.n	8018b58 <lv_label_signal+0x38>
 8018c04:	2000b250 	.word	0x2000b250
 8018c08:	080f4fb7 	.word	0x080f4fb7

08018c0c <lv_label_set_text>:
{
 8018c0c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8018c10:	4680      	mov	r8, r0
 8018c12:	460d      	mov	r5, r1
    lv_obj_invalidate(label);
 8018c14:	f7f6 fdfa 	bl	800f80c <lv_obj_invalidate>
    lv_label_ext_t * ext = lv_obj_get_ext_attr(label);
 8018c18:	4640      	mov	r0, r8
 8018c1a:	f7f7 fcb0 	bl	801057e <lv_obj_get_ext_attr>
 8018c1e:	4604      	mov	r4, r0
    if(text == NULL) {
 8018c20:	b925      	cbnz	r5, 8018c2c <lv_label_set_text+0x20>
        lv_label_refr_text(label);
 8018c22:	4640      	mov	r0, r8
}
 8018c24:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
        lv_label_refr_text(label);
 8018c28:	f7ff bde2 	b.w	80187f0 <lv_label_refr_text>
    if(ext->text == text) {
 8018c2c:	6807      	ldr	r7, [r0, #0]
 8018c2e:	42bd      	cmp	r5, r7
        ext->text = lv_mem_realloc(ext->text, strlen(ext->text) + 1);
 8018c30:	4628      	mov	r0, r5
    if(ext->text == text) {
 8018c32:	d109      	bne.n	8018c48 <lv_label_set_text+0x3c>
        ext->text = lv_mem_realloc(ext->text, strlen(ext->text) + 1);
 8018c34:	f7e7 facc 	bl	80001d0 <strlen>
 8018c38:	1c41      	adds	r1, r0, #1
 8018c3a:	4628      	mov	r0, r5
 8018c3c:	f7fc fe02 	bl	8015844 <lv_mem_realloc>
 8018c40:	6020      	str	r0, [r4, #0]
        lv_mem_assert(ext->text);
 8018c42:	2800      	cmp	r0, #0
 8018c44:	d1ed      	bne.n	8018c22 <lv_label_set_text+0x16>
 8018c46:	e7fe      	b.n	8018c46 <lv_label_set_text+0x3a>
        uint32_t len = strlen(text) + 1;
 8018c48:	f7e7 fac2 	bl	80001d0 <strlen>
 8018c4c:	f100 0901 	add.w	r9, r0, #1
        if(ext->text != NULL && ext->static_txt == 0) {
 8018c50:	b13f      	cbz	r7, 8018c62 <lv_label_set_text+0x56>
 8018c52:	7fa3      	ldrb	r3, [r4, #30]
 8018c54:	f013 0608 	ands.w	r6, r3, #8
 8018c58:	d103      	bne.n	8018c62 <lv_label_set_text+0x56>
            lv_mem_free(ext->text);
 8018c5a:	4638      	mov	r0, r7
 8018c5c:	f7fc fdc8 	bl	80157f0 <lv_mem_free>
            ext->text = NULL;
 8018c60:	6026      	str	r6, [r4, #0]
        ext->text = lv_mem_alloc(len);
 8018c62:	4648      	mov	r0, r9
 8018c64:	f7fc fd8e 	bl	8015784 <lv_mem_alloc>
 8018c68:	6020      	str	r0, [r4, #0]
        lv_mem_assert(ext->text);
 8018c6a:	b900      	cbnz	r0, 8018c6e <lv_label_set_text+0x62>
 8018c6c:	e7fe      	b.n	8018c6c <lv_label_set_text+0x60>
        strcpy(ext->text, text);
 8018c6e:	4629      	mov	r1, r5
 8018c70:	f002 f8f6 	bl	801ae60 <strcpy>
        ext->static_txt = 0; /*Now the text is dynamically allocated*/
 8018c74:	7fa3      	ldrb	r3, [r4, #30]
 8018c76:	f36f 03c3 	bfc	r3, #3, #1
 8018c7a:	77a3      	strb	r3, [r4, #30]
 8018c7c:	e7d1      	b.n	8018c22 <lv_label_set_text+0x16>

08018c7e <lv_label_set_static_text>:
{
 8018c7e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018c80:	4607      	mov	r7, r0
 8018c82:	460e      	mov	r6, r1
    lv_label_ext_t * ext = lv_obj_get_ext_attr(label);
 8018c84:	f7f7 fc7b 	bl	801057e <lv_obj_get_ext_attr>
    if(ext->static_txt == 0 && ext->text != NULL) {
 8018c88:	7f83      	ldrb	r3, [r0, #30]
 8018c8a:	f013 0508 	ands.w	r5, r3, #8
    lv_label_ext_t * ext = lv_obj_get_ext_attr(label);
 8018c8e:	4604      	mov	r4, r0
    if(ext->static_txt == 0 && ext->text != NULL) {
 8018c90:	d104      	bne.n	8018c9c <lv_label_set_static_text+0x1e>
 8018c92:	6800      	ldr	r0, [r0, #0]
 8018c94:	b110      	cbz	r0, 8018c9c <lv_label_set_static_text+0x1e>
        lv_mem_free(ext->text);
 8018c96:	f7fc fdab 	bl	80157f0 <lv_mem_free>
        ext->text = NULL;
 8018c9a:	6025      	str	r5, [r4, #0]
    if(text != NULL) {
 8018c9c:	b126      	cbz	r6, 8018ca8 <lv_label_set_static_text+0x2a>
        ext->static_txt = 1;
 8018c9e:	7fa3      	ldrb	r3, [r4, #30]
        ext->text       = (char *)text;
 8018ca0:	6026      	str	r6, [r4, #0]
        ext->static_txt = 1;
 8018ca2:	f043 0308 	orr.w	r3, r3, #8
 8018ca6:	77a3      	strb	r3, [r4, #30]
    lv_label_refr_text(label);
 8018ca8:	4638      	mov	r0, r7
}
 8018caa:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    lv_label_refr_text(label);
 8018cae:	f7ff bd9f 	b.w	80187f0 <lv_label_refr_text>
	...

08018cb4 <lv_label_set_long_mode>:
{
 8018cb4:	b570      	push	{r4, r5, r6, lr}
 8018cb6:	4605      	mov	r5, r0
 8018cb8:	460e      	mov	r6, r1
    lv_label_ext_t * ext = lv_obj_get_ext_attr(label);
 8018cba:	f7f7 fc60 	bl	801057e <lv_obj_get_ext_attr>
    lv_anim_del(label, (lv_anim_exec_xcb_t)lv_obj_set_x);
 8018cbe:	491a      	ldr	r1, [pc, #104]	; (8018d28 <lv_label_set_long_mode+0x74>)
    lv_label_ext_t * ext = lv_obj_get_ext_attr(label);
 8018cc0:	4604      	mov	r4, r0
    lv_anim_del(label, (lv_anim_exec_xcb_t)lv_obj_set_x);
 8018cc2:	4628      	mov	r0, r5
 8018cc4:	f7fc fa78 	bl	80151b8 <lv_anim_del>
    lv_anim_del(label, (lv_anim_exec_xcb_t)lv_obj_set_y);
 8018cc8:	4918      	ldr	r1, [pc, #96]	; (8018d2c <lv_label_set_long_mode+0x78>)
 8018cca:	4628      	mov	r0, r5
 8018ccc:	f7fc fa74 	bl	80151b8 <lv_anim_del>
    lv_anim_del(label, (lv_anim_exec_xcb_t)lv_label_set_offset_x);
 8018cd0:	4917      	ldr	r1, [pc, #92]	; (8018d30 <lv_label_set_long_mode+0x7c>)
 8018cd2:	4628      	mov	r0, r5
 8018cd4:	f7fc fa70 	bl	80151b8 <lv_anim_del>
    lv_anim_del(label, (lv_anim_exec_xcb_t)lv_label_set_offset_y);
 8018cd8:	4916      	ldr	r1, [pc, #88]	; (8018d34 <lv_label_set_long_mode+0x80>)
 8018cda:	4628      	mov	r0, r5
 8018cdc:	f7fc fa6c 	bl	80151b8 <lv_anim_del>
    if(long_mode == LV_LABEL_LONG_SROLL || long_mode == LV_LABEL_LONG_SROLL_CIRC || long_mode == LV_LABEL_LONG_CROP)
 8018ce0:	1ef3      	subs	r3, r6, #3
 8018ce2:	2b02      	cmp	r3, #2
 8018ce4:	7fa3      	ldrb	r3, [r4, #30]
    ext->offset.x = 0;
 8018ce6:	f04f 0200 	mov.w	r2, #0
        ext->expand = 1;
 8018cea:	bf94      	ite	ls
 8018cec:	f043 0380 	orrls.w	r3, r3, #128	; 0x80
        ext->expand = 0;
 8018cf0:	f362 13c7 	bfihi	r3, r2, #7, #1
 8018cf4:	77a3      	strb	r3, [r4, #30]
    if(ext->long_mode == LV_LABEL_LONG_DOT && ext->dot_end != LV_LABEL_DOT_END_INV) {
 8018cf6:	7fa3      	ldrb	r3, [r4, #30]
    ext->offset.x = 0;
 8018cf8:	8162      	strh	r2, [r4, #10]
    if(ext->long_mode == LV_LABEL_LONG_DOT && ext->dot_end != LV_LABEL_DOT_END_INV) {
 8018cfa:	f003 0307 	and.w	r3, r3, #7
 8018cfe:	2b02      	cmp	r3, #2
    ext->offset.y = 0;
 8018d00:	81a2      	strh	r2, [r4, #12]
    if(ext->long_mode == LV_LABEL_LONG_DOT && ext->dot_end != LV_LABEL_DOT_END_INV) {
 8018d02:	d107      	bne.n	8018d14 <lv_label_set_long_mode+0x60>
 8018d04:	8922      	ldrh	r2, [r4, #8]
 8018d06:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8018d0a:	429a      	cmp	r2, r3
 8018d0c:	d002      	beq.n	8018d14 <lv_label_set_long_mode+0x60>
        lv_label_revert_dots(label);
 8018d0e:	4628      	mov	r0, r5
 8018d10:	f7ff faea 	bl	80182e8 <lv_label_revert_dots>
    ext->long_mode = long_mode;
 8018d14:	7fa3      	ldrb	r3, [r4, #30]
 8018d16:	f366 0302 	bfi	r3, r6, #0, #3
 8018d1a:	77a3      	strb	r3, [r4, #30]
    lv_label_refr_text(label);
 8018d1c:	4628      	mov	r0, r5
}
 8018d1e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    lv_label_refr_text(label);
 8018d22:	f7ff bd65 	b.w	80187f0 <lv_label_refr_text>
 8018d26:	bf00      	nop
 8018d28:	0800f96d 	.word	0x0800f96d
 8018d2c:	0800f981 	.word	0x0800f981
 8018d30:	0801836f 	.word	0x0801836f
 8018d34:	08018359 	.word	0x08018359

08018d38 <lv_label_set_recolor>:
{
 8018d38:	b538      	push	{r3, r4, r5, lr}
 8018d3a:	460c      	mov	r4, r1
 8018d3c:	4605      	mov	r5, r0
    lv_label_ext_t * ext = lv_obj_get_ext_attr(label);
 8018d3e:	f7f7 fc1e 	bl	801057e <lv_obj_get_ext_attr>
    if(ext->recolor == en) return;
 8018d42:	7f83      	ldrb	r3, [r0, #30]
 8018d44:	f3c3 1280 	ubfx	r2, r3, #6, #1
 8018d48:	42a2      	cmp	r2, r4
 8018d4a:	d007      	beq.n	8018d5c <lv_label_set_recolor+0x24>
    ext->recolor = en == false ? 0 : 1;
 8018d4c:	f364 1386 	bfi	r3, r4, #6, #1
 8018d50:	7783      	strb	r3, [r0, #30]
    lv_label_refr_text(label); /*Refresh the text because the potential colo codes in text needs to
 8018d52:	4628      	mov	r0, r5
}
 8018d54:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    lv_label_refr_text(label); /*Refresh the text because the potential colo codes in text needs to
 8018d58:	f7ff bd4a 	b.w	80187f0 <lv_label_refr_text>
 8018d5c:	bd38      	pop	{r3, r4, r5, pc}
	...

08018d60 <lv_label_create>:
{
 8018d60:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018d64:	460e      	mov	r6, r1
    lv_obj_t * new_label = lv_obj_create(par, copy);
 8018d66:	f7f7 f835 	bl	800fdd4 <lv_obj_create>
    lv_mem_assert(new_label);
 8018d6a:	4605      	mov	r5, r0
 8018d6c:	b900      	cbnz	r0, 8018d70 <lv_label_create+0x10>
 8018d6e:	e7fe      	b.n	8018d6e <lv_label_create+0xe>
    if(ancestor_signal == NULL) ancestor_signal = lv_obj_get_signal_cb(new_label);
 8018d70:	4c57      	ldr	r4, [pc, #348]	; (8018ed0 <lv_label_create+0x170>)
 8018d72:	6823      	ldr	r3, [r4, #0]
 8018d74:	b913      	cbnz	r3, 8018d7c <lv_label_create+0x1c>
 8018d76:	f7f7 fbfe 	bl	8010576 <lv_obj_get_signal_cb>
 8018d7a:	6020      	str	r0, [r4, #0]
    lv_obj_allocate_ext_attr(new_label, sizeof(lv_label_ext_t));
 8018d7c:	2120      	movs	r1, #32
 8018d7e:	4628      	mov	r0, r5
 8018d80:	f7f6 fd16 	bl	800f7b0 <lv_obj_allocate_ext_attr>
    lv_label_ext_t * ext = lv_obj_get_ext_attr(new_label);
 8018d84:	4628      	mov	r0, r5
 8018d86:	f7f7 fbfa 	bl	801057e <lv_obj_get_ext_attr>
    lv_mem_assert(ext);
 8018d8a:	4604      	mov	r4, r0
 8018d8c:	b900      	cbnz	r0, 8018d90 <lv_label_create+0x30>
 8018d8e:	e7fe      	b.n	8018d8e <lv_label_create+0x2e>
    ext->static_txt = 0;
 8018d90:	7f81      	ldrb	r1, [r0, #30]
    ext->body_draw  = 0;
 8018d92:	7fc2      	ldrb	r2, [r0, #31]
    ext->text       = NULL;
 8018d94:	2300      	movs	r3, #0
    ext->long_mode  = LV_LABEL_LONG_EXPAND;
 8018d96:	f001 0187 	and.w	r1, r1, #135	; 0x87
 8018d9a:	f363 0102 	bfi	r1, r3, #0, #3
    ext->text       = NULL;
 8018d9e:	6003      	str	r3, [r0, #0]
    ext->dot_tmp_alloc = 0;
 8018da0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
    ext->long_mode  = LV_LABEL_LONG_EXPAND;
 8018da4:	77a1      	strb	r1, [r4, #30]
    ext->anim_speed = LV_LABEL_DEF_SCROLL_SPEED;
 8018da6:	2119      	movs	r1, #25
    ext->dot_end    = LV_LABEL_DOT_END_INV;
 8018da8:	f64f 70ff 	movw	r0, #65535	; 0xffff
    ext->anim_speed = LV_LABEL_DEF_SCROLL_SPEED;
 8018dac:	83a1      	strh	r1, [r4, #28]
    ext->dot_tmp_alloc = 0;
 8018dae:	f363 0241 	bfi	r2, r3, #1, #1
    ext->hint.line_start = -1;
 8018db2:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    ext->dot_end    = LV_LABEL_DOT_END_INV;
 8018db6:	8120      	strh	r0, [r4, #8]
    ext->hint.line_start = -1;
 8018db8:	6121      	str	r1, [r4, #16]
    lv_obj_set_design_cb(new_label, lv_label_design);
 8018dba:	4628      	mov	r0, r5
 8018dbc:	4945      	ldr	r1, [pc, #276]	; (8018ed4 <lv_label_create+0x174>)
    ext->offset.x = 0;
 8018dbe:	8163      	strh	r3, [r4, #10]
    ext->offset.y = 0;
 8018dc0:	81a3      	strh	r3, [r4, #12]
    ext->hint.coord_y    = 0;
 8018dc2:	61a3      	str	r3, [r4, #24]
    ext->hint.y          = 0;
 8018dc4:	6163      	str	r3, [r4, #20]
    ext->dot.tmp_ptr   = NULL;
 8018dc6:	6063      	str	r3, [r4, #4]
    ext->dot_tmp_alloc = 0;
 8018dc8:	77e2      	strb	r2, [r4, #31]
    lv_obj_set_design_cb(new_label, lv_label_design);
 8018dca:	f7f6 fcef 	bl	800f7ac <lv_obj_set_design_cb>
    lv_obj_set_signal_cb(new_label, lv_label_signal);
 8018dce:	4942      	ldr	r1, [pc, #264]	; (8018ed8 <lv_label_create+0x178>)
 8018dd0:	4628      	mov	r0, r5
 8018dd2:	f7f6 fce9 	bl	800f7a8 <lv_obj_set_signal_cb>
    if(copy == NULL) {
 8018dd6:	b996      	cbnz	r6, 8018dfe <lv_label_create+0x9e>
        lv_obj_set_click(new_label, false);
 8018dd8:	4631      	mov	r1, r6
 8018dda:	4628      	mov	r0, r5
 8018ddc:	f7f6 fc10 	bl	800f600 <lv_obj_set_click>
        lv_label_set_long_mode(new_label, LV_LABEL_LONG_EXPAND);
 8018de0:	4631      	mov	r1, r6
 8018de2:	4628      	mov	r0, r5
 8018de4:	f7ff ff66 	bl	8018cb4 <lv_label_set_long_mode>
        lv_label_set_text(new_label, "Text");
 8018de8:	493c      	ldr	r1, [pc, #240]	; (8018edc <lv_label_create+0x17c>)
 8018dea:	4628      	mov	r0, r5
 8018dec:	f7ff ff0e 	bl	8018c0c <lv_label_set_text>
    lv_obj_set_style(label, style);
 8018df0:	4631      	mov	r1, r6
 8018df2:	4628      	mov	r0, r5
 8018df4:	f7f7 fa6e 	bl	80102d4 <lv_obj_set_style>
}
 8018df8:	4628      	mov	r0, r5
 8018dfa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        lv_label_ext_t * copy_ext = lv_obj_get_ext_attr(copy);
 8018dfe:	4630      	mov	r0, r6
 8018e00:	f7f7 fbbd 	bl	801057e <lv_obj_get_ext_attr>
 8018e04:	4607      	mov	r7, r0
        lv_label_set_long_mode(new_label, lv_label_get_long_mode(copy));
 8018e06:	4630      	mov	r0, r6
 8018e08:	f7ff fc21 	bl	801864e <lv_label_get_long_mode>
 8018e0c:	4601      	mov	r1, r0
 8018e0e:	4628      	mov	r0, r5
 8018e10:	f7ff ff50 	bl	8018cb4 <lv_label_set_long_mode>
        lv_label_set_recolor(new_label, lv_label_get_recolor(copy));
 8018e14:	4630      	mov	r0, r6
 8018e16:	f7ff fc28 	bl	801866a <lv_label_get_recolor>
 8018e1a:	4601      	mov	r1, r0
 8018e1c:	4628      	mov	r0, r5
 8018e1e:	f7ff ff8b 	bl	8018d38 <lv_label_set_recolor>
        lv_label_set_body_draw(new_label, lv_label_get_body_draw(copy));
 8018e22:	4630      	mov	r0, r6
 8018e24:	f7ff fc28 	bl	8018678 <lv_label_get_body_draw>
 8018e28:	4601      	mov	r1, r0
 8018e2a:	4628      	mov	r0, r5
 8018e2c:	f7ff fbf4 	bl	8018618 <lv_label_set_body_draw>
        lv_label_set_align(new_label, lv_label_get_align(copy));
 8018e30:	4630      	mov	r0, r6
 8018e32:	f7ff fc13 	bl	801865c <lv_label_get_align>
 8018e36:	4601      	mov	r1, r0
 8018e38:	4628      	mov	r0, r5
 8018e3a:	f7ff fbda 	bl	80185f2 <lv_label_set_align>
        if(copy_ext->static_txt == 0)
 8018e3e:	7fbb      	ldrb	r3, [r7, #30]
 8018e40:	071a      	lsls	r2, r3, #28
            lv_label_set_text(new_label, lv_label_get_text(copy));
 8018e42:	4630      	mov	r0, r6
        if(copy_ext->static_txt == 0)
 8018e44:	d416      	bmi.n	8018e74 <lv_label_create+0x114>
            lv_label_set_text(new_label, lv_label_get_text(copy));
 8018e46:	f7ff fbfd 	bl	8018644 <lv_label_get_text>
 8018e4a:	4601      	mov	r1, r0
 8018e4c:	4628      	mov	r0, r5
 8018e4e:	f7ff fedd 	bl	8018c0c <lv_label_set_text>
        if(copy_ext->long_mode == LV_LABEL_LONG_DOT) {
 8018e52:	7fbb      	ldrb	r3, [r7, #30]
 8018e54:	f003 0307 	and.w	r3, r3, #7
 8018e58:	2b02      	cmp	r3, #2
 8018e5a:	d11c      	bne.n	8018e96 <lv_label_create+0x136>
            ext->text = lv_mem_realloc(ext->text, lv_mem_get_size(copy_ext->text));
 8018e5c:	6838      	ldr	r0, [r7, #0]
 8018e5e:	6826      	ldr	r6, [r4, #0]
 8018e60:	f7fc fcb8 	bl	80157d4 <lv_mem_get_size>
 8018e64:	4601      	mov	r1, r0
 8018e66:	4630      	mov	r0, r6
 8018e68:	f7fc fcec 	bl	8015844 <lv_mem_realloc>
 8018e6c:	4606      	mov	r6, r0
 8018e6e:	6020      	str	r0, [r4, #0]
            lv_mem_assert(ext->text);
 8018e70:	b938      	cbnz	r0, 8018e82 <lv_label_create+0x122>
 8018e72:	e7fe      	b.n	8018e72 <lv_label_create+0x112>
            lv_label_set_static_text(new_label, lv_label_get_text(copy));
 8018e74:	f7ff fbe6 	bl	8018644 <lv_label_get_text>
 8018e78:	4601      	mov	r1, r0
 8018e7a:	4628      	mov	r0, r5
 8018e7c:	f7ff feff 	bl	8018c7e <lv_label_set_static_text>
 8018e80:	e7e7      	b.n	8018e52 <lv_label_create+0xf2>
            memcpy(ext->text, copy_ext->text, lv_mem_get_size(copy_ext->text));
 8018e82:	f8d7 8000 	ldr.w	r8, [r7]
 8018e86:	4640      	mov	r0, r8
 8018e88:	f7fc fca4 	bl	80157d4 <lv_mem_get_size>
 8018e8c:	4641      	mov	r1, r8
 8018e8e:	4602      	mov	r2, r0
 8018e90:	4630      	mov	r0, r6
 8018e92:	f001 ff91 	bl	801adb8 <memcpy>
        if(copy_ext->dot_tmp_alloc && copy_ext->dot.tmp_ptr) {
 8018e96:	7ffb      	ldrb	r3, [r7, #31]
 8018e98:	079b      	lsls	r3, r3, #30
 8018e9a:	d515      	bpl.n	8018ec8 <lv_label_create+0x168>
 8018e9c:	6878      	ldr	r0, [r7, #4]
 8018e9e:	b198      	cbz	r0, 8018ec8 <lv_label_create+0x168>
            int len = strlen(copy_ext->dot.tmp_ptr);
 8018ea0:	f7e7 f996 	bl	80001d0 <strlen>
            lv_label_set_dot_tmp(new_label, ext->dot.tmp_ptr, len);
 8018ea4:	6861      	ldr	r1, [r4, #4]
 8018ea6:	b282      	uxth	r2, r0
 8018ea8:	4628      	mov	r0, r5
 8018eaa:	f7ff fa6b 	bl	8018384 <lv_label_set_dot_tmp>
        ext->dot_tmp_alloc = copy_ext->dot_tmp_alloc;
 8018eae:	7ffb      	ldrb	r3, [r7, #31]
 8018eb0:	7fe2      	ldrb	r2, [r4, #31]
 8018eb2:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8018eb6:	f363 0241 	bfi	r2, r3, #1, #1
 8018eba:	77e2      	strb	r2, [r4, #31]
        ext->dot_end       = copy_ext->dot_end;
 8018ebc:	893b      	ldrh	r3, [r7, #8]
 8018ebe:	8123      	strh	r3, [r4, #8]
        lv_obj_refresh_style(new_label);
 8018ec0:	4628      	mov	r0, r5
 8018ec2:	f7f7 f95e 	bl	8010182 <lv_obj_refresh_style>
 8018ec6:	e797      	b.n	8018df8 <lv_label_create+0x98>
            memcpy(ext->dot.tmp, copy_ext->dot.tmp, sizeof(ext->dot.tmp));
 8018ec8:	687b      	ldr	r3, [r7, #4]
 8018eca:	6063      	str	r3, [r4, #4]
 8018ecc:	e7ef      	b.n	8018eae <lv_label_create+0x14e>
 8018ece:	bf00      	nop
 8018ed0:	2000b250 	.word	0x2000b250
 8018ed4:	080183d7 	.word	0x080183d7
 8018ed8:	08018b21 	.word	0x08018b21
 8018edc:	080f4fb2 	.word	0x080f4fb2

08018ee0 <lv_area_copy>:
 * @param dest pointer to the destination area
 * @param src pointer to the source area
 */
inline static void lv_area_copy(lv_area_t * dest, const lv_area_t * src)
{
    memcpy(dest, src, sizeof(lv_area_t));
 8018ee0:	4603      	mov	r3, r0
 8018ee2:	6808      	ldr	r0, [r1, #0]
 8018ee4:	6849      	ldr	r1, [r1, #4]
 8018ee6:	c303      	stmia	r3!, {r0, r1}
 8018ee8:	4770      	bx	lr

08018eea <scrl_def_event_cb>:
 * @param scrl pointer to the page's scrollable object
 * @param event type of the event
 * @param data data of the event
 */
static void scrl_def_event_cb(lv_obj_t * scrl, lv_event_t event)
{
 8018eea:	b538      	push	{r3, r4, r5, lr}
 8018eec:	460c      	mov	r4, r1
    lv_obj_t * page = lv_obj_get_parent(scrl);
 8018eee:	f7f7 f9cd 	bl	801028c <lv_obj_get_parent>

    /*clang-format off*/
    if(event == LV_EVENT_PRESSED || event == LV_EVENT_PRESSING || event == LV_EVENT_PRESS_LOST ||
 8018ef2:	2c0a      	cmp	r4, #10
    lv_obj_t * page = lv_obj_get_parent(scrl);
 8018ef4:	4605      	mov	r5, r0
    if(event == LV_EVENT_PRESSED || event == LV_EVENT_PRESSING || event == LV_EVENT_PRESS_LOST ||
 8018ef6:	d808      	bhi.n	8018f0a <scrl_def_event_cb+0x20>
       event == LV_EVENT_RELEASED || event == LV_EVENT_SHORT_CLICKED || event == LV_EVENT_CLICKED ||
       event == LV_EVENT_LONG_PRESSED || event == LV_EVENT_LONG_PRESSED_REPEAT ||
       event == LV_EVENT_DRAG_BEGIN || event == LV_EVENT_DRAG_END || event == LV_EVENT_DRAG_THROW_BEGIN) {
        lv_event_send(page, event, lv_event_get_data());
 8018ef8:	f7f6 fc50 	bl	800f79c <lv_event_get_data>
 8018efc:	4621      	mov	r1, r4
 8018efe:	4602      	mov	r2, r0
 8018f00:	4628      	mov	r0, r5
    }
    /*clang-format on*/
}
 8018f02:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        lv_event_send(page, event, lv_event_get_data());
 8018f06:	f7f6 bbeb 	b.w	800f6e0 <lv_event_send>
 8018f0a:	bd38      	pop	{r3, r4, r5, pc}

08018f0c <lv_page_sb_refresh>:
/**
 * Refresh the position and size of the scroll bars.
 * @param page pointer to a page object
 */
static void lv_page_sb_refresh(lv_obj_t * page)
{
 8018f0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018f10:	b08b      	sub	sp, #44	; 0x2c
 8018f12:	4607      	mov	r7, r0
    lv_page_ext_t * ext      = lv_obj_get_ext_attr(page);
 8018f14:	f7f7 fb33 	bl	801057e <lv_obj_get_ext_attr>
 8018f18:	4604      	mov	r4, r0
    const lv_style_t * style = lv_obj_get_style(page);
 8018f1a:	4638      	mov	r0, r7
 8018f1c:	f7f7 fa44 	bl	80103a8 <lv_obj_get_style>
    lv_obj_t * scrl          = ext->scrl;
 8018f20:	6863      	ldr	r3, [r4, #4]
 8018f22:	9300      	str	r3, [sp, #0]
    const lv_style_t * style = lv_obj_get_style(page);
 8018f24:	4680      	mov	r8, r0
    lv_coord_t size_tmp;
    lv_coord_t scrl_w = lv_obj_get_width(scrl);
 8018f26:	4618      	mov	r0, r3
 8018f28:	f7f7 fa2d 	bl	8010386 <lv_obj_get_width>
 8018f2c:	9001      	str	r0, [sp, #4]
    lv_coord_t scrl_h = lv_obj_get_height(scrl);
 8018f2e:	9800      	ldr	r0, [sp, #0]
 8018f30:	f7f7 fa2f 	bl	8010392 <lv_obj_get_height>
 8018f34:	9002      	str	r0, [sp, #8]
    lv_coord_t obj_w  = lv_obj_get_width(page);
 8018f36:	4638      	mov	r0, r7
 8018f38:	f7f7 fa25 	bl	8010386 <lv_obj_get_width>
 8018f3c:	4605      	mov	r5, r0
    lv_coord_t obj_h  = lv_obj_get_height(page);
 8018f3e:	4638      	mov	r0, r7
 8018f40:	f7f7 fa27 	bl	8010392 <lv_obj_get_height>
     * - horizontal and vertical scrollbars can overlap on the corners
     * - if the page has radius the scrollbar can be out of the radius  */
    lv_coord_t sb_hor_pad = LV_MATH_MAX(ext->sb.style->body.padding.inner, style->body.padding.right);
    lv_coord_t sb_ver_pad = LV_MATH_MAX(ext->sb.style->body.padding.inner, style->body.padding.bottom);

    if(ext->sb.mode == LV_SB_MODE_OFF) return;
 8018f44:	7f23      	ldrb	r3, [r4, #28]
 8018f46:	f013 021c 	ands.w	r2, r3, #28
    lv_coord_t obj_h  = lv_obj_get_height(page);
 8018f4a:	4681      	mov	r9, r0
    if(ext->sb.mode == LV_SB_MODE_OFF) return;
 8018f4c:	d066      	beq.n	801901c <lv_page_sb_refresh+0x110>
    lv_coord_t sb_hor_pad = LV_MATH_MAX(ext->sb.style->body.padding.inner, style->body.padding.right);
 8018f4e:	68a1      	ldr	r1, [r4, #8]
 8018f50:	f9b8 601c 	ldrsh.w	r6, [r8, #28]
 8018f54:	f9b1 101e 	ldrsh.w	r1, [r1, #30]
 8018f58:	9104      	str	r1, [sp, #16]

    if(ext->sb.mode == LV_SB_MODE_ON) {
 8018f5a:	2a04      	cmp	r2, #4
        ext->sb.hor_draw = 1;
        ext->sb.ver_draw = 1;
 8018f5c:	bf08      	it	eq
 8018f5e:	f043 0303 	orreq.w	r3, r3, #3
    lv_coord_t sb_ver_pad = LV_MATH_MAX(ext->sb.style->body.padding.inner, style->body.padding.bottom);
 8018f62:	f9b8 1018 	ldrsh.w	r1, [r8, #24]
        ext->sb.ver_draw = 1;
 8018f66:	bf08      	it	eq
 8018f68:	7723      	strbeq	r3, [r4, #28]
    }

    /*Invalidate the current (old) scrollbar areas*/
    lv_disp_t * disp = lv_obj_get_disp(page);
 8018f6a:	4638      	mov	r0, r7
    lv_coord_t sb_ver_pad = LV_MATH_MAX(ext->sb.style->body.padding.inner, style->body.padding.bottom);
 8018f6c:	9105      	str	r1, [sp, #20]
    lv_disp_t * disp = lv_obj_get_disp(page);
 8018f6e:	f7f6 fc27 	bl	800f7c0 <lv_obj_get_disp>
    lv_area_t sb_area_tmp;
    if(ext->sb.hor_draw != 0) {
 8018f72:	7f23      	ldrb	r3, [r4, #28]
    lv_disp_t * disp = lv_obj_get_disp(page);
 8018f74:	4683      	mov	fp, r0
    if(ext->sb.hor_draw != 0) {
 8018f76:	07d8      	lsls	r0, r3, #31
 8018f78:	d51e      	bpl.n	8018fb8 <lv_page_sb_refresh+0xac>
        lv_area_copy(&sb_area_tmp, &ext->sb.hor_area);
 8018f7a:	f104 010c 	add.w	r1, r4, #12
 8018f7e:	a808      	add	r0, sp, #32
 8018f80:	f7ff ffae 	bl	8018ee0 <lv_area_copy>
        sb_area_tmp.x1 += page->coords.x1;
 8018f84:	8a3a      	ldrh	r2, [r7, #16]
 8018f86:	f8bd 3020 	ldrh.w	r3, [sp, #32]
        sb_area_tmp.y1 += page->coords.y1;
 8018f8a:	f8bd 1022 	ldrh.w	r1, [sp, #34]	; 0x22
        sb_area_tmp.x1 += page->coords.x1;
 8018f8e:	4413      	add	r3, r2
 8018f90:	f8ad 3020 	strh.w	r3, [sp, #32]
        sb_area_tmp.y1 += page->coords.y1;
 8018f94:	8a7b      	ldrh	r3, [r7, #18]
 8018f96:	4419      	add	r1, r3
 8018f98:	f8ad 1022 	strh.w	r1, [sp, #34]	; 0x22
        sb_area_tmp.x2 += page->coords.x1;
 8018f9c:	f8bd 1024 	ldrh.w	r1, [sp, #36]	; 0x24
 8018fa0:	440a      	add	r2, r1
 8018fa2:	f8ad 2024 	strh.w	r2, [sp, #36]	; 0x24
        sb_area_tmp.y2 += page->coords.y1;
 8018fa6:	f8bd 2026 	ldrh.w	r2, [sp, #38]	; 0x26
        lv_inv_area(disp, &sb_area_tmp);
 8018faa:	a908      	add	r1, sp, #32
        sb_area_tmp.y2 += page->coords.y1;
 8018fac:	4413      	add	r3, r2
        lv_inv_area(disp, &sb_area_tmp);
 8018fae:	4658      	mov	r0, fp
        sb_area_tmp.y2 += page->coords.y1;
 8018fb0:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
        lv_inv_area(disp, &sb_area_tmp);
 8018fb4:	f7f7 fc1b 	bl	80107ee <lv_inv_area>
    }
    if(ext->sb.ver_draw != 0) {
 8018fb8:	7f23      	ldrb	r3, [r4, #28]
 8018fba:	0799      	lsls	r1, r3, #30
 8018fbc:	d51e      	bpl.n	8018ffc <lv_page_sb_refresh+0xf0>
        lv_area_copy(&sb_area_tmp, &ext->sb.ver_area);
 8018fbe:	f104 0114 	add.w	r1, r4, #20
 8018fc2:	a808      	add	r0, sp, #32
 8018fc4:	f7ff ff8c 	bl	8018ee0 <lv_area_copy>
        sb_area_tmp.x1 += page->coords.x1;
 8018fc8:	8a3a      	ldrh	r2, [r7, #16]
 8018fca:	f8bd 3020 	ldrh.w	r3, [sp, #32]
        sb_area_tmp.y1 += page->coords.y1;
 8018fce:	f8bd 1022 	ldrh.w	r1, [sp, #34]	; 0x22
        sb_area_tmp.x1 += page->coords.x1;
 8018fd2:	4413      	add	r3, r2
 8018fd4:	f8ad 3020 	strh.w	r3, [sp, #32]
        sb_area_tmp.y1 += page->coords.y1;
 8018fd8:	8a7b      	ldrh	r3, [r7, #18]
 8018fda:	4419      	add	r1, r3
 8018fdc:	f8ad 1022 	strh.w	r1, [sp, #34]	; 0x22
        sb_area_tmp.x2 += page->coords.x1;
 8018fe0:	f8bd 1024 	ldrh.w	r1, [sp, #36]	; 0x24
 8018fe4:	440a      	add	r2, r1
 8018fe6:	f8ad 2024 	strh.w	r2, [sp, #36]	; 0x24
        sb_area_tmp.y2 += page->coords.y1;
 8018fea:	f8bd 2026 	ldrh.w	r2, [sp, #38]	; 0x26
        lv_inv_area(disp, &sb_area_tmp);
 8018fee:	a908      	add	r1, sp, #32
        sb_area_tmp.y2 += page->coords.y1;
 8018ff0:	4413      	add	r3, r2
        lv_inv_area(disp, &sb_area_tmp);
 8018ff2:	4658      	mov	r0, fp
        sb_area_tmp.y2 += page->coords.y1;
 8018ff4:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
        lv_inv_area(disp, &sb_area_tmp);
 8018ff8:	f7f7 fbf9 	bl	80107ee <lv_inv_area>
    }

    if(ext->sb.mode == LV_SB_MODE_DRAG && lv_indev_is_dragging(lv_indev_get_act()) == false) {
 8018ffc:	7f23      	ldrb	r3, [r4, #28]
 8018ffe:	f003 031c 	and.w	r3, r3, #28
 8019002:	2b08      	cmp	r3, #8
 8019004:	d10d      	bne.n	8019022 <lv_page_sb_refresh+0x116>
 8019006:	f7f6 fa55 	bl	800f4b4 <lv_indev_get_act>
 801900a:	f7f6 fa76 	bl	800f4fa <lv_indev_is_dragging>
 801900e:	b940      	cbnz	r0, 8019022 <lv_page_sb_refresh+0x116>
        ext->sb.hor_draw = 0;
 8019010:	7f23      	ldrb	r3, [r4, #28]
 8019012:	f360 0300 	bfi	r3, r0, #0, #1
        ext->sb.ver_draw = 0;
 8019016:	f360 0341 	bfi	r3, r0, #1, #1
 801901a:	7723      	strb	r3, [r4, #28]
        sb_area_tmp.y1 += page->coords.y1;
        sb_area_tmp.x2 += page->coords.x1;
        sb_area_tmp.y2 += page->coords.y1;
        lv_inv_area(disp, &sb_area_tmp);
    }
}
 801901c:	b00b      	add	sp, #44	; 0x2c
 801901e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    lv_coord_t sb_hor_pad = LV_MATH_MAX(ext->sb.style->body.padding.inner, style->body.padding.right);
 8019022:	9a04      	ldr	r2, [sp, #16]
    if(scrl_w <= obj_w - style->body.padding.left - style->body.padding.right) {
 8019024:	f9b8 101c 	ldrsh.w	r1, [r8, #28]
 8019028:	9801      	ldr	r0, [sp, #4]
    lv_coord_t sb_hor_pad = LV_MATH_MAX(ext->sb.style->body.padding.inner, style->body.padding.right);
 801902a:	4296      	cmp	r6, r2
 801902c:	4633      	mov	r3, r6
 801902e:	bfb8      	it	lt
 8019030:	4613      	movlt	r3, r2
    if(scrl_w <= obj_w - style->body.padding.left - style->body.padding.right) {
 8019032:	f9b8 201a 	ldrsh.w	r2, [r8, #26]
    lv_coord_t sb_hor_pad = LV_MATH_MAX(ext->sb.style->body.padding.inner, style->body.padding.right);
 8019036:	9303      	str	r3, [sp, #12]
    if(scrl_w <= obj_w - style->body.padding.left - style->body.padding.right) {
 8019038:	1aab      	subs	r3, r5, r2
 801903a:	1a5b      	subs	r3, r3, r1
 801903c:	4298      	cmp	r0, r3
 801903e:	9b03      	ldr	r3, [sp, #12]
 8019040:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8019044:	f300 808e 	bgt.w	8019164 <lv_page_sb_refresh+0x258>
        lv_area_set_width(&ext->sb.hor_area, obj_w - 2 * sb_hor_pad);
 8019048:	1ae9      	subs	r1, r5, r3
 801904a:	f104 060c 	add.w	r6, r4, #12
 801904e:	b209      	sxth	r1, r1
 8019050:	4630      	mov	r0, r6
 8019052:	f7fc f924 	bl	801529e <lv_area_set_width>
                        obj_h - ext->sb.style->body.padding.inner - ext->sb.style->body.padding.bottom);
 8019056:	68a3      	ldr	r3, [r4, #8]
        lv_area_set_pos(&ext->sb.hor_area, sb_hor_pad,
 8019058:	9903      	ldr	r1, [sp, #12]
                        obj_h - ext->sb.style->body.padding.inner - ext->sb.style->body.padding.bottom);
 801905a:	8bda      	ldrh	r2, [r3, #30]
 801905c:	8b1b      	ldrh	r3, [r3, #24]
 801905e:	eba9 0202 	sub.w	r2, r9, r2
 8019062:	1ad2      	subs	r2, r2, r3
        lv_area_set_pos(&ext->sb.hor_area, sb_hor_pad,
 8019064:	b212      	sxth	r2, r2
 8019066:	4630      	mov	r0, r6
 8019068:	f7fc f923 	bl	80152b2 <lv_area_set_pos>
        if(ext->sb.mode == LV_SB_MODE_AUTO || ext->sb.mode == LV_SB_MODE_DRAG) ext->sb.hor_draw = 0;
 801906c:	7f23      	ldrb	r3, [r4, #28]
 801906e:	f003 0218 	and.w	r2, r3, #24
 8019072:	2a08      	cmp	r2, #8
 8019074:	d102      	bne.n	801907c <lv_page_sb_refresh+0x170>
 8019076:	f36f 0300 	bfc	r3, #0, #1
        if(ext->sb.mode == LV_SB_MODE_AUTO || ext->sb.mode == LV_SB_MODE_DRAG) ext->sb.hor_draw = 1;
 801907a:	7723      	strb	r3, [r4, #28]
    lv_coord_t sb_ver_pad = LV_MATH_MAX(ext->sb.style->body.padding.inner, style->body.padding.bottom);
 801907c:	9b04      	ldr	r3, [sp, #16]
 801907e:	9905      	ldr	r1, [sp, #20]
    if(scrl_h <= obj_h - style->body.padding.top - style->body.padding.bottom) {
 8019080:	9e02      	ldr	r6, [sp, #8]
    lv_coord_t sb_ver_pad = LV_MATH_MAX(ext->sb.style->body.padding.inner, style->body.padding.bottom);
 8019082:	428b      	cmp	r3, r1
 8019084:	bfb8      	it	lt
 8019086:	460b      	movlt	r3, r1
 8019088:	461a      	mov	r2, r3
    if(scrl_h <= obj_h - style->body.padding.top - style->body.padding.bottom) {
 801908a:	f9b8 3016 	ldrsh.w	r3, [r8, #22]
 801908e:	f9b8 1018 	ldrsh.w	r1, [r8, #24]
 8019092:	eba9 0003 	sub.w	r0, r9, r3
 8019096:	1a40      	subs	r0, r0, r1
 8019098:	4286      	cmp	r6, r0
 801909a:	ea4f 0a42 	mov.w	sl, r2, lsl #1
 801909e:	f300 809f 	bgt.w	80191e0 <lv_page_sb_refresh+0x2d4>
        lv_area_set_height(&ext->sb.ver_area, obj_h - 2 * sb_ver_pad);
 80190a2:	f104 0614 	add.w	r6, r4, #20
 80190a6:	eba9 010a 	sub.w	r1, r9, sl
 80190aa:	b209      	sxth	r1, r1
 80190ac:	4630      	mov	r0, r6
 80190ae:	9200      	str	r2, [sp, #0]
 80190b0:	f7fc f8fa 	bl	80152a8 <lv_area_set_height>
                        obj_w - ext->sb.style->body.padding.inner - ext->sb.style->body.padding.right, sb_ver_pad);
 80190b4:	68a3      	ldr	r3, [r4, #8]
        lv_area_set_pos(&ext->sb.ver_area,
 80190b6:	9a00      	ldr	r2, [sp, #0]
                        obj_w - ext->sb.style->body.padding.inner - ext->sb.style->body.padding.right, sb_ver_pad);
 80190b8:	8bd9      	ldrh	r1, [r3, #30]
 80190ba:	1a6d      	subs	r5, r5, r1
 80190bc:	8b99      	ldrh	r1, [r3, #28]
 80190be:	1a69      	subs	r1, r5, r1
        lv_area_set_pos(&ext->sb.ver_area,
 80190c0:	b209      	sxth	r1, r1
 80190c2:	4630      	mov	r0, r6
 80190c4:	f7fc f8f5 	bl	80152b2 <lv_area_set_pos>
        if(ext->sb.mode == LV_SB_MODE_AUTO || ext->sb.mode == LV_SB_MODE_DRAG) ext->sb.ver_draw = 0;
 80190c8:	7f23      	ldrb	r3, [r4, #28]
 80190ca:	f003 0218 	and.w	r2, r3, #24
 80190ce:	2a08      	cmp	r2, #8
 80190d0:	d102      	bne.n	80190d8 <lv_page_sb_refresh+0x1cc>
 80190d2:	f36f 0341 	bfc	r3, #1, #1
        if(ext->sb.mode == LV_SB_MODE_AUTO || ext->sb.mode == LV_SB_MODE_DRAG) ext->sb.ver_draw = 1;
 80190d6:	7723      	strb	r3, [r4, #28]
    if(ext->sb.hor_draw != 0) {
 80190d8:	7f23      	ldrb	r3, [r4, #28]
 80190da:	07da      	lsls	r2, r3, #31
 80190dc:	d51e      	bpl.n	801911c <lv_page_sb_refresh+0x210>
        lv_area_copy(&sb_area_tmp, &ext->sb.hor_area);
 80190de:	f104 010c 	add.w	r1, r4, #12
 80190e2:	a808      	add	r0, sp, #32
 80190e4:	f7ff fefc 	bl	8018ee0 <lv_area_copy>
        sb_area_tmp.x1 += page->coords.x1;
 80190e8:	8a3a      	ldrh	r2, [r7, #16]
 80190ea:	f8bd 3020 	ldrh.w	r3, [sp, #32]
        sb_area_tmp.y1 += page->coords.y1;
 80190ee:	f8bd 1022 	ldrh.w	r1, [sp, #34]	; 0x22
        sb_area_tmp.x1 += page->coords.x1;
 80190f2:	4413      	add	r3, r2
 80190f4:	f8ad 3020 	strh.w	r3, [sp, #32]
        sb_area_tmp.y1 += page->coords.y1;
 80190f8:	8a7b      	ldrh	r3, [r7, #18]
 80190fa:	4419      	add	r1, r3
 80190fc:	f8ad 1022 	strh.w	r1, [sp, #34]	; 0x22
        sb_area_tmp.x2 += page->coords.x1;
 8019100:	f8bd 1024 	ldrh.w	r1, [sp, #36]	; 0x24
 8019104:	440a      	add	r2, r1
 8019106:	f8ad 2024 	strh.w	r2, [sp, #36]	; 0x24
        sb_area_tmp.y2 += page->coords.y1;
 801910a:	f8bd 2026 	ldrh.w	r2, [sp, #38]	; 0x26
        lv_inv_area(disp, &sb_area_tmp);
 801910e:	a908      	add	r1, sp, #32
        sb_area_tmp.y2 += page->coords.y1;
 8019110:	4413      	add	r3, r2
        lv_inv_area(disp, &sb_area_tmp);
 8019112:	4658      	mov	r0, fp
        sb_area_tmp.y2 += page->coords.y1;
 8019114:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
        lv_inv_area(disp, &sb_area_tmp);
 8019118:	f7f7 fb69 	bl	80107ee <lv_inv_area>
    if(ext->sb.ver_draw != 0) {
 801911c:	7f23      	ldrb	r3, [r4, #28]
 801911e:	079b      	lsls	r3, r3, #30
 8019120:	f57f af7c 	bpl.w	801901c <lv_page_sb_refresh+0x110>
        lv_area_copy(&sb_area_tmp, &ext->sb.ver_area);
 8019124:	f104 0114 	add.w	r1, r4, #20
 8019128:	a808      	add	r0, sp, #32
 801912a:	f7ff fed9 	bl	8018ee0 <lv_area_copy>
        sb_area_tmp.x1 += page->coords.x1;
 801912e:	8a3a      	ldrh	r2, [r7, #16]
 8019130:	f8bd 3020 	ldrh.w	r3, [sp, #32]
        sb_area_tmp.y1 += page->coords.y1;
 8019134:	f8bd 1022 	ldrh.w	r1, [sp, #34]	; 0x22
        sb_area_tmp.x1 += page->coords.x1;
 8019138:	4413      	add	r3, r2
 801913a:	f8ad 3020 	strh.w	r3, [sp, #32]
        sb_area_tmp.y1 += page->coords.y1;
 801913e:	8a7b      	ldrh	r3, [r7, #18]
 8019140:	4419      	add	r1, r3
 8019142:	f8ad 1022 	strh.w	r1, [sp, #34]	; 0x22
        sb_area_tmp.x2 += page->coords.x1;
 8019146:	f8bd 1024 	ldrh.w	r1, [sp, #36]	; 0x24
 801914a:	440a      	add	r2, r1
 801914c:	f8ad 2024 	strh.w	r2, [sp, #36]	; 0x24
        sb_area_tmp.y2 += page->coords.y1;
 8019150:	f8bd 2026 	ldrh.w	r2, [sp, #38]	; 0x26
        lv_inv_area(disp, &sb_area_tmp);
 8019154:	a908      	add	r1, sp, #32
        sb_area_tmp.y2 += page->coords.y1;
 8019156:	4413      	add	r3, r2
        lv_inv_area(disp, &sb_area_tmp);
 8019158:	4658      	mov	r0, fp
        sb_area_tmp.y2 += page->coords.y1;
 801915a:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
        lv_inv_area(disp, &sb_area_tmp);
 801915e:	f7f7 fb46 	bl	80107ee <lv_inv_area>
 8019162:	e75b      	b.n	801901c <lv_page_sb_refresh+0x110>
            (obj_w * (obj_w - (2 * sb_hor_pad))) / (scrl_w + style->body.padding.left + style->body.padding.right);
 8019164:	1aee      	subs	r6, r5, r3
 8019166:	9307      	str	r3, [sp, #28]
 8019168:	9b01      	ldr	r3, [sp, #4]
 801916a:	441a      	add	r2, r3
 801916c:	440a      	add	r2, r1
 801916e:	436e      	muls	r6, r5
 8019170:	fb96 f6f2 	sdiv	r6, r6, r2
        size_tmp =
 8019174:	b236      	sxth	r6, r6
 8019176:	2e03      	cmp	r6, #3
 8019178:	bfb8      	it	lt
 801917a:	2603      	movlt	r6, #3
        lv_area_set_width(&ext->sb.hor_area, size_tmp);
 801917c:	f104 0a0c 	add.w	sl, r4, #12
 8019180:	4631      	mov	r1, r6
 8019182:	4650      	mov	r0, sl
 8019184:	f7fc f88b 	bl	801529e <lv_area_set_width>
                            (-(lv_obj_get_x(scrl) - style->body.padding.left) * (obj_w - size_tmp - 2 * sb_hor_pad)) /
 8019188:	f9b8 301a 	ldrsh.w	r3, [r8, #26]
 801918c:	9800      	ldr	r0, [sp, #0]
 801918e:	9306      	str	r3, [sp, #24]
 8019190:	f7f7 f8ed 	bl	801036e <lv_obj_get_x>
                        obj_h - ext->sb.style->body.padding.inner - ext->sb.style->body.padding.bottom);
 8019194:	68a1      	ldr	r1, [r4, #8]
                            (-(lv_obj_get_x(scrl) - style->body.padding.left) * (obj_w - size_tmp - 2 * sb_hor_pad)) /
 8019196:	9b07      	ldr	r3, [sp, #28]
                        obj_h - ext->sb.style->body.padding.inner - ext->sb.style->body.padding.bottom);
 8019198:	8bca      	ldrh	r2, [r1, #30]
 801919a:	8b09      	ldrh	r1, [r1, #24]
 801919c:	eba9 0202 	sub.w	r2, r9, r2
 80191a0:	1a52      	subs	r2, r2, r1
                            (-(lv_obj_get_x(scrl) - style->body.padding.left) * (obj_w - size_tmp - 2 * sb_hor_pad)) /
 80191a2:	9906      	ldr	r1, [sp, #24]
 80191a4:	1bae      	subs	r6, r5, r6
 80191a6:	1af3      	subs	r3, r6, r3
 80191a8:	1a08      	subs	r0, r1, r0
 80191aa:	4358      	muls	r0, r3
                                (scrl_w + style->body.padding.left + style->body.padding.right - obj_w),
 80191ac:	9901      	ldr	r1, [sp, #4]
 80191ae:	f9b8 301a 	ldrsh.w	r3, [r8, #26]
 80191b2:	440b      	add	r3, r1
 80191b4:	f9b8 101c 	ldrsh.w	r1, [r8, #28]
 80191b8:	440b      	add	r3, r1
 80191ba:	1b5b      	subs	r3, r3, r5
                            (-(lv_obj_get_x(scrl) - style->body.padding.left) * (obj_w - size_tmp - 2 * sb_hor_pad)) /
 80191bc:	fb90 f0f3 	sdiv	r0, r0, r3
                        sb_hor_pad +
 80191c0:	9b03      	ldr	r3, [sp, #12]
 80191c2:	4403      	add	r3, r0
        lv_area_set_pos(&ext->sb.hor_area,
 80191c4:	b212      	sxth	r2, r2
 80191c6:	b219      	sxth	r1, r3
 80191c8:	4650      	mov	r0, sl
 80191ca:	f7fc f872 	bl	80152b2 <lv_area_set_pos>
        if(ext->sb.mode == LV_SB_MODE_AUTO || ext->sb.mode == LV_SB_MODE_DRAG) ext->sb.hor_draw = 1;
 80191ce:	7f23      	ldrb	r3, [r4, #28]
 80191d0:	f003 0218 	and.w	r2, r3, #24
 80191d4:	2a08      	cmp	r2, #8
 80191d6:	f47f af51 	bne.w	801907c <lv_page_sb_refresh+0x170>
 80191da:	f043 0301 	orr.w	r3, r3, #1
 80191de:	e74c      	b.n	801907a <lv_page_sb_refresh+0x16e>
 80191e0:	9204      	str	r2, [sp, #16]
            (obj_h * (obj_h - (2 * sb_ver_pad))) / (scrl_h + style->body.padding.top + style->body.padding.bottom);
 80191e2:	9a02      	ldr	r2, [sp, #8]
 80191e4:	eba9 060a 	sub.w	r6, r9, sl
 80191e8:	4413      	add	r3, r2
 80191ea:	440b      	add	r3, r1
 80191ec:	fb09 f606 	mul.w	r6, r9, r6
 80191f0:	fb96 f6f3 	sdiv	r6, r6, r3
        size_tmp =
 80191f4:	b236      	sxth	r6, r6
 80191f6:	2e03      	cmp	r6, #3
 80191f8:	bfb8      	it	lt
 80191fa:	2603      	movlt	r6, #3
        lv_area_set_height(&ext->sb.ver_area, size_tmp);
 80191fc:	f104 0314 	add.w	r3, r4, #20
 8019200:	4631      	mov	r1, r6
 8019202:	4618      	mov	r0, r3
 8019204:	9303      	str	r3, [sp, #12]
 8019206:	f7fc f84f 	bl	80152a8 <lv_area_set_height>
                        obj_w - ext->sb.style->body.padding.inner - ext->sb.style->body.padding.right,
 801920a:	68a0      	ldr	r0, [r4, #8]
 801920c:	8bc1      	ldrh	r1, [r0, #30]
                        sb_ver_pad + (-(lv_obj_get_y(scrl) - ext->sb.style->body.padding.bottom) *
 801920e:	f9b0 3018 	ldrsh.w	r3, [r0, #24]
 8019212:	9301      	str	r3, [sp, #4]
                        obj_w - ext->sb.style->body.padding.inner - ext->sb.style->body.padding.right,
 8019214:	1a6d      	subs	r5, r5, r1
 8019216:	8b81      	ldrh	r1, [r0, #28]
                        sb_ver_pad + (-(lv_obj_get_y(scrl) - ext->sb.style->body.padding.bottom) *
 8019218:	9800      	ldr	r0, [sp, #0]
                        obj_w - ext->sb.style->body.padding.inner - ext->sb.style->body.padding.right,
 801921a:	1a6d      	subs	r5, r5, r1
                        sb_ver_pad + (-(lv_obj_get_y(scrl) - ext->sb.style->body.padding.bottom) *
 801921c:	f7f7 f8ad 	bl	801037a <lv_obj_get_y>
 8019220:	9b01      	ldr	r3, [sp, #4]
                                         (scrl_h + style->body.padding.top + style->body.padding.bottom - obj_h));
 8019222:	f9b8 1016 	ldrsh.w	r1, [r8, #22]
                        sb_ver_pad + (-(lv_obj_get_y(scrl) - ext->sb.style->body.padding.bottom) *
 8019226:	9a04      	ldr	r2, [sp, #16]
                                      (obj_h - size_tmp - 2 * sb_ver_pad)) /
 8019228:	eba9 0606 	sub.w	r6, r9, r6
                        sb_ver_pad + (-(lv_obj_get_y(scrl) - ext->sb.style->body.padding.bottom) *
 801922c:	1a18      	subs	r0, r3, r0
                                      (obj_h - size_tmp - 2 * sb_ver_pad)) /
 801922e:	eba6 0a0a 	sub.w	sl, r6, sl
                                         (scrl_h + style->body.padding.top + style->body.padding.bottom - obj_h));
 8019232:	9b02      	ldr	r3, [sp, #8]
                        sb_ver_pad + (-(lv_obj_get_y(scrl) - ext->sb.style->body.padding.bottom) *
 8019234:	fb00 fa0a 	mul.w	sl, r0, sl
                                         (scrl_h + style->body.padding.top + style->body.padding.bottom - obj_h));
 8019238:	f9b8 0018 	ldrsh.w	r0, [r8, #24]
 801923c:	4419      	add	r1, r3
 801923e:	4401      	add	r1, r0
        lv_area_set_pos(&ext->sb.ver_area,
 8019240:	9b03      	ldr	r3, [sp, #12]
                                         (scrl_h + style->body.padding.top + style->body.padding.bottom - obj_h));
 8019242:	eba1 0909 	sub.w	r9, r1, r9
        lv_area_set_pos(&ext->sb.ver_area,
 8019246:	b22d      	sxth	r5, r5
                                      (obj_h - size_tmp - 2 * sb_ver_pad)) /
 8019248:	fb9a f9f9 	sdiv	r9, sl, r9
                        sb_ver_pad + (-(lv_obj_get_y(scrl) - ext->sb.style->body.padding.bottom) *
 801924c:	444a      	add	r2, r9
        lv_area_set_pos(&ext->sb.ver_area,
 801924e:	b212      	sxth	r2, r2
 8019250:	4618      	mov	r0, r3
 8019252:	4629      	mov	r1, r5
 8019254:	f7fc f82d 	bl	80152b2 <lv_area_set_pos>
        if(ext->sb.mode == LV_SB_MODE_AUTO || ext->sb.mode == LV_SB_MODE_DRAG) ext->sb.ver_draw = 1;
 8019258:	7f23      	ldrb	r3, [r4, #28]
 801925a:	f003 0218 	and.w	r2, r3, #24
 801925e:	2a08      	cmp	r2, #8
 8019260:	f47f af3a 	bne.w	80190d8 <lv_page_sb_refresh+0x1cc>
 8019264:	f043 0302 	orr.w	r3, r3, #2
 8019268:	e735      	b.n	80190d6 <lv_page_sb_refresh+0x1ca>

0801926a <edge_flash_anim_end>:
    ext->edge_flash.state = v;
    lv_obj_invalidate(page);
}

static void edge_flash_anim_end(lv_anim_t * a)
{
 801926a:	b510      	push	{r4, lr}
 801926c:	4604      	mov	r4, r0
    lv_page_ext_t * ext       = lv_obj_get_ext_attr(a->var);
 801926e:	6800      	ldr	r0, [r0, #0]
 8019270:	f7f7 f985 	bl	801057e <lv_obj_get_ext_attr>
    ext->edge_flash.top_ip    = 0;
 8019274:	f890 3028 	ldrb.w	r3, [r0, #40]	; 0x28
    ext->edge_flash.bottom_ip = 0;
    ext->edge_flash.left_ip   = 0;
    ext->edge_flash.right_ip  = 0;
 8019278:	f003 03e9 	and.w	r3, r3, #233	; 0xe9
 801927c:	f36f 03c3 	bfc	r3, #3, #1
 8019280:	f880 3028 	strb.w	r3, [r0, #40]	; 0x28
    lv_obj_invalidate(a->var);
 8019284:	6820      	ldr	r0, [r4, #0]
}
 8019286:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    lv_obj_invalidate(a->var);
 801928a:	f7f6 babf 	b.w	800f80c <lv_obj_invalidate>

0801928e <edge_flash_anim>:
{
 801928e:	b538      	push	{r3, r4, r5, lr}
 8019290:	4604      	mov	r4, r0
 8019292:	460d      	mov	r5, r1
    lv_page_ext_t * ext   = lv_obj_get_ext_attr(page);
 8019294:	f7f7 f973 	bl	801057e <lv_obj_get_ext_attr>
    ext->edge_flash.state = v;
 8019298:	8405      	strh	r5, [r0, #32]
    lv_obj_invalidate(page);
 801929a:	4620      	mov	r0, r4
}
 801929c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    lv_obj_invalidate(page);
 80192a0:	f7f6 bab4 	b.w	800f80c <lv_obj_invalidate>

080192a4 <lv_scrl_design>:
    if(mode == LV_DESIGN_COVER_CHK) {
 80192a4:	2a02      	cmp	r2, #2
{
 80192a6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80192aa:	4604      	mov	r4, r0
 80192ac:	4689      	mov	r9, r1
    if(mode == LV_DESIGN_COVER_CHK) {
 80192ae:	d104      	bne.n	80192ba <lv_scrl_design+0x16>
        return ancestor_design(scrl, mask, mode);
 80192b0:	4b1f      	ldr	r3, [pc, #124]	; (8019330 <lv_scrl_design+0x8c>)
}
 80192b2:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
        return ancestor_design(scrl, mask, mode);
 80192b6:	681b      	ldr	r3, [r3, #0]
 80192b8:	4718      	bx	r3
    } else if(mode == LV_DESIGN_DRAW_MAIN) {
 80192ba:	bb9a      	cbnz	r2, 8019324 <lv_scrl_design+0x80>
        const lv_style_t * style_scrl_ori = lv_obj_get_style(scrl);
 80192bc:	f7f7 f874 	bl	80103a8 <lv_obj_get_style>
 80192c0:	4605      	mov	r5, r0
        lv_obj_t * page                   = lv_obj_get_parent(scrl);
 80192c2:	4620      	mov	r0, r4
 80192c4:	f7f6 ffe2 	bl	801028c <lv_obj_get_parent>
 80192c8:	4607      	mov	r7, r0
        const lv_style_t * style_page     = lv_obj_get_style(page);
 80192ca:	f7f7 f86d 	bl	80103a8 <lv_obj_get_style>
 80192ce:	4680      	mov	r8, r0
        lv_group_t * g                    = lv_obj_get_group(page);
 80192d0:	4638      	mov	r0, r7
 80192d2:	f7f7 f95a 	bl	801058a <lv_obj_get_group>
        if((style_page->body.opa == LV_OPA_TRANSP) &&
 80192d6:	f898 3008 	ldrb.w	r3, [r8, #8]
        lv_group_t * g                    = lv_obj_get_group(page);
 80192da:	4606      	mov	r6, r0
        if((style_page->body.opa == LV_OPA_TRANSP) &&
 80192dc:	b9c3      	cbnz	r3, 8019310 <lv_scrl_design+0x6c>
 80192de:	f9b8 300c 	ldrsh.w	r3, [r8, #12]
 80192e2:	b9ab      	cbnz	r3, 8019310 <lv_scrl_design+0x6c>
            if(lv_group_get_focused(g) == page) {
 80192e4:	f7f6 f8aa 	bl	800f43c <lv_group_get_focused>
 80192e8:	4287      	cmp	r7, r0
 80192ea:	d111      	bne.n	8019310 <lv_scrl_design+0x6c>
                style_mod = lv_group_mod_style(g, style_scrl_ori);
 80192ec:	4629      	mov	r1, r5
 80192ee:	4630      	mov	r0, r6
 80192f0:	f7f6 f891 	bl	800f416 <lv_group_mod_style>
                if((style_mod->body.opa == LV_OPA_TRANSP) && style_mod->body.border.width == 0) {
 80192f4:	7a03      	ldrb	r3, [r0, #8]
 80192f6:	b953      	cbnz	r3, 801930e <lv_scrl_design+0x6a>
 80192f8:	f9b0 300c 	ldrsh.w	r3, [r0, #12]
 80192fc:	b93b      	cbnz	r3, 801930e <lv_scrl_design+0x6a>
                    style_mod->body.opa          = LV_OPA_50;
 80192fe:	237f      	movs	r3, #127	; 0x7f
 8019300:	7203      	strb	r3, [r0, #8]
                    style_mod->body.border.width = 1;
 8019302:	2301      	movs	r3, #1
 8019304:	8183      	strh	r3, [r0, #12]
                    style_mod                    = lv_group_mod_style(g, style_mod);
 8019306:	4601      	mov	r1, r0
 8019308:	4630      	mov	r0, r6
 801930a:	f7f6 f884 	bl	800f416 <lv_group_mod_style>
                scrl->style_p = style_mod; /*Temporally change the style to the activated */
 801930e:	62a0      	str	r0, [r4, #40]	; 0x28
        ancestor_design(scrl, mask, mode);
 8019310:	4b07      	ldr	r3, [pc, #28]	; (8019330 <lv_scrl_design+0x8c>)
 8019312:	2200      	movs	r2, #0
 8019314:	681b      	ldr	r3, [r3, #0]
 8019316:	4649      	mov	r1, r9
 8019318:	4620      	mov	r0, r4
 801931a:	4798      	blx	r3
        scrl->style_p = style_scrl_ori; /*Revert the style*/
 801931c:	62a5      	str	r5, [r4, #40]	; 0x28
}
 801931e:	2001      	movs	r0, #1
 8019320:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    } else if(mode == LV_DESIGN_DRAW_POST) {
 8019324:	2a01      	cmp	r2, #1
 8019326:	d1fa      	bne.n	801931e <lv_scrl_design+0x7a>
        ancestor_design(scrl, mask, mode);
 8019328:	4b01      	ldr	r3, [pc, #4]	; (8019330 <lv_scrl_design+0x8c>)
 801932a:	681b      	ldr	r3, [r3, #0]
 801932c:	4798      	blx	r3
 801932e:	e7f6      	b.n	801931e <lv_scrl_design+0x7a>
 8019330:	2000b254 	.word	0x2000b254

08019334 <lv_page_set_sb_mode>:
{
 8019334:	b538      	push	{r3, r4, r5, lr}
 8019336:	460d      	mov	r5, r1
 8019338:	4604      	mov	r4, r0
    lv_page_ext_t * ext = lv_obj_get_ext_attr(page);
 801933a:	f7f7 f920 	bl	801057e <lv_obj_get_ext_attr>
    if(ext->sb.mode == sb_mode) return;
 801933e:	7f03      	ldrb	r3, [r0, #28]
 8019340:	f3c3 0282 	ubfx	r2, r3, #2, #3
 8019344:	42aa      	cmp	r2, r5
 8019346:	d021      	beq.n	801938c <lv_page_set_sb_mode+0x58>
    if(sb_mode == LV_SB_MODE_HIDE)
 8019348:	2d04      	cmp	r5, #4
 801934a:	d112      	bne.n	8019372 <lv_page_set_sb_mode+0x3e>
        ext->sb.mode |= LV_SB_MODE_HIDE; /*Set the hidden flag*/
 801934c:	f042 0204 	orr.w	r2, r2, #4
        ext->sb.mode &= (~LV_SB_MODE_HIDE); /*Clear the hidden flag*/
 8019350:	f362 0384 	bfi	r3, r2, #2, #3
        ext->sb.mode = sb_mode;
 8019354:	7703      	strb	r3, [r0, #28]
    ext->sb.hor_draw = 0;
 8019356:	7f03      	ldrb	r3, [r0, #28]
    ext->sb.ver_draw = 0;
 8019358:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 801935c:	f36f 0341 	bfc	r3, #1, #1
 8019360:	7703      	strb	r3, [r0, #28]
    lv_page_sb_refresh(page);
 8019362:	4620      	mov	r0, r4
 8019364:	f7ff fdd2 	bl	8018f0c <lv_page_sb_refresh>
    lv_obj_invalidate(page);
 8019368:	4620      	mov	r0, r4
}
 801936a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    lv_obj_invalidate(page);
 801936e:	f7f6 ba4d 	b.w	800f80c <lv_obj_invalidate>
    else if(sb_mode == LV_SB_MODE_UNHIDE)
 8019372:	2d05      	cmp	r5, #5
 8019374:	d102      	bne.n	801937c <lv_page_set_sb_mode+0x48>
        ext->sb.mode &= (~LV_SB_MODE_HIDE); /*Clear the hidden flag*/
 8019376:	f002 0203 	and.w	r2, r2, #3
 801937a:	e7e9      	b.n	8019350 <lv_page_set_sb_mode+0x1c>
        if(ext->sb.mode & LV_SB_MODE_HIDE) sb_mode |= LV_SB_MODE_HIDE;
 801937c:	0753      	lsls	r3, r2, #29
        ext->sb.mode = sb_mode;
 801937e:	7f03      	ldrb	r3, [r0, #28]
        if(ext->sb.mode & LV_SB_MODE_HIDE) sb_mode |= LV_SB_MODE_HIDE;
 8019380:	bf48      	it	mi
 8019382:	f045 0504 	orrmi.w	r5, r5, #4
        ext->sb.mode = sb_mode;
 8019386:	f365 0384 	bfi	r3, r5, #2, #3
 801938a:	e7e3      	b.n	8019354 <lv_page_set_sb_mode+0x20>
 801938c:	bd38      	pop	{r3, r4, r5, pc}

0801938e <lv_page_set_anim_time>:
{
 801938e:	b510      	push	{r4, lr}
 8019390:	460c      	mov	r4, r1
    lv_page_ext_t * ext = lv_obj_get_ext_attr(page);
 8019392:	f7f7 f8f4 	bl	801057e <lv_obj_get_ext_attr>
    ext->anim_time      = anim_time;
 8019396:	8584      	strh	r4, [r0, #44]	; 0x2c
 8019398:	bd10      	pop	{r4, pc}

0801939a <lv_page_set_style>:
{
 801939a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801939c:	4606      	mov	r6, r0
 801939e:	460f      	mov	r7, r1
 80193a0:	4615      	mov	r5, r2
    lv_page_ext_t * ext = lv_obj_get_ext_attr(page);
 80193a2:	f7f7 f8ec 	bl	801057e <lv_obj_get_ext_attr>
 80193a6:	4604      	mov	r4, r0
    switch(type) {
 80193a8:	2f03      	cmp	r7, #3
 80193aa:	d825      	bhi.n	80193f8 <lv_page_set_style+0x5e>
 80193ac:	e8df f007 	tbb	[pc, r7]
 80193b0:	230b0802 	.word	0x230b0802
        case LV_PAGE_STYLE_BG: lv_obj_set_style(page, style); break;
 80193b4:	4629      	mov	r1, r5
 80193b6:	4630      	mov	r0, r6
}
 80193b8:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
        case LV_PAGE_STYLE_SCRL: lv_obj_set_style(ext->scrl, style); break;
 80193bc:	f7f6 bf8a 	b.w	80102d4 <lv_obj_set_style>
 80193c0:	4629      	mov	r1, r5
 80193c2:	6840      	ldr	r0, [r0, #4]
 80193c4:	e7f8      	b.n	80193b8 <lv_page_set_style+0x1e>
            ext->sb.style = style;
 80193c6:	6085      	str	r5, [r0, #8]
            lv_area_set_height(&ext->sb.hor_area, ext->sb.style->body.padding.inner);
 80193c8:	f9b5 101e 	ldrsh.w	r1, [r5, #30]
 80193cc:	300c      	adds	r0, #12
 80193ce:	f7fb ff6b 	bl	80152a8 <lv_area_set_height>
            lv_area_set_width(&ext->sb.ver_area, ext->sb.style->body.padding.inner);
 80193d2:	68a3      	ldr	r3, [r4, #8]
 80193d4:	f104 0014 	add.w	r0, r4, #20
 80193d8:	f9b3 101e 	ldrsh.w	r1, [r3, #30]
 80193dc:	f7fb ff5f 	bl	801529e <lv_area_set_width>
            lv_page_sb_refresh(page);
 80193e0:	4630      	mov	r0, r6
 80193e2:	f7ff fd93 	bl	8018f0c <lv_page_sb_refresh>
            lv_obj_refresh_ext_draw_pad(page);
 80193e6:	4630      	mov	r0, r6
 80193e8:	f7f6 fed9 	bl	801019e <lv_obj_refresh_ext_draw_pad>
            lv_obj_invalidate(page);
 80193ec:	4630      	mov	r0, r6
}
 80193ee:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
            lv_obj_invalidate(page);
 80193f2:	f7f6 ba0b 	b.w	800f80c <lv_obj_invalidate>
        case LV_PAGE_STYLE_EDGE_FLASH: ext->edge_flash.style = style; break;
 80193f6:	6245      	str	r5, [r0, #36]	; 0x24
 80193f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080193fa <lv_page_get_scrl>:
{
 80193fa:	b508      	push	{r3, lr}
    lv_page_ext_t * ext = lv_obj_get_ext_attr(page);
 80193fc:	f7f7 f8bf 	bl	801057e <lv_obj_get_ext_attr>
}
 8019400:	6840      	ldr	r0, [r0, #4]
 8019402:	bd08      	pop	{r3, pc}

08019404 <lv_page_get_anim_time>:
{
 8019404:	b508      	push	{r3, lr}
    lv_page_ext_t * ext = lv_obj_get_ext_attr(page);
 8019406:	f7f7 f8ba 	bl	801057e <lv_obj_get_ext_attr>
}
 801940a:	8d80      	ldrh	r0, [r0, #44]	; 0x2c
 801940c:	bd08      	pop	{r3, pc}

0801940e <lv_page_get_style>:
{
 801940e:	b538      	push	{r3, r4, r5, lr}
 8019410:	460c      	mov	r4, r1
 8019412:	4605      	mov	r5, r0
    lv_page_ext_t * ext      = lv_obj_get_ext_attr(page);
 8019414:	f7f7 f8b3 	bl	801057e <lv_obj_get_ext_attr>
    switch(type) {
 8019418:	2c03      	cmp	r4, #3
 801941a:	d80e      	bhi.n	801943a <lv_page_get_style+0x2c>
 801941c:	e8df f004 	tbb	[pc, r4]
 8019420:	0b090702 	.word	0x0b090702
        case LV_PAGE_STYLE_BG: style = lv_obj_get_style(page); break;
 8019424:	4628      	mov	r0, r5
}
 8019426:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        case LV_PAGE_STYLE_SCRL: style = lv_obj_get_style(ext->scrl); break;
 801942a:	f7f6 bfbd 	b.w	80103a8 <lv_obj_get_style>
 801942e:	6840      	ldr	r0, [r0, #4]
 8019430:	e7f9      	b.n	8019426 <lv_page_get_style+0x18>
        case LV_PAGE_STYLE_SB: style = ext->sb.style; break;
 8019432:	6880      	ldr	r0, [r0, #8]
 8019434:	bd38      	pop	{r3, r4, r5, pc}
        case LV_PAGE_STYLE_EDGE_FLASH: style = ext->edge_flash.style; break;
 8019436:	6a40      	ldr	r0, [r0, #36]	; 0x24
 8019438:	bd38      	pop	{r3, r4, r5, pc}
        default: style = NULL; break;
 801943a:	2000      	movs	r0, #0
}
 801943c:	bd38      	pop	{r3, r4, r5, pc}
	...

08019440 <lv_page_create>:
{
 8019440:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 8019444:	4681      	mov	r9, r0
 8019446:	460e      	mov	r6, r1
    lv_obj_t * new_page = lv_cont_create(par, copy);
 8019448:	f7fd fb60 	bl	8016b0c <lv_cont_create>
    lv_mem_assert(new_page);
 801944c:	4604      	mov	r4, r0
 801944e:	b900      	cbnz	r0, 8019452 <lv_page_create+0x12>
 8019450:	e7fe      	b.n	8019450 <lv_page_create+0x10>
    if(ancestor_signal == NULL) ancestor_signal = lv_obj_get_signal_cb(new_page);
 8019452:	4d6c      	ldr	r5, [pc, #432]	; (8019604 <lv_page_create+0x1c4>)
 8019454:	682b      	ldr	r3, [r5, #0]
 8019456:	b913      	cbnz	r3, 801945e <lv_page_create+0x1e>
 8019458:	f7f7 f88d 	bl	8010576 <lv_obj_get_signal_cb>
 801945c:	6028      	str	r0, [r5, #0]
    if(ancestor_design == NULL) ancestor_design = lv_obj_get_design_cb(new_page);
 801945e:	4d6a      	ldr	r5, [pc, #424]	; (8019608 <lv_page_create+0x1c8>)
 8019460:	682b      	ldr	r3, [r5, #0]
 8019462:	b91b      	cbnz	r3, 801946c <lv_page_create+0x2c>
 8019464:	4620      	mov	r0, r4
 8019466:	f7f7 f888 	bl	801057a <lv_obj_get_design_cb>
 801946a:	6028      	str	r0, [r5, #0]
    lv_page_ext_t * ext = lv_obj_allocate_ext_attr(new_page, sizeof(lv_page_ext_t));
 801946c:	2130      	movs	r1, #48	; 0x30
 801946e:	4620      	mov	r0, r4
 8019470:	f7f6 f99e 	bl	800f7b0 <lv_obj_allocate_ext_attr>
    lv_mem_assert(ext);
 8019474:	4605      	mov	r5, r0
 8019476:	b900      	cbnz	r0, 801947a <lv_page_create+0x3a>
 8019478:	e7fe      	b.n	8019478 <lv_page_create+0x38>
    ext->edge_flash.enabled   = 0;
 801947a:	f890 2028 	ldrb.w	r2, [r0, #40]	; 0x28
    ext->sb.hor_draw = 0;
 801947e:	7f03      	ldrb	r3, [r0, #28]
    ext->sb.style    = &lv_style_pretty;
 8019480:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 801962c <lv_page_create+0x1ec>
 8019484:	f8c0 8008 	str.w	r8, [r0, #8]
    ext->scrl        = NULL;
 8019488:	2700      	movs	r7, #0
    ext->edge_flash.right_ip  = 0;
 801948a:	f002 02e8 	and.w	r2, r2, #232	; 0xe8
 801948e:	f367 02c3 	bfi	r2, r7, #3, #1
    ext->sb.mode     = LV_SB_MODE_AUTO;
 8019492:	f003 03fc 	and.w	r3, r3, #252	; 0xfc
 8019496:	f04f 0a03 	mov.w	sl, #3
    ext->edge_flash.right_ip  = 0;
 801949a:	f880 2028 	strb.w	r2, [r0, #40]	; 0x28
    ext->scroll_prop    = 0;
 801949e:	f890 202e 	ldrb.w	r2, [r0, #46]	; 0x2e
    ext->scrl        = NULL;
 80194a2:	6047      	str	r7, [r0, #4]
    ext->sb.mode     = LV_SB_MODE_AUTO;
 80194a4:	f36a 0384 	bfi	r3, sl, #2, #3
 80194a8:	7703      	strb	r3, [r0, #28]
    ext->scroll_prop_ip = 0;
 80194aa:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
    ext->edge_flash.style     = &lv_style_plain_color;
 80194ae:	4b57      	ldr	r3, [pc, #348]	; (801960c <lv_page_create+0x1cc>)
 80194b0:	6243      	str	r3, [r0, #36]	; 0x24
    ext->scroll_prop_ip = 0;
 80194b2:	f367 0241 	bfi	r2, r7, #1, #1
    ext->anim_time            = LV_PAGE_DEF_ANIM_TIME;
 80194b6:	f44f 73c8 	mov.w	r3, #400	; 0x190
    ext->edge_flash.state     = 0;
 80194ba:	8407      	strh	r7, [r0, #32]
    ext->anim_time            = LV_PAGE_DEF_ANIM_TIME;
 80194bc:	8583      	strh	r3, [r0, #44]	; 0x2c
    ext->scroll_prop_ip = 0;
 80194be:	f880 202e 	strb.w	r2, [r0, #46]	; 0x2e
    if(copy == NULL) {
 80194c2:	2e00      	cmp	r6, #0
 80194c4:	d164      	bne.n	8019590 <lv_page_create+0x150>
        ext->scrl = lv_cont_create(new_page, NULL);
 80194c6:	4631      	mov	r1, r6
 80194c8:	4620      	mov	r0, r4
 80194ca:	f7fd fb1f 	bl	8016b0c <lv_cont_create>
        lv_obj_set_signal_cb(ext->scrl, lv_page_scrollable_signal);
 80194ce:	4950      	ldr	r1, [pc, #320]	; (8019610 <lv_page_create+0x1d0>)
        ext->scrl = lv_cont_create(new_page, NULL);
 80194d0:	6068      	str	r0, [r5, #4]
        lv_obj_set_signal_cb(ext->scrl, lv_page_scrollable_signal);
 80194d2:	f7f6 f969 	bl	800f7a8 <lv_obj_set_signal_cb>
        lv_obj_set_design_cb(ext->scrl, lv_scrl_design);
 80194d6:	6868      	ldr	r0, [r5, #4]
 80194d8:	494e      	ldr	r1, [pc, #312]	; (8019614 <lv_page_create+0x1d4>)
 80194da:	f7f6 f967 	bl	800f7ac <lv_obj_set_design_cb>
        lv_obj_set_drag(ext->scrl, true);
 80194de:	6868      	ldr	r0, [r5, #4]
 80194e0:	2101      	movs	r1, #1
 80194e2:	f7f6 f894 	bl	800f60e <lv_obj_set_drag>
        lv_obj_set_drag_throw(ext->scrl, true);
 80194e6:	6868      	ldr	r0, [r5, #4]
 80194e8:	2101      	movs	r1, #1
 80194ea:	f7f6 f89e 	bl	800f62a <lv_obj_set_drag_throw>
        lv_obj_set_protect(ext->scrl, LV_PROTECT_PARENT | LV_PROTECT_PRESS_LOST);
 80194ee:	6868      	ldr	r0, [r5, #4]
 80194f0:	2112      	movs	r1, #18
 80194f2:	f7f6 f8a1 	bl	800f638 <lv_obj_set_protect>
        lv_cont_set_fit4(ext->scrl, LV_FIT_FILL, LV_FIT_FILL, LV_FIT_FILL, LV_FIT_FILL);
 80194f6:	f8cd a000 	str.w	sl, [sp]
 80194fa:	4653      	mov	r3, sl
 80194fc:	4652      	mov	r2, sl
 80194fe:	6868      	ldr	r0, [r5, #4]
 8019500:	4651      	mov	r1, sl
 8019502:	f7fd fb7a 	bl	8016bfa <lv_cont_set_fit4>
        lv_obj_set_event_cb(ext->scrl, scrl_def_event_cb); /*Propagate some event to the background
 8019506:	6868      	ldr	r0, [r5, #4]
 8019508:	4943      	ldr	r1, [pc, #268]	; (8019618 <lv_page_create+0x1d8>)
 801950a:	f7f6 f8a2 	bl	800f652 <lv_obj_set_event_cb>
        lv_obj_set_signal_cb(new_page, lv_page_signal);
 801950e:	4943      	ldr	r1, [pc, #268]	; (801961c <lv_page_create+0x1dc>)
 8019510:	4620      	mov	r0, r4
 8019512:	f7f6 f949 	bl	800f7a8 <lv_obj_set_signal_cb>
        lv_obj_set_design_cb(new_page, lv_page_design);
 8019516:	4942      	ldr	r1, [pc, #264]	; (8019620 <lv_page_create+0x1e0>)
 8019518:	4620      	mov	r0, r4
 801951a:	f7f6 f947 	bl	800f7ac <lv_obj_set_design_cb>
        lv_page_set_sb_mode(new_page, ext->sb.mode);
 801951e:	7f29      	ldrb	r1, [r5, #28]
 8019520:	4620      	mov	r0, r4
 8019522:	f3c1 0182 	ubfx	r1, r1, #2, #3
 8019526:	f7ff ff05 	bl	8019334 <lv_page_set_sb_mode>
        lv_theme_t * th = lv_theme_get_current();
 801952a:	f001 f9ad 	bl	801a888 <lv_theme_get_current>
        if(th) {
 801952e:	4605      	mov	r5, r0
 8019530:	b310      	cbz	r0, 8019578 <lv_page_create+0x138>
            if(par == NULL) { /*Different styles if it is screen*/
 8019532:	f1b9 0f00 	cmp.w	r9, #0
 8019536:	d116      	bne.n	8019566 <lv_page_create+0x126>
                lv_page_set_style(new_page, LV_PAGE_STYLE_BG, th->style.bg);
 8019538:	6842      	ldr	r2, [r0, #4]
 801953a:	4649      	mov	r1, r9
 801953c:	4620      	mov	r0, r4
 801953e:	f7ff ff2c 	bl	801939a <lv_page_set_style>
                lv_page_set_style(new_page, LV_PAGE_STYLE_SCRL, &lv_style_transp);
 8019542:	4a38      	ldr	r2, [pc, #224]	; (8019624 <lv_page_create+0x1e4>)
                lv_page_set_style(new_page, LV_PAGE_STYLE_SCRL, th->style.page.scrl);
 8019544:	2101      	movs	r1, #1
 8019546:	4620      	mov	r0, r4
 8019548:	f7ff ff27 	bl	801939a <lv_page_set_style>
            lv_page_set_style(new_page, LV_PAGE_STYLE_SB, th->style.page.sb);
 801954c:	f8d5 210c 	ldr.w	r2, [r5, #268]	; 0x10c
            lv_page_set_style(new_page, LV_PAGE_STYLE_SB, &lv_style_pretty_color);
 8019550:	2102      	movs	r1, #2
 8019552:	4620      	mov	r0, r4
 8019554:	f7ff ff21 	bl	801939a <lv_page_set_style>
    lv_page_sb_refresh(new_page);
 8019558:	4620      	mov	r0, r4
 801955a:	f7ff fcd7 	bl	8018f0c <lv_page_sb_refresh>
}
 801955e:	4620      	mov	r0, r4
 8019560:	b002      	add	sp, #8
 8019562:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
                lv_page_set_style(new_page, LV_PAGE_STYLE_BG, th->style.page.bg);
 8019566:	f8d0 2104 	ldr.w	r2, [r0, #260]	; 0x104
 801956a:	4631      	mov	r1, r6
 801956c:	4620      	mov	r0, r4
 801956e:	f7ff ff14 	bl	801939a <lv_page_set_style>
                lv_page_set_style(new_page, LV_PAGE_STYLE_SCRL, th->style.page.scrl);
 8019572:	f8d5 2108 	ldr.w	r2, [r5, #264]	; 0x108
 8019576:	e7e5      	b.n	8019544 <lv_page_create+0x104>
            lv_page_set_style(new_page, LV_PAGE_STYLE_BG, &lv_style_pretty_color);
 8019578:	4a2b      	ldr	r2, [pc, #172]	; (8019628 <lv_page_create+0x1e8>)
 801957a:	4631      	mov	r1, r6
 801957c:	4620      	mov	r0, r4
 801957e:	f7ff ff0c 	bl	801939a <lv_page_set_style>
            lv_page_set_style(new_page, LV_PAGE_STYLE_SCRL, &lv_style_pretty);
 8019582:	4642      	mov	r2, r8
 8019584:	2101      	movs	r1, #1
 8019586:	4620      	mov	r0, r4
 8019588:	f7ff ff07 	bl	801939a <lv_page_set_style>
            lv_page_set_style(new_page, LV_PAGE_STYLE_SB, &lv_style_pretty_color);
 801958c:	4a26      	ldr	r2, [pc, #152]	; (8019628 <lv_page_create+0x1e8>)
 801958e:	e7df      	b.n	8019550 <lv_page_create+0x110>
        lv_page_ext_t * copy_ext = lv_obj_get_ext_attr(copy);
 8019590:	4630      	mov	r0, r6
 8019592:	f7f6 fff4 	bl	801057e <lv_obj_get_ext_attr>
 8019596:	4680      	mov	r8, r0
        ext->scrl                = lv_cont_create(new_page, copy_ext->scrl);
 8019598:	6841      	ldr	r1, [r0, #4]
 801959a:	4620      	mov	r0, r4
 801959c:	f7fd fab6 	bl	8016b0c <lv_cont_create>
        lv_obj_set_signal_cb(ext->scrl, lv_page_scrollable_signal);
 80195a0:	491b      	ldr	r1, [pc, #108]	; (8019610 <lv_page_create+0x1d0>)
        ext->scrl                = lv_cont_create(new_page, copy_ext->scrl);
 80195a2:	6068      	str	r0, [r5, #4]
        lv_obj_set_signal_cb(ext->scrl, lv_page_scrollable_signal);
 80195a4:	f7f6 f900 	bl	800f7a8 <lv_obj_set_signal_cb>
        lv_page_set_sb_mode(new_page, copy_ext->sb.mode);
 80195a8:	f898 101c 	ldrb.w	r1, [r8, #28]
 80195ac:	4620      	mov	r0, r4
 80195ae:	f3c1 0182 	ubfx	r1, r1, #2, #3
 80195b2:	f7ff febf 	bl	8019334 <lv_page_set_sb_mode>
        lv_page_set_style(new_page, LV_PAGE_STYLE_BG, lv_page_get_style(copy, LV_PAGE_STYLE_BG));
 80195b6:	4639      	mov	r1, r7
 80195b8:	4630      	mov	r0, r6
 80195ba:	f7ff ff28 	bl	801940e <lv_page_get_style>
 80195be:	4639      	mov	r1, r7
 80195c0:	4602      	mov	r2, r0
 80195c2:	4620      	mov	r0, r4
 80195c4:	f7ff fee9 	bl	801939a <lv_page_set_style>
        lv_page_set_style(new_page, LV_PAGE_STYLE_SCRL, lv_page_get_style(copy, LV_PAGE_STYLE_SCRL));
 80195c8:	2101      	movs	r1, #1
 80195ca:	4630      	mov	r0, r6
 80195cc:	f7ff ff1f 	bl	801940e <lv_page_get_style>
 80195d0:	2101      	movs	r1, #1
 80195d2:	4602      	mov	r2, r0
 80195d4:	4620      	mov	r0, r4
 80195d6:	f7ff fee0 	bl	801939a <lv_page_set_style>
    lv_page_ext_t * ext      = lv_obj_get_ext_attr(page);
 80195da:	4630      	mov	r0, r6
 80195dc:	f7f6 ffcf 	bl	801057e <lv_obj_get_ext_attr>
        lv_page_set_style(new_page, LV_PAGE_STYLE_SB, lv_page_get_style(copy, LV_PAGE_STYLE_SB));
 80195e0:	2102      	movs	r1, #2
 80195e2:	6882      	ldr	r2, [r0, #8]
 80195e4:	4620      	mov	r0, r4
 80195e6:	f7ff fed8 	bl	801939a <lv_page_set_style>
        lv_obj_set_signal_cb(new_page, lv_page_signal);
 80195ea:	4620      	mov	r0, r4
 80195ec:	490b      	ldr	r1, [pc, #44]	; (801961c <lv_page_create+0x1dc>)
 80195ee:	f7f6 f8db 	bl	800f7a8 <lv_obj_set_signal_cb>
        lv_obj_set_design_cb(new_page, lv_page_design);
 80195f2:	4620      	mov	r0, r4
 80195f4:	490a      	ldr	r1, [pc, #40]	; (8019620 <lv_page_create+0x1e0>)
 80195f6:	f7f6 f8d9 	bl	800f7ac <lv_obj_set_design_cb>
        lv_obj_refresh_style(new_page);
 80195fa:	4620      	mov	r0, r4
 80195fc:	f7f6 fdc1 	bl	8010182 <lv_obj_refresh_style>
 8019600:	e7aa      	b.n	8019558 <lv_page_create+0x118>
 8019602:	bf00      	nop
 8019604:	2000b258 	.word	0x2000b258
 8019608:	2000b254 	.word	0x2000b254
 801960c:	2000c798 	.word	0x2000c798
 8019610:	08019b99 	.word	0x08019b99
 8019614:	080192a5 	.word	0x080192a5
 8019618:	08018eeb 	.word	0x08018eeb
 801961c:	080198f5 	.word	0x080198f5
 8019620:	08019631 	.word	0x08019631
 8019624:	2000c504 	.word	0x2000c504
 8019628:	2000c4c8 	.word	0x2000c4c8
 801962c:	2000c5b8 	.word	0x2000c5b8

08019630 <lv_page_design>:
{
 8019630:	b5f0      	push	{r4, r5, r6, r7, lr}
    if(mode == LV_DESIGN_COVER_CHK) {
 8019632:	2a02      	cmp	r2, #2
{
 8019634:	b0a3      	sub	sp, #140	; 0x8c
 8019636:	4604      	mov	r4, r0
 8019638:	460f      	mov	r7, r1
 801963a:	4615      	mov	r5, r2
    if(mode == LV_DESIGN_COVER_CHK) {
 801963c:	d104      	bne.n	8019648 <lv_page_design+0x18>
        return ancestor_design(page, mask, mode);
 801963e:	4b80      	ldr	r3, [pc, #512]	; (8019840 <lv_page_design+0x210>)
 8019640:	681b      	ldr	r3, [r3, #0]
 8019642:	4798      	blx	r3
}
 8019644:	b023      	add	sp, #140	; 0x8c
 8019646:	bdf0      	pop	{r4, r5, r6, r7, pc}
    const lv_style_t * style = lv_page_get_style(page, LV_PAGE_STYLE_BG);
 8019648:	2100      	movs	r1, #0
 801964a:	f7ff fee0 	bl	801940e <lv_page_get_style>
    lv_style_copy(&style_tmp, style);
 801964e:	4601      	mov	r1, r0
 8019650:	a804      	add	r0, sp, #16
 8019652:	f7f7 fb09 	bl	8010c68 <lv_style_copy>
    if(mode == LV_DESIGN_DRAW_MAIN) {
 8019656:	b96d      	cbnz	r5, 8019674 <lv_page_design+0x44>
        lv_draw_rect(&page->coords, mask, &style_tmp, lv_obj_get_opa_scale(page));
 8019658:	4620      	mov	r0, r4
        style_tmp.body.border.width = 0;
 801965a:	f8ad 501c 	strh.w	r5, [sp, #28]
        lv_draw_rect(&page->coords, mask, &style_tmp, lv_obj_get_opa_scale(page));
 801965e:	f7f6 ff26 	bl	80104ae <lv_obj_get_opa_scale>
 8019662:	aa04      	add	r2, sp, #16
 8019664:	4603      	mov	r3, r0
 8019666:	4639      	mov	r1, r7
 8019668:	f104 0010 	add.w	r0, r4, #16
                lv_draw_rect(&flash_area, mask, &flash_style, lv_obj_get_opa_scale(page));
 801966c:	f7f9 f84c 	bl	8012708 <lv_draw_rect>
    return true;
 8019670:	2001      	movs	r0, #1
 8019672:	e7e7      	b.n	8019644 <lv_page_design+0x14>
    } else if(mode == LV_DESIGN_DRAW_POST) {
 8019674:	2d01      	cmp	r5, #1
 8019676:	d1fb      	bne.n	8019670 <lv_page_design+0x40>
        style_tmp.body.shadow.width = 0;
 8019678:	2300      	movs	r3, #0
        lv_draw_rect(&page->coords, mask, &style_tmp, lv_obj_get_opa_scale(page));
 801967a:	4620      	mov	r0, r4
        style_tmp.body.shadow.width = 0;
 801967c:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
        style_tmp.body.opa          = LV_OPA_TRANSP;
 8019680:	f88d 3018 	strb.w	r3, [sp, #24]
        lv_draw_rect(&page->coords, mask, &style_tmp, lv_obj_get_opa_scale(page));
 8019684:	f7f6 ff13 	bl	80104ae <lv_obj_get_opa_scale>
 8019688:	aa04      	add	r2, sp, #16
 801968a:	4603      	mov	r3, r0
 801968c:	4639      	mov	r1, r7
 801968e:	f104 0010 	add.w	r0, r4, #16
 8019692:	f7f9 f839 	bl	8012708 <lv_draw_rect>
        lv_page_ext_t * ext = lv_obj_get_ext_attr(page);
 8019696:	4620      	mov	r0, r4
 8019698:	f7f6 ff71 	bl	801057e <lv_obj_get_ext_attr>
        if(ext->sb.hor_draw && (ext->sb.mode & LV_SB_MODE_HIDE) == 0) {
 801969c:	7f03      	ldrb	r3, [r0, #28]
 801969e:	07da      	lsls	r2, r3, #31
        lv_page_ext_t * ext = lv_obj_get_ext_attr(page);
 80196a0:	4606      	mov	r6, r0
        if(ext->sb.hor_draw && (ext->sb.mode & LV_SB_MODE_HIDE) == 0) {
 80196a2:	d528      	bpl.n	80196f6 <lv_page_design+0xc6>
 80196a4:	f3c3 0382 	ubfx	r3, r3, #2, #3
 80196a8:	075b      	lsls	r3, r3, #29
 80196aa:	d424      	bmi.n	80196f6 <lv_page_design+0xc6>
            lv_area_copy(&sb_area, &ext->sb.hor_area);
 80196ac:	f100 010c 	add.w	r1, r0, #12
 80196b0:	4668      	mov	r0, sp
 80196b2:	f7ff fc15 	bl	8018ee0 <lv_area_copy>
            sb_area.x1 += page->coords.x1;
 80196b6:	8a22      	ldrh	r2, [r4, #16]
 80196b8:	f8bd 3000 	ldrh.w	r3, [sp]
            sb_area.y1 += page->coords.y1;
 80196bc:	f8bd 1002 	ldrh.w	r1, [sp, #2]
            lv_draw_rect(&sb_area, mask, ext->sb.style, lv_obj_get_opa_scale(page));
 80196c0:	68b5      	ldr	r5, [r6, #8]
            sb_area.x1 += page->coords.x1;
 80196c2:	4413      	add	r3, r2
 80196c4:	f8ad 3000 	strh.w	r3, [sp]
            sb_area.y1 += page->coords.y1;
 80196c8:	8a63      	ldrh	r3, [r4, #18]
 80196ca:	4419      	add	r1, r3
 80196cc:	f8ad 1002 	strh.w	r1, [sp, #2]
            sb_area.x2 += page->coords.x1;
 80196d0:	f8bd 1004 	ldrh.w	r1, [sp, #4]
 80196d4:	440a      	add	r2, r1
 80196d6:	f8ad 2004 	strh.w	r2, [sp, #4]
            sb_area.y2 += page->coords.y1;
 80196da:	f8bd 2006 	ldrh.w	r2, [sp, #6]
            lv_draw_rect(&sb_area, mask, ext->sb.style, lv_obj_get_opa_scale(page));
 80196de:	4620      	mov	r0, r4
            sb_area.y2 += page->coords.y1;
 80196e0:	4413      	add	r3, r2
 80196e2:	f8ad 3006 	strh.w	r3, [sp, #6]
            lv_draw_rect(&sb_area, mask, ext->sb.style, lv_obj_get_opa_scale(page));
 80196e6:	f7f6 fee2 	bl	80104ae <lv_obj_get_opa_scale>
 80196ea:	462a      	mov	r2, r5
 80196ec:	4603      	mov	r3, r0
 80196ee:	4639      	mov	r1, r7
 80196f0:	4668      	mov	r0, sp
 80196f2:	f7f9 f809 	bl	8012708 <lv_draw_rect>
        if(ext->sb.ver_draw && (ext->sb.mode & LV_SB_MODE_HIDE) == 0) {
 80196f6:	7f33      	ldrb	r3, [r6, #28]
 80196f8:	079d      	lsls	r5, r3, #30
 80196fa:	d528      	bpl.n	801974e <lv_page_design+0x11e>
 80196fc:	f3c3 0382 	ubfx	r3, r3, #2, #3
 8019700:	0758      	lsls	r0, r3, #29
 8019702:	d424      	bmi.n	801974e <lv_page_design+0x11e>
            lv_area_copy(&sb_area, &ext->sb.ver_area);
 8019704:	f106 0114 	add.w	r1, r6, #20
 8019708:	4668      	mov	r0, sp
 801970a:	f7ff fbe9 	bl	8018ee0 <lv_area_copy>
            sb_area.x1 += page->coords.x1;
 801970e:	8a22      	ldrh	r2, [r4, #16]
 8019710:	f8bd 3000 	ldrh.w	r3, [sp]
            sb_area.y1 += page->coords.y1;
 8019714:	f8bd 1002 	ldrh.w	r1, [sp, #2]
            lv_draw_rect(&sb_area, mask, ext->sb.style, lv_obj_get_opa_scale(page));
 8019718:	68b5      	ldr	r5, [r6, #8]
            sb_area.x1 += page->coords.x1;
 801971a:	4413      	add	r3, r2
 801971c:	f8ad 3000 	strh.w	r3, [sp]
            sb_area.y1 += page->coords.y1;
 8019720:	8a63      	ldrh	r3, [r4, #18]
 8019722:	4419      	add	r1, r3
 8019724:	f8ad 1002 	strh.w	r1, [sp, #2]
            sb_area.x2 += page->coords.x1;
 8019728:	f8bd 1004 	ldrh.w	r1, [sp, #4]
 801972c:	440a      	add	r2, r1
 801972e:	f8ad 2004 	strh.w	r2, [sp, #4]
            sb_area.y2 += page->coords.y1;
 8019732:	f8bd 2006 	ldrh.w	r2, [sp, #6]
            lv_draw_rect(&sb_area, mask, ext->sb.style, lv_obj_get_opa_scale(page));
 8019736:	4620      	mov	r0, r4
            sb_area.y2 += page->coords.y1;
 8019738:	4413      	add	r3, r2
 801973a:	f8ad 3006 	strh.w	r3, [sp, #6]
            lv_draw_rect(&sb_area, mask, ext->sb.style, lv_obj_get_opa_scale(page));
 801973e:	f7f6 feb6 	bl	80104ae <lv_obj_get_opa_scale>
 8019742:	462a      	mov	r2, r5
 8019744:	4603      	mov	r3, r0
 8019746:	4639      	mov	r1, r7
 8019748:	4668      	mov	r0, sp
 801974a:	f7f8 ffdd 	bl	8012708 <lv_draw_rect>
            lv_coord_t page_w = lv_obj_get_width(page);
 801974e:	4620      	mov	r0, r4
 8019750:	f7f6 fe19 	bl	8010386 <lv_obj_get_width>
 8019754:	4605      	mov	r5, r0
            lv_coord_t page_h = lv_obj_get_height(page);
 8019756:	4620      	mov	r0, r4
 8019758:	f7f6 fe1b 	bl	8010392 <lv_obj_get_height>
            if(ext->edge_flash.top_ip) {
 801975c:	f896 3028 	ldrb.w	r3, [r6, #40]	; 0x28
 8019760:	0799      	lsls	r1, r3, #30
 8019762:	d533      	bpl.n	80197cc <lv_page_design+0x19c>
                flash_area.x1 = page->coords.x1 - page_w;
 8019764:	8a22      	ldrh	r2, [r4, #16]
 8019766:	8c31      	ldrh	r1, [r6, #32]
 8019768:	b2a8      	uxth	r0, r5
 801976a:	1a12      	subs	r2, r2, r0
 801976c:	f8ad 2008 	strh.w	r2, [sp, #8]
                flash_area.x2 = page->coords.x2 + page_w;
 8019770:	8aa2      	ldrh	r2, [r4, #20]
 8019772:	4402      	add	r2, r0
 8019774:	f8ad 200c 	strh.w	r2, [sp, #12]
 8019778:	8a62      	ldrh	r2, [r4, #18]
 801977a:	440a      	add	r2, r1
                flash_area.y1 = page->coords.y1 - 3 * page_w + ext->edge_flash.state;
 801977c:	ebc0 3180 	rsb	r1, r0, r0, lsl #14
 8019780:	b292      	uxth	r2, r2
 8019782:	eb00 0081 	add.w	r0, r0, r1, lsl #2
 8019786:	4410      	add	r0, r2
 8019788:	f8ad 000a 	strh.w	r0, [sp, #10]
                flash_area.y2 = page->coords.y1 + ext->edge_flash.state;
 801978c:	f8ad 200e 	strh.w	r2, [sp, #14]
            if(ext->edge_flash.left_ip || ext->edge_flash.right_ip || ext->edge_flash.top_ip ||
 8019790:	f013 0f1e 	tst.w	r3, #30
 8019794:	f43f af6c 	beq.w	8019670 <lv_page_design+0x40>
                lv_style_copy(&flash_style, ext->edge_flash.style);
 8019798:	6a71      	ldr	r1, [r6, #36]	; 0x24
 801979a:	a813      	add	r0, sp, #76	; 0x4c
 801979c:	f7f7 fa64 	bl	8010c68 <lv_style_copy>
                flash_style.body.radius = LV_RADIUS_CIRCLE;
 80197a0:	f647 4318 	movw	r3, #31768	; 0x7c18
                uint32_t opa            = (flash_style.body.opa * ext->edge_flash.state) / LV_PAGE_END_FLASH_SIZE;
 80197a4:	8c32      	ldrh	r2, [r6, #32]
                flash_style.body.radius = LV_RADIUS_CIRCLE;
 80197a6:	f8ad 3052 	strh.w	r3, [sp, #82]	; 0x52
                uint32_t opa            = (flash_style.body.opa * ext->edge_flash.state) / LV_PAGE_END_FLASH_SIZE;
 80197aa:	f89d 3054 	ldrb.w	r3, [sp, #84]	; 0x54
                lv_draw_rect(&flash_area, mask, &flash_style, lv_obj_get_opa_scale(page));
 80197ae:	4620      	mov	r0, r4
                uint32_t opa            = (flash_style.body.opa * ext->edge_flash.state) / LV_PAGE_END_FLASH_SIZE;
 80197b0:	fb13 f302 	smulbb	r3, r3, r2
 80197b4:	2206      	movs	r2, #6
 80197b6:	fb93 f3f2 	sdiv	r3, r3, r2
                flash_style.body.opa    = opa;
 80197ba:	f88d 3054 	strb.w	r3, [sp, #84]	; 0x54
                lv_draw_rect(&flash_area, mask, &flash_style, lv_obj_get_opa_scale(page));
 80197be:	f7f6 fe76 	bl	80104ae <lv_obj_get_opa_scale>
 80197c2:	aa13      	add	r2, sp, #76	; 0x4c
 80197c4:	4603      	mov	r3, r0
 80197c6:	4639      	mov	r1, r7
 80197c8:	a802      	add	r0, sp, #8
 80197ca:	e74f      	b.n	801966c <lv_page_design+0x3c>
            } else if(ext->edge_flash.bottom_ip) {
 80197cc:	075a      	lsls	r2, r3, #29
 80197ce:	d514      	bpl.n	80197fa <lv_page_design+0x1ca>
                flash_area.x1 = page->coords.x1 - page_w;
 80197d0:	8a22      	ldrh	r2, [r4, #16]
                flash_area.y1 = page->coords.y2 - ext->edge_flash.state;
 80197d2:	8c31      	ldrh	r1, [r6, #32]
                flash_area.x1 = page->coords.x1 - page_w;
 80197d4:	b2a8      	uxth	r0, r5
 80197d6:	1a12      	subs	r2, r2, r0
 80197d8:	f8ad 2008 	strh.w	r2, [sp, #8]
                flash_area.x2 = page->coords.x2 + page_w;
 80197dc:	8aa2      	ldrh	r2, [r4, #20]
 80197de:	4402      	add	r2, r0
 80197e0:	f8ad 200c 	strh.w	r2, [sp, #12]
                flash_area.y1 = page->coords.y2 - ext->edge_flash.state;
 80197e4:	8ae2      	ldrh	r2, [r4, #22]
 80197e6:	1a52      	subs	r2, r2, r1
 80197e8:	b292      	uxth	r2, r2
 80197ea:	f8ad 200a 	strh.w	r2, [sp, #10]
                flash_area.y2 = page->coords.y2 + 3 * page_w - ext->edge_flash.state;
 80197ee:	eb00 0040 	add.w	r0, r0, r0, lsl #1
                flash_area.y2 = page->coords.y2 + page_h;
 80197f2:	4410      	add	r0, r2
 80197f4:	f8ad 000e 	strh.w	r0, [sp, #14]
 80197f8:	e7ca      	b.n	8019790 <lv_page_design+0x160>
            } else if(ext->edge_flash.right_ip) {
 80197fa:	0719      	lsls	r1, r3, #28
 80197fc:	d511      	bpl.n	8019822 <lv_page_design+0x1f2>
                flash_area.x1 = page->coords.x2 - ext->edge_flash.state;
 80197fe:	8c31      	ldrh	r1, [r6, #32]
 8019800:	8aa2      	ldrh	r2, [r4, #20]
                flash_area.x2 = page->coords.x2 + 3 * page_h - ext->edge_flash.state;
 8019802:	b280      	uxth	r0, r0
                flash_area.x1 = page->coords.x2 - ext->edge_flash.state;
 8019804:	1a52      	subs	r2, r2, r1
 8019806:	b292      	uxth	r2, r2
                flash_area.x2 = page->coords.x2 + 3 * page_h - ext->edge_flash.state;
 8019808:	eb00 0140 	add.w	r1, r0, r0, lsl #1
                flash_area.x1 = page->coords.x2 - ext->edge_flash.state;
 801980c:	f8ad 2008 	strh.w	r2, [sp, #8]
                flash_area.x2 = page->coords.x2 + 3 * page_h - ext->edge_flash.state;
 8019810:	440a      	add	r2, r1
                flash_area.x2 = page->coords.x1 + ext->edge_flash.state;
 8019812:	f8ad 200c 	strh.w	r2, [sp, #12]
                flash_area.y1 = page->coords.y1 - page_h;
 8019816:	8a62      	ldrh	r2, [r4, #18]
 8019818:	1a12      	subs	r2, r2, r0
 801981a:	f8ad 200a 	strh.w	r2, [sp, #10]
                flash_area.y2 = page->coords.y2 + page_h;
 801981e:	8ae2      	ldrh	r2, [r4, #22]
 8019820:	e7e7      	b.n	80197f2 <lv_page_design+0x1c2>
            } else if(ext->edge_flash.left_ip) {
 8019822:	06da      	lsls	r2, r3, #27
 8019824:	d5b4      	bpl.n	8019790 <lv_page_design+0x160>
 8019826:	8c31      	ldrh	r1, [r6, #32]
 8019828:	8a22      	ldrh	r2, [r4, #16]
                flash_area.x1 = page->coords.x1 - 3 * page_h + ext->edge_flash.state;
 801982a:	b280      	uxth	r0, r0
 801982c:	440a      	add	r2, r1
 801982e:	ebc0 3180 	rsb	r1, r0, r0, lsl #14
 8019832:	b292      	uxth	r2, r2
 8019834:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8019838:	4411      	add	r1, r2
 801983a:	f8ad 1008 	strh.w	r1, [sp, #8]
 801983e:	e7e8      	b.n	8019812 <lv_page_design+0x1e2>
 8019840:	2000b254 	.word	0x2000b254

08019844 <lv_page_scroll_hor>:
{
 8019844:	b510      	push	{r4, lr}
 8019846:	b08a      	sub	sp, #40	; 0x28
 8019848:	460c      	mov	r4, r1
    lv_obj_t * scrl = lv_page_get_scrl(page);
 801984a:	f7ff fdd6 	bl	80193fa <lv_page_get_scrl>
    a.var            = scrl;
 801984e:	9000      	str	r0, [sp, #0]
    a.start          = lv_obj_get_x(scrl);
 8019850:	f7f6 fd8d 	bl	801036e <lv_obj_get_x>
    a.time           = LV_PAGE_SCROLL_ANIM_TIME;
 8019854:	22c8      	movs	r2, #200	; 0xc8
 8019856:	f8ad 2018 	strh.w	r2, [sp, #24]
    a.exec_cb        = (lv_anim_exec_xcb_t)lv_obj_set_x;
 801985a:	4b0e      	ldr	r3, [pc, #56]	; (8019894 <lv_page_scroll_hor+0x50>)
    a.playback       = 0;
 801985c:	f89d 2024 	ldrb.w	r2, [sp, #36]	; 0x24
    a.exec_cb        = (lv_anim_exec_xcb_t)lv_obj_set_x;
 8019860:	9301      	str	r3, [sp, #4]
    a.path_cb        = lv_anim_path_linear;
 8019862:	4b0d      	ldr	r3, [pc, #52]	; (8019898 <lv_page_scroll_hor+0x54>)
 8019864:	9302      	str	r3, [sp, #8]
    a.repeat         = 0;
 8019866:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
    a.ready_cb       = NULL;
 801986a:	2300      	movs	r3, #0
    a.start          = lv_obj_get_x(scrl);
 801986c:	9004      	str	r0, [sp, #16]
    a.end            = a.start + dist;
 801986e:	4404      	add	r4, r0
    a.repeat         = 0;
 8019870:	f363 0241 	bfi	r2, r3, #1, #1
    lv_anim_create(&a);
 8019874:	4668      	mov	r0, sp
    a.end            = a.start + dist;
 8019876:	9405      	str	r4, [sp, #20]
    a.ready_cb       = NULL;
 8019878:	9303      	str	r3, [sp, #12]
    a.act_time       = 0;
 801987a:	f8ad 301a 	strh.w	r3, [sp, #26]
    a.playback_pause = 0;
 801987e:	f8ad 301c 	strh.w	r3, [sp, #28]
    a.repeat         = 0;
 8019882:	f88d 2024 	strb.w	r2, [sp, #36]	; 0x24
    a.repeat_pause   = 0;
 8019886:	f8ad 301e 	strh.w	r3, [sp, #30]
    lv_anim_create(&a);
 801988a:	f7fb fcc3 	bl	8015214 <lv_anim_create>
}
 801988e:	b00a      	add	sp, #40	; 0x28
 8019890:	bd10      	pop	{r4, pc}
 8019892:	bf00      	nop
 8019894:	0800f96d 	.word	0x0800f96d
 8019898:	0801501d 	.word	0x0801501d

0801989c <lv_page_scroll_ver>:
{
 801989c:	b510      	push	{r4, lr}
 801989e:	b08a      	sub	sp, #40	; 0x28
 80198a0:	460c      	mov	r4, r1
    lv_obj_t * scrl = lv_page_get_scrl(page);
 80198a2:	f7ff fdaa 	bl	80193fa <lv_page_get_scrl>
    a.var            = scrl;
 80198a6:	9000      	str	r0, [sp, #0]
    a.start          = lv_obj_get_y(scrl);
 80198a8:	f7f6 fd67 	bl	801037a <lv_obj_get_y>
    a.time           = LV_PAGE_SCROLL_ANIM_TIME;
 80198ac:	22c8      	movs	r2, #200	; 0xc8
 80198ae:	f8ad 2018 	strh.w	r2, [sp, #24]
    a.exec_cb        = (lv_anim_exec_xcb_t)lv_obj_set_y;
 80198b2:	4b0e      	ldr	r3, [pc, #56]	; (80198ec <lv_page_scroll_ver+0x50>)
    a.playback       = 0;
 80198b4:	f89d 2024 	ldrb.w	r2, [sp, #36]	; 0x24
    a.exec_cb        = (lv_anim_exec_xcb_t)lv_obj_set_y;
 80198b8:	9301      	str	r3, [sp, #4]
    a.path_cb        = lv_anim_path_linear;
 80198ba:	4b0d      	ldr	r3, [pc, #52]	; (80198f0 <lv_page_scroll_ver+0x54>)
 80198bc:	9302      	str	r3, [sp, #8]
    a.repeat         = 0;
 80198be:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
    a.ready_cb       = NULL;
 80198c2:	2300      	movs	r3, #0
    a.start          = lv_obj_get_y(scrl);
 80198c4:	9004      	str	r0, [sp, #16]
    a.end            = a.start + dist;
 80198c6:	4404      	add	r4, r0
    a.repeat         = 0;
 80198c8:	f363 0241 	bfi	r2, r3, #1, #1
    lv_anim_create(&a);
 80198cc:	4668      	mov	r0, sp
    a.end            = a.start + dist;
 80198ce:	9405      	str	r4, [sp, #20]
    a.ready_cb       = NULL;
 80198d0:	9303      	str	r3, [sp, #12]
    a.act_time       = 0;
 80198d2:	f8ad 301a 	strh.w	r3, [sp, #26]
    a.playback_pause = 0;
 80198d6:	f8ad 301c 	strh.w	r3, [sp, #28]
    a.repeat         = 0;
 80198da:	f88d 2024 	strb.w	r2, [sp, #36]	; 0x24
    a.repeat_pause   = 0;
 80198de:	f8ad 301e 	strh.w	r3, [sp, #30]
    lv_anim_create(&a);
 80198e2:	f7fb fc97 	bl	8015214 <lv_anim_create>
}
 80198e6:	b00a      	add	sp, #40	; 0x28
 80198e8:	bd10      	pop	{r4, pc}
 80198ea:	bf00      	nop
 80198ec:	0800f981 	.word	0x0800f981
 80198f0:	0801501d 	.word	0x0801501d

080198f4 <lv_page_signal>:
{
 80198f4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    res = ancestor_signal(page, sign, param);
 80198f8:	4b8c      	ldr	r3, [pc, #560]	; (8019b2c <lv_page_signal+0x238>)
 80198fa:	681b      	ldr	r3, [r3, #0]
{
 80198fc:	4604      	mov	r4, r0
 80198fe:	460e      	mov	r6, r1
 8019900:	4615      	mov	r5, r2
    res = ancestor_signal(page, sign, param);
 8019902:	4798      	blx	r3
    if(res != LV_RES_OK) return res;
 8019904:	2801      	cmp	r0, #1
    res = ancestor_signal(page, sign, param);
 8019906:	4607      	mov	r7, r0
    if(res != LV_RES_OK) return res;
 8019908:	d11e      	bne.n	8019948 <lv_page_signal+0x54>
    lv_page_ext_t * ext = lv_obj_get_ext_attr(page);
 801990a:	4620      	mov	r0, r4
 801990c:	f7f6 fe37 	bl	801057e <lv_obj_get_ext_attr>
    if(sign == LV_SIGNAL_CHILD_CHG) { /*Automatically move children to the scrollable object*/
 8019910:	2e01      	cmp	r6, #1
    lv_page_ext_t * ext = lv_obj_get_ext_attr(page);
 8019912:	4680      	mov	r8, r0
    if(sign == LV_SIGNAL_CHILD_CHG) { /*Automatically move children to the scrollable object*/
 8019914:	d151      	bne.n	80199ba <lv_page_signal+0xc6>
        const lv_style_t * style = lv_page_get_style(page, LV_PAGE_STYLE_SCRL);
 8019916:	4639      	mov	r1, r7
 8019918:	4620      	mov	r0, r4
 801991a:	f7ff fd78 	bl	801940e <lv_page_get_style>
 801991e:	4681      	mov	r9, r0
    return lv_cont_get_fit_left(lv_page_get_scrl(page));
 8019920:	4620      	mov	r0, r4
 8019922:	f7ff fd6a 	bl	80193fa <lv_page_get_scrl>
 8019926:	f7fd fc8b 	bl	8017240 <lv_cont_get_fit_left>
 801992a:	4682      	mov	sl, r0
    return lv_cont_get_fit_top(lv_page_get_scrl(page));
 801992c:	4620      	mov	r0, r4
 801992e:	f7ff fd64 	bl	80193fa <lv_page_get_scrl>
 8019932:	f7fd fc8c 	bl	801724e <lv_cont_get_fit_top>
        child                    = lv_obj_get_child(page, NULL);
 8019936:	2100      	movs	r1, #0
 8019938:	4606      	mov	r6, r0
 801993a:	4620      	mov	r0, r4
 801993c:	f7f6 fca8 	bl	8010290 <lv_obj_get_child>
                if((tmp->coords.y1 == page->coords.y1) && (fit_top == LV_FIT_TIGHT || fit_top == LV_FIT_FILL)) {
 8019940:	f006 06fd 	and.w	r6, r6, #253	; 0xfd
        child                    = lv_obj_get_child(page, NULL);
 8019944:	4605      	mov	r5, r0
        while(child != NULL) {
 8019946:	b915      	cbnz	r5, 801994e <lv_page_signal+0x5a>
}
 8019948:	4638      	mov	r0, r7
 801994a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
            if(lv_obj_is_protected(child, LV_PROTECT_PARENT) == false) {
 801994e:	2102      	movs	r1, #2
 8019950:	4628      	mov	r0, r5
 8019952:	f7f6 fe09 	bl	8010568 <lv_obj_is_protected>
                child          = lv_obj_get_child(page, child); /*Get the next child before move this*/
 8019956:	4629      	mov	r1, r5
            if(lv_obj_is_protected(child, LV_PROTECT_PARENT) == false) {
 8019958:	bb50      	cbnz	r0, 80199b0 <lv_page_signal+0xbc>
                child          = lv_obj_get_child(page, child); /*Get the next child before move this*/
 801995a:	4620      	mov	r0, r4
 801995c:	f7f6 fc98 	bl	8010290 <lv_obj_get_child>
                if((tmp->coords.x1 == page->coords.x1) && (fit_left == LV_FIT_TIGHT || fit_left == LV_FIT_FILL)) {
 8019960:	f9b5 3010 	ldrsh.w	r3, [r5, #16]
 8019964:	f9b4 2010 	ldrsh.w	r2, [r4, #16]
 8019968:	429a      	cmp	r2, r3
                child          = lv_obj_get_child(page, child); /*Get the next child before move this*/
 801996a:	4683      	mov	fp, r0
                if((tmp->coords.x1 == page->coords.x1) && (fit_left == LV_FIT_TIGHT || fit_left == LV_FIT_FILL)) {
 801996c:	d10a      	bne.n	8019984 <lv_page_signal+0x90>
 801996e:	f00a 03fd 	and.w	r3, sl, #253	; 0xfd
 8019972:	2b01      	cmp	r3, #1
 8019974:	d106      	bne.n	8019984 <lv_page_signal+0x90>
                    tmp->coords.x1 += style->body.padding.left;
 8019976:	f8b9 301a 	ldrh.w	r3, [r9, #26]
 801997a:	441a      	add	r2, r3
 801997c:	822a      	strh	r2, [r5, #16]
                    tmp->coords.x2 += style->body.padding.left;
 801997e:	8aaa      	ldrh	r2, [r5, #20]
 8019980:	4413      	add	r3, r2
 8019982:	82ab      	strh	r3, [r5, #20]
                if((tmp->coords.y1 == page->coords.y1) && (fit_top == LV_FIT_TIGHT || fit_top == LV_FIT_FILL)) {
 8019984:	f9b5 3012 	ldrsh.w	r3, [r5, #18]
 8019988:	f9b4 2012 	ldrsh.w	r2, [r4, #18]
 801998c:	429a      	cmp	r2, r3
 801998e:	d108      	bne.n	80199a2 <lv_page_signal+0xae>
 8019990:	2e01      	cmp	r6, #1
 8019992:	d106      	bne.n	80199a2 <lv_page_signal+0xae>
                    tmp->coords.y1 += style->body.padding.top;
 8019994:	f8b9 3016 	ldrh.w	r3, [r9, #22]
 8019998:	441a      	add	r2, r3
 801999a:	826a      	strh	r2, [r5, #18]
                    tmp->coords.y2 += style->body.padding.top;
 801999c:	8aea      	ldrh	r2, [r5, #22]
 801999e:	4413      	add	r3, r2
 80199a0:	82eb      	strh	r3, [r5, #22]
                lv_obj_set_parent(tmp, ext->scrl);
 80199a2:	4628      	mov	r0, r5
 80199a4:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80199a8:	f7f6 fb60 	bl	801006c <lv_obj_set_parent>
                child          = lv_obj_get_child(page, child); /*Get the next child before move this*/
 80199ac:	465d      	mov	r5, fp
 80199ae:	e7ca      	b.n	8019946 <lv_page_signal+0x52>
                child = lv_obj_get_child(page, child);
 80199b0:	4620      	mov	r0, r4
 80199b2:	f7f6 fc6d 	bl	8010290 <lv_obj_get_child>
 80199b6:	4605      	mov	r5, r0
 80199b8:	e7c5      	b.n	8019946 <lv_page_signal+0x52>
    } else if(sign == LV_SIGNAL_STYLE_CHG) {
 80199ba:	2e04      	cmp	r6, #4
 80199bc:	d110      	bne.n	80199e0 <lv_page_signal+0xec>
        ext->scrl->signal_cb(ext->scrl, LV_SIGNAL_CORD_CHG, &ext->scrl->coords);
 80199be:	6840      	ldr	r0, [r0, #4]
 80199c0:	2102      	movs	r1, #2
 80199c2:	69c3      	ldr	r3, [r0, #28]
 80199c4:	f100 0210 	add.w	r2, r0, #16
 80199c8:	4798      	blx	r3
        if(ext->sb.hor_draw || ext->sb.ver_draw) lv_page_sb_refresh(page);
 80199ca:	f898 301c 	ldrb.w	r3, [r8, #28]
 80199ce:	079a      	lsls	r2, r3, #30
 80199d0:	d002      	beq.n	80199d8 <lv_page_signal+0xe4>
 80199d2:	4620      	mov	r0, r4
 80199d4:	f7ff fa9a 	bl	8018f0c <lv_page_sb_refresh>
        lv_obj_refresh_ext_draw_pad(page);
 80199d8:	4620      	mov	r0, r4
 80199da:	f7f6 fbe0 	bl	801019e <lv_obj_refresh_ext_draw_pad>
 80199de:	e7b3      	b.n	8019948 <lv_page_signal+0x54>
    } else if(sign == LV_SIGNAL_CORD_CHG) {
 80199e0:	2e02      	cmp	r6, #2
 80199e2:	d126      	bne.n	8019a32 <lv_page_signal+0x13e>
        if(ext->scrl != NULL && (lv_obj_get_width(page) != lv_area_get_width(param) ||
 80199e4:	6843      	ldr	r3, [r0, #4]
 80199e6:	2b00      	cmp	r3, #0
 80199e8:	d0ae      	beq.n	8019948 <lv_page_signal+0x54>
 80199ea:	4620      	mov	r0, r4
 80199ec:	f7f6 fccb 	bl	8010386 <lv_obj_get_width>
 * @param area_p pointer to an area
 * @return the width of the area (if x1 == x2 -> width = 1)
 */
static inline lv_coord_t lv_area_get_width(const lv_area_t * area_p)
{
    return area_p->x2 - area_p->x1 + 1;
 80199f0:	88ab      	ldrh	r3, [r5, #4]
 80199f2:	882a      	ldrh	r2, [r5, #0]
 80199f4:	3301      	adds	r3, #1
 80199f6:	1a9b      	subs	r3, r3, r2
 80199f8:	b21b      	sxth	r3, r3
 80199fa:	4298      	cmp	r0, r3
 80199fc:	d00e      	beq.n	8019a1c <lv_page_signal+0x128>
            ext->scrl->signal_cb(ext->scrl, LV_SIGNAL_CORD_CHG, &ext->scrl->coords);
 80199fe:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8019a02:	2102      	movs	r1, #2
 8019a04:	69c3      	ldr	r3, [r0, #28]
 8019a06:	f100 0210 	add.w	r2, r0, #16
 8019a0a:	4798      	blx	r3
            if(ext->sb.hor_draw || ext->sb.ver_draw) lv_page_sb_refresh(page);
 8019a0c:	f898 301c 	ldrb.w	r3, [r8, #28]
 8019a10:	079b      	lsls	r3, r3, #30
 8019a12:	d099      	beq.n	8019948 <lv_page_signal+0x54>
 8019a14:	4620      	mov	r0, r4
 8019a16:	f7ff fa79 	bl	8018f0c <lv_page_sb_refresh>
 8019a1a:	e795      	b.n	8019948 <lv_page_signal+0x54>
                                 lv_obj_get_height(page) != lv_area_get_height(param))) {
 8019a1c:	4620      	mov	r0, r4
 8019a1e:	f7f6 fcb8 	bl	8010392 <lv_obj_get_height>
 * @param area_p pointer to an area
 * @return the height of the area (if y1 == y2 -> height = 1)
 */
static inline lv_coord_t lv_area_get_height(const lv_area_t * area_p)
{
    return area_p->y2 - area_p->y1 + 1;
 8019a22:	88eb      	ldrh	r3, [r5, #6]
 8019a24:	886a      	ldrh	r2, [r5, #2]
 8019a26:	3301      	adds	r3, #1
 8019a28:	1a9b      	subs	r3, r3, r2
        if(ext->scrl != NULL && (lv_obj_get_width(page) != lv_area_get_width(param) ||
 8019a2a:	b21b      	sxth	r3, r3
 8019a2c:	4298      	cmp	r0, r3
 8019a2e:	d1e6      	bne.n	80199fe <lv_page_signal+0x10a>
 8019a30:	e78a      	b.n	8019948 <lv_page_signal+0x54>
    } else if(sign == LV_SIGNAL_REFR_EXT_DRAW_PAD) {
 8019a32:	2e05      	cmp	r6, #5
 8019a34:	d112      	bne.n	8019a5c <lv_page_signal+0x168>
        if(page->ext_draw_pad < (-ext->sb.style->body.padding.right))
 8019a36:	6882      	ldr	r2, [r0, #8]
 8019a38:	f9b4 1034 	ldrsh.w	r1, [r4, #52]	; 0x34
 8019a3c:	f9b2 301c 	ldrsh.w	r3, [r2, #28]
 8019a40:	425b      	negs	r3, r3
 8019a42:	4299      	cmp	r1, r3
            page->ext_draw_pad = -ext->sb.style->body.padding.right;
 8019a44:	bfb8      	it	lt
 8019a46:	86a3      	strhlt	r3, [r4, #52]	; 0x34
        if(page->ext_draw_pad < (-ext->sb.style->body.padding.bottom))
 8019a48:	f9b2 3018 	ldrsh.w	r3, [r2, #24]
 8019a4c:	f9b4 2034 	ldrsh.w	r2, [r4, #52]	; 0x34
 8019a50:	425b      	negs	r3, r3
 8019a52:	429a      	cmp	r2, r3
 8019a54:	f6bf af78 	bge.w	8019948 <lv_page_signal+0x54>
            page->ext_draw_pad = -ext->sb.style->body.padding.bottom;
 8019a58:	86a3      	strh	r3, [r4, #52]	; 0x34
 8019a5a:	e775      	b.n	8019948 <lv_page_signal+0x54>
    } else if(sign == LV_SIGNAL_CONTROL) {
 8019a5c:	2e11      	cmp	r6, #17
 8019a5e:	d151      	bne.n	8019b04 <lv_page_signal+0x210>
        uint32_t c = *((uint32_t *)param);
 8019a60:	682b      	ldr	r3, [r5, #0]
        if(c == LV_KEY_DOWN) {
 8019a62:	2b12      	cmp	r3, #18
 8019a64:	d107      	bne.n	8019a76 <lv_page_signal+0x182>
            lv_page_scroll_ver(page, -lv_obj_get_height(page) / 4);
 8019a66:	4620      	mov	r0, r4
 8019a68:	f7f6 fc93 	bl	8010392 <lv_obj_get_height>
 8019a6c:	2104      	movs	r1, #4
 8019a6e:	fb90 f1f1 	sdiv	r1, r0, r1
                lv_page_scroll_ver(page, -lv_obj_get_height(page) / 4);
 8019a72:	4249      	negs	r1, r1
 8019a74:	e007      	b.n	8019a86 <lv_page_signal+0x192>
        } else if(c == LV_KEY_UP) {
 8019a76:	2b11      	cmp	r3, #17
 8019a78:	d10a      	bne.n	8019a90 <lv_page_signal+0x19c>
            lv_page_scroll_ver(page, lv_obj_get_height(page) / 4);
 8019a7a:	4620      	mov	r0, r4
 8019a7c:	f7f6 fc89 	bl	8010392 <lv_obj_get_height>
 8019a80:	2104      	movs	r1, #4
 8019a82:	fb90 f1f1 	sdiv	r1, r0, r1
                lv_page_scroll_ver(page, lv_obj_get_height(page) / 4);
 8019a86:	b209      	sxth	r1, r1
 8019a88:	4620      	mov	r0, r4
 8019a8a:	f7ff ff07 	bl	801989c <lv_page_scroll_ver>
 8019a8e:	e75b      	b.n	8019948 <lv_page_signal+0x54>
        } else if(c == LV_KEY_RIGHT) {
 8019a90:	2b13      	cmp	r3, #19
 8019a92:	d11c      	bne.n	8019ace <lv_page_signal+0x1da>
    return lv_obj_get_width(lv_page_get_scrl(page));
 8019a94:	4620      	mov	r0, r4
 8019a96:	f7ff fcb0 	bl	80193fa <lv_page_get_scrl>
 8019a9a:	f7f6 fc74 	bl	8010386 <lv_obj_get_width>
 8019a9e:	4605      	mov	r5, r0
            if(lv_page_get_scrl_width(page) <= lv_obj_get_width(page))
 8019aa0:	4620      	mov	r0, r4
 8019aa2:	f7f6 fc70 	bl	8010386 <lv_obj_get_width>
 8019aa6:	42a8      	cmp	r0, r5
 8019aa8:	f04f 0504 	mov.w	r5, #4
                lv_page_scroll_ver(page, -lv_obj_get_height(page) / 4);
 8019aac:	4620      	mov	r0, r4
            if(lv_page_get_scrl_width(page) <= lv_obj_get_width(page))
 8019aae:	db04      	blt.n	8019aba <lv_page_signal+0x1c6>
                lv_page_scroll_ver(page, -lv_obj_get_height(page) / 4);
 8019ab0:	f7f6 fc6f 	bl	8010392 <lv_obj_get_height>
 8019ab4:	fb90 f1f5 	sdiv	r1, r0, r5
 8019ab8:	e7db      	b.n	8019a72 <lv_page_signal+0x17e>
                lv_page_scroll_hor(page, -lv_obj_get_width(page) / 4);
 8019aba:	f7f6 fc64 	bl	8010386 <lv_obj_get_width>
 8019abe:	fb90 f1f5 	sdiv	r1, r0, r5
 8019ac2:	4249      	negs	r1, r1
                lv_page_scroll_hor(page, lv_obj_get_width(page) / 4);
 8019ac4:	b209      	sxth	r1, r1
 8019ac6:	4620      	mov	r0, r4
 8019ac8:	f7ff febc 	bl	8019844 <lv_page_scroll_hor>
 8019acc:	e73c      	b.n	8019948 <lv_page_signal+0x54>
        } else if(c == LV_KEY_LEFT) {
 8019ace:	2b14      	cmp	r3, #20
 8019ad0:	f47f af3a 	bne.w	8019948 <lv_page_signal+0x54>
 8019ad4:	4620      	mov	r0, r4
 8019ad6:	f7ff fc90 	bl	80193fa <lv_page_get_scrl>
 8019ada:	f7f6 fc54 	bl	8010386 <lv_obj_get_width>
 8019ade:	4605      	mov	r5, r0
            if(lv_page_get_scrl_width(page) <= lv_obj_get_width(page))
 8019ae0:	4620      	mov	r0, r4
 8019ae2:	f7f6 fc50 	bl	8010386 <lv_obj_get_width>
 8019ae6:	42a8      	cmp	r0, r5
 8019ae8:	f04f 0504 	mov.w	r5, #4
                lv_page_scroll_ver(page, lv_obj_get_height(page) / 4);
 8019aec:	4620      	mov	r0, r4
            if(lv_page_get_scrl_width(page) <= lv_obj_get_width(page))
 8019aee:	db04      	blt.n	8019afa <lv_page_signal+0x206>
                lv_page_scroll_ver(page, lv_obj_get_height(page) / 4);
 8019af0:	f7f6 fc4f 	bl	8010392 <lv_obj_get_height>
 8019af4:	fb90 f1f5 	sdiv	r1, r0, r5
 8019af8:	e7c5      	b.n	8019a86 <lv_page_signal+0x192>
                lv_page_scroll_hor(page, lv_obj_get_width(page) / 4);
 8019afa:	f7f6 fc44 	bl	8010386 <lv_obj_get_width>
 8019afe:	fb90 f1f5 	sdiv	r1, r0, r5
 8019b02:	e7df      	b.n	8019ac4 <lv_page_signal+0x1d0>
    } else if(sign == LV_SIGNAL_GET_EDITABLE) {
 8019b04:	2e12      	cmp	r6, #18
 8019b06:	d101      	bne.n	8019b0c <lv_page_signal+0x218>
        *editable       = true;
 8019b08:	702f      	strb	r7, [r5, #0]
 8019b0a:	e71d      	b.n	8019948 <lv_page_signal+0x54>
    } else if(sign == LV_SIGNAL_GET_TYPE) {
 8019b0c:	2e06      	cmp	r6, #6
 8019b0e:	f47f af1b 	bne.w	8019948 <lv_page_signal+0x54>
 8019b12:	2300      	movs	r3, #0
            if(buf->type[i] == NULL) break;
 8019b14:	f855 1023 	ldr.w	r1, [r5, r3, lsl #2]
 8019b18:	b2da      	uxtb	r2, r3
 8019b1a:	b119      	cbz	r1, 8019b24 <lv_page_signal+0x230>
 8019b1c:	3301      	adds	r3, #1
        for(i = 0; i < LV_MAX_ANCESTOR_NUM - 1; i++) { /*Find the last set data*/
 8019b1e:	2b07      	cmp	r3, #7
 8019b20:	d1f8      	bne.n	8019b14 <lv_page_signal+0x220>
 8019b22:	461a      	mov	r2, r3
        buf->type[i] = "lv_page";
 8019b24:	4b02      	ldr	r3, [pc, #8]	; (8019b30 <lv_page_signal+0x23c>)
 8019b26:	f845 3022 	str.w	r3, [r5, r2, lsl #2]
 8019b2a:	e70d      	b.n	8019948 <lv_page_signal+0x54>
 8019b2c:	2000b258 	.word	0x2000b258
 8019b30:	080f4fc0 	.word	0x080f4fc0

08019b34 <lv_page_start_edge_flash>:
{
 8019b34:	b510      	push	{r4, lr}
 8019b36:	b08a      	sub	sp, #40	; 0x28
 8019b38:	4604      	mov	r4, r0
    lv_page_ext_t * ext = lv_obj_get_ext_attr(page);
 8019b3a:	f7f6 fd20 	bl	801057e <lv_obj_get_ext_attr>
    if(ext->edge_flash.enabled) {
 8019b3e:	f890 3028 	ldrb.w	r3, [r0, #40]	; 0x28
 8019b42:	07db      	lsls	r3, r3, #31
 8019b44:	d51f      	bpl.n	8019b86 <lv_page_start_edge_flash+0x52>
        a.end            = LV_PAGE_END_FLASH_SIZE;
 8019b46:	2206      	movs	r2, #6
 8019b48:	9205      	str	r2, [sp, #20]
        a.exec_cb        = (lv_anim_exec_xcb_t)edge_flash_anim;
 8019b4a:	4a10      	ldr	r2, [pc, #64]	; (8019b8c <lv_page_start_edge_flash+0x58>)
 8019b4c:	9201      	str	r2, [sp, #4]
        a.path_cb        = lv_anim_path_linear;
 8019b4e:	4a10      	ldr	r2, [pc, #64]	; (8019b90 <lv_page_start_edge_flash+0x5c>)
 8019b50:	9202      	str	r2, [sp, #8]
        a.ready_cb       = edge_flash_anim_end;
 8019b52:	4a10      	ldr	r2, [pc, #64]	; (8019b94 <lv_page_start_edge_flash+0x60>)
 8019b54:	9203      	str	r2, [sp, #12]
        a.playback       = 1;
 8019b56:	f89d 2024 	ldrb.w	r2, [sp, #36]	; 0x24
        a.var            = page;
 8019b5a:	9400      	str	r4, [sp, #0]
        a.start          = 0;
 8019b5c:	2300      	movs	r3, #0
        a.repeat         = 0;
 8019b5e:	f042 0201 	orr.w	r2, r2, #1
        a.time           = LV_PAGE_END_ANIM_TIME;
 8019b62:	f44f 7196 	mov.w	r1, #300	; 0x12c
        a.repeat         = 0;
 8019b66:	f363 0241 	bfi	r2, r3, #1, #1
        lv_anim_create(&a);
 8019b6a:	4668      	mov	r0, sp
        a.start          = 0;
 8019b6c:	9304      	str	r3, [sp, #16]
        a.act_time       = 0;
 8019b6e:	f8ad 301a 	strh.w	r3, [sp, #26]
        a.time           = LV_PAGE_END_ANIM_TIME;
 8019b72:	f8ad 1018 	strh.w	r1, [sp, #24]
        a.playback_pause = LV_PAGE_END_ANIM_WAIT_TIME;
 8019b76:	f8ad 101c 	strh.w	r1, [sp, #28]
        a.repeat         = 0;
 8019b7a:	f88d 2024 	strb.w	r2, [sp, #36]	; 0x24
        a.repeat_pause   = 0;
 8019b7e:	f8ad 301e 	strh.w	r3, [sp, #30]
        lv_anim_create(&a);
 8019b82:	f7fb fb47 	bl	8015214 <lv_anim_create>
}
 8019b86:	b00a      	add	sp, #40	; 0x28
 8019b88:	bd10      	pop	{r4, pc}
 8019b8a:	bf00      	nop
 8019b8c:	0801928f 	.word	0x0801928f
 8019b90:	0801501d 	.word	0x0801501d
 8019b94:	0801926b 	.word	0x0801926b

08019b98 <lv_page_scrollable_signal>:
{
 8019b98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    res = ancestor_signal(scrl, sign, param);
 8019b9c:	4bc1      	ldr	r3, [pc, #772]	; (8019ea4 <lv_page_scrollable_signal+0x30c>)
{
 8019b9e:	b08f      	sub	sp, #60	; 0x3c
    res = ancestor_signal(scrl, sign, param);
 8019ba0:	681b      	ldr	r3, [r3, #0]
{
 8019ba2:	9200      	str	r2, [sp, #0]
 8019ba4:	4680      	mov	r8, r0
 8019ba6:	460d      	mov	r5, r1
    res = ancestor_signal(scrl, sign, param);
 8019ba8:	4798      	blx	r3
    if(res != LV_RES_OK) return res;
 8019baa:	2801      	cmp	r0, #1
    res = ancestor_signal(scrl, sign, param);
 8019bac:	9005      	str	r0, [sp, #20]
    if(res != LV_RES_OK) return res;
 8019bae:	f040 8160 	bne.w	8019e72 <lv_page_scrollable_signal+0x2da>
    lv_obj_t * page               = lv_obj_get_parent(scrl);
 8019bb2:	4640      	mov	r0, r8
 8019bb4:	f7f6 fb6a 	bl	801028c <lv_obj_get_parent>
 8019bb8:	4607      	mov	r7, r0
    const lv_style_t * page_style = lv_obj_get_style(page);
 8019bba:	f7f6 fbf5 	bl	80103a8 <lv_obj_get_style>
 8019bbe:	4606      	mov	r6, r0
    lv_page_ext_t * page_ext      = lv_obj_get_ext_attr(page);
 8019bc0:	4638      	mov	r0, r7
 8019bc2:	f7f6 fcdc 	bl	801057e <lv_obj_get_ext_attr>
    if(sign == LV_SIGNAL_CORD_CHG) {
 8019bc6:	2d02      	cmp	r5, #2
    lv_page_ext_t * page_ext      = lv_obj_get_ext_attr(page);
 8019bc8:	4604      	mov	r4, r0
    if(sign == LV_SIGNAL_CORD_CHG) {
 8019bca:	f040 816d 	bne.w	8019ea8 <lv_page_scrollable_signal+0x310>
        lv_coord_t new_x = lv_obj_get_x(scrl);
 8019bce:	4640      	mov	r0, r8
 8019bd0:	f7f6 fbcd 	bl	801036e <lv_obj_get_x>
 8019bd4:	4682      	mov	sl, r0
        lv_coord_t new_y = lv_obj_get_y(scrl);
 8019bd6:	4640      	mov	r0, r8
 8019bd8:	f7f6 fbcf 	bl	801037a <lv_obj_get_y>
        lv_obj_get_coords(scrl, &scrl_coords);
 8019bdc:	a90c      	add	r1, sp, #48	; 0x30
        lv_coord_t new_y = lv_obj_get_y(scrl);
 8019bde:	9006      	str	r0, [sp, #24]
        lv_obj_get_coords(scrl, &scrl_coords);
 8019be0:	4640      	mov	r0, r8
 8019be2:	f7f6 fbbe 	bl	8010362 <lv_obj_get_coords>
        lv_obj_get_coords(page, &page_coords);
 8019be6:	a90a      	add	r1, sp, #40	; 0x28
 8019be8:	4638      	mov	r0, r7
 8019bea:	f7f6 fbba 	bl	8010362 <lv_obj_get_coords>
        lv_coord_t diff_x      = scrl->coords.x1 - ori_coords->x1;
 8019bee:	9b00      	ldr	r3, [sp, #0]
 8019bf0:	f8b8 1010 	ldrh.w	r1, [r8, #16]
 8019bf4:	8818      	ldrh	r0, [r3, #0]
        lv_coord_t vpad        = page_style->body.padding.top + page_style->body.padding.bottom;
 8019bf6:	f8b6 b018 	ldrh.w	fp, [r6, #24]
 8019bfa:	f8b6 9016 	ldrh.w	r9, [r6, #22]
        lv_coord_t hpad        = page_style->body.padding.left + page_style->body.padding.right;
 8019bfe:	8b75      	ldrh	r5, [r6, #26]
        lv_coord_t diff_x      = scrl->coords.x1 - ori_coords->x1;
 8019c00:	1a09      	subs	r1, r1, r0
 8019c02:	b28b      	uxth	r3, r1
 8019c04:	9301      	str	r3, [sp, #4]
        lv_coord_t diff_y      = scrl->coords.y1 - ori_coords->y1;
 8019c06:	9b00      	ldr	r3, [sp, #0]
 8019c08:	f8b8 1012 	ldrh.w	r1, [r8, #18]
 8019c0c:	8858      	ldrh	r0, [r3, #2]
 8019c0e:	1a09      	subs	r1, r1, r0
 8019c10:	b28b      	uxth	r3, r1
 8019c12:	9302      	str	r3, [sp, #8]
        lv_coord_t hpad        = page_style->body.padding.left + page_style->body.padding.right;
 8019c14:	8bb3      	ldrh	r3, [r6, #28]
        lv_coord_t vpad        = page_style->body.padding.top + page_style->body.padding.bottom;
 8019c16:	44d9      	add	r9, fp
        lv_coord_t hpad        = page_style->body.padding.left + page_style->body.padding.right;
 8019c18:	441d      	add	r5, r3
        lv_obj_t * page_parent = lv_obj_get_parent(page);
 8019c1a:	4638      	mov	r0, r7
        lv_coord_t vpad        = page_style->body.padding.top + page_style->body.padding.bottom;
 8019c1c:	fa0f f389 	sxth.w	r3, r9
 8019c20:	9307      	str	r3, [sp, #28]
        lv_obj_t * page_parent = lv_obj_get_parent(page);
 8019c22:	f7f6 fb33 	bl	801028c <lv_obj_get_parent>
 8019c26:	4683      	mov	fp, r0
        lv_indev_t * indev = lv_indev_get_act();
 8019c28:	f7f5 fc44 	bl	800f4b4 <lv_indev_get_act>
        lv_indev_get_vect(indev, &drag_vect);
 8019c2c:	a909      	add	r1, sp, #36	; 0x24
        lv_indev_t * indev = lv_indev_get_act();
 8019c2e:	4681      	mov	r9, r0
        lv_indev_get_vect(indev, &drag_vect);
 8019c30:	f7f5 fc70 	bl	800f514 <lv_indev_get_vect>
        if(page_ext->scroll_prop && page_ext->scroll_prop_ip == 0 && lv_indev_is_dragging(indev) == false) {
 8019c34:	f894 302e 	ldrb.w	r3, [r4, #46]	; 0x2e
 8019c38:	f003 0303 	and.w	r3, r3, #3
 8019c3c:	2b01      	cmp	r3, #1
        lv_coord_t hpad        = page_style->body.padding.left + page_style->body.padding.right;
 8019c3e:	b22d      	sxth	r5, r5
        if(page_ext->scroll_prop && page_ext->scroll_prop_ip == 0 && lv_indev_is_dragging(indev) == false) {
 8019c40:	d127      	bne.n	8019c92 <lv_page_scrollable_signal+0xfa>
 8019c42:	4648      	mov	r0, r9
 8019c44:	f7f5 fc59 	bl	800f4fa <lv_indev_is_dragging>
 8019c48:	bb18      	cbnz	r0, 8019c92 <lv_page_scrollable_signal+0xfa>
            if(((drag_vect.y > 0 && scrl_coords.y1 == page_coords.y1 + page_style->body.padding.top) ||
 8019c4a:	f9bd 3026 	ldrsh.w	r3, [sp, #38]	; 0x26
 8019c4e:	2b00      	cmp	r3, #0
 8019c50:	dd67      	ble.n	8019d22 <lv_page_scrollable_signal+0x18a>
 8019c52:	f9bd 302a 	ldrsh.w	r3, [sp, #42]	; 0x2a
 8019c56:	f9b6 1016 	ldrsh.w	r1, [r6, #22]
 8019c5a:	f9bd 2032 	ldrsh.w	r2, [sp, #50]	; 0x32
 8019c5e:	440b      	add	r3, r1
                (drag_vect.y < 0 && scrl_coords.y2 == page_coords.y2 - page_style->body.padding.bottom)) &&
 8019c60:	429a      	cmp	r2, r3
 8019c62:	d116      	bne.n	8019c92 <lv_page_scrollable_signal+0xfa>
               ((drag_vect.x > 0 && scrl_coords.x1 == page_coords.x1 + page_style->body.padding.left) ||
 8019c64:	f9bd 3024 	ldrsh.w	r3, [sp, #36]	; 0x24
                (drag_vect.y < 0 && scrl_coords.y2 == page_coords.y2 - page_style->body.padding.bottom)) &&
 8019c68:	2b00      	cmp	r3, #0
 8019c6a:	dd63      	ble.n	8019d34 <lv_page_scrollable_signal+0x19c>
               ((drag_vect.x > 0 && scrl_coords.x1 == page_coords.x1 + page_style->body.padding.left) ||
 8019c6c:	f9bd 3028 	ldrsh.w	r3, [sp, #40]	; 0x28
 8019c70:	f9b6 101a 	ldrsh.w	r1, [r6, #26]
 8019c74:	f9bd 2030 	ldrsh.w	r2, [sp, #48]	; 0x30
 8019c78:	440b      	add	r3, r1
                (drag_vect.x < 0 && scrl_coords.x2 == page_coords.x2 - page_style->body.padding.right))) {
 8019c7a:	429a      	cmp	r2, r3
 8019c7c:	d109      	bne.n	8019c92 <lv_page_scrollable_signal+0xfa>
                if(lv_obj_get_parent(page_parent) != NULL) { /*Do not propagate the scroll to a screen*/
 8019c7e:	4658      	mov	r0, fp
 8019c80:	f7f6 fb04 	bl	801028c <lv_obj_get_parent>
 8019c84:	b128      	cbz	r0, 8019c92 <lv_page_scrollable_signal+0xfa>
                    page_ext->scroll_prop_ip = 1;
 8019c86:	f894 302e 	ldrb.w	r3, [r4, #46]	; 0x2e
 8019c8a:	f043 0302 	orr.w	r3, r3, #2
 8019c8e:	f884 302e 	strb.w	r3, [r4, #46]	; 0x2e
 8019c92:	f9bd 2028 	ldrsh.w	r2, [sp, #40]	; 0x28
 8019c96:	f9bd 002c 	ldrsh.w	r0, [sp, #44]	; 0x2c
 8019c9a:	f9bd c034 	ldrsh.w	ip, [sp, #52]	; 0x34
 8019c9e:	f9bd e030 	ldrsh.w	lr, [sp, #48]	; 0x30
    return area_p->x2 - area_p->x1 + 1;
 8019ca2:	fa1f f982 	uxth.w	r9, r2
 8019ca6:	1c43      	adds	r3, r0, #1
 8019ca8:	f10c 0101 	add.w	r1, ip, #1
 8019cac:	eba3 0309 	sub.w	r3, r3, r9
 8019cb0:	b29b      	uxth	r3, r3
 8019cb2:	eba1 010e 	sub.w	r1, r1, lr
 8019cb6:	9303      	str	r3, [sp, #12]
 8019cb8:	b289      	uxth	r1, r1
        if(lv_area_get_width(&scrl_coords) + hpad <= lv_area_get_width(&page_coords)) {
 8019cba:	fa05 f381 	sxtah	r3, r5, r1
 8019cbe:	f9bd 500c 	ldrsh.w	r5, [sp, #12]
 8019cc2:	42ab      	cmp	r3, r5
 8019cc4:	dc3f      	bgt.n	8019d46 <lv_page_scrollable_signal+0x1ae>
            if(scrl_coords.x1 != page_coords.x1 + page_style->body.padding.left) {
 8019cc6:	f9b6 301a 	ldrsh.w	r3, [r6, #26]
 8019cca:	441a      	add	r2, r3
                new_x  = page_style->body.padding.left;
 8019ccc:	4596      	cmp	lr, r2
 8019cce:	bf16      	itet	ne
 8019cd0:	469a      	movne	sl, r3
 8019cd2:	2500      	moveq	r5, #0
 8019cd4:	2501      	movne	r5, #1
 8019cd6:	f9bd 3036 	ldrsh.w	r3, [sp, #54]	; 0x36
 8019cda:	f9bd 102a 	ldrsh.w	r1, [sp, #42]	; 0x2a
 8019cde:	f9bd e02e 	ldrsh.w	lr, [sp, #46]	; 0x2e
 8019ce2:	9303      	str	r3, [sp, #12]
    return area_p->y2 - area_p->y1 + 1;
 8019ce4:	1c58      	adds	r0, r3, #1
 8019ce6:	b28a      	uxth	r2, r1
 8019ce8:	f10e 0301 	add.w	r3, lr, #1
 8019cec:	f9bd c032 	ldrsh.w	ip, [sp, #50]	; 0x32
 8019cf0:	1a9b      	subs	r3, r3, r2
 8019cf2:	b29b      	uxth	r3, r3
 8019cf4:	9304      	str	r3, [sp, #16]
 8019cf6:	eba0 000c 	sub.w	r0, r0, ip
        if(lv_area_get_height(&scrl_coords) + vpad <= lv_area_get_height(&page_coords)) {
 8019cfa:	9b07      	ldr	r3, [sp, #28]
 8019cfc:	b280      	uxth	r0, r0
 8019cfe:	fa03 f980 	sxtah	r9, r3, r0
 8019d02:	f9bd 3010 	ldrsh.w	r3, [sp, #16]
 8019d06:	4599      	cmp	r9, r3
 8019d08:	dc65      	bgt.n	8019dd6 <lv_page_scrollable_signal+0x23e>
            if(scrl_coords.y1 != page_coords.y1 + page_style->body.padding.top) {
 8019d0a:	f9b6 6016 	ldrsh.w	r6, [r6, #22]
 8019d0e:	4431      	add	r1, r6
 8019d10:	458c      	cmp	ip, r1
 8019d12:	d16e      	bne.n	8019df2 <lv_page_scrollable_signal+0x25a>
        if(refr_x || refr_y) {
 8019d14:	2d00      	cmp	r5, #0
 8019d16:	f000 80a9 	beq.w	8019e6c <lv_page_scrollable_signal+0x2d4>
 8019d1a:	9e06      	ldr	r6, [sp, #24]
 8019d1c:	f04f 0900 	mov.w	r9, #0
 8019d20:	e085      	b.n	8019e2e <lv_page_scrollable_signal+0x296>
            if(((drag_vect.y > 0 && scrl_coords.y1 == page_coords.y1 + page_style->body.padding.top) ||
 8019d22:	d0b6      	beq.n	8019c92 <lv_page_scrollable_signal+0xfa>
                (drag_vect.y < 0 && scrl_coords.y2 == page_coords.y2 - page_style->body.padding.bottom)) &&
 8019d24:	f9bd 302e 	ldrsh.w	r3, [sp, #46]	; 0x2e
 8019d28:	f9b6 1018 	ldrsh.w	r1, [r6, #24]
 8019d2c:	f9bd 2036 	ldrsh.w	r2, [sp, #54]	; 0x36
 8019d30:	1a5b      	subs	r3, r3, r1
 8019d32:	e795      	b.n	8019c60 <lv_page_scrollable_signal+0xc8>
               ((drag_vect.x > 0 && scrl_coords.x1 == page_coords.x1 + page_style->body.padding.left) ||
 8019d34:	d0ad      	beq.n	8019c92 <lv_page_scrollable_signal+0xfa>
                (drag_vect.x < 0 && scrl_coords.x2 == page_coords.x2 - page_style->body.padding.right))) {
 8019d36:	f9bd 302c 	ldrsh.w	r3, [sp, #44]	; 0x2c
 8019d3a:	f9b6 101c 	ldrsh.w	r1, [r6, #28]
 8019d3e:	f9bd 2034 	ldrsh.w	r2, [sp, #52]	; 0x34
 8019d42:	1a5b      	subs	r3, r3, r1
 8019d44:	e799      	b.n	8019c7a <lv_page_scrollable_signal+0xe2>
            if(page_ext->scroll_prop_ip) {
 8019d46:	f894 502e 	ldrb.w	r5, [r4, #46]	; 0x2e
 8019d4a:	f015 0502 	ands.w	r5, r5, #2
 8019d4e:	d00c      	beq.n	8019d6a <lv_page_scrollable_signal+0x1d2>
                if(drag_vect.x == diff_x) { /*`scrl` is bouncing: drag pos. it somewhere and here it
 8019d50:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
 8019d54:	9a01      	ldr	r2, [sp, #4]
 8019d56:	429a      	cmp	r2, r3
 8019d58:	d139      	bne.n	8019dce <lv_page_scrollable_signal+0x236>
                    new_x  = ori_coords->x1 - page_coords.x1;
 8019d5a:	9b00      	ldr	r3, [sp, #0]
 8019d5c:	881b      	ldrh	r3, [r3, #0]
 8019d5e:	eba3 0909 	sub.w	r9, r3, r9
 8019d62:	fa0f fa89 	sxth.w	sl, r9
                refr_x = true;
 8019d66:	2501      	movs	r5, #1
 8019d68:	e7b5      	b.n	8019cd6 <lv_page_scrollable_signal+0x13e>
            else if(scrl_coords.x2 < page_coords.x2 - page_style->body.padding.right) {
 8019d6a:	f9b6 901c 	ldrsh.w	r9, [r6, #28]
 8019d6e:	eba0 0009 	sub.w	r0, r0, r9
 8019d72:	4584      	cmp	ip, r0
 8019d74:	da15      	bge.n	8019da2 <lv_page_scrollable_signal+0x20a>
                new_x = lv_area_get_width(&page_coords) - lv_area_get_width(&scrl_coords) -
 8019d76:	9b03      	ldr	r3, [sp, #12]
                   page_ext->edge_flash.right_ip == 0 && page_ext->edge_flash.top_ip == 0 &&
 8019d78:	f894 5028 	ldrb.w	r5, [r4, #40]	; 0x28
                new_x = lv_area_get_width(&page_coords) - lv_area_get_width(&scrl_coords) -
 8019d7c:	1a5b      	subs	r3, r3, r1
                if(page_ext->edge_flash.enabled && page_ext->edge_flash.left_ip == 0 &&
 8019d7e:	f005 051f 	and.w	r5, r5, #31
                new_x = lv_area_get_width(&page_coords) - lv_area_get_width(&scrl_coords) -
 8019d82:	eba3 0909 	sub.w	r9, r3, r9
                if(page_ext->edge_flash.enabled && page_ext->edge_flash.left_ip == 0 &&
 8019d86:	2d01      	cmp	r5, #1
                new_x = lv_area_get_width(&page_coords) - lv_area_get_width(&scrl_coords) -
 8019d88:	fa0f fa89 	sxth.w	sl, r9
                if(page_ext->edge_flash.enabled && page_ext->edge_flash.left_ip == 0 &&
 8019d8c:	d1eb      	bne.n	8019d66 <lv_page_scrollable_signal+0x1ce>
                    lv_page_start_edge_flash(page);
 8019d8e:	4638      	mov	r0, r7
 8019d90:	f7ff fed0 	bl	8019b34 <lv_page_start_edge_flash>
                    page_ext->edge_flash.right_ip = 1;
 8019d94:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 8019d98:	f043 0308 	orr.w	r3, r3, #8
 8019d9c:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
 8019da0:	e799      	b.n	8019cd6 <lv_page_scrollable_signal+0x13e>
            } else if(scrl_coords.x1 > page_coords.x1 + page_style->body.padding.left) {
 8019da2:	f9b6 901a 	ldrsh.w	r9, [r6, #26]
 8019da6:	444a      	add	r2, r9
 8019da8:	4596      	cmp	lr, r2
 8019daa:	dd94      	ble.n	8019cd6 <lv_page_scrollable_signal+0x13e>
                   page_ext->edge_flash.right_ip == 0 && page_ext->edge_flash.top_ip == 0 &&
 8019dac:	f894 5028 	ldrb.w	r5, [r4, #40]	; 0x28
                if(page_ext->edge_flash.enabled && page_ext->edge_flash.left_ip == 0 &&
 8019db0:	f005 051f 	and.w	r5, r5, #31
 8019db4:	2d01      	cmp	r5, #1
 8019db6:	d10c      	bne.n	8019dd2 <lv_page_scrollable_signal+0x23a>
                    lv_page_start_edge_flash(page);
 8019db8:	4638      	mov	r0, r7
 8019dba:	f7ff febb 	bl	8019b34 <lv_page_start_edge_flash>
                    page_ext->edge_flash.left_ip = 1;
 8019dbe:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 8019dc2:	f043 0310 	orr.w	r3, r3, #16
 8019dc6:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
                new_x  = page_style->body.padding.left; /*Left align*/
 8019dca:	46ca      	mov	sl, r9
 8019dcc:	e783      	b.n	8019cd6 <lv_page_scrollable_signal+0x13e>
        bool refr_x      = false;
 8019dce:	2500      	movs	r5, #0
 8019dd0:	e781      	b.n	8019cd6 <lv_page_scrollable_signal+0x13e>
                new_x  = page_style->body.padding.left; /*Left align*/
 8019dd2:	46ca      	mov	sl, r9
 8019dd4:	e7c7      	b.n	8019d66 <lv_page_scrollable_signal+0x1ce>
            if(page_ext->scroll_prop_ip) {
 8019dd6:	f894 902e 	ldrb.w	r9, [r4, #46]	; 0x2e
 8019dda:	f019 0f02 	tst.w	r9, #2
 8019dde:	d00b      	beq.n	8019df8 <lv_page_scrollable_signal+0x260>
                if(drag_vect.y == diff_y) { /*`scrl` is bouncing: drag pos. it somewhere and here it
 8019de0:	f8bd 3026 	ldrh.w	r3, [sp, #38]	; 0x26
 8019de4:	9902      	ldr	r1, [sp, #8]
 8019de6:	4299      	cmp	r1, r3
 8019de8:	d194      	bne.n	8019d14 <lv_page_scrollable_signal+0x17c>
                    new_y  = ori_coords->y1 - page_coords.y1;
 8019dea:	9b00      	ldr	r3, [sp, #0]
 8019dec:	885e      	ldrh	r6, [r3, #2]
 8019dee:	1ab2      	subs	r2, r6, r2
 8019df0:	b216      	sxth	r6, r2
                if(page_ext->edge_flash.enabled && page_ext->edge_flash.left_ip == 0 &&
 8019df2:	f04f 0901 	mov.w	r9, #1
 8019df6:	e01a      	b.n	8019e2e <lv_page_scrollable_signal+0x296>
            else if(scrl_coords.y2 < page_coords.y2 - page_style->body.padding.bottom) {
 8019df8:	f9b6 2018 	ldrsh.w	r2, [r6, #24]
 8019dfc:	9b03      	ldr	r3, [sp, #12]
 8019dfe:	ebae 0e02 	sub.w	lr, lr, r2
 8019e02:	4573      	cmp	r3, lr
 8019e04:	da39      	bge.n	8019e7a <lv_page_scrollable_signal+0x2e2>
                new_y = lv_area_get_height(&page_coords) - lv_area_get_height(&scrl_coords) -
 8019e06:	9b04      	ldr	r3, [sp, #16]
                   page_ext->edge_flash.right_ip == 0 && page_ext->edge_flash.top_ip == 0 &&
 8019e08:	f894 9028 	ldrb.w	r9, [r4, #40]	; 0x28
                new_y = lv_area_get_height(&page_coords) - lv_area_get_height(&scrl_coords) -
 8019e0c:	1a1b      	subs	r3, r3, r0
                if(page_ext->edge_flash.enabled && page_ext->edge_flash.left_ip == 0 &&
 8019e0e:	f009 091f 	and.w	r9, r9, #31
                new_y = lv_area_get_height(&page_coords) - lv_area_get_height(&scrl_coords) -
 8019e12:	1a9a      	subs	r2, r3, r2
                if(page_ext->edge_flash.enabled && page_ext->edge_flash.left_ip == 0 &&
 8019e14:	f1b9 0f01 	cmp.w	r9, #1
                new_y = lv_area_get_height(&page_coords) - lv_area_get_height(&scrl_coords) -
 8019e18:	b216      	sxth	r6, r2
                if(page_ext->edge_flash.enabled && page_ext->edge_flash.left_ip == 0 &&
 8019e1a:	d1ea      	bne.n	8019df2 <lv_page_scrollable_signal+0x25a>
                    lv_page_start_edge_flash(page);
 8019e1c:	4638      	mov	r0, r7
 8019e1e:	f7ff fe89 	bl	8019b34 <lv_page_start_edge_flash>
                    page_ext->edge_flash.bottom_ip = 1;
 8019e22:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 8019e26:	f043 0304 	orr.w	r3, r3, #4
                    page_ext->edge_flash.top_ip = 1;
 8019e2a:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
            lv_obj_set_pos(scrl, new_x, new_y);
 8019e2e:	4651      	mov	r1, sl
 8019e30:	4632      	mov	r2, r6
 8019e32:	4640      	mov	r0, r8
 8019e34:	f7f5 fd57 	bl	800f8e6 <lv_obj_set_pos>
            if(page_ext->scroll_prop_ip) {
 8019e38:	f894 302e 	ldrb.w	r3, [r4, #46]	; 0x2e
 8019e3c:	0799      	lsls	r1, r3, #30
 8019e3e:	d515      	bpl.n	8019e6c <lv_page_scrollable_signal+0x2d4>
                if(refr_y) lv_obj_set_y(page_parent, lv_obj_get_y(page_parent) + diff_y);
 8019e40:	f1b9 0f00 	cmp.w	r9, #0
 8019e44:	d008      	beq.n	8019e58 <lv_page_scrollable_signal+0x2c0>
 8019e46:	4658      	mov	r0, fp
 8019e48:	f7f6 fa97 	bl	801037a <lv_obj_get_y>
 8019e4c:	9b02      	ldr	r3, [sp, #8]
 8019e4e:	4403      	add	r3, r0
 8019e50:	b219      	sxth	r1, r3
 8019e52:	4658      	mov	r0, fp
 8019e54:	f7f5 fd94 	bl	800f980 <lv_obj_set_y>
                if(refr_x) lv_obj_set_x(page_parent, lv_obj_get_x(page_parent) + diff_x);
 8019e58:	b145      	cbz	r5, 8019e6c <lv_page_scrollable_signal+0x2d4>
 8019e5a:	4658      	mov	r0, fp
 8019e5c:	f7f6 fa87 	bl	801036e <lv_obj_get_x>
 8019e60:	9b01      	ldr	r3, [sp, #4]
 8019e62:	4403      	add	r3, r0
 8019e64:	b219      	sxth	r1, r3
 8019e66:	4658      	mov	r0, fp
 8019e68:	f7f5 fd80 	bl	800f96c <lv_obj_set_x>
        lv_page_sb_refresh(page);
 8019e6c:	4638      	mov	r0, r7
 8019e6e:	f7ff f84d 	bl	8018f0c <lv_page_sb_refresh>
}
 8019e72:	9805      	ldr	r0, [sp, #20]
 8019e74:	b00f      	add	sp, #60	; 0x3c
 8019e76:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            } else if(scrl_coords.y1 > page_coords.y1 + page_style->body.padding.top) {
 8019e7a:	f9b6 6016 	ldrsh.w	r6, [r6, #22]
 8019e7e:	4431      	add	r1, r6
 8019e80:	458c      	cmp	ip, r1
 8019e82:	f77f af47 	ble.w	8019d14 <lv_page_scrollable_signal+0x17c>
                   page_ext->edge_flash.right_ip == 0 && page_ext->edge_flash.top_ip == 0 &&
 8019e86:	f894 9028 	ldrb.w	r9, [r4, #40]	; 0x28
                if(page_ext->edge_flash.enabled && page_ext->edge_flash.left_ip == 0 &&
 8019e8a:	f009 091f 	and.w	r9, r9, #31
 8019e8e:	f1b9 0f01 	cmp.w	r9, #1
 8019e92:	d1ae      	bne.n	8019df2 <lv_page_scrollable_signal+0x25a>
                    lv_page_start_edge_flash(page);
 8019e94:	4638      	mov	r0, r7
 8019e96:	f7ff fe4d 	bl	8019b34 <lv_page_start_edge_flash>
                    page_ext->edge_flash.top_ip = 1;
 8019e9a:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 8019e9e:	f043 0302 	orr.w	r3, r3, #2
 8019ea2:	e7c2      	b.n	8019e2a <lv_page_scrollable_signal+0x292>
 8019ea4:	2000b258 	.word	0x2000b258
    } else if(sign == LV_SIGNAL_DRAG_END) {
 8019ea8:	2d0e      	cmp	r5, #14
 8019eaa:	d1e2      	bne.n	8019e72 <lv_page_scrollable_signal+0x2da>
        page_ext->scroll_prop_ip = 0;
 8019eac:	f890 302e 	ldrb.w	r3, [r0, #46]	; 0x2e
 8019eb0:	f36f 0341 	bfc	r3, #1, #1
 8019eb4:	f880 302e 	strb.w	r3, [r0, #46]	; 0x2e
        if(page_ext->sb.mode == LV_SB_MODE_DRAG) {
 8019eb8:	7f03      	ldrb	r3, [r0, #28]
 8019eba:	f003 031c 	and.w	r3, r3, #28
 8019ebe:	2b08      	cmp	r3, #8
 8019ec0:	d1d7      	bne.n	8019e72 <lv_page_scrollable_signal+0x2da>
            lv_disp_t * disp = lv_obj_get_disp(page);
 8019ec2:	4638      	mov	r0, r7
 8019ec4:	f7f5 fc7c 	bl	800f7c0 <lv_obj_get_disp>
            if(page_ext->sb.hor_draw) {
 8019ec8:	7f23      	ldrb	r3, [r4, #28]
 8019eca:	07da      	lsls	r2, r3, #31
            lv_disp_t * disp = lv_obj_get_disp(page);
 8019ecc:	4605      	mov	r5, r0
            if(page_ext->sb.hor_draw) {
 8019ece:	d522      	bpl.n	8019f16 <lv_page_scrollable_signal+0x37e>
                lv_area_copy(&sb_area_tmp, &page_ext->sb.hor_area);
 8019ed0:	f104 010c 	add.w	r1, r4, #12
 8019ed4:	a80c      	add	r0, sp, #48	; 0x30
 8019ed6:	f7ff f803 	bl	8018ee0 <lv_area_copy>
                sb_area_tmp.x1 += page->coords.x1;
 8019eda:	8a3a      	ldrh	r2, [r7, #16]
 8019edc:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
                sb_area_tmp.y1 += page->coords.y1;
 8019ee0:	f8bd 1032 	ldrh.w	r1, [sp, #50]	; 0x32
                sb_area_tmp.x1 += page->coords.x1;
 8019ee4:	4413      	add	r3, r2
 8019ee6:	f8ad 3030 	strh.w	r3, [sp, #48]	; 0x30
                sb_area_tmp.y1 += page->coords.y1;
 8019eea:	8a7b      	ldrh	r3, [r7, #18]
 8019eec:	4419      	add	r1, r3
 8019eee:	f8ad 1032 	strh.w	r1, [sp, #50]	; 0x32
                sb_area_tmp.x2 += page->coords.x1;
 8019ef2:	f8bd 1034 	ldrh.w	r1, [sp, #52]	; 0x34
 8019ef6:	440a      	add	r2, r1
 8019ef8:	f8ad 2034 	strh.w	r2, [sp, #52]	; 0x34
                sb_area_tmp.y2 += page->coords.y1;
 8019efc:	f8bd 2036 	ldrh.w	r2, [sp, #54]	; 0x36
                lv_inv_area(disp, &sb_area_tmp);
 8019f00:	a90c      	add	r1, sp, #48	; 0x30
                sb_area_tmp.y2 += page->coords.y1;
 8019f02:	4413      	add	r3, r2
                lv_inv_area(disp, &sb_area_tmp);
 8019f04:	4628      	mov	r0, r5
                sb_area_tmp.y2 += page->coords.y1;
 8019f06:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
                lv_inv_area(disp, &sb_area_tmp);
 8019f0a:	f7f6 fc70 	bl	80107ee <lv_inv_area>
                page_ext->sb.hor_draw = 0;
 8019f0e:	7f23      	ldrb	r3, [r4, #28]
 8019f10:	f36f 0300 	bfc	r3, #0, #1
 8019f14:	7723      	strb	r3, [r4, #28]
            if(page_ext->sb.ver_draw) {
 8019f16:	7f23      	ldrb	r3, [r4, #28]
 8019f18:	079b      	lsls	r3, r3, #30
 8019f1a:	d5aa      	bpl.n	8019e72 <lv_page_scrollable_signal+0x2da>
                lv_area_copy(&sb_area_tmp, &page_ext->sb.ver_area);
 8019f1c:	f104 0114 	add.w	r1, r4, #20
 8019f20:	a80c      	add	r0, sp, #48	; 0x30
 8019f22:	f7fe ffdd 	bl	8018ee0 <lv_area_copy>
                sb_area_tmp.x1 += page->coords.x1;
 8019f26:	8a3a      	ldrh	r2, [r7, #16]
 8019f28:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
                sb_area_tmp.y1 += page->coords.y1;
 8019f2c:	f8bd 1032 	ldrh.w	r1, [sp, #50]	; 0x32
                sb_area_tmp.x1 += page->coords.x1;
 8019f30:	4413      	add	r3, r2
 8019f32:	f8ad 3030 	strh.w	r3, [sp, #48]	; 0x30
                sb_area_tmp.y1 += page->coords.y1;
 8019f36:	8a7b      	ldrh	r3, [r7, #18]
 8019f38:	4419      	add	r1, r3
 8019f3a:	f8ad 1032 	strh.w	r1, [sp, #50]	; 0x32
                sb_area_tmp.x2 += page->coords.x1;
 8019f3e:	f8bd 1034 	ldrh.w	r1, [sp, #52]	; 0x34
 8019f42:	440a      	add	r2, r1
 8019f44:	f8ad 2034 	strh.w	r2, [sp, #52]	; 0x34
                sb_area_tmp.y2 += page->coords.y1;
 8019f48:	f8bd 2036 	ldrh.w	r2, [sp, #54]	; 0x36
                lv_inv_area(disp, &sb_area_tmp);
 8019f4c:	a90c      	add	r1, sp, #48	; 0x30
                sb_area_tmp.y2 += page->coords.y1;
 8019f4e:	4413      	add	r3, r2
                lv_inv_area(disp, &sb_area_tmp);
 8019f50:	4628      	mov	r0, r5
                sb_area_tmp.y2 += page->coords.y1;
 8019f52:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
                lv_inv_area(disp, &sb_area_tmp);
 8019f56:	f7f6 fc4a 	bl	80107ee <lv_inv_area>
                page_ext->sb.ver_draw = 0;
 8019f5a:	7f23      	ldrb	r3, [r4, #28]
 8019f5c:	f36f 0341 	bfc	r3, #1, #1
 8019f60:	7723      	strb	r3, [r4, #28]
 8019f62:	e786      	b.n	8019e72 <lv_page_scrollable_signal+0x2da>

08019f64 <inf_normalize>:
/**
 * Set the middle page for the roller if inifinte is enabled
 * @param scrl pointer to the roller's scrollable (lv_obj_t *)
 */
static void inf_normalize(void * scrl)
{
 8019f64:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019f68:	4604      	mov	r4, r0
    lv_obj_t * roller_scrl = (lv_obj_t *)scrl;
    lv_obj_t * roller      = lv_obj_get_parent(roller_scrl);
 8019f6a:	f7f6 f98f 	bl	801028c <lv_obj_get_parent>
 8019f6e:	4606      	mov	r6, r0
    lv_roller_ext_t * ext  = lv_obj_get_ext_attr(roller);
 8019f70:	f7f6 fb05 	bl	801057e <lv_obj_get_ext_attr>

    if(ext->mode == LV_ROLLER_MODE_INIFINITE) {
 8019f74:	f890 3044 	ldrb.w	r3, [r0, #68]	; 0x44
 8019f78:	07db      	lsls	r3, r3, #31
    lv_roller_ext_t * ext  = lv_obj_get_ext_attr(roller);
 8019f7a:	4605      	mov	r5, r0
    if(ext->mode == LV_ROLLER_MODE_INIFINITE) {
 8019f7c:	d52b      	bpl.n	8019fd6 <inf_normalize+0x72>
        uint16_t real_id_cnt = ext->ddlist.option_cnt / LV_ROLLER_INF_PAGES;

        ext->ddlist.sel_opt_id = ext->ddlist.sel_opt_id % real_id_cnt;
 8019f7e:	8f41      	ldrh	r1, [r0, #58]	; 0x3a
        uint16_t real_id_cnt = ext->ddlist.option_cnt / LV_ROLLER_INF_PAGES;
 8019f80:	8f03      	ldrh	r3, [r0, #56]	; 0x38
 8019f82:	2207      	movs	r2, #7
 8019f84:	fbb3 f3f2 	udiv	r3, r3, r2
        ext->ddlist.sel_opt_id = ext->ddlist.sel_opt_id % real_id_cnt;
 8019f88:	fbb1 f2f3 	udiv	r2, r1, r3
 8019f8c:	fb03 1212 	mls	r2, r3, r2, r1

        ext->ddlist.sel_opt_id += (LV_ROLLER_INF_PAGES / 2) * real_id_cnt; /*Select the middle page*/
 8019f90:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8019f94:	4413      	add	r3, r2
 8019f96:	8743      	strh	r3, [r0, #58]	; 0x3a

        /*Move to the new id*/
        const lv_style_t * style_label = lv_obj_get_style(ext->ddlist.label);
 8019f98:	6b00      	ldr	r0, [r0, #48]	; 0x30
 8019f9a:	f7f6 fa05 	bl	80103a8 <lv_obj_get_style>
 8019f9e:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8019fa0:	4680      	mov	r8, r0
        const lv_font_t * font         = style_label->text.font;
        lv_coord_t font_h              = lv_font_get_line_height(font);
        lv_coord_t h                   = lv_obj_get_height(roller);
 8019fa2:	4630      	mov	r0, r6
 8019fa4:	7a1f      	ldrb	r7, [r3, #8]
 8019fa6:	f7f6 f9f4 	bl	8010392 <lv_obj_get_height>

        lv_coord_t line_y1 = ext->ddlist.sel_opt_id * (font_h + style_label->text.line_space) +
                             ext->ddlist.label->coords.y1 - roller_scrl->coords.y1;
 8019faa:	6b2b      	ldr	r3, [r5, #48]	; 0x30
        lv_coord_t new_y = -line_y1 + (h - font_h) / 2;
 8019fac:	1bc1      	subs	r1, r0, r7
 8019fae:	2002      	movs	r0, #2
 8019fb0:	fb91 f1f0 	sdiv	r1, r1, r0
 8019fb4:	8a58      	ldrh	r0, [r3, #18]
 8019fb6:	8a63      	ldrh	r3, [r4, #18]
 8019fb8:	1ac0      	subs	r0, r0, r3
 8019fba:	1a09      	subs	r1, r1, r0
        lv_coord_t line_y1 = ext->ddlist.sel_opt_id * (font_h + style_label->text.line_space) +
 8019fbc:	f9b8 002a 	ldrsh.w	r0, [r8, #42]	; 0x2a
 8019fc0:	19c3      	adds	r3, r0, r7
 8019fc2:	8f68      	ldrh	r0, [r5, #58]	; 0x3a
 8019fc4:	fb10 f003 	smulbb	r0, r0, r3
        lv_coord_t new_y = -line_y1 + (h - font_h) / 2;
 8019fc8:	1a09      	subs	r1, r1, r0
        lv_obj_set_y(roller_scrl, new_y);
 8019fca:	b209      	sxth	r1, r1
 8019fcc:	4620      	mov	r0, r4
    }
}
 8019fce:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
        lv_obj_set_y(roller_scrl, new_y);
 8019fd2:	f7f5 bcd5 	b.w	800f980 <lv_obj_set_y>
 8019fd6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08019fda <scroll_anim_ready_cb>:

#if LV_USE_ANIMATION
static void scroll_anim_ready_cb(lv_anim_t * a)
{
    inf_normalize(a->var);
 8019fda:	6800      	ldr	r0, [r0, #0]
 8019fdc:	f7ff bfc2 	b.w	8019f64 <inf_normalize>

08019fe0 <refr_position>:
{
 8019fe0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8019fe4:	b08a      	sub	sp, #40	; 0x28
 8019fe6:	4607      	mov	r7, r0
 8019fe8:	460e      	mov	r6, r1
    lv_obj_t * roller_scrl         = lv_page_get_scrl(roller);
 8019fea:	f7ff fa06 	bl	80193fa <lv_page_get_scrl>
 8019fee:	4605      	mov	r5, r0
    lv_roller_ext_t * ext          = lv_obj_get_ext_attr(roller);
 8019ff0:	4638      	mov	r0, r7
 8019ff2:	f7f6 fac4 	bl	801057e <lv_obj_get_ext_attr>
 8019ff6:	4681      	mov	r9, r0
    const lv_style_t * style_label = lv_obj_get_style(ext->ddlist.label);
 8019ff8:	6b00      	ldr	r0, [r0, #48]	; 0x30
 8019ffa:	f7f6 f9d5 	bl	80103a8 <lv_obj_get_style>
 8019ffe:	6a43      	ldr	r3, [r0, #36]	; 0x24
 801a000:	4682      	mov	sl, r0
    lv_coord_t h                   = lv_obj_get_height(roller);
 801a002:	4638      	mov	r0, r7
 801a004:	f893 8008 	ldrb.w	r8, [r3, #8]
 801a008:	f7f6 f9c3 	bl	8010392 <lv_obj_get_height>
 801a00c:	4604      	mov	r4, r0
 801a00e:	4638      	mov	r0, r7
 801a010:	f7ff f9f8 	bl	8019404 <lv_page_get_anim_time>
 801a014:	4607      	mov	r7, r0
    if(anim_en == LV_ANIM_OFF || anim_time == 0) {
 801a016:	b106      	cbz	r6, 801a01a <refr_position+0x3a>
 801a018:	b910      	cbnz	r0, 801a020 <refr_position+0x40>
        inf_normalize(roller_scrl);
 801a01a:	4628      	mov	r0, r5
 801a01c:	f7ff ffa2 	bl	8019f64 <inf_normalize>
        id * (font_h + style_label->text.line_space) + ext->ddlist.label->coords.y1 - roller_scrl->coords.y1;
 801a020:	f8d9 3030 	ldr.w	r3, [r9, #48]	; 0x30
    lv_coord_t new_y = -line_y1 + (h - font_h) / 2;
 801a024:	2102      	movs	r1, #2
 801a026:	eba4 0408 	sub.w	r4, r4, r8
 801a02a:	fb94 f4f1 	sdiv	r4, r4, r1
 801a02e:	8a59      	ldrh	r1, [r3, #18]
 801a030:	8a6b      	ldrh	r3, [r5, #18]
 801a032:	1ac9      	subs	r1, r1, r3
 801a034:	1a64      	subs	r4, r4, r1
        id * (font_h + style_label->text.line_space) + ext->ddlist.label->coords.y1 - roller_scrl->coords.y1;
 801a036:	f9ba 102a 	ldrsh.w	r1, [sl, #42]	; 0x2a
 801a03a:	eb01 0308 	add.w	r3, r1, r8
 801a03e:	f8b9 103a 	ldrh.w	r1, [r9, #58]	; 0x3a
 801a042:	fb11 f103 	smulbb	r1, r1, r3
    lv_coord_t new_y = -line_y1 + (h - font_h) / 2;
 801a046:	1a64      	subs	r4, r4, r1
 801a048:	b224      	sxth	r4, r4
    if(anim_en == LV_ANIM_OFF || anim_time == 0) {
 801a04a:	b106      	cbz	r6, 801a04e <refr_position+0x6e>
 801a04c:	b937      	cbnz	r7, 801a05c <refr_position+0x7c>
        lv_obj_set_y(roller_scrl, new_y);
 801a04e:	4621      	mov	r1, r4
 801a050:	4628      	mov	r0, r5
 801a052:	f7f5 fc95 	bl	800f980 <lv_obj_set_y>
}
 801a056:	b00a      	add	sp, #40	; 0x28
 801a058:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        a.start          = lv_obj_get_y(roller_scrl);
 801a05c:	4628      	mov	r0, r5
        a.var            = roller_scrl;
 801a05e:	9500      	str	r5, [sp, #0]
        a.start          = lv_obj_get_y(roller_scrl);
 801a060:	f7f6 f98b 	bl	801037a <lv_obj_get_y>
        a.exec_cb        = (lv_anim_exec_xcb_t)lv_obj_set_y;
 801a064:	4b0e      	ldr	r3, [pc, #56]	; (801a0a0 <refr_position+0xc0>)
        a.playback       = 0;
 801a066:	f89d 2024 	ldrb.w	r2, [sp, #36]	; 0x24
        a.exec_cb        = (lv_anim_exec_xcb_t)lv_obj_set_y;
 801a06a:	9301      	str	r3, [sp, #4]
        a.path_cb        = lv_anim_path_linear;
 801a06c:	4b0d      	ldr	r3, [pc, #52]	; (801a0a4 <refr_position+0xc4>)
 801a06e:	9302      	str	r3, [sp, #8]
        a.ready_cb       = scroll_anim_ready_cb;
 801a070:	4b0d      	ldr	r3, [pc, #52]	; (801a0a8 <refr_position+0xc8>)
 801a072:	9303      	str	r3, [sp, #12]
        a.repeat         = 0;
 801a074:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
        a.act_time       = 0;
 801a078:	2300      	movs	r3, #0
        a.start          = lv_obj_get_y(roller_scrl);
 801a07a:	9004      	str	r0, [sp, #16]
        a.repeat         = 0;
 801a07c:	f363 0241 	bfi	r2, r3, #1, #1
        lv_anim_create(&a);
 801a080:	4668      	mov	r0, sp
        a.end            = new_y;
 801a082:	9405      	str	r4, [sp, #20]
        a.act_time       = 0;
 801a084:	f8ad 301a 	strh.w	r3, [sp, #26]
        a.time           = anim_time;
 801a088:	f8ad 7018 	strh.w	r7, [sp, #24]
        a.playback_pause = 0;
 801a08c:	f8ad 301c 	strh.w	r3, [sp, #28]
        a.repeat         = 0;
 801a090:	f88d 2024 	strb.w	r2, [sp, #36]	; 0x24
        a.repeat_pause   = 0;
 801a094:	f8ad 301e 	strh.w	r3, [sp, #30]
        lv_anim_create(&a);
 801a098:	f7fb f8bc 	bl	8015214 <lv_anim_create>
}
 801a09c:	e7db      	b.n	801a056 <refr_position+0x76>
 801a09e:	bf00      	nop
 801a0a0:	0800f981 	.word	0x0800f981
 801a0a4:	0801501d 	.word	0x0801501d
 801a0a8:	08019fdb 	.word	0x08019fdb

0801a0ac <lv_roller_scrl_signal>:
    res = ancestor_scrl_signal(roller_scrl, sign, param);
 801a0ac:	4b3d      	ldr	r3, [pc, #244]	; (801a1a4 <lv_roller_scrl_signal+0xf8>)
{
 801a0ae:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    res = ancestor_scrl_signal(roller_scrl, sign, param);
 801a0b2:	681b      	ldr	r3, [r3, #0]
{
 801a0b4:	4680      	mov	r8, r0
 801a0b6:	460f      	mov	r7, r1
    res = ancestor_scrl_signal(roller_scrl, sign, param);
 801a0b8:	4798      	blx	r3
    if(res != LV_RES_OK) return res;
 801a0ba:	2801      	cmp	r0, #1
    res = ancestor_scrl_signal(roller_scrl, sign, param);
 801a0bc:	4605      	mov	r5, r0
    if(res != LV_RES_OK) return res;
 801a0be:	d14c      	bne.n	801a15a <lv_roller_scrl_signal+0xae>
    lv_indev_t * indev    = lv_indev_get_act();
 801a0c0:	f7f5 f9f8 	bl	800f4b4 <lv_indev_get_act>
    int32_t id            = -1;
 801a0c4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    lv_indev_t * indev    = lv_indev_get_act();
 801a0c8:	4681      	mov	r9, r0
    lv_obj_t * roller     = lv_obj_get_parent(roller_scrl);
 801a0ca:	4640      	mov	r0, r8
    int32_t id            = -1;
 801a0cc:	9301      	str	r3, [sp, #4]
    lv_obj_t * roller     = lv_obj_get_parent(roller_scrl);
 801a0ce:	f7f6 f8dd 	bl	801028c <lv_obj_get_parent>
 801a0d2:	4604      	mov	r4, r0
    lv_roller_ext_t * ext = lv_obj_get_ext_attr(roller);
 801a0d4:	f7f6 fa53 	bl	801057e <lv_obj_get_ext_attr>
 801a0d8:	4606      	mov	r6, r0
    if(ext->ddlist.label == NULL)
 801a0da:	6b00      	ldr	r0, [r0, #48]	; 0x30
 801a0dc:	2800      	cmp	r0, #0
 801a0de:	d05e      	beq.n	801a19e <lv_roller_scrl_signal+0xf2>
    const lv_style_t * style_label = lv_obj_get_style(ext->ddlist.label);
 801a0e0:	f7f6 f962 	bl	80103a8 <lv_obj_get_style>
    if(sign == LV_SIGNAL_DRAG_END) {
 801a0e4:	2f0e      	cmp	r7, #14
 801a0e6:	d13c      	bne.n	801a162 <lv_roller_scrl_signal+0xb6>
        lv_coord_t label_y1   = ext->ddlist.label->coords.y1 - roller->coords.y1;
 801a0e8:	6b32      	ldr	r2, [r6, #48]	; 0x30
 801a0ea:	f9b4 c012 	ldrsh.w	ip, [r4, #18]
 801a0ee:	8a51      	ldrh	r1, [r2, #18]
        lv_coord_t label_unit = font_h + style_label->text.line_space;
 801a0f0:	6a42      	ldr	r2, [r0, #36]	; 0x24
 801a0f2:	f9b0 e02a 	ldrsh.w	lr, [r0, #42]	; 0x2a
        lv_coord_t mid        = (roller->coords.y2 - roller->coords.y1) / 2;
 801a0f6:	f9b4 3016 	ldrsh.w	r3, [r4, #22]
        lv_coord_t label_unit = font_h + style_label->text.line_space;
 801a0fa:	7a12      	ldrb	r2, [r2, #8]
        lv_coord_t label_y1   = ext->ddlist.label->coords.y1 - roller->coords.y1;
 801a0fc:	eba1 010c 	sub.w	r1, r1, ip
        id = (mid - label_y1 + style_label->text.line_space / 2) / label_unit;
 801a100:	b209      	sxth	r1, r1
        lv_coord_t mid        = (roller->coords.y2 - roller->coords.y1) / 2;
 801a102:	eba3 030c 	sub.w	r3, r3, ip
 801a106:	2702      	movs	r7, #2
        lv_coord_t label_unit = font_h + style_label->text.line_space;
 801a108:	4472      	add	r2, lr
        lv_coord_t mid        = (roller->coords.y2 - roller->coords.y1) / 2;
 801a10a:	fb93 f3f7 	sdiv	r3, r3, r7
        id = (mid - label_y1 + style_label->text.line_space / 2) / label_unit;
 801a10e:	1a5b      	subs	r3, r3, r1
 801a110:	fb9e f7f7 	sdiv	r7, lr, r7
 801a114:	b212      	sxth	r2, r2
 801a116:	443b      	add	r3, r7
 801a118:	fb93 f3f2 	sdiv	r3, r3, r2
        if(id < 0) id = 0;
 801a11c:	2b00      	cmp	r3, #0
 801a11e:	bfb8      	it	lt
 801a120:	2300      	movlt	r3, #0
 801a122:	9301      	str	r3, [sp, #4]
        if(id >= ext->ddlist.option_cnt) id = ext->ddlist.option_cnt - 1;
 801a124:	9a01      	ldr	r2, [sp, #4]
 801a126:	8f33      	ldrh	r3, [r6, #56]	; 0x38
 801a128:	4293      	cmp	r3, r2
 801a12a:	bfd8      	it	le
 801a12c:	f103 33ff 	addle.w	r3, r3, #4294967295	; 0xffffffff
        ext->ddlist.sel_opt_id     = id;
 801a130:	aa02      	add	r2, sp, #8
        if(id >= ext->ddlist.option_cnt) id = ext->ddlist.option_cnt - 1;
 801a132:	bfd8      	it	le
 801a134:	9301      	strle	r3, [sp, #4]
        ext->ddlist.sel_opt_id     = id;
 801a136:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 801a13a:	b29b      	uxth	r3, r3
 801a13c:	8773      	strh	r3, [r6, #58]	; 0x3a
        ext->ddlist.sel_opt_id_ori = id;
 801a13e:	87b3      	strh	r3, [r6, #60]	; 0x3c
        res                        = lv_event_send(roller, LV_EVENT_VALUE_CHANGED, &id);
 801a140:	210e      	movs	r1, #14
 801a142:	4620      	mov	r0, r4
 801a144:	f7f5 facc 	bl	800f6e0 <lv_event_send>
        if(res != LV_RES_OK) return res;
 801a148:	2801      	cmp	r0, #1
 801a14a:	d128      	bne.n	801a19e <lv_roller_scrl_signal+0xf2>
    if(id != -1) {
 801a14c:	9b01      	ldr	r3, [sp, #4]
 801a14e:	3301      	adds	r3, #1
 801a150:	d003      	beq.n	801a15a <lv_roller_scrl_signal+0xae>
        refr_position(roller, true);
 801a152:	2101      	movs	r1, #1
 801a154:	4620      	mov	r0, r4
 801a156:	f7ff ff43 	bl	8019fe0 <refr_position>
}
 801a15a:	4628      	mov	r0, r5
 801a15c:	b003      	add	sp, #12
 801a15e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    else if(sign == LV_SIGNAL_RELEASED) {
 801a162:	2f0a      	cmp	r7, #10
 801a164:	d114      	bne.n	801a190 <lv_roller_scrl_signal+0xe4>
        if(!lv_indev_is_dragging(indev)) {
 801a166:	4648      	mov	r0, r9
 801a168:	f7f5 f9c7 	bl	800f4fa <lv_indev_is_dragging>
 801a16c:	4607      	mov	r7, r0
 801a16e:	2800      	cmp	r0, #0
 801a170:	d1ec      	bne.n	801a14c <lv_roller_scrl_signal+0xa0>
            id = ext->ddlist.sel_opt_id;
 801a172:	8f73      	ldrh	r3, [r6, #58]	; 0x3a
 801a174:	9301      	str	r3, [sp, #4]
            lv_group_t * g = lv_obj_get_group(roller);
 801a176:	4620      	mov	r0, r4
 801a178:	f7f6 fa07 	bl	801058a <lv_obj_get_group>
 801a17c:	4606      	mov	r6, r0
            bool editing   = lv_group_get_editing(g);
 801a17e:	f7f5 f984 	bl	800f48a <lv_group_get_editing>
            if(editing) lv_group_set_editing(g, false);
 801a182:	2800      	cmp	r0, #0
 801a184:	d0e2      	beq.n	801a14c <lv_roller_scrl_signal+0xa0>
 801a186:	4639      	mov	r1, r7
 801a188:	4630      	mov	r0, r6
 801a18a:	f7f5 f95c 	bl	800f446 <lv_group_set_editing>
 801a18e:	e7dd      	b.n	801a14c <lv_roller_scrl_signal+0xa0>
    } else if(sign == LV_SIGNAL_PRESSED) {
 801a190:	2f07      	cmp	r7, #7
 801a192:	d1db      	bne.n	801a14c <lv_roller_scrl_signal+0xa0>
        lv_anim_del(roller_scrl, (lv_anim_exec_xcb_t)lv_obj_set_y);
 801a194:	4904      	ldr	r1, [pc, #16]	; (801a1a8 <lv_roller_scrl_signal+0xfc>)
 801a196:	4640      	mov	r0, r8
 801a198:	f7fb f80e 	bl	80151b8 <lv_anim_del>
 801a19c:	e7d6      	b.n	801a14c <lv_roller_scrl_signal+0xa0>
 801a19e:	4605      	mov	r5, r0
 801a1a0:	e7db      	b.n	801a15a <lv_roller_scrl_signal+0xae>
 801a1a2:	bf00      	nop
 801a1a4:	2000b25c 	.word	0x2000b25c
 801a1a8:	0800f981 	.word	0x0800f981

0801a1ac <refr_height>:
{
 801a1ac:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 801a1b0:	4604      	mov	r4, r0
    lv_roller_ext_t * ext = lv_obj_get_ext_attr(roller);
 801a1b2:	f7f6 f9e4 	bl	801057e <lv_obj_get_ext_attr>
 801a1b6:	4605      	mov	r5, r0
    if(ext->ddlist.label) {
 801a1b8:	6b00      	ldr	r0, [r0, #48]	; 0x30
 801a1ba:	bb20      	cbnz	r0, 801a206 <refr_height+0x5a>
    lv_align_t obj_align  = LV_ALIGN_IN_LEFT_MID;
 801a1bc:	2607      	movs	r6, #7
    lv_obj_set_height(lv_page_get_scrl(roller), lv_obj_get_height(ext->ddlist.label) + lv_obj_get_height(roller));
 801a1be:	4620      	mov	r0, r4
 801a1c0:	f7ff f91b 	bl	80193fa <lv_page_get_scrl>
 801a1c4:	4680      	mov	r8, r0
 801a1c6:	6b28      	ldr	r0, [r5, #48]	; 0x30
 801a1c8:	f7f6 f8e3 	bl	8010392 <lv_obj_get_height>
 801a1cc:	4607      	mov	r7, r0
 801a1ce:	4620      	mov	r0, r4
 801a1d0:	f7f6 f8df 	bl	8010392 <lv_obj_get_height>
 801a1d4:	1839      	adds	r1, r7, r0
 801a1d6:	b209      	sxth	r1, r1
 801a1d8:	4640      	mov	r0, r8
 801a1da:	f7f5 ffca 	bl	8010172 <lv_obj_set_height>
    lv_obj_align(ext->ddlist.label, NULL, obj_align, 0, 0);
 801a1de:	2300      	movs	r3, #0
 801a1e0:	9300      	str	r3, [sp, #0]
 801a1e2:	4619      	mov	r1, r3
 801a1e4:	4632      	mov	r2, r6
 801a1e6:	6b28      	ldr	r0, [r5, #48]	; 0x30
 801a1e8:	f7f5 fbd2 	bl	800f990 <lv_obj_align>
    lv_anim_del(lv_page_get_scrl(roller), (lv_anim_exec_xcb_t)lv_obj_set_y);
 801a1ec:	4620      	mov	r0, r4
 801a1ee:	f7ff f904 	bl	80193fa <lv_page_get_scrl>
 801a1f2:	490a      	ldr	r1, [pc, #40]	; (801a21c <refr_height+0x70>)
 801a1f4:	f7fa ffe0 	bl	80151b8 <lv_anim_del>
    lv_ddlist_set_selected(roller, ext->ddlist.sel_opt_id);
 801a1f8:	8f69      	ldrh	r1, [r5, #58]	; 0x3a
 801a1fa:	4620      	mov	r0, r4
}
 801a1fc:	b002      	add	sp, #8
 801a1fe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    lv_ddlist_set_selected(roller, ext->ddlist.sel_opt_id);
 801a202:	f7fd ba90 	b.w	8017726 <lv_ddlist_set_selected>
        lv_label_align_t label_align = lv_label_get_align(ext->ddlist.label);
 801a206:	f7fe fa29 	bl	801865c <lv_label_get_align>
        if(LV_LABEL_ALIGN_CENTER == label_align)
 801a20a:	2801      	cmp	r0, #1
 801a20c:	d003      	beq.n	801a216 <refr_height+0x6a>
        else if(LV_LABEL_ALIGN_RIGHT == label_align)
 801a20e:	2802      	cmp	r0, #2
 801a210:	d1d4      	bne.n	801a1bc <refr_height+0x10>
            obj_align = LV_ALIGN_IN_RIGHT_MID;
 801a212:	2608      	movs	r6, #8
 801a214:	e7d3      	b.n	801a1be <refr_height+0x12>
            obj_align = LV_ALIGN_CENTER;
 801a216:	2600      	movs	r6, #0
 801a218:	e7d1      	b.n	801a1be <refr_height+0x12>
 801a21a:	bf00      	nop
 801a21c:	0800f981 	.word	0x0800f981

0801a220 <lv_roller_design>:
{
 801a220:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    if(mode == LV_DESIGN_COVER_CHK) {
 801a224:	2a02      	cmp	r2, #2
{
 801a226:	b09a      	sub	sp, #104	; 0x68
 801a228:	4604      	mov	r4, r0
 801a22a:	460e      	mov	r6, r1
    if(mode == LV_DESIGN_COVER_CHK) {
 801a22c:	f000 815e 	beq.w	801a4ec <lv_roller_design+0x2cc>
    else if(mode == LV_DESIGN_DRAW_MAIN) {
 801a230:	2a00      	cmp	r2, #0
 801a232:	f040 80e6 	bne.w	801a402 <lv_roller_design+0x1e2>
        case LV_ROLLER_STYLE_BG: return lv_obj_get_style(roller);
 801a236:	f7f6 f8b7 	bl	80103a8 <lv_obj_get_style>
 801a23a:	4607      	mov	r7, r0
    lv_coord_t h = lv_obj_get_height(roller);
 801a23c:	4620      	mov	r0, r4
 801a23e:	f7f6 f8a8 	bl	8010392 <lv_obj_get_height>
    memcpy(dest, src, sizeof(lv_area_t));
 801a242:	4622      	mov	r2, r4
 801a244:	4680      	mov	r8, r0
 801a246:	f852 0f10 	ldr.w	r0, [r2, #16]!
 801a24a:	6851      	ldr	r1, [r2, #4]
    half_roller.x1 -= roller->ext_draw_pad; /*Add ext size too (e.g. because of shadow draw) */
 801a24c:	8ea2      	ldrh	r2, [r4, #52]	; 0x34
 801a24e:	ab09      	add	r3, sp, #36	; 0x24
 801a250:	c303      	stmia	r3!, {r0, r1}
 801a252:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
 801a256:	1a9b      	subs	r3, r3, r2
 801a258:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
    half_roller.x2 += roller->ext_draw_pad;
 801a25c:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
 801a260:	4413      	add	r3, r2
 801a262:	f8ad 3028 	strh.w	r3, [sp, #40]	; 0x28
    half_roller.y1 -= roller->ext_draw_pad;
 801a266:	f8bd 3026 	ldrh.w	r3, [sp, #38]	; 0x26
 801a26a:	1a9b      	subs	r3, r3, r2
 801a26c:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
    half_roller.y2 = roller->coords.y1 + h / 2;
 801a270:	8a63      	ldrh	r3, [r4, #18]
 801a272:	2502      	movs	r5, #2
 801a274:	fb98 f5f5 	sdiv	r5, r8, r5
 801a278:	b2ad      	uxth	r5, r5
 801a27a:	442b      	add	r3, r5
    union_ok = lv_area_intersect(&half_mask, &half_roller, mask);
 801a27c:	4632      	mov	r2, r6
 801a27e:	a909      	add	r1, sp, #36	; 0x24
 801a280:	a807      	add	r0, sp, #28
    half_roller.y2 = roller->coords.y1 + h / 2;
 801a282:	f8ad 302a 	strh.w	r3, [sp, #42]	; 0x2a
    union_ok = lv_area_intersect(&half_mask, &half_roller, mask);
 801a286:	f7fb f830 	bl	80152ea <lv_area_intersect>
    half_roller.x1 += roller->ext_draw_pad; /*Revert ext. size adding*/
 801a28a:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
 801a28c:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
 801a290:	441a      	add	r2, r3
 801a292:	f8ad 2024 	strh.w	r2, [sp, #36]	; 0x24
    half_roller.x2 -= roller->ext_draw_pad;
 801a296:	f8bd 2028 	ldrh.w	r2, [sp, #40]	; 0x28
 801a29a:	1ad2      	subs	r2, r2, r3
 801a29c:	f8ad 2028 	strh.w	r2, [sp, #40]	; 0x28
    half_roller.y1 += roller->ext_draw_pad;
 801a2a0:	f8bd 2026 	ldrh.w	r2, [sp, #38]	; 0x26
 801a2a4:	4413      	add	r3, r2
 801a2a6:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
    half_roller.y2 += style->body.radius;
 801a2aa:	88fa      	ldrh	r2, [r7, #6]
 801a2ac:	f8bd 302a 	ldrh.w	r3, [sp, #42]	; 0x2a
 801a2b0:	4413      	add	r3, r2
 801a2b2:	f8ad 302a 	strh.w	r3, [sp, #42]	; 0x2a
    if(union_ok) {
 801a2b6:	b140      	cbz	r0, 801a2ca <lv_roller_design+0xaa>
        lv_draw_rect(&half_roller, &half_mask, style, lv_obj_get_opa_scale(roller));
 801a2b8:	4620      	mov	r0, r4
 801a2ba:	f7f6 f8f8 	bl	80104ae <lv_obj_get_opa_scale>
 801a2be:	463a      	mov	r2, r7
 801a2c0:	4603      	mov	r3, r0
 801a2c2:	a907      	add	r1, sp, #28
 801a2c4:	a809      	add	r0, sp, #36	; 0x24
 801a2c6:	f7f8 fa1f 	bl	8012708 <lv_draw_rect>
    half_roller.x1 -= roller->ext_draw_pad; /*Add ext size too (e.g. because of shadow draw) */
 801a2ca:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
 801a2cc:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
 801a2d0:	1ad2      	subs	r2, r2, r3
 801a2d2:	f8ad 2024 	strh.w	r2, [sp, #36]	; 0x24
    half_roller.x2 += roller->ext_draw_pad;
 801a2d6:	f8bd 2028 	ldrh.w	r2, [sp, #40]	; 0x28
 801a2da:	441a      	add	r2, r3
 801a2dc:	f8ad 2028 	strh.w	r2, [sp, #40]	; 0x28
    half_roller.y2 = roller->coords.y2 + roller->ext_draw_pad;
 801a2e0:	8ae2      	ldrh	r2, [r4, #22]
 801a2e2:	4413      	add	r3, r2
 801a2e4:	f8ad 302a 	strh.w	r3, [sp, #42]	; 0x2a
    half_roller.y1 = roller->coords.y1 + h / 2;
 801a2e8:	8a63      	ldrh	r3, [r4, #18]
 801a2ea:	441d      	add	r5, r3
 801a2ec:	b2ad      	uxth	r5, r5
    if((h & 0x1) == 0) half_roller.y1++; /*With even height the pixels in the middle would be drawn twice*/
 801a2ee:	f018 0f01 	tst.w	r8, #1
 801a2f2:	bf08      	it	eq
 801a2f4:	3501      	addeq	r5, #1
    union_ok = lv_area_intersect(&half_mask, &half_roller, mask);
 801a2f6:	4632      	mov	r2, r6
 801a2f8:	a909      	add	r1, sp, #36	; 0x24
 801a2fa:	a807      	add	r0, sp, #28
    if((h & 0x1) == 0) half_roller.y1++; /*With even height the pixels in the middle would be drawn twice*/
 801a2fc:	f8ad 5026 	strh.w	r5, [sp, #38]	; 0x26
    union_ok = lv_area_intersect(&half_mask, &half_roller, mask);
 801a300:	f7fa fff3 	bl	80152ea <lv_area_intersect>
    half_roller.x1 += roller->ext_draw_pad; /*Revert ext. size adding*/
 801a304:	8ea2      	ldrh	r2, [r4, #52]	; 0x34
 801a306:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
 801a30a:	4413      	add	r3, r2
 801a30c:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
    half_roller.x2 -= roller->ext_draw_pad;
 801a310:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
 801a314:	1a9b      	subs	r3, r3, r2
 801a316:	f8ad 3028 	strh.w	r3, [sp, #40]	; 0x28
    half_roller.y2 -= roller->ext_draw_pad;
 801a31a:	f8bd 302a 	ldrh.w	r3, [sp, #42]	; 0x2a
 801a31e:	1a9b      	subs	r3, r3, r2
 801a320:	f8ad 302a 	strh.w	r3, [sp, #42]	; 0x2a
    half_roller.y1 -= style->body.radius;
 801a324:	88fa      	ldrh	r2, [r7, #6]
 801a326:	f8bd 3026 	ldrh.w	r3, [sp, #38]	; 0x26
 801a32a:	1a9b      	subs	r3, r3, r2
 801a32c:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
    if(union_ok) {
 801a330:	b1e0      	cbz	r0, 801a36c <lv_roller_design+0x14c>
        memcpy(&style_tmp, style, sizeof(lv_style_t));
 801a332:	463b      	mov	r3, r7
 801a334:	aa0b      	add	r2, sp, #44	; 0x2c
 801a336:	f107 0e38 	add.w	lr, r7, #56	; 0x38
 801a33a:	6818      	ldr	r0, [r3, #0]
 801a33c:	6859      	ldr	r1, [r3, #4]
 801a33e:	4615      	mov	r5, r2
 801a340:	c503      	stmia	r5!, {r0, r1}
 801a342:	3308      	adds	r3, #8
 801a344:	4573      	cmp	r3, lr
 801a346:	462a      	mov	r2, r5
 801a348:	d1f7      	bne.n	801a33a <lv_roller_design+0x11a>
 801a34a:	6818      	ldr	r0, [r3, #0]
 801a34c:	6028      	str	r0, [r5, #0]
        style_tmp.body.main_color = style->body.grad_color;
 801a34e:	88bb      	ldrh	r3, [r7, #4]
 801a350:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
        style_tmp.body.grad_color = style->body.main_color;
 801a354:	887b      	ldrh	r3, [r7, #2]
 801a356:	f8ad 3030 	strh.w	r3, [sp, #48]	; 0x30
        lv_draw_rect(&half_roller, &half_mask, &style_tmp, lv_obj_get_opa_scale(roller));
 801a35a:	4620      	mov	r0, r4
 801a35c:	f7f6 f8a7 	bl	80104ae <lv_obj_get_opa_scale>
 801a360:	aa0b      	add	r2, sp, #44	; 0x2c
 801a362:	4603      	mov	r3, r0
 801a364:	a907      	add	r1, sp, #28
 801a366:	a809      	add	r0, sp, #36	; 0x24
 801a368:	f7f8 f9ce 	bl	8012708 <lv_draw_rect>
        case LV_ROLLER_STYLE_BG: return lv_obj_get_style(roller);
 801a36c:	4620      	mov	r0, r4
 801a36e:	f7f6 f81b 	bl	80103a8 <lv_obj_get_style>
 801a372:	4682      	mov	sl, r0
        lv_opa_t opa_scale       = lv_obj_get_opa_scale(roller);
 801a374:	4620      	mov	r0, r4
 801a376:	f7f6 f89a 	bl	80104ae <lv_obj_get_opa_scale>
 801a37a:	4680      	mov	r8, r0
        lv_roller_ext_t * ext    = lv_obj_get_ext_attr(roller);
 801a37c:	4620      	mov	r0, r4
        const lv_font_t * font   = style->text.font;
 801a37e:	f8da 5024 	ldr.w	r5, [sl, #36]	; 0x24
        lv_roller_ext_t * ext    = lv_obj_get_ext_attr(roller);
 801a382:	f7f6 f8fc 	bl	801057e <lv_obj_get_ext_attr>
 801a386:	4607      	mov	r7, r0
        rect_area.y1 = roller->coords.y1 + lv_obj_get_height(roller) / 2 - font_h / 2 - style->text.line_space / 2;
 801a388:	4620      	mov	r0, r4
 801a38a:	f895 9008 	ldrb.w	r9, [r5, #8]
 801a38e:	8a65      	ldrh	r5, [r4, #18]
 801a390:	f7f5 ffff 	bl	8010392 <lv_obj_get_height>
 801a394:	2102      	movs	r1, #2
 801a396:	fb90 f3f1 	sdiv	r3, r0, r1
 801a39a:	442b      	add	r3, r5
 801a39c:	f9ba 202a 	ldrsh.w	r2, [sl, #42]	; 0x2a
 801a3a0:	fb92 f1f1 	sdiv	r1, r2, r1
 801a3a4:	1a5b      	subs	r3, r3, r1
 801a3a6:	eba3 0359 	sub.w	r3, r3, r9, lsr #1
        if((font_h & 0x1) && (style->text.line_space & 0x1)) rect_area.y1--; /*Compensate the two rounding error*/
 801a3aa:	f019 0f01 	tst.w	r9, #1
        rect_area.y1 = roller->coords.y1 + lv_obj_get_height(roller) / 2 - font_h / 2 - style->text.line_space / 2;
 801a3ae:	b29b      	uxth	r3, r3
        if((font_h & 0x1) && (style->text.line_space & 0x1)) rect_area.y1--; /*Compensate the two rounding error*/
 801a3b0:	fa1f f189 	uxth.w	r1, r9
 801a3b4:	d120      	bne.n	801a3f8 <lv_roller_design+0x1d8>
 801a3b6:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
        rect_area.y2 = rect_area.y1 + font_h + style->text.line_space - 1;
 801a3ba:	f8bd 3026 	ldrh.w	r3, [sp, #38]	; 0x26
 801a3be:	3b01      	subs	r3, #1
 801a3c0:	4413      	add	r3, r2
 801a3c2:	440b      	add	r3, r1
        lv_obj_get_coords(roller, &roller_coords);
 801a3c4:	4620      	mov	r0, r4
 801a3c6:	a90b      	add	r1, sp, #44	; 0x2c
        rect_area.y2 = rect_area.y1 + font_h + style->text.line_space - 1;
 801a3c8:	f8ad 302a 	strh.w	r3, [sp, #42]	; 0x2a
        lv_obj_get_coords(roller, &roller_coords);
 801a3cc:	f7f5 ffc9 	bl	8010362 <lv_obj_get_coords>
        lv_obj_get_inner_coords(roller, &roller_coords);
 801a3d0:	a90b      	add	r1, sp, #44	; 0x2c
 801a3d2:	4620      	mov	r0, r4
 801a3d4:	f7f6 f83a 	bl	801044c <lv_obj_get_inner_coords>
        rect_area.x1 = roller_coords.x1;
 801a3d8:	f8bd 302c 	ldrh.w	r3, [sp, #44]	; 0x2c
 801a3dc:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
        rect_area.x2 = roller_coords.x2;
 801a3e0:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
 801a3e4:	f8ad 3028 	strh.w	r3, [sp, #40]	; 0x28
        lv_draw_rect(&rect_area, mask, ext->ddlist.sel_style, opa_scale);
 801a3e8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801a3ea:	4643      	mov	r3, r8
 801a3ec:	4631      	mov	r1, r6
 801a3ee:	a809      	add	r0, sp, #36	; 0x24
 801a3f0:	f7f8 f98a 	bl	8012708 <lv_draw_rect>
    return true;
 801a3f4:	2001      	movs	r0, #1
 801a3f6:	e07a      	b.n	801a4ee <lv_roller_design+0x2ce>
        if((font_h & 0x1) && (style->text.line_space & 0x1)) rect_area.y1--; /*Compensate the two rounding error*/
 801a3f8:	07d0      	lsls	r0, r2, #31
 801a3fa:	bf48      	it	mi
 801a3fc:	f103 33ff 	addmi.w	r3, r3, #4294967295	; 0xffffffff
 801a400:	e7d9      	b.n	801a3b6 <lv_roller_design+0x196>
    else if(mode == LV_DESIGN_DRAW_POST) {
 801a402:	2a01      	cmp	r2, #1
 801a404:	d1f6      	bne.n	801a3f4 <lv_roller_design+0x1d4>
        case LV_ROLLER_STYLE_BG: return lv_obj_get_style(roller);
 801a406:	f7f5 ffcf 	bl	80103a8 <lv_obj_get_style>
 801a40a:	4607      	mov	r7, r0
        lv_roller_ext_t * ext    = lv_obj_get_ext_attr(roller);
 801a40c:	4620      	mov	r0, r4
 801a40e:	f7f6 f8b6 	bl	801057e <lv_obj_get_ext_attr>
 801a412:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a414:	4680      	mov	r8, r0
        lv_opa_t opa_scale       = lv_obj_get_opa_scale(roller);
 801a416:	4620      	mov	r0, r4
 801a418:	f893 a008 	ldrb.w	sl, [r3, #8]
 801a41c:	f7f6 f847 	bl	80104ae <lv_obj_get_opa_scale>
 801a420:	4681      	mov	r9, r0
        rect_area.y1 = roller->coords.y1 + lv_obj_get_height(roller) / 2 - font_h / 2 - style->text.line_space / 2;
 801a422:	4620      	mov	r0, r4
 801a424:	8a65      	ldrh	r5, [r4, #18]
 801a426:	f7f5 ffb4 	bl	8010392 <lv_obj_get_height>
 801a42a:	2102      	movs	r1, #2
 801a42c:	fb90 f3f1 	sdiv	r3, r0, r1
 801a430:	442b      	add	r3, r5
 801a432:	f9b7 202a 	ldrsh.w	r2, [r7, #42]	; 0x2a
 801a436:	fb92 f1f1 	sdiv	r1, r2, r1
 801a43a:	1a5b      	subs	r3, r3, r1
 801a43c:	eba3 035a 	sub.w	r3, r3, sl, lsr #1
 801a440:	b29b      	uxth	r3, r3
        if((font_h & 0x1) && (style->text.line_space & 0x1)) rect_area.y1--; /*Compensate the two rounding error*/
 801a442:	f01a 0f01 	tst.w	sl, #1
        rect_area.y1 = roller->coords.y1 + lv_obj_get_height(roller) / 2 - font_h / 2 - style->text.line_space / 2;
 801a446:	b218      	sxth	r0, r3
        if((font_h & 0x1) && (style->text.line_space & 0x1)) rect_area.y1--; /*Compensate the two rounding error*/
 801a448:	fa1f f18a 	uxth.w	r1, sl
 801a44c:	d145      	bne.n	801a4da <lv_roller_design+0x2ba>
        rect_area.y1 = roller->coords.y1 + lv_obj_get_height(roller) / 2 - font_h / 2 - style->text.line_space / 2;
 801a44e:	f8ad 001e 	strh.w	r0, [sp, #30]
        rect_area.y2 = rect_area.y1 + font_h + style->text.line_space - 1;
 801a452:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 801a456:	3b01      	subs	r3, #1
 801a458:	4413      	add	r3, r2
 801a45a:	440b      	add	r3, r1
 801a45c:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
        rect_area.x1 = roller->coords.x1;
 801a460:	8a23      	ldrh	r3, [r4, #16]
 801a462:	f8ad 301c 	strh.w	r3, [sp, #28]
        area_ok = lv_area_intersect(&mask_sel, mask, &rect_area);
 801a466:	aa07      	add	r2, sp, #28
        rect_area.x2 = roller->coords.x2;
 801a468:	8aa3      	ldrh	r3, [r4, #20]
 801a46a:	f8ad 3020 	strh.w	r3, [sp, #32]
        area_ok = lv_area_intersect(&mask_sel, mask, &rect_area);
 801a46e:	4631      	mov	r1, r6
 801a470:	a809      	add	r0, sp, #36	; 0x24
 801a472:	f7fa ff3a 	bl	80152ea <lv_area_intersect>
        if(area_ok) {
 801a476:	2800      	cmp	r0, #0
 801a478:	d0bc      	beq.n	801a3f4 <lv_roller_design+0x1d4>
        case LV_ROLLER_STYLE_SEL: return lv_ddlist_get_style(roller, LV_DDLIST_STYLE_SEL);
 801a47a:	2101      	movs	r1, #1
 801a47c:	4620      	mov	r0, r4
 801a47e:	f7fd faed 	bl	8017a5c <lv_ddlist_get_style>
 801a482:	4604      	mov	r4, r0
                lv_label_align_t label_align = lv_label_get_align(ext->ddlist.label);
 801a484:	f8d8 0030 	ldr.w	r0, [r8, #48]	; 0x30
 801a488:	f7fe f8e8 	bl	801865c <lv_label_get_align>
                if(LV_LABEL_ALIGN_CENTER == label_align) {
 801a48c:	2801      	cmp	r0, #1
 801a48e:	d02b      	beq.n	801a4e8 <lv_roller_design+0x2c8>
                    txt_align |= LV_TXT_FLAG_RIGHT;
 801a490:	2802      	cmp	r0, #2
 801a492:	bf14      	ite	ne
 801a494:	2500      	movne	r5, #0
 801a496:	2508      	moveq	r5, #8
            lv_style_copy(&new_style, style);
 801a498:	4639      	mov	r1, r7
 801a49a:	a80b      	add	r0, sp, #44	; 0x2c
 801a49c:	f7f6 fbe4 	bl	8010c68 <lv_style_copy>
            new_style.text.color = sel_style->text.color;
 801a4a0:	8c23      	ldrh	r3, [r4, #32]
 801a4a2:	f8ad 304c 	strh.w	r3, [sp, #76]	; 0x4c
            new_style.text.opa   = sel_style->text.opa;
 801a4a6:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
 801a4aa:	f88d 3058 	strb.w	r3, [sp, #88]	; 0x58
            lv_draw_label(&ext->ddlist.label->coords, &mask_sel, &new_style, opa_scale,
 801a4ae:	f8d8 4030 	ldr.w	r4, [r8, #48]	; 0x30
                          lv_label_get_text(ext->ddlist.label), txt_align, NULL, -1, -1, NULL);
 801a4b2:	4620      	mov	r0, r4
 801a4b4:	f7fe f8c6 	bl	8018644 <lv_label_get_text>
            lv_draw_label(&ext->ddlist.label->coords, &mask_sel, &new_style, opa_scale,
 801a4b8:	2300      	movs	r3, #0
 801a4ba:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801a4be:	9305      	str	r3, [sp, #20]
 801a4c0:	9204      	str	r2, [sp, #16]
 801a4c2:	9203      	str	r2, [sp, #12]
 801a4c4:	9302      	str	r3, [sp, #8]
 801a4c6:	e88d 0021 	stmia.w	sp, {r0, r5}
 801a4ca:	464b      	mov	r3, r9
 801a4cc:	aa0b      	add	r2, sp, #44	; 0x2c
 801a4ce:	a909      	add	r1, sp, #36	; 0x24
 801a4d0:	f104 0010 	add.w	r0, r4, #16
 801a4d4:	f7f7 fe82 	bl	80121dc <lv_draw_label>
 801a4d8:	e78c      	b.n	801a3f4 <lv_roller_design+0x1d4>
        if((font_h & 0x1) && (style->text.line_space & 0x1)) rect_area.y1--; /*Compensate the two rounding error*/
 801a4da:	f012 0f01 	tst.w	r2, #1
 801a4de:	d0b6      	beq.n	801a44e <lv_roller_design+0x22e>
 801a4e0:	3b01      	subs	r3, #1
 801a4e2:	f8ad 301e 	strh.w	r3, [sp, #30]
 801a4e6:	e7b4      	b.n	801a452 <lv_roller_design+0x232>
                    txt_align |= LV_TXT_FLAG_CENTER;
 801a4e8:	2504      	movs	r5, #4
 801a4ea:	e7d5      	b.n	801a498 <lv_roller_design+0x278>
        return false;
 801a4ec:	2000      	movs	r0, #0
}
 801a4ee:	b01a      	add	sp, #104	; 0x68
 801a4f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0801a4f4 <lv_roller_set_visible_row_count>:
{
 801a4f4:	b538      	push	{r3, r4, r5, lr}
 801a4f6:	460c      	mov	r4, r1
 801a4f8:	4605      	mov	r5, r0
    lv_roller_ext_t * ext          = lv_obj_get_ext_attr(roller);
 801a4fa:	f7f6 f840 	bl	801057e <lv_obj_get_ext_attr>
    const lv_style_t * style_label = lv_obj_get_style(ext->ddlist.label);
 801a4fe:	6b00      	ldr	r0, [r0, #48]	; 0x30
 801a500:	f7f5 ff52 	bl	80103a8 <lv_obj_get_style>
    uint8_t n_line_space           = (row_cnt > 1) ? row_cnt - 1 : 1;
 801a504:	2c01      	cmp	r4, #1
    lv_ddlist_set_fix_height(roller, lv_font_get_line_height(style_label->text.font) * row_cnt +
 801a506:	6a42      	ldr	r2, [r0, #36]	; 0x24
 801a508:	8d41      	ldrh	r1, [r0, #42]	; 0x2a
 801a50a:	7a12      	ldrb	r2, [r2, #8]
    uint8_t n_line_space           = (row_cnt > 1) ? row_cnt - 1 : 1;
 801a50c:	bf86      	itte	hi
 801a50e:	f104 33ff 	addhi.w	r3, r4, #4294967295	; 0xffffffff
 801a512:	b2db      	uxtbhi	r3, r3
 801a514:	2301      	movls	r3, #1
    lv_ddlist_set_fix_height(roller, lv_font_get_line_height(style_label->text.font) * row_cnt +
 801a516:	fb11 f103 	smulbb	r1, r1, r3
 801a51a:	fb02 1104 	mla	r1, r2, r4, r1
 801a51e:	4628      	mov	r0, r5
 801a520:	b209      	sxth	r1, r1
}
 801a522:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    lv_ddlist_set_fix_height(roller, lv_font_get_line_height(style_label->text.font) * row_cnt +
 801a526:	f7fd b91c 	b.w	8017762 <lv_ddlist_set_fix_height>
	...

0801a52c <lv_roller_create>:
{
 801a52c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801a52e:	460e      	mov	r6, r1
    lv_obj_t * new_roller = lv_ddlist_create(par, copy);
 801a530:	f7fd f97c 	bl	801782c <lv_ddlist_create>
    lv_mem_assert(new_roller);
 801a534:	4604      	mov	r4, r0
 801a536:	b900      	cbnz	r0, 801a53a <lv_roller_create+0xe>
 801a538:	e7fe      	b.n	801a538 <lv_roller_create+0xc>
    if(ancestor_scrl_signal == NULL) ancestor_scrl_signal = lv_obj_get_signal_cb(lv_page_get_scrl(new_roller));
 801a53a:	4d3d      	ldr	r5, [pc, #244]	; (801a630 <lv_roller_create+0x104>)
 801a53c:	682b      	ldr	r3, [r5, #0]
 801a53e:	b923      	cbnz	r3, 801a54a <lv_roller_create+0x1e>
 801a540:	f7fe ff5b 	bl	80193fa <lv_page_get_scrl>
 801a544:	f7f6 f817 	bl	8010576 <lv_obj_get_signal_cb>
 801a548:	6028      	str	r0, [r5, #0]
    if(ancestor_signal == NULL) ancestor_signal = lv_obj_get_signal_cb(new_roller);
 801a54a:	4d3a      	ldr	r5, [pc, #232]	; (801a634 <lv_roller_create+0x108>)
 801a54c:	682b      	ldr	r3, [r5, #0]
 801a54e:	b91b      	cbnz	r3, 801a558 <lv_roller_create+0x2c>
 801a550:	4620      	mov	r0, r4
 801a552:	f7f6 f810 	bl	8010576 <lv_obj_get_signal_cb>
 801a556:	6028      	str	r0, [r5, #0]
    lv_roller_ext_t * ext = lv_obj_allocate_ext_attr(new_roller, sizeof(lv_roller_ext_t));
 801a558:	2148      	movs	r1, #72	; 0x48
 801a55a:	4620      	mov	r0, r4
 801a55c:	f7f5 f928 	bl	800f7b0 <lv_obj_allocate_ext_attr>
    lv_mem_assert(ext);
 801a560:	4605      	mov	r5, r0
 801a562:	b900      	cbnz	r0, 801a566 <lv_roller_create+0x3a>
 801a564:	e7fe      	b.n	801a564 <lv_roller_create+0x38>
    ext->ddlist.draw_arrow = 0; /*Do not draw arrow by default*/
 801a566:	f890 303e 	ldrb.w	r3, [r0, #62]	; 0x3e
    lv_obj_set_signal_cb(new_roller, lv_roller_signal);
 801a56a:	4933      	ldr	r1, [pc, #204]	; (801a638 <lv_roller_create+0x10c>)
    ext->ddlist.draw_arrow = 0; /*Do not draw arrow by default*/
 801a56c:	f36f 0382 	bfc	r3, #2, #1
 801a570:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
    lv_obj_set_signal_cb(new_roller, lv_roller_signal);
 801a574:	4620      	mov	r0, r4
 801a576:	f7f5 f917 	bl	800f7a8 <lv_obj_set_signal_cb>
    lv_obj_set_design_cb(new_roller, lv_roller_design);
 801a57a:	4930      	ldr	r1, [pc, #192]	; (801a63c <lv_roller_create+0x110>)
 801a57c:	4620      	mov	r0, r4
 801a57e:	f7f5 f915 	bl	800f7ac <lv_obj_set_design_cb>
    if(copy == NULL) {
 801a582:	bbce      	cbnz	r6, 801a5f8 <lv_roller_create+0xcc>
        lv_obj_t * scrl = lv_page_get_scrl(new_roller);
 801a584:	4620      	mov	r0, r4
 801a586:	f7fe ff38 	bl	80193fa <lv_page_get_scrl>
        lv_obj_set_drag(scrl, true);                                  /*In ddlist it might be disabled*/
 801a58a:	2101      	movs	r1, #1
        lv_obj_t * scrl = lv_page_get_scrl(new_roller);
 801a58c:	4607      	mov	r7, r0
        lv_obj_set_drag(scrl, true);                                  /*In ddlist it might be disabled*/
 801a58e:	f7f5 f83e 	bl	800f60e <lv_obj_set_drag>
    lv_cont_set_fit2(lv_page_get_scrl(page), hor, ver);
 801a592:	4620      	mov	r0, r4
 801a594:	f7fe ff31 	bl	80193fa <lv_page_get_scrl>
 801a598:	2201      	movs	r2, #1
 801a59a:	4611      	mov	r1, r2
 801a59c:	4633      	mov	r3, r6
 801a59e:	9600      	str	r6, [sp, #0]
 801a5a0:	f7fc fb2b 	bl	8016bfa <lv_cont_set_fit4>
        lv_ddlist_open(new_roller, false);
 801a5a4:	4631      	mov	r1, r6
 801a5a6:	4620      	mov	r0, r4
 801a5a8:	f7fd fbb6 	bl	8017d18 <lv_ddlist_open>
    lv_page_set_anim_time(ddlist, anim_time);
 801a5ac:	21c8      	movs	r1, #200	; 0xc8
 801a5ae:	4620      	mov	r0, r4
 801a5b0:	f7fe feed 	bl	801938e <lv_page_set_anim_time>
        lv_ddlist_set_stay_open(new_roller, true);
 801a5b4:	2101      	movs	r1, #1
 801a5b6:	4620      	mov	r0, r4
 801a5b8:	f7fd f907 	bl	80177ca <lv_ddlist_set_stay_open>
        lv_roller_set_visible_row_count(new_roller, 3);
 801a5bc:	2103      	movs	r1, #3
 801a5be:	4620      	mov	r0, r4
 801a5c0:	f7ff ff98 	bl	801a4f4 <lv_roller_set_visible_row_count>
        lv_label_set_align(ext->ddlist.label, LV_LABEL_ALIGN_CENTER);
 801a5c4:	6b28      	ldr	r0, [r5, #48]	; 0x30
 801a5c6:	2101      	movs	r1, #1
 801a5c8:	f7fe f813 	bl	80185f2 <lv_label_set_align>
        lv_obj_set_signal_cb(scrl, lv_roller_scrl_signal);
 801a5cc:	491c      	ldr	r1, [pc, #112]	; (801a640 <lv_roller_create+0x114>)
 801a5ce:	4638      	mov	r0, r7
 801a5d0:	f7f5 f8ea 	bl	800f7a8 <lv_obj_set_signal_cb>
        lv_theme_t * th = lv_theme_get_current();
 801a5d4:	f000 f958 	bl	801a888 <lv_theme_get_current>
        if(th) {
 801a5d8:	4605      	mov	r5, r0
 801a5da:	b320      	cbz	r0, 801a626 <lv_roller_create+0xfa>
        case LV_ROLLER_STYLE_BG: lv_obj_set_style(roller, style); break;
 801a5dc:	f8d0 1158 	ldr.w	r1, [r0, #344]	; 0x158
 801a5e0:	4620      	mov	r0, r4
 801a5e2:	f7f5 fe77 	bl	80102d4 <lv_obj_set_style>
        case LV_ROLLER_STYLE_SEL: lv_ddlist_set_style(roller, LV_DDLIST_STYLE_SEL, style); break;
 801a5e6:	f8d5 215c 	ldr.w	r2, [r5, #348]	; 0x15c
 801a5ea:	2101      	movs	r1, #1
 801a5ec:	4620      	mov	r0, r4
 801a5ee:	f7fd f8f7 	bl	80177e0 <lv_ddlist_set_style>
}
 801a5f2:	4620      	mov	r0, r4
 801a5f4:	b003      	add	sp, #12
 801a5f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
        lv_roller_ext_t * copy_ext = lv_obj_get_ext_attr(copy);
 801a5f8:	4630      	mov	r0, r6
 801a5fa:	f7f5 ffc0 	bl	801057e <lv_obj_get_ext_attr>
        ext->mode                  = copy_ext->mode;
 801a5fe:	f895 3044 	ldrb.w	r3, [r5, #68]	; 0x44
 801a602:	f890 2044 	ldrb.w	r2, [r0, #68]	; 0x44
 801a606:	f362 0300 	bfi	r3, r2, #0, #1
 801a60a:	f885 3044 	strb.w	r3, [r5, #68]	; 0x44
        lv_obj_t * scrl = lv_page_get_scrl(new_roller);
 801a60e:	4620      	mov	r0, r4
 801a610:	f7fe fef3 	bl	80193fa <lv_page_get_scrl>
        lv_ddlist_open(new_roller, false);
 801a614:	2100      	movs	r1, #0
        lv_obj_t * scrl = lv_page_get_scrl(new_roller);
 801a616:	4605      	mov	r5, r0
        lv_ddlist_open(new_roller, false);
 801a618:	4620      	mov	r0, r4
 801a61a:	f7fd fb7d 	bl	8017d18 <lv_ddlist_open>
        lv_obj_set_signal_cb(scrl, lv_roller_scrl_signal);
 801a61e:	4908      	ldr	r1, [pc, #32]	; (801a640 <lv_roller_create+0x114>)
 801a620:	4628      	mov	r0, r5
 801a622:	f7f5 f8c1 	bl	800f7a8 <lv_obj_set_signal_cb>
        lv_obj_refresh_style(new_roller); /*Refresh the style with new signal function*/
 801a626:	4620      	mov	r0, r4
 801a628:	f7f5 fdab 	bl	8010182 <lv_obj_refresh_style>
 801a62c:	e7e1      	b.n	801a5f2 <lv_roller_create+0xc6>
 801a62e:	bf00      	nop
 801a630:	2000b25c 	.word	0x2000b25c
 801a634:	2000b260 	.word	0x2000b260
 801a638:	0801a6c1 	.word	0x0801a6c1
 801a63c:	0801a221 	.word	0x0801a221
 801a640:	0801a0ad 	.word	0x0801a0ad

0801a644 <lv_roller_set_style>:
{
 801a644:	b410      	push	{r4}
    switch(type) {
 801a646:	b121      	cbz	r1, 801a652 <lv_roller_set_style+0xe>
 801a648:	2901      	cmp	r1, #1
 801a64a:	d007      	beq.n	801a65c <lv_roller_set_style+0x18>
}
 801a64c:	f85d 4b04 	ldr.w	r4, [sp], #4
 801a650:	4770      	bx	lr
        case LV_ROLLER_STYLE_BG: lv_obj_set_style(roller, style); break;
 801a652:	4611      	mov	r1, r2
}
 801a654:	f85d 4b04 	ldr.w	r4, [sp], #4
        case LV_ROLLER_STYLE_BG: lv_obj_set_style(roller, style); break;
 801a658:	f7f5 be3c 	b.w	80102d4 <lv_obj_set_style>
}
 801a65c:	f85d 4b04 	ldr.w	r4, [sp], #4
        case LV_ROLLER_STYLE_SEL: lv_ddlist_set_style(roller, LV_DDLIST_STYLE_SEL, style); break;
 801a660:	f7fd b8be 	b.w	80177e0 <lv_ddlist_set_style>

0801a664 <lv_roller_get_selected>:
{
 801a664:	b538      	push	{r3, r4, r5, lr}
 801a666:	4605      	mov	r5, r0
    lv_roller_ext_t * ext = lv_obj_get_ext_attr(roller);
 801a668:	f7f5 ff89 	bl	801057e <lv_obj_get_ext_attr>
    if(ext->mode == LV_ROLLER_MODE_INIFINITE) {
 801a66c:	f890 3044 	ldrb.w	r3, [r0, #68]	; 0x44
 801a670:	07db      	lsls	r3, r3, #31
 801a672:	d404      	bmi.n	801a67e <lv_roller_get_selected+0x1a>
        return lv_ddlist_get_selected(roller);
 801a674:	4628      	mov	r0, r5
}
 801a676:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        return lv_ddlist_get_selected(roller);
 801a67a:	f7fd b9b3 	b.w	80179e4 <lv_ddlist_get_selected>
        uint16_t real_id_cnt = ext->ddlist.option_cnt / LV_ROLLER_INF_PAGES;
 801a67e:	8f04      	ldrh	r4, [r0, #56]	; 0x38
 801a680:	2007      	movs	r0, #7
 801a682:	fbb4 f4f0 	udiv	r4, r4, r0
        return lv_ddlist_get_selected(roller) % real_id_cnt;
 801a686:	4628      	mov	r0, r5
 801a688:	f7fd f9ac 	bl	80179e4 <lv_ddlist_get_selected>
 801a68c:	fbb0 f3f4 	udiv	r3, r0, r4
 801a690:	fb03 0014 	mls	r0, r3, r4, r0
 801a694:	b280      	uxth	r0, r0
}
 801a696:	bd38      	pop	{r3, r4, r5, pc}

0801a698 <lv_roller_set_selected>:
{
 801a698:	b570      	push	{r4, r5, r6, lr}
 801a69a:	460d      	mov	r5, r1
 801a69c:	4604      	mov	r4, r0
 801a69e:	4616      	mov	r6, r2
    if(lv_roller_get_selected(roller) == sel_opt) return;
 801a6a0:	f7ff ffe0 	bl	801a664 <lv_roller_get_selected>
 801a6a4:	42a8      	cmp	r0, r5
 801a6a6:	d009      	beq.n	801a6bc <lv_roller_set_selected+0x24>
    lv_ddlist_set_selected(roller, sel_opt);
 801a6a8:	4629      	mov	r1, r5
 801a6aa:	4620      	mov	r0, r4
 801a6ac:	f7fd f83b 	bl	8017726 <lv_ddlist_set_selected>
    refr_position(roller, anim);
 801a6b0:	4631      	mov	r1, r6
 801a6b2:	4620      	mov	r0, r4
}
 801a6b4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    refr_position(roller, anim);
 801a6b8:	f7ff bc92 	b.w	8019fe0 <refr_position>
 801a6bc:	bd70      	pop	{r4, r5, r6, pc}
	...

0801a6c0 <lv_roller_signal>:
{
 801a6c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if(sign != LV_SIGNAL_CONTROL && sign != LV_SIGNAL_FOCUS && sign != LV_SIGNAL_DEFOCUS) {
 801a6c2:	f1a1 030f 	sub.w	r3, r1, #15
 801a6c6:	2b02      	cmp	r3, #2
{
 801a6c8:	4605      	mov	r5, r0
 801a6ca:	460f      	mov	r7, r1
 801a6cc:	4616      	mov	r6, r2
    if(sign != LV_SIGNAL_CONTROL && sign != LV_SIGNAL_FOCUS && sign != LV_SIGNAL_DEFOCUS) {
 801a6ce:	d80d      	bhi.n	801a6ec <lv_roller_signal+0x2c>
    lv_roller_ext_t * ext = lv_obj_get_ext_attr(roller);
 801a6d0:	4628      	mov	r0, r5
 801a6d2:	f7f5 ff54 	bl	801057e <lv_obj_get_ext_attr>
    if(sign == LV_SIGNAL_STYLE_CHG) {
 801a6d6:	2f04      	cmp	r7, #4
    lv_roller_ext_t * ext = lv_obj_get_ext_attr(roller);
 801a6d8:	4604      	mov	r4, r0
    if(sign == LV_SIGNAL_STYLE_CHG) {
 801a6da:	d10d      	bne.n	801a6f8 <lv_roller_signal+0x38>
        refr_height(roller);
 801a6dc:	4628      	mov	r0, r5
 801a6de:	f7ff fd65 	bl	801a1ac <refr_height>
            refr_position(roller, false);
 801a6e2:	2100      	movs	r1, #0
            refr_position(roller, true);
 801a6e4:	4628      	mov	r0, r5
 801a6e6:	f7ff fc7b 	bl	8019fe0 <refr_position>
 801a6ea:	e029      	b.n	801a740 <lv_roller_signal+0x80>
        res = ancestor_signal(roller, sign, param);
 801a6ec:	4b39      	ldr	r3, [pc, #228]	; (801a7d4 <lv_roller_signal+0x114>)
 801a6ee:	681b      	ldr	r3, [r3, #0]
 801a6f0:	4798      	blx	r3
        if(res != LV_RES_OK) return res;
 801a6f2:	2801      	cmp	r0, #1
 801a6f4:	d0ec      	beq.n	801a6d0 <lv_roller_signal+0x10>
}
 801a6f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    } else if(sign == LV_SIGNAL_CORD_CHG) {
 801a6f8:	2f02      	cmp	r7, #2
 801a6fa:	d123      	bne.n	801a744 <lv_roller_signal+0x84>
        if(lv_obj_get_width(roller) != lv_area_get_width(param) ||
 801a6fc:	4628      	mov	r0, r5
 801a6fe:	f7f5 fe42 	bl	8010386 <lv_obj_get_width>
    return area_p->x2 - area_p->x1 + 1;
 801a702:	88b3      	ldrh	r3, [r6, #4]
 801a704:	8832      	ldrh	r2, [r6, #0]
 801a706:	3301      	adds	r3, #1
 801a708:	1a9b      	subs	r3, r3, r2
 801a70a:	b21b      	sxth	r3, r3
 801a70c:	4298      	cmp	r0, r3
 801a70e:	d00d      	beq.n	801a72c <lv_roller_signal+0x6c>
            refr_height(roller);
 801a710:	4628      	mov	r0, r5
 801a712:	f7ff fd4b 	bl	801a1ac <refr_height>
            lv_anim_del(lv_page_get_scrl(roller), (lv_anim_exec_xcb_t)lv_obj_set_y);
 801a716:	4628      	mov	r0, r5
 801a718:	f7fe fe6f 	bl	80193fa <lv_page_get_scrl>
 801a71c:	492e      	ldr	r1, [pc, #184]	; (801a7d8 <lv_roller_signal+0x118>)
 801a71e:	f7fa fd4b 	bl	80151b8 <lv_anim_del>
            lv_ddlist_set_selected(roller, ext->ddlist.sel_opt_id);
 801a722:	8f61      	ldrh	r1, [r4, #58]	; 0x3a
 801a724:	4628      	mov	r0, r5
 801a726:	f7fc fffe 	bl	8017726 <lv_ddlist_set_selected>
 801a72a:	e7da      	b.n	801a6e2 <lv_roller_signal+0x22>
           lv_obj_get_height(roller) != lv_area_get_height(param)) {
 801a72c:	4628      	mov	r0, r5
 801a72e:	f7f5 fe30 	bl	8010392 <lv_obj_get_height>
    return area_p->y2 - area_p->y1 + 1;
 801a732:	88f3      	ldrh	r3, [r6, #6]
 801a734:	8872      	ldrh	r2, [r6, #2]
 801a736:	3301      	adds	r3, #1
 801a738:	1a9b      	subs	r3, r3, r2
        if(lv_obj_get_width(roller) != lv_area_get_width(param) ||
 801a73a:	b21b      	sxth	r3, r3
 801a73c:	4298      	cmp	r0, r3
 801a73e:	d1e7      	bne.n	801a710 <lv_roller_signal+0x50>
    return res;
 801a740:	2001      	movs	r0, #1
 801a742:	e7d8      	b.n	801a6f6 <lv_roller_signal+0x36>
    } else if(sign == LV_SIGNAL_FOCUS) {
 801a744:	2f0f      	cmp	r7, #15
 801a746:	d116      	bne.n	801a776 <lv_roller_signal+0xb6>
        lv_group_t * g             = lv_obj_get_group(roller);
 801a748:	4628      	mov	r0, r5
 801a74a:	f7f5 ff1e 	bl	801058a <lv_obj_get_group>
        bool editing               = lv_group_get_editing(g);
 801a74e:	f7f4 fe9c 	bl	800f48a <lv_group_get_editing>
 801a752:	4606      	mov	r6, r0
        lv_indev_type_t indev_type = lv_indev_get_type(lv_indev_get_act());
 801a754:	f7f4 feae 	bl	800f4b4 <lv_indev_get_act>
 801a758:	f7f4 feb2 	bl	800f4c0 <lv_indev_get_type>
        if(indev_type == LV_INDEV_TYPE_ENCODER) {
 801a75c:	2804      	cmp	r0, #4
 801a75e:	d107      	bne.n	801a770 <lv_roller_signal+0xb0>
            if(!editing) {
 801a760:	b936      	cbnz	r6, 801a770 <lv_roller_signal+0xb0>
        if(ext->ddlist.sel_opt_id != ext->ddlist.sel_opt_id_ori) {
 801a762:	8fa3      	ldrh	r3, [r4, #60]	; 0x3c
 801a764:	8f62      	ldrh	r2, [r4, #58]	; 0x3a
 801a766:	429a      	cmp	r2, r3
 801a768:	d0ea      	beq.n	801a740 <lv_roller_signal+0x80>
            ext->ddlist.sel_opt_id = ext->ddlist.sel_opt_id_ori;
 801a76a:	8763      	strh	r3, [r4, #58]	; 0x3a
            refr_position(roller, true);
 801a76c:	2101      	movs	r1, #1
 801a76e:	e7b9      	b.n	801a6e4 <lv_roller_signal+0x24>
            ext->ddlist.sel_opt_id_ori = ext->ddlist.sel_opt_id; /*Save the current value. Used to revert this state if
 801a770:	8f63      	ldrh	r3, [r4, #58]	; 0x3a
 801a772:	87a3      	strh	r3, [r4, #60]	; 0x3c
 801a774:	e7e4      	b.n	801a740 <lv_roller_signal+0x80>
    } else if(sign == LV_SIGNAL_DEFOCUS) {
 801a776:	2f10      	cmp	r7, #16
 801a778:	d0f3      	beq.n	801a762 <lv_roller_signal+0xa2>
    } else if(sign == LV_SIGNAL_CONTROL) {
 801a77a:	2f11      	cmp	r7, #17
 801a77c:	d11b      	bne.n	801a7b6 <lv_roller_signal+0xf6>
        char c = *((char *)param);
 801a77e:	7833      	ldrb	r3, [r6, #0]
        if(c == LV_KEY_RIGHT || c == LV_KEY_DOWN) {
 801a780:	f1a3 0212 	sub.w	r2, r3, #18
 801a784:	2a01      	cmp	r2, #1
 801a786:	d80c      	bhi.n	801a7a2 <lv_roller_signal+0xe2>
            if(ext->ddlist.sel_opt_id + 1 < ext->ddlist.option_cnt) {
 801a788:	8f41      	ldrh	r1, [r0, #58]	; 0x3a
 801a78a:	8f03      	ldrh	r3, [r0, #56]	; 0x38
 801a78c:	3101      	adds	r1, #1
 801a78e:	4299      	cmp	r1, r3
 801a790:	dad6      	bge.n	801a740 <lv_roller_signal+0x80>
                uint16_t ori_id = ext->ddlist.sel_opt_id_ori; /*lv_roller_set_selceted will overwrite this*/
 801a792:	8f86      	ldrh	r6, [r0, #60]	; 0x3c
                lv_roller_set_selected(roller, ext->ddlist.sel_opt_id - 1, true);
 801a794:	2201      	movs	r2, #1
 801a796:	b289      	uxth	r1, r1
 801a798:	4628      	mov	r0, r5
 801a79a:	f7ff ff7d 	bl	801a698 <lv_roller_set_selected>
                ext->ddlist.sel_opt_id_ori = ori_id;
 801a79e:	87a6      	strh	r6, [r4, #60]	; 0x3c
 801a7a0:	e7ce      	b.n	801a740 <lv_roller_signal+0x80>
        } else if(c == LV_KEY_LEFT || c == LV_KEY_UP) {
 801a7a2:	2b14      	cmp	r3, #20
 801a7a4:	d001      	beq.n	801a7aa <lv_roller_signal+0xea>
 801a7a6:	2b11      	cmp	r3, #17
 801a7a8:	d1ca      	bne.n	801a740 <lv_roller_signal+0x80>
            if(ext->ddlist.sel_opt_id > 0) {
 801a7aa:	8f61      	ldrh	r1, [r4, #58]	; 0x3a
 801a7ac:	2900      	cmp	r1, #0
 801a7ae:	d0c7      	beq.n	801a740 <lv_roller_signal+0x80>
                uint16_t ori_id = ext->ddlist.sel_opt_id_ori; /*lv_roller_set_selceted will overwrite this*/
 801a7b0:	8fa6      	ldrh	r6, [r4, #60]	; 0x3c
                lv_roller_set_selected(roller, ext->ddlist.sel_opt_id - 1, true);
 801a7b2:	3901      	subs	r1, #1
 801a7b4:	e7ee      	b.n	801a794 <lv_roller_signal+0xd4>
    } else if(sign == LV_SIGNAL_GET_TYPE) {
 801a7b6:	2f06      	cmp	r7, #6
 801a7b8:	d1c2      	bne.n	801a740 <lv_roller_signal+0x80>
 801a7ba:	2300      	movs	r3, #0
            if(buf->type[i] == NULL) break;
 801a7bc:	f856 1023 	ldr.w	r1, [r6, r3, lsl #2]
 801a7c0:	b2da      	uxtb	r2, r3
 801a7c2:	b119      	cbz	r1, 801a7cc <lv_roller_signal+0x10c>
 801a7c4:	3301      	adds	r3, #1
        for(i = 0; i < LV_MAX_ANCESTOR_NUM - 1; i++) { /*Find the last set data*/
 801a7c6:	2b07      	cmp	r3, #7
 801a7c8:	d1f8      	bne.n	801a7bc <lv_roller_signal+0xfc>
 801a7ca:	461a      	mov	r2, r3
        buf->type[i] = "lv_roller";
 801a7cc:	4b03      	ldr	r3, [pc, #12]	; (801a7dc <lv_roller_signal+0x11c>)
 801a7ce:	f846 3022 	str.w	r3, [r6, r2, lsl #2]
 801a7d2:	e7b5      	b.n	801a740 <lv_roller_signal+0x80>
 801a7d4:	2000b260 	.word	0x2000b260
 801a7d8:	0800f981 	.word	0x0800f981
 801a7dc:	080f4fc8 	.word	0x080f4fc8

0801a7e0 <lv_roller_set_options>:
{
 801a7e0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a7e4:	4605      	mov	r5, r0
 801a7e6:	4688      	mov	r8, r1
 801a7e8:	4614      	mov	r4, r2
    lv_roller_ext_t * ext = lv_obj_get_ext_attr(roller);
 801a7ea:	f7f5 fec8 	bl	801057e <lv_obj_get_ext_attr>
 801a7ee:	4607      	mov	r7, r0
 801a7f0:	f890 3044 	ldrb.w	r3, [r0, #68]	; 0x44
    if(mode == LV_ROLLER_MODE_NORMAL) {
 801a7f4:	b96c      	cbnz	r4, 801a812 <lv_roller_set_options+0x32>
        ext->mode = LV_ROLLER_MODE_NORMAL;
 801a7f6:	f364 0300 	bfi	r3, r4, #0, #1
 801a7fa:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
        lv_ddlist_set_options(roller, options);
 801a7fe:	4641      	mov	r1, r8
 801a800:	4628      	mov	r0, r5
 801a802:	f7fc ff53 	bl	80176ac <lv_ddlist_set_options>
        refr_height(roller);
 801a806:	4628      	mov	r0, r5
}
 801a808:	b003      	add	sp, #12
 801a80a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        refr_height(roller);
 801a80e:	f7ff bccd 	b.w	801a1ac <refr_height>
        ext->mode = LV_ROLLER_MODE_INIFINITE;
 801a812:	f043 0301 	orr.w	r3, r3, #1
 801a816:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
        uint32_t opt_len = strlen(options) + 1; /*+1 to add '\n' after option lists*/
 801a81a:	4640      	mov	r0, r8
 801a81c:	f7e5 fcd8 	bl	80001d0 <strlen>
 801a820:	1c46      	adds	r6, r0, #1
        char * opt_extra = lv_mem_alloc(opt_len * LV_ROLLER_INF_PAGES);
 801a822:	ebc6 0ac6 	rsb	sl, r6, r6, lsl #3
 801a826:	4650      	mov	r0, sl
 801a828:	f7fa ffac 	bl	8015784 <lv_mem_alloc>
 801a82c:	2407      	movs	r4, #7
 801a82e:	4681      	mov	r9, r0
 801a830:	eb00 0b06 	add.w	fp, r0, r6
            opt_extra[opt_len * (i + 1) - 1] = '\n';
 801a834:	230a      	movs	r3, #10
            strcpy(&opt_extra[opt_len * i], options);
 801a836:	ebab 0006 	sub.w	r0, fp, r6
 801a83a:	4641      	mov	r1, r8
 801a83c:	3c01      	subs	r4, #1
 801a83e:	9301      	str	r3, [sp, #4]
 801a840:	f000 fb0e 	bl	801ae60 <strcpy>
            opt_extra[opt_len * (i + 1) - 1] = '\n';
 801a844:	9b01      	ldr	r3, [sp, #4]
 801a846:	f80b 3c01 	strb.w	r3, [fp, #-1]
        for(i = 0; i < LV_ROLLER_INF_PAGES; i++) {
 801a84a:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
 801a84e:	44b3      	add	fp, r6
 801a850:	d1f1      	bne.n	801a836 <lv_roller_set_options+0x56>
        opt_extra[opt_len * LV_ROLLER_INF_PAGES - 1] = '\0';
 801a852:	44ca      	add	sl, r9
        lv_ddlist_set_options(roller, opt_extra);
 801a854:	4649      	mov	r1, r9
 801a856:	4628      	mov	r0, r5
        opt_extra[opt_len * LV_ROLLER_INF_PAGES - 1] = '\0';
 801a858:	f80a 4c01 	strb.w	r4, [sl, #-1]
        lv_ddlist_set_options(roller, opt_extra);
 801a85c:	f7fc ff26 	bl	80176ac <lv_ddlist_set_options>
        lv_mem_free(opt_extra);
 801a860:	4648      	mov	r0, r9
 801a862:	f7fa ffc5 	bl	80157f0 <lv_mem_free>
        refr_height(roller);
 801a866:	4628      	mov	r0, r5
 801a868:	f7ff fca0 	bl	801a1ac <refr_height>
        uint16_t real_id_cnt = ext->ddlist.option_cnt / LV_ROLLER_INF_PAGES;
 801a86c:	8f39      	ldrh	r1, [r7, #56]	; 0x38
 801a86e:	2307      	movs	r3, #7
 801a870:	fbb1 f1f3 	udiv	r1, r1, r3
        lv_roller_set_selected(roller, ((LV_ROLLER_INF_PAGES / 2) + 1) * real_id_cnt, false); /*Select the middle page*/
 801a874:	0089      	lsls	r1, r1, #2
 801a876:	b289      	uxth	r1, r1
 801a878:	4622      	mov	r2, r4
 801a87a:	4628      	mov	r0, r5
}
 801a87c:	b003      	add	sp, #12
 801a87e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        lv_roller_set_selected(roller, ((LV_ROLLER_INF_PAGES / 2) + 1) * real_id_cnt, false); /*Select the middle page*/
 801a882:	f7ff bf09 	b.w	801a698 <lv_roller_set_selected>
	...

0801a888 <lv_theme_get_current>:
    if(!inited)
        return NULL;
    else
        return &current_theme;
#endif
}
 801a888:	4b01      	ldr	r3, [pc, #4]	; (801a890 <lv_theme_get_current+0x8>)
 801a88a:	6818      	ldr	r0, [r3, #0]
 801a88c:	4770      	bx	lr
 801a88e:	bf00      	nop
 801a890:	2000b264 	.word	0x2000b264

0801a894 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 801a894:	f8df d034 	ldr.w	sp, [pc, #52]	; 801a8cc <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 801a898:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 801a89a:	e003      	b.n	801a8a4 <LoopCopyDataInit>

0801a89c <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 801a89c:	4b0c      	ldr	r3, [pc, #48]	; (801a8d0 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 801a89e:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 801a8a0:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 801a8a2:	3104      	adds	r1, #4

0801a8a4 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 801a8a4:	480b      	ldr	r0, [pc, #44]	; (801a8d4 <LoopForever+0xa>)
	ldr	r3, =_edata
 801a8a6:	4b0c      	ldr	r3, [pc, #48]	; (801a8d8 <LoopForever+0xe>)
	adds	r2, r0, r1
 801a8a8:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 801a8aa:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 801a8ac:	d3f6      	bcc.n	801a89c <CopyDataInit>
	ldr	r2, =_sbss
 801a8ae:	4a0b      	ldr	r2, [pc, #44]	; (801a8dc <LoopForever+0x12>)
	b	LoopFillZerobss
 801a8b0:	e002      	b.n	801a8b8 <LoopFillZerobss>

0801a8b2 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 801a8b2:	2300      	movs	r3, #0
	str	r3, [r2], #4
 801a8b4:	f842 3b04 	str.w	r3, [r2], #4

0801a8b8 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 801a8b8:	4b09      	ldr	r3, [pc, #36]	; (801a8e0 <LoopForever+0x16>)
	cmp	r2, r3
 801a8ba:	429a      	cmp	r2, r3
	bcc	FillZerobss
 801a8bc:	d3f9      	bcc.n	801a8b2 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 801a8be:	f7e7 fc69 	bl	8002194 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 801a8c2:	f000 f847 	bl	801a954 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 801a8c6:	f7e6 ff43 	bl	8001750 <main>

0801a8ca <LoopForever>:

LoopForever:
    b LoopForever
 801a8ca:	e7fe      	b.n	801a8ca <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 801a8cc:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 801a8d0:	080f5250 	.word	0x080f5250
	ldr	r0, =_sdata
 801a8d4:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 801a8d8:	2000239c 	.word	0x2000239c
	ldr	r2, =_sbss
 801a8dc:	2000239c 	.word	0x2000239c
	ldr	r3, = _ebss
 801a8e0:	2000c850 	.word	0x2000c850

0801a8e4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 801a8e4:	e7fe      	b.n	801a8e4 <ADC1_2_IRQHandler>

0801a8e6 <atoi>:
 801a8e6:	220a      	movs	r2, #10
 801a8e8:	2100      	movs	r1, #0
 801a8ea:	f000 bb41 	b.w	801af70 <strtol>

0801a8ee <_calloc_r>:
 801a8ee:	b510      	push	{r4, lr}
 801a8f0:	4351      	muls	r1, r2
 801a8f2:	f000 f853 	bl	801a99c <_malloc_r>
 801a8f6:	4604      	mov	r4, r0
 801a8f8:	b198      	cbz	r0, 801a922 <_calloc_r+0x34>
 801a8fa:	f850 2c04 	ldr.w	r2, [r0, #-4]
 801a8fe:	f022 0203 	bic.w	r2, r2, #3
 801a902:	3a04      	subs	r2, #4
 801a904:	2a24      	cmp	r2, #36	; 0x24
 801a906:	d81b      	bhi.n	801a940 <_calloc_r+0x52>
 801a908:	2a13      	cmp	r2, #19
 801a90a:	d917      	bls.n	801a93c <_calloc_r+0x4e>
 801a90c:	2100      	movs	r1, #0
 801a90e:	2a1b      	cmp	r2, #27
 801a910:	6001      	str	r1, [r0, #0]
 801a912:	6041      	str	r1, [r0, #4]
 801a914:	d807      	bhi.n	801a926 <_calloc_r+0x38>
 801a916:	f100 0308 	add.w	r3, r0, #8
 801a91a:	2200      	movs	r2, #0
 801a91c:	601a      	str	r2, [r3, #0]
 801a91e:	605a      	str	r2, [r3, #4]
 801a920:	609a      	str	r2, [r3, #8]
 801a922:	4620      	mov	r0, r4
 801a924:	bd10      	pop	{r4, pc}
 801a926:	2a24      	cmp	r2, #36	; 0x24
 801a928:	6081      	str	r1, [r0, #8]
 801a92a:	60c1      	str	r1, [r0, #12]
 801a92c:	bf11      	iteee	ne
 801a92e:	f100 0310 	addne.w	r3, r0, #16
 801a932:	6101      	streq	r1, [r0, #16]
 801a934:	f100 0318 	addeq.w	r3, r0, #24
 801a938:	6141      	streq	r1, [r0, #20]
 801a93a:	e7ee      	b.n	801a91a <_calloc_r+0x2c>
 801a93c:	4603      	mov	r3, r0
 801a93e:	e7ec      	b.n	801a91a <_calloc_r+0x2c>
 801a940:	2100      	movs	r1, #0
 801a942:	f000 fa44 	bl	801adce <memset>
 801a946:	e7ec      	b.n	801a922 <_calloc_r+0x34>

0801a948 <__errno>:
 801a948:	4b01      	ldr	r3, [pc, #4]	; (801a950 <__errno+0x8>)
 801a94a:	6818      	ldr	r0, [r3, #0]
 801a94c:	4770      	bx	lr
 801a94e:	bf00      	nop
 801a950:	20001d2c 	.word	0x20001d2c

0801a954 <__libc_init_array>:
 801a954:	b570      	push	{r4, r5, r6, lr}
 801a956:	4e0d      	ldr	r6, [pc, #52]	; (801a98c <__libc_init_array+0x38>)
 801a958:	4c0d      	ldr	r4, [pc, #52]	; (801a990 <__libc_init_array+0x3c>)
 801a95a:	1ba4      	subs	r4, r4, r6
 801a95c:	10a4      	asrs	r4, r4, #2
 801a95e:	2500      	movs	r5, #0
 801a960:	42a5      	cmp	r5, r4
 801a962:	d109      	bne.n	801a978 <__libc_init_array+0x24>
 801a964:	4e0b      	ldr	r6, [pc, #44]	; (801a994 <__libc_init_array+0x40>)
 801a966:	4c0c      	ldr	r4, [pc, #48]	; (801a998 <__libc_init_array+0x44>)
 801a968:	f002 ff9e 	bl	801d8a8 <_init>
 801a96c:	1ba4      	subs	r4, r4, r6
 801a96e:	10a4      	asrs	r4, r4, #2
 801a970:	2500      	movs	r5, #0
 801a972:	42a5      	cmp	r5, r4
 801a974:	d105      	bne.n	801a982 <__libc_init_array+0x2e>
 801a976:	bd70      	pop	{r4, r5, r6, pc}
 801a978:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 801a97c:	4798      	blx	r3
 801a97e:	3501      	adds	r5, #1
 801a980:	e7ee      	b.n	801a960 <__libc_init_array+0xc>
 801a982:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 801a986:	4798      	blx	r3
 801a988:	3501      	adds	r5, #1
 801a98a:	e7f2      	b.n	801a972 <__libc_init_array+0x1e>
 801a98c:	080f5248 	.word	0x080f5248
 801a990:	080f5248 	.word	0x080f5248
 801a994:	080f5248 	.word	0x080f5248
 801a998:	080f524c 	.word	0x080f524c

0801a99c <_malloc_r>:
 801a99c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a9a0:	f101 040b 	add.w	r4, r1, #11
 801a9a4:	2c16      	cmp	r4, #22
 801a9a6:	4681      	mov	r9, r0
 801a9a8:	d907      	bls.n	801a9ba <_malloc_r+0x1e>
 801a9aa:	f034 0407 	bics.w	r4, r4, #7
 801a9ae:	d505      	bpl.n	801a9bc <_malloc_r+0x20>
 801a9b0:	230c      	movs	r3, #12
 801a9b2:	f8c9 3000 	str.w	r3, [r9]
 801a9b6:	2600      	movs	r6, #0
 801a9b8:	e131      	b.n	801ac1e <_malloc_r+0x282>
 801a9ba:	2410      	movs	r4, #16
 801a9bc:	428c      	cmp	r4, r1
 801a9be:	d3f7      	bcc.n	801a9b0 <_malloc_r+0x14>
 801a9c0:	4648      	mov	r0, r9
 801a9c2:	f000 fa0d 	bl	801ade0 <__malloc_lock>
 801a9c6:	f5b4 7ffc 	cmp.w	r4, #504	; 0x1f8
 801a9ca:	4d9c      	ldr	r5, [pc, #624]	; (801ac3c <_malloc_r+0x2a0>)
 801a9cc:	d236      	bcs.n	801aa3c <_malloc_r+0xa0>
 801a9ce:	f104 0208 	add.w	r2, r4, #8
 801a9d2:	442a      	add	r2, r5
 801a9d4:	f1a2 0108 	sub.w	r1, r2, #8
 801a9d8:	6856      	ldr	r6, [r2, #4]
 801a9da:	428e      	cmp	r6, r1
 801a9dc:	ea4f 03d4 	mov.w	r3, r4, lsr #3
 801a9e0:	d102      	bne.n	801a9e8 <_malloc_r+0x4c>
 801a9e2:	68d6      	ldr	r6, [r2, #12]
 801a9e4:	42b2      	cmp	r2, r6
 801a9e6:	d010      	beq.n	801aa0a <_malloc_r+0x6e>
 801a9e8:	6873      	ldr	r3, [r6, #4]
 801a9ea:	68f2      	ldr	r2, [r6, #12]
 801a9ec:	68b1      	ldr	r1, [r6, #8]
 801a9ee:	f023 0303 	bic.w	r3, r3, #3
 801a9f2:	60ca      	str	r2, [r1, #12]
 801a9f4:	4433      	add	r3, r6
 801a9f6:	6091      	str	r1, [r2, #8]
 801a9f8:	685a      	ldr	r2, [r3, #4]
 801a9fa:	f042 0201 	orr.w	r2, r2, #1
 801a9fe:	605a      	str	r2, [r3, #4]
 801aa00:	4648      	mov	r0, r9
 801aa02:	f000 f9f3 	bl	801adec <__malloc_unlock>
 801aa06:	3608      	adds	r6, #8
 801aa08:	e109      	b.n	801ac1e <_malloc_r+0x282>
 801aa0a:	3302      	adds	r3, #2
 801aa0c:	4a8c      	ldr	r2, [pc, #560]	; (801ac40 <_malloc_r+0x2a4>)
 801aa0e:	692e      	ldr	r6, [r5, #16]
 801aa10:	4296      	cmp	r6, r2
 801aa12:	4611      	mov	r1, r2
 801aa14:	d06d      	beq.n	801aaf2 <_malloc_r+0x156>
 801aa16:	6870      	ldr	r0, [r6, #4]
 801aa18:	f020 0003 	bic.w	r0, r0, #3
 801aa1c:	1b07      	subs	r7, r0, r4
 801aa1e:	2f0f      	cmp	r7, #15
 801aa20:	dd47      	ble.n	801aab2 <_malloc_r+0x116>
 801aa22:	1933      	adds	r3, r6, r4
 801aa24:	f044 0401 	orr.w	r4, r4, #1
 801aa28:	6074      	str	r4, [r6, #4]
 801aa2a:	616b      	str	r3, [r5, #20]
 801aa2c:	612b      	str	r3, [r5, #16]
 801aa2e:	60da      	str	r2, [r3, #12]
 801aa30:	609a      	str	r2, [r3, #8]
 801aa32:	f047 0201 	orr.w	r2, r7, #1
 801aa36:	605a      	str	r2, [r3, #4]
 801aa38:	5037      	str	r7, [r6, r0]
 801aa3a:	e7e1      	b.n	801aa00 <_malloc_r+0x64>
 801aa3c:	0a63      	lsrs	r3, r4, #9
 801aa3e:	d02a      	beq.n	801aa96 <_malloc_r+0xfa>
 801aa40:	2b04      	cmp	r3, #4
 801aa42:	d812      	bhi.n	801aa6a <_malloc_r+0xce>
 801aa44:	09a3      	lsrs	r3, r4, #6
 801aa46:	3338      	adds	r3, #56	; 0x38
 801aa48:	1c5a      	adds	r2, r3, #1
 801aa4a:	eb05 02c2 	add.w	r2, r5, r2, lsl #3
 801aa4e:	f1a2 0008 	sub.w	r0, r2, #8
 801aa52:	6856      	ldr	r6, [r2, #4]
 801aa54:	4286      	cmp	r6, r0
 801aa56:	d006      	beq.n	801aa66 <_malloc_r+0xca>
 801aa58:	6872      	ldr	r2, [r6, #4]
 801aa5a:	f022 0203 	bic.w	r2, r2, #3
 801aa5e:	1b11      	subs	r1, r2, r4
 801aa60:	290f      	cmp	r1, #15
 801aa62:	dd1c      	ble.n	801aa9e <_malloc_r+0x102>
 801aa64:	3b01      	subs	r3, #1
 801aa66:	3301      	adds	r3, #1
 801aa68:	e7d0      	b.n	801aa0c <_malloc_r+0x70>
 801aa6a:	2b14      	cmp	r3, #20
 801aa6c:	d801      	bhi.n	801aa72 <_malloc_r+0xd6>
 801aa6e:	335b      	adds	r3, #91	; 0x5b
 801aa70:	e7ea      	b.n	801aa48 <_malloc_r+0xac>
 801aa72:	2b54      	cmp	r3, #84	; 0x54
 801aa74:	d802      	bhi.n	801aa7c <_malloc_r+0xe0>
 801aa76:	0b23      	lsrs	r3, r4, #12
 801aa78:	336e      	adds	r3, #110	; 0x6e
 801aa7a:	e7e5      	b.n	801aa48 <_malloc_r+0xac>
 801aa7c:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
 801aa80:	d802      	bhi.n	801aa88 <_malloc_r+0xec>
 801aa82:	0be3      	lsrs	r3, r4, #15
 801aa84:	3377      	adds	r3, #119	; 0x77
 801aa86:	e7df      	b.n	801aa48 <_malloc_r+0xac>
 801aa88:	f240 5254 	movw	r2, #1364	; 0x554
 801aa8c:	4293      	cmp	r3, r2
 801aa8e:	d804      	bhi.n	801aa9a <_malloc_r+0xfe>
 801aa90:	0ca3      	lsrs	r3, r4, #18
 801aa92:	337c      	adds	r3, #124	; 0x7c
 801aa94:	e7d8      	b.n	801aa48 <_malloc_r+0xac>
 801aa96:	233f      	movs	r3, #63	; 0x3f
 801aa98:	e7d6      	b.n	801aa48 <_malloc_r+0xac>
 801aa9a:	237e      	movs	r3, #126	; 0x7e
 801aa9c:	e7d4      	b.n	801aa48 <_malloc_r+0xac>
 801aa9e:	2900      	cmp	r1, #0
 801aaa0:	68f1      	ldr	r1, [r6, #12]
 801aaa2:	db04      	blt.n	801aaae <_malloc_r+0x112>
 801aaa4:	68b3      	ldr	r3, [r6, #8]
 801aaa6:	60d9      	str	r1, [r3, #12]
 801aaa8:	608b      	str	r3, [r1, #8]
 801aaaa:	18b3      	adds	r3, r6, r2
 801aaac:	e7a4      	b.n	801a9f8 <_malloc_r+0x5c>
 801aaae:	460e      	mov	r6, r1
 801aab0:	e7d0      	b.n	801aa54 <_malloc_r+0xb8>
 801aab2:	2f00      	cmp	r7, #0
 801aab4:	616a      	str	r2, [r5, #20]
 801aab6:	612a      	str	r2, [r5, #16]
 801aab8:	db05      	blt.n	801aac6 <_malloc_r+0x12a>
 801aaba:	4430      	add	r0, r6
 801aabc:	6843      	ldr	r3, [r0, #4]
 801aabe:	f043 0301 	orr.w	r3, r3, #1
 801aac2:	6043      	str	r3, [r0, #4]
 801aac4:	e79c      	b.n	801aa00 <_malloc_r+0x64>
 801aac6:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 801aaca:	d244      	bcs.n	801ab56 <_malloc_r+0x1ba>
 801aacc:	08c0      	lsrs	r0, r0, #3
 801aace:	1087      	asrs	r7, r0, #2
 801aad0:	2201      	movs	r2, #1
 801aad2:	fa02 f707 	lsl.w	r7, r2, r7
 801aad6:	686a      	ldr	r2, [r5, #4]
 801aad8:	3001      	adds	r0, #1
 801aada:	433a      	orrs	r2, r7
 801aadc:	606a      	str	r2, [r5, #4]
 801aade:	eb05 02c0 	add.w	r2, r5, r0, lsl #3
 801aae2:	f855 7030 	ldr.w	r7, [r5, r0, lsl #3]
 801aae6:	60b7      	str	r7, [r6, #8]
 801aae8:	3a08      	subs	r2, #8
 801aaea:	60f2      	str	r2, [r6, #12]
 801aaec:	f845 6030 	str.w	r6, [r5, r0, lsl #3]
 801aaf0:	60fe      	str	r6, [r7, #12]
 801aaf2:	2001      	movs	r0, #1
 801aaf4:	109a      	asrs	r2, r3, #2
 801aaf6:	fa00 f202 	lsl.w	r2, r0, r2
 801aafa:	6868      	ldr	r0, [r5, #4]
 801aafc:	4282      	cmp	r2, r0
 801aafe:	f200 80a1 	bhi.w	801ac44 <_malloc_r+0x2a8>
 801ab02:	4202      	tst	r2, r0
 801ab04:	d106      	bne.n	801ab14 <_malloc_r+0x178>
 801ab06:	f023 0303 	bic.w	r3, r3, #3
 801ab0a:	0052      	lsls	r2, r2, #1
 801ab0c:	4202      	tst	r2, r0
 801ab0e:	f103 0304 	add.w	r3, r3, #4
 801ab12:	d0fa      	beq.n	801ab0a <_malloc_r+0x16e>
 801ab14:	eb05 0cc3 	add.w	ip, r5, r3, lsl #3
 801ab18:	46e0      	mov	r8, ip
 801ab1a:	469e      	mov	lr, r3
 801ab1c:	f8d8 600c 	ldr.w	r6, [r8, #12]
 801ab20:	4546      	cmp	r6, r8
 801ab22:	d153      	bne.n	801abcc <_malloc_r+0x230>
 801ab24:	f10e 0e01 	add.w	lr, lr, #1
 801ab28:	f01e 0f03 	tst.w	lr, #3
 801ab2c:	f108 0808 	add.w	r8, r8, #8
 801ab30:	d1f4      	bne.n	801ab1c <_malloc_r+0x180>
 801ab32:	0798      	lsls	r0, r3, #30
 801ab34:	d179      	bne.n	801ac2a <_malloc_r+0x28e>
 801ab36:	686b      	ldr	r3, [r5, #4]
 801ab38:	ea23 0302 	bic.w	r3, r3, r2
 801ab3c:	606b      	str	r3, [r5, #4]
 801ab3e:	6868      	ldr	r0, [r5, #4]
 801ab40:	0052      	lsls	r2, r2, #1
 801ab42:	4282      	cmp	r2, r0
 801ab44:	d87e      	bhi.n	801ac44 <_malloc_r+0x2a8>
 801ab46:	2a00      	cmp	r2, #0
 801ab48:	d07c      	beq.n	801ac44 <_malloc_r+0x2a8>
 801ab4a:	4673      	mov	r3, lr
 801ab4c:	4202      	tst	r2, r0
 801ab4e:	d1e1      	bne.n	801ab14 <_malloc_r+0x178>
 801ab50:	3304      	adds	r3, #4
 801ab52:	0052      	lsls	r2, r2, #1
 801ab54:	e7fa      	b.n	801ab4c <_malloc_r+0x1b0>
 801ab56:	0a42      	lsrs	r2, r0, #9
 801ab58:	2a04      	cmp	r2, #4
 801ab5a:	d815      	bhi.n	801ab88 <_malloc_r+0x1ec>
 801ab5c:	0982      	lsrs	r2, r0, #6
 801ab5e:	3238      	adds	r2, #56	; 0x38
 801ab60:	1c57      	adds	r7, r2, #1
 801ab62:	eb05 0ec2 	add.w	lr, r5, r2, lsl #3
 801ab66:	f855 7037 	ldr.w	r7, [r5, r7, lsl #3]
 801ab6a:	45be      	cmp	lr, r7
 801ab6c:	d126      	bne.n	801abbc <_malloc_r+0x220>
 801ab6e:	2001      	movs	r0, #1
 801ab70:	1092      	asrs	r2, r2, #2
 801ab72:	fa00 f202 	lsl.w	r2, r0, r2
 801ab76:	6868      	ldr	r0, [r5, #4]
 801ab78:	4310      	orrs	r0, r2
 801ab7a:	6068      	str	r0, [r5, #4]
 801ab7c:	f8c6 e00c 	str.w	lr, [r6, #12]
 801ab80:	60b7      	str	r7, [r6, #8]
 801ab82:	f8ce 6008 	str.w	r6, [lr, #8]
 801ab86:	e7b3      	b.n	801aaf0 <_malloc_r+0x154>
 801ab88:	2a14      	cmp	r2, #20
 801ab8a:	d801      	bhi.n	801ab90 <_malloc_r+0x1f4>
 801ab8c:	325b      	adds	r2, #91	; 0x5b
 801ab8e:	e7e7      	b.n	801ab60 <_malloc_r+0x1c4>
 801ab90:	2a54      	cmp	r2, #84	; 0x54
 801ab92:	d802      	bhi.n	801ab9a <_malloc_r+0x1fe>
 801ab94:	0b02      	lsrs	r2, r0, #12
 801ab96:	326e      	adds	r2, #110	; 0x6e
 801ab98:	e7e2      	b.n	801ab60 <_malloc_r+0x1c4>
 801ab9a:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
 801ab9e:	d802      	bhi.n	801aba6 <_malloc_r+0x20a>
 801aba0:	0bc2      	lsrs	r2, r0, #15
 801aba2:	3277      	adds	r2, #119	; 0x77
 801aba4:	e7dc      	b.n	801ab60 <_malloc_r+0x1c4>
 801aba6:	f240 5754 	movw	r7, #1364	; 0x554
 801abaa:	42ba      	cmp	r2, r7
 801abac:	bf9a      	itte	ls
 801abae:	0c82      	lsrls	r2, r0, #18
 801abb0:	327c      	addls	r2, #124	; 0x7c
 801abb2:	227e      	movhi	r2, #126	; 0x7e
 801abb4:	e7d4      	b.n	801ab60 <_malloc_r+0x1c4>
 801abb6:	68bf      	ldr	r7, [r7, #8]
 801abb8:	45be      	cmp	lr, r7
 801abba:	d004      	beq.n	801abc6 <_malloc_r+0x22a>
 801abbc:	687a      	ldr	r2, [r7, #4]
 801abbe:	f022 0203 	bic.w	r2, r2, #3
 801abc2:	4290      	cmp	r0, r2
 801abc4:	d3f7      	bcc.n	801abb6 <_malloc_r+0x21a>
 801abc6:	f8d7 e00c 	ldr.w	lr, [r7, #12]
 801abca:	e7d7      	b.n	801ab7c <_malloc_r+0x1e0>
 801abcc:	6870      	ldr	r0, [r6, #4]
 801abce:	68f7      	ldr	r7, [r6, #12]
 801abd0:	f020 0003 	bic.w	r0, r0, #3
 801abd4:	eba0 0a04 	sub.w	sl, r0, r4
 801abd8:	f1ba 0f0f 	cmp.w	sl, #15
 801abdc:	dd10      	ble.n	801ac00 <_malloc_r+0x264>
 801abde:	68b2      	ldr	r2, [r6, #8]
 801abe0:	1933      	adds	r3, r6, r4
 801abe2:	f044 0401 	orr.w	r4, r4, #1
 801abe6:	6074      	str	r4, [r6, #4]
 801abe8:	60d7      	str	r7, [r2, #12]
 801abea:	60ba      	str	r2, [r7, #8]
 801abec:	f04a 0201 	orr.w	r2, sl, #1
 801abf0:	616b      	str	r3, [r5, #20]
 801abf2:	612b      	str	r3, [r5, #16]
 801abf4:	60d9      	str	r1, [r3, #12]
 801abf6:	6099      	str	r1, [r3, #8]
 801abf8:	605a      	str	r2, [r3, #4]
 801abfa:	f846 a000 	str.w	sl, [r6, r0]
 801abfe:	e6ff      	b.n	801aa00 <_malloc_r+0x64>
 801ac00:	f1ba 0f00 	cmp.w	sl, #0
 801ac04:	db0f      	blt.n	801ac26 <_malloc_r+0x28a>
 801ac06:	4430      	add	r0, r6
 801ac08:	6843      	ldr	r3, [r0, #4]
 801ac0a:	f043 0301 	orr.w	r3, r3, #1
 801ac0e:	6043      	str	r3, [r0, #4]
 801ac10:	f856 3f08 	ldr.w	r3, [r6, #8]!
 801ac14:	4648      	mov	r0, r9
 801ac16:	60df      	str	r7, [r3, #12]
 801ac18:	60bb      	str	r3, [r7, #8]
 801ac1a:	f000 f8e7 	bl	801adec <__malloc_unlock>
 801ac1e:	4630      	mov	r0, r6
 801ac20:	b003      	add	sp, #12
 801ac22:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ac26:	463e      	mov	r6, r7
 801ac28:	e77a      	b.n	801ab20 <_malloc_r+0x184>
 801ac2a:	f85c 0908 	ldr.w	r0, [ip], #-8
 801ac2e:	4584      	cmp	ip, r0
 801ac30:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 801ac34:	f43f af7d 	beq.w	801ab32 <_malloc_r+0x196>
 801ac38:	e781      	b.n	801ab3e <_malloc_r+0x1a2>
 801ac3a:	bf00      	nop
 801ac3c:	20001e20 	.word	0x20001e20
 801ac40:	20001e28 	.word	0x20001e28
 801ac44:	f8d5 b008 	ldr.w	fp, [r5, #8]
 801ac48:	f8db 6004 	ldr.w	r6, [fp, #4]
 801ac4c:	f026 0603 	bic.w	r6, r6, #3
 801ac50:	42b4      	cmp	r4, r6
 801ac52:	d803      	bhi.n	801ac5c <_malloc_r+0x2c0>
 801ac54:	1b33      	subs	r3, r6, r4
 801ac56:	2b0f      	cmp	r3, #15
 801ac58:	f300 8096 	bgt.w	801ad88 <_malloc_r+0x3ec>
 801ac5c:	4a4f      	ldr	r2, [pc, #316]	; (801ad9c <_malloc_r+0x400>)
 801ac5e:	6817      	ldr	r7, [r2, #0]
 801ac60:	4a4f      	ldr	r2, [pc, #316]	; (801ada0 <_malloc_r+0x404>)
 801ac62:	6811      	ldr	r1, [r2, #0]
 801ac64:	3710      	adds	r7, #16
 801ac66:	3101      	adds	r1, #1
 801ac68:	eb0b 0306 	add.w	r3, fp, r6
 801ac6c:	4427      	add	r7, r4
 801ac6e:	d005      	beq.n	801ac7c <_malloc_r+0x2e0>
 801ac70:	494c      	ldr	r1, [pc, #304]	; (801ada4 <_malloc_r+0x408>)
 801ac72:	3901      	subs	r1, #1
 801ac74:	440f      	add	r7, r1
 801ac76:	3101      	adds	r1, #1
 801ac78:	4249      	negs	r1, r1
 801ac7a:	400f      	ands	r7, r1
 801ac7c:	4639      	mov	r1, r7
 801ac7e:	4648      	mov	r0, r9
 801ac80:	9201      	str	r2, [sp, #4]
 801ac82:	9300      	str	r3, [sp, #0]
 801ac84:	f000 f8b8 	bl	801adf8 <_sbrk_r>
 801ac88:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 801ac8c:	4680      	mov	r8, r0
 801ac8e:	d056      	beq.n	801ad3e <_malloc_r+0x3a2>
 801ac90:	9b00      	ldr	r3, [sp, #0]
 801ac92:	9a01      	ldr	r2, [sp, #4]
 801ac94:	4283      	cmp	r3, r0
 801ac96:	d901      	bls.n	801ac9c <_malloc_r+0x300>
 801ac98:	45ab      	cmp	fp, r5
 801ac9a:	d150      	bne.n	801ad3e <_malloc_r+0x3a2>
 801ac9c:	4842      	ldr	r0, [pc, #264]	; (801ada8 <_malloc_r+0x40c>)
 801ac9e:	6801      	ldr	r1, [r0, #0]
 801aca0:	4543      	cmp	r3, r8
 801aca2:	eb07 0e01 	add.w	lr, r7, r1
 801aca6:	f8c0 e000 	str.w	lr, [r0]
 801acaa:	4940      	ldr	r1, [pc, #256]	; (801adac <_malloc_r+0x410>)
 801acac:	4682      	mov	sl, r0
 801acae:	d113      	bne.n	801acd8 <_malloc_r+0x33c>
 801acb0:	420b      	tst	r3, r1
 801acb2:	d111      	bne.n	801acd8 <_malloc_r+0x33c>
 801acb4:	68ab      	ldr	r3, [r5, #8]
 801acb6:	443e      	add	r6, r7
 801acb8:	f046 0601 	orr.w	r6, r6, #1
 801acbc:	605e      	str	r6, [r3, #4]
 801acbe:	4a3c      	ldr	r2, [pc, #240]	; (801adb0 <_malloc_r+0x414>)
 801acc0:	f8da 3000 	ldr.w	r3, [sl]
 801acc4:	6811      	ldr	r1, [r2, #0]
 801acc6:	428b      	cmp	r3, r1
 801acc8:	bf88      	it	hi
 801acca:	6013      	strhi	r3, [r2, #0]
 801accc:	4a39      	ldr	r2, [pc, #228]	; (801adb4 <_malloc_r+0x418>)
 801acce:	6811      	ldr	r1, [r2, #0]
 801acd0:	428b      	cmp	r3, r1
 801acd2:	bf88      	it	hi
 801acd4:	6013      	strhi	r3, [r2, #0]
 801acd6:	e032      	b.n	801ad3e <_malloc_r+0x3a2>
 801acd8:	6810      	ldr	r0, [r2, #0]
 801acda:	3001      	adds	r0, #1
 801acdc:	bf1b      	ittet	ne
 801acde:	eba8 0303 	subne.w	r3, r8, r3
 801ace2:	4473      	addne	r3, lr
 801ace4:	f8c2 8000 	streq.w	r8, [r2]
 801ace8:	f8ca 3000 	strne.w	r3, [sl]
 801acec:	f018 0007 	ands.w	r0, r8, #7
 801acf0:	bf1c      	itt	ne
 801acf2:	f1c0 0008 	rsbne	r0, r0, #8
 801acf6:	4480      	addne	r8, r0
 801acf8:	4b2a      	ldr	r3, [pc, #168]	; (801ada4 <_malloc_r+0x408>)
 801acfa:	4447      	add	r7, r8
 801acfc:	4418      	add	r0, r3
 801acfe:	400f      	ands	r7, r1
 801ad00:	1bc7      	subs	r7, r0, r7
 801ad02:	4639      	mov	r1, r7
 801ad04:	4648      	mov	r0, r9
 801ad06:	f000 f877 	bl	801adf8 <_sbrk_r>
 801ad0a:	1c43      	adds	r3, r0, #1
 801ad0c:	bf08      	it	eq
 801ad0e:	4640      	moveq	r0, r8
 801ad10:	f8da 3000 	ldr.w	r3, [sl]
 801ad14:	f8c5 8008 	str.w	r8, [r5, #8]
 801ad18:	bf08      	it	eq
 801ad1a:	2700      	moveq	r7, #0
 801ad1c:	eba0 0008 	sub.w	r0, r0, r8
 801ad20:	443b      	add	r3, r7
 801ad22:	4407      	add	r7, r0
 801ad24:	f047 0701 	orr.w	r7, r7, #1
 801ad28:	45ab      	cmp	fp, r5
 801ad2a:	f8ca 3000 	str.w	r3, [sl]
 801ad2e:	f8c8 7004 	str.w	r7, [r8, #4]
 801ad32:	d0c4      	beq.n	801acbe <_malloc_r+0x322>
 801ad34:	2e0f      	cmp	r6, #15
 801ad36:	d810      	bhi.n	801ad5a <_malloc_r+0x3be>
 801ad38:	2301      	movs	r3, #1
 801ad3a:	f8c8 3004 	str.w	r3, [r8, #4]
 801ad3e:	68ab      	ldr	r3, [r5, #8]
 801ad40:	685a      	ldr	r2, [r3, #4]
 801ad42:	f022 0203 	bic.w	r2, r2, #3
 801ad46:	4294      	cmp	r4, r2
 801ad48:	eba2 0304 	sub.w	r3, r2, r4
 801ad4c:	d801      	bhi.n	801ad52 <_malloc_r+0x3b6>
 801ad4e:	2b0f      	cmp	r3, #15
 801ad50:	dc1a      	bgt.n	801ad88 <_malloc_r+0x3ec>
 801ad52:	4648      	mov	r0, r9
 801ad54:	f000 f84a 	bl	801adec <__malloc_unlock>
 801ad58:	e62d      	b.n	801a9b6 <_malloc_r+0x1a>
 801ad5a:	f8db 3004 	ldr.w	r3, [fp, #4]
 801ad5e:	3e0c      	subs	r6, #12
 801ad60:	f026 0607 	bic.w	r6, r6, #7
 801ad64:	f003 0301 	and.w	r3, r3, #1
 801ad68:	4333      	orrs	r3, r6
 801ad6a:	f8cb 3004 	str.w	r3, [fp, #4]
 801ad6e:	eb0b 0306 	add.w	r3, fp, r6
 801ad72:	2205      	movs	r2, #5
 801ad74:	2e0f      	cmp	r6, #15
 801ad76:	605a      	str	r2, [r3, #4]
 801ad78:	609a      	str	r2, [r3, #8]
 801ad7a:	d9a0      	bls.n	801acbe <_malloc_r+0x322>
 801ad7c:	f10b 0108 	add.w	r1, fp, #8
 801ad80:	4648      	mov	r0, r9
 801ad82:	f001 ffb5 	bl	801ccf0 <_free_r>
 801ad86:	e79a      	b.n	801acbe <_malloc_r+0x322>
 801ad88:	68ae      	ldr	r6, [r5, #8]
 801ad8a:	f044 0201 	orr.w	r2, r4, #1
 801ad8e:	4434      	add	r4, r6
 801ad90:	f043 0301 	orr.w	r3, r3, #1
 801ad94:	6072      	str	r2, [r6, #4]
 801ad96:	60ac      	str	r4, [r5, #8]
 801ad98:	6063      	str	r3, [r4, #4]
 801ad9a:	e631      	b.n	801aa00 <_malloc_r+0x64>
 801ad9c:	2000b298 	.word	0x2000b298
 801ada0:	20002228 	.word	0x20002228
 801ada4:	00001000 	.word	0x00001000
 801ada8:	2000b268 	.word	0x2000b268
 801adac:	00000fff 	.word	0x00000fff
 801adb0:	2000b290 	.word	0x2000b290
 801adb4:	2000b294 	.word	0x2000b294

0801adb8 <memcpy>:
 801adb8:	b510      	push	{r4, lr}
 801adba:	1e43      	subs	r3, r0, #1
 801adbc:	440a      	add	r2, r1
 801adbe:	4291      	cmp	r1, r2
 801adc0:	d100      	bne.n	801adc4 <memcpy+0xc>
 801adc2:	bd10      	pop	{r4, pc}
 801adc4:	f811 4b01 	ldrb.w	r4, [r1], #1
 801adc8:	f803 4f01 	strb.w	r4, [r3, #1]!
 801adcc:	e7f7      	b.n	801adbe <memcpy+0x6>

0801adce <memset>:
 801adce:	4402      	add	r2, r0
 801add0:	4603      	mov	r3, r0
 801add2:	4293      	cmp	r3, r2
 801add4:	d100      	bne.n	801add8 <memset+0xa>
 801add6:	4770      	bx	lr
 801add8:	f803 1b01 	strb.w	r1, [r3], #1
 801addc:	e7f9      	b.n	801add2 <memset+0x4>
	...

0801ade0 <__malloc_lock>:
 801ade0:	4801      	ldr	r0, [pc, #4]	; (801ade8 <__malloc_lock+0x8>)
 801ade2:	f002 b853 	b.w	801ce8c <__retarget_lock_acquire_recursive>
 801ade6:	bf00      	nop
 801ade8:	2000c844 	.word	0x2000c844

0801adec <__malloc_unlock>:
 801adec:	4801      	ldr	r0, [pc, #4]	; (801adf4 <__malloc_unlock+0x8>)
 801adee:	f002 b84e 	b.w	801ce8e <__retarget_lock_release_recursive>
 801adf2:	bf00      	nop
 801adf4:	2000c844 	.word	0x2000c844

0801adf8 <_sbrk_r>:
 801adf8:	b538      	push	{r3, r4, r5, lr}
 801adfa:	4c06      	ldr	r4, [pc, #24]	; (801ae14 <_sbrk_r+0x1c>)
 801adfc:	2300      	movs	r3, #0
 801adfe:	4605      	mov	r5, r0
 801ae00:	4608      	mov	r0, r1
 801ae02:	6023      	str	r3, [r4, #0]
 801ae04:	f7e7 f9ac 	bl	8002160 <_sbrk>
 801ae08:	1c43      	adds	r3, r0, #1
 801ae0a:	d102      	bne.n	801ae12 <_sbrk_r+0x1a>
 801ae0c:	6823      	ldr	r3, [r4, #0]
 801ae0e:	b103      	cbz	r3, 801ae12 <_sbrk_r+0x1a>
 801ae10:	602b      	str	r3, [r5, #0]
 801ae12:	bd38      	pop	{r3, r4, r5, pc}
 801ae14:	2000c84c 	.word	0x2000c84c

0801ae18 <sprintf>:
 801ae18:	b40e      	push	{r1, r2, r3}
 801ae1a:	b500      	push	{lr}
 801ae1c:	b09c      	sub	sp, #112	; 0x70
 801ae1e:	f44f 7102 	mov.w	r1, #520	; 0x208
 801ae22:	ab1d      	add	r3, sp, #116	; 0x74
 801ae24:	f8ad 1014 	strh.w	r1, [sp, #20]
 801ae28:	9002      	str	r0, [sp, #8]
 801ae2a:	9006      	str	r0, [sp, #24]
 801ae2c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 801ae30:	480a      	ldr	r0, [pc, #40]	; (801ae5c <sprintf+0x44>)
 801ae32:	9104      	str	r1, [sp, #16]
 801ae34:	9107      	str	r1, [sp, #28]
 801ae36:	f64f 71ff 	movw	r1, #65535	; 0xffff
 801ae3a:	f853 2b04 	ldr.w	r2, [r3], #4
 801ae3e:	f8ad 1016 	strh.w	r1, [sp, #22]
 801ae42:	6800      	ldr	r0, [r0, #0]
 801ae44:	9301      	str	r3, [sp, #4]
 801ae46:	a902      	add	r1, sp, #8
 801ae48:	f000 f8aa 	bl	801afa0 <_svfprintf_r>
 801ae4c:	9b02      	ldr	r3, [sp, #8]
 801ae4e:	2200      	movs	r2, #0
 801ae50:	701a      	strb	r2, [r3, #0]
 801ae52:	b01c      	add	sp, #112	; 0x70
 801ae54:	f85d eb04 	ldr.w	lr, [sp], #4
 801ae58:	b003      	add	sp, #12
 801ae5a:	4770      	bx	lr
 801ae5c:	20001d2c 	.word	0x20001d2c

0801ae60 <strcpy>:
 801ae60:	4603      	mov	r3, r0
 801ae62:	f811 2b01 	ldrb.w	r2, [r1], #1
 801ae66:	f803 2b01 	strb.w	r2, [r3], #1
 801ae6a:	2a00      	cmp	r2, #0
 801ae6c:	d1f9      	bne.n	801ae62 <strcpy+0x2>
 801ae6e:	4770      	bx	lr

0801ae70 <_strtol_l.isra.0>:
 801ae70:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ae74:	4680      	mov	r8, r0
 801ae76:	4689      	mov	r9, r1
 801ae78:	4692      	mov	sl, r2
 801ae7a:	461f      	mov	r7, r3
 801ae7c:	468b      	mov	fp, r1
 801ae7e:	465d      	mov	r5, fp
 801ae80:	980a      	ldr	r0, [sp, #40]	; 0x28
 801ae82:	f815 4b01 	ldrb.w	r4, [r5], #1
 801ae86:	f001 ffef 	bl	801ce68 <__locale_ctype_ptr_l>
 801ae8a:	4420      	add	r0, r4
 801ae8c:	7846      	ldrb	r6, [r0, #1]
 801ae8e:	f016 0608 	ands.w	r6, r6, #8
 801ae92:	d10b      	bne.n	801aeac <_strtol_l.isra.0+0x3c>
 801ae94:	2c2d      	cmp	r4, #45	; 0x2d
 801ae96:	d10b      	bne.n	801aeb0 <_strtol_l.isra.0+0x40>
 801ae98:	782c      	ldrb	r4, [r5, #0]
 801ae9a:	2601      	movs	r6, #1
 801ae9c:	f10b 0502 	add.w	r5, fp, #2
 801aea0:	b167      	cbz	r7, 801aebc <_strtol_l.isra.0+0x4c>
 801aea2:	2f10      	cmp	r7, #16
 801aea4:	d114      	bne.n	801aed0 <_strtol_l.isra.0+0x60>
 801aea6:	2c30      	cmp	r4, #48	; 0x30
 801aea8:	d00a      	beq.n	801aec0 <_strtol_l.isra.0+0x50>
 801aeaa:	e011      	b.n	801aed0 <_strtol_l.isra.0+0x60>
 801aeac:	46ab      	mov	fp, r5
 801aeae:	e7e6      	b.n	801ae7e <_strtol_l.isra.0+0xe>
 801aeb0:	2c2b      	cmp	r4, #43	; 0x2b
 801aeb2:	bf04      	itt	eq
 801aeb4:	782c      	ldrbeq	r4, [r5, #0]
 801aeb6:	f10b 0502 	addeq.w	r5, fp, #2
 801aeba:	e7f1      	b.n	801aea0 <_strtol_l.isra.0+0x30>
 801aebc:	2c30      	cmp	r4, #48	; 0x30
 801aebe:	d127      	bne.n	801af10 <_strtol_l.isra.0+0xa0>
 801aec0:	782b      	ldrb	r3, [r5, #0]
 801aec2:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 801aec6:	2b58      	cmp	r3, #88	; 0x58
 801aec8:	d14b      	bne.n	801af62 <_strtol_l.isra.0+0xf2>
 801aeca:	786c      	ldrb	r4, [r5, #1]
 801aecc:	2710      	movs	r7, #16
 801aece:	3502      	adds	r5, #2
 801aed0:	2e00      	cmp	r6, #0
 801aed2:	bf0c      	ite	eq
 801aed4:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 801aed8:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 801aedc:	2200      	movs	r2, #0
 801aede:	fbb1 fef7 	udiv	lr, r1, r7
 801aee2:	4610      	mov	r0, r2
 801aee4:	fb07 1c1e 	mls	ip, r7, lr, r1
 801aee8:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 801aeec:	2b09      	cmp	r3, #9
 801aeee:	d811      	bhi.n	801af14 <_strtol_l.isra.0+0xa4>
 801aef0:	461c      	mov	r4, r3
 801aef2:	42a7      	cmp	r7, r4
 801aef4:	dd1d      	ble.n	801af32 <_strtol_l.isra.0+0xc2>
 801aef6:	1c53      	adds	r3, r2, #1
 801aef8:	d007      	beq.n	801af0a <_strtol_l.isra.0+0x9a>
 801aefa:	4586      	cmp	lr, r0
 801aefc:	d316      	bcc.n	801af2c <_strtol_l.isra.0+0xbc>
 801aefe:	d101      	bne.n	801af04 <_strtol_l.isra.0+0x94>
 801af00:	45a4      	cmp	ip, r4
 801af02:	db13      	blt.n	801af2c <_strtol_l.isra.0+0xbc>
 801af04:	fb00 4007 	mla	r0, r0, r7, r4
 801af08:	2201      	movs	r2, #1
 801af0a:	f815 4b01 	ldrb.w	r4, [r5], #1
 801af0e:	e7eb      	b.n	801aee8 <_strtol_l.isra.0+0x78>
 801af10:	270a      	movs	r7, #10
 801af12:	e7dd      	b.n	801aed0 <_strtol_l.isra.0+0x60>
 801af14:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 801af18:	2b19      	cmp	r3, #25
 801af1a:	d801      	bhi.n	801af20 <_strtol_l.isra.0+0xb0>
 801af1c:	3c37      	subs	r4, #55	; 0x37
 801af1e:	e7e8      	b.n	801aef2 <_strtol_l.isra.0+0x82>
 801af20:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 801af24:	2b19      	cmp	r3, #25
 801af26:	d804      	bhi.n	801af32 <_strtol_l.isra.0+0xc2>
 801af28:	3c57      	subs	r4, #87	; 0x57
 801af2a:	e7e2      	b.n	801aef2 <_strtol_l.isra.0+0x82>
 801af2c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801af30:	e7eb      	b.n	801af0a <_strtol_l.isra.0+0x9a>
 801af32:	1c53      	adds	r3, r2, #1
 801af34:	d108      	bne.n	801af48 <_strtol_l.isra.0+0xd8>
 801af36:	2322      	movs	r3, #34	; 0x22
 801af38:	f8c8 3000 	str.w	r3, [r8]
 801af3c:	4608      	mov	r0, r1
 801af3e:	f1ba 0f00 	cmp.w	sl, #0
 801af42:	d107      	bne.n	801af54 <_strtol_l.isra.0+0xe4>
 801af44:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801af48:	b106      	cbz	r6, 801af4c <_strtol_l.isra.0+0xdc>
 801af4a:	4240      	negs	r0, r0
 801af4c:	f1ba 0f00 	cmp.w	sl, #0
 801af50:	d00c      	beq.n	801af6c <_strtol_l.isra.0+0xfc>
 801af52:	b122      	cbz	r2, 801af5e <_strtol_l.isra.0+0xee>
 801af54:	3d01      	subs	r5, #1
 801af56:	f8ca 5000 	str.w	r5, [sl]
 801af5a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801af5e:	464d      	mov	r5, r9
 801af60:	e7f9      	b.n	801af56 <_strtol_l.isra.0+0xe6>
 801af62:	2430      	movs	r4, #48	; 0x30
 801af64:	2f00      	cmp	r7, #0
 801af66:	d1b3      	bne.n	801aed0 <_strtol_l.isra.0+0x60>
 801af68:	2708      	movs	r7, #8
 801af6a:	e7b1      	b.n	801aed0 <_strtol_l.isra.0+0x60>
 801af6c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801af70 <strtol>:
 801af70:	4b08      	ldr	r3, [pc, #32]	; (801af94 <strtol+0x24>)
 801af72:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801af74:	681c      	ldr	r4, [r3, #0]
 801af76:	4d08      	ldr	r5, [pc, #32]	; (801af98 <strtol+0x28>)
 801af78:	6a23      	ldr	r3, [r4, #32]
 801af7a:	2b00      	cmp	r3, #0
 801af7c:	bf08      	it	eq
 801af7e:	462b      	moveq	r3, r5
 801af80:	9300      	str	r3, [sp, #0]
 801af82:	4613      	mov	r3, r2
 801af84:	460a      	mov	r2, r1
 801af86:	4601      	mov	r1, r0
 801af88:	4620      	mov	r0, r4
 801af8a:	f7ff ff71 	bl	801ae70 <_strtol_l.isra.0>
 801af8e:	b003      	add	sp, #12
 801af90:	bd30      	pop	{r4, r5, pc}
 801af92:	bf00      	nop
 801af94:	20001d2c 	.word	0x20001d2c
 801af98:	20002230 	.word	0x20002230
 801af9c:	00000000 	.word	0x00000000

0801afa0 <_svfprintf_r>:
 801afa0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801afa4:	b0bd      	sub	sp, #244	; 0xf4
 801afa6:	468a      	mov	sl, r1
 801afa8:	4615      	mov	r5, r2
 801afaa:	461f      	mov	r7, r3
 801afac:	4683      	mov	fp, r0
 801afae:	f001 ff5f 	bl	801ce70 <_localeconv_r>
 801afb2:	6803      	ldr	r3, [r0, #0]
 801afb4:	930d      	str	r3, [sp, #52]	; 0x34
 801afb6:	4618      	mov	r0, r3
 801afb8:	f7e5 f90a 	bl	80001d0 <strlen>
 801afbc:	f8ba 300c 	ldrh.w	r3, [sl, #12]
 801afc0:	9008      	str	r0, [sp, #32]
 801afc2:	061b      	lsls	r3, r3, #24
 801afc4:	d518      	bpl.n	801aff8 <_svfprintf_r+0x58>
 801afc6:	f8da 3010 	ldr.w	r3, [sl, #16]
 801afca:	b9ab      	cbnz	r3, 801aff8 <_svfprintf_r+0x58>
 801afcc:	2140      	movs	r1, #64	; 0x40
 801afce:	4658      	mov	r0, fp
 801afd0:	f7ff fce4 	bl	801a99c <_malloc_r>
 801afd4:	f8ca 0000 	str.w	r0, [sl]
 801afd8:	f8ca 0010 	str.w	r0, [sl, #16]
 801afdc:	b948      	cbnz	r0, 801aff2 <_svfprintf_r+0x52>
 801afde:	230c      	movs	r3, #12
 801afe0:	f8cb 3000 	str.w	r3, [fp]
 801afe4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801afe8:	9309      	str	r3, [sp, #36]	; 0x24
 801afea:	9809      	ldr	r0, [sp, #36]	; 0x24
 801afec:	b03d      	add	sp, #244	; 0xf4
 801afee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801aff2:	2340      	movs	r3, #64	; 0x40
 801aff4:	f8ca 3014 	str.w	r3, [sl, #20]
 801aff8:	ed9f 7b99 	vldr	d7, [pc, #612]	; 801b260 <_svfprintf_r+0x2c0>
 801affc:	ed8d 7b06 	vstr	d7, [sp, #24]
 801b000:	2300      	movs	r3, #0
 801b002:	ac2c      	add	r4, sp, #176	; 0xb0
 801b004:	941f      	str	r4, [sp, #124]	; 0x7c
 801b006:	9321      	str	r3, [sp, #132]	; 0x84
 801b008:	9320      	str	r3, [sp, #128]	; 0x80
 801b00a:	9505      	str	r5, [sp, #20]
 801b00c:	9303      	str	r3, [sp, #12]
 801b00e:	9311      	str	r3, [sp, #68]	; 0x44
 801b010:	9310      	str	r3, [sp, #64]	; 0x40
 801b012:	9309      	str	r3, [sp, #36]	; 0x24
 801b014:	9d05      	ldr	r5, [sp, #20]
 801b016:	462b      	mov	r3, r5
 801b018:	f813 2b01 	ldrb.w	r2, [r3], #1
 801b01c:	b112      	cbz	r2, 801b024 <_svfprintf_r+0x84>
 801b01e:	2a25      	cmp	r2, #37	; 0x25
 801b020:	f040 8083 	bne.w	801b12a <_svfprintf_r+0x18a>
 801b024:	9b05      	ldr	r3, [sp, #20]
 801b026:	1aee      	subs	r6, r5, r3
 801b028:	d00d      	beq.n	801b046 <_svfprintf_r+0xa6>
 801b02a:	e884 0048 	stmia.w	r4, {r3, r6}
 801b02e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801b030:	4433      	add	r3, r6
 801b032:	9321      	str	r3, [sp, #132]	; 0x84
 801b034:	9b20      	ldr	r3, [sp, #128]	; 0x80
 801b036:	3301      	adds	r3, #1
 801b038:	2b07      	cmp	r3, #7
 801b03a:	9320      	str	r3, [sp, #128]	; 0x80
 801b03c:	dc77      	bgt.n	801b12e <_svfprintf_r+0x18e>
 801b03e:	3408      	adds	r4, #8
 801b040:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801b042:	4433      	add	r3, r6
 801b044:	9309      	str	r3, [sp, #36]	; 0x24
 801b046:	782b      	ldrb	r3, [r5, #0]
 801b048:	2b00      	cmp	r3, #0
 801b04a:	f000 8729 	beq.w	801bea0 <_svfprintf_r+0xf00>
 801b04e:	2300      	movs	r3, #0
 801b050:	1c69      	adds	r1, r5, #1
 801b052:	f88d 305f 	strb.w	r3, [sp, #95]	; 0x5f
 801b056:	461a      	mov	r2, r3
 801b058:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
 801b05c:	930a      	str	r3, [sp, #40]	; 0x28
 801b05e:	461d      	mov	r5, r3
 801b060:	200a      	movs	r0, #10
 801b062:	1c4e      	adds	r6, r1, #1
 801b064:	7809      	ldrb	r1, [r1, #0]
 801b066:	9605      	str	r6, [sp, #20]
 801b068:	9102      	str	r1, [sp, #8]
 801b06a:	9902      	ldr	r1, [sp, #8]
 801b06c:	3920      	subs	r1, #32
 801b06e:	2958      	cmp	r1, #88	; 0x58
 801b070:	f200 8418 	bhi.w	801b8a4 <_svfprintf_r+0x904>
 801b074:	e8df f011 	tbh	[pc, r1, lsl #1]
 801b078:	041600a6 	.word	0x041600a6
 801b07c:	00ab0416 	.word	0x00ab0416
 801b080:	04160416 	.word	0x04160416
 801b084:	04160416 	.word	0x04160416
 801b088:	04160416 	.word	0x04160416
 801b08c:	006500ae 	.word	0x006500ae
 801b090:	00b70416 	.word	0x00b70416
 801b094:	041600ba 	.word	0x041600ba
 801b098:	00da00d7 	.word	0x00da00d7
 801b09c:	00da00da 	.word	0x00da00da
 801b0a0:	00da00da 	.word	0x00da00da
 801b0a4:	00da00da 	.word	0x00da00da
 801b0a8:	00da00da 	.word	0x00da00da
 801b0ac:	04160416 	.word	0x04160416
 801b0b0:	04160416 	.word	0x04160416
 801b0b4:	04160416 	.word	0x04160416
 801b0b8:	04160416 	.word	0x04160416
 801b0bc:	04160416 	.word	0x04160416
 801b0c0:	012b0115 	.word	0x012b0115
 801b0c4:	012b0416 	.word	0x012b0416
 801b0c8:	04160416 	.word	0x04160416
 801b0cc:	04160416 	.word	0x04160416
 801b0d0:	041600ed 	.word	0x041600ed
 801b0d4:	03400416 	.word	0x03400416
 801b0d8:	04160416 	.word	0x04160416
 801b0dc:	04160416 	.word	0x04160416
 801b0e0:	03a80416 	.word	0x03a80416
 801b0e4:	04160416 	.word	0x04160416
 801b0e8:	04160086 	.word	0x04160086
 801b0ec:	04160416 	.word	0x04160416
 801b0f0:	04160416 	.word	0x04160416
 801b0f4:	04160416 	.word	0x04160416
 801b0f8:	04160416 	.word	0x04160416
 801b0fc:	01070416 	.word	0x01070416
 801b100:	012b006b 	.word	0x012b006b
 801b104:	012b012b 	.word	0x012b012b
 801b108:	006b00f0 	.word	0x006b00f0
 801b10c:	04160416 	.word	0x04160416
 801b110:	041600fa 	.word	0x041600fa
 801b114:	03420322 	.word	0x03420322
 801b118:	01010376 	.word	0x01010376
 801b11c:	03870416 	.word	0x03870416
 801b120:	03aa0416 	.word	0x03aa0416
 801b124:	04160416 	.word	0x04160416
 801b128:	03c2      	.short	0x03c2
 801b12a:	461d      	mov	r5, r3
 801b12c:	e773      	b.n	801b016 <_svfprintf_r+0x76>
 801b12e:	aa1f      	add	r2, sp, #124	; 0x7c
 801b130:	4651      	mov	r1, sl
 801b132:	4658      	mov	r0, fp
 801b134:	f002 f996 	bl	801d464 <__ssprint_r>
 801b138:	2800      	cmp	r0, #0
 801b13a:	f040 8692 	bne.w	801be62 <_svfprintf_r+0xec2>
 801b13e:	ac2c      	add	r4, sp, #176	; 0xb0
 801b140:	e77e      	b.n	801b040 <_svfprintf_r+0xa0>
 801b142:	2301      	movs	r3, #1
 801b144:	222b      	movs	r2, #43	; 0x2b
 801b146:	9905      	ldr	r1, [sp, #20]
 801b148:	e78b      	b.n	801b062 <_svfprintf_r+0xc2>
 801b14a:	460f      	mov	r7, r1
 801b14c:	e7fb      	b.n	801b146 <_svfprintf_r+0x1a6>
 801b14e:	b10b      	cbz	r3, 801b154 <_svfprintf_r+0x1b4>
 801b150:	f88d 205f 	strb.w	r2, [sp, #95]	; 0x5f
 801b154:	06ae      	lsls	r6, r5, #26
 801b156:	f140 80aa 	bpl.w	801b2ae <_svfprintf_r+0x30e>
 801b15a:	3707      	adds	r7, #7
 801b15c:	f027 0707 	bic.w	r7, r7, #7
 801b160:	f107 0308 	add.w	r3, r7, #8
 801b164:	e9d7 6700 	ldrd	r6, r7, [r7]
 801b168:	9304      	str	r3, [sp, #16]
 801b16a:	2e00      	cmp	r6, #0
 801b16c:	f177 0300 	sbcs.w	r3, r7, #0
 801b170:	da06      	bge.n	801b180 <_svfprintf_r+0x1e0>
 801b172:	4276      	negs	r6, r6
 801b174:	f04f 032d 	mov.w	r3, #45	; 0x2d
 801b178:	eb67 0747 	sbc.w	r7, r7, r7, lsl #1
 801b17c:	f88d 305f 	strb.w	r3, [sp, #95]	; 0x5f
 801b180:	2301      	movs	r3, #1
 801b182:	e2ca      	b.n	801b71a <_svfprintf_r+0x77a>
 801b184:	b10b      	cbz	r3, 801b18a <_svfprintf_r+0x1ea>
 801b186:	f88d 205f 	strb.w	r2, [sp, #95]	; 0x5f
 801b18a:	4b37      	ldr	r3, [pc, #220]	; (801b268 <_svfprintf_r+0x2c8>)
 801b18c:	9311      	str	r3, [sp, #68]	; 0x44
 801b18e:	06ab      	lsls	r3, r5, #26
 801b190:	f140 8339 	bpl.w	801b806 <_svfprintf_r+0x866>
 801b194:	3707      	adds	r7, #7
 801b196:	f027 0707 	bic.w	r7, r7, #7
 801b19a:	f107 0308 	add.w	r3, r7, #8
 801b19e:	e9d7 6700 	ldrd	r6, r7, [r7]
 801b1a2:	9304      	str	r3, [sp, #16]
 801b1a4:	07e8      	lsls	r0, r5, #31
 801b1a6:	d50b      	bpl.n	801b1c0 <_svfprintf_r+0x220>
 801b1a8:	ea56 0307 	orrs.w	r3, r6, r7
 801b1ac:	d008      	beq.n	801b1c0 <_svfprintf_r+0x220>
 801b1ae:	2330      	movs	r3, #48	; 0x30
 801b1b0:	f88d 3060 	strb.w	r3, [sp, #96]	; 0x60
 801b1b4:	f89d 3008 	ldrb.w	r3, [sp, #8]
 801b1b8:	f88d 3061 	strb.w	r3, [sp, #97]	; 0x61
 801b1bc:	f045 0502 	orr.w	r5, r5, #2
 801b1c0:	2302      	movs	r3, #2
 801b1c2:	e2a7      	b.n	801b714 <_svfprintf_r+0x774>
 801b1c4:	2a00      	cmp	r2, #0
 801b1c6:	d1be      	bne.n	801b146 <_svfprintf_r+0x1a6>
 801b1c8:	2301      	movs	r3, #1
 801b1ca:	2220      	movs	r2, #32
 801b1cc:	e7bb      	b.n	801b146 <_svfprintf_r+0x1a6>
 801b1ce:	f045 0501 	orr.w	r5, r5, #1
 801b1d2:	e7b8      	b.n	801b146 <_svfprintf_r+0x1a6>
 801b1d4:	683e      	ldr	r6, [r7, #0]
 801b1d6:	960a      	str	r6, [sp, #40]	; 0x28
 801b1d8:	2e00      	cmp	r6, #0
 801b1da:	f107 0104 	add.w	r1, r7, #4
 801b1de:	dab4      	bge.n	801b14a <_svfprintf_r+0x1aa>
 801b1e0:	4276      	negs	r6, r6
 801b1e2:	960a      	str	r6, [sp, #40]	; 0x28
 801b1e4:	460f      	mov	r7, r1
 801b1e6:	f045 0504 	orr.w	r5, r5, #4
 801b1ea:	e7ac      	b.n	801b146 <_svfprintf_r+0x1a6>
 801b1ec:	9905      	ldr	r1, [sp, #20]
 801b1ee:	1c4e      	adds	r6, r1, #1
 801b1f0:	7809      	ldrb	r1, [r1, #0]
 801b1f2:	9102      	str	r1, [sp, #8]
 801b1f4:	292a      	cmp	r1, #42	; 0x2a
 801b1f6:	d010      	beq.n	801b21a <_svfprintf_r+0x27a>
 801b1f8:	f04f 0900 	mov.w	r9, #0
 801b1fc:	9605      	str	r6, [sp, #20]
 801b1fe:	9902      	ldr	r1, [sp, #8]
 801b200:	3930      	subs	r1, #48	; 0x30
 801b202:	2909      	cmp	r1, #9
 801b204:	f63f af31 	bhi.w	801b06a <_svfprintf_r+0xca>
 801b208:	fb00 1909 	mla	r9, r0, r9, r1
 801b20c:	9905      	ldr	r1, [sp, #20]
 801b20e:	460e      	mov	r6, r1
 801b210:	f816 1b01 	ldrb.w	r1, [r6], #1
 801b214:	9102      	str	r1, [sp, #8]
 801b216:	9605      	str	r6, [sp, #20]
 801b218:	e7f1      	b.n	801b1fe <_svfprintf_r+0x25e>
 801b21a:	6839      	ldr	r1, [r7, #0]
 801b21c:	9605      	str	r6, [sp, #20]
 801b21e:	ea41 79e1 	orr.w	r9, r1, r1, asr #31
 801b222:	3704      	adds	r7, #4
 801b224:	e78f      	b.n	801b146 <_svfprintf_r+0x1a6>
 801b226:	f045 0580 	orr.w	r5, r5, #128	; 0x80
 801b22a:	e78c      	b.n	801b146 <_svfprintf_r+0x1a6>
 801b22c:	2100      	movs	r1, #0
 801b22e:	910a      	str	r1, [sp, #40]	; 0x28
 801b230:	9902      	ldr	r1, [sp, #8]
 801b232:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 801b234:	3930      	subs	r1, #48	; 0x30
 801b236:	fb00 1106 	mla	r1, r0, r6, r1
 801b23a:	910a      	str	r1, [sp, #40]	; 0x28
 801b23c:	9905      	ldr	r1, [sp, #20]
 801b23e:	460e      	mov	r6, r1
 801b240:	f816 1b01 	ldrb.w	r1, [r6], #1
 801b244:	9102      	str	r1, [sp, #8]
 801b246:	9902      	ldr	r1, [sp, #8]
 801b248:	9605      	str	r6, [sp, #20]
 801b24a:	3930      	subs	r1, #48	; 0x30
 801b24c:	2909      	cmp	r1, #9
 801b24e:	d9ef      	bls.n	801b230 <_svfprintf_r+0x290>
 801b250:	e70b      	b.n	801b06a <_svfprintf_r+0xca>
 801b252:	f045 0508 	orr.w	r5, r5, #8
 801b256:	e776      	b.n	801b146 <_svfprintf_r+0x1a6>
 801b258:	f045 0540 	orr.w	r5, r5, #64	; 0x40
 801b25c:	e773      	b.n	801b146 <_svfprintf_r+0x1a6>
 801b25e:	bf00      	nop
	...
 801b268:	080f4fe2 	.word	0x080f4fe2
 801b26c:	9905      	ldr	r1, [sp, #20]
 801b26e:	7809      	ldrb	r1, [r1, #0]
 801b270:	296c      	cmp	r1, #108	; 0x6c
 801b272:	d105      	bne.n	801b280 <_svfprintf_r+0x2e0>
 801b274:	9905      	ldr	r1, [sp, #20]
 801b276:	3101      	adds	r1, #1
 801b278:	9105      	str	r1, [sp, #20]
 801b27a:	f045 0520 	orr.w	r5, r5, #32
 801b27e:	e762      	b.n	801b146 <_svfprintf_r+0x1a6>
 801b280:	f045 0510 	orr.w	r5, r5, #16
 801b284:	e75f      	b.n	801b146 <_svfprintf_r+0x1a6>
 801b286:	1d3b      	adds	r3, r7, #4
 801b288:	9304      	str	r3, [sp, #16]
 801b28a:	2600      	movs	r6, #0
 801b28c:	683b      	ldr	r3, [r7, #0]
 801b28e:	f88d 3088 	strb.w	r3, [sp, #136]	; 0x88
 801b292:	f88d 605f 	strb.w	r6, [sp, #95]	; 0x5f
 801b296:	f04f 0901 	mov.w	r9, #1
 801b29a:	4637      	mov	r7, r6
 801b29c:	f10d 0888 	add.w	r8, sp, #136	; 0x88
 801b2a0:	e11b      	b.n	801b4da <_svfprintf_r+0x53a>
 801b2a2:	b10b      	cbz	r3, 801b2a8 <_svfprintf_r+0x308>
 801b2a4:	f88d 205f 	strb.w	r2, [sp, #95]	; 0x5f
 801b2a8:	f045 0510 	orr.w	r5, r5, #16
 801b2ac:	e752      	b.n	801b154 <_svfprintf_r+0x1b4>
 801b2ae:	f015 0f10 	tst.w	r5, #16
 801b2b2:	f107 0304 	add.w	r3, r7, #4
 801b2b6:	d003      	beq.n	801b2c0 <_svfprintf_r+0x320>
 801b2b8:	683e      	ldr	r6, [r7, #0]
 801b2ba:	9304      	str	r3, [sp, #16]
 801b2bc:	17f7      	asrs	r7, r6, #31
 801b2be:	e754      	b.n	801b16a <_svfprintf_r+0x1ca>
 801b2c0:	683e      	ldr	r6, [r7, #0]
 801b2c2:	9304      	str	r3, [sp, #16]
 801b2c4:	f015 0f40 	tst.w	r5, #64	; 0x40
 801b2c8:	bf18      	it	ne
 801b2ca:	b236      	sxthne	r6, r6
 801b2cc:	e7f6      	b.n	801b2bc <_svfprintf_r+0x31c>
 801b2ce:	b10b      	cbz	r3, 801b2d4 <_svfprintf_r+0x334>
 801b2d0:	f88d 205f 	strb.w	r2, [sp, #95]	; 0x5f
 801b2d4:	3707      	adds	r7, #7
 801b2d6:	f027 0707 	bic.w	r7, r7, #7
 801b2da:	f107 0308 	add.w	r3, r7, #8
 801b2de:	9304      	str	r3, [sp, #16]
 801b2e0:	ed97 7b00 	vldr	d7, [r7]
 801b2e4:	ed8d 7b06 	vstr	d7, [sp, #24]
 801b2e8:	9b06      	ldr	r3, [sp, #24]
 801b2ea:	9312      	str	r3, [sp, #72]	; 0x48
 801b2ec:	9b07      	ldr	r3, [sp, #28]
 801b2ee:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 801b2f2:	9313      	str	r3, [sp, #76]	; 0x4c
 801b2f4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801b2f8:	4b4a      	ldr	r3, [pc, #296]	; (801b424 <_svfprintf_r+0x484>)
 801b2fa:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
 801b2fe:	f7e5 fc11 	bl	8000b24 <__aeabi_dcmpun>
 801b302:	2800      	cmp	r0, #0
 801b304:	f040 85d5 	bne.w	801beb2 <_svfprintf_r+0xf12>
 801b308:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801b30c:	4b45      	ldr	r3, [pc, #276]	; (801b424 <_svfprintf_r+0x484>)
 801b30e:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
 801b312:	f7e5 fbe9 	bl	8000ae8 <__aeabi_dcmple>
 801b316:	2800      	cmp	r0, #0
 801b318:	f040 85cb 	bne.w	801beb2 <_svfprintf_r+0xf12>
 801b31c:	2200      	movs	r2, #0
 801b31e:	2300      	movs	r3, #0
 801b320:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801b324:	f7e5 fbd6 	bl	8000ad4 <__aeabi_dcmplt>
 801b328:	b110      	cbz	r0, 801b330 <_svfprintf_r+0x390>
 801b32a:	232d      	movs	r3, #45	; 0x2d
 801b32c:	f88d 305f 	strb.w	r3, [sp, #95]	; 0x5f
 801b330:	4b3d      	ldr	r3, [pc, #244]	; (801b428 <_svfprintf_r+0x488>)
 801b332:	4a3e      	ldr	r2, [pc, #248]	; (801b42c <_svfprintf_r+0x48c>)
 801b334:	9902      	ldr	r1, [sp, #8]
 801b336:	f025 0580 	bic.w	r5, r5, #128	; 0x80
 801b33a:	2947      	cmp	r1, #71	; 0x47
 801b33c:	bfcc      	ite	gt
 801b33e:	4690      	movgt	r8, r2
 801b340:	4698      	movle	r8, r3
 801b342:	f04f 0903 	mov.w	r9, #3
 801b346:	2600      	movs	r6, #0
 801b348:	4637      	mov	r7, r6
 801b34a:	e0c6      	b.n	801b4da <_svfprintf_r+0x53a>
 801b34c:	f1b9 3fff 	cmp.w	r9, #4294967295	; 0xffffffff
 801b350:	d022      	beq.n	801b398 <_svfprintf_r+0x3f8>
 801b352:	9b02      	ldr	r3, [sp, #8]
 801b354:	f023 0320 	bic.w	r3, r3, #32
 801b358:	2b47      	cmp	r3, #71	; 0x47
 801b35a:	d104      	bne.n	801b366 <_svfprintf_r+0x3c6>
 801b35c:	f1b9 0f00 	cmp.w	r9, #0
 801b360:	bf08      	it	eq
 801b362:	f04f 0901 	moveq.w	r9, #1
 801b366:	f445 7380 	orr.w	r3, r5, #256	; 0x100
 801b36a:	930c      	str	r3, [sp, #48]	; 0x30
 801b36c:	9b07      	ldr	r3, [sp, #28]
 801b36e:	2b00      	cmp	r3, #0
 801b370:	da15      	bge.n	801b39e <_svfprintf_r+0x3fe>
 801b372:	9b06      	ldr	r3, [sp, #24]
 801b374:	930e      	str	r3, [sp, #56]	; 0x38
 801b376:	9b07      	ldr	r3, [sp, #28]
 801b378:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 801b37c:	930f      	str	r3, [sp, #60]	; 0x3c
 801b37e:	232d      	movs	r3, #45	; 0x2d
 801b380:	930b      	str	r3, [sp, #44]	; 0x2c
 801b382:	9b02      	ldr	r3, [sp, #8]
 801b384:	f023 0720 	bic.w	r7, r3, #32
 801b388:	2f46      	cmp	r7, #70	; 0x46
 801b38a:	d00e      	beq.n	801b3aa <_svfprintf_r+0x40a>
 801b38c:	2f45      	cmp	r7, #69	; 0x45
 801b38e:	d146      	bne.n	801b41e <_svfprintf_r+0x47e>
 801b390:	f109 0601 	add.w	r6, r9, #1
 801b394:	2102      	movs	r1, #2
 801b396:	e00a      	b.n	801b3ae <_svfprintf_r+0x40e>
 801b398:	f04f 0906 	mov.w	r9, #6
 801b39c:	e7e3      	b.n	801b366 <_svfprintf_r+0x3c6>
 801b39e:	ed9d 7b06 	vldr	d7, [sp, #24]
 801b3a2:	2300      	movs	r3, #0
 801b3a4:	ed8d 7b0e 	vstr	d7, [sp, #56]	; 0x38
 801b3a8:	e7ea      	b.n	801b380 <_svfprintf_r+0x3e0>
 801b3aa:	464e      	mov	r6, r9
 801b3ac:	2103      	movs	r1, #3
 801b3ae:	ab1d      	add	r3, sp, #116	; 0x74
 801b3b0:	9301      	str	r3, [sp, #4]
 801b3b2:	ab1a      	add	r3, sp, #104	; 0x68
 801b3b4:	9300      	str	r3, [sp, #0]
 801b3b6:	4632      	mov	r2, r6
 801b3b8:	ab19      	add	r3, sp, #100	; 0x64
 801b3ba:	ed9d 0b0e 	vldr	d0, [sp, #56]	; 0x38
 801b3be:	4658      	mov	r0, fp
 801b3c0:	f000 fe72 	bl	801c0a8 <_dtoa_r>
 801b3c4:	2f47      	cmp	r7, #71	; 0x47
 801b3c6:	4680      	mov	r8, r0
 801b3c8:	d102      	bne.n	801b3d0 <_svfprintf_r+0x430>
 801b3ca:	07e8      	lsls	r0, r5, #31
 801b3cc:	f140 857e 	bpl.w	801becc <_svfprintf_r+0xf2c>
 801b3d0:	eb08 0306 	add.w	r3, r8, r6
 801b3d4:	2f46      	cmp	r7, #70	; 0x46
 801b3d6:	9303      	str	r3, [sp, #12]
 801b3d8:	d111      	bne.n	801b3fe <_svfprintf_r+0x45e>
 801b3da:	f898 3000 	ldrb.w	r3, [r8]
 801b3de:	2b30      	cmp	r3, #48	; 0x30
 801b3e0:	d109      	bne.n	801b3f6 <_svfprintf_r+0x456>
 801b3e2:	2200      	movs	r2, #0
 801b3e4:	2300      	movs	r3, #0
 801b3e6:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 801b3ea:	f7e5 fb69 	bl	8000ac0 <__aeabi_dcmpeq>
 801b3ee:	b910      	cbnz	r0, 801b3f6 <_svfprintf_r+0x456>
 801b3f0:	f1c6 0601 	rsb	r6, r6, #1
 801b3f4:	9619      	str	r6, [sp, #100]	; 0x64
 801b3f6:	9a03      	ldr	r2, [sp, #12]
 801b3f8:	9b19      	ldr	r3, [sp, #100]	; 0x64
 801b3fa:	441a      	add	r2, r3
 801b3fc:	9203      	str	r2, [sp, #12]
 801b3fe:	2200      	movs	r2, #0
 801b400:	2300      	movs	r3, #0
 801b402:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 801b406:	f7e5 fb5b 	bl	8000ac0 <__aeabi_dcmpeq>
 801b40a:	b988      	cbnz	r0, 801b430 <_svfprintf_r+0x490>
 801b40c:	2230      	movs	r2, #48	; 0x30
 801b40e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801b410:	9903      	ldr	r1, [sp, #12]
 801b412:	4299      	cmp	r1, r3
 801b414:	d90e      	bls.n	801b434 <_svfprintf_r+0x494>
 801b416:	1c59      	adds	r1, r3, #1
 801b418:	911d      	str	r1, [sp, #116]	; 0x74
 801b41a:	701a      	strb	r2, [r3, #0]
 801b41c:	e7f7      	b.n	801b40e <_svfprintf_r+0x46e>
 801b41e:	464e      	mov	r6, r9
 801b420:	e7b8      	b.n	801b394 <_svfprintf_r+0x3f4>
 801b422:	bf00      	nop
 801b424:	7fefffff 	.word	0x7fefffff
 801b428:	080f4fd2 	.word	0x080f4fd2
 801b42c:	080f4fd6 	.word	0x080f4fd6
 801b430:	9b03      	ldr	r3, [sp, #12]
 801b432:	931d      	str	r3, [sp, #116]	; 0x74
 801b434:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801b436:	2f47      	cmp	r7, #71	; 0x47
 801b438:	eba3 0308 	sub.w	r3, r3, r8
 801b43c:	9303      	str	r3, [sp, #12]
 801b43e:	f040 80fa 	bne.w	801b636 <_svfprintf_r+0x696>
 801b442:	9b19      	ldr	r3, [sp, #100]	; 0x64
 801b444:	1cd9      	adds	r1, r3, #3
 801b446:	db02      	blt.n	801b44e <_svfprintf_r+0x4ae>
 801b448:	4599      	cmp	r9, r3
 801b44a:	f280 8120 	bge.w	801b68e <_svfprintf_r+0x6ee>
 801b44e:	9b02      	ldr	r3, [sp, #8]
 801b450:	3b02      	subs	r3, #2
 801b452:	9302      	str	r3, [sp, #8]
 801b454:	9a19      	ldr	r2, [sp, #100]	; 0x64
 801b456:	f89d 1008 	ldrb.w	r1, [sp, #8]
 801b45a:	f88d 106c 	strb.w	r1, [sp, #108]	; 0x6c
 801b45e:	1e53      	subs	r3, r2, #1
 801b460:	2b00      	cmp	r3, #0
 801b462:	9319      	str	r3, [sp, #100]	; 0x64
 801b464:	bfb6      	itet	lt
 801b466:	f1c2 0301 	rsblt	r3, r2, #1
 801b46a:	222b      	movge	r2, #43	; 0x2b
 801b46c:	222d      	movlt	r2, #45	; 0x2d
 801b46e:	2b09      	cmp	r3, #9
 801b470:	f88d 206d 	strb.w	r2, [sp, #109]	; 0x6d
 801b474:	f340 80fb 	ble.w	801b66e <_svfprintf_r+0x6ce>
 801b478:	f10d 027b 	add.w	r2, sp, #123	; 0x7b
 801b47c:	260a      	movs	r6, #10
 801b47e:	fb93 f0f6 	sdiv	r0, r3, r6
 801b482:	fb06 3310 	mls	r3, r6, r0, r3
 801b486:	3330      	adds	r3, #48	; 0x30
 801b488:	2809      	cmp	r0, #9
 801b48a:	f802 3c01 	strb.w	r3, [r2, #-1]
 801b48e:	f102 31ff 	add.w	r1, r2, #4294967295	; 0xffffffff
 801b492:	4603      	mov	r3, r0
 801b494:	f300 80e4 	bgt.w	801b660 <_svfprintf_r+0x6c0>
 801b498:	3330      	adds	r3, #48	; 0x30
 801b49a:	f801 3c01 	strb.w	r3, [r1, #-1]
 801b49e:	3a02      	subs	r2, #2
 801b4a0:	f10d 036e 	add.w	r3, sp, #110	; 0x6e
 801b4a4:	f10d 007b 	add.w	r0, sp, #123	; 0x7b
 801b4a8:	4282      	cmp	r2, r0
 801b4aa:	4619      	mov	r1, r3
 801b4ac:	f0c0 80da 	bcc.w	801b664 <_svfprintf_r+0x6c4>
 801b4b0:	9a03      	ldr	r2, [sp, #12]
 801b4b2:	ab1b      	add	r3, sp, #108	; 0x6c
 801b4b4:	1acb      	subs	r3, r1, r3
 801b4b6:	2a01      	cmp	r2, #1
 801b4b8:	9310      	str	r3, [sp, #64]	; 0x40
 801b4ba:	eb03 0902 	add.w	r9, r3, r2
 801b4be:	dc02      	bgt.n	801b4c6 <_svfprintf_r+0x526>
 801b4c0:	f015 0701 	ands.w	r7, r5, #1
 801b4c4:	d002      	beq.n	801b4cc <_svfprintf_r+0x52c>
 801b4c6:	9b08      	ldr	r3, [sp, #32]
 801b4c8:	2700      	movs	r7, #0
 801b4ca:	4499      	add	r9, r3
 801b4cc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801b4ce:	b113      	cbz	r3, 801b4d6 <_svfprintf_r+0x536>
 801b4d0:	232d      	movs	r3, #45	; 0x2d
 801b4d2:	f88d 305f 	strb.w	r3, [sp, #95]	; 0x5f
 801b4d6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 801b4d8:	2600      	movs	r6, #0
 801b4da:	454e      	cmp	r6, r9
 801b4dc:	4633      	mov	r3, r6
 801b4de:	bfb8      	it	lt
 801b4e0:	464b      	movlt	r3, r9
 801b4e2:	930b      	str	r3, [sp, #44]	; 0x2c
 801b4e4:	f89d 305f 	ldrb.w	r3, [sp, #95]	; 0x5f
 801b4e8:	b113      	cbz	r3, 801b4f0 <_svfprintf_r+0x550>
 801b4ea:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801b4ec:	3301      	adds	r3, #1
 801b4ee:	930b      	str	r3, [sp, #44]	; 0x2c
 801b4f0:	f015 0302 	ands.w	r3, r5, #2
 801b4f4:	9314      	str	r3, [sp, #80]	; 0x50
 801b4f6:	bf1e      	ittt	ne
 801b4f8:	9b0b      	ldrne	r3, [sp, #44]	; 0x2c
 801b4fa:	3302      	addne	r3, #2
 801b4fc:	930b      	strne	r3, [sp, #44]	; 0x2c
 801b4fe:	f015 0384 	ands.w	r3, r5, #132	; 0x84
 801b502:	9315      	str	r3, [sp, #84]	; 0x54
 801b504:	d118      	bne.n	801b538 <_svfprintf_r+0x598>
 801b506:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801b508:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801b50a:	1a9b      	subs	r3, r3, r2
 801b50c:	2b00      	cmp	r3, #0
 801b50e:	930c      	str	r3, [sp, #48]	; 0x30
 801b510:	dd12      	ble.n	801b538 <_svfprintf_r+0x598>
 801b512:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801b514:	2b10      	cmp	r3, #16
 801b516:	4ba9      	ldr	r3, [pc, #676]	; (801b7bc <_svfprintf_r+0x81c>)
 801b518:	6023      	str	r3, [r4, #0]
 801b51a:	f300 81d5 	bgt.w	801b8c8 <_svfprintf_r+0x928>
 801b51e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801b520:	6063      	str	r3, [r4, #4]
 801b522:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801b524:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801b526:	4413      	add	r3, r2
 801b528:	9321      	str	r3, [sp, #132]	; 0x84
 801b52a:	9b20      	ldr	r3, [sp, #128]	; 0x80
 801b52c:	3301      	adds	r3, #1
 801b52e:	2b07      	cmp	r3, #7
 801b530:	9320      	str	r3, [sp, #128]	; 0x80
 801b532:	f300 81e2 	bgt.w	801b8fa <_svfprintf_r+0x95a>
 801b536:	3408      	adds	r4, #8
 801b538:	f89d 305f 	ldrb.w	r3, [sp, #95]	; 0x5f
 801b53c:	b173      	cbz	r3, 801b55c <_svfprintf_r+0x5bc>
 801b53e:	f10d 035f 	add.w	r3, sp, #95	; 0x5f
 801b542:	6023      	str	r3, [r4, #0]
 801b544:	2301      	movs	r3, #1
 801b546:	6063      	str	r3, [r4, #4]
 801b548:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801b54a:	3301      	adds	r3, #1
 801b54c:	9321      	str	r3, [sp, #132]	; 0x84
 801b54e:	9b20      	ldr	r3, [sp, #128]	; 0x80
 801b550:	3301      	adds	r3, #1
 801b552:	2b07      	cmp	r3, #7
 801b554:	9320      	str	r3, [sp, #128]	; 0x80
 801b556:	f300 81da 	bgt.w	801b90e <_svfprintf_r+0x96e>
 801b55a:	3408      	adds	r4, #8
 801b55c:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801b55e:	b16b      	cbz	r3, 801b57c <_svfprintf_r+0x5dc>
 801b560:	ab18      	add	r3, sp, #96	; 0x60
 801b562:	6023      	str	r3, [r4, #0]
 801b564:	2302      	movs	r3, #2
 801b566:	6063      	str	r3, [r4, #4]
 801b568:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801b56a:	3302      	adds	r3, #2
 801b56c:	9321      	str	r3, [sp, #132]	; 0x84
 801b56e:	9b20      	ldr	r3, [sp, #128]	; 0x80
 801b570:	3301      	adds	r3, #1
 801b572:	2b07      	cmp	r3, #7
 801b574:	9320      	str	r3, [sp, #128]	; 0x80
 801b576:	f300 81d4 	bgt.w	801b922 <_svfprintf_r+0x982>
 801b57a:	3408      	adds	r4, #8
 801b57c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801b57e:	2b80      	cmp	r3, #128	; 0x80
 801b580:	d114      	bne.n	801b5ac <_svfprintf_r+0x60c>
 801b582:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801b584:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801b586:	1a9b      	subs	r3, r3, r2
 801b588:	2b00      	cmp	r3, #0
 801b58a:	dd0f      	ble.n	801b5ac <_svfprintf_r+0x60c>
 801b58c:	4a8c      	ldr	r2, [pc, #560]	; (801b7c0 <_svfprintf_r+0x820>)
 801b58e:	6022      	str	r2, [r4, #0]
 801b590:	2b10      	cmp	r3, #16
 801b592:	f300 81d0 	bgt.w	801b936 <_svfprintf_r+0x996>
 801b596:	9a21      	ldr	r2, [sp, #132]	; 0x84
 801b598:	6063      	str	r3, [r4, #4]
 801b59a:	4413      	add	r3, r2
 801b59c:	9321      	str	r3, [sp, #132]	; 0x84
 801b59e:	9b20      	ldr	r3, [sp, #128]	; 0x80
 801b5a0:	3301      	adds	r3, #1
 801b5a2:	2b07      	cmp	r3, #7
 801b5a4:	9320      	str	r3, [sp, #128]	; 0x80
 801b5a6:	f300 81df 	bgt.w	801b968 <_svfprintf_r+0x9c8>
 801b5aa:	3408      	adds	r4, #8
 801b5ac:	eba6 0609 	sub.w	r6, r6, r9
 801b5b0:	2e00      	cmp	r6, #0
 801b5b2:	dd0f      	ble.n	801b5d4 <_svfprintf_r+0x634>
 801b5b4:	4b82      	ldr	r3, [pc, #520]	; (801b7c0 <_svfprintf_r+0x820>)
 801b5b6:	6023      	str	r3, [r4, #0]
 801b5b8:	2e10      	cmp	r6, #16
 801b5ba:	f300 81df 	bgt.w	801b97c <_svfprintf_r+0x9dc>
 801b5be:	9b20      	ldr	r3, [sp, #128]	; 0x80
 801b5c0:	9821      	ldr	r0, [sp, #132]	; 0x84
 801b5c2:	6066      	str	r6, [r4, #4]
 801b5c4:	3301      	adds	r3, #1
 801b5c6:	4406      	add	r6, r0
 801b5c8:	2b07      	cmp	r3, #7
 801b5ca:	9621      	str	r6, [sp, #132]	; 0x84
 801b5cc:	9320      	str	r3, [sp, #128]	; 0x80
 801b5ce:	f300 81ec 	bgt.w	801b9aa <_svfprintf_r+0xa0a>
 801b5d2:	3408      	adds	r4, #8
 801b5d4:	05eb      	lsls	r3, r5, #23
 801b5d6:	f100 81f2 	bmi.w	801b9be <_svfprintf_r+0xa1e>
 801b5da:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801b5dc:	e884 0300 	stmia.w	r4, {r8, r9}
 801b5e0:	444b      	add	r3, r9
 801b5e2:	9321      	str	r3, [sp, #132]	; 0x84
 801b5e4:	9b20      	ldr	r3, [sp, #128]	; 0x80
 801b5e6:	3301      	adds	r3, #1
 801b5e8:	2b07      	cmp	r3, #7
 801b5ea:	9320      	str	r3, [sp, #128]	; 0x80
 801b5ec:	f340 8419 	ble.w	801be22 <_svfprintf_r+0xe82>
 801b5f0:	aa1f      	add	r2, sp, #124	; 0x7c
 801b5f2:	4651      	mov	r1, sl
 801b5f4:	4658      	mov	r0, fp
 801b5f6:	f001 ff35 	bl	801d464 <__ssprint_r>
 801b5fa:	2800      	cmp	r0, #0
 801b5fc:	f040 8431 	bne.w	801be62 <_svfprintf_r+0xec2>
 801b600:	ac2c      	add	r4, sp, #176	; 0xb0
 801b602:	076b      	lsls	r3, r5, #29
 801b604:	f100 8410 	bmi.w	801be28 <_svfprintf_r+0xe88>
 801b608:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801b60a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801b60c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801b60e:	428a      	cmp	r2, r1
 801b610:	bfac      	ite	ge
 801b612:	189b      	addge	r3, r3, r2
 801b614:	185b      	addlt	r3, r3, r1
 801b616:	9309      	str	r3, [sp, #36]	; 0x24
 801b618:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801b61a:	b13b      	cbz	r3, 801b62c <_svfprintf_r+0x68c>
 801b61c:	aa1f      	add	r2, sp, #124	; 0x7c
 801b61e:	4651      	mov	r1, sl
 801b620:	4658      	mov	r0, fp
 801b622:	f001 ff1f 	bl	801d464 <__ssprint_r>
 801b626:	2800      	cmp	r0, #0
 801b628:	f040 841b 	bne.w	801be62 <_svfprintf_r+0xec2>
 801b62c:	2300      	movs	r3, #0
 801b62e:	9320      	str	r3, [sp, #128]	; 0x80
 801b630:	9f04      	ldr	r7, [sp, #16]
 801b632:	ac2c      	add	r4, sp, #176	; 0xb0
 801b634:	e4ee      	b.n	801b014 <_svfprintf_r+0x74>
 801b636:	9b02      	ldr	r3, [sp, #8]
 801b638:	2b65      	cmp	r3, #101	; 0x65
 801b63a:	f77f af0b 	ble.w	801b454 <_svfprintf_r+0x4b4>
 801b63e:	9b02      	ldr	r3, [sp, #8]
 801b640:	2b66      	cmp	r3, #102	; 0x66
 801b642:	d124      	bne.n	801b68e <_svfprintf_r+0x6ee>
 801b644:	9b19      	ldr	r3, [sp, #100]	; 0x64
 801b646:	2b00      	cmp	r3, #0
 801b648:	dd19      	ble.n	801b67e <_svfprintf_r+0x6de>
 801b64a:	f1b9 0f00 	cmp.w	r9, #0
 801b64e:	d101      	bne.n	801b654 <_svfprintf_r+0x6b4>
 801b650:	07ea      	lsls	r2, r5, #31
 801b652:	d502      	bpl.n	801b65a <_svfprintf_r+0x6ba>
 801b654:	9a08      	ldr	r2, [sp, #32]
 801b656:	4413      	add	r3, r2
 801b658:	444b      	add	r3, r9
 801b65a:	9f19      	ldr	r7, [sp, #100]	; 0x64
 801b65c:	4699      	mov	r9, r3
 801b65e:	e735      	b.n	801b4cc <_svfprintf_r+0x52c>
 801b660:	460a      	mov	r2, r1
 801b662:	e70c      	b.n	801b47e <_svfprintf_r+0x4de>
 801b664:	f812 1b01 	ldrb.w	r1, [r2], #1
 801b668:	f803 1b01 	strb.w	r1, [r3], #1
 801b66c:	e71c      	b.n	801b4a8 <_svfprintf_r+0x508>
 801b66e:	2230      	movs	r2, #48	; 0x30
 801b670:	4413      	add	r3, r2
 801b672:	f88d 206e 	strb.w	r2, [sp, #110]	; 0x6e
 801b676:	f88d 306f 	strb.w	r3, [sp, #111]	; 0x6f
 801b67a:	a91c      	add	r1, sp, #112	; 0x70
 801b67c:	e718      	b.n	801b4b0 <_svfprintf_r+0x510>
 801b67e:	f1b9 0f00 	cmp.w	r9, #0
 801b682:	d101      	bne.n	801b688 <_svfprintf_r+0x6e8>
 801b684:	07eb      	lsls	r3, r5, #31
 801b686:	d515      	bpl.n	801b6b4 <_svfprintf_r+0x714>
 801b688:	9b08      	ldr	r3, [sp, #32]
 801b68a:	3301      	adds	r3, #1
 801b68c:	e7e4      	b.n	801b658 <_svfprintf_r+0x6b8>
 801b68e:	9a19      	ldr	r2, [sp, #100]	; 0x64
 801b690:	9b03      	ldr	r3, [sp, #12]
 801b692:	429a      	cmp	r2, r3
 801b694:	db06      	blt.n	801b6a4 <_svfprintf_r+0x704>
 801b696:	07ef      	lsls	r7, r5, #31
 801b698:	d50e      	bpl.n	801b6b8 <_svfprintf_r+0x718>
 801b69a:	9b08      	ldr	r3, [sp, #32]
 801b69c:	4413      	add	r3, r2
 801b69e:	2267      	movs	r2, #103	; 0x67
 801b6a0:	9202      	str	r2, [sp, #8]
 801b6a2:	e7da      	b.n	801b65a <_svfprintf_r+0x6ba>
 801b6a4:	9b03      	ldr	r3, [sp, #12]
 801b6a6:	9908      	ldr	r1, [sp, #32]
 801b6a8:	2a00      	cmp	r2, #0
 801b6aa:	440b      	add	r3, r1
 801b6ac:	dcf7      	bgt.n	801b69e <_svfprintf_r+0x6fe>
 801b6ae:	f1c2 0201 	rsb	r2, r2, #1
 801b6b2:	e7f3      	b.n	801b69c <_svfprintf_r+0x6fc>
 801b6b4:	2301      	movs	r3, #1
 801b6b6:	e7d0      	b.n	801b65a <_svfprintf_r+0x6ba>
 801b6b8:	4613      	mov	r3, r2
 801b6ba:	e7f0      	b.n	801b69e <_svfprintf_r+0x6fe>
 801b6bc:	b10b      	cbz	r3, 801b6c2 <_svfprintf_r+0x722>
 801b6be:	f88d 205f 	strb.w	r2, [sp, #95]	; 0x5f
 801b6c2:	f015 0f20 	tst.w	r5, #32
 801b6c6:	f107 0304 	add.w	r3, r7, #4
 801b6ca:	d008      	beq.n	801b6de <_svfprintf_r+0x73e>
 801b6cc:	9909      	ldr	r1, [sp, #36]	; 0x24
 801b6ce:	683a      	ldr	r2, [r7, #0]
 801b6d0:	17ce      	asrs	r6, r1, #31
 801b6d2:	4608      	mov	r0, r1
 801b6d4:	4631      	mov	r1, r6
 801b6d6:	e9c2 0100 	strd	r0, r1, [r2]
 801b6da:	461f      	mov	r7, r3
 801b6dc:	e49a      	b.n	801b014 <_svfprintf_r+0x74>
 801b6de:	06ee      	lsls	r6, r5, #27
 801b6e0:	d503      	bpl.n	801b6ea <_svfprintf_r+0x74a>
 801b6e2:	683a      	ldr	r2, [r7, #0]
 801b6e4:	9909      	ldr	r1, [sp, #36]	; 0x24
 801b6e6:	6011      	str	r1, [r2, #0]
 801b6e8:	e7f7      	b.n	801b6da <_svfprintf_r+0x73a>
 801b6ea:	0668      	lsls	r0, r5, #25
 801b6ec:	d5f9      	bpl.n	801b6e2 <_svfprintf_r+0x742>
 801b6ee:	683a      	ldr	r2, [r7, #0]
 801b6f0:	f8bd 1024 	ldrh.w	r1, [sp, #36]	; 0x24
 801b6f4:	8011      	strh	r1, [r2, #0]
 801b6f6:	e7f0      	b.n	801b6da <_svfprintf_r+0x73a>
 801b6f8:	f045 0510 	orr.w	r5, r5, #16
 801b6fc:	f015 0320 	ands.w	r3, r5, #32
 801b700:	d022      	beq.n	801b748 <_svfprintf_r+0x7a8>
 801b702:	3707      	adds	r7, #7
 801b704:	f027 0707 	bic.w	r7, r7, #7
 801b708:	f107 0308 	add.w	r3, r7, #8
 801b70c:	e9d7 6700 	ldrd	r6, r7, [r7]
 801b710:	9304      	str	r3, [sp, #16]
 801b712:	2300      	movs	r3, #0
 801b714:	2200      	movs	r2, #0
 801b716:	f88d 205f 	strb.w	r2, [sp, #95]	; 0x5f
 801b71a:	f1b9 3fff 	cmp.w	r9, #4294967295	; 0xffffffff
 801b71e:	f000 83db 	beq.w	801bed8 <_svfprintf_r+0xf38>
 801b722:	f025 0280 	bic.w	r2, r5, #128	; 0x80
 801b726:	920b      	str	r2, [sp, #44]	; 0x2c
 801b728:	ea56 0207 	orrs.w	r2, r6, r7
 801b72c:	f040 83d9 	bne.w	801bee2 <_svfprintf_r+0xf42>
 801b730:	f1b9 0f00 	cmp.w	r9, #0
 801b734:	f000 80aa 	beq.w	801b88c <_svfprintf_r+0x8ec>
 801b738:	2b01      	cmp	r3, #1
 801b73a:	d076      	beq.n	801b82a <_svfprintf_r+0x88a>
 801b73c:	2b02      	cmp	r3, #2
 801b73e:	f000 8091 	beq.w	801b864 <_svfprintf_r+0x8c4>
 801b742:	2600      	movs	r6, #0
 801b744:	2700      	movs	r7, #0
 801b746:	e3d2      	b.n	801beee <_svfprintf_r+0xf4e>
 801b748:	1d3a      	adds	r2, r7, #4
 801b74a:	f015 0110 	ands.w	r1, r5, #16
 801b74e:	9204      	str	r2, [sp, #16]
 801b750:	d002      	beq.n	801b758 <_svfprintf_r+0x7b8>
 801b752:	683e      	ldr	r6, [r7, #0]
 801b754:	2700      	movs	r7, #0
 801b756:	e7dd      	b.n	801b714 <_svfprintf_r+0x774>
 801b758:	f015 0340 	ands.w	r3, r5, #64	; 0x40
 801b75c:	d0f9      	beq.n	801b752 <_svfprintf_r+0x7b2>
 801b75e:	883e      	ldrh	r6, [r7, #0]
 801b760:	2700      	movs	r7, #0
 801b762:	e7d6      	b.n	801b712 <_svfprintf_r+0x772>
 801b764:	1d3b      	adds	r3, r7, #4
 801b766:	9304      	str	r3, [sp, #16]
 801b768:	2330      	movs	r3, #48	; 0x30
 801b76a:	2278      	movs	r2, #120	; 0x78
 801b76c:	f88d 3060 	strb.w	r3, [sp, #96]	; 0x60
 801b770:	4b14      	ldr	r3, [pc, #80]	; (801b7c4 <_svfprintf_r+0x824>)
 801b772:	683e      	ldr	r6, [r7, #0]
 801b774:	9311      	str	r3, [sp, #68]	; 0x44
 801b776:	2700      	movs	r7, #0
 801b778:	f045 0502 	orr.w	r5, r5, #2
 801b77c:	f88d 2061 	strb.w	r2, [sp, #97]	; 0x61
 801b780:	2302      	movs	r3, #2
 801b782:	9202      	str	r2, [sp, #8]
 801b784:	e7c6      	b.n	801b714 <_svfprintf_r+0x774>
 801b786:	1d3b      	adds	r3, r7, #4
 801b788:	2600      	movs	r6, #0
 801b78a:	f1b9 3fff 	cmp.w	r9, #4294967295	; 0xffffffff
 801b78e:	9304      	str	r3, [sp, #16]
 801b790:	f8d7 8000 	ldr.w	r8, [r7]
 801b794:	f88d 605f 	strb.w	r6, [sp, #95]	; 0x5f
 801b798:	d00a      	beq.n	801b7b0 <_svfprintf_r+0x810>
 801b79a:	464a      	mov	r2, r9
 801b79c:	4631      	mov	r1, r6
 801b79e:	4640      	mov	r0, r8
 801b7a0:	f7e4 fd1e 	bl	80001e0 <memchr>
 801b7a4:	2800      	cmp	r0, #0
 801b7a6:	f000 808d 	beq.w	801b8c4 <_svfprintf_r+0x924>
 801b7aa:	eba0 0908 	sub.w	r9, r0, r8
 801b7ae:	e5cb      	b.n	801b348 <_svfprintf_r+0x3a8>
 801b7b0:	4640      	mov	r0, r8
 801b7b2:	f7e4 fd0d 	bl	80001d0 <strlen>
 801b7b6:	4681      	mov	r9, r0
 801b7b8:	e5c6      	b.n	801b348 <_svfprintf_r+0x3a8>
 801b7ba:	bf00      	nop
 801b7bc:	080f5004 	.word	0x080f5004
 801b7c0:	080f5014 	.word	0x080f5014
 801b7c4:	080f4ff3 	.word	0x080f4ff3
 801b7c8:	f045 0510 	orr.w	r5, r5, #16
 801b7cc:	06a9      	lsls	r1, r5, #26
 801b7ce:	d509      	bpl.n	801b7e4 <_svfprintf_r+0x844>
 801b7d0:	3707      	adds	r7, #7
 801b7d2:	f027 0707 	bic.w	r7, r7, #7
 801b7d6:	f107 0308 	add.w	r3, r7, #8
 801b7da:	e9d7 6700 	ldrd	r6, r7, [r7]
 801b7de:	9304      	str	r3, [sp, #16]
 801b7e0:	2301      	movs	r3, #1
 801b7e2:	e797      	b.n	801b714 <_svfprintf_r+0x774>
 801b7e4:	1d3b      	adds	r3, r7, #4
 801b7e6:	f015 0f10 	tst.w	r5, #16
 801b7ea:	9304      	str	r3, [sp, #16]
 801b7ec:	d001      	beq.n	801b7f2 <_svfprintf_r+0x852>
 801b7ee:	683e      	ldr	r6, [r7, #0]
 801b7f0:	e002      	b.n	801b7f8 <_svfprintf_r+0x858>
 801b7f2:	066a      	lsls	r2, r5, #25
 801b7f4:	d5fb      	bpl.n	801b7ee <_svfprintf_r+0x84e>
 801b7f6:	883e      	ldrh	r6, [r7, #0]
 801b7f8:	2700      	movs	r7, #0
 801b7fa:	e7f1      	b.n	801b7e0 <_svfprintf_r+0x840>
 801b7fc:	b10b      	cbz	r3, 801b802 <_svfprintf_r+0x862>
 801b7fe:	f88d 205f 	strb.w	r2, [sp, #95]	; 0x5f
 801b802:	4ba3      	ldr	r3, [pc, #652]	; (801ba90 <_svfprintf_r+0xaf0>)
 801b804:	e4c2      	b.n	801b18c <_svfprintf_r+0x1ec>
 801b806:	1d3b      	adds	r3, r7, #4
 801b808:	f015 0f10 	tst.w	r5, #16
 801b80c:	9304      	str	r3, [sp, #16]
 801b80e:	d001      	beq.n	801b814 <_svfprintf_r+0x874>
 801b810:	683e      	ldr	r6, [r7, #0]
 801b812:	e002      	b.n	801b81a <_svfprintf_r+0x87a>
 801b814:	066e      	lsls	r6, r5, #25
 801b816:	d5fb      	bpl.n	801b810 <_svfprintf_r+0x870>
 801b818:	883e      	ldrh	r6, [r7, #0]
 801b81a:	2700      	movs	r7, #0
 801b81c:	e4c2      	b.n	801b1a4 <_svfprintf_r+0x204>
 801b81e:	4643      	mov	r3, r8
 801b820:	e366      	b.n	801bef0 <_svfprintf_r+0xf50>
 801b822:	2f00      	cmp	r7, #0
 801b824:	bf08      	it	eq
 801b826:	2e0a      	cmpeq	r6, #10
 801b828:	d205      	bcs.n	801b836 <_svfprintf_r+0x896>
 801b82a:	f10d 08f0 	add.w	r8, sp, #240	; 0xf0
 801b82e:	3630      	adds	r6, #48	; 0x30
 801b830:	f808 6d41 	strb.w	r6, [r8, #-65]!
 801b834:	e377      	b.n	801bf26 <_svfprintf_r+0xf86>
 801b836:	f10d 08b0 	add.w	r8, sp, #176	; 0xb0
 801b83a:	4630      	mov	r0, r6
 801b83c:	4639      	mov	r1, r7
 801b83e:	220a      	movs	r2, #10
 801b840:	2300      	movs	r3, #0
 801b842:	f7e5 f9ad 	bl	8000ba0 <__aeabi_uldivmod>
 801b846:	3230      	adds	r2, #48	; 0x30
 801b848:	f808 2d01 	strb.w	r2, [r8, #-1]!
 801b84c:	2300      	movs	r3, #0
 801b84e:	4630      	mov	r0, r6
 801b850:	4639      	mov	r1, r7
 801b852:	220a      	movs	r2, #10
 801b854:	f7e5 f9a4 	bl	8000ba0 <__aeabi_uldivmod>
 801b858:	4606      	mov	r6, r0
 801b85a:	460f      	mov	r7, r1
 801b85c:	ea56 0307 	orrs.w	r3, r6, r7
 801b860:	d1eb      	bne.n	801b83a <_svfprintf_r+0x89a>
 801b862:	e360      	b.n	801bf26 <_svfprintf_r+0xf86>
 801b864:	2600      	movs	r6, #0
 801b866:	2700      	movs	r7, #0
 801b868:	f10d 08b0 	add.w	r8, sp, #176	; 0xb0
 801b86c:	f006 030f 	and.w	r3, r6, #15
 801b870:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801b872:	5cd3      	ldrb	r3, [r2, r3]
 801b874:	f808 3d01 	strb.w	r3, [r8, #-1]!
 801b878:	0933      	lsrs	r3, r6, #4
 801b87a:	ea43 7307 	orr.w	r3, r3, r7, lsl #28
 801b87e:	093a      	lsrs	r2, r7, #4
 801b880:	461e      	mov	r6, r3
 801b882:	4617      	mov	r7, r2
 801b884:	ea56 0307 	orrs.w	r3, r6, r7
 801b888:	d1f0      	bne.n	801b86c <_svfprintf_r+0x8cc>
 801b88a:	e34c      	b.n	801bf26 <_svfprintf_r+0xf86>
 801b88c:	b93b      	cbnz	r3, 801b89e <_svfprintf_r+0x8fe>
 801b88e:	07ea      	lsls	r2, r5, #31
 801b890:	d505      	bpl.n	801b89e <_svfprintf_r+0x8fe>
 801b892:	f10d 08f0 	add.w	r8, sp, #240	; 0xf0
 801b896:	2330      	movs	r3, #48	; 0x30
 801b898:	f808 3d41 	strb.w	r3, [r8, #-65]!
 801b89c:	e343      	b.n	801bf26 <_svfprintf_r+0xf86>
 801b89e:	f10d 08b0 	add.w	r8, sp, #176	; 0xb0
 801b8a2:	e340      	b.n	801bf26 <_svfprintf_r+0xf86>
 801b8a4:	b10b      	cbz	r3, 801b8aa <_svfprintf_r+0x90a>
 801b8a6:	f88d 205f 	strb.w	r2, [sp, #95]	; 0x5f
 801b8aa:	9b02      	ldr	r3, [sp, #8]
 801b8ac:	2b00      	cmp	r3, #0
 801b8ae:	f000 82f7 	beq.w	801bea0 <_svfprintf_r+0xf00>
 801b8b2:	f89d 3008 	ldrb.w	r3, [sp, #8]
 801b8b6:	f88d 3088 	strb.w	r3, [sp, #136]	; 0x88
 801b8ba:	2600      	movs	r6, #0
 801b8bc:	f88d 605f 	strb.w	r6, [sp, #95]	; 0x5f
 801b8c0:	9704      	str	r7, [sp, #16]
 801b8c2:	e4e8      	b.n	801b296 <_svfprintf_r+0x2f6>
 801b8c4:	4606      	mov	r6, r0
 801b8c6:	e53f      	b.n	801b348 <_svfprintf_r+0x3a8>
 801b8c8:	2310      	movs	r3, #16
 801b8ca:	6063      	str	r3, [r4, #4]
 801b8cc:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801b8ce:	3310      	adds	r3, #16
 801b8d0:	9321      	str	r3, [sp, #132]	; 0x84
 801b8d2:	9b20      	ldr	r3, [sp, #128]	; 0x80
 801b8d4:	3301      	adds	r3, #1
 801b8d6:	2b07      	cmp	r3, #7
 801b8d8:	9320      	str	r3, [sp, #128]	; 0x80
 801b8da:	dc04      	bgt.n	801b8e6 <_svfprintf_r+0x946>
 801b8dc:	3408      	adds	r4, #8
 801b8de:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801b8e0:	3b10      	subs	r3, #16
 801b8e2:	930c      	str	r3, [sp, #48]	; 0x30
 801b8e4:	e615      	b.n	801b512 <_svfprintf_r+0x572>
 801b8e6:	aa1f      	add	r2, sp, #124	; 0x7c
 801b8e8:	4651      	mov	r1, sl
 801b8ea:	4658      	mov	r0, fp
 801b8ec:	f001 fdba 	bl	801d464 <__ssprint_r>
 801b8f0:	2800      	cmp	r0, #0
 801b8f2:	f040 82b6 	bne.w	801be62 <_svfprintf_r+0xec2>
 801b8f6:	ac2c      	add	r4, sp, #176	; 0xb0
 801b8f8:	e7f1      	b.n	801b8de <_svfprintf_r+0x93e>
 801b8fa:	aa1f      	add	r2, sp, #124	; 0x7c
 801b8fc:	4651      	mov	r1, sl
 801b8fe:	4658      	mov	r0, fp
 801b900:	f001 fdb0 	bl	801d464 <__ssprint_r>
 801b904:	2800      	cmp	r0, #0
 801b906:	f040 82ac 	bne.w	801be62 <_svfprintf_r+0xec2>
 801b90a:	ac2c      	add	r4, sp, #176	; 0xb0
 801b90c:	e614      	b.n	801b538 <_svfprintf_r+0x598>
 801b90e:	aa1f      	add	r2, sp, #124	; 0x7c
 801b910:	4651      	mov	r1, sl
 801b912:	4658      	mov	r0, fp
 801b914:	f001 fda6 	bl	801d464 <__ssprint_r>
 801b918:	2800      	cmp	r0, #0
 801b91a:	f040 82a2 	bne.w	801be62 <_svfprintf_r+0xec2>
 801b91e:	ac2c      	add	r4, sp, #176	; 0xb0
 801b920:	e61c      	b.n	801b55c <_svfprintf_r+0x5bc>
 801b922:	aa1f      	add	r2, sp, #124	; 0x7c
 801b924:	4651      	mov	r1, sl
 801b926:	4658      	mov	r0, fp
 801b928:	f001 fd9c 	bl	801d464 <__ssprint_r>
 801b92c:	2800      	cmp	r0, #0
 801b92e:	f040 8298 	bne.w	801be62 <_svfprintf_r+0xec2>
 801b932:	ac2c      	add	r4, sp, #176	; 0xb0
 801b934:	e622      	b.n	801b57c <_svfprintf_r+0x5dc>
 801b936:	2210      	movs	r2, #16
 801b938:	6062      	str	r2, [r4, #4]
 801b93a:	9a21      	ldr	r2, [sp, #132]	; 0x84
 801b93c:	3210      	adds	r2, #16
 801b93e:	9221      	str	r2, [sp, #132]	; 0x84
 801b940:	9a20      	ldr	r2, [sp, #128]	; 0x80
 801b942:	3201      	adds	r2, #1
 801b944:	2a07      	cmp	r2, #7
 801b946:	9220      	str	r2, [sp, #128]	; 0x80
 801b948:	dc02      	bgt.n	801b950 <_svfprintf_r+0x9b0>
 801b94a:	3408      	adds	r4, #8
 801b94c:	3b10      	subs	r3, #16
 801b94e:	e61d      	b.n	801b58c <_svfprintf_r+0x5ec>
 801b950:	aa1f      	add	r2, sp, #124	; 0x7c
 801b952:	4651      	mov	r1, sl
 801b954:	4658      	mov	r0, fp
 801b956:	930c      	str	r3, [sp, #48]	; 0x30
 801b958:	f001 fd84 	bl	801d464 <__ssprint_r>
 801b95c:	2800      	cmp	r0, #0
 801b95e:	f040 8280 	bne.w	801be62 <_svfprintf_r+0xec2>
 801b962:	ac2c      	add	r4, sp, #176	; 0xb0
 801b964:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801b966:	e7f1      	b.n	801b94c <_svfprintf_r+0x9ac>
 801b968:	aa1f      	add	r2, sp, #124	; 0x7c
 801b96a:	4651      	mov	r1, sl
 801b96c:	4658      	mov	r0, fp
 801b96e:	f001 fd79 	bl	801d464 <__ssprint_r>
 801b972:	2800      	cmp	r0, #0
 801b974:	f040 8275 	bne.w	801be62 <_svfprintf_r+0xec2>
 801b978:	ac2c      	add	r4, sp, #176	; 0xb0
 801b97a:	e617      	b.n	801b5ac <_svfprintf_r+0x60c>
 801b97c:	2310      	movs	r3, #16
 801b97e:	6063      	str	r3, [r4, #4]
 801b980:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801b982:	3310      	adds	r3, #16
 801b984:	9321      	str	r3, [sp, #132]	; 0x84
 801b986:	9b20      	ldr	r3, [sp, #128]	; 0x80
 801b988:	3301      	adds	r3, #1
 801b98a:	2b07      	cmp	r3, #7
 801b98c:	9320      	str	r3, [sp, #128]	; 0x80
 801b98e:	dc02      	bgt.n	801b996 <_svfprintf_r+0x9f6>
 801b990:	3408      	adds	r4, #8
 801b992:	3e10      	subs	r6, #16
 801b994:	e60e      	b.n	801b5b4 <_svfprintf_r+0x614>
 801b996:	aa1f      	add	r2, sp, #124	; 0x7c
 801b998:	4651      	mov	r1, sl
 801b99a:	4658      	mov	r0, fp
 801b99c:	f001 fd62 	bl	801d464 <__ssprint_r>
 801b9a0:	2800      	cmp	r0, #0
 801b9a2:	f040 825e 	bne.w	801be62 <_svfprintf_r+0xec2>
 801b9a6:	ac2c      	add	r4, sp, #176	; 0xb0
 801b9a8:	e7f3      	b.n	801b992 <_svfprintf_r+0x9f2>
 801b9aa:	aa1f      	add	r2, sp, #124	; 0x7c
 801b9ac:	4651      	mov	r1, sl
 801b9ae:	4658      	mov	r0, fp
 801b9b0:	f001 fd58 	bl	801d464 <__ssprint_r>
 801b9b4:	2800      	cmp	r0, #0
 801b9b6:	f040 8254 	bne.w	801be62 <_svfprintf_r+0xec2>
 801b9ba:	ac2c      	add	r4, sp, #176	; 0xb0
 801b9bc:	e60a      	b.n	801b5d4 <_svfprintf_r+0x634>
 801b9be:	9b02      	ldr	r3, [sp, #8]
 801b9c0:	2b65      	cmp	r3, #101	; 0x65
 801b9c2:	f340 81a9 	ble.w	801bd18 <_svfprintf_r+0xd78>
 801b9c6:	2200      	movs	r2, #0
 801b9c8:	2300      	movs	r3, #0
 801b9ca:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801b9ce:	f7e5 f877 	bl	8000ac0 <__aeabi_dcmpeq>
 801b9d2:	2800      	cmp	r0, #0
 801b9d4:	d062      	beq.n	801ba9c <_svfprintf_r+0xafc>
 801b9d6:	4b2f      	ldr	r3, [pc, #188]	; (801ba94 <_svfprintf_r+0xaf4>)
 801b9d8:	6023      	str	r3, [r4, #0]
 801b9da:	2301      	movs	r3, #1
 801b9dc:	6063      	str	r3, [r4, #4]
 801b9de:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801b9e0:	3301      	adds	r3, #1
 801b9e2:	9321      	str	r3, [sp, #132]	; 0x84
 801b9e4:	9b20      	ldr	r3, [sp, #128]	; 0x80
 801b9e6:	3301      	adds	r3, #1
 801b9e8:	2b07      	cmp	r3, #7
 801b9ea:	9320      	str	r3, [sp, #128]	; 0x80
 801b9ec:	dc25      	bgt.n	801ba3a <_svfprintf_r+0xa9a>
 801b9ee:	3408      	adds	r4, #8
 801b9f0:	9b19      	ldr	r3, [sp, #100]	; 0x64
 801b9f2:	9a03      	ldr	r2, [sp, #12]
 801b9f4:	4293      	cmp	r3, r2
 801b9f6:	db02      	blt.n	801b9fe <_svfprintf_r+0xa5e>
 801b9f8:	07ee      	lsls	r6, r5, #31
 801b9fa:	f57f ae02 	bpl.w	801b602 <_svfprintf_r+0x662>
 801b9fe:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801ba00:	6023      	str	r3, [r4, #0]
 801ba02:	9b08      	ldr	r3, [sp, #32]
 801ba04:	6063      	str	r3, [r4, #4]
 801ba06:	9a08      	ldr	r2, [sp, #32]
 801ba08:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801ba0a:	4413      	add	r3, r2
 801ba0c:	9321      	str	r3, [sp, #132]	; 0x84
 801ba0e:	9b20      	ldr	r3, [sp, #128]	; 0x80
 801ba10:	3301      	adds	r3, #1
 801ba12:	2b07      	cmp	r3, #7
 801ba14:	9320      	str	r3, [sp, #128]	; 0x80
 801ba16:	dc1a      	bgt.n	801ba4e <_svfprintf_r+0xaae>
 801ba18:	3408      	adds	r4, #8
 801ba1a:	9b03      	ldr	r3, [sp, #12]
 801ba1c:	1e5e      	subs	r6, r3, #1
 801ba1e:	2e00      	cmp	r6, #0
 801ba20:	f77f adef 	ble.w	801b602 <_svfprintf_r+0x662>
 801ba24:	4f1c      	ldr	r7, [pc, #112]	; (801ba98 <_svfprintf_r+0xaf8>)
 801ba26:	f04f 0810 	mov.w	r8, #16
 801ba2a:	2e10      	cmp	r6, #16
 801ba2c:	6027      	str	r7, [r4, #0]
 801ba2e:	dc18      	bgt.n	801ba62 <_svfprintf_r+0xac2>
 801ba30:	6066      	str	r6, [r4, #4]
 801ba32:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801ba34:	441e      	add	r6, r3
 801ba36:	9621      	str	r6, [sp, #132]	; 0x84
 801ba38:	e5d4      	b.n	801b5e4 <_svfprintf_r+0x644>
 801ba3a:	aa1f      	add	r2, sp, #124	; 0x7c
 801ba3c:	4651      	mov	r1, sl
 801ba3e:	4658      	mov	r0, fp
 801ba40:	f001 fd10 	bl	801d464 <__ssprint_r>
 801ba44:	2800      	cmp	r0, #0
 801ba46:	f040 820c 	bne.w	801be62 <_svfprintf_r+0xec2>
 801ba4a:	ac2c      	add	r4, sp, #176	; 0xb0
 801ba4c:	e7d0      	b.n	801b9f0 <_svfprintf_r+0xa50>
 801ba4e:	aa1f      	add	r2, sp, #124	; 0x7c
 801ba50:	4651      	mov	r1, sl
 801ba52:	4658      	mov	r0, fp
 801ba54:	f001 fd06 	bl	801d464 <__ssprint_r>
 801ba58:	2800      	cmp	r0, #0
 801ba5a:	f040 8202 	bne.w	801be62 <_svfprintf_r+0xec2>
 801ba5e:	ac2c      	add	r4, sp, #176	; 0xb0
 801ba60:	e7db      	b.n	801ba1a <_svfprintf_r+0xa7a>
 801ba62:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801ba64:	f8c4 8004 	str.w	r8, [r4, #4]
 801ba68:	3310      	adds	r3, #16
 801ba6a:	9321      	str	r3, [sp, #132]	; 0x84
 801ba6c:	9b20      	ldr	r3, [sp, #128]	; 0x80
 801ba6e:	3301      	adds	r3, #1
 801ba70:	2b07      	cmp	r3, #7
 801ba72:	9320      	str	r3, [sp, #128]	; 0x80
 801ba74:	dc02      	bgt.n	801ba7c <_svfprintf_r+0xadc>
 801ba76:	3408      	adds	r4, #8
 801ba78:	3e10      	subs	r6, #16
 801ba7a:	e7d6      	b.n	801ba2a <_svfprintf_r+0xa8a>
 801ba7c:	aa1f      	add	r2, sp, #124	; 0x7c
 801ba7e:	4651      	mov	r1, sl
 801ba80:	4658      	mov	r0, fp
 801ba82:	f001 fcef 	bl	801d464 <__ssprint_r>
 801ba86:	2800      	cmp	r0, #0
 801ba88:	f040 81eb 	bne.w	801be62 <_svfprintf_r+0xec2>
 801ba8c:	ac2c      	add	r4, sp, #176	; 0xb0
 801ba8e:	e7f3      	b.n	801ba78 <_svfprintf_r+0xad8>
 801ba90:	080f4ff3 	.word	0x080f4ff3
 801ba94:	0802c9e2 	.word	0x0802c9e2
 801ba98:	080f5014 	.word	0x080f5014
 801ba9c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 801ba9e:	2b00      	cmp	r3, #0
 801baa0:	dc7a      	bgt.n	801bb98 <_svfprintf_r+0xbf8>
 801baa2:	4b9b      	ldr	r3, [pc, #620]	; (801bd10 <_svfprintf_r+0xd70>)
 801baa4:	6023      	str	r3, [r4, #0]
 801baa6:	2301      	movs	r3, #1
 801baa8:	6063      	str	r3, [r4, #4]
 801baaa:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801baac:	3301      	adds	r3, #1
 801baae:	9321      	str	r3, [sp, #132]	; 0x84
 801bab0:	9b20      	ldr	r3, [sp, #128]	; 0x80
 801bab2:	3301      	adds	r3, #1
 801bab4:	2b07      	cmp	r3, #7
 801bab6:	9320      	str	r3, [sp, #128]	; 0x80
 801bab8:	dc44      	bgt.n	801bb44 <_svfprintf_r+0xba4>
 801baba:	3408      	adds	r4, #8
 801babc:	9b19      	ldr	r3, [sp, #100]	; 0x64
 801babe:	b923      	cbnz	r3, 801baca <_svfprintf_r+0xb2a>
 801bac0:	9b03      	ldr	r3, [sp, #12]
 801bac2:	b913      	cbnz	r3, 801baca <_svfprintf_r+0xb2a>
 801bac4:	07e8      	lsls	r0, r5, #31
 801bac6:	f57f ad9c 	bpl.w	801b602 <_svfprintf_r+0x662>
 801baca:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801bacc:	6023      	str	r3, [r4, #0]
 801bace:	9b08      	ldr	r3, [sp, #32]
 801bad0:	6063      	str	r3, [r4, #4]
 801bad2:	9a08      	ldr	r2, [sp, #32]
 801bad4:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801bad6:	4413      	add	r3, r2
 801bad8:	9321      	str	r3, [sp, #132]	; 0x84
 801bada:	9b20      	ldr	r3, [sp, #128]	; 0x80
 801badc:	3301      	adds	r3, #1
 801bade:	2b07      	cmp	r3, #7
 801bae0:	9320      	str	r3, [sp, #128]	; 0x80
 801bae2:	dc39      	bgt.n	801bb58 <_svfprintf_r+0xbb8>
 801bae4:	f104 0308 	add.w	r3, r4, #8
 801bae8:	9e19      	ldr	r6, [sp, #100]	; 0x64
 801baea:	2e00      	cmp	r6, #0
 801baec:	da19      	bge.n	801bb22 <_svfprintf_r+0xb82>
 801baee:	4f89      	ldr	r7, [pc, #548]	; (801bd14 <_svfprintf_r+0xd74>)
 801baf0:	4276      	negs	r6, r6
 801baf2:	2410      	movs	r4, #16
 801baf4:	2e10      	cmp	r6, #16
 801baf6:	601f      	str	r7, [r3, #0]
 801baf8:	dc38      	bgt.n	801bb6c <_svfprintf_r+0xbcc>
 801bafa:	9a21      	ldr	r2, [sp, #132]	; 0x84
 801bafc:	605e      	str	r6, [r3, #4]
 801bafe:	4416      	add	r6, r2
 801bb00:	9a20      	ldr	r2, [sp, #128]	; 0x80
 801bb02:	9621      	str	r6, [sp, #132]	; 0x84
 801bb04:	3201      	adds	r2, #1
 801bb06:	2a07      	cmp	r2, #7
 801bb08:	f103 0308 	add.w	r3, r3, #8
 801bb0c:	9220      	str	r2, [sp, #128]	; 0x80
 801bb0e:	dd08      	ble.n	801bb22 <_svfprintf_r+0xb82>
 801bb10:	aa1f      	add	r2, sp, #124	; 0x7c
 801bb12:	4651      	mov	r1, sl
 801bb14:	4658      	mov	r0, fp
 801bb16:	f001 fca5 	bl	801d464 <__ssprint_r>
 801bb1a:	2800      	cmp	r0, #0
 801bb1c:	f040 81a1 	bne.w	801be62 <_svfprintf_r+0xec2>
 801bb20:	ab2c      	add	r3, sp, #176	; 0xb0
 801bb22:	9a03      	ldr	r2, [sp, #12]
 801bb24:	605a      	str	r2, [r3, #4]
 801bb26:	9903      	ldr	r1, [sp, #12]
 801bb28:	9a21      	ldr	r2, [sp, #132]	; 0x84
 801bb2a:	f8c3 8000 	str.w	r8, [r3]
 801bb2e:	440a      	add	r2, r1
 801bb30:	9221      	str	r2, [sp, #132]	; 0x84
 801bb32:	9a20      	ldr	r2, [sp, #128]	; 0x80
 801bb34:	3201      	adds	r2, #1
 801bb36:	2a07      	cmp	r2, #7
 801bb38:	9220      	str	r2, [sp, #128]	; 0x80
 801bb3a:	f73f ad59 	bgt.w	801b5f0 <_svfprintf_r+0x650>
 801bb3e:	f103 0408 	add.w	r4, r3, #8
 801bb42:	e55e      	b.n	801b602 <_svfprintf_r+0x662>
 801bb44:	aa1f      	add	r2, sp, #124	; 0x7c
 801bb46:	4651      	mov	r1, sl
 801bb48:	4658      	mov	r0, fp
 801bb4a:	f001 fc8b 	bl	801d464 <__ssprint_r>
 801bb4e:	2800      	cmp	r0, #0
 801bb50:	f040 8187 	bne.w	801be62 <_svfprintf_r+0xec2>
 801bb54:	ac2c      	add	r4, sp, #176	; 0xb0
 801bb56:	e7b1      	b.n	801babc <_svfprintf_r+0xb1c>
 801bb58:	aa1f      	add	r2, sp, #124	; 0x7c
 801bb5a:	4651      	mov	r1, sl
 801bb5c:	4658      	mov	r0, fp
 801bb5e:	f001 fc81 	bl	801d464 <__ssprint_r>
 801bb62:	2800      	cmp	r0, #0
 801bb64:	f040 817d 	bne.w	801be62 <_svfprintf_r+0xec2>
 801bb68:	ab2c      	add	r3, sp, #176	; 0xb0
 801bb6a:	e7bd      	b.n	801bae8 <_svfprintf_r+0xb48>
 801bb6c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 801bb6e:	605c      	str	r4, [r3, #4]
 801bb70:	3210      	adds	r2, #16
 801bb72:	9221      	str	r2, [sp, #132]	; 0x84
 801bb74:	9a20      	ldr	r2, [sp, #128]	; 0x80
 801bb76:	3201      	adds	r2, #1
 801bb78:	2a07      	cmp	r2, #7
 801bb7a:	9220      	str	r2, [sp, #128]	; 0x80
 801bb7c:	dc02      	bgt.n	801bb84 <_svfprintf_r+0xbe4>
 801bb7e:	3308      	adds	r3, #8
 801bb80:	3e10      	subs	r6, #16
 801bb82:	e7b7      	b.n	801baf4 <_svfprintf_r+0xb54>
 801bb84:	aa1f      	add	r2, sp, #124	; 0x7c
 801bb86:	4651      	mov	r1, sl
 801bb88:	4658      	mov	r0, fp
 801bb8a:	f001 fc6b 	bl	801d464 <__ssprint_r>
 801bb8e:	2800      	cmp	r0, #0
 801bb90:	f040 8167 	bne.w	801be62 <_svfprintf_r+0xec2>
 801bb94:	ab2c      	add	r3, sp, #176	; 0xb0
 801bb96:	e7f3      	b.n	801bb80 <_svfprintf_r+0xbe0>
 801bb98:	9b03      	ldr	r3, [sp, #12]
 801bb9a:	42bb      	cmp	r3, r7
 801bb9c:	bfa8      	it	ge
 801bb9e:	463b      	movge	r3, r7
 801bba0:	2b00      	cmp	r3, #0
 801bba2:	461e      	mov	r6, r3
 801bba4:	dd0b      	ble.n	801bbbe <_svfprintf_r+0xc1e>
 801bba6:	6063      	str	r3, [r4, #4]
 801bba8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801bbaa:	f8c4 8000 	str.w	r8, [r4]
 801bbae:	4433      	add	r3, r6
 801bbb0:	9321      	str	r3, [sp, #132]	; 0x84
 801bbb2:	9b20      	ldr	r3, [sp, #128]	; 0x80
 801bbb4:	3301      	adds	r3, #1
 801bbb6:	2b07      	cmp	r3, #7
 801bbb8:	9320      	str	r3, [sp, #128]	; 0x80
 801bbba:	dc5f      	bgt.n	801bc7c <_svfprintf_r+0xcdc>
 801bbbc:	3408      	adds	r4, #8
 801bbbe:	2e00      	cmp	r6, #0
 801bbc0:	bfac      	ite	ge
 801bbc2:	1bbe      	subge	r6, r7, r6
 801bbc4:	463e      	movlt	r6, r7
 801bbc6:	2e00      	cmp	r6, #0
 801bbc8:	dd0f      	ble.n	801bbea <_svfprintf_r+0xc4a>
 801bbca:	f8df 9148 	ldr.w	r9, [pc, #328]	; 801bd14 <_svfprintf_r+0xd74>
 801bbce:	f8c4 9000 	str.w	r9, [r4]
 801bbd2:	2e10      	cmp	r6, #16
 801bbd4:	dc5c      	bgt.n	801bc90 <_svfprintf_r+0xcf0>
 801bbd6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801bbd8:	6066      	str	r6, [r4, #4]
 801bbda:	441e      	add	r6, r3
 801bbdc:	9b20      	ldr	r3, [sp, #128]	; 0x80
 801bbde:	9621      	str	r6, [sp, #132]	; 0x84
 801bbe0:	3301      	adds	r3, #1
 801bbe2:	2b07      	cmp	r3, #7
 801bbe4:	9320      	str	r3, [sp, #128]	; 0x80
 801bbe6:	dc6a      	bgt.n	801bcbe <_svfprintf_r+0xd1e>
 801bbe8:	3408      	adds	r4, #8
 801bbea:	9b19      	ldr	r3, [sp, #100]	; 0x64
 801bbec:	9a03      	ldr	r2, [sp, #12]
 801bbee:	4293      	cmp	r3, r2
 801bbf0:	db01      	blt.n	801bbf6 <_svfprintf_r+0xc56>
 801bbf2:	07e9      	lsls	r1, r5, #31
 801bbf4:	d50d      	bpl.n	801bc12 <_svfprintf_r+0xc72>
 801bbf6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801bbf8:	6023      	str	r3, [r4, #0]
 801bbfa:	9b08      	ldr	r3, [sp, #32]
 801bbfc:	6063      	str	r3, [r4, #4]
 801bbfe:	9a08      	ldr	r2, [sp, #32]
 801bc00:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801bc02:	4413      	add	r3, r2
 801bc04:	9321      	str	r3, [sp, #132]	; 0x84
 801bc06:	9b20      	ldr	r3, [sp, #128]	; 0x80
 801bc08:	3301      	adds	r3, #1
 801bc0a:	2b07      	cmp	r3, #7
 801bc0c:	9320      	str	r3, [sp, #128]	; 0x80
 801bc0e:	dc60      	bgt.n	801bcd2 <_svfprintf_r+0xd32>
 801bc10:	3408      	adds	r4, #8
 801bc12:	9b03      	ldr	r3, [sp, #12]
 801bc14:	9a03      	ldr	r2, [sp, #12]
 801bc16:	1bde      	subs	r6, r3, r7
 801bc18:	9b19      	ldr	r3, [sp, #100]	; 0x64
 801bc1a:	1ad3      	subs	r3, r2, r3
 801bc1c:	429e      	cmp	r6, r3
 801bc1e:	bfa8      	it	ge
 801bc20:	461e      	movge	r6, r3
 801bc22:	2e00      	cmp	r6, #0
 801bc24:	dd0b      	ble.n	801bc3e <_svfprintf_r+0xc9e>
 801bc26:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801bc28:	6066      	str	r6, [r4, #4]
 801bc2a:	4433      	add	r3, r6
 801bc2c:	9321      	str	r3, [sp, #132]	; 0x84
 801bc2e:	9b20      	ldr	r3, [sp, #128]	; 0x80
 801bc30:	3301      	adds	r3, #1
 801bc32:	4447      	add	r7, r8
 801bc34:	2b07      	cmp	r3, #7
 801bc36:	6027      	str	r7, [r4, #0]
 801bc38:	9320      	str	r3, [sp, #128]	; 0x80
 801bc3a:	dc54      	bgt.n	801bce6 <_svfprintf_r+0xd46>
 801bc3c:	3408      	adds	r4, #8
 801bc3e:	9b19      	ldr	r3, [sp, #100]	; 0x64
 801bc40:	9a03      	ldr	r2, [sp, #12]
 801bc42:	2e00      	cmp	r6, #0
 801bc44:	eba2 0303 	sub.w	r3, r2, r3
 801bc48:	bfac      	ite	ge
 801bc4a:	1b9e      	subge	r6, r3, r6
 801bc4c:	461e      	movlt	r6, r3
 801bc4e:	2e00      	cmp	r6, #0
 801bc50:	f77f acd7 	ble.w	801b602 <_svfprintf_r+0x662>
 801bc54:	4f2f      	ldr	r7, [pc, #188]	; (801bd14 <_svfprintf_r+0xd74>)
 801bc56:	f04f 0810 	mov.w	r8, #16
 801bc5a:	2e10      	cmp	r6, #16
 801bc5c:	6027      	str	r7, [r4, #0]
 801bc5e:	f77f aee7 	ble.w	801ba30 <_svfprintf_r+0xa90>
 801bc62:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801bc64:	f8c4 8004 	str.w	r8, [r4, #4]
 801bc68:	3310      	adds	r3, #16
 801bc6a:	9321      	str	r3, [sp, #132]	; 0x84
 801bc6c:	9b20      	ldr	r3, [sp, #128]	; 0x80
 801bc6e:	3301      	adds	r3, #1
 801bc70:	2b07      	cmp	r3, #7
 801bc72:	9320      	str	r3, [sp, #128]	; 0x80
 801bc74:	dc41      	bgt.n	801bcfa <_svfprintf_r+0xd5a>
 801bc76:	3408      	adds	r4, #8
 801bc78:	3e10      	subs	r6, #16
 801bc7a:	e7ee      	b.n	801bc5a <_svfprintf_r+0xcba>
 801bc7c:	aa1f      	add	r2, sp, #124	; 0x7c
 801bc7e:	4651      	mov	r1, sl
 801bc80:	4658      	mov	r0, fp
 801bc82:	f001 fbef 	bl	801d464 <__ssprint_r>
 801bc86:	2800      	cmp	r0, #0
 801bc88:	f040 80eb 	bne.w	801be62 <_svfprintf_r+0xec2>
 801bc8c:	ac2c      	add	r4, sp, #176	; 0xb0
 801bc8e:	e796      	b.n	801bbbe <_svfprintf_r+0xc1e>
 801bc90:	2310      	movs	r3, #16
 801bc92:	6063      	str	r3, [r4, #4]
 801bc94:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801bc96:	3310      	adds	r3, #16
 801bc98:	9321      	str	r3, [sp, #132]	; 0x84
 801bc9a:	9b20      	ldr	r3, [sp, #128]	; 0x80
 801bc9c:	3301      	adds	r3, #1
 801bc9e:	2b07      	cmp	r3, #7
 801bca0:	9320      	str	r3, [sp, #128]	; 0x80
 801bca2:	dc02      	bgt.n	801bcaa <_svfprintf_r+0xd0a>
 801bca4:	3408      	adds	r4, #8
 801bca6:	3e10      	subs	r6, #16
 801bca8:	e791      	b.n	801bbce <_svfprintf_r+0xc2e>
 801bcaa:	aa1f      	add	r2, sp, #124	; 0x7c
 801bcac:	4651      	mov	r1, sl
 801bcae:	4658      	mov	r0, fp
 801bcb0:	f001 fbd8 	bl	801d464 <__ssprint_r>
 801bcb4:	2800      	cmp	r0, #0
 801bcb6:	f040 80d4 	bne.w	801be62 <_svfprintf_r+0xec2>
 801bcba:	ac2c      	add	r4, sp, #176	; 0xb0
 801bcbc:	e7f3      	b.n	801bca6 <_svfprintf_r+0xd06>
 801bcbe:	aa1f      	add	r2, sp, #124	; 0x7c
 801bcc0:	4651      	mov	r1, sl
 801bcc2:	4658      	mov	r0, fp
 801bcc4:	f001 fbce 	bl	801d464 <__ssprint_r>
 801bcc8:	2800      	cmp	r0, #0
 801bcca:	f040 80ca 	bne.w	801be62 <_svfprintf_r+0xec2>
 801bcce:	ac2c      	add	r4, sp, #176	; 0xb0
 801bcd0:	e78b      	b.n	801bbea <_svfprintf_r+0xc4a>
 801bcd2:	aa1f      	add	r2, sp, #124	; 0x7c
 801bcd4:	4651      	mov	r1, sl
 801bcd6:	4658      	mov	r0, fp
 801bcd8:	f001 fbc4 	bl	801d464 <__ssprint_r>
 801bcdc:	2800      	cmp	r0, #0
 801bcde:	f040 80c0 	bne.w	801be62 <_svfprintf_r+0xec2>
 801bce2:	ac2c      	add	r4, sp, #176	; 0xb0
 801bce4:	e795      	b.n	801bc12 <_svfprintf_r+0xc72>
 801bce6:	aa1f      	add	r2, sp, #124	; 0x7c
 801bce8:	4651      	mov	r1, sl
 801bcea:	4658      	mov	r0, fp
 801bcec:	f001 fbba 	bl	801d464 <__ssprint_r>
 801bcf0:	2800      	cmp	r0, #0
 801bcf2:	f040 80b6 	bne.w	801be62 <_svfprintf_r+0xec2>
 801bcf6:	ac2c      	add	r4, sp, #176	; 0xb0
 801bcf8:	e7a1      	b.n	801bc3e <_svfprintf_r+0xc9e>
 801bcfa:	aa1f      	add	r2, sp, #124	; 0x7c
 801bcfc:	4651      	mov	r1, sl
 801bcfe:	4658      	mov	r0, fp
 801bd00:	f001 fbb0 	bl	801d464 <__ssprint_r>
 801bd04:	2800      	cmp	r0, #0
 801bd06:	f040 80ac 	bne.w	801be62 <_svfprintf_r+0xec2>
 801bd0a:	ac2c      	add	r4, sp, #176	; 0xb0
 801bd0c:	e7b4      	b.n	801bc78 <_svfprintf_r+0xcd8>
 801bd0e:	bf00      	nop
 801bd10:	0802c9e2 	.word	0x0802c9e2
 801bd14:	080f5014 	.word	0x080f5014
 801bd18:	9b03      	ldr	r3, [sp, #12]
 801bd1a:	2b01      	cmp	r3, #1
 801bd1c:	dc01      	bgt.n	801bd22 <_svfprintf_r+0xd82>
 801bd1e:	07ea      	lsls	r2, r5, #31
 801bd20:	d576      	bpl.n	801be10 <_svfprintf_r+0xe70>
 801bd22:	2301      	movs	r3, #1
 801bd24:	6063      	str	r3, [r4, #4]
 801bd26:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801bd28:	f8c4 8000 	str.w	r8, [r4]
 801bd2c:	3301      	adds	r3, #1
 801bd2e:	9321      	str	r3, [sp, #132]	; 0x84
 801bd30:	9b20      	ldr	r3, [sp, #128]	; 0x80
 801bd32:	3301      	adds	r3, #1
 801bd34:	2b07      	cmp	r3, #7
 801bd36:	9320      	str	r3, [sp, #128]	; 0x80
 801bd38:	dc36      	bgt.n	801bda8 <_svfprintf_r+0xe08>
 801bd3a:	3408      	adds	r4, #8
 801bd3c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801bd3e:	6023      	str	r3, [r4, #0]
 801bd40:	9b08      	ldr	r3, [sp, #32]
 801bd42:	6063      	str	r3, [r4, #4]
 801bd44:	9a08      	ldr	r2, [sp, #32]
 801bd46:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801bd48:	4413      	add	r3, r2
 801bd4a:	9321      	str	r3, [sp, #132]	; 0x84
 801bd4c:	9b20      	ldr	r3, [sp, #128]	; 0x80
 801bd4e:	3301      	adds	r3, #1
 801bd50:	2b07      	cmp	r3, #7
 801bd52:	9320      	str	r3, [sp, #128]	; 0x80
 801bd54:	dc31      	bgt.n	801bdba <_svfprintf_r+0xe1a>
 801bd56:	3408      	adds	r4, #8
 801bd58:	2300      	movs	r3, #0
 801bd5a:	2200      	movs	r2, #0
 801bd5c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801bd60:	f7e4 feae 	bl	8000ac0 <__aeabi_dcmpeq>
 801bd64:	9b03      	ldr	r3, [sp, #12]
 801bd66:	1e5e      	subs	r6, r3, #1
 801bd68:	2800      	cmp	r0, #0
 801bd6a:	d12f      	bne.n	801bdcc <_svfprintf_r+0xe2c>
 801bd6c:	f108 0301 	add.w	r3, r8, #1
 801bd70:	e884 0048 	stmia.w	r4, {r3, r6}
 801bd74:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801bd76:	9a03      	ldr	r2, [sp, #12]
 801bd78:	3b01      	subs	r3, #1
 801bd7a:	4413      	add	r3, r2
 801bd7c:	9321      	str	r3, [sp, #132]	; 0x84
 801bd7e:	9b20      	ldr	r3, [sp, #128]	; 0x80
 801bd80:	3301      	adds	r3, #1
 801bd82:	2b07      	cmp	r3, #7
 801bd84:	9320      	str	r3, [sp, #128]	; 0x80
 801bd86:	dd4a      	ble.n	801be1e <_svfprintf_r+0xe7e>
 801bd88:	aa1f      	add	r2, sp, #124	; 0x7c
 801bd8a:	4651      	mov	r1, sl
 801bd8c:	4658      	mov	r0, fp
 801bd8e:	f001 fb69 	bl	801d464 <__ssprint_r>
 801bd92:	2800      	cmp	r0, #0
 801bd94:	d165      	bne.n	801be62 <_svfprintf_r+0xec2>
 801bd96:	ac2c      	add	r4, sp, #176	; 0xb0
 801bd98:	ab1b      	add	r3, sp, #108	; 0x6c
 801bd9a:	6023      	str	r3, [r4, #0]
 801bd9c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801bd9e:	6063      	str	r3, [r4, #4]
 801bda0:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801bda2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801bda4:	4413      	add	r3, r2
 801bda6:	e41c      	b.n	801b5e2 <_svfprintf_r+0x642>
 801bda8:	aa1f      	add	r2, sp, #124	; 0x7c
 801bdaa:	4651      	mov	r1, sl
 801bdac:	4658      	mov	r0, fp
 801bdae:	f001 fb59 	bl	801d464 <__ssprint_r>
 801bdb2:	2800      	cmp	r0, #0
 801bdb4:	d155      	bne.n	801be62 <_svfprintf_r+0xec2>
 801bdb6:	ac2c      	add	r4, sp, #176	; 0xb0
 801bdb8:	e7c0      	b.n	801bd3c <_svfprintf_r+0xd9c>
 801bdba:	aa1f      	add	r2, sp, #124	; 0x7c
 801bdbc:	4651      	mov	r1, sl
 801bdbe:	4658      	mov	r0, fp
 801bdc0:	f001 fb50 	bl	801d464 <__ssprint_r>
 801bdc4:	2800      	cmp	r0, #0
 801bdc6:	d14c      	bne.n	801be62 <_svfprintf_r+0xec2>
 801bdc8:	ac2c      	add	r4, sp, #176	; 0xb0
 801bdca:	e7c5      	b.n	801bd58 <_svfprintf_r+0xdb8>
 801bdcc:	2e00      	cmp	r6, #0
 801bdce:	dde3      	ble.n	801bd98 <_svfprintf_r+0xdf8>
 801bdd0:	4f59      	ldr	r7, [pc, #356]	; (801bf38 <_svfprintf_r+0xf98>)
 801bdd2:	f04f 0810 	mov.w	r8, #16
 801bdd6:	2e10      	cmp	r6, #16
 801bdd8:	6027      	str	r7, [r4, #0]
 801bdda:	dc04      	bgt.n	801bde6 <_svfprintf_r+0xe46>
 801bddc:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801bdde:	6066      	str	r6, [r4, #4]
 801bde0:	441e      	add	r6, r3
 801bde2:	9621      	str	r6, [sp, #132]	; 0x84
 801bde4:	e7cb      	b.n	801bd7e <_svfprintf_r+0xdde>
 801bde6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801bde8:	f8c4 8004 	str.w	r8, [r4, #4]
 801bdec:	3310      	adds	r3, #16
 801bdee:	9321      	str	r3, [sp, #132]	; 0x84
 801bdf0:	9b20      	ldr	r3, [sp, #128]	; 0x80
 801bdf2:	3301      	adds	r3, #1
 801bdf4:	2b07      	cmp	r3, #7
 801bdf6:	9320      	str	r3, [sp, #128]	; 0x80
 801bdf8:	dc02      	bgt.n	801be00 <_svfprintf_r+0xe60>
 801bdfa:	3408      	adds	r4, #8
 801bdfc:	3e10      	subs	r6, #16
 801bdfe:	e7ea      	b.n	801bdd6 <_svfprintf_r+0xe36>
 801be00:	aa1f      	add	r2, sp, #124	; 0x7c
 801be02:	4651      	mov	r1, sl
 801be04:	4658      	mov	r0, fp
 801be06:	f001 fb2d 	bl	801d464 <__ssprint_r>
 801be0a:	bb50      	cbnz	r0, 801be62 <_svfprintf_r+0xec2>
 801be0c:	ac2c      	add	r4, sp, #176	; 0xb0
 801be0e:	e7f5      	b.n	801bdfc <_svfprintf_r+0xe5c>
 801be10:	2301      	movs	r3, #1
 801be12:	6063      	str	r3, [r4, #4]
 801be14:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801be16:	f8c4 8000 	str.w	r8, [r4]
 801be1a:	3301      	adds	r3, #1
 801be1c:	e7ae      	b.n	801bd7c <_svfprintf_r+0xddc>
 801be1e:	3408      	adds	r4, #8
 801be20:	e7ba      	b.n	801bd98 <_svfprintf_r+0xdf8>
 801be22:	3408      	adds	r4, #8
 801be24:	f7ff bbed 	b.w	801b602 <_svfprintf_r+0x662>
 801be28:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801be2a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801be2c:	1a9d      	subs	r5, r3, r2
 801be2e:	2d00      	cmp	r5, #0
 801be30:	f77f abea 	ble.w	801b608 <_svfprintf_r+0x668>
 801be34:	2610      	movs	r6, #16
 801be36:	4b41      	ldr	r3, [pc, #260]	; (801bf3c <_svfprintf_r+0xf9c>)
 801be38:	6023      	str	r3, [r4, #0]
 801be3a:	2d10      	cmp	r5, #16
 801be3c:	dc1b      	bgt.n	801be76 <_svfprintf_r+0xed6>
 801be3e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801be40:	6065      	str	r5, [r4, #4]
 801be42:	441d      	add	r5, r3
 801be44:	9b20      	ldr	r3, [sp, #128]	; 0x80
 801be46:	9521      	str	r5, [sp, #132]	; 0x84
 801be48:	3301      	adds	r3, #1
 801be4a:	2b07      	cmp	r3, #7
 801be4c:	9320      	str	r3, [sp, #128]	; 0x80
 801be4e:	f77f abdb 	ble.w	801b608 <_svfprintf_r+0x668>
 801be52:	aa1f      	add	r2, sp, #124	; 0x7c
 801be54:	4651      	mov	r1, sl
 801be56:	4658      	mov	r0, fp
 801be58:	f001 fb04 	bl	801d464 <__ssprint_r>
 801be5c:	2800      	cmp	r0, #0
 801be5e:	f43f abd3 	beq.w	801b608 <_svfprintf_r+0x668>
 801be62:	f8ba 300c 	ldrh.w	r3, [sl, #12]
 801be66:	f013 0f40 	tst.w	r3, #64	; 0x40
 801be6a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801be6c:	bf18      	it	ne
 801be6e:	f04f 33ff 	movne.w	r3, #4294967295	; 0xffffffff
 801be72:	f7ff b8b9 	b.w	801afe8 <_svfprintf_r+0x48>
 801be76:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801be78:	6066      	str	r6, [r4, #4]
 801be7a:	3310      	adds	r3, #16
 801be7c:	9321      	str	r3, [sp, #132]	; 0x84
 801be7e:	9b20      	ldr	r3, [sp, #128]	; 0x80
 801be80:	3301      	adds	r3, #1
 801be82:	2b07      	cmp	r3, #7
 801be84:	9320      	str	r3, [sp, #128]	; 0x80
 801be86:	dc02      	bgt.n	801be8e <_svfprintf_r+0xeee>
 801be88:	3408      	adds	r4, #8
 801be8a:	3d10      	subs	r5, #16
 801be8c:	e7d3      	b.n	801be36 <_svfprintf_r+0xe96>
 801be8e:	aa1f      	add	r2, sp, #124	; 0x7c
 801be90:	4651      	mov	r1, sl
 801be92:	4658      	mov	r0, fp
 801be94:	f001 fae6 	bl	801d464 <__ssprint_r>
 801be98:	2800      	cmp	r0, #0
 801be9a:	d1e2      	bne.n	801be62 <_svfprintf_r+0xec2>
 801be9c:	ac2c      	add	r4, sp, #176	; 0xb0
 801be9e:	e7f4      	b.n	801be8a <_svfprintf_r+0xeea>
 801bea0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801bea2:	2b00      	cmp	r3, #0
 801bea4:	d0dd      	beq.n	801be62 <_svfprintf_r+0xec2>
 801bea6:	aa1f      	add	r2, sp, #124	; 0x7c
 801bea8:	4651      	mov	r1, sl
 801beaa:	4658      	mov	r0, fp
 801beac:	f001 fada 	bl	801d464 <__ssprint_r>
 801beb0:	e7d7      	b.n	801be62 <_svfprintf_r+0xec2>
 801beb2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 801beb6:	4610      	mov	r0, r2
 801beb8:	4619      	mov	r1, r3
 801beba:	f7e4 fe33 	bl	8000b24 <__aeabi_dcmpun>
 801bebe:	2800      	cmp	r0, #0
 801bec0:	f43f aa44 	beq.w	801b34c <_svfprintf_r+0x3ac>
 801bec4:	4b1e      	ldr	r3, [pc, #120]	; (801bf40 <_svfprintf_r+0xfa0>)
 801bec6:	4a1f      	ldr	r2, [pc, #124]	; (801bf44 <_svfprintf_r+0xfa4>)
 801bec8:	f7ff ba34 	b.w	801b334 <_svfprintf_r+0x394>
 801becc:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801bece:	eba3 0308 	sub.w	r3, r3, r8
 801bed2:	9303      	str	r3, [sp, #12]
 801bed4:	f7ff bab5 	b.w	801b442 <_svfprintf_r+0x4a2>
 801bed8:	ea56 0207 	orrs.w	r2, r6, r7
 801bedc:	950b      	str	r5, [sp, #44]	; 0x2c
 801bede:	f43f ac2b 	beq.w	801b738 <_svfprintf_r+0x798>
 801bee2:	2b01      	cmp	r3, #1
 801bee4:	f43f ac9d 	beq.w	801b822 <_svfprintf_r+0x882>
 801bee8:	2b02      	cmp	r3, #2
 801beea:	f43f acbd 	beq.w	801b868 <_svfprintf_r+0x8c8>
 801beee:	ab2c      	add	r3, sp, #176	; 0xb0
 801bef0:	08f1      	lsrs	r1, r6, #3
 801bef2:	ea41 7147 	orr.w	r1, r1, r7, lsl #29
 801bef6:	08f8      	lsrs	r0, r7, #3
 801bef8:	f006 0207 	and.w	r2, r6, #7
 801befc:	4607      	mov	r7, r0
 801befe:	460e      	mov	r6, r1
 801bf00:	3230      	adds	r2, #48	; 0x30
 801bf02:	ea56 0107 	orrs.w	r1, r6, r7
 801bf06:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 801bf0a:	f803 2c01 	strb.w	r2, [r3, #-1]
 801bf0e:	f47f ac86 	bne.w	801b81e <_svfprintf_r+0x87e>
 801bf12:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801bf14:	07c9      	lsls	r1, r1, #31
 801bf16:	d506      	bpl.n	801bf26 <_svfprintf_r+0xf86>
 801bf18:	2a30      	cmp	r2, #48	; 0x30
 801bf1a:	d004      	beq.n	801bf26 <_svfprintf_r+0xf86>
 801bf1c:	2230      	movs	r2, #48	; 0x30
 801bf1e:	f808 2c01 	strb.w	r2, [r8, #-1]
 801bf22:	f1a3 0802 	sub.w	r8, r3, #2
 801bf26:	464e      	mov	r6, r9
 801bf28:	f10d 09b0 	add.w	r9, sp, #176	; 0xb0
 801bf2c:	eba9 0908 	sub.w	r9, r9, r8
 801bf30:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 801bf32:	2700      	movs	r7, #0
 801bf34:	f7ff bad1 	b.w	801b4da <_svfprintf_r+0x53a>
 801bf38:	080f5014 	.word	0x080f5014
 801bf3c:	080f5004 	.word	0x080f5004
 801bf40:	080f4fda 	.word	0x080f4fda
 801bf44:	080f4fde 	.word	0x080f4fde

0801bf48 <_vsprintf_r>:
 801bf48:	b510      	push	{r4, lr}
 801bf4a:	b09a      	sub	sp, #104	; 0x68
 801bf4c:	f44f 7402 	mov.w	r4, #520	; 0x208
 801bf50:	9100      	str	r1, [sp, #0]
 801bf52:	9104      	str	r1, [sp, #16]
 801bf54:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 801bf58:	9102      	str	r1, [sp, #8]
 801bf5a:	9105      	str	r1, [sp, #20]
 801bf5c:	f64f 71ff 	movw	r1, #65535	; 0xffff
 801bf60:	f8ad 100e 	strh.w	r1, [sp, #14]
 801bf64:	4669      	mov	r1, sp
 801bf66:	f8ad 400c 	strh.w	r4, [sp, #12]
 801bf6a:	f7ff f819 	bl	801afa0 <_svfprintf_r>
 801bf6e:	9b00      	ldr	r3, [sp, #0]
 801bf70:	2200      	movs	r2, #0
 801bf72:	701a      	strb	r2, [r3, #0]
 801bf74:	b01a      	add	sp, #104	; 0x68
 801bf76:	bd10      	pop	{r4, pc}

0801bf78 <vsprintf>:
 801bf78:	4613      	mov	r3, r2
 801bf7a:	460a      	mov	r2, r1
 801bf7c:	4601      	mov	r1, r0
 801bf7e:	4802      	ldr	r0, [pc, #8]	; (801bf88 <vsprintf+0x10>)
 801bf80:	6800      	ldr	r0, [r0, #0]
 801bf82:	f7ff bfe1 	b.w	801bf48 <_vsprintf_r>
 801bf86:	bf00      	nop
 801bf88:	20001d2c 	.word	0x20001d2c

0801bf8c <quorem>:
 801bf8c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801bf90:	6903      	ldr	r3, [r0, #16]
 801bf92:	690c      	ldr	r4, [r1, #16]
 801bf94:	429c      	cmp	r4, r3
 801bf96:	4680      	mov	r8, r0
 801bf98:	f300 8082 	bgt.w	801c0a0 <quorem+0x114>
 801bf9c:	3c01      	subs	r4, #1
 801bf9e:	f101 0714 	add.w	r7, r1, #20
 801bfa2:	ea4f 0e84 	mov.w	lr, r4, lsl #2
 801bfa6:	f100 0614 	add.w	r6, r0, #20
 801bfaa:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 801bfae:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 801bfb2:	eb06 030e 	add.w	r3, r6, lr
 801bfb6:	3501      	adds	r5, #1
 801bfb8:	eb07 090e 	add.w	r9, r7, lr
 801bfbc:	9301      	str	r3, [sp, #4]
 801bfbe:	fbb0 f5f5 	udiv	r5, r0, r5
 801bfc2:	b395      	cbz	r5, 801c02a <quorem+0x9e>
 801bfc4:	f04f 0a00 	mov.w	sl, #0
 801bfc8:	4638      	mov	r0, r7
 801bfca:	46b4      	mov	ip, r6
 801bfcc:	46d3      	mov	fp, sl
 801bfce:	f850 2b04 	ldr.w	r2, [r0], #4
 801bfd2:	b293      	uxth	r3, r2
 801bfd4:	fb05 a303 	mla	r3, r5, r3, sl
 801bfd8:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 801bfdc:	b29b      	uxth	r3, r3
 801bfde:	ebab 0303 	sub.w	r3, fp, r3
 801bfe2:	0c12      	lsrs	r2, r2, #16
 801bfe4:	f8bc b000 	ldrh.w	fp, [ip]
 801bfe8:	fb05 a202 	mla	r2, r5, r2, sl
 801bfec:	fa13 f38b 	uxtah	r3, r3, fp
 801bff0:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 801bff4:	fa1f fb82 	uxth.w	fp, r2
 801bff8:	f8dc 2000 	ldr.w	r2, [ip]
 801bffc:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 801c000:	eb02 4223 	add.w	r2, r2, r3, asr #16
 801c004:	b29b      	uxth	r3, r3
 801c006:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801c00a:	4581      	cmp	r9, r0
 801c00c:	ea4f 4b22 	mov.w	fp, r2, asr #16
 801c010:	f84c 3b04 	str.w	r3, [ip], #4
 801c014:	d2db      	bcs.n	801bfce <quorem+0x42>
 801c016:	f856 300e 	ldr.w	r3, [r6, lr]
 801c01a:	b933      	cbnz	r3, 801c02a <quorem+0x9e>
 801c01c:	9b01      	ldr	r3, [sp, #4]
 801c01e:	3b04      	subs	r3, #4
 801c020:	429e      	cmp	r6, r3
 801c022:	461a      	mov	r2, r3
 801c024:	d330      	bcc.n	801c088 <quorem+0xfc>
 801c026:	f8c8 4010 	str.w	r4, [r8, #16]
 801c02a:	4640      	mov	r0, r8
 801c02c:	f001 f953 	bl	801d2d6 <__mcmp>
 801c030:	2800      	cmp	r0, #0
 801c032:	db25      	blt.n	801c080 <quorem+0xf4>
 801c034:	3501      	adds	r5, #1
 801c036:	4630      	mov	r0, r6
 801c038:	f04f 0e00 	mov.w	lr, #0
 801c03c:	f857 2b04 	ldr.w	r2, [r7], #4
 801c040:	f8d0 c000 	ldr.w	ip, [r0]
 801c044:	b293      	uxth	r3, r2
 801c046:	ebae 0303 	sub.w	r3, lr, r3
 801c04a:	0c12      	lsrs	r2, r2, #16
 801c04c:	fa13 f38c 	uxtah	r3, r3, ip
 801c050:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 801c054:	eb02 4223 	add.w	r2, r2, r3, asr #16
 801c058:	b29b      	uxth	r3, r3
 801c05a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801c05e:	45b9      	cmp	r9, r7
 801c060:	ea4f 4e22 	mov.w	lr, r2, asr #16
 801c064:	f840 3b04 	str.w	r3, [r0], #4
 801c068:	d2e8      	bcs.n	801c03c <quorem+0xb0>
 801c06a:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 801c06e:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 801c072:	b92a      	cbnz	r2, 801c080 <quorem+0xf4>
 801c074:	3b04      	subs	r3, #4
 801c076:	429e      	cmp	r6, r3
 801c078:	461a      	mov	r2, r3
 801c07a:	d30b      	bcc.n	801c094 <quorem+0x108>
 801c07c:	f8c8 4010 	str.w	r4, [r8, #16]
 801c080:	4628      	mov	r0, r5
 801c082:	b003      	add	sp, #12
 801c084:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c088:	6812      	ldr	r2, [r2, #0]
 801c08a:	3b04      	subs	r3, #4
 801c08c:	2a00      	cmp	r2, #0
 801c08e:	d1ca      	bne.n	801c026 <quorem+0x9a>
 801c090:	3c01      	subs	r4, #1
 801c092:	e7c5      	b.n	801c020 <quorem+0x94>
 801c094:	6812      	ldr	r2, [r2, #0]
 801c096:	3b04      	subs	r3, #4
 801c098:	2a00      	cmp	r2, #0
 801c09a:	d1ef      	bne.n	801c07c <quorem+0xf0>
 801c09c:	3c01      	subs	r4, #1
 801c09e:	e7ea      	b.n	801c076 <quorem+0xea>
 801c0a0:	2000      	movs	r0, #0
 801c0a2:	e7ee      	b.n	801c082 <quorem+0xf6>
 801c0a4:	0000      	movs	r0, r0
	...

0801c0a8 <_dtoa_r>:
 801c0a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c0ac:	ec57 6b10 	vmov	r6, r7, d0
 801c0b0:	b097      	sub	sp, #92	; 0x5c
 801c0b2:	e9cd 6700 	strd	r6, r7, [sp]
 801c0b6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 801c0b8:	9107      	str	r1, [sp, #28]
 801c0ba:	4604      	mov	r4, r0
 801c0bc:	920a      	str	r2, [sp, #40]	; 0x28
 801c0be:	930f      	str	r3, [sp, #60]	; 0x3c
 801c0c0:	9d20      	ldr	r5, [sp, #128]	; 0x80
 801c0c2:	b93e      	cbnz	r6, 801c0d4 <_dtoa_r+0x2c>
 801c0c4:	2010      	movs	r0, #16
 801c0c6:	f000 fee3 	bl	801ce90 <malloc>
 801c0ca:	6260      	str	r0, [r4, #36]	; 0x24
 801c0cc:	6046      	str	r6, [r0, #4]
 801c0ce:	6086      	str	r6, [r0, #8]
 801c0d0:	6006      	str	r6, [r0, #0]
 801c0d2:	60c6      	str	r6, [r0, #12]
 801c0d4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801c0d6:	6819      	ldr	r1, [r3, #0]
 801c0d8:	b151      	cbz	r1, 801c0f0 <_dtoa_r+0x48>
 801c0da:	685a      	ldr	r2, [r3, #4]
 801c0dc:	604a      	str	r2, [r1, #4]
 801c0de:	2301      	movs	r3, #1
 801c0e0:	4093      	lsls	r3, r2
 801c0e2:	608b      	str	r3, [r1, #8]
 801c0e4:	4620      	mov	r0, r4
 801c0e6:	f000 ff21 	bl	801cf2c <_Bfree>
 801c0ea:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801c0ec:	2200      	movs	r2, #0
 801c0ee:	601a      	str	r2, [r3, #0]
 801c0f0:	9b01      	ldr	r3, [sp, #4]
 801c0f2:	2b00      	cmp	r3, #0
 801c0f4:	bfbf      	itttt	lt
 801c0f6:	2301      	movlt	r3, #1
 801c0f8:	602b      	strlt	r3, [r5, #0]
 801c0fa:	9b01      	ldrlt	r3, [sp, #4]
 801c0fc:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 801c100:	bfb2      	itee	lt
 801c102:	9301      	strlt	r3, [sp, #4]
 801c104:	2300      	movge	r3, #0
 801c106:	602b      	strge	r3, [r5, #0]
 801c108:	f8dd 8004 	ldr.w	r8, [sp, #4]
 801c10c:	4ba8      	ldr	r3, [pc, #672]	; (801c3b0 <_dtoa_r+0x308>)
 801c10e:	ea33 0308 	bics.w	r3, r3, r8
 801c112:	d11b      	bne.n	801c14c <_dtoa_r+0xa4>
 801c114:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801c116:	f242 730f 	movw	r3, #9999	; 0x270f
 801c11a:	6013      	str	r3, [r2, #0]
 801c11c:	9b00      	ldr	r3, [sp, #0]
 801c11e:	b923      	cbnz	r3, 801c12a <_dtoa_r+0x82>
 801c120:	f3c8 0013 	ubfx	r0, r8, #0, #20
 801c124:	2800      	cmp	r0, #0
 801c126:	f000 8578 	beq.w	801cc1a <_dtoa_r+0xb72>
 801c12a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801c12c:	b953      	cbnz	r3, 801c144 <_dtoa_r+0x9c>
 801c12e:	4ba1      	ldr	r3, [pc, #644]	; (801c3b4 <_dtoa_r+0x30c>)
 801c130:	e021      	b.n	801c176 <_dtoa_r+0xce>
 801c132:	4ba1      	ldr	r3, [pc, #644]	; (801c3b8 <_dtoa_r+0x310>)
 801c134:	9302      	str	r3, [sp, #8]
 801c136:	3308      	adds	r3, #8
 801c138:	9a21      	ldr	r2, [sp, #132]	; 0x84
 801c13a:	6013      	str	r3, [r2, #0]
 801c13c:	9802      	ldr	r0, [sp, #8]
 801c13e:	b017      	add	sp, #92	; 0x5c
 801c140:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c144:	4b9b      	ldr	r3, [pc, #620]	; (801c3b4 <_dtoa_r+0x30c>)
 801c146:	9302      	str	r3, [sp, #8]
 801c148:	3303      	adds	r3, #3
 801c14a:	e7f5      	b.n	801c138 <_dtoa_r+0x90>
 801c14c:	e9dd 6700 	ldrd	r6, r7, [sp]
 801c150:	2200      	movs	r2, #0
 801c152:	2300      	movs	r3, #0
 801c154:	4630      	mov	r0, r6
 801c156:	4639      	mov	r1, r7
 801c158:	f7e4 fcb2 	bl	8000ac0 <__aeabi_dcmpeq>
 801c15c:	4681      	mov	r9, r0
 801c15e:	b160      	cbz	r0, 801c17a <_dtoa_r+0xd2>
 801c160:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801c162:	2301      	movs	r3, #1
 801c164:	6013      	str	r3, [r2, #0]
 801c166:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801c168:	2b00      	cmp	r3, #0
 801c16a:	f000 8553 	beq.w	801cc14 <_dtoa_r+0xb6c>
 801c16e:	4b93      	ldr	r3, [pc, #588]	; (801c3bc <_dtoa_r+0x314>)
 801c170:	9a21      	ldr	r2, [sp, #132]	; 0x84
 801c172:	6013      	str	r3, [r2, #0]
 801c174:	3b01      	subs	r3, #1
 801c176:	9302      	str	r3, [sp, #8]
 801c178:	e7e0      	b.n	801c13c <_dtoa_r+0x94>
 801c17a:	aa14      	add	r2, sp, #80	; 0x50
 801c17c:	a915      	add	r1, sp, #84	; 0x54
 801c17e:	ec47 6b10 	vmov	d0, r6, r7
 801c182:	4620      	mov	r0, r4
 801c184:	f001 f91f 	bl	801d3c6 <__d2b>
 801c188:	f3c8 550a 	ubfx	r5, r8, #20, #11
 801c18c:	4682      	mov	sl, r0
 801c18e:	2d00      	cmp	r5, #0
 801c190:	d07e      	beq.n	801c290 <_dtoa_r+0x1e8>
 801c192:	f3c7 0313 	ubfx	r3, r7, #0, #20
 801c196:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 801c19a:	4630      	mov	r0, r6
 801c19c:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 801c1a0:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 801c1a4:	f8cd 9048 	str.w	r9, [sp, #72]	; 0x48
 801c1a8:	2200      	movs	r2, #0
 801c1aa:	4b85      	ldr	r3, [pc, #532]	; (801c3c0 <_dtoa_r+0x318>)
 801c1ac:	f7e4 f86c 	bl	8000288 <__aeabi_dsub>
 801c1b0:	a379      	add	r3, pc, #484	; (adr r3, 801c398 <_dtoa_r+0x2f0>)
 801c1b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c1b6:	f7e4 fa1b 	bl	80005f0 <__aeabi_dmul>
 801c1ba:	a379      	add	r3, pc, #484	; (adr r3, 801c3a0 <_dtoa_r+0x2f8>)
 801c1bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c1c0:	f7e4 f864 	bl	800028c <__adddf3>
 801c1c4:	4606      	mov	r6, r0
 801c1c6:	4628      	mov	r0, r5
 801c1c8:	460f      	mov	r7, r1
 801c1ca:	f7e4 f9ab 	bl	8000524 <__aeabi_i2d>
 801c1ce:	a376      	add	r3, pc, #472	; (adr r3, 801c3a8 <_dtoa_r+0x300>)
 801c1d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c1d4:	f7e4 fa0c 	bl	80005f0 <__aeabi_dmul>
 801c1d8:	4602      	mov	r2, r0
 801c1da:	460b      	mov	r3, r1
 801c1dc:	4630      	mov	r0, r6
 801c1de:	4639      	mov	r1, r7
 801c1e0:	f7e4 f854 	bl	800028c <__adddf3>
 801c1e4:	4606      	mov	r6, r0
 801c1e6:	460f      	mov	r7, r1
 801c1e8:	f7e4 fcb2 	bl	8000b50 <__aeabi_d2iz>
 801c1ec:	2200      	movs	r2, #0
 801c1ee:	4683      	mov	fp, r0
 801c1f0:	2300      	movs	r3, #0
 801c1f2:	4630      	mov	r0, r6
 801c1f4:	4639      	mov	r1, r7
 801c1f6:	f7e4 fc6d 	bl	8000ad4 <__aeabi_dcmplt>
 801c1fa:	b158      	cbz	r0, 801c214 <_dtoa_r+0x16c>
 801c1fc:	4658      	mov	r0, fp
 801c1fe:	f7e4 f991 	bl	8000524 <__aeabi_i2d>
 801c202:	4602      	mov	r2, r0
 801c204:	460b      	mov	r3, r1
 801c206:	4630      	mov	r0, r6
 801c208:	4639      	mov	r1, r7
 801c20a:	f7e4 fc59 	bl	8000ac0 <__aeabi_dcmpeq>
 801c20e:	b908      	cbnz	r0, 801c214 <_dtoa_r+0x16c>
 801c210:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 801c214:	f1bb 0f16 	cmp.w	fp, #22
 801c218:	d859      	bhi.n	801c2ce <_dtoa_r+0x226>
 801c21a:	496a      	ldr	r1, [pc, #424]	; (801c3c4 <_dtoa_r+0x31c>)
 801c21c:	eb01 01cb 	add.w	r1, r1, fp, lsl #3
 801c220:	e9dd 2300 	ldrd	r2, r3, [sp]
 801c224:	e9d1 0100 	ldrd	r0, r1, [r1]
 801c228:	f7e4 fc72 	bl	8000b10 <__aeabi_dcmpgt>
 801c22c:	2800      	cmp	r0, #0
 801c22e:	d050      	beq.n	801c2d2 <_dtoa_r+0x22a>
 801c230:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 801c234:	2300      	movs	r3, #0
 801c236:	930e      	str	r3, [sp, #56]	; 0x38
 801c238:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801c23a:	1b5d      	subs	r5, r3, r5
 801c23c:	1e6b      	subs	r3, r5, #1
 801c23e:	9306      	str	r3, [sp, #24]
 801c240:	bf45      	ittet	mi
 801c242:	f1c5 0301 	rsbmi	r3, r5, #1
 801c246:	9305      	strmi	r3, [sp, #20]
 801c248:	2300      	movpl	r3, #0
 801c24a:	2300      	movmi	r3, #0
 801c24c:	bf4c      	ite	mi
 801c24e:	9306      	strmi	r3, [sp, #24]
 801c250:	9305      	strpl	r3, [sp, #20]
 801c252:	f1bb 0f00 	cmp.w	fp, #0
 801c256:	db3e      	blt.n	801c2d6 <_dtoa_r+0x22e>
 801c258:	9b06      	ldr	r3, [sp, #24]
 801c25a:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 801c25e:	445b      	add	r3, fp
 801c260:	9306      	str	r3, [sp, #24]
 801c262:	2300      	movs	r3, #0
 801c264:	9308      	str	r3, [sp, #32]
 801c266:	9b07      	ldr	r3, [sp, #28]
 801c268:	2b09      	cmp	r3, #9
 801c26a:	f200 80af 	bhi.w	801c3cc <_dtoa_r+0x324>
 801c26e:	2b05      	cmp	r3, #5
 801c270:	bfc4      	itt	gt
 801c272:	3b04      	subgt	r3, #4
 801c274:	9307      	strgt	r3, [sp, #28]
 801c276:	9b07      	ldr	r3, [sp, #28]
 801c278:	f1a3 0302 	sub.w	r3, r3, #2
 801c27c:	bfcc      	ite	gt
 801c27e:	2600      	movgt	r6, #0
 801c280:	2601      	movle	r6, #1
 801c282:	2b03      	cmp	r3, #3
 801c284:	f200 80ae 	bhi.w	801c3e4 <_dtoa_r+0x33c>
 801c288:	e8df f003 	tbb	[pc, r3]
 801c28c:	772f8482 	.word	0x772f8482
 801c290:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801c292:	9d14      	ldr	r5, [sp, #80]	; 0x50
 801c294:	441d      	add	r5, r3
 801c296:	f205 4332 	addw	r3, r5, #1074	; 0x432
 801c29a:	2b20      	cmp	r3, #32
 801c29c:	dd11      	ble.n	801c2c2 <_dtoa_r+0x21a>
 801c29e:	9a00      	ldr	r2, [sp, #0]
 801c2a0:	f205 4012 	addw	r0, r5, #1042	; 0x412
 801c2a4:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 801c2a8:	fa22 f000 	lsr.w	r0, r2, r0
 801c2ac:	fa08 f303 	lsl.w	r3, r8, r3
 801c2b0:	4318      	orrs	r0, r3
 801c2b2:	f7e4 f927 	bl	8000504 <__aeabi_ui2d>
 801c2b6:	2301      	movs	r3, #1
 801c2b8:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 801c2bc:	3d01      	subs	r5, #1
 801c2be:	9312      	str	r3, [sp, #72]	; 0x48
 801c2c0:	e772      	b.n	801c1a8 <_dtoa_r+0x100>
 801c2c2:	f1c3 0020 	rsb	r0, r3, #32
 801c2c6:	9b00      	ldr	r3, [sp, #0]
 801c2c8:	fa03 f000 	lsl.w	r0, r3, r0
 801c2cc:	e7f1      	b.n	801c2b2 <_dtoa_r+0x20a>
 801c2ce:	2301      	movs	r3, #1
 801c2d0:	e7b1      	b.n	801c236 <_dtoa_r+0x18e>
 801c2d2:	900e      	str	r0, [sp, #56]	; 0x38
 801c2d4:	e7b0      	b.n	801c238 <_dtoa_r+0x190>
 801c2d6:	9b05      	ldr	r3, [sp, #20]
 801c2d8:	eba3 030b 	sub.w	r3, r3, fp
 801c2dc:	9305      	str	r3, [sp, #20]
 801c2de:	f1cb 0300 	rsb	r3, fp, #0
 801c2e2:	9308      	str	r3, [sp, #32]
 801c2e4:	2300      	movs	r3, #0
 801c2e6:	930b      	str	r3, [sp, #44]	; 0x2c
 801c2e8:	e7bd      	b.n	801c266 <_dtoa_r+0x1be>
 801c2ea:	2301      	movs	r3, #1
 801c2ec:	9309      	str	r3, [sp, #36]	; 0x24
 801c2ee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801c2f0:	2b00      	cmp	r3, #0
 801c2f2:	dd7a      	ble.n	801c3ea <_dtoa_r+0x342>
 801c2f4:	9304      	str	r3, [sp, #16]
 801c2f6:	9303      	str	r3, [sp, #12]
 801c2f8:	6a65      	ldr	r5, [r4, #36]	; 0x24
 801c2fa:	2200      	movs	r2, #0
 801c2fc:	606a      	str	r2, [r5, #4]
 801c2fe:	2104      	movs	r1, #4
 801c300:	f101 0214 	add.w	r2, r1, #20
 801c304:	429a      	cmp	r2, r3
 801c306:	d975      	bls.n	801c3f4 <_dtoa_r+0x34c>
 801c308:	6869      	ldr	r1, [r5, #4]
 801c30a:	4620      	mov	r0, r4
 801c30c:	f000 fdda 	bl	801cec4 <_Balloc>
 801c310:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801c312:	6028      	str	r0, [r5, #0]
 801c314:	681b      	ldr	r3, [r3, #0]
 801c316:	9302      	str	r3, [sp, #8]
 801c318:	9b03      	ldr	r3, [sp, #12]
 801c31a:	2b0e      	cmp	r3, #14
 801c31c:	f200 80e5 	bhi.w	801c4ea <_dtoa_r+0x442>
 801c320:	2e00      	cmp	r6, #0
 801c322:	f000 80e2 	beq.w	801c4ea <_dtoa_r+0x442>
 801c326:	ed9d 7b00 	vldr	d7, [sp]
 801c32a:	f1bb 0f00 	cmp.w	fp, #0
 801c32e:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 801c332:	dd74      	ble.n	801c41e <_dtoa_r+0x376>
 801c334:	4a23      	ldr	r2, [pc, #140]	; (801c3c4 <_dtoa_r+0x31c>)
 801c336:	f00b 030f 	and.w	r3, fp, #15
 801c33a:	ea4f 162b 	mov.w	r6, fp, asr #4
 801c33e:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 801c342:	06f0      	lsls	r0, r6, #27
 801c344:	e9d3 8900 	ldrd	r8, r9, [r3]
 801c348:	d559      	bpl.n	801c3fe <_dtoa_r+0x356>
 801c34a:	4b1f      	ldr	r3, [pc, #124]	; (801c3c8 <_dtoa_r+0x320>)
 801c34c:	ec51 0b17 	vmov	r0, r1, d7
 801c350:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 801c354:	f7e4 fa76 	bl	8000844 <__aeabi_ddiv>
 801c358:	e9cd 0100 	strd	r0, r1, [sp]
 801c35c:	f006 060f 	and.w	r6, r6, #15
 801c360:	2503      	movs	r5, #3
 801c362:	4f19      	ldr	r7, [pc, #100]	; (801c3c8 <_dtoa_r+0x320>)
 801c364:	2e00      	cmp	r6, #0
 801c366:	d14c      	bne.n	801c402 <_dtoa_r+0x35a>
 801c368:	4642      	mov	r2, r8
 801c36a:	464b      	mov	r3, r9
 801c36c:	e9dd 0100 	ldrd	r0, r1, [sp]
 801c370:	f7e4 fa68 	bl	8000844 <__aeabi_ddiv>
 801c374:	e9cd 0100 	strd	r0, r1, [sp]
 801c378:	e06a      	b.n	801c450 <_dtoa_r+0x3a8>
 801c37a:	2301      	movs	r3, #1
 801c37c:	9309      	str	r3, [sp, #36]	; 0x24
 801c37e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801c380:	445b      	add	r3, fp
 801c382:	9304      	str	r3, [sp, #16]
 801c384:	3301      	adds	r3, #1
 801c386:	2b01      	cmp	r3, #1
 801c388:	9303      	str	r3, [sp, #12]
 801c38a:	bfb8      	it	lt
 801c38c:	2301      	movlt	r3, #1
 801c38e:	e7b3      	b.n	801c2f8 <_dtoa_r+0x250>
 801c390:	2300      	movs	r3, #0
 801c392:	e7ab      	b.n	801c2ec <_dtoa_r+0x244>
 801c394:	2300      	movs	r3, #0
 801c396:	e7f1      	b.n	801c37c <_dtoa_r+0x2d4>
 801c398:	636f4361 	.word	0x636f4361
 801c39c:	3fd287a7 	.word	0x3fd287a7
 801c3a0:	8b60c8b3 	.word	0x8b60c8b3
 801c3a4:	3fc68a28 	.word	0x3fc68a28
 801c3a8:	509f79fb 	.word	0x509f79fb
 801c3ac:	3fd34413 	.word	0x3fd34413
 801c3b0:	7ff00000 	.word	0x7ff00000
 801c3b4:	080f502d 	.word	0x080f502d
 801c3b8:	080f5024 	.word	0x080f5024
 801c3bc:	0802c9e3 	.word	0x0802c9e3
 801c3c0:	3ff80000 	.word	0x3ff80000
 801c3c4:	080f5068 	.word	0x080f5068
 801c3c8:	080f5040 	.word	0x080f5040
 801c3cc:	2601      	movs	r6, #1
 801c3ce:	2300      	movs	r3, #0
 801c3d0:	9307      	str	r3, [sp, #28]
 801c3d2:	9609      	str	r6, [sp, #36]	; 0x24
 801c3d4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801c3d8:	9304      	str	r3, [sp, #16]
 801c3da:	9303      	str	r3, [sp, #12]
 801c3dc:	2200      	movs	r2, #0
 801c3de:	2312      	movs	r3, #18
 801c3e0:	920a      	str	r2, [sp, #40]	; 0x28
 801c3e2:	e789      	b.n	801c2f8 <_dtoa_r+0x250>
 801c3e4:	2301      	movs	r3, #1
 801c3e6:	9309      	str	r3, [sp, #36]	; 0x24
 801c3e8:	e7f4      	b.n	801c3d4 <_dtoa_r+0x32c>
 801c3ea:	2301      	movs	r3, #1
 801c3ec:	9304      	str	r3, [sp, #16]
 801c3ee:	9303      	str	r3, [sp, #12]
 801c3f0:	461a      	mov	r2, r3
 801c3f2:	e7f5      	b.n	801c3e0 <_dtoa_r+0x338>
 801c3f4:	686a      	ldr	r2, [r5, #4]
 801c3f6:	3201      	adds	r2, #1
 801c3f8:	606a      	str	r2, [r5, #4]
 801c3fa:	0049      	lsls	r1, r1, #1
 801c3fc:	e780      	b.n	801c300 <_dtoa_r+0x258>
 801c3fe:	2502      	movs	r5, #2
 801c400:	e7af      	b.n	801c362 <_dtoa_r+0x2ba>
 801c402:	07f1      	lsls	r1, r6, #31
 801c404:	d508      	bpl.n	801c418 <_dtoa_r+0x370>
 801c406:	4640      	mov	r0, r8
 801c408:	4649      	mov	r1, r9
 801c40a:	e9d7 2300 	ldrd	r2, r3, [r7]
 801c40e:	f7e4 f8ef 	bl	80005f0 <__aeabi_dmul>
 801c412:	3501      	adds	r5, #1
 801c414:	4680      	mov	r8, r0
 801c416:	4689      	mov	r9, r1
 801c418:	1076      	asrs	r6, r6, #1
 801c41a:	3708      	adds	r7, #8
 801c41c:	e7a2      	b.n	801c364 <_dtoa_r+0x2bc>
 801c41e:	f000 809d 	beq.w	801c55c <_dtoa_r+0x4b4>
 801c422:	f1cb 0600 	rsb	r6, fp, #0
 801c426:	4b9f      	ldr	r3, [pc, #636]	; (801c6a4 <_dtoa_r+0x5fc>)
 801c428:	4f9f      	ldr	r7, [pc, #636]	; (801c6a8 <_dtoa_r+0x600>)
 801c42a:	f006 020f 	and.w	r2, r6, #15
 801c42e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801c432:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c436:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 801c43a:	f7e4 f8d9 	bl	80005f0 <__aeabi_dmul>
 801c43e:	e9cd 0100 	strd	r0, r1, [sp]
 801c442:	1136      	asrs	r6, r6, #4
 801c444:	2300      	movs	r3, #0
 801c446:	2502      	movs	r5, #2
 801c448:	2e00      	cmp	r6, #0
 801c44a:	d17c      	bne.n	801c546 <_dtoa_r+0x49e>
 801c44c:	2b00      	cmp	r3, #0
 801c44e:	d191      	bne.n	801c374 <_dtoa_r+0x2cc>
 801c450:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801c452:	2b00      	cmp	r3, #0
 801c454:	f000 8084 	beq.w	801c560 <_dtoa_r+0x4b8>
 801c458:	e9dd 8900 	ldrd	r8, r9, [sp]
 801c45c:	2200      	movs	r2, #0
 801c45e:	4b93      	ldr	r3, [pc, #588]	; (801c6ac <_dtoa_r+0x604>)
 801c460:	4640      	mov	r0, r8
 801c462:	4649      	mov	r1, r9
 801c464:	f7e4 fb36 	bl	8000ad4 <__aeabi_dcmplt>
 801c468:	2800      	cmp	r0, #0
 801c46a:	d079      	beq.n	801c560 <_dtoa_r+0x4b8>
 801c46c:	9b03      	ldr	r3, [sp, #12]
 801c46e:	2b00      	cmp	r3, #0
 801c470:	d076      	beq.n	801c560 <_dtoa_r+0x4b8>
 801c472:	9b04      	ldr	r3, [sp, #16]
 801c474:	2b00      	cmp	r3, #0
 801c476:	dd34      	ble.n	801c4e2 <_dtoa_r+0x43a>
 801c478:	2200      	movs	r2, #0
 801c47a:	4b8d      	ldr	r3, [pc, #564]	; (801c6b0 <_dtoa_r+0x608>)
 801c47c:	4640      	mov	r0, r8
 801c47e:	4649      	mov	r1, r9
 801c480:	f7e4 f8b6 	bl	80005f0 <__aeabi_dmul>
 801c484:	e9cd 0100 	strd	r0, r1, [sp]
 801c488:	9e04      	ldr	r6, [sp, #16]
 801c48a:	f10b 37ff 	add.w	r7, fp, #4294967295	; 0xffffffff
 801c48e:	3501      	adds	r5, #1
 801c490:	4628      	mov	r0, r5
 801c492:	f7e4 f847 	bl	8000524 <__aeabi_i2d>
 801c496:	e9dd 2300 	ldrd	r2, r3, [sp]
 801c49a:	f7e4 f8a9 	bl	80005f0 <__aeabi_dmul>
 801c49e:	2200      	movs	r2, #0
 801c4a0:	4b84      	ldr	r3, [pc, #528]	; (801c6b4 <_dtoa_r+0x60c>)
 801c4a2:	f7e3 fef3 	bl	800028c <__adddf3>
 801c4a6:	4680      	mov	r8, r0
 801c4a8:	f1a1 7950 	sub.w	r9, r1, #54525952	; 0x3400000
 801c4ac:	2e00      	cmp	r6, #0
 801c4ae:	d15a      	bne.n	801c566 <_dtoa_r+0x4be>
 801c4b0:	2200      	movs	r2, #0
 801c4b2:	4b81      	ldr	r3, [pc, #516]	; (801c6b8 <_dtoa_r+0x610>)
 801c4b4:	e9dd 0100 	ldrd	r0, r1, [sp]
 801c4b8:	f7e3 fee6 	bl	8000288 <__aeabi_dsub>
 801c4bc:	4642      	mov	r2, r8
 801c4be:	464b      	mov	r3, r9
 801c4c0:	e9cd 0100 	strd	r0, r1, [sp]
 801c4c4:	f7e4 fb24 	bl	8000b10 <__aeabi_dcmpgt>
 801c4c8:	2800      	cmp	r0, #0
 801c4ca:	f040 829b 	bne.w	801ca04 <_dtoa_r+0x95c>
 801c4ce:	4642      	mov	r2, r8
 801c4d0:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 801c4d4:	e9dd 0100 	ldrd	r0, r1, [sp]
 801c4d8:	f7e4 fafc 	bl	8000ad4 <__aeabi_dcmplt>
 801c4dc:	2800      	cmp	r0, #0
 801c4de:	f040 828f 	bne.w	801ca00 <_dtoa_r+0x958>
 801c4e2:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 801c4e6:	e9cd 2300 	strd	r2, r3, [sp]
 801c4ea:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801c4ec:	2b00      	cmp	r3, #0
 801c4ee:	f2c0 8150 	blt.w	801c792 <_dtoa_r+0x6ea>
 801c4f2:	f1bb 0f0e 	cmp.w	fp, #14
 801c4f6:	f300 814c 	bgt.w	801c792 <_dtoa_r+0x6ea>
 801c4fa:	4b6a      	ldr	r3, [pc, #424]	; (801c6a4 <_dtoa_r+0x5fc>)
 801c4fc:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 801c500:	e9d3 8900 	ldrd	r8, r9, [r3]
 801c504:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801c506:	2b00      	cmp	r3, #0
 801c508:	f280 80da 	bge.w	801c6c0 <_dtoa_r+0x618>
 801c50c:	9b03      	ldr	r3, [sp, #12]
 801c50e:	2b00      	cmp	r3, #0
 801c510:	f300 80d6 	bgt.w	801c6c0 <_dtoa_r+0x618>
 801c514:	f040 8273 	bne.w	801c9fe <_dtoa_r+0x956>
 801c518:	2200      	movs	r2, #0
 801c51a:	4b67      	ldr	r3, [pc, #412]	; (801c6b8 <_dtoa_r+0x610>)
 801c51c:	4640      	mov	r0, r8
 801c51e:	4649      	mov	r1, r9
 801c520:	f7e4 f866 	bl	80005f0 <__aeabi_dmul>
 801c524:	e9dd 2300 	ldrd	r2, r3, [sp]
 801c528:	f7e4 fae8 	bl	8000afc <__aeabi_dcmpge>
 801c52c:	9e03      	ldr	r6, [sp, #12]
 801c52e:	4637      	mov	r7, r6
 801c530:	2800      	cmp	r0, #0
 801c532:	f040 824a 	bne.w	801c9ca <_dtoa_r+0x922>
 801c536:	9b02      	ldr	r3, [sp, #8]
 801c538:	9a02      	ldr	r2, [sp, #8]
 801c53a:	1c5d      	adds	r5, r3, #1
 801c53c:	2331      	movs	r3, #49	; 0x31
 801c53e:	7013      	strb	r3, [r2, #0]
 801c540:	f10b 0b01 	add.w	fp, fp, #1
 801c544:	e245      	b.n	801c9d2 <_dtoa_r+0x92a>
 801c546:	07f2      	lsls	r2, r6, #31
 801c548:	d505      	bpl.n	801c556 <_dtoa_r+0x4ae>
 801c54a:	e9d7 2300 	ldrd	r2, r3, [r7]
 801c54e:	f7e4 f84f 	bl	80005f0 <__aeabi_dmul>
 801c552:	3501      	adds	r5, #1
 801c554:	2301      	movs	r3, #1
 801c556:	1076      	asrs	r6, r6, #1
 801c558:	3708      	adds	r7, #8
 801c55a:	e775      	b.n	801c448 <_dtoa_r+0x3a0>
 801c55c:	2502      	movs	r5, #2
 801c55e:	e777      	b.n	801c450 <_dtoa_r+0x3a8>
 801c560:	465f      	mov	r7, fp
 801c562:	9e03      	ldr	r6, [sp, #12]
 801c564:	e794      	b.n	801c490 <_dtoa_r+0x3e8>
 801c566:	9a02      	ldr	r2, [sp, #8]
 801c568:	4b4e      	ldr	r3, [pc, #312]	; (801c6a4 <_dtoa_r+0x5fc>)
 801c56a:	4432      	add	r2, r6
 801c56c:	9213      	str	r2, [sp, #76]	; 0x4c
 801c56e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801c570:	1e71      	subs	r1, r6, #1
 801c572:	2a00      	cmp	r2, #0
 801c574:	d048      	beq.n	801c608 <_dtoa_r+0x560>
 801c576:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 801c57a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c57e:	2000      	movs	r0, #0
 801c580:	494e      	ldr	r1, [pc, #312]	; (801c6bc <_dtoa_r+0x614>)
 801c582:	f7e4 f95f 	bl	8000844 <__aeabi_ddiv>
 801c586:	4642      	mov	r2, r8
 801c588:	464b      	mov	r3, r9
 801c58a:	f7e3 fe7d 	bl	8000288 <__aeabi_dsub>
 801c58e:	9d02      	ldr	r5, [sp, #8]
 801c590:	4680      	mov	r8, r0
 801c592:	4689      	mov	r9, r1
 801c594:	e9dd 0100 	ldrd	r0, r1, [sp]
 801c598:	f7e4 fada 	bl	8000b50 <__aeabi_d2iz>
 801c59c:	4606      	mov	r6, r0
 801c59e:	f7e3 ffc1 	bl	8000524 <__aeabi_i2d>
 801c5a2:	4602      	mov	r2, r0
 801c5a4:	460b      	mov	r3, r1
 801c5a6:	e9dd 0100 	ldrd	r0, r1, [sp]
 801c5aa:	f7e3 fe6d 	bl	8000288 <__aeabi_dsub>
 801c5ae:	3630      	adds	r6, #48	; 0x30
 801c5b0:	f805 6b01 	strb.w	r6, [r5], #1
 801c5b4:	4642      	mov	r2, r8
 801c5b6:	464b      	mov	r3, r9
 801c5b8:	e9cd 0100 	strd	r0, r1, [sp]
 801c5bc:	f7e4 fa8a 	bl	8000ad4 <__aeabi_dcmplt>
 801c5c0:	2800      	cmp	r0, #0
 801c5c2:	d165      	bne.n	801c690 <_dtoa_r+0x5e8>
 801c5c4:	e9dd 2300 	ldrd	r2, r3, [sp]
 801c5c8:	2000      	movs	r0, #0
 801c5ca:	4938      	ldr	r1, [pc, #224]	; (801c6ac <_dtoa_r+0x604>)
 801c5cc:	f7e3 fe5c 	bl	8000288 <__aeabi_dsub>
 801c5d0:	4642      	mov	r2, r8
 801c5d2:	464b      	mov	r3, r9
 801c5d4:	f7e4 fa7e 	bl	8000ad4 <__aeabi_dcmplt>
 801c5d8:	2800      	cmp	r0, #0
 801c5da:	f040 80ba 	bne.w	801c752 <_dtoa_r+0x6aa>
 801c5de:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801c5e0:	429d      	cmp	r5, r3
 801c5e2:	f43f af7e 	beq.w	801c4e2 <_dtoa_r+0x43a>
 801c5e6:	2200      	movs	r2, #0
 801c5e8:	4b31      	ldr	r3, [pc, #196]	; (801c6b0 <_dtoa_r+0x608>)
 801c5ea:	4640      	mov	r0, r8
 801c5ec:	4649      	mov	r1, r9
 801c5ee:	f7e3 ffff 	bl	80005f0 <__aeabi_dmul>
 801c5f2:	2200      	movs	r2, #0
 801c5f4:	4680      	mov	r8, r0
 801c5f6:	4689      	mov	r9, r1
 801c5f8:	4b2d      	ldr	r3, [pc, #180]	; (801c6b0 <_dtoa_r+0x608>)
 801c5fa:	e9dd 0100 	ldrd	r0, r1, [sp]
 801c5fe:	f7e3 fff7 	bl	80005f0 <__aeabi_dmul>
 801c602:	e9cd 0100 	strd	r0, r1, [sp]
 801c606:	e7c5      	b.n	801c594 <_dtoa_r+0x4ec>
 801c608:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
 801c60c:	4642      	mov	r2, r8
 801c60e:	464b      	mov	r3, r9
 801c610:	e9d1 0100 	ldrd	r0, r1, [r1]
 801c614:	f7e3 ffec 	bl	80005f0 <__aeabi_dmul>
 801c618:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 801c61c:	9d02      	ldr	r5, [sp, #8]
 801c61e:	e9dd 0100 	ldrd	r0, r1, [sp]
 801c622:	f7e4 fa95 	bl	8000b50 <__aeabi_d2iz>
 801c626:	4606      	mov	r6, r0
 801c628:	f7e3 ff7c 	bl	8000524 <__aeabi_i2d>
 801c62c:	3630      	adds	r6, #48	; 0x30
 801c62e:	4602      	mov	r2, r0
 801c630:	460b      	mov	r3, r1
 801c632:	e9dd 0100 	ldrd	r0, r1, [sp]
 801c636:	f7e3 fe27 	bl	8000288 <__aeabi_dsub>
 801c63a:	f805 6b01 	strb.w	r6, [r5], #1
 801c63e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801c640:	42ab      	cmp	r3, r5
 801c642:	4680      	mov	r8, r0
 801c644:	4689      	mov	r9, r1
 801c646:	f04f 0200 	mov.w	r2, #0
 801c64a:	d125      	bne.n	801c698 <_dtoa_r+0x5f0>
 801c64c:	4b1b      	ldr	r3, [pc, #108]	; (801c6bc <_dtoa_r+0x614>)
 801c64e:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 801c652:	f7e3 fe1b 	bl	800028c <__adddf3>
 801c656:	4602      	mov	r2, r0
 801c658:	460b      	mov	r3, r1
 801c65a:	4640      	mov	r0, r8
 801c65c:	4649      	mov	r1, r9
 801c65e:	f7e4 fa57 	bl	8000b10 <__aeabi_dcmpgt>
 801c662:	2800      	cmp	r0, #0
 801c664:	d175      	bne.n	801c752 <_dtoa_r+0x6aa>
 801c666:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 801c66a:	2000      	movs	r0, #0
 801c66c:	4913      	ldr	r1, [pc, #76]	; (801c6bc <_dtoa_r+0x614>)
 801c66e:	f7e3 fe0b 	bl	8000288 <__aeabi_dsub>
 801c672:	4602      	mov	r2, r0
 801c674:	460b      	mov	r3, r1
 801c676:	4640      	mov	r0, r8
 801c678:	4649      	mov	r1, r9
 801c67a:	f7e4 fa2b 	bl	8000ad4 <__aeabi_dcmplt>
 801c67e:	2800      	cmp	r0, #0
 801c680:	f43f af2f 	beq.w	801c4e2 <_dtoa_r+0x43a>
 801c684:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 801c688:	2b30      	cmp	r3, #48	; 0x30
 801c68a:	f105 32ff 	add.w	r2, r5, #4294967295	; 0xffffffff
 801c68e:	d001      	beq.n	801c694 <_dtoa_r+0x5ec>
 801c690:	46bb      	mov	fp, r7
 801c692:	e04d      	b.n	801c730 <_dtoa_r+0x688>
 801c694:	4615      	mov	r5, r2
 801c696:	e7f5      	b.n	801c684 <_dtoa_r+0x5dc>
 801c698:	4b05      	ldr	r3, [pc, #20]	; (801c6b0 <_dtoa_r+0x608>)
 801c69a:	f7e3 ffa9 	bl	80005f0 <__aeabi_dmul>
 801c69e:	e9cd 0100 	strd	r0, r1, [sp]
 801c6a2:	e7bc      	b.n	801c61e <_dtoa_r+0x576>
 801c6a4:	080f5068 	.word	0x080f5068
 801c6a8:	080f5040 	.word	0x080f5040
 801c6ac:	3ff00000 	.word	0x3ff00000
 801c6b0:	40240000 	.word	0x40240000
 801c6b4:	401c0000 	.word	0x401c0000
 801c6b8:	40140000 	.word	0x40140000
 801c6bc:	3fe00000 	.word	0x3fe00000
 801c6c0:	e9dd 6700 	ldrd	r6, r7, [sp]
 801c6c4:	9d02      	ldr	r5, [sp, #8]
 801c6c6:	4642      	mov	r2, r8
 801c6c8:	464b      	mov	r3, r9
 801c6ca:	4630      	mov	r0, r6
 801c6cc:	4639      	mov	r1, r7
 801c6ce:	f7e4 f8b9 	bl	8000844 <__aeabi_ddiv>
 801c6d2:	f7e4 fa3d 	bl	8000b50 <__aeabi_d2iz>
 801c6d6:	9000      	str	r0, [sp, #0]
 801c6d8:	f7e3 ff24 	bl	8000524 <__aeabi_i2d>
 801c6dc:	4642      	mov	r2, r8
 801c6de:	464b      	mov	r3, r9
 801c6e0:	f7e3 ff86 	bl	80005f0 <__aeabi_dmul>
 801c6e4:	4602      	mov	r2, r0
 801c6e6:	460b      	mov	r3, r1
 801c6e8:	4630      	mov	r0, r6
 801c6ea:	4639      	mov	r1, r7
 801c6ec:	f7e3 fdcc 	bl	8000288 <__aeabi_dsub>
 801c6f0:	9e00      	ldr	r6, [sp, #0]
 801c6f2:	9f03      	ldr	r7, [sp, #12]
 801c6f4:	3630      	adds	r6, #48	; 0x30
 801c6f6:	f805 6b01 	strb.w	r6, [r5], #1
 801c6fa:	9e02      	ldr	r6, [sp, #8]
 801c6fc:	1bae      	subs	r6, r5, r6
 801c6fe:	42b7      	cmp	r7, r6
 801c700:	4602      	mov	r2, r0
 801c702:	460b      	mov	r3, r1
 801c704:	d138      	bne.n	801c778 <_dtoa_r+0x6d0>
 801c706:	f7e3 fdc1 	bl	800028c <__adddf3>
 801c70a:	4606      	mov	r6, r0
 801c70c:	460f      	mov	r7, r1
 801c70e:	4602      	mov	r2, r0
 801c710:	460b      	mov	r3, r1
 801c712:	4640      	mov	r0, r8
 801c714:	4649      	mov	r1, r9
 801c716:	f7e4 f9dd 	bl	8000ad4 <__aeabi_dcmplt>
 801c71a:	b9c8      	cbnz	r0, 801c750 <_dtoa_r+0x6a8>
 801c71c:	4632      	mov	r2, r6
 801c71e:	463b      	mov	r3, r7
 801c720:	4640      	mov	r0, r8
 801c722:	4649      	mov	r1, r9
 801c724:	f7e4 f9cc 	bl	8000ac0 <__aeabi_dcmpeq>
 801c728:	b110      	cbz	r0, 801c730 <_dtoa_r+0x688>
 801c72a:	9b00      	ldr	r3, [sp, #0]
 801c72c:	07db      	lsls	r3, r3, #31
 801c72e:	d40f      	bmi.n	801c750 <_dtoa_r+0x6a8>
 801c730:	4651      	mov	r1, sl
 801c732:	4620      	mov	r0, r4
 801c734:	f000 fbfa 	bl	801cf2c <_Bfree>
 801c738:	2300      	movs	r3, #0
 801c73a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801c73c:	702b      	strb	r3, [r5, #0]
 801c73e:	f10b 0301 	add.w	r3, fp, #1
 801c742:	6013      	str	r3, [r2, #0]
 801c744:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801c746:	2b00      	cmp	r3, #0
 801c748:	f43f acf8 	beq.w	801c13c <_dtoa_r+0x94>
 801c74c:	601d      	str	r5, [r3, #0]
 801c74e:	e4f5      	b.n	801c13c <_dtoa_r+0x94>
 801c750:	465f      	mov	r7, fp
 801c752:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 801c756:	2a39      	cmp	r2, #57	; 0x39
 801c758:	f105 33ff 	add.w	r3, r5, #4294967295	; 0xffffffff
 801c75c:	d106      	bne.n	801c76c <_dtoa_r+0x6c4>
 801c75e:	9a02      	ldr	r2, [sp, #8]
 801c760:	429a      	cmp	r2, r3
 801c762:	d107      	bne.n	801c774 <_dtoa_r+0x6cc>
 801c764:	2330      	movs	r3, #48	; 0x30
 801c766:	7013      	strb	r3, [r2, #0]
 801c768:	3701      	adds	r7, #1
 801c76a:	4613      	mov	r3, r2
 801c76c:	781a      	ldrb	r2, [r3, #0]
 801c76e:	3201      	adds	r2, #1
 801c770:	701a      	strb	r2, [r3, #0]
 801c772:	e78d      	b.n	801c690 <_dtoa_r+0x5e8>
 801c774:	461d      	mov	r5, r3
 801c776:	e7ec      	b.n	801c752 <_dtoa_r+0x6aa>
 801c778:	2200      	movs	r2, #0
 801c77a:	4ba4      	ldr	r3, [pc, #656]	; (801ca0c <_dtoa_r+0x964>)
 801c77c:	f7e3 ff38 	bl	80005f0 <__aeabi_dmul>
 801c780:	2200      	movs	r2, #0
 801c782:	2300      	movs	r3, #0
 801c784:	4606      	mov	r6, r0
 801c786:	460f      	mov	r7, r1
 801c788:	f7e4 f99a 	bl	8000ac0 <__aeabi_dcmpeq>
 801c78c:	2800      	cmp	r0, #0
 801c78e:	d09a      	beq.n	801c6c6 <_dtoa_r+0x61e>
 801c790:	e7ce      	b.n	801c730 <_dtoa_r+0x688>
 801c792:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801c794:	2a00      	cmp	r2, #0
 801c796:	f000 80cd 	beq.w	801c934 <_dtoa_r+0x88c>
 801c79a:	9a07      	ldr	r2, [sp, #28]
 801c79c:	2a01      	cmp	r2, #1
 801c79e:	f300 80af 	bgt.w	801c900 <_dtoa_r+0x858>
 801c7a2:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801c7a4:	2a00      	cmp	r2, #0
 801c7a6:	f000 80a7 	beq.w	801c8f8 <_dtoa_r+0x850>
 801c7aa:	f203 4333 	addw	r3, r3, #1075	; 0x433
 801c7ae:	9e08      	ldr	r6, [sp, #32]
 801c7b0:	9d05      	ldr	r5, [sp, #20]
 801c7b2:	9a05      	ldr	r2, [sp, #20]
 801c7b4:	441a      	add	r2, r3
 801c7b6:	9205      	str	r2, [sp, #20]
 801c7b8:	9a06      	ldr	r2, [sp, #24]
 801c7ba:	2101      	movs	r1, #1
 801c7bc:	441a      	add	r2, r3
 801c7be:	4620      	mov	r0, r4
 801c7c0:	9206      	str	r2, [sp, #24]
 801c7c2:	f000 fc53 	bl	801d06c <__i2b>
 801c7c6:	4607      	mov	r7, r0
 801c7c8:	2d00      	cmp	r5, #0
 801c7ca:	dd0c      	ble.n	801c7e6 <_dtoa_r+0x73e>
 801c7cc:	9b06      	ldr	r3, [sp, #24]
 801c7ce:	2b00      	cmp	r3, #0
 801c7d0:	dd09      	ble.n	801c7e6 <_dtoa_r+0x73e>
 801c7d2:	42ab      	cmp	r3, r5
 801c7d4:	9a05      	ldr	r2, [sp, #20]
 801c7d6:	bfa8      	it	ge
 801c7d8:	462b      	movge	r3, r5
 801c7da:	1ad2      	subs	r2, r2, r3
 801c7dc:	9205      	str	r2, [sp, #20]
 801c7de:	9a06      	ldr	r2, [sp, #24]
 801c7e0:	1aed      	subs	r5, r5, r3
 801c7e2:	1ad3      	subs	r3, r2, r3
 801c7e4:	9306      	str	r3, [sp, #24]
 801c7e6:	9b08      	ldr	r3, [sp, #32]
 801c7e8:	b1f3      	cbz	r3, 801c828 <_dtoa_r+0x780>
 801c7ea:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801c7ec:	2b00      	cmp	r3, #0
 801c7ee:	f000 80a5 	beq.w	801c93c <_dtoa_r+0x894>
 801c7f2:	2e00      	cmp	r6, #0
 801c7f4:	dd10      	ble.n	801c818 <_dtoa_r+0x770>
 801c7f6:	4639      	mov	r1, r7
 801c7f8:	4632      	mov	r2, r6
 801c7fa:	4620      	mov	r0, r4
 801c7fc:	f000 fccc 	bl	801d198 <__pow5mult>
 801c800:	4652      	mov	r2, sl
 801c802:	4601      	mov	r1, r0
 801c804:	4607      	mov	r7, r0
 801c806:	4620      	mov	r0, r4
 801c808:	f000 fc39 	bl	801d07e <__multiply>
 801c80c:	4651      	mov	r1, sl
 801c80e:	4680      	mov	r8, r0
 801c810:	4620      	mov	r0, r4
 801c812:	f000 fb8b 	bl	801cf2c <_Bfree>
 801c816:	46c2      	mov	sl, r8
 801c818:	9b08      	ldr	r3, [sp, #32]
 801c81a:	1b9a      	subs	r2, r3, r6
 801c81c:	d004      	beq.n	801c828 <_dtoa_r+0x780>
 801c81e:	4651      	mov	r1, sl
 801c820:	4620      	mov	r0, r4
 801c822:	f000 fcb9 	bl	801d198 <__pow5mult>
 801c826:	4682      	mov	sl, r0
 801c828:	2101      	movs	r1, #1
 801c82a:	4620      	mov	r0, r4
 801c82c:	f000 fc1e 	bl	801d06c <__i2b>
 801c830:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801c832:	2b00      	cmp	r3, #0
 801c834:	4606      	mov	r6, r0
 801c836:	f340 8083 	ble.w	801c940 <_dtoa_r+0x898>
 801c83a:	461a      	mov	r2, r3
 801c83c:	4601      	mov	r1, r0
 801c83e:	4620      	mov	r0, r4
 801c840:	f000 fcaa 	bl	801d198 <__pow5mult>
 801c844:	9b07      	ldr	r3, [sp, #28]
 801c846:	2b01      	cmp	r3, #1
 801c848:	4606      	mov	r6, r0
 801c84a:	dd7c      	ble.n	801c946 <_dtoa_r+0x89e>
 801c84c:	f04f 0800 	mov.w	r8, #0
 801c850:	6933      	ldr	r3, [r6, #16]
 801c852:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 801c856:	6918      	ldr	r0, [r3, #16]
 801c858:	f000 fbba 	bl	801cfd0 <__hi0bits>
 801c85c:	f1c0 0020 	rsb	r0, r0, #32
 801c860:	9b06      	ldr	r3, [sp, #24]
 801c862:	4418      	add	r0, r3
 801c864:	f010 001f 	ands.w	r0, r0, #31
 801c868:	f000 8096 	beq.w	801c998 <_dtoa_r+0x8f0>
 801c86c:	f1c0 0320 	rsb	r3, r0, #32
 801c870:	2b04      	cmp	r3, #4
 801c872:	f340 8087 	ble.w	801c984 <_dtoa_r+0x8dc>
 801c876:	9b05      	ldr	r3, [sp, #20]
 801c878:	f1c0 001c 	rsb	r0, r0, #28
 801c87c:	4403      	add	r3, r0
 801c87e:	9305      	str	r3, [sp, #20]
 801c880:	9b06      	ldr	r3, [sp, #24]
 801c882:	4405      	add	r5, r0
 801c884:	4403      	add	r3, r0
 801c886:	9306      	str	r3, [sp, #24]
 801c888:	9b05      	ldr	r3, [sp, #20]
 801c88a:	2b00      	cmp	r3, #0
 801c88c:	dd05      	ble.n	801c89a <_dtoa_r+0x7f2>
 801c88e:	4651      	mov	r1, sl
 801c890:	461a      	mov	r2, r3
 801c892:	4620      	mov	r0, r4
 801c894:	f000 fcce 	bl	801d234 <__lshift>
 801c898:	4682      	mov	sl, r0
 801c89a:	9b06      	ldr	r3, [sp, #24]
 801c89c:	2b00      	cmp	r3, #0
 801c89e:	dd05      	ble.n	801c8ac <_dtoa_r+0x804>
 801c8a0:	4631      	mov	r1, r6
 801c8a2:	461a      	mov	r2, r3
 801c8a4:	4620      	mov	r0, r4
 801c8a6:	f000 fcc5 	bl	801d234 <__lshift>
 801c8aa:	4606      	mov	r6, r0
 801c8ac:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801c8ae:	2b00      	cmp	r3, #0
 801c8b0:	d074      	beq.n	801c99c <_dtoa_r+0x8f4>
 801c8b2:	4631      	mov	r1, r6
 801c8b4:	4650      	mov	r0, sl
 801c8b6:	f000 fd0e 	bl	801d2d6 <__mcmp>
 801c8ba:	2800      	cmp	r0, #0
 801c8bc:	da6e      	bge.n	801c99c <_dtoa_r+0x8f4>
 801c8be:	2300      	movs	r3, #0
 801c8c0:	4651      	mov	r1, sl
 801c8c2:	220a      	movs	r2, #10
 801c8c4:	4620      	mov	r0, r4
 801c8c6:	f000 fb48 	bl	801cf5a <__multadd>
 801c8ca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801c8cc:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 801c8d0:	4682      	mov	sl, r0
 801c8d2:	2b00      	cmp	r3, #0
 801c8d4:	f000 81a8 	beq.w	801cc28 <_dtoa_r+0xb80>
 801c8d8:	2300      	movs	r3, #0
 801c8da:	4639      	mov	r1, r7
 801c8dc:	220a      	movs	r2, #10
 801c8de:	4620      	mov	r0, r4
 801c8e0:	f000 fb3b 	bl	801cf5a <__multadd>
 801c8e4:	9b04      	ldr	r3, [sp, #16]
 801c8e6:	2b00      	cmp	r3, #0
 801c8e8:	4607      	mov	r7, r0
 801c8ea:	f300 80c8 	bgt.w	801ca7e <_dtoa_r+0x9d6>
 801c8ee:	9b07      	ldr	r3, [sp, #28]
 801c8f0:	2b02      	cmp	r3, #2
 801c8f2:	f340 80c4 	ble.w	801ca7e <_dtoa_r+0x9d6>
 801c8f6:	e059      	b.n	801c9ac <_dtoa_r+0x904>
 801c8f8:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801c8fa:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 801c8fe:	e756      	b.n	801c7ae <_dtoa_r+0x706>
 801c900:	9b03      	ldr	r3, [sp, #12]
 801c902:	1e5e      	subs	r6, r3, #1
 801c904:	9b08      	ldr	r3, [sp, #32]
 801c906:	42b3      	cmp	r3, r6
 801c908:	bfbf      	itttt	lt
 801c90a:	9b08      	ldrlt	r3, [sp, #32]
 801c90c:	9608      	strlt	r6, [sp, #32]
 801c90e:	1af2      	sublt	r2, r6, r3
 801c910:	9b0b      	ldrlt	r3, [sp, #44]	; 0x2c
 801c912:	bfb6      	itet	lt
 801c914:	189b      	addlt	r3, r3, r2
 801c916:	1b9e      	subge	r6, r3, r6
 801c918:	930b      	strlt	r3, [sp, #44]	; 0x2c
 801c91a:	9b03      	ldr	r3, [sp, #12]
 801c91c:	bfb8      	it	lt
 801c91e:	2600      	movlt	r6, #0
 801c920:	2b00      	cmp	r3, #0
 801c922:	bfb9      	ittee	lt
 801c924:	9b05      	ldrlt	r3, [sp, #20]
 801c926:	9a03      	ldrlt	r2, [sp, #12]
 801c928:	9d05      	ldrge	r5, [sp, #20]
 801c92a:	9b03      	ldrge	r3, [sp, #12]
 801c92c:	bfbc      	itt	lt
 801c92e:	1a9d      	sublt	r5, r3, r2
 801c930:	2300      	movlt	r3, #0
 801c932:	e73e      	b.n	801c7b2 <_dtoa_r+0x70a>
 801c934:	9e08      	ldr	r6, [sp, #32]
 801c936:	9d05      	ldr	r5, [sp, #20]
 801c938:	9f09      	ldr	r7, [sp, #36]	; 0x24
 801c93a:	e745      	b.n	801c7c8 <_dtoa_r+0x720>
 801c93c:	9a08      	ldr	r2, [sp, #32]
 801c93e:	e76e      	b.n	801c81e <_dtoa_r+0x776>
 801c940:	9b07      	ldr	r3, [sp, #28]
 801c942:	2b01      	cmp	r3, #1
 801c944:	dc19      	bgt.n	801c97a <_dtoa_r+0x8d2>
 801c946:	9b00      	ldr	r3, [sp, #0]
 801c948:	b9bb      	cbnz	r3, 801c97a <_dtoa_r+0x8d2>
 801c94a:	9b01      	ldr	r3, [sp, #4]
 801c94c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801c950:	b99b      	cbnz	r3, 801c97a <_dtoa_r+0x8d2>
 801c952:	9b01      	ldr	r3, [sp, #4]
 801c954:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 801c958:	0d1b      	lsrs	r3, r3, #20
 801c95a:	051b      	lsls	r3, r3, #20
 801c95c:	b183      	cbz	r3, 801c980 <_dtoa_r+0x8d8>
 801c95e:	9b05      	ldr	r3, [sp, #20]
 801c960:	3301      	adds	r3, #1
 801c962:	9305      	str	r3, [sp, #20]
 801c964:	9b06      	ldr	r3, [sp, #24]
 801c966:	3301      	adds	r3, #1
 801c968:	9306      	str	r3, [sp, #24]
 801c96a:	f04f 0801 	mov.w	r8, #1
 801c96e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801c970:	2b00      	cmp	r3, #0
 801c972:	f47f af6d 	bne.w	801c850 <_dtoa_r+0x7a8>
 801c976:	2001      	movs	r0, #1
 801c978:	e772      	b.n	801c860 <_dtoa_r+0x7b8>
 801c97a:	f04f 0800 	mov.w	r8, #0
 801c97e:	e7f6      	b.n	801c96e <_dtoa_r+0x8c6>
 801c980:	4698      	mov	r8, r3
 801c982:	e7f4      	b.n	801c96e <_dtoa_r+0x8c6>
 801c984:	d080      	beq.n	801c888 <_dtoa_r+0x7e0>
 801c986:	9a05      	ldr	r2, [sp, #20]
 801c988:	331c      	adds	r3, #28
 801c98a:	441a      	add	r2, r3
 801c98c:	9205      	str	r2, [sp, #20]
 801c98e:	9a06      	ldr	r2, [sp, #24]
 801c990:	441a      	add	r2, r3
 801c992:	441d      	add	r5, r3
 801c994:	4613      	mov	r3, r2
 801c996:	e776      	b.n	801c886 <_dtoa_r+0x7de>
 801c998:	4603      	mov	r3, r0
 801c99a:	e7f4      	b.n	801c986 <_dtoa_r+0x8de>
 801c99c:	9b03      	ldr	r3, [sp, #12]
 801c99e:	2b00      	cmp	r3, #0
 801c9a0:	dc36      	bgt.n	801ca10 <_dtoa_r+0x968>
 801c9a2:	9b07      	ldr	r3, [sp, #28]
 801c9a4:	2b02      	cmp	r3, #2
 801c9a6:	dd33      	ble.n	801ca10 <_dtoa_r+0x968>
 801c9a8:	9b03      	ldr	r3, [sp, #12]
 801c9aa:	9304      	str	r3, [sp, #16]
 801c9ac:	9b04      	ldr	r3, [sp, #16]
 801c9ae:	b963      	cbnz	r3, 801c9ca <_dtoa_r+0x922>
 801c9b0:	4631      	mov	r1, r6
 801c9b2:	2205      	movs	r2, #5
 801c9b4:	4620      	mov	r0, r4
 801c9b6:	f000 fad0 	bl	801cf5a <__multadd>
 801c9ba:	4601      	mov	r1, r0
 801c9bc:	4606      	mov	r6, r0
 801c9be:	4650      	mov	r0, sl
 801c9c0:	f000 fc89 	bl	801d2d6 <__mcmp>
 801c9c4:	2800      	cmp	r0, #0
 801c9c6:	f73f adb6 	bgt.w	801c536 <_dtoa_r+0x48e>
 801c9ca:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801c9cc:	9d02      	ldr	r5, [sp, #8]
 801c9ce:	ea6f 0b03 	mvn.w	fp, r3
 801c9d2:	2300      	movs	r3, #0
 801c9d4:	9303      	str	r3, [sp, #12]
 801c9d6:	4631      	mov	r1, r6
 801c9d8:	4620      	mov	r0, r4
 801c9da:	f000 faa7 	bl	801cf2c <_Bfree>
 801c9de:	2f00      	cmp	r7, #0
 801c9e0:	f43f aea6 	beq.w	801c730 <_dtoa_r+0x688>
 801c9e4:	9b03      	ldr	r3, [sp, #12]
 801c9e6:	b12b      	cbz	r3, 801c9f4 <_dtoa_r+0x94c>
 801c9e8:	42bb      	cmp	r3, r7
 801c9ea:	d003      	beq.n	801c9f4 <_dtoa_r+0x94c>
 801c9ec:	4619      	mov	r1, r3
 801c9ee:	4620      	mov	r0, r4
 801c9f0:	f000 fa9c 	bl	801cf2c <_Bfree>
 801c9f4:	4639      	mov	r1, r7
 801c9f6:	4620      	mov	r0, r4
 801c9f8:	f000 fa98 	bl	801cf2c <_Bfree>
 801c9fc:	e698      	b.n	801c730 <_dtoa_r+0x688>
 801c9fe:	2600      	movs	r6, #0
 801ca00:	4637      	mov	r7, r6
 801ca02:	e7e2      	b.n	801c9ca <_dtoa_r+0x922>
 801ca04:	46bb      	mov	fp, r7
 801ca06:	4637      	mov	r7, r6
 801ca08:	e595      	b.n	801c536 <_dtoa_r+0x48e>
 801ca0a:	bf00      	nop
 801ca0c:	40240000 	.word	0x40240000
 801ca10:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801ca12:	bb93      	cbnz	r3, 801ca7a <_dtoa_r+0x9d2>
 801ca14:	9b03      	ldr	r3, [sp, #12]
 801ca16:	9304      	str	r3, [sp, #16]
 801ca18:	9d02      	ldr	r5, [sp, #8]
 801ca1a:	4631      	mov	r1, r6
 801ca1c:	4650      	mov	r0, sl
 801ca1e:	f7ff fab5 	bl	801bf8c <quorem>
 801ca22:	f100 0930 	add.w	r9, r0, #48	; 0x30
 801ca26:	f805 9b01 	strb.w	r9, [r5], #1
 801ca2a:	9b02      	ldr	r3, [sp, #8]
 801ca2c:	9a04      	ldr	r2, [sp, #16]
 801ca2e:	1aeb      	subs	r3, r5, r3
 801ca30:	429a      	cmp	r2, r3
 801ca32:	f300 80dc 	bgt.w	801cbee <_dtoa_r+0xb46>
 801ca36:	9b02      	ldr	r3, [sp, #8]
 801ca38:	2a01      	cmp	r2, #1
 801ca3a:	bfac      	ite	ge
 801ca3c:	189b      	addge	r3, r3, r2
 801ca3e:	3301      	addlt	r3, #1
 801ca40:	4698      	mov	r8, r3
 801ca42:	2300      	movs	r3, #0
 801ca44:	9303      	str	r3, [sp, #12]
 801ca46:	4651      	mov	r1, sl
 801ca48:	2201      	movs	r2, #1
 801ca4a:	4620      	mov	r0, r4
 801ca4c:	f000 fbf2 	bl	801d234 <__lshift>
 801ca50:	4631      	mov	r1, r6
 801ca52:	4682      	mov	sl, r0
 801ca54:	f000 fc3f 	bl	801d2d6 <__mcmp>
 801ca58:	2800      	cmp	r0, #0
 801ca5a:	f300 808d 	bgt.w	801cb78 <_dtoa_r+0xad0>
 801ca5e:	d103      	bne.n	801ca68 <_dtoa_r+0x9c0>
 801ca60:	f019 0f01 	tst.w	r9, #1
 801ca64:	f040 8088 	bne.w	801cb78 <_dtoa_r+0xad0>
 801ca68:	4645      	mov	r5, r8
 801ca6a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 801ca6e:	2b30      	cmp	r3, #48	; 0x30
 801ca70:	f105 32ff 	add.w	r2, r5, #4294967295	; 0xffffffff
 801ca74:	d1af      	bne.n	801c9d6 <_dtoa_r+0x92e>
 801ca76:	4615      	mov	r5, r2
 801ca78:	e7f7      	b.n	801ca6a <_dtoa_r+0x9c2>
 801ca7a:	9b03      	ldr	r3, [sp, #12]
 801ca7c:	9304      	str	r3, [sp, #16]
 801ca7e:	2d00      	cmp	r5, #0
 801ca80:	dd05      	ble.n	801ca8e <_dtoa_r+0x9e6>
 801ca82:	4639      	mov	r1, r7
 801ca84:	462a      	mov	r2, r5
 801ca86:	4620      	mov	r0, r4
 801ca88:	f000 fbd4 	bl	801d234 <__lshift>
 801ca8c:	4607      	mov	r7, r0
 801ca8e:	f1b8 0f00 	cmp.w	r8, #0
 801ca92:	d04c      	beq.n	801cb2e <_dtoa_r+0xa86>
 801ca94:	6879      	ldr	r1, [r7, #4]
 801ca96:	4620      	mov	r0, r4
 801ca98:	f000 fa14 	bl	801cec4 <_Balloc>
 801ca9c:	693a      	ldr	r2, [r7, #16]
 801ca9e:	3202      	adds	r2, #2
 801caa0:	4605      	mov	r5, r0
 801caa2:	0092      	lsls	r2, r2, #2
 801caa4:	f107 010c 	add.w	r1, r7, #12
 801caa8:	300c      	adds	r0, #12
 801caaa:	f7fe f985 	bl	801adb8 <memcpy>
 801caae:	2201      	movs	r2, #1
 801cab0:	4629      	mov	r1, r5
 801cab2:	4620      	mov	r0, r4
 801cab4:	f000 fbbe 	bl	801d234 <__lshift>
 801cab8:	9b00      	ldr	r3, [sp, #0]
 801caba:	f8dd 8008 	ldr.w	r8, [sp, #8]
 801cabe:	9703      	str	r7, [sp, #12]
 801cac0:	f003 0301 	and.w	r3, r3, #1
 801cac4:	4607      	mov	r7, r0
 801cac6:	9305      	str	r3, [sp, #20]
 801cac8:	4631      	mov	r1, r6
 801caca:	4650      	mov	r0, sl
 801cacc:	f7ff fa5e 	bl	801bf8c <quorem>
 801cad0:	9903      	ldr	r1, [sp, #12]
 801cad2:	4605      	mov	r5, r0
 801cad4:	f100 0930 	add.w	r9, r0, #48	; 0x30
 801cad8:	4650      	mov	r0, sl
 801cada:	f000 fbfc 	bl	801d2d6 <__mcmp>
 801cade:	463a      	mov	r2, r7
 801cae0:	9000      	str	r0, [sp, #0]
 801cae2:	4631      	mov	r1, r6
 801cae4:	4620      	mov	r0, r4
 801cae6:	f000 fc10 	bl	801d30a <__mdiff>
 801caea:	68c3      	ldr	r3, [r0, #12]
 801caec:	4602      	mov	r2, r0
 801caee:	bb03      	cbnz	r3, 801cb32 <_dtoa_r+0xa8a>
 801caf0:	4601      	mov	r1, r0
 801caf2:	9006      	str	r0, [sp, #24]
 801caf4:	4650      	mov	r0, sl
 801caf6:	f000 fbee 	bl	801d2d6 <__mcmp>
 801cafa:	9a06      	ldr	r2, [sp, #24]
 801cafc:	4603      	mov	r3, r0
 801cafe:	4611      	mov	r1, r2
 801cb00:	4620      	mov	r0, r4
 801cb02:	9306      	str	r3, [sp, #24]
 801cb04:	f000 fa12 	bl	801cf2c <_Bfree>
 801cb08:	9b06      	ldr	r3, [sp, #24]
 801cb0a:	b9a3      	cbnz	r3, 801cb36 <_dtoa_r+0xa8e>
 801cb0c:	9a07      	ldr	r2, [sp, #28]
 801cb0e:	b992      	cbnz	r2, 801cb36 <_dtoa_r+0xa8e>
 801cb10:	9a05      	ldr	r2, [sp, #20]
 801cb12:	b982      	cbnz	r2, 801cb36 <_dtoa_r+0xa8e>
 801cb14:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 801cb18:	d029      	beq.n	801cb6e <_dtoa_r+0xac6>
 801cb1a:	9b00      	ldr	r3, [sp, #0]
 801cb1c:	2b00      	cmp	r3, #0
 801cb1e:	dd01      	ble.n	801cb24 <_dtoa_r+0xa7c>
 801cb20:	f105 0931 	add.w	r9, r5, #49	; 0x31
 801cb24:	f108 0501 	add.w	r5, r8, #1
 801cb28:	f888 9000 	strb.w	r9, [r8]
 801cb2c:	e753      	b.n	801c9d6 <_dtoa_r+0x92e>
 801cb2e:	4638      	mov	r0, r7
 801cb30:	e7c2      	b.n	801cab8 <_dtoa_r+0xa10>
 801cb32:	2301      	movs	r3, #1
 801cb34:	e7e3      	b.n	801cafe <_dtoa_r+0xa56>
 801cb36:	9a00      	ldr	r2, [sp, #0]
 801cb38:	2a00      	cmp	r2, #0
 801cb3a:	db04      	blt.n	801cb46 <_dtoa_r+0xa9e>
 801cb3c:	d125      	bne.n	801cb8a <_dtoa_r+0xae2>
 801cb3e:	9a07      	ldr	r2, [sp, #28]
 801cb40:	bb1a      	cbnz	r2, 801cb8a <_dtoa_r+0xae2>
 801cb42:	9a05      	ldr	r2, [sp, #20]
 801cb44:	bb0a      	cbnz	r2, 801cb8a <_dtoa_r+0xae2>
 801cb46:	2b00      	cmp	r3, #0
 801cb48:	ddec      	ble.n	801cb24 <_dtoa_r+0xa7c>
 801cb4a:	4651      	mov	r1, sl
 801cb4c:	2201      	movs	r2, #1
 801cb4e:	4620      	mov	r0, r4
 801cb50:	f000 fb70 	bl	801d234 <__lshift>
 801cb54:	4631      	mov	r1, r6
 801cb56:	4682      	mov	sl, r0
 801cb58:	f000 fbbd 	bl	801d2d6 <__mcmp>
 801cb5c:	2800      	cmp	r0, #0
 801cb5e:	dc03      	bgt.n	801cb68 <_dtoa_r+0xac0>
 801cb60:	d1e0      	bne.n	801cb24 <_dtoa_r+0xa7c>
 801cb62:	f019 0f01 	tst.w	r9, #1
 801cb66:	d0dd      	beq.n	801cb24 <_dtoa_r+0xa7c>
 801cb68:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 801cb6c:	d1d8      	bne.n	801cb20 <_dtoa_r+0xa78>
 801cb6e:	2339      	movs	r3, #57	; 0x39
 801cb70:	f888 3000 	strb.w	r3, [r8]
 801cb74:	f108 0801 	add.w	r8, r8, #1
 801cb78:	4645      	mov	r5, r8
 801cb7a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 801cb7e:	2b39      	cmp	r3, #57	; 0x39
 801cb80:	f105 32ff 	add.w	r2, r5, #4294967295	; 0xffffffff
 801cb84:	d03b      	beq.n	801cbfe <_dtoa_r+0xb56>
 801cb86:	3301      	adds	r3, #1
 801cb88:	e040      	b.n	801cc0c <_dtoa_r+0xb64>
 801cb8a:	2b00      	cmp	r3, #0
 801cb8c:	f108 0501 	add.w	r5, r8, #1
 801cb90:	dd05      	ble.n	801cb9e <_dtoa_r+0xaf6>
 801cb92:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 801cb96:	d0ea      	beq.n	801cb6e <_dtoa_r+0xac6>
 801cb98:	f109 0901 	add.w	r9, r9, #1
 801cb9c:	e7c4      	b.n	801cb28 <_dtoa_r+0xa80>
 801cb9e:	9b02      	ldr	r3, [sp, #8]
 801cba0:	9a04      	ldr	r2, [sp, #16]
 801cba2:	f805 9c01 	strb.w	r9, [r5, #-1]
 801cba6:	1aeb      	subs	r3, r5, r3
 801cba8:	4293      	cmp	r3, r2
 801cbaa:	46a8      	mov	r8, r5
 801cbac:	f43f af4b 	beq.w	801ca46 <_dtoa_r+0x99e>
 801cbb0:	4651      	mov	r1, sl
 801cbb2:	2300      	movs	r3, #0
 801cbb4:	220a      	movs	r2, #10
 801cbb6:	4620      	mov	r0, r4
 801cbb8:	f000 f9cf 	bl	801cf5a <__multadd>
 801cbbc:	9b03      	ldr	r3, [sp, #12]
 801cbbe:	9903      	ldr	r1, [sp, #12]
 801cbc0:	42bb      	cmp	r3, r7
 801cbc2:	4682      	mov	sl, r0
 801cbc4:	f04f 0300 	mov.w	r3, #0
 801cbc8:	f04f 020a 	mov.w	r2, #10
 801cbcc:	4620      	mov	r0, r4
 801cbce:	d104      	bne.n	801cbda <_dtoa_r+0xb32>
 801cbd0:	f000 f9c3 	bl	801cf5a <__multadd>
 801cbd4:	9003      	str	r0, [sp, #12]
 801cbd6:	4607      	mov	r7, r0
 801cbd8:	e776      	b.n	801cac8 <_dtoa_r+0xa20>
 801cbda:	f000 f9be 	bl	801cf5a <__multadd>
 801cbde:	2300      	movs	r3, #0
 801cbe0:	9003      	str	r0, [sp, #12]
 801cbe2:	220a      	movs	r2, #10
 801cbe4:	4639      	mov	r1, r7
 801cbe6:	4620      	mov	r0, r4
 801cbe8:	f000 f9b7 	bl	801cf5a <__multadd>
 801cbec:	e7f3      	b.n	801cbd6 <_dtoa_r+0xb2e>
 801cbee:	4651      	mov	r1, sl
 801cbf0:	2300      	movs	r3, #0
 801cbf2:	220a      	movs	r2, #10
 801cbf4:	4620      	mov	r0, r4
 801cbf6:	f000 f9b0 	bl	801cf5a <__multadd>
 801cbfa:	4682      	mov	sl, r0
 801cbfc:	e70d      	b.n	801ca1a <_dtoa_r+0x972>
 801cbfe:	9b02      	ldr	r3, [sp, #8]
 801cc00:	4293      	cmp	r3, r2
 801cc02:	d105      	bne.n	801cc10 <_dtoa_r+0xb68>
 801cc04:	9a02      	ldr	r2, [sp, #8]
 801cc06:	f10b 0b01 	add.w	fp, fp, #1
 801cc0a:	2331      	movs	r3, #49	; 0x31
 801cc0c:	7013      	strb	r3, [r2, #0]
 801cc0e:	e6e2      	b.n	801c9d6 <_dtoa_r+0x92e>
 801cc10:	4615      	mov	r5, r2
 801cc12:	e7b2      	b.n	801cb7a <_dtoa_r+0xad2>
 801cc14:	4b09      	ldr	r3, [pc, #36]	; (801cc3c <_dtoa_r+0xb94>)
 801cc16:	f7ff baae 	b.w	801c176 <_dtoa_r+0xce>
 801cc1a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801cc1c:	2b00      	cmp	r3, #0
 801cc1e:	f47f aa88 	bne.w	801c132 <_dtoa_r+0x8a>
 801cc22:	4b07      	ldr	r3, [pc, #28]	; (801cc40 <_dtoa_r+0xb98>)
 801cc24:	f7ff baa7 	b.w	801c176 <_dtoa_r+0xce>
 801cc28:	9b04      	ldr	r3, [sp, #16]
 801cc2a:	2b00      	cmp	r3, #0
 801cc2c:	f73f aef4 	bgt.w	801ca18 <_dtoa_r+0x970>
 801cc30:	9b07      	ldr	r3, [sp, #28]
 801cc32:	2b02      	cmp	r3, #2
 801cc34:	f77f aef0 	ble.w	801ca18 <_dtoa_r+0x970>
 801cc38:	e6b8      	b.n	801c9ac <_dtoa_r+0x904>
 801cc3a:	bf00      	nop
 801cc3c:	0802c9e2 	.word	0x0802c9e2
 801cc40:	080f5024 	.word	0x080f5024

0801cc44 <_malloc_trim_r>:
 801cc44:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801cc48:	4f25      	ldr	r7, [pc, #148]	; (801cce0 <_malloc_trim_r+0x9c>)
 801cc4a:	f8df 80a0 	ldr.w	r8, [pc, #160]	; 801ccec <_malloc_trim_r+0xa8>
 801cc4e:	4689      	mov	r9, r1
 801cc50:	4606      	mov	r6, r0
 801cc52:	f7fe f8c5 	bl	801ade0 <__malloc_lock>
 801cc56:	68bb      	ldr	r3, [r7, #8]
 801cc58:	685d      	ldr	r5, [r3, #4]
 801cc5a:	f1a8 0411 	sub.w	r4, r8, #17
 801cc5e:	f025 0503 	bic.w	r5, r5, #3
 801cc62:	eba4 0409 	sub.w	r4, r4, r9
 801cc66:	442c      	add	r4, r5
 801cc68:	fbb4 f4f8 	udiv	r4, r4, r8
 801cc6c:	3c01      	subs	r4, #1
 801cc6e:	fb08 f404 	mul.w	r4, r8, r4
 801cc72:	4544      	cmp	r4, r8
 801cc74:	da05      	bge.n	801cc82 <_malloc_trim_r+0x3e>
 801cc76:	4630      	mov	r0, r6
 801cc78:	f7fe f8b8 	bl	801adec <__malloc_unlock>
 801cc7c:	2000      	movs	r0, #0
 801cc7e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801cc82:	2100      	movs	r1, #0
 801cc84:	4630      	mov	r0, r6
 801cc86:	f7fe f8b7 	bl	801adf8 <_sbrk_r>
 801cc8a:	68bb      	ldr	r3, [r7, #8]
 801cc8c:	442b      	add	r3, r5
 801cc8e:	4298      	cmp	r0, r3
 801cc90:	d1f1      	bne.n	801cc76 <_malloc_trim_r+0x32>
 801cc92:	4261      	negs	r1, r4
 801cc94:	4630      	mov	r0, r6
 801cc96:	f7fe f8af 	bl	801adf8 <_sbrk_r>
 801cc9a:	3001      	adds	r0, #1
 801cc9c:	d110      	bne.n	801ccc0 <_malloc_trim_r+0x7c>
 801cc9e:	2100      	movs	r1, #0
 801cca0:	4630      	mov	r0, r6
 801cca2:	f7fe f8a9 	bl	801adf8 <_sbrk_r>
 801cca6:	68ba      	ldr	r2, [r7, #8]
 801cca8:	1a83      	subs	r3, r0, r2
 801ccaa:	2b0f      	cmp	r3, #15
 801ccac:	dde3      	ble.n	801cc76 <_malloc_trim_r+0x32>
 801ccae:	490d      	ldr	r1, [pc, #52]	; (801cce4 <_malloc_trim_r+0xa0>)
 801ccb0:	6809      	ldr	r1, [r1, #0]
 801ccb2:	1a40      	subs	r0, r0, r1
 801ccb4:	490c      	ldr	r1, [pc, #48]	; (801cce8 <_malloc_trim_r+0xa4>)
 801ccb6:	f043 0301 	orr.w	r3, r3, #1
 801ccba:	6008      	str	r0, [r1, #0]
 801ccbc:	6053      	str	r3, [r2, #4]
 801ccbe:	e7da      	b.n	801cc76 <_malloc_trim_r+0x32>
 801ccc0:	68bb      	ldr	r3, [r7, #8]
 801ccc2:	4a09      	ldr	r2, [pc, #36]	; (801cce8 <_malloc_trim_r+0xa4>)
 801ccc4:	1b2d      	subs	r5, r5, r4
 801ccc6:	f045 0501 	orr.w	r5, r5, #1
 801ccca:	605d      	str	r5, [r3, #4]
 801cccc:	6813      	ldr	r3, [r2, #0]
 801ccce:	4630      	mov	r0, r6
 801ccd0:	1b1c      	subs	r4, r3, r4
 801ccd2:	6014      	str	r4, [r2, #0]
 801ccd4:	f7fe f88a 	bl	801adec <__malloc_unlock>
 801ccd8:	2001      	movs	r0, #1
 801ccda:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801ccde:	bf00      	nop
 801cce0:	20001e20 	.word	0x20001e20
 801cce4:	20002228 	.word	0x20002228
 801cce8:	2000b268 	.word	0x2000b268
 801ccec:	00001000 	.word	0x00001000

0801ccf0 <_free_r>:
 801ccf0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801ccf4:	4604      	mov	r4, r0
 801ccf6:	4688      	mov	r8, r1
 801ccf8:	2900      	cmp	r1, #0
 801ccfa:	f000 80ab 	beq.w	801ce54 <_free_r+0x164>
 801ccfe:	f7fe f86f 	bl	801ade0 <__malloc_lock>
 801cd02:	f858 2c04 	ldr.w	r2, [r8, #-4]
 801cd06:	4d54      	ldr	r5, [pc, #336]	; (801ce58 <_free_r+0x168>)
 801cd08:	f022 0001 	bic.w	r0, r2, #1
 801cd0c:	f1a8 0308 	sub.w	r3, r8, #8
 801cd10:	181f      	adds	r7, r3, r0
 801cd12:	68a9      	ldr	r1, [r5, #8]
 801cd14:	687e      	ldr	r6, [r7, #4]
 801cd16:	428f      	cmp	r7, r1
 801cd18:	f026 0603 	bic.w	r6, r6, #3
 801cd1c:	f002 0201 	and.w	r2, r2, #1
 801cd20:	d11b      	bne.n	801cd5a <_free_r+0x6a>
 801cd22:	4430      	add	r0, r6
 801cd24:	b93a      	cbnz	r2, 801cd36 <_free_r+0x46>
 801cd26:	f858 2c08 	ldr.w	r2, [r8, #-8]
 801cd2a:	1a9b      	subs	r3, r3, r2
 801cd2c:	4410      	add	r0, r2
 801cd2e:	6899      	ldr	r1, [r3, #8]
 801cd30:	68da      	ldr	r2, [r3, #12]
 801cd32:	60ca      	str	r2, [r1, #12]
 801cd34:	6091      	str	r1, [r2, #8]
 801cd36:	f040 0201 	orr.w	r2, r0, #1
 801cd3a:	605a      	str	r2, [r3, #4]
 801cd3c:	60ab      	str	r3, [r5, #8]
 801cd3e:	4b47      	ldr	r3, [pc, #284]	; (801ce5c <_free_r+0x16c>)
 801cd40:	681b      	ldr	r3, [r3, #0]
 801cd42:	4298      	cmp	r0, r3
 801cd44:	d304      	bcc.n	801cd50 <_free_r+0x60>
 801cd46:	4b46      	ldr	r3, [pc, #280]	; (801ce60 <_free_r+0x170>)
 801cd48:	4620      	mov	r0, r4
 801cd4a:	6819      	ldr	r1, [r3, #0]
 801cd4c:	f7ff ff7a 	bl	801cc44 <_malloc_trim_r>
 801cd50:	4620      	mov	r0, r4
 801cd52:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801cd56:	f7fe b849 	b.w	801adec <__malloc_unlock>
 801cd5a:	607e      	str	r6, [r7, #4]
 801cd5c:	2a00      	cmp	r2, #0
 801cd5e:	d139      	bne.n	801cdd4 <_free_r+0xe4>
 801cd60:	f858 1c08 	ldr.w	r1, [r8, #-8]
 801cd64:	1a5b      	subs	r3, r3, r1
 801cd66:	4408      	add	r0, r1
 801cd68:	6899      	ldr	r1, [r3, #8]
 801cd6a:	f105 0e08 	add.w	lr, r5, #8
 801cd6e:	4571      	cmp	r1, lr
 801cd70:	d032      	beq.n	801cdd8 <_free_r+0xe8>
 801cd72:	f8d3 e00c 	ldr.w	lr, [r3, #12]
 801cd76:	f8c1 e00c 	str.w	lr, [r1, #12]
 801cd7a:	f8ce 1008 	str.w	r1, [lr, #8]
 801cd7e:	19b9      	adds	r1, r7, r6
 801cd80:	6849      	ldr	r1, [r1, #4]
 801cd82:	07c9      	lsls	r1, r1, #31
 801cd84:	d40a      	bmi.n	801cd9c <_free_r+0xac>
 801cd86:	4430      	add	r0, r6
 801cd88:	68b9      	ldr	r1, [r7, #8]
 801cd8a:	bb3a      	cbnz	r2, 801cddc <_free_r+0xec>
 801cd8c:	4e35      	ldr	r6, [pc, #212]	; (801ce64 <_free_r+0x174>)
 801cd8e:	42b1      	cmp	r1, r6
 801cd90:	d124      	bne.n	801cddc <_free_r+0xec>
 801cd92:	616b      	str	r3, [r5, #20]
 801cd94:	612b      	str	r3, [r5, #16]
 801cd96:	2201      	movs	r2, #1
 801cd98:	60d9      	str	r1, [r3, #12]
 801cd9a:	6099      	str	r1, [r3, #8]
 801cd9c:	f040 0101 	orr.w	r1, r0, #1
 801cda0:	6059      	str	r1, [r3, #4]
 801cda2:	5018      	str	r0, [r3, r0]
 801cda4:	2a00      	cmp	r2, #0
 801cda6:	d1d3      	bne.n	801cd50 <_free_r+0x60>
 801cda8:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 801cdac:	d21a      	bcs.n	801cde4 <_free_r+0xf4>
 801cdae:	08c0      	lsrs	r0, r0, #3
 801cdb0:	1081      	asrs	r1, r0, #2
 801cdb2:	2201      	movs	r2, #1
 801cdb4:	408a      	lsls	r2, r1
 801cdb6:	6869      	ldr	r1, [r5, #4]
 801cdb8:	3001      	adds	r0, #1
 801cdba:	430a      	orrs	r2, r1
 801cdbc:	606a      	str	r2, [r5, #4]
 801cdbe:	eb05 02c0 	add.w	r2, r5, r0, lsl #3
 801cdc2:	f855 1030 	ldr.w	r1, [r5, r0, lsl #3]
 801cdc6:	6099      	str	r1, [r3, #8]
 801cdc8:	3a08      	subs	r2, #8
 801cdca:	60da      	str	r2, [r3, #12]
 801cdcc:	f845 3030 	str.w	r3, [r5, r0, lsl #3]
 801cdd0:	60cb      	str	r3, [r1, #12]
 801cdd2:	e7bd      	b.n	801cd50 <_free_r+0x60>
 801cdd4:	2200      	movs	r2, #0
 801cdd6:	e7d2      	b.n	801cd7e <_free_r+0x8e>
 801cdd8:	2201      	movs	r2, #1
 801cdda:	e7d0      	b.n	801cd7e <_free_r+0x8e>
 801cddc:	68fe      	ldr	r6, [r7, #12]
 801cdde:	60ce      	str	r6, [r1, #12]
 801cde0:	60b1      	str	r1, [r6, #8]
 801cde2:	e7db      	b.n	801cd9c <_free_r+0xac>
 801cde4:	0a42      	lsrs	r2, r0, #9
 801cde6:	2a04      	cmp	r2, #4
 801cde8:	d813      	bhi.n	801ce12 <_free_r+0x122>
 801cdea:	0982      	lsrs	r2, r0, #6
 801cdec:	3238      	adds	r2, #56	; 0x38
 801cdee:	1c51      	adds	r1, r2, #1
 801cdf0:	eb05 06c2 	add.w	r6, r5, r2, lsl #3
 801cdf4:	f855 1031 	ldr.w	r1, [r5, r1, lsl #3]
 801cdf8:	428e      	cmp	r6, r1
 801cdfa:	d124      	bne.n	801ce46 <_free_r+0x156>
 801cdfc:	2001      	movs	r0, #1
 801cdfe:	1092      	asrs	r2, r2, #2
 801ce00:	fa00 f202 	lsl.w	r2, r0, r2
 801ce04:	6868      	ldr	r0, [r5, #4]
 801ce06:	4302      	orrs	r2, r0
 801ce08:	606a      	str	r2, [r5, #4]
 801ce0a:	60de      	str	r6, [r3, #12]
 801ce0c:	6099      	str	r1, [r3, #8]
 801ce0e:	60b3      	str	r3, [r6, #8]
 801ce10:	e7de      	b.n	801cdd0 <_free_r+0xe0>
 801ce12:	2a14      	cmp	r2, #20
 801ce14:	d801      	bhi.n	801ce1a <_free_r+0x12a>
 801ce16:	325b      	adds	r2, #91	; 0x5b
 801ce18:	e7e9      	b.n	801cdee <_free_r+0xfe>
 801ce1a:	2a54      	cmp	r2, #84	; 0x54
 801ce1c:	d802      	bhi.n	801ce24 <_free_r+0x134>
 801ce1e:	0b02      	lsrs	r2, r0, #12
 801ce20:	326e      	adds	r2, #110	; 0x6e
 801ce22:	e7e4      	b.n	801cdee <_free_r+0xfe>
 801ce24:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
 801ce28:	d802      	bhi.n	801ce30 <_free_r+0x140>
 801ce2a:	0bc2      	lsrs	r2, r0, #15
 801ce2c:	3277      	adds	r2, #119	; 0x77
 801ce2e:	e7de      	b.n	801cdee <_free_r+0xfe>
 801ce30:	f240 5154 	movw	r1, #1364	; 0x554
 801ce34:	428a      	cmp	r2, r1
 801ce36:	bf9a      	itte	ls
 801ce38:	0c82      	lsrls	r2, r0, #18
 801ce3a:	327c      	addls	r2, #124	; 0x7c
 801ce3c:	227e      	movhi	r2, #126	; 0x7e
 801ce3e:	e7d6      	b.n	801cdee <_free_r+0xfe>
 801ce40:	6889      	ldr	r1, [r1, #8]
 801ce42:	428e      	cmp	r6, r1
 801ce44:	d004      	beq.n	801ce50 <_free_r+0x160>
 801ce46:	684a      	ldr	r2, [r1, #4]
 801ce48:	f022 0203 	bic.w	r2, r2, #3
 801ce4c:	4290      	cmp	r0, r2
 801ce4e:	d3f7      	bcc.n	801ce40 <_free_r+0x150>
 801ce50:	68ce      	ldr	r6, [r1, #12]
 801ce52:	e7da      	b.n	801ce0a <_free_r+0x11a>
 801ce54:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801ce58:	20001e20 	.word	0x20001e20
 801ce5c:	2000222c 	.word	0x2000222c
 801ce60:	2000b298 	.word	0x2000b298
 801ce64:	20001e28 	.word	0x20001e28

0801ce68 <__locale_ctype_ptr_l>:
 801ce68:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 801ce6c:	4770      	bx	lr
	...

0801ce70 <_localeconv_r>:
 801ce70:	4b04      	ldr	r3, [pc, #16]	; (801ce84 <_localeconv_r+0x14>)
 801ce72:	681b      	ldr	r3, [r3, #0]
 801ce74:	6a18      	ldr	r0, [r3, #32]
 801ce76:	4b04      	ldr	r3, [pc, #16]	; (801ce88 <_localeconv_r+0x18>)
 801ce78:	2800      	cmp	r0, #0
 801ce7a:	bf08      	it	eq
 801ce7c:	4618      	moveq	r0, r3
 801ce7e:	30f0      	adds	r0, #240	; 0xf0
 801ce80:	4770      	bx	lr
 801ce82:	bf00      	nop
 801ce84:	20001d2c 	.word	0x20001d2c
 801ce88:	20002230 	.word	0x20002230

0801ce8c <__retarget_lock_acquire_recursive>:
 801ce8c:	4770      	bx	lr

0801ce8e <__retarget_lock_release_recursive>:
 801ce8e:	4770      	bx	lr

0801ce90 <malloc>:
 801ce90:	4b02      	ldr	r3, [pc, #8]	; (801ce9c <malloc+0xc>)
 801ce92:	4601      	mov	r1, r0
 801ce94:	6818      	ldr	r0, [r3, #0]
 801ce96:	f7fd bd81 	b.w	801a99c <_malloc_r>
 801ce9a:	bf00      	nop
 801ce9c:	20001d2c 	.word	0x20001d2c

0801cea0 <__ascii_mbtowc>:
 801cea0:	b082      	sub	sp, #8
 801cea2:	b901      	cbnz	r1, 801cea6 <__ascii_mbtowc+0x6>
 801cea4:	a901      	add	r1, sp, #4
 801cea6:	b142      	cbz	r2, 801ceba <__ascii_mbtowc+0x1a>
 801cea8:	b14b      	cbz	r3, 801cebe <__ascii_mbtowc+0x1e>
 801ceaa:	7813      	ldrb	r3, [r2, #0]
 801ceac:	600b      	str	r3, [r1, #0]
 801ceae:	7812      	ldrb	r2, [r2, #0]
 801ceb0:	1c10      	adds	r0, r2, #0
 801ceb2:	bf18      	it	ne
 801ceb4:	2001      	movne	r0, #1
 801ceb6:	b002      	add	sp, #8
 801ceb8:	4770      	bx	lr
 801ceba:	4610      	mov	r0, r2
 801cebc:	e7fb      	b.n	801ceb6 <__ascii_mbtowc+0x16>
 801cebe:	f06f 0001 	mvn.w	r0, #1
 801cec2:	e7f8      	b.n	801ceb6 <__ascii_mbtowc+0x16>

0801cec4 <_Balloc>:
 801cec4:	b570      	push	{r4, r5, r6, lr}
 801cec6:	6a45      	ldr	r5, [r0, #36]	; 0x24
 801cec8:	4604      	mov	r4, r0
 801ceca:	460e      	mov	r6, r1
 801cecc:	b93d      	cbnz	r5, 801cede <_Balloc+0x1a>
 801cece:	2010      	movs	r0, #16
 801ced0:	f7ff ffde 	bl	801ce90 <malloc>
 801ced4:	6260      	str	r0, [r4, #36]	; 0x24
 801ced6:	6045      	str	r5, [r0, #4]
 801ced8:	6085      	str	r5, [r0, #8]
 801ceda:	6005      	str	r5, [r0, #0]
 801cedc:	60c5      	str	r5, [r0, #12]
 801cede:	6a65      	ldr	r5, [r4, #36]	; 0x24
 801cee0:	68eb      	ldr	r3, [r5, #12]
 801cee2:	b183      	cbz	r3, 801cf06 <_Balloc+0x42>
 801cee4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801cee6:	68db      	ldr	r3, [r3, #12]
 801cee8:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 801ceec:	b9b8      	cbnz	r0, 801cf1e <_Balloc+0x5a>
 801ceee:	2101      	movs	r1, #1
 801cef0:	fa01 f506 	lsl.w	r5, r1, r6
 801cef4:	1d6a      	adds	r2, r5, #5
 801cef6:	0092      	lsls	r2, r2, #2
 801cef8:	4620      	mov	r0, r4
 801cefa:	f7fd fcf8 	bl	801a8ee <_calloc_r>
 801cefe:	b160      	cbz	r0, 801cf1a <_Balloc+0x56>
 801cf00:	6046      	str	r6, [r0, #4]
 801cf02:	6085      	str	r5, [r0, #8]
 801cf04:	e00e      	b.n	801cf24 <_Balloc+0x60>
 801cf06:	2221      	movs	r2, #33	; 0x21
 801cf08:	2104      	movs	r1, #4
 801cf0a:	4620      	mov	r0, r4
 801cf0c:	f7fd fcef 	bl	801a8ee <_calloc_r>
 801cf10:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801cf12:	60e8      	str	r0, [r5, #12]
 801cf14:	68db      	ldr	r3, [r3, #12]
 801cf16:	2b00      	cmp	r3, #0
 801cf18:	d1e4      	bne.n	801cee4 <_Balloc+0x20>
 801cf1a:	2000      	movs	r0, #0
 801cf1c:	bd70      	pop	{r4, r5, r6, pc}
 801cf1e:	6802      	ldr	r2, [r0, #0]
 801cf20:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 801cf24:	2300      	movs	r3, #0
 801cf26:	6103      	str	r3, [r0, #16]
 801cf28:	60c3      	str	r3, [r0, #12]
 801cf2a:	bd70      	pop	{r4, r5, r6, pc}

0801cf2c <_Bfree>:
 801cf2c:	b570      	push	{r4, r5, r6, lr}
 801cf2e:	6a44      	ldr	r4, [r0, #36]	; 0x24
 801cf30:	4606      	mov	r6, r0
 801cf32:	460d      	mov	r5, r1
 801cf34:	b93c      	cbnz	r4, 801cf46 <_Bfree+0x1a>
 801cf36:	2010      	movs	r0, #16
 801cf38:	f7ff ffaa 	bl	801ce90 <malloc>
 801cf3c:	6270      	str	r0, [r6, #36]	; 0x24
 801cf3e:	6044      	str	r4, [r0, #4]
 801cf40:	6084      	str	r4, [r0, #8]
 801cf42:	6004      	str	r4, [r0, #0]
 801cf44:	60c4      	str	r4, [r0, #12]
 801cf46:	b13d      	cbz	r5, 801cf58 <_Bfree+0x2c>
 801cf48:	6a73      	ldr	r3, [r6, #36]	; 0x24
 801cf4a:	686a      	ldr	r2, [r5, #4]
 801cf4c:	68db      	ldr	r3, [r3, #12]
 801cf4e:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 801cf52:	6029      	str	r1, [r5, #0]
 801cf54:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 801cf58:	bd70      	pop	{r4, r5, r6, pc}

0801cf5a <__multadd>:
 801cf5a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801cf5e:	690d      	ldr	r5, [r1, #16]
 801cf60:	461f      	mov	r7, r3
 801cf62:	4606      	mov	r6, r0
 801cf64:	460c      	mov	r4, r1
 801cf66:	f101 0e14 	add.w	lr, r1, #20
 801cf6a:	2300      	movs	r3, #0
 801cf6c:	f8de 0000 	ldr.w	r0, [lr]
 801cf70:	b281      	uxth	r1, r0
 801cf72:	fb02 7101 	mla	r1, r2, r1, r7
 801cf76:	0c0f      	lsrs	r7, r1, #16
 801cf78:	0c00      	lsrs	r0, r0, #16
 801cf7a:	fb02 7000 	mla	r0, r2, r0, r7
 801cf7e:	b289      	uxth	r1, r1
 801cf80:	3301      	adds	r3, #1
 801cf82:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 801cf86:	429d      	cmp	r5, r3
 801cf88:	ea4f 4710 	mov.w	r7, r0, lsr #16
 801cf8c:	f84e 1b04 	str.w	r1, [lr], #4
 801cf90:	dcec      	bgt.n	801cf6c <__multadd+0x12>
 801cf92:	b1d7      	cbz	r7, 801cfca <__multadd+0x70>
 801cf94:	68a3      	ldr	r3, [r4, #8]
 801cf96:	429d      	cmp	r5, r3
 801cf98:	db12      	blt.n	801cfc0 <__multadd+0x66>
 801cf9a:	6861      	ldr	r1, [r4, #4]
 801cf9c:	4630      	mov	r0, r6
 801cf9e:	3101      	adds	r1, #1
 801cfa0:	f7ff ff90 	bl	801cec4 <_Balloc>
 801cfa4:	6922      	ldr	r2, [r4, #16]
 801cfa6:	3202      	adds	r2, #2
 801cfa8:	f104 010c 	add.w	r1, r4, #12
 801cfac:	4680      	mov	r8, r0
 801cfae:	0092      	lsls	r2, r2, #2
 801cfb0:	300c      	adds	r0, #12
 801cfb2:	f7fd ff01 	bl	801adb8 <memcpy>
 801cfb6:	4621      	mov	r1, r4
 801cfb8:	4630      	mov	r0, r6
 801cfba:	f7ff ffb7 	bl	801cf2c <_Bfree>
 801cfbe:	4644      	mov	r4, r8
 801cfc0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 801cfc4:	3501      	adds	r5, #1
 801cfc6:	615f      	str	r7, [r3, #20]
 801cfc8:	6125      	str	r5, [r4, #16]
 801cfca:	4620      	mov	r0, r4
 801cfcc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801cfd0 <__hi0bits>:
 801cfd0:	0c02      	lsrs	r2, r0, #16
 801cfd2:	0412      	lsls	r2, r2, #16
 801cfd4:	4603      	mov	r3, r0
 801cfd6:	b9b2      	cbnz	r2, 801d006 <__hi0bits+0x36>
 801cfd8:	0403      	lsls	r3, r0, #16
 801cfda:	2010      	movs	r0, #16
 801cfdc:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 801cfe0:	bf04      	itt	eq
 801cfe2:	021b      	lsleq	r3, r3, #8
 801cfe4:	3008      	addeq	r0, #8
 801cfe6:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 801cfea:	bf04      	itt	eq
 801cfec:	011b      	lsleq	r3, r3, #4
 801cfee:	3004      	addeq	r0, #4
 801cff0:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 801cff4:	bf04      	itt	eq
 801cff6:	009b      	lsleq	r3, r3, #2
 801cff8:	3002      	addeq	r0, #2
 801cffa:	2b00      	cmp	r3, #0
 801cffc:	db06      	blt.n	801d00c <__hi0bits+0x3c>
 801cffe:	005b      	lsls	r3, r3, #1
 801d000:	d503      	bpl.n	801d00a <__hi0bits+0x3a>
 801d002:	3001      	adds	r0, #1
 801d004:	4770      	bx	lr
 801d006:	2000      	movs	r0, #0
 801d008:	e7e8      	b.n	801cfdc <__hi0bits+0xc>
 801d00a:	2020      	movs	r0, #32
 801d00c:	4770      	bx	lr

0801d00e <__lo0bits>:
 801d00e:	6803      	ldr	r3, [r0, #0]
 801d010:	f013 0207 	ands.w	r2, r3, #7
 801d014:	4601      	mov	r1, r0
 801d016:	d00b      	beq.n	801d030 <__lo0bits+0x22>
 801d018:	07da      	lsls	r2, r3, #31
 801d01a:	d423      	bmi.n	801d064 <__lo0bits+0x56>
 801d01c:	0798      	lsls	r0, r3, #30
 801d01e:	bf49      	itett	mi
 801d020:	085b      	lsrmi	r3, r3, #1
 801d022:	089b      	lsrpl	r3, r3, #2
 801d024:	2001      	movmi	r0, #1
 801d026:	600b      	strmi	r3, [r1, #0]
 801d028:	bf5c      	itt	pl
 801d02a:	600b      	strpl	r3, [r1, #0]
 801d02c:	2002      	movpl	r0, #2
 801d02e:	4770      	bx	lr
 801d030:	b298      	uxth	r0, r3
 801d032:	b9a8      	cbnz	r0, 801d060 <__lo0bits+0x52>
 801d034:	0c1b      	lsrs	r3, r3, #16
 801d036:	2010      	movs	r0, #16
 801d038:	f013 0fff 	tst.w	r3, #255	; 0xff
 801d03c:	bf04      	itt	eq
 801d03e:	0a1b      	lsreq	r3, r3, #8
 801d040:	3008      	addeq	r0, #8
 801d042:	071a      	lsls	r2, r3, #28
 801d044:	bf04      	itt	eq
 801d046:	091b      	lsreq	r3, r3, #4
 801d048:	3004      	addeq	r0, #4
 801d04a:	079a      	lsls	r2, r3, #30
 801d04c:	bf04      	itt	eq
 801d04e:	089b      	lsreq	r3, r3, #2
 801d050:	3002      	addeq	r0, #2
 801d052:	07da      	lsls	r2, r3, #31
 801d054:	d402      	bmi.n	801d05c <__lo0bits+0x4e>
 801d056:	085b      	lsrs	r3, r3, #1
 801d058:	d006      	beq.n	801d068 <__lo0bits+0x5a>
 801d05a:	3001      	adds	r0, #1
 801d05c:	600b      	str	r3, [r1, #0]
 801d05e:	4770      	bx	lr
 801d060:	4610      	mov	r0, r2
 801d062:	e7e9      	b.n	801d038 <__lo0bits+0x2a>
 801d064:	2000      	movs	r0, #0
 801d066:	4770      	bx	lr
 801d068:	2020      	movs	r0, #32
 801d06a:	4770      	bx	lr

0801d06c <__i2b>:
 801d06c:	b510      	push	{r4, lr}
 801d06e:	460c      	mov	r4, r1
 801d070:	2101      	movs	r1, #1
 801d072:	f7ff ff27 	bl	801cec4 <_Balloc>
 801d076:	2201      	movs	r2, #1
 801d078:	6144      	str	r4, [r0, #20]
 801d07a:	6102      	str	r2, [r0, #16]
 801d07c:	bd10      	pop	{r4, pc}

0801d07e <__multiply>:
 801d07e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d082:	4614      	mov	r4, r2
 801d084:	690a      	ldr	r2, [r1, #16]
 801d086:	6923      	ldr	r3, [r4, #16]
 801d088:	429a      	cmp	r2, r3
 801d08a:	bfb8      	it	lt
 801d08c:	460b      	movlt	r3, r1
 801d08e:	4689      	mov	r9, r1
 801d090:	bfbc      	itt	lt
 801d092:	46a1      	movlt	r9, r4
 801d094:	461c      	movlt	r4, r3
 801d096:	f8d9 7010 	ldr.w	r7, [r9, #16]
 801d09a:	f8d4 a010 	ldr.w	sl, [r4, #16]
 801d09e:	f8d9 3008 	ldr.w	r3, [r9, #8]
 801d0a2:	f8d9 1004 	ldr.w	r1, [r9, #4]
 801d0a6:	eb07 060a 	add.w	r6, r7, sl
 801d0aa:	429e      	cmp	r6, r3
 801d0ac:	bfc8      	it	gt
 801d0ae:	3101      	addgt	r1, #1
 801d0b0:	f7ff ff08 	bl	801cec4 <_Balloc>
 801d0b4:	f100 0514 	add.w	r5, r0, #20
 801d0b8:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 801d0bc:	462b      	mov	r3, r5
 801d0be:	2200      	movs	r2, #0
 801d0c0:	4543      	cmp	r3, r8
 801d0c2:	d316      	bcc.n	801d0f2 <__multiply+0x74>
 801d0c4:	f104 0214 	add.w	r2, r4, #20
 801d0c8:	f109 0114 	add.w	r1, r9, #20
 801d0cc:	eb02 038a 	add.w	r3, r2, sl, lsl #2
 801d0d0:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 801d0d4:	9301      	str	r3, [sp, #4]
 801d0d6:	9c01      	ldr	r4, [sp, #4]
 801d0d8:	4294      	cmp	r4, r2
 801d0da:	4613      	mov	r3, r2
 801d0dc:	d80c      	bhi.n	801d0f8 <__multiply+0x7a>
 801d0de:	2e00      	cmp	r6, #0
 801d0e0:	dd03      	ble.n	801d0ea <__multiply+0x6c>
 801d0e2:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 801d0e6:	2b00      	cmp	r3, #0
 801d0e8:	d054      	beq.n	801d194 <__multiply+0x116>
 801d0ea:	6106      	str	r6, [r0, #16]
 801d0ec:	b003      	add	sp, #12
 801d0ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d0f2:	f843 2b04 	str.w	r2, [r3], #4
 801d0f6:	e7e3      	b.n	801d0c0 <__multiply+0x42>
 801d0f8:	f8b3 a000 	ldrh.w	sl, [r3]
 801d0fc:	3204      	adds	r2, #4
 801d0fe:	f1ba 0f00 	cmp.w	sl, #0
 801d102:	d020      	beq.n	801d146 <__multiply+0xc8>
 801d104:	46ae      	mov	lr, r5
 801d106:	4689      	mov	r9, r1
 801d108:	f04f 0c00 	mov.w	ip, #0
 801d10c:	f859 4b04 	ldr.w	r4, [r9], #4
 801d110:	f8be b000 	ldrh.w	fp, [lr]
 801d114:	b2a3      	uxth	r3, r4
 801d116:	fb0a b303 	mla	r3, sl, r3, fp
 801d11a:	ea4f 4b14 	mov.w	fp, r4, lsr #16
 801d11e:	f8de 4000 	ldr.w	r4, [lr]
 801d122:	4463      	add	r3, ip
 801d124:	ea4f 4c14 	mov.w	ip, r4, lsr #16
 801d128:	fb0a c40b 	mla	r4, sl, fp, ip
 801d12c:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 801d130:	b29b      	uxth	r3, r3
 801d132:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 801d136:	454f      	cmp	r7, r9
 801d138:	ea4f 4c14 	mov.w	ip, r4, lsr #16
 801d13c:	f84e 3b04 	str.w	r3, [lr], #4
 801d140:	d8e4      	bhi.n	801d10c <__multiply+0x8e>
 801d142:	f8ce c000 	str.w	ip, [lr]
 801d146:	f832 9c02 	ldrh.w	r9, [r2, #-2]
 801d14a:	f1b9 0f00 	cmp.w	r9, #0
 801d14e:	d01f      	beq.n	801d190 <__multiply+0x112>
 801d150:	682b      	ldr	r3, [r5, #0]
 801d152:	46ae      	mov	lr, r5
 801d154:	468c      	mov	ip, r1
 801d156:	f04f 0a00 	mov.w	sl, #0
 801d15a:	f8bc 4000 	ldrh.w	r4, [ip]
 801d15e:	f8be b002 	ldrh.w	fp, [lr, #2]
 801d162:	fb09 b404 	mla	r4, r9, r4, fp
 801d166:	44a2      	add	sl, r4
 801d168:	b29b      	uxth	r3, r3
 801d16a:	ea43 430a 	orr.w	r3, r3, sl, lsl #16
 801d16e:	f84e 3b04 	str.w	r3, [lr], #4
 801d172:	f85c 3b04 	ldr.w	r3, [ip], #4
 801d176:	f8be 4000 	ldrh.w	r4, [lr]
 801d17a:	0c1b      	lsrs	r3, r3, #16
 801d17c:	fb09 4303 	mla	r3, r9, r3, r4
 801d180:	eb03 431a 	add.w	r3, r3, sl, lsr #16
 801d184:	4567      	cmp	r7, ip
 801d186:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 801d18a:	d8e6      	bhi.n	801d15a <__multiply+0xdc>
 801d18c:	f8ce 3000 	str.w	r3, [lr]
 801d190:	3504      	adds	r5, #4
 801d192:	e7a0      	b.n	801d0d6 <__multiply+0x58>
 801d194:	3e01      	subs	r6, #1
 801d196:	e7a2      	b.n	801d0de <__multiply+0x60>

0801d198 <__pow5mult>:
 801d198:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801d19c:	4615      	mov	r5, r2
 801d19e:	f012 0203 	ands.w	r2, r2, #3
 801d1a2:	4606      	mov	r6, r0
 801d1a4:	460f      	mov	r7, r1
 801d1a6:	d007      	beq.n	801d1b8 <__pow5mult+0x20>
 801d1a8:	3a01      	subs	r2, #1
 801d1aa:	4c21      	ldr	r4, [pc, #132]	; (801d230 <__pow5mult+0x98>)
 801d1ac:	2300      	movs	r3, #0
 801d1ae:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 801d1b2:	f7ff fed2 	bl	801cf5a <__multadd>
 801d1b6:	4607      	mov	r7, r0
 801d1b8:	10ad      	asrs	r5, r5, #2
 801d1ba:	d035      	beq.n	801d228 <__pow5mult+0x90>
 801d1bc:	6a74      	ldr	r4, [r6, #36]	; 0x24
 801d1be:	b93c      	cbnz	r4, 801d1d0 <__pow5mult+0x38>
 801d1c0:	2010      	movs	r0, #16
 801d1c2:	f7ff fe65 	bl	801ce90 <malloc>
 801d1c6:	6270      	str	r0, [r6, #36]	; 0x24
 801d1c8:	6044      	str	r4, [r0, #4]
 801d1ca:	6084      	str	r4, [r0, #8]
 801d1cc:	6004      	str	r4, [r0, #0]
 801d1ce:	60c4      	str	r4, [r0, #12]
 801d1d0:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 801d1d4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 801d1d8:	b94c      	cbnz	r4, 801d1ee <__pow5mult+0x56>
 801d1da:	f240 2171 	movw	r1, #625	; 0x271
 801d1de:	4630      	mov	r0, r6
 801d1e0:	f7ff ff44 	bl	801d06c <__i2b>
 801d1e4:	2300      	movs	r3, #0
 801d1e6:	f8c8 0008 	str.w	r0, [r8, #8]
 801d1ea:	4604      	mov	r4, r0
 801d1ec:	6003      	str	r3, [r0, #0]
 801d1ee:	f04f 0800 	mov.w	r8, #0
 801d1f2:	07eb      	lsls	r3, r5, #31
 801d1f4:	d50a      	bpl.n	801d20c <__pow5mult+0x74>
 801d1f6:	4639      	mov	r1, r7
 801d1f8:	4622      	mov	r2, r4
 801d1fa:	4630      	mov	r0, r6
 801d1fc:	f7ff ff3f 	bl	801d07e <__multiply>
 801d200:	4639      	mov	r1, r7
 801d202:	4681      	mov	r9, r0
 801d204:	4630      	mov	r0, r6
 801d206:	f7ff fe91 	bl	801cf2c <_Bfree>
 801d20a:	464f      	mov	r7, r9
 801d20c:	106d      	asrs	r5, r5, #1
 801d20e:	d00b      	beq.n	801d228 <__pow5mult+0x90>
 801d210:	6820      	ldr	r0, [r4, #0]
 801d212:	b938      	cbnz	r0, 801d224 <__pow5mult+0x8c>
 801d214:	4622      	mov	r2, r4
 801d216:	4621      	mov	r1, r4
 801d218:	4630      	mov	r0, r6
 801d21a:	f7ff ff30 	bl	801d07e <__multiply>
 801d21e:	6020      	str	r0, [r4, #0]
 801d220:	f8c0 8000 	str.w	r8, [r0]
 801d224:	4604      	mov	r4, r0
 801d226:	e7e4      	b.n	801d1f2 <__pow5mult+0x5a>
 801d228:	4638      	mov	r0, r7
 801d22a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801d22e:	bf00      	nop
 801d230:	080f5130 	.word	0x080f5130

0801d234 <__lshift>:
 801d234:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801d238:	460c      	mov	r4, r1
 801d23a:	ea4f 1a62 	mov.w	sl, r2, asr #5
 801d23e:	6923      	ldr	r3, [r4, #16]
 801d240:	6849      	ldr	r1, [r1, #4]
 801d242:	eb0a 0903 	add.w	r9, sl, r3
 801d246:	68a3      	ldr	r3, [r4, #8]
 801d248:	4607      	mov	r7, r0
 801d24a:	4616      	mov	r6, r2
 801d24c:	f109 0501 	add.w	r5, r9, #1
 801d250:	42ab      	cmp	r3, r5
 801d252:	db31      	blt.n	801d2b8 <__lshift+0x84>
 801d254:	4638      	mov	r0, r7
 801d256:	f7ff fe35 	bl	801cec4 <_Balloc>
 801d25a:	2200      	movs	r2, #0
 801d25c:	4680      	mov	r8, r0
 801d25e:	f100 0314 	add.w	r3, r0, #20
 801d262:	4611      	mov	r1, r2
 801d264:	4552      	cmp	r2, sl
 801d266:	db2a      	blt.n	801d2be <__lshift+0x8a>
 801d268:	6920      	ldr	r0, [r4, #16]
 801d26a:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 801d26e:	f104 0114 	add.w	r1, r4, #20
 801d272:	f016 021f 	ands.w	r2, r6, #31
 801d276:	eb03 038a 	add.w	r3, r3, sl, lsl #2
 801d27a:	eb01 0e80 	add.w	lr, r1, r0, lsl #2
 801d27e:	d022      	beq.n	801d2c6 <__lshift+0x92>
 801d280:	f1c2 0c20 	rsb	ip, r2, #32
 801d284:	2000      	movs	r0, #0
 801d286:	680e      	ldr	r6, [r1, #0]
 801d288:	4096      	lsls	r6, r2
 801d28a:	4330      	orrs	r0, r6
 801d28c:	f843 0b04 	str.w	r0, [r3], #4
 801d290:	f851 0b04 	ldr.w	r0, [r1], #4
 801d294:	458e      	cmp	lr, r1
 801d296:	fa20 f00c 	lsr.w	r0, r0, ip
 801d29a:	d8f4      	bhi.n	801d286 <__lshift+0x52>
 801d29c:	6018      	str	r0, [r3, #0]
 801d29e:	b108      	cbz	r0, 801d2a4 <__lshift+0x70>
 801d2a0:	f109 0502 	add.w	r5, r9, #2
 801d2a4:	3d01      	subs	r5, #1
 801d2a6:	4638      	mov	r0, r7
 801d2a8:	f8c8 5010 	str.w	r5, [r8, #16]
 801d2ac:	4621      	mov	r1, r4
 801d2ae:	f7ff fe3d 	bl	801cf2c <_Bfree>
 801d2b2:	4640      	mov	r0, r8
 801d2b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801d2b8:	3101      	adds	r1, #1
 801d2ba:	005b      	lsls	r3, r3, #1
 801d2bc:	e7c8      	b.n	801d250 <__lshift+0x1c>
 801d2be:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 801d2c2:	3201      	adds	r2, #1
 801d2c4:	e7ce      	b.n	801d264 <__lshift+0x30>
 801d2c6:	3b04      	subs	r3, #4
 801d2c8:	f851 2b04 	ldr.w	r2, [r1], #4
 801d2cc:	f843 2f04 	str.w	r2, [r3, #4]!
 801d2d0:	458e      	cmp	lr, r1
 801d2d2:	d8f9      	bhi.n	801d2c8 <__lshift+0x94>
 801d2d4:	e7e6      	b.n	801d2a4 <__lshift+0x70>

0801d2d6 <__mcmp>:
 801d2d6:	6903      	ldr	r3, [r0, #16]
 801d2d8:	690a      	ldr	r2, [r1, #16]
 801d2da:	1a9b      	subs	r3, r3, r2
 801d2dc:	b530      	push	{r4, r5, lr}
 801d2de:	d10c      	bne.n	801d2fa <__mcmp+0x24>
 801d2e0:	0092      	lsls	r2, r2, #2
 801d2e2:	3014      	adds	r0, #20
 801d2e4:	3114      	adds	r1, #20
 801d2e6:	1884      	adds	r4, r0, r2
 801d2e8:	4411      	add	r1, r2
 801d2ea:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 801d2ee:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 801d2f2:	4295      	cmp	r5, r2
 801d2f4:	d003      	beq.n	801d2fe <__mcmp+0x28>
 801d2f6:	d305      	bcc.n	801d304 <__mcmp+0x2e>
 801d2f8:	2301      	movs	r3, #1
 801d2fa:	4618      	mov	r0, r3
 801d2fc:	bd30      	pop	{r4, r5, pc}
 801d2fe:	42a0      	cmp	r0, r4
 801d300:	d3f3      	bcc.n	801d2ea <__mcmp+0x14>
 801d302:	e7fa      	b.n	801d2fa <__mcmp+0x24>
 801d304:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801d308:	e7f7      	b.n	801d2fa <__mcmp+0x24>

0801d30a <__mdiff>:
 801d30a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801d30e:	460d      	mov	r5, r1
 801d310:	4607      	mov	r7, r0
 801d312:	4611      	mov	r1, r2
 801d314:	4628      	mov	r0, r5
 801d316:	4614      	mov	r4, r2
 801d318:	f7ff ffdd 	bl	801d2d6 <__mcmp>
 801d31c:	1e06      	subs	r6, r0, #0
 801d31e:	d108      	bne.n	801d332 <__mdiff+0x28>
 801d320:	4631      	mov	r1, r6
 801d322:	4638      	mov	r0, r7
 801d324:	f7ff fdce 	bl	801cec4 <_Balloc>
 801d328:	2301      	movs	r3, #1
 801d32a:	6103      	str	r3, [r0, #16]
 801d32c:	6146      	str	r6, [r0, #20]
 801d32e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801d332:	bfa4      	itt	ge
 801d334:	4623      	movge	r3, r4
 801d336:	462c      	movge	r4, r5
 801d338:	4638      	mov	r0, r7
 801d33a:	6861      	ldr	r1, [r4, #4]
 801d33c:	bfa6      	itte	ge
 801d33e:	461d      	movge	r5, r3
 801d340:	2600      	movge	r6, #0
 801d342:	2601      	movlt	r6, #1
 801d344:	f7ff fdbe 	bl	801cec4 <_Balloc>
 801d348:	692b      	ldr	r3, [r5, #16]
 801d34a:	60c6      	str	r6, [r0, #12]
 801d34c:	6926      	ldr	r6, [r4, #16]
 801d34e:	f105 0914 	add.w	r9, r5, #20
 801d352:	f104 0214 	add.w	r2, r4, #20
 801d356:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 801d35a:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 801d35e:	f100 0514 	add.w	r5, r0, #20
 801d362:	f04f 0c00 	mov.w	ip, #0
 801d366:	f852 ab04 	ldr.w	sl, [r2], #4
 801d36a:	f859 4b04 	ldr.w	r4, [r9], #4
 801d36e:	fa1c f18a 	uxtah	r1, ip, sl
 801d372:	b2a3      	uxth	r3, r4
 801d374:	1ac9      	subs	r1, r1, r3
 801d376:	0c23      	lsrs	r3, r4, #16
 801d378:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 801d37c:	eb03 4321 	add.w	r3, r3, r1, asr #16
 801d380:	b289      	uxth	r1, r1
 801d382:	ea4f 4c23 	mov.w	ip, r3, asr #16
 801d386:	45c8      	cmp	r8, r9
 801d388:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 801d38c:	4696      	mov	lr, r2
 801d38e:	f845 3b04 	str.w	r3, [r5], #4
 801d392:	d8e8      	bhi.n	801d366 <__mdiff+0x5c>
 801d394:	45be      	cmp	lr, r7
 801d396:	d305      	bcc.n	801d3a4 <__mdiff+0x9a>
 801d398:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 801d39c:	b18b      	cbz	r3, 801d3c2 <__mdiff+0xb8>
 801d39e:	6106      	str	r6, [r0, #16]
 801d3a0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801d3a4:	f85e 1b04 	ldr.w	r1, [lr], #4
 801d3a8:	fa1c f381 	uxtah	r3, ip, r1
 801d3ac:	141a      	asrs	r2, r3, #16
 801d3ae:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 801d3b2:	b29b      	uxth	r3, r3
 801d3b4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801d3b8:	ea4f 4c22 	mov.w	ip, r2, asr #16
 801d3bc:	f845 3b04 	str.w	r3, [r5], #4
 801d3c0:	e7e8      	b.n	801d394 <__mdiff+0x8a>
 801d3c2:	3e01      	subs	r6, #1
 801d3c4:	e7e8      	b.n	801d398 <__mdiff+0x8e>

0801d3c6 <__d2b>:
 801d3c6:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 801d3ca:	460e      	mov	r6, r1
 801d3cc:	2101      	movs	r1, #1
 801d3ce:	ec59 8b10 	vmov	r8, r9, d0
 801d3d2:	4615      	mov	r5, r2
 801d3d4:	f7ff fd76 	bl	801cec4 <_Balloc>
 801d3d8:	f3c9 540a 	ubfx	r4, r9, #20, #11
 801d3dc:	4607      	mov	r7, r0
 801d3de:	f3c9 0313 	ubfx	r3, r9, #0, #20
 801d3e2:	bb34      	cbnz	r4, 801d432 <__d2b+0x6c>
 801d3e4:	9301      	str	r3, [sp, #4]
 801d3e6:	f1b8 0f00 	cmp.w	r8, #0
 801d3ea:	d027      	beq.n	801d43c <__d2b+0x76>
 801d3ec:	a802      	add	r0, sp, #8
 801d3ee:	f840 8d08 	str.w	r8, [r0, #-8]!
 801d3f2:	f7ff fe0c 	bl	801d00e <__lo0bits>
 801d3f6:	9900      	ldr	r1, [sp, #0]
 801d3f8:	b1f0      	cbz	r0, 801d438 <__d2b+0x72>
 801d3fa:	9a01      	ldr	r2, [sp, #4]
 801d3fc:	f1c0 0320 	rsb	r3, r0, #32
 801d400:	fa02 f303 	lsl.w	r3, r2, r3
 801d404:	430b      	orrs	r3, r1
 801d406:	40c2      	lsrs	r2, r0
 801d408:	617b      	str	r3, [r7, #20]
 801d40a:	9201      	str	r2, [sp, #4]
 801d40c:	9b01      	ldr	r3, [sp, #4]
 801d40e:	61bb      	str	r3, [r7, #24]
 801d410:	2b00      	cmp	r3, #0
 801d412:	bf14      	ite	ne
 801d414:	2102      	movne	r1, #2
 801d416:	2101      	moveq	r1, #1
 801d418:	6139      	str	r1, [r7, #16]
 801d41a:	b1c4      	cbz	r4, 801d44e <__d2b+0x88>
 801d41c:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 801d420:	4404      	add	r4, r0
 801d422:	6034      	str	r4, [r6, #0]
 801d424:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 801d428:	6028      	str	r0, [r5, #0]
 801d42a:	4638      	mov	r0, r7
 801d42c:	b003      	add	sp, #12
 801d42e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801d432:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 801d436:	e7d5      	b.n	801d3e4 <__d2b+0x1e>
 801d438:	6179      	str	r1, [r7, #20]
 801d43a:	e7e7      	b.n	801d40c <__d2b+0x46>
 801d43c:	a801      	add	r0, sp, #4
 801d43e:	f7ff fde6 	bl	801d00e <__lo0bits>
 801d442:	9b01      	ldr	r3, [sp, #4]
 801d444:	617b      	str	r3, [r7, #20]
 801d446:	2101      	movs	r1, #1
 801d448:	6139      	str	r1, [r7, #16]
 801d44a:	3020      	adds	r0, #32
 801d44c:	e7e5      	b.n	801d41a <__d2b+0x54>
 801d44e:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 801d452:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 801d456:	6030      	str	r0, [r6, #0]
 801d458:	6918      	ldr	r0, [r3, #16]
 801d45a:	f7ff fdb9 	bl	801cfd0 <__hi0bits>
 801d45e:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 801d462:	e7e1      	b.n	801d428 <__d2b+0x62>

0801d464 <__ssprint_r>:
 801d464:	6893      	ldr	r3, [r2, #8]
 801d466:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d46a:	4681      	mov	r9, r0
 801d46c:	460c      	mov	r4, r1
 801d46e:	4617      	mov	r7, r2
 801d470:	2b00      	cmp	r3, #0
 801d472:	d060      	beq.n	801d536 <__ssprint_r+0xd2>
 801d474:	f04f 0b00 	mov.w	fp, #0
 801d478:	f8d2 a000 	ldr.w	sl, [r2]
 801d47c:	465e      	mov	r6, fp
 801d47e:	b356      	cbz	r6, 801d4d6 <__ssprint_r+0x72>
 801d480:	68a3      	ldr	r3, [r4, #8]
 801d482:	429e      	cmp	r6, r3
 801d484:	d344      	bcc.n	801d510 <__ssprint_r+0xac>
 801d486:	89a2      	ldrh	r2, [r4, #12]
 801d488:	f412 6f90 	tst.w	r2, #1152	; 0x480
 801d48c:	d03e      	beq.n	801d50c <__ssprint_r+0xa8>
 801d48e:	6825      	ldr	r5, [r4, #0]
 801d490:	6921      	ldr	r1, [r4, #16]
 801d492:	eba5 0801 	sub.w	r8, r5, r1
 801d496:	6965      	ldr	r5, [r4, #20]
 801d498:	2302      	movs	r3, #2
 801d49a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801d49e:	fb95 f5f3 	sdiv	r5, r5, r3
 801d4a2:	f108 0301 	add.w	r3, r8, #1
 801d4a6:	4433      	add	r3, r6
 801d4a8:	429d      	cmp	r5, r3
 801d4aa:	bf38      	it	cc
 801d4ac:	461d      	movcc	r5, r3
 801d4ae:	0553      	lsls	r3, r2, #21
 801d4b0:	d546      	bpl.n	801d540 <__ssprint_r+0xdc>
 801d4b2:	4629      	mov	r1, r5
 801d4b4:	4648      	mov	r0, r9
 801d4b6:	f7fd fa71 	bl	801a99c <_malloc_r>
 801d4ba:	b998      	cbnz	r0, 801d4e4 <__ssprint_r+0x80>
 801d4bc:	230c      	movs	r3, #12
 801d4be:	f8c9 3000 	str.w	r3, [r9]
 801d4c2:	89a3      	ldrh	r3, [r4, #12]
 801d4c4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801d4c8:	81a3      	strh	r3, [r4, #12]
 801d4ca:	2300      	movs	r3, #0
 801d4cc:	60bb      	str	r3, [r7, #8]
 801d4ce:	607b      	str	r3, [r7, #4]
 801d4d0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801d4d4:	e031      	b.n	801d53a <__ssprint_r+0xd6>
 801d4d6:	f8da b000 	ldr.w	fp, [sl]
 801d4da:	f8da 6004 	ldr.w	r6, [sl, #4]
 801d4de:	f10a 0a08 	add.w	sl, sl, #8
 801d4e2:	e7cc      	b.n	801d47e <__ssprint_r+0x1a>
 801d4e4:	4642      	mov	r2, r8
 801d4e6:	6921      	ldr	r1, [r4, #16]
 801d4e8:	9001      	str	r0, [sp, #4]
 801d4ea:	f7fd fc65 	bl	801adb8 <memcpy>
 801d4ee:	89a2      	ldrh	r2, [r4, #12]
 801d4f0:	9b01      	ldr	r3, [sp, #4]
 801d4f2:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
 801d4f6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 801d4fa:	81a2      	strh	r2, [r4, #12]
 801d4fc:	6123      	str	r3, [r4, #16]
 801d4fe:	6165      	str	r5, [r4, #20]
 801d500:	4443      	add	r3, r8
 801d502:	eba5 0508 	sub.w	r5, r5, r8
 801d506:	6023      	str	r3, [r4, #0]
 801d508:	60a5      	str	r5, [r4, #8]
 801d50a:	4633      	mov	r3, r6
 801d50c:	429e      	cmp	r6, r3
 801d50e:	d200      	bcs.n	801d512 <__ssprint_r+0xae>
 801d510:	4633      	mov	r3, r6
 801d512:	461a      	mov	r2, r3
 801d514:	4659      	mov	r1, fp
 801d516:	6820      	ldr	r0, [r4, #0]
 801d518:	9301      	str	r3, [sp, #4]
 801d51a:	f000 f82a 	bl	801d572 <memmove>
 801d51e:	68a2      	ldr	r2, [r4, #8]
 801d520:	9b01      	ldr	r3, [sp, #4]
 801d522:	1ad2      	subs	r2, r2, r3
 801d524:	60a2      	str	r2, [r4, #8]
 801d526:	6822      	ldr	r2, [r4, #0]
 801d528:	4413      	add	r3, r2
 801d52a:	6023      	str	r3, [r4, #0]
 801d52c:	68bb      	ldr	r3, [r7, #8]
 801d52e:	1b9e      	subs	r6, r3, r6
 801d530:	60be      	str	r6, [r7, #8]
 801d532:	2e00      	cmp	r6, #0
 801d534:	d1cf      	bne.n	801d4d6 <__ssprint_r+0x72>
 801d536:	2000      	movs	r0, #0
 801d538:	6078      	str	r0, [r7, #4]
 801d53a:	b003      	add	sp, #12
 801d53c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d540:	462a      	mov	r2, r5
 801d542:	4648      	mov	r0, r9
 801d544:	f000 f830 	bl	801d5a8 <_realloc_r>
 801d548:	4603      	mov	r3, r0
 801d54a:	2800      	cmp	r0, #0
 801d54c:	d1d6      	bne.n	801d4fc <__ssprint_r+0x98>
 801d54e:	6921      	ldr	r1, [r4, #16]
 801d550:	4648      	mov	r0, r9
 801d552:	f7ff fbcd 	bl	801ccf0 <_free_r>
 801d556:	e7b1      	b.n	801d4bc <__ssprint_r+0x58>

0801d558 <__ascii_wctomb>:
 801d558:	b149      	cbz	r1, 801d56e <__ascii_wctomb+0x16>
 801d55a:	2aff      	cmp	r2, #255	; 0xff
 801d55c:	bf85      	ittet	hi
 801d55e:	238a      	movhi	r3, #138	; 0x8a
 801d560:	6003      	strhi	r3, [r0, #0]
 801d562:	700a      	strbls	r2, [r1, #0]
 801d564:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 801d568:	bf98      	it	ls
 801d56a:	2001      	movls	r0, #1
 801d56c:	4770      	bx	lr
 801d56e:	4608      	mov	r0, r1
 801d570:	4770      	bx	lr

0801d572 <memmove>:
 801d572:	4288      	cmp	r0, r1
 801d574:	b510      	push	{r4, lr}
 801d576:	eb01 0302 	add.w	r3, r1, r2
 801d57a:	d803      	bhi.n	801d584 <memmove+0x12>
 801d57c:	1e42      	subs	r2, r0, #1
 801d57e:	4299      	cmp	r1, r3
 801d580:	d10c      	bne.n	801d59c <memmove+0x2a>
 801d582:	bd10      	pop	{r4, pc}
 801d584:	4298      	cmp	r0, r3
 801d586:	d2f9      	bcs.n	801d57c <memmove+0xa>
 801d588:	1881      	adds	r1, r0, r2
 801d58a:	1ad2      	subs	r2, r2, r3
 801d58c:	42d3      	cmn	r3, r2
 801d58e:	d100      	bne.n	801d592 <memmove+0x20>
 801d590:	bd10      	pop	{r4, pc}
 801d592:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801d596:	f801 4d01 	strb.w	r4, [r1, #-1]!
 801d59a:	e7f7      	b.n	801d58c <memmove+0x1a>
 801d59c:	f811 4b01 	ldrb.w	r4, [r1], #1
 801d5a0:	f802 4f01 	strb.w	r4, [r2, #1]!
 801d5a4:	e7eb      	b.n	801d57e <memmove+0xc>
	...

0801d5a8 <_realloc_r>:
 801d5a8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d5ac:	4682      	mov	sl, r0
 801d5ae:	460c      	mov	r4, r1
 801d5b0:	b929      	cbnz	r1, 801d5be <_realloc_r+0x16>
 801d5b2:	4611      	mov	r1, r2
 801d5b4:	b003      	add	sp, #12
 801d5b6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d5ba:	f7fd b9ef 	b.w	801a99c <_malloc_r>
 801d5be:	9201      	str	r2, [sp, #4]
 801d5c0:	f7fd fc0e 	bl	801ade0 <__malloc_lock>
 801d5c4:	9a01      	ldr	r2, [sp, #4]
 801d5c6:	f854 5c04 	ldr.w	r5, [r4, #-4]
 801d5ca:	f102 080b 	add.w	r8, r2, #11
 801d5ce:	f1b8 0f16 	cmp.w	r8, #22
 801d5d2:	f1a4 0908 	sub.w	r9, r4, #8
 801d5d6:	f025 0603 	bic.w	r6, r5, #3
 801d5da:	d90a      	bls.n	801d5f2 <_realloc_r+0x4a>
 801d5dc:	f038 0807 	bics.w	r8, r8, #7
 801d5e0:	d509      	bpl.n	801d5f6 <_realloc_r+0x4e>
 801d5e2:	230c      	movs	r3, #12
 801d5e4:	f8ca 3000 	str.w	r3, [sl]
 801d5e8:	2700      	movs	r7, #0
 801d5ea:	4638      	mov	r0, r7
 801d5ec:	b003      	add	sp, #12
 801d5ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d5f2:	f04f 0810 	mov.w	r8, #16
 801d5f6:	4590      	cmp	r8, r2
 801d5f8:	d3f3      	bcc.n	801d5e2 <_realloc_r+0x3a>
 801d5fa:	45b0      	cmp	r8, r6
 801d5fc:	f340 8145 	ble.w	801d88a <_realloc_r+0x2e2>
 801d600:	4ba8      	ldr	r3, [pc, #672]	; (801d8a4 <_realloc_r+0x2fc>)
 801d602:	f8d3 e008 	ldr.w	lr, [r3, #8]
 801d606:	eb09 0106 	add.w	r1, r9, r6
 801d60a:	4571      	cmp	r1, lr
 801d60c:	469b      	mov	fp, r3
 801d60e:	684b      	ldr	r3, [r1, #4]
 801d610:	d005      	beq.n	801d61e <_realloc_r+0x76>
 801d612:	f023 0001 	bic.w	r0, r3, #1
 801d616:	4408      	add	r0, r1
 801d618:	6840      	ldr	r0, [r0, #4]
 801d61a:	07c7      	lsls	r7, r0, #31
 801d61c:	d447      	bmi.n	801d6ae <_realloc_r+0x106>
 801d61e:	f023 0303 	bic.w	r3, r3, #3
 801d622:	4571      	cmp	r1, lr
 801d624:	eb06 0703 	add.w	r7, r6, r3
 801d628:	d119      	bne.n	801d65e <_realloc_r+0xb6>
 801d62a:	f108 0010 	add.w	r0, r8, #16
 801d62e:	4287      	cmp	r7, r0
 801d630:	db3f      	blt.n	801d6b2 <_realloc_r+0x10a>
 801d632:	eb09 0308 	add.w	r3, r9, r8
 801d636:	eba7 0708 	sub.w	r7, r7, r8
 801d63a:	f047 0701 	orr.w	r7, r7, #1
 801d63e:	f8cb 3008 	str.w	r3, [fp, #8]
 801d642:	605f      	str	r7, [r3, #4]
 801d644:	f854 3c04 	ldr.w	r3, [r4, #-4]
 801d648:	f003 0301 	and.w	r3, r3, #1
 801d64c:	ea43 0308 	orr.w	r3, r3, r8
 801d650:	f844 3c04 	str.w	r3, [r4, #-4]
 801d654:	4650      	mov	r0, sl
 801d656:	f7fd fbc9 	bl	801adec <__malloc_unlock>
 801d65a:	4627      	mov	r7, r4
 801d65c:	e7c5      	b.n	801d5ea <_realloc_r+0x42>
 801d65e:	45b8      	cmp	r8, r7
 801d660:	dc27      	bgt.n	801d6b2 <_realloc_r+0x10a>
 801d662:	68cb      	ldr	r3, [r1, #12]
 801d664:	688a      	ldr	r2, [r1, #8]
 801d666:	60d3      	str	r3, [r2, #12]
 801d668:	609a      	str	r2, [r3, #8]
 801d66a:	eba7 0008 	sub.w	r0, r7, r8
 801d66e:	280f      	cmp	r0, #15
 801d670:	f8d9 3004 	ldr.w	r3, [r9, #4]
 801d674:	eb09 0207 	add.w	r2, r9, r7
 801d678:	f240 8109 	bls.w	801d88e <_realloc_r+0x2e6>
 801d67c:	eb09 0108 	add.w	r1, r9, r8
 801d680:	f003 0301 	and.w	r3, r3, #1
 801d684:	ea43 0308 	orr.w	r3, r3, r8
 801d688:	f040 0001 	orr.w	r0, r0, #1
 801d68c:	f8c9 3004 	str.w	r3, [r9, #4]
 801d690:	6048      	str	r0, [r1, #4]
 801d692:	6853      	ldr	r3, [r2, #4]
 801d694:	f043 0301 	orr.w	r3, r3, #1
 801d698:	6053      	str	r3, [r2, #4]
 801d69a:	3108      	adds	r1, #8
 801d69c:	4650      	mov	r0, sl
 801d69e:	f7ff fb27 	bl	801ccf0 <_free_r>
 801d6a2:	4650      	mov	r0, sl
 801d6a4:	f7fd fba2 	bl	801adec <__malloc_unlock>
 801d6a8:	f109 0708 	add.w	r7, r9, #8
 801d6ac:	e79d      	b.n	801d5ea <_realloc_r+0x42>
 801d6ae:	2300      	movs	r3, #0
 801d6b0:	4619      	mov	r1, r3
 801d6b2:	07e8      	lsls	r0, r5, #31
 801d6b4:	f100 8084 	bmi.w	801d7c0 <_realloc_r+0x218>
 801d6b8:	f854 5c08 	ldr.w	r5, [r4, #-8]
 801d6bc:	eba9 0505 	sub.w	r5, r9, r5
 801d6c0:	6868      	ldr	r0, [r5, #4]
 801d6c2:	f020 0003 	bic.w	r0, r0, #3
 801d6c6:	4430      	add	r0, r6
 801d6c8:	2900      	cmp	r1, #0
 801d6ca:	d076      	beq.n	801d7ba <_realloc_r+0x212>
 801d6cc:	4571      	cmp	r1, lr
 801d6ce:	d150      	bne.n	801d772 <_realloc_r+0x1ca>
 801d6d0:	4403      	add	r3, r0
 801d6d2:	f108 0110 	add.w	r1, r8, #16
 801d6d6:	428b      	cmp	r3, r1
 801d6d8:	db6f      	blt.n	801d7ba <_realloc_r+0x212>
 801d6da:	462f      	mov	r7, r5
 801d6dc:	68ea      	ldr	r2, [r5, #12]
 801d6de:	f857 1f08 	ldr.w	r1, [r7, #8]!
 801d6e2:	60ca      	str	r2, [r1, #12]
 801d6e4:	6091      	str	r1, [r2, #8]
 801d6e6:	1f32      	subs	r2, r6, #4
 801d6e8:	2a24      	cmp	r2, #36	; 0x24
 801d6ea:	d83b      	bhi.n	801d764 <_realloc_r+0x1bc>
 801d6ec:	2a13      	cmp	r2, #19
 801d6ee:	d936      	bls.n	801d75e <_realloc_r+0x1b6>
 801d6f0:	6821      	ldr	r1, [r4, #0]
 801d6f2:	60a9      	str	r1, [r5, #8]
 801d6f4:	6861      	ldr	r1, [r4, #4]
 801d6f6:	60e9      	str	r1, [r5, #12]
 801d6f8:	2a1b      	cmp	r2, #27
 801d6fa:	d81c      	bhi.n	801d736 <_realloc_r+0x18e>
 801d6fc:	f105 0210 	add.w	r2, r5, #16
 801d700:	f104 0108 	add.w	r1, r4, #8
 801d704:	6808      	ldr	r0, [r1, #0]
 801d706:	6010      	str	r0, [r2, #0]
 801d708:	6848      	ldr	r0, [r1, #4]
 801d70a:	6050      	str	r0, [r2, #4]
 801d70c:	6889      	ldr	r1, [r1, #8]
 801d70e:	6091      	str	r1, [r2, #8]
 801d710:	eb05 0208 	add.w	r2, r5, r8
 801d714:	eba3 0308 	sub.w	r3, r3, r8
 801d718:	f043 0301 	orr.w	r3, r3, #1
 801d71c:	f8cb 2008 	str.w	r2, [fp, #8]
 801d720:	6053      	str	r3, [r2, #4]
 801d722:	686b      	ldr	r3, [r5, #4]
 801d724:	f003 0301 	and.w	r3, r3, #1
 801d728:	ea43 0308 	orr.w	r3, r3, r8
 801d72c:	606b      	str	r3, [r5, #4]
 801d72e:	4650      	mov	r0, sl
 801d730:	f7fd fb5c 	bl	801adec <__malloc_unlock>
 801d734:	e759      	b.n	801d5ea <_realloc_r+0x42>
 801d736:	68a1      	ldr	r1, [r4, #8]
 801d738:	6129      	str	r1, [r5, #16]
 801d73a:	68e1      	ldr	r1, [r4, #12]
 801d73c:	6169      	str	r1, [r5, #20]
 801d73e:	2a24      	cmp	r2, #36	; 0x24
 801d740:	bf01      	itttt	eq
 801d742:	6922      	ldreq	r2, [r4, #16]
 801d744:	61aa      	streq	r2, [r5, #24]
 801d746:	6960      	ldreq	r0, [r4, #20]
 801d748:	61e8      	streq	r0, [r5, #28]
 801d74a:	bf19      	ittee	ne
 801d74c:	f105 0218 	addne.w	r2, r5, #24
 801d750:	f104 0110 	addne.w	r1, r4, #16
 801d754:	f105 0220 	addeq.w	r2, r5, #32
 801d758:	f104 0118 	addeq.w	r1, r4, #24
 801d75c:	e7d2      	b.n	801d704 <_realloc_r+0x15c>
 801d75e:	463a      	mov	r2, r7
 801d760:	4621      	mov	r1, r4
 801d762:	e7cf      	b.n	801d704 <_realloc_r+0x15c>
 801d764:	4621      	mov	r1, r4
 801d766:	4638      	mov	r0, r7
 801d768:	9301      	str	r3, [sp, #4]
 801d76a:	f7ff ff02 	bl	801d572 <memmove>
 801d76e:	9b01      	ldr	r3, [sp, #4]
 801d770:	e7ce      	b.n	801d710 <_realloc_r+0x168>
 801d772:	18c7      	adds	r7, r0, r3
 801d774:	45b8      	cmp	r8, r7
 801d776:	dc20      	bgt.n	801d7ba <_realloc_r+0x212>
 801d778:	68cb      	ldr	r3, [r1, #12]
 801d77a:	688a      	ldr	r2, [r1, #8]
 801d77c:	60d3      	str	r3, [r2, #12]
 801d77e:	609a      	str	r2, [r3, #8]
 801d780:	4628      	mov	r0, r5
 801d782:	68eb      	ldr	r3, [r5, #12]
 801d784:	f850 2f08 	ldr.w	r2, [r0, #8]!
 801d788:	60d3      	str	r3, [r2, #12]
 801d78a:	609a      	str	r2, [r3, #8]
 801d78c:	1f32      	subs	r2, r6, #4
 801d78e:	2a24      	cmp	r2, #36	; 0x24
 801d790:	d842      	bhi.n	801d818 <_realloc_r+0x270>
 801d792:	2a13      	cmp	r2, #19
 801d794:	d93e      	bls.n	801d814 <_realloc_r+0x26c>
 801d796:	6823      	ldr	r3, [r4, #0]
 801d798:	60ab      	str	r3, [r5, #8]
 801d79a:	6863      	ldr	r3, [r4, #4]
 801d79c:	60eb      	str	r3, [r5, #12]
 801d79e:	2a1b      	cmp	r2, #27
 801d7a0:	d824      	bhi.n	801d7ec <_realloc_r+0x244>
 801d7a2:	f105 0010 	add.w	r0, r5, #16
 801d7a6:	f104 0308 	add.w	r3, r4, #8
 801d7aa:	681a      	ldr	r2, [r3, #0]
 801d7ac:	6002      	str	r2, [r0, #0]
 801d7ae:	685a      	ldr	r2, [r3, #4]
 801d7b0:	6042      	str	r2, [r0, #4]
 801d7b2:	689b      	ldr	r3, [r3, #8]
 801d7b4:	6083      	str	r3, [r0, #8]
 801d7b6:	46a9      	mov	r9, r5
 801d7b8:	e757      	b.n	801d66a <_realloc_r+0xc2>
 801d7ba:	4580      	cmp	r8, r0
 801d7bc:	4607      	mov	r7, r0
 801d7be:	dddf      	ble.n	801d780 <_realloc_r+0x1d8>
 801d7c0:	4611      	mov	r1, r2
 801d7c2:	4650      	mov	r0, sl
 801d7c4:	f7fd f8ea 	bl	801a99c <_malloc_r>
 801d7c8:	4607      	mov	r7, r0
 801d7ca:	2800      	cmp	r0, #0
 801d7cc:	d0af      	beq.n	801d72e <_realloc_r+0x186>
 801d7ce:	f854 3c04 	ldr.w	r3, [r4, #-4]
 801d7d2:	f023 0301 	bic.w	r3, r3, #1
 801d7d6:	f1a0 0208 	sub.w	r2, r0, #8
 801d7da:	444b      	add	r3, r9
 801d7dc:	429a      	cmp	r2, r3
 801d7de:	d11f      	bne.n	801d820 <_realloc_r+0x278>
 801d7e0:	f850 7c04 	ldr.w	r7, [r0, #-4]
 801d7e4:	f027 0703 	bic.w	r7, r7, #3
 801d7e8:	4437      	add	r7, r6
 801d7ea:	e73e      	b.n	801d66a <_realloc_r+0xc2>
 801d7ec:	68a3      	ldr	r3, [r4, #8]
 801d7ee:	612b      	str	r3, [r5, #16]
 801d7f0:	68e3      	ldr	r3, [r4, #12]
 801d7f2:	616b      	str	r3, [r5, #20]
 801d7f4:	2a24      	cmp	r2, #36	; 0x24
 801d7f6:	bf01      	itttt	eq
 801d7f8:	6923      	ldreq	r3, [r4, #16]
 801d7fa:	61ab      	streq	r3, [r5, #24]
 801d7fc:	6962      	ldreq	r2, [r4, #20]
 801d7fe:	61ea      	streq	r2, [r5, #28]
 801d800:	bf19      	ittee	ne
 801d802:	f105 0018 	addne.w	r0, r5, #24
 801d806:	f104 0310 	addne.w	r3, r4, #16
 801d80a:	f105 0020 	addeq.w	r0, r5, #32
 801d80e:	f104 0318 	addeq.w	r3, r4, #24
 801d812:	e7ca      	b.n	801d7aa <_realloc_r+0x202>
 801d814:	4623      	mov	r3, r4
 801d816:	e7c8      	b.n	801d7aa <_realloc_r+0x202>
 801d818:	4621      	mov	r1, r4
 801d81a:	f7ff feaa 	bl	801d572 <memmove>
 801d81e:	e7ca      	b.n	801d7b6 <_realloc_r+0x20e>
 801d820:	1f32      	subs	r2, r6, #4
 801d822:	2a24      	cmp	r2, #36	; 0x24
 801d824:	d82d      	bhi.n	801d882 <_realloc_r+0x2da>
 801d826:	2a13      	cmp	r2, #19
 801d828:	d928      	bls.n	801d87c <_realloc_r+0x2d4>
 801d82a:	6823      	ldr	r3, [r4, #0]
 801d82c:	6003      	str	r3, [r0, #0]
 801d82e:	6863      	ldr	r3, [r4, #4]
 801d830:	6043      	str	r3, [r0, #4]
 801d832:	2a1b      	cmp	r2, #27
 801d834:	d80e      	bhi.n	801d854 <_realloc_r+0x2ac>
 801d836:	f100 0308 	add.w	r3, r0, #8
 801d83a:	f104 0208 	add.w	r2, r4, #8
 801d83e:	6811      	ldr	r1, [r2, #0]
 801d840:	6019      	str	r1, [r3, #0]
 801d842:	6851      	ldr	r1, [r2, #4]
 801d844:	6059      	str	r1, [r3, #4]
 801d846:	6892      	ldr	r2, [r2, #8]
 801d848:	609a      	str	r2, [r3, #8]
 801d84a:	4621      	mov	r1, r4
 801d84c:	4650      	mov	r0, sl
 801d84e:	f7ff fa4f 	bl	801ccf0 <_free_r>
 801d852:	e76c      	b.n	801d72e <_realloc_r+0x186>
 801d854:	68a3      	ldr	r3, [r4, #8]
 801d856:	6083      	str	r3, [r0, #8]
 801d858:	68e3      	ldr	r3, [r4, #12]
 801d85a:	60c3      	str	r3, [r0, #12]
 801d85c:	2a24      	cmp	r2, #36	; 0x24
 801d85e:	bf01      	itttt	eq
 801d860:	6923      	ldreq	r3, [r4, #16]
 801d862:	6103      	streq	r3, [r0, #16]
 801d864:	6961      	ldreq	r1, [r4, #20]
 801d866:	6141      	streq	r1, [r0, #20]
 801d868:	bf19      	ittee	ne
 801d86a:	f100 0310 	addne.w	r3, r0, #16
 801d86e:	f104 0210 	addne.w	r2, r4, #16
 801d872:	f100 0318 	addeq.w	r3, r0, #24
 801d876:	f104 0218 	addeq.w	r2, r4, #24
 801d87a:	e7e0      	b.n	801d83e <_realloc_r+0x296>
 801d87c:	4603      	mov	r3, r0
 801d87e:	4622      	mov	r2, r4
 801d880:	e7dd      	b.n	801d83e <_realloc_r+0x296>
 801d882:	4621      	mov	r1, r4
 801d884:	f7ff fe75 	bl	801d572 <memmove>
 801d888:	e7df      	b.n	801d84a <_realloc_r+0x2a2>
 801d88a:	4637      	mov	r7, r6
 801d88c:	e6ed      	b.n	801d66a <_realloc_r+0xc2>
 801d88e:	f003 0301 	and.w	r3, r3, #1
 801d892:	431f      	orrs	r7, r3
 801d894:	f8c9 7004 	str.w	r7, [r9, #4]
 801d898:	6853      	ldr	r3, [r2, #4]
 801d89a:	f043 0301 	orr.w	r3, r3, #1
 801d89e:	6053      	str	r3, [r2, #4]
 801d8a0:	e6ff      	b.n	801d6a2 <_realloc_r+0xfa>
 801d8a2:	bf00      	nop
 801d8a4:	20001e20 	.word	0x20001e20

0801d8a8 <_init>:
 801d8a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801d8aa:	bf00      	nop
 801d8ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801d8ae:	bc08      	pop	{r3}
 801d8b0:	469e      	mov	lr, r3
 801d8b2:	4770      	bx	lr

0801d8b4 <_fini>:
 801d8b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801d8b6:	bf00      	nop
 801d8b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801d8ba:	bc08      	pop	{r3}
 801d8bc:	469e      	mov	lr, r3
 801d8be:	4770      	bx	lr
